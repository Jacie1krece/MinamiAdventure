//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.78;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.78] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

function _0x5eaa(){const _0x291895=['jsOneForOne','CommandVisible','prototype','isJumping','uNSfN','IconStypeMagic','ActSeq_Mechanics_BreakShieldReset','softDamageCapRate','xaTlm','VisuMZ_2_PartySystem','updateUiContainerPosition','ITEM','autoMeleeSingleTargetActionSet','Game_Party_addActor','ActSeq_Movement_FacePoint','CriticalDmgRate','startOpacity','setupDesaturateImpactFilter','recoverAll','SHOW_BUTTON','Game_Actor_setup','isDTB','wzdEL','executeDamage','_enemyNameContainer','PrioritySortActive','Text','_skillIDs','registerDefeatedEnemy','shlLQ','_text','iIoIL','eGLAX','dQxAg','Window_BattleLog_performActionStart','Defeat','STR','Frame','waitForEffect','hYxPR','onEncounterBattleCore','performTpbActiveCheckSwitch','isUndecided','makeTargetsBattleCore','Parse_Notetags_TraitObjects','zkYkr','Targets2','Scene_Battle_skillWindowRect','jskKN','deactivate','_jumpDuration','LcvwJ','ReflectPlayback','RGbUI','performLifeSteal','ActSeq_Movement_Scale','lSEga','JS\x20%1START\x20ACTION','CheckMapBattleEventValid','FaceDirection','gainCurrentActionsFTB','Window_BattleEnemy_hide','itemLineRect','ArPenFlat','createBattleUIOffsetX','battleCamera','ShowSubstitute','setupDamagePopup','Scene_Battle_createCancelButton','default','setupWeaponAnimation','Shadow','repeatTargets','toUpperCase','MAXHP','updateKeyboardKeys','DefaultSoftScaler','+%1\x20MP','useItem','_ptbActionCost','PopupDuration','AszYq','KUqsB','setBattlerFacePoint','_baseY','YWAek','isChanting','createKeyJS','_attackAnimationId','split','nYxwq','jIjsy','AfTCs','Game_Battler_makeSpeed','sQlYr','MCSZD','getItemDamageAmountLabelBattleCore','mHtIv','VariableDmg','ActSeq_Projectile_Animation','offsetY','PreRegenerateJS','KXeRn','Game_Map_encounterList','VoiceLine','isTpbCharged','performFlinch','displayChangedStates','performSubstitute','ActorOffsetY','QwRXd','drawItemStatusListStyle','BattleManager_endBattle','applyAngleChange','NubNg','_statusType','PreStartBattleJS','getInputButtonString','DistanceY','collapseType','negativeHpLifeSteal','ParseWeaponNotetags','tone','BattleManager_processDefeat','ShowEnemyGauge','DisplayAction','_baseLineStack','portraitIndex','startVisualCutin','preemptive','motionType','context','Game_Action_makeDamageValueDisperse','ActSeq_BattleLog_PopBaseLine','actions','PreDamageAsUserJS','yiZua','isForAliveFriendBattleCore','movement','Game_Interpreter_updateWaitMode','Override','callUpdateHelp','terminate','ttBNm','AllEnemiesText','ohrbp','OQRfw','drawItem','FayiP','evZaO','OwRyp','evaded','WgIHK','wait','createTargetsJS','Sprite_AnimationMV_updatePosition','alive\x20friends\x20not\x20user','wypXv','startDamagePopup','ActSeq_Movement_Skew','Scene_Battle_logWindowRect','effects','stepFlinch','CmdIconAutoBattle','DxaKK','calcWindowHeight','clearElementChanges','isTurnBased','seZQE','onTurnEnd','flashColor','_windowLayer','erwNC','showPortraits','2730610lTCpPI','loadPicture','VSvhD','_createCursorArea','ArRedFlat','isAffectedByBreakShield','tpbActorSwitchConditionsMet','WaitForZoom','IFfIH','pBVUH','isPTB','updateBattlebackBitmap1','isDrain','type','isAnimationPlaying','cmYcW','rowSpacing','filters','Game_Enemy_transform','ShowReflect','commandName','customDamageFormula','Game_Action_executeHpDamage','stop','refresh','extraHeight','addFightCommand','BsBrt','jump','command3011','loop','drawItemImage','symbol','VenER','addWindow','MFEOa','ShuffleArray','Window_BattleLog_refresh','VMtpE','KDWkQ','missed','makeDamageValue','_updateClientArea','DisablePartyCmd','_createCursorSprite','AutoBattleMsg','createMainSprite','VisuMZ_2_BattleSystemATB','attackSkillId','addGuardCommand','ActSeq_Impact_Negative','ActSeq_Mechanics_CtbOrder','updateJump','targetObjects','battleLayoutStyle','JGCvX','initElementStatusCore','getDefeatedEnemies','globalAlpha','sElQl','processAbort','_opacityWholeDuration','moveBattlerDistance','createMultiTargetWindows','portraitFlipHorz','ZOTgf','hide','alterBreakShield','isSkillItemWindowsMiddle','farOn','displayChangedBuffs','initMembers','fWvEQ','parseForcedGameTroopSettingsBattleCore','_forcing','abnormal','_targetIndex','drawIcon','onEscapeSuccess','applyBattleCoreJS','KnhIL','AlphaFilter','Skill-%1-%2','onOpacityEnd','BattleManager_initMembers','pop','Game_Action_setItem','VariableHeal','States','setBlendColor','singleSkill','playBattleVoice','isActionSelectionValid','_currentAngle','adjustFlippedBattlefield','QDggG','zhQes','onGrowEnd','clear','onBattleStartBattleCore','_lastHpDamage','icon','ParseStateNotetags','onStaticEnemyBitmapLoad','isBorderStylePortraitShown','CriticalHitFlat','DUump','drawEnemyName','clearActiveWeaponSlot','startInput','nCdjV','PFbXJ','mwdqC','HitFlat','battlerShadowScaleY','setLastPluginCommandInterpreter','waitCount','coreEngineRepositionEnemies','performJump','shouldDisperseDamage','_enemy','stmZr','padding','Window_BattleLog_displayCritical','MavRV','nkGwa','AniDuration','isRightInputMode','iconHeight','_activeWeaponSlot','hoIFM','Game_Action_isForAll','PreDamageJS','Scene_Map_initialize','applyArmorModifiers','ShowFailure','isBTB','setSubject','DepJB','updateMotionCount','initBattleCore','ActSeq_Mechanics_PtbAlterCost','canSingleOrMultipleSelect','ZwxgS','Window_BattleEnemy_initialize','setupBattleCore','BsaEf','EnableSoftCap','_padding','makeAutoBattleActions','KnebA','find','stypeId','Parse_Notetags_Targets','drawBackgroundRect','EasingType','hardDamageCap','_target','ParseClassNotetags','setBattleZoom','XlGsg','statusText','VisuMZ_4_CombatLog','VPSxd','Opacity','alive\x20actors\x20not\x20target','setSTBExploited','uQCaT','aLjcB','BindCommonEventKeysForObj','isFrameVisible','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','mJgnU','Game_Battler_onTurnEnd','offsetX','MVMzk','XQsla','shouldHideBattleEndPopups','_actorWindow','bffly','requestFauxAnimation','Window_BattleStatus_drawItemImage','OoKRj','oOqSf','_skewY','ActSeq_Movement_HomeMoveToTarget','equips','getBattlePortraitFilename','currentClass','hasSvBattler','VisuMZ_3_ActSeqProjectiles','attackAnimationId1','Game_Battler_performEvasion','BPcjG','growBattler','Width','_enemies','mnRiK','setupNegativeImpactFilter','Actor-%1-%2','%1-%2','SvWeaponMass-%1-%2','isOptionsCommandEnabled','updateBorderSprite','ShowFacesListStyle','drawGauge','YiDoz','BattleStartEvent','canMove','reserveCommonEvent','innerHeight','bvuAu','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','ActSeq_Element_Clear','JS\x20ESCAPE\x20SUCCESS','PostApply%1JS','gainMp','battleCoreResumeLaunchBattle','onMoveEnd','DamageRate','getLastHpDamage','DVOca','JS\x20%1APPLY\x20%2','Rate','_cancelButton','createActorCommandWindow','_partyCommandWindow','onSkewEnd','ActSeqImpact','iTMBu','svBattlerName','kFXse','ActSeq_Projectile_Picture','hHTXD','kjlrR','Scene_Battle_startPartyCommandSelection','ActSeq_Animation_ActionAnimation','ActSeq_Mechanics_CustomDmgFormula','addOnceParallelInterpreter','prev\x20target','ARRAYEVAL','_tempEquipCheck','checkExtendTroopCompatibility','dying','OFYZL','_createClientArea','ShowTpDmg','JDjiT','SkewX','airtC','needsActorInputCancel','gainCurrentActionsETB','mainSpriteScaleY','createDamageContainer','VisuMZ_3_WeaknessDisplay','setupBlueRedInvertImpactFilter','Game_Action_executeMpDamage','Window_BattleLog_displayActionResults','StartTurnShow','_skewX','forceEscapeSprite','width','removeStatesAuto','mpHealingFmt','OjVoL','_fauxAnimationSprites','equipSlots','placeGauge','OffsetX','Window_BattleLog_displayCurrentState','uWmlJ','gainHalfActionsPTB','ActionEffect','isBypassDamageCap','inBattle','_preBattleCommonEvent','BgType','tVGKs','updatePhase','ALL_ACTORS','popBaseLine','MP_Rate','_inputting','thrust','applyForcedGameTroopSettingsBattleCore','Scene_Battle_partyCommandWindowRect','JS\x20%1DAMAGE\x20%2','WaitForEffect','worldTransform','dimColor1','_duration','filterArea','traitObjects','displayItemMessage','battlerName','itemHit','ActionSkillMsg2','vSZxw','updateAttachedSprites','iZObx','action','NameAttachStateIcon','FlashDuration','SkillItemMiddleLayout','KDWYO','JADmw','prepareCustomActionSequence','evalDamageFormula','ERiBH','preparePartyRefresh','uGtdl','isAnyoneFloating','HvMYI','ActSeq_Camera_FocusTarget','qtupH','itemCri','pdjJT','JzVGA','setupBattleCoreData','priority','omJCE','_damages','isBreakStunned','Window_BattleLog_popupDamage','drawItemStatusXPStyle','requestPointAnimation','PreStartTurnJS','ODNkp','PbIsE','reduce','stateMotionIndex','pointY','_executeHpDamage','isMagicSkill','animationWait','children','_onceParallelInterpreters','_angleDuration','DigitGrouping','MotionFrameWait','ActSeq_BattleLog_UI','Window_BattleLog_performDamage','DefaultDamageStyle','_angleWholeDuration','updateStateSprite','_motionCount','TTJtj','floatBattler','Window_BattleLog_performMagicEvasion','hOSxz','Window_PartyCommand_initialize','_enemyWindowMode','performAttackSlot','createHelpWindowBattleCore','updateCancel','battleback1Name','opponentsUnit','YienU','nzRtE','visible','_shadowSprite','DgEPl','origin','ChangeOrderBy','ucUlt','ActSeq_Animation_CastAnimation','multiTargetWindowRect','SmoothImage','_lines','createStateSprite','JMhaU','tiIxv','ActSeq_DB_DragonbonesMotionAni','Class-%1-%2','QKbba','REmWQ','VbLyG','drawItemImageXPStyle','updatePosition','DualWield','hpAffected','MaGwu','CheckVisibleSwitchNotetags','battleCommandIcon','_targetSkewX','endAnimation','iconWidth','arPenRate','ActionCenteredName','Scene_Party','Scene_Battle_createActorCommandWindow','ApplyImmortal','createActors','isBattleTest','kFnco','updatePadding','gainStoredBoostPoints','yhJgE','uYlAe','autoMeleeMultiTargetActionSet','GNDId','_forActor','destroyDamageSprite','arPenFlat','Window_BattleLog_performEvasion','VisuMZ_4_BreakShields','displayRemovedStates','setBattlerBattleCore','front\x20center','WvErj','scope','ActSeq_Impact_TimeScale','DestinationJS','ParseItemNotetags','zozkT','isDebuffAffected','ylWMT','NewPopupBottom','drawTextTopAligned','ATK','jsScaleToFit','_animationContainer','JYEvI','DefeatEvent','_statusWindow','isPlaytest','_surprise','Krwrz','canGuard','UjmlM','Scene_ItemBase_applyItem','changeAtbCastTime','ANTI_TINT_UI','addChild','encounterList','lrIOT','Scene_Options_maxCommands','message2','zyDGp','Game_Action_setGuard','Game_Battler_startTpbTurn','_index','BITQV','bgType','displayAction','_active','CriticalHitMultiplier','MotionSpeed','onSelectAction','lifeStealTrait','isBattlerFlipped','ActSeq_Mechanics_AtbGauge','RiIPS','MQoOf','DefaultHardCap','VisuMZ_2_BattleSystemPTB','AllowRandomSpeed','Game_Action_setSubject','createAttachedSprites','visualCutinPortraitIndex','isSkipPartyCommandWindow','GetActionSequenceSpecialTarget','processRefresh','ActSeq_Cutin_WaitForExit','Scene_Battle_itemWindowRect','startMotion','ActSeq_Mechanics_ActionEffect','pagedown','XPActorCommandLines','transform','QaIjl','DFOmf','Scene_Battle_onEnemyOk','setupChild','_damageContainer','ActSeq_Mechanics_VariablePopup','applyImmortal','BattleVictoryJS','mZYDZ','startSpin','ConfigManager_applyData','onActorOk','aLstY','border','isSTB','frontviewSpriteY','Window_BattleEnemy_show','criticalDmgFlat','ActSeq_Horror_GlitchCreate','Xhvtz','kEzDq','playEnemyAttack','ActSeq_Mechanics_StbExtraAction','setWaitMode','command283','BTB','text','updateStateSpriteBattleCore','fZDgE','FRhfp','jRzTa','ActSeq_Mechanics_TextPopup','ymySc','EMuGp','mpDamageFmt','_uiContainer','makeCommandList','UCFbR','cezIj','setActiveWeaponSlot','dOmFl','name','targetDistortionSpritePosition','all\x20enemies','freezeMotion','onFloatEnd','Scene_Battle_startActorSelection','hGEaA','setupZoomBlurImpactFilter','FWgPD','CreateCutinSettings','EscapeFailureJS','createMultiTargetWindow','HDcNZ','AhjrT','Spriteset_Battle_createLowerLayer','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','_drawTextBody','Game_Battler_onBattleEnd','hasStaticSvBattler','KQpCT','motionIdle','attack','waitForAnimation','Scene_Battle_commandFight','stopInjectAnimation','_floatHeight','mainSpriteWidth','setHalfActionsPTB','VtNgu','kmEKc','ghhjn','executeMpDamage','BattleManager_cancelActorInput','Sprite_Battler_setBattler','iEQET','displayBuffs','createEnemyNames','displayEvasion','displayCurrentState','RoBza','isMVAnimation','changeAtbChargeTime','gJZYG','XFqwV','_back1Sprite','updateCustomActionSequence','ywdfs','OIykJ','QKDWb','ALL_ENEMIES','createBattleFieldContainer','becomeSTBExploited','performCounter','_actor','All\x20Enemies','NUbcz','PRE-','measureTextWidth','ActSeq_Movement_WaitForScale','Post','criticalDmgRate','VYaBT','zMZEh','FrontViewSelect','lastBattleSkill','refreshActorPortrait','addAnimationSpriteToContainer','%1Damage%2JS','WaitCount1','setLastBattleSkill','thSDI','QMXVI','ParseSkillNotetags','WEAPON\x20SWAP','Radius','GYfhV','svActorVertCells','canBattlerMove','386018TEaRZR','BindCommonEventKeysForGroup','applyItem','addGeneralOptions','ActSeq_Animation_ChangeBattlePortrait','flipVisualCutinHorz','itemEffectAddNormalState','DamageDisplay','Game_Map_battleback1Name','NJXvO','mainFontSize','hasBeenDefeatedBefore','ActSeq_Impact_Oversaturate','linkSprite','isInputting','lastFilename','isGuardLifeSteal','clearBattleCoreData','_methods','Window_SkillList_maxCols','battleCameraData','physical','battleback2Name','aaWuZ','Settings','update','createTroopNote','HITTYPE_CERTAIN','Scene_Battle_createPartyCommandWindow','AttackAnimation','initBattlePortrait','commandStyleCheck','_targetGrowY','resetResultSwitches','_battleCoreAddedElements','_lineHeight','StyleON','WaitForOpacity','skewDuration','alterPriority','anchorX','createStateIconSprite','Name','escape','hidden','CounterPlayback','COMBAT\x20LOG','Game_Battler_onBattleStart','yLWRU','_waitCount','commandRemember','5zIMCIp','makeDeepCopy','_doubleTouch','startJump','mpDamage','isForNotUser','MXCPK','_preemptive','ShowAddedDebuff','CalcActionSpeedJS','Point','drawSkillCost','HomePosJS','freezeFrame','jZdlY','ActSeq_Movement_Opacity','bottom','kwioc','aOPDI','processAnimationRequests','DQxkh','BARE\x20HANDS','ciZOJ','Uogqj','canUseItemCommand','VisuMZ_2_AggroControlSystem','cGpes','status','isCharging','HvGhG','ActSeq_Mechanics_DamagePopup','rOOei','aUxrw','processBorderActor','_enemyIDs','dLXau','esKzS','parent','isAlwaysHidden','startMove','Game_BattlerBase_die','createHpGaugeSprite','MotionIdle','83405gBhoPv','qaPCW','select','BattleLayout','allowCollapse','hSsSQ','shadow','LxHru','base','maxCols','process_VisuMZ_BattleCore_jsFunctions','NameAlwaysVisible','VNDWW','removeActor','clamp','DddDp','Window_BattleLog_displayMiss','acQRR','battleVoices','Sprite_Actor_updateShadow','AnimationID','closeBattleActorWindow','_floatDuration','Game_Action_makeTargets','getItemDamageAmountTextBattleCore','StartTurnMsg','isFriendly','Game_Action_itemTargetCandidates','WaitForAnimation','requestMotionRefresh','iNawc','applyHardDamageCap','getBattlePortrait','BattleDefeatJS','BackColor','startWeaponAnimation','removeImmortal','ActSeq_Camera_Clamp','qODul','logWindowRect','addCommand','addLoadListener','uiInputPosition','ScaleX','map','attackMotions','gCrZU','JS\x20%1START\x20BATTLE','onDisabledPartyCommandSelection','call','xTvrF','PcgAA','BattleManager_onEscapeFailure','value','cutinExit','YLrNP','XPSpriteYLocation','hpDamage','stepForward','startActorSelection','ChantStyle','displayCounter','performActionEnd','ScaleUp','checkSceneBattleTransitionable','tBiva','_forcedBattlers','_action','makeEscapeRatio','ActSeq_Impact_Desaturate','drain','addTextToCombatLog','TzZpo','battleStatusSprite','isChangingOpacity','iqgTO','addAutoBattleCommands','AutoMeleeAoE','uOyNJ','RCfSo','battleMove','deselect','CmdTextAutoBattle','zjyyR','missile','AutoMeleeSolo','Game_Enemy_setup','swapEnemyIDs','svAnchorX','ncNqj','PreEndActionJS','performMoveToTargets','alive\x20enemies','ActSeq_Cutin_EndVisualCutinEffectAll','setBattleCameraOffset','atbInterrupt','startAttackWeaponAnimation','commandAutoBattle','Scene_Battle_createEnemyWindow','CriticalDmgFlat','Window_BattleStatus_initialize','position','Game_BattlerBase_meetsUsableItemConditions','updateOnceParallelInterpreters','_opacityDuration','_back2Sprite','ActSeq_Mechanics_OtbOrder','ExNbP','_actionBattlers','setCommonEvent','isActing','finalizeScale','contains','lCEZg','updateBattlebackBitmap','portrait','needsSelectionBattleCore','xjErI','fnordRemovedStates','setHelpWindowItem','itemTextAlign','_battleCoreBattleResumeAfter','LrMSV','playOnceParallelInterpreter','Window_BattleLog_displayTpDamage','ActSeq_Camera_WaitForCamera','fqnIn','HelpItem','actorCommandCancelTPB','QjgYZ','DZKAr','YWCEp','HwvHl','UUtro','performAttack','abs','setCursorRect','setBattleAngle','drawActorFace','commandStyle','process_VisuMZ_BattleCore_DamageStyles','battleZoom','Weapon-%1-%2','ActSeq_Animation_AttackAnimation','Slot','nokco','lAhni','MeleeDistance','note','HpGaugeOffsetY','CriticalDuration','ShakeFlinchDuration','updateBitmap','ArPenRate','Sprite_Weapon_loadBitmap','createCommandVisibleJS','addChildToUiContainer','createHelpWindow','ARRAYJSON','ActSeq_Animation_WaitForAnimation','_shakeFlinchPower','StatusWindowAttachmentBackOffsetY','_reflectionTarget','jcyDr','selectNextCommandTpb','setActiveWeaponSet','deadMembers','StepDistanceY','VisuMZ_3_BoostAction','ActSeq_Movement_MoveToPoint','battlerShadowScaleX','Game_BattlerBase_refresh','Window_BattleActor_hide','makeHpDamageText','smoothness','toUseBoostPoints','isCancelLifeSteal','skillWindowRect','updateSkew','Game_Action_clear','xzsjz','PostDamageAsTargetJS','EufUe','guardSkillId','processTurn','xntXk','adjustPosition_ScaleDown','createAllWindows','gainFullActionsPTB','registerCommand','_mainSprite','_targetBattlerKey','index','anchor','requestAnimation','removeHorrorEffect','\x20to\x20%1\x20midbattle.','sortDamageSprites','isStateResist','active','loadBitmap','dPaKM','ActSeq_Mechanics_EnemyEscape','battleAngle','_backAttachmentSprite','StatusWindowAttachmentFront','FvnNn','moveBattlerToPoint','createContents','Game_Party_removeActor','partyCommandWindowRectDefaultStyle','ActionEnd','Game_BattlerBase_canAttack','getStypeIdWithName','mmp','Bwxsh','SsIsV','sobHO','Game_Battler_clearMotion','_targetAngle','initVisibility','itemRect','setVisibleUI','AddHpGaugeOption','_isBattlerFlipped','ActSeq_Cutin_WaitForEntrance','fHdtD','attackAnimationId2','horzCells','DefaultStyle','WaitForMovement','XHWHW','UNTITLED','HP_Flat','jsScaleDown','zmVmo','HITTYPE_PHYSICAL','checkShowHideSkillNotetags','TextFmt','VIhRP','executeHpDamage','kbIgd','getDamageStyle','Item-%1-%2','getHalfActionsPTB','CalcEscapeRatioJS','_createEffectsContainer','ESCAPE','getColor','battlelog','ouMre','isOpponent','Sprite_Enemy_createStateIconSprite','BattleManager_endAction','ActSeq_Movement_MoveBy','XPActorDefaultHeight','processOk','_immortal','_enemyId','ActSeq_BattleVoice_PlayCommonLine','Sprite_Actor_setBattler','updateFrame','isActiveTpb','hmbsR','ARRAYSTRUCT','ofBbg','rusKI','isSpriteVisible','WaitCount','battleSkew','user','ActSeq_Set_FinishAction','ayTvu','XsSHB','Sprite_Enemy_setBattler','processBattleCoreJS','_hpGaugeSprite','createPartyCommandWindowBattleCore','WIDTH','addCustomCommands','HitRate','MAT','setText','_forcedHomeY','checkShowHideSwitchNotetags','aliveMembers','makeActions','WaitForScale','PcLQi','ActSeq_Cutin_EndVisualCutinEffectType','sxWwx','checkCacheKey','ActSeq_Angle_Reset','JS\x20%1END\x20BATTLE','deCRz','jkJZF','EpkIV','_animationCount','ShowPopup','_subject','resizeWindowBorderStyle','aiJHY','onEnemyOk','VixwO','EscapeFail','xnqGi','Scene_Battle_initialize','kqqTF','PopupPosition','updateScale','SvBattlerSolo-%1-%2','MEeqg','faceWidth','isForOpponentBattleCore','ActSeq_Movement_HomeMoveToPoint','NameOffsetX','actorCommandAutoBattle','mGdSw','updateShadowScale','_list','setItem','phnYl','gospA','DPwCh','NhFdd','FlashColor','ActSeq_Impact_TimeStop','command301','Interrupt','stbGainInstant','Mechanics','slice','ext','getBattlePortraitOffsetX','_scene','ActionCount','MP_Flat','onEncounter','MDaZs','isHiddenSkill','GPWnM','targetActionSet','TpbActiveChangeEnabled','Sprite_Battler_updatePosition','STYPES','noSimilarSTypes','Scale','%1EndBattleJS','launchBattle','surprise','isForFriend','FocusX','regionId','_borderPortraitTargetX','onEnemyCancel','Game_BattlerBase_initMembers','processTouch','all\x20actors','_effectType','performActionStart','concat','createActionSequenceProjectile','gradientFillRect','cVzJA','Buffs','Sprite_Actor_updateFrame','ActSeq_BattleLog_WaitForNewLine','buffRemove','JS\x20BATTLE\x20DEFEAT','applyCritical','nZfIU','CmdIconItem','isTpbMainPhase','Ojbqa','trim','sliceMin','FMQnF','refreshCursor','ActSeq_Mechanics_DeathBreak','dead\x20opponents','Actions','cyltO','updateAngleCalculations','Game_Troop_expTotal','WaitForEntrance','jMgxF','Shadow2','uMUjY','ShowWeapon','AutoBattle','ArpSF','wTptq','removeOnceParallelInterpreter','_buttonText','setEventCallback','_targetFloatHeight','FMkrR','BattleSystemBTB','ZHCYm','battleCommands','isSceneBattle','isDeathStateAffected','displayHpDamage','getChildIndex','isPreviousSceneBattleTransitionable','Sprite_Actor_updateBitmap','KpBxA','centerFrontViewSprite','attackTimesAdd','setupMotion','uczCi','RXQsr','isSelected','battleUIOffsetY','format','undecided','_forcedHomeX','_battleCoreNoElement','process_VisuMZ_BattleCore_CreateRegExp','Game_Interpreter_command283','BattleManager_startBattle','attackAnimationIdSlot','updateBattleProcess','getCommonEventIdWithName','itemTargetCandidates','yDWpF','lifeStealRate','isAlive','resizeWindowXPStyle','frontview_ui','_tempBattler','clearActiveWeaponSet','wtypeId','wEviu','SkewY','_iconIndex','pageup','createPartyCommandWindow','luCIM','dead','ActSeq_Inject_AnimationStart','updateRefresh','isSkewing','isOpen','selectNextCommand','StatusWindowAttachmentBackOffsetX','StyleOFF','tRbcE','_updateCursorArea','RMWKT','ShowCosts','BattleManager_inputtingAction','iEmhA','isTeamBased','battleOpacity','dead\x20battlers','KcyjM','Window_BattleLog_performCounter','_flashDuration','getNextSubjectFromPool','ePddF','_autoBattleWindow','updateOpacity','version','push','Direction','_baseX','addChildAt','setImmortal','VktlC','portraitFlipVert','okButtonText','performMagicEvasion','rcyhB','VarianceFormulaJS','BarMO','Game_Action_applyGlobal','CCWxQ','_svBattlerSprite','_borderPortraitDuration','createCommandNameWindow','MDF','guard','performActionEndMembers','NUM','VisuMZ_2_BattleSystemBTB','inHomePosition','cancelHpLifeSteal','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','addNewState','updateMain','wYrnV','showNormalAnimation','_wtypeIDs','onBattleEndBattleCore','fxoZX','prepareBorderActor','MDLlV','Twjpp','Game_Action_executeDamage','_weather','jvBQp','clearDamagePopup','cisSb','battleDisplayText','PopupOffsetX','fight','createAnimationContainer','_tpbSceneChangeCacheActor','DistanceX','damageOffsetX','critical','Window_BattleLog_displayFailure','_customDamageFormula','CsTKN','Scene_Battle_selectPreviousCommand','Game_Interpreter_PluginCommand','tcvdL','selectAllActors','CqFVj','BattleManager_onEncounter','setValue','_handlers','PopupOffsetY','JeZFv','Game_Action_apply','clearForcedGameTroopSettingsBattleCore','getLastPluginCommandInterpreter','_flashColor','Game_Battler_clearDamagePopup','aVPFG','DamageStyles','pages','-%1','createInnerPortrait','_namesCount','_tpbState','vAqVN','isPreviousScene','KnJEM','placeTimeGauge','createDistortionSprite','JlGcV','createBattleFieldBattleCore','bitmap','ForceExploited','battleStatusWindowAnimationContainer','hitIndex','WPivX','resetFontSettings','wqifR','weatherPower','Sprite_Battler_updateMain','drawItemStyleIcon','parameters','YnHLd','CurrentTurn','_commonEventIDs','isMoving','sCpKO','RequiresDefeat','isBusy','PifiR','clone','nOiep','YmATW','statusWindowRect','isFightCommandEnabled','battleProjectiles','removeBuffsAuto','_tpbNeedsPartyCommand','ActSeq_BattleLog_Refresh','isImmortal','_effectDuration','displayMiss','disarmMpLifeSteal','maxCommands','makeTargets','RHGwj','nRwdk','Sprite_Battler_damageOffsetX','ActSeq_Weapon_SetActiveWeapon','_totalValue','kZLwv','applyResultSwitches','battleCommandName','zdRhj','iconIndex','isWaiting','message1','cameraClamp','isTriggered','ActSeq_Movement_WaitForFloat','pnwip','SkillItemBorderCols','hpRate','value1','show','canInput','waitForFloat','XdXck','ActSeq_Movement_HomeMoveToJsPoint','KYvTV','Game_Action_isForOne','updateEffectsContainer','_drawTextOutline','createDigits','updateShadowPosition','removeCurrentAction','pvobL','ohKqD','startHomeMove','cfCim','clearResult','jzCfv','playOnceParallelTroopPage','updateBattlebackBitmap2','trueRandomTarget','vOZue','close','_enemyID','bind','VisuMZ_2_HorrorEffects','ElementStatusCore','fOUde','fAnRe','BattleCore','getDualWieldTimes','VisualCutinEffect','all\x20targets','isLearnedSkill','Sprite_Battleback_adjustPosition','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','HelpFight','basicGaugesY','createLowerLayer','battlerSmoothImage','WIuEa','commandNameWindowCenter','ActSeq_Impact_ZoomBlurPoint','isAnyoneJumping','czyiy','CheckVisibleSkillNotetags','ClearBattleLog','process_VisuMZ_BattleCore_BaseTroops','ATTACK','loadWindowskin','isCustomBattleScope','startAction','Sprite_Battler_setHome','isForAliveFriend','checkTpbInputClose','updateBossCollapse','_skewEasing','ActSeq_Mechanics_WaitForEffect','GuardFormulaJS','ENEMY_OFFSET_Y','isEffecting','Spriteset_Battle_updateActors','BWmHU','startEnemySelection','SvBattlerMass-%1-%2','dkkUR','HelpOptions','Victory','unchanged','ActSeq_Impact_BlueRedInvert','getSkillIdWithName','StatusWindowSelectableBackHide','CLhxW','BattleManager_startAction','BattlebackScale','toLowerCase','displayActionResults','RVhuI','parallaxScrollYinvertEnemy','Scene_Battle_terminate','KaZMD','autoBattleStyle','_battlerName','ActSeq_Animation_AttackAnimation2','updateStatusWindowPosition','StepDistanceX','bitmapHeight','actionBattleCoreJS','traitSet','changeBattlebacks','Game_Battler_performMiss','heTBz','Window_Options_statusText','Damage','process_VisuMZ_BattleCore_Notetags','ARRAYSTR','xhClU','ActSeq_Animation_ShowAnimation','GUARD','findIndex','Game_Action_isForOpponent','Sprite_Actor_moveToStartPosition','aWWTk','Sprite_Enemy_updateStateSprite','Scene_Battle_windowAreaHeight','Game_Action_numRepeats','processEscape','UoWMr','Style','SlzEw','_skewWholeDuration','ActSeq_BattleLog_DisplayAction','PreDamage%1JS','yIKHf','_freezeMotionData','ActiveTpbOptionsMessage','freezeTime','prepare','ZQEGv','BattleManager_setup','QqATg','jsScaleUp','Sprite_Enemy_updateBossCollapse','resetBreakShield','addState','Angle','bFwaZ','process_VisuMZ_BattleCore_Failsafes','checkSubstitute','special','displayCritical','YEDID','AIKdG','VisuMZ_2_BattleSystemFTB','drawLineText','HpGauge','CmdStyle','getAttackWeaponAnimationId','StatusWindowAttachmentBack','_actorMultiTargetWindow','autoBattle','battleUIOffsetX','performCastAnimation','itemEffectAddAttackState','Scene_Battle_helpWindowRect','startBattle','addOptionsCommand','commandOptions','extraPositionX','zDKOY','_lastRegenFrameCount','isAutoBattleCommandEnabled','VisuMZ_2_DragonbonesUnion','PqmQd','BattleManager_processAbort','start','some','isFTB','_spriteset','AsUser','DamageStyleList','XcuBP','UUiIL','guardHpLifeSteal','AddOption','getHardDamageCap','SceneManager_isSceneChanging','WbNdq','endBattle','AttachStateOffsetX','DamageFlat','_autoBattle','isPartyCommandWindowDisabled','_colorType','sXbWt','Game_Action_evalDamageFormula','Game_Action_testApply','setLetter','initialize','wVGen','_homeDuration','battleInjectPrep','LiOLD','_targetHomeX','isNextSceneBattleTransitionable','isGrowing','DkoSZ','zoomDuration','OItFB','Destination','NyWgD','AS\x20USER','NmOaK','refreshDimmerBitmap','ShowAddedState','scale','updateInterpreter','_dimmerSprite','PointJS','gJanG','log','portraitFilename','isPartyTpbInputtable','_shake','ShowActorGauge','_stateSprite','BnvLe','WaitForNewLine','Scene_Battle_startActorCommandSelection','RgnaW','enemyId','ActSeq_Movement_FaceTarget','waitForNewLine','_checkOn','_effectsContainer','addShowHpGaugeCommand','wshCD','Game_System_initialize','LEcnu','xJsiv','getFullActionsPTB','QoL','itemWindowRect','item','isShownOnBattlePortrait','AnchorY','onHomeMoveEnd','KrBvM','TPB','regenerateAll','_jumpWholeDuration','ActSeq_Mechanics_RemoveBuffDebuff','Sprite_Battler_damageOffsetY','Window_Options_addGeneralOptions','_battleLayoutStyle','353388DzFjpx','LifeStealRegExp','CastMagical','itemEffectRecoverHp','Amp','stepBack','performMiss','aNtqB','BattleManager_checkBattleEnd','autoSelectLastSelected','textBaseline','cameraDuration','Scene_Map_updateCallMenu','placeStateIcon','ShakeFlinchPower','battleGrow','guardMpLifeSteal','createString','WaitForProjectile','guardLifeSteal','aNybu','HITTYPE_MAGICAL','skew','makeSpeed','skillId','getWtypeIdWithName','kVkvJ','isForOne','SceneManager_push','Window_ActorCommand_setup','Targets','dead\x20friends','VisuMZ_3_ActSeqImpact','exit','27WiIEid','ActSeq_Mechanics_EtbAction','alive\x20battlers\x20not\x20user','AGNKx','Elements','gIJEk','applyTargetFilters','lEIPg','JlLFB','resetTextColor','addBuff','setBattleCameraPoint','setupCriticalEffect','PostStartTurnJS','isCurrentItemEnabled','removeAnimation','refreshStatusWindow','canEscape','AutoBattleRect','options','loadSvActor','TZDFP','isDisarmLifeSteal','isAnyoneInjectAniPrepping','jeAfg','_armorPenetration','checkTpbInputOpen','targetBattlerContainerOpacity','CheckSkillCommandShowSwitches','textSizeEx','maxBattleMembers','displayReflectionPlayBack','Targets1','replace','dvnDa','cCNXp','OffsetY','addBattleCoreAutoBattleStyleCommand','YSBEL','damage','GiqQG','_battleCoreBattleStartEvent','_battlePortrait','ActSeq_Movement_FaceJsPoint','IconStypeNorm','belUg','isBattleFlipped','NameOffsetY','applyGlobal','svBattlerAnchorY','isConfused','FlinchDuration','Game_BattlerBase_eraseState','statusTextAutoBattleStyle','focus','addCombatLogCommand','EscapeSuccess','partyCommandWindowRectXPStyle','AggroControlSystem','_allTargets','blkkR','SwitchMissEvade','_cursorArea','changeCtbChargeTime','AllowCollapse','JS\x20BATTLE\x20VICTORY','HhtHJ','bitmapWidth','PrioritySortActors','_stateIconSprite','addEscapeCommand','autoBattleStart','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','ActSeq_Mechanics_ActiveChainInputDisable','vertCells','unshift','ENEMY_OFFSET_X','createEnemyNameContainer','ShowHide','isAtbChargingState','playEnemyDamage','StatusWindowAttachmentFrontOffsetX','createBattleUIOffsetY','isSideButtonLayout','XGgHN','Window_BattleLog_performSubstitute','checkBattleEnd','Window_ItemList_maxCols','gRSKF','openBattleActorWindow','battler','EnaSc','Index','popupDamage','reverse','initMembersBattleCore','updateLink','MLbUa','displayReflection','_targetGrowX','forceAction','_motionSpeed','FaceAway','commandNameWindowDrawText','_homeEasing','actor','xDUsS','CriticalHitRateJS','fillRect','ActSeq_Zoom_Scale','updateShadowBattleCore','TargetLocation','isMeleeSingleTargetAction','skillItemWindowRectBorderStyle','alive\x20friends','_escapeRatio','isValid','updateBorderStyle','makeData','_logWindow','hHkBe','makeTargetSelectionMoreVisible','Mute','parse','\x5cI[%1]%2','_tempActor','updateStaticSvBattlerFrames','NameLegacy','BravePoints','dgDbl','Window_ActorCommand_initialize','isTpb','canAttack','Window_BattleLog_performActionEnd','_angleRevertOnFinish','POST-','mainSpriteScaleX','hitFlat','onRegeneratePlayStateAnimation','createMiss','awCzU','JtOjD','StateIconOffsetX','GroupDigits','spell','ActionItemMsg','Game_Battler_forceAction','StateIconOffsetY','mhp','makeSuccess','revealNewWeaknesses','addDebuff','_frontAttachmentSprite','setBattleSkew','Window_BattleLog_performReflection','command119','BTestBypass','wSsVM','isAnyoneGrowing','SDyxZ','EFPuR','drawItemBackground','bSbGa','isAnyoneSpinning','EmergeText','setupMotionBlurImpactFilter','_shadowScaleX','MessageWait','isAutoBattle','gainBravePoints','Spriteset_Battle_update','_targets','ActSeq_Impact_MotionBlurScreen','slkgy','clearBattleRefreshRequest','skills','addSingleSkillCommands','ActSeq_Impact_ShockwaveEachTargets','3972868lfgqad','BMGeS','_opacityEasing','ShowMpDmg','ActSeq_BattleLog_PushBaseLine','performWeaponAnimation','drawItemImageListStyle','turnOrderChangeOTB','damageOffsetY','ACTOR_OFFSET_Y','isFlipped','disarmLifeSteal','OqGrX','damageStyle','applyDamageCaps','battleCoreTpbMainPhase','innerWidth','ActSeq_Zoom_Reset','642869MqwWOg','Window_BattleLog_update','performReflection','_battlerKeyCache','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','removeChild','isCertainHit','isCTB','_skewDuration','isSideView','battleEffect','rqEjg','wIvZR','addText','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','hYiVD','PostDamageAsUserJS','ybjWw','startTurn','ActSeq_Inject_AnimationPauseResume','head','vXvCX','_weaponImageId','NOgCe','rfGtL','isSpinning','slices','changeBattlerOpacity','removeBuff','stateRate','currentSymbol','lastCommandSymbol','fittingHeight','_playTestFastMode','Game_Action_isForAliveFriend','ShakeFlinch','LastSelected','ActSeq_Movement_HomeMoveBy','ActionSequence','repositionCancelButtonBorderStyle','SvMotionIdleSolo-%1-%2','BattleManager_selectNextCommand','opzZE','iGpMV','CoreEngine','Scene_Map_initializeAfter','expTotal','xocGi','rec','createJS','setHome','isDying','_interpreter','Game_Interpreter_command301','TlTsy','waitForJump','cancel','statusWindowRectXPStyle','disarmHpLifeSteal','eRQNX','XYsSC','ActSeq_Mechanics_BoostPointsChange','FESHy','peiFU','Debuffs','_displayBattleCoreTransitionErrorMsg','iterateBattler','onBattleStart','Kpgic','drawTextEx','flashDuration','createAutoBattleWindow','ActSeq_Target_NextTarget','blt','isNonSubmenuCancel','isSceneChanging','Srjge','ShowAddedBuff','swing','isForOpponent','currentValue','UaANP','skillItemWindowRectMiddle','DTB','_helpWindow','windowPadding','Scene_Battle_startEnemySelection','skillTypes','getSkillTypes','svActorHorzCells','Mirror','Window_BattleLog_popBaseLine','createBorderStylePortraitSprite','Height','VisuMZ_3_SideviewBattleUI','_growY','wKTgr','_updateFilterArea','VpZaf','addItemCommand','turn','_cacheTextWidth','_deathStateApplied','updateShadow','svShadow','startGrow','gaugeX','NextTurn','selectPreviousCommand','setHelpWindow','noise','eraseState','putActiveBattlerOnTop','Twuov','TpGaugeOffsetX','smooth','updateCommandNameWindow','frameDelay','qefcN','ActSeq_Mechanics_ArmorPenetration','cutinEnter','Scene_Boot_onDatabaseLoaded','autoBattleAtStart','isAnyoneSkewing','setActorHome','missle','setFullActionsPTB','angleDuration','MAXMP','collapse','qnwTf','alive\x20enemies\x20not\x20target','ActSeq_Mechanics_Collapse','EFjSg','LffEG','odyoN','right','ActSeq_Horror_NoiseCreate','SKILLS','itemHeight','ActSeq_Horror_TVRemove','_growDuration','PQgMH','Game_Map_battleback2Name','isForRandomBattleCore','clearFreezeMotionForWeapons','getBattlePortraitOffsetY','EnemyOffsetX','Enemy','requestRefresh','DtQPj','negativeLifeSteal','sbDFi','Sprite_Gauge_smoothness','lineHeight','BlCyh','Scene_Battle_update','dgEDJ','JzDaX','processPostBattleCommonEvents','clearTargetBattlerKey','windowskin','weaponTypes','process_VisuMZ_BattleCore_CommonEventKeys','oGUzz','setupHpGaugeSprite','bmqLf','actionEffect','isBattleCoreTargetScope','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','isAnimationShownOnBattlePortrait','createEnemies','isSubjectValidForAnyoneSelect','HtohJ','ETezR','NzrXK','showAnimation','actorCommandEscape','Sprite_Damage_createChildSprite','BattleLog','canUse','JgMOm','CmdIconOptions','lVYQG','pOnza','QXtrK','Game_Action_itemEffectAddAttackState','createBattleField','SLLLn','eVgfU','setSvBattlerSprite','hLbkW','otLHU','list','PostEndActionJS','EeCpY','center','WgNJR','setMoveEasingType','mosmK','QMKRm','AlsEl','TextColor','includes','visibilityState','FwnFo','performEvasion','pkPhQ','Armor-%1-%2','jbREb','TykNG','HZfNw','cancelButtonText','QREgq','Game_Action_setAttack','ActSeq_Set_WholeActionSet','setupShockwaveImpactFilter','_defeatedEnemies','displayAffectedStatus','auto','_motionType','WindowWidth','Sprite_Battler_isMoving','visualCutinPortraitHue','StatusWindowAttachmentFrontOffsetY','lineRect','isStatusAffected','zcPrL','nextActiveWeaponSlot','attackStatesRate','cnmDf','VisuMZ_3_ActSeqCamera','OffsetAdjust','EdpzR','Linear','isGuard','battleFloat','24Aunchb','Game_Action_isForFriend','iwVlZ','Game_Map_setupBattleback','%1Apply%2JS','fSJkf','weapons','Strength','9nPdcmo','updateHpGaugePosition','updateForceAction','NameAlwaysHidden','min','_waitMode','wholeActionSet','hTWXr','rPudi','getEnemyIdWithName','setBattlerMotionTrailData','_enemyMultiTargetWindow','requestDragonbonesAnimation','callNextMethod','_canLose','WZTPL','ARRAYNUM','helpWindowRect','isBattleSys','Reveal','silentHomeMove','Jxvit','ExtraSettings','AutoBattleCancel','debuffAdd','qVpNt','mainSprite','addSingleSkillCommand','gainTp','showHelpWindow','resize','_floatWholeDuration','startShakeFlinch','getItemDamageAmountTextOriginal','forceSelect','helpWindowRectBorderStyle','placeActorName','VisuMZ_2_BattleSystemSTB','setFrame','ibhCX','partyCommandWindowRect','clearOnceParallelInterpreters','maxItems','updateSpin','ForceExploiter','_actorSprites','Jrcaa','SkillsStatesCore','makeBattleCommand','battleAnimation','CastPhysical','_battlerContainer','CommandWidth','PreEndBattleJS','Game_Action_setSkill','createChildSprite','#%1','isPhysical','updateCallMenu','damageFlat','canAddSkillCommand','process_VisuMZ_BattleCore_TraitObject_Notetags','extendTroopMembers','mainSpriteHeight','LUK','nEPOG','dSNAA','formula','dNQdf','motionSpeed','isClicked','MIN_SAFE_INTEGER','_motion','ZJfyj','_targetHomeY','kCwQL','float','adjustWeaponSpriteOffset','updateHelp','iconText','finishActorInput','_commandNameWindow','GtYSl','BattleManager_startInput','SlotID','drawItemImagePortraitStyle','moveBattlerHomeDistance','cancelLifeSteal','battleCorePreBattleCommonEvent','ScaleDown','parallaxHueEnemyModifier','KGAlR','AvYqy','Scene_Battle_selectNextCommand','moveToStartPositionBattleCore','skill','StatusWindowSkinHide','setupBattlebackBattleCore','getSpecificBattlerKeyTarget','casting','MIdHg','apply','VisuMZ_3_FrontviewBattleUI','MANUAL','Sprite_Actor_setActorHome','random','Sprite_Enemy_updateCollapse','isTickBased','createCancelButton','getBattlerFromKey','updateAction','wfXfC','attackStates','iLoMl','useDigitGrouping','VisuMZ_3_VisualCutinEffect','magicReflection','selectAllEnemies','HIZze','Sprite_Animation_targetSpritePosition','_executedValue','VisuMZ_1_MainMenuCore','vopeI','dataId','isForAnyone','Window_BattleLog_performMiss','YvELF','UYHDe','hBOVl','LXHln','lzFIY','_makeCursorAlpha','PreStartActionJS','ActSeq_Impact_ShockwavePoint','ShowPortraits','parallaxScrollXinvertEnemy','isMeleeMultiTargetAction','WaitForCamera','TTnVV','JumpToLabel','sleep','onDatabaseLoaded','updateVisibility','shift','chant','_enemySprites','eXAYB','PartyCmd','AllActorsText','gaugeLineHeight','selectNextActor','PostRegenerateJS','HP_Rate','YPMVO','YyxYC','walk','BattleManager_isTpbMainPhase','actionSplicePoint','UaBVG','EXoXZ','damageContainer','sortEnemies','Game_BattlerBase_addNewState','_updateCursorFilterArea','StatusWindowSkinFilename','getNextSubject','animationId','changePaintOpacity','LkNHW','_dragonbonesSpriteContainer','alphabetic','XXvoO','BattleManager_updatePhase','alignBattleCoreDamageSprite','VWvIr','battleEnd','indexOf','addSkillTypeCommand','front\x20base','CmdTextAlign','battleJump','Intensity','performMoveToPoint','mnNaN','setBattlerFlip','isAutoBattleCommandAdded','jCQPS','pushBaseLine','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','requestMotion','softDamageCap','usePremadeActionSequence','battlerSprites','PostEndBattleJS','isEscapeCommandEnabled','_targetOffsetY','setHandler','performCollapse','victory','anchorY','yfeEp','onActorCancel','mMglK','RegExp','Game_Temp_requestAnimation','faceRect','ActSeq_BattleLog_WaitForBattleLog','svBattlerShadowVisible','contents','arRedRate','GRPQC','1:1','enemy','changeCtbCastTime','_buttonKey','CGlKE','isActor','Window_BattleLog_pushBaseLine','isSkill','setBattlePortrait','startFloat','processRandomizedData','custom','_homeWholeDuration','ArRedRate','JTXkA','HpGaugeOffsetX','DistanceAdjust','addDamageSprite','opacity','changeInputWindow','STRUCT','ActSeq_Cutin_AddVisualCutinEffect','alterType','VisuMZ_3_ActiveChainSkills','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','ActSeq_Weapon_NextActiveWeapon','pauseInjectAnimation','XMKtF','clearRect','parallaxHue','createEffectActionSet','StyleName','ARRAYFUNC','Formula','Scene_Options','makeActionList','_cache','forceMotion','gooXK','numRepeats','floor','snapForBackground','IgtSt','ACTOR_OFFSET_X','redraw','description','setHorrorEffectSettings','battleInjectAni','length','expRate','invokeMagicReflection','targetsForFriends','DSTSw','match','gDdMG','hasSkill','AutoBattleBgType','_stypeIDs','_commonEventQueue','_currentActor','startPartyCommandSelection','ActSeq_Mechanics_PtbConvert','Sprite_Enemy_initVisibility','loadSystem','_multipliers','CjFBU','cancelTargetSelectionVisibility','startInjectAnimation','Scene_Battle_updateBattleProcess','Lieha','IaDGd','createUIContainer','getAttackMotionSlot','addActor','LPlje','YlPSj','Actor','kllPe','isIncludedInEnemyWindow','NylxY','XMhsX','_phase','BfWxp','pYPzR','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','ShowHpDmg','gOqAE','MotionType','Scene_Battle_stop','ConvertCount','forceWeaponAnimation','ResetFocus','ParseAllNotetags','yBZAD','Scene_Battle_updateStatusWindowPosition','mZAPE','cSTxG','VariableID','battlerKey','DgKiS','cancelActorInput','canAttackBattleCore','round','animationBaseDelay','windowAreaHeight','SkillItemStandardCols','Filename','vsiGE','NwWfl','tpbCommandFight','autoSelect','targetSpritePosition','commandSymbol','blqmj','All\x20Allies','PreApplyAsTargetJS','turnCount','jZiJW','VHywR','updateCollapse','btdSc','ConfigManager_makeData','XKDJd','TpbGaugeOffsetY','ActSeq_Motion_WaitMotionFrame','DRfMa','battleMembers','HelpEscape','%1RegenerateJS','zXFEU','DEiVX','dimColor2','Game_BattlerBase_canGuard','xeYMH','onAngleEnd','FMImF','Scene_Battle_onEnemyCancel','gejFc','TpbGaugeOffsetX','Otyla','kHgkt','CmdIconEscape','SwitchCritical','setupTextPopup','createDamageSprite','getAttackMotion','ActSeq_Horror_Clear','SyNNR','CheckVisibleBattleNotetags','setActionState','VisuMZ_2_WeaponSwapSystem','checkShowHideBattleNotetags','fontSize','isItemCommandEnabled','displayType','isDisplayEmergedEnemies','addSkillCommands','applyGuard','dsXRm','addMeleeReturnActionSet','VisuMZ_3_BattleVoices','ZwYOE','_linkedSprite','sort','_borderPortraitSprite','GyLro','svActor','inputtingAction','setupActionSet','_targetSkewY','ConvertActionSequenceTarget','isNegativeLifeSteal','vSmFu','okTargetSelectionVisibility','ReflectAnimation','BattleSystemCTB','PopupShiftX','setBackgroundType','fnordAddedStates','Duration','getBattlerKeyTargetReplacement','isBattleRefreshRequested','_animationSprites','taLjJ','setupBattleback','PreApplyJS','autoBattleUseSkills','StartTurnWait','_actorCommandWindow','statusWindowRectDefaultStyle','ActSeq_Impact_MotionTrailRemove','VwDzy','Game_Action_itemHit','isCustomActionSequence','ViurN','lifeSteaItem','_angleEasing','_appeared','portraitType','_offsetY','BattleManager_makeActionOrders','textAlign','JS\x20%1END\x20ACTION','weaponImageId','itemLifeStealRate','maxLines','checkAutoCustomActionSequenceNotetagEffect','xUpmh','HelpAutoBattle','ceil','ActSeq_Movement_Spin','ActSeq_Mechanics_BtbGain','GetActionSequenceSpecialTargetWithFlags','canGuardBattleCore','findSymbolExt','weatherType','_eventId','fbgep','AS\x20TARGET','move','Sprite_Battler_startMove','FeLVx','Exploiter','FlinchDistanceX','hVofd','BOJal','parallaxScrollY','ZMPpG','kfrnI','updateShadowVisibility','_growWholeDuration','updateBattlerContainer','_itemWindow','Parse_Notetags_Action','_svBattlerData','isAttack','dQBFj','_flipScaleX','sideview_ui','COMBATLOG','WaitForAngle','VisuMZ_1_SkillsStatesCore','dUOIM','CombatLogIcon','svAnchorY','isItem','commandEscape','KSwlD','FollowTurn','drawText','param','max','%1StartTurnJS','PostDamage%1JS','ActSeq_Motion_MotionType','applyVariance','createShadowSprite','performSTBExploiter','qWwiM','LBpQD','SHmmb','ActSeq_Mechanics_StbRemoveExcessActions','switchToWeaponType','isForAll','Game_Actor_makeActionList','isCommandEnabled','message4','occasion','rUfYz','isBattleMember','updateWeather','_actionInputIndex','applyEasing','hitRate','ActionEndUpdate','Game_Battler_regenerateAll','rcqWl','issIv','currentExt','drawSingleSkillCost','_requestRefresh','rqfij','Window_BattleActor_show','CreateCommonEventKeys','State-%1-%2','displayTpDamage','notFocusValid','VisuMZ_2_BattleSystemETB','isBorderPortraitSpriteVisible','AdjustRect','updatePointAnimations','updateActors','applyFreezeMotionFrames','doesPageHaveOnceParallelStart','adjustPosition_ScaleToFit','FocusY','MultiTarget','SXjUy','createAnimationSprite','Game_Action_isForRandom','onBattleEnd','alterActionCostPTB','Sprite_Enemy_update','YfBdC','DEF','qVtGE','%1StartActionJS','getBattlerKeyTargets','duration','ShowCritical','PNUVN','updateStyleOpacity','OverallFormulaJS','parallaxScrollX','itemEffectGainTp','isAnyoneChangingOpacity','compareEnemySprite','WaitCount2','_speed','playReflection','performShakeFlinch','ActionAnimation','rlTrp','SpjNj','emerge','commandNameWindowDrawBackground','die','ActSeq_Projectile_Icon','Scene_Battle_onActorCancel','iOaBE','cWQmv','ActSeq_BattleLog_AddText','callOkHandler','updateHomeMove','svBattlerAnchorX','ActSeq_Mechanics_AddState','simUj','Enemy-%1-%2','ParseArmorNotetags','PwAKG','addedStateObjects','CriticalHitRate','jWTea','thmAE','PostEndTurnJS','_skillWindow','isFloating','DjfhV','AutoNotetag','gvJms','cAjIe','setSkill','nameY','activate','Scene_Battle_onActorOk','_commonEventKey','gmQXI','waitForMovement','filter','allBattleMembers','qHqft','isDuringNonLoopingMotion','1300664CUjojc','constructor','adjustPosition_1for1','zXgbk','tgHkv','VisuMZ_0_CoreEngine','alterCost','RZlRW','endVisualCutin','nZmLu','dxtNJ','animation','VisuMZ_2_BattleSystemCTB','uiMenuStyle','currentAction','_actions','spriteId','Spriteset_Battle_createBattleField','makeTargetsBattleCoreJS','_shadowScaleY','addBattleCoreAutoBattleStartupCommand','actorId','processActorCommandCancelTPB','KRaRx','frameVisible','TKDig','allowRandomSpeed','yUJOY','isNextScene','commandFight','startTpbTurn','zYrOL','<CUSTOM\x20ACTION\x20SEQUENCE>','LQtyM','chantStyle','deathStateId','selectAll','_targetOpacity','Window_BattleLog_performRecovery','NBSPH','SyncBuffExpire','hLmRl','qVUkj','STB','HqymJ','CreateActionSequenceTargets','yYsKy','ActSeq_Motion_FreezeMotionFrame','restore','_offsetX','validTargets','_regionBattleback1','command357','CriticalColor','contentsOpacity','battleSys','addedBuffs','svBattlerData','string','displaySubstitute','ActSeq_Mechanics_HpMpTp','updateFloat','TP_Rate','gainHp','_enemyWindow','process_VisuMZ_BattleCore_PreBattleCommonEvent','dTcUU','processEnemyModeTouchBattleCore','moveBattlerHomeToPoint','randomInt','pattern','UURlS','onEscapeFailure','processDefeat','optDisplayTp','counterAttack','_cursorSprite','process_VisuMZ_BattleCore_PluginParams','ActSeq_Impact_ColorBreak','WtypeId','moveToStartPosition','ActSeq_Mechanics_Immortal','Game_Troop_setup','isMagical','nmZMW','substitute','adjustPosition_ScaleUp','Scene_Map_launchBattle','_battleField','Window_BattleLog_displayMpDamage','PopupShiftY','extraPositionScaledY','ParseActorNotetags','PreDamageAsTargetJS','updateStateIconSprite','isForFriendBattleCore','FlinchDistanceY','auFaJ','_lastActor','PortraitScaleBorderStyle','_homeY','ActSeq_Mechanics_FtbAction','makeActionListAutoAttack','animationNextDelay','isOnCurrentMap','splice','updateStart','create','isEnemy','isForAnyoneFocusFriends','lukEffectRate','processExtendTroopMembers','targetsForOpponents','_jumpMaxHeight','Game_Interpreter_terminate','negativeMpLifeSteal','FiZTY','ActSeq_BattleVoice_PlaySpecialLine','_performActionEnd','IVEWo','Turns','isDead','height','ActSeq_Horror_TVCreate','Qdneh','ooTtP','adjustPosition','XCkpP','dead\x20enemies','Sprite_Battler_initMembers','_floatEasing','addExtendedTroopMembers','performRecovery','refreshBattlerMotions','speed','applyData','mZHpK','createSeparateDamagePopups','WaitForFloat','_pattern','ButtonAssist','ActSeq_Movement_Float','MotionAni','_growEasing','WaitForSkew','isBattlerGrounded','ActSeq_Impact_MotionBlurTarget','Window_BattleActor_processTouch','isAppeared','BattleSystemSTB','getMenuImage','save','MPrbp','evalDamageFormulaBattleCore','DigitGroupingDamageSprites','setEnemyWindowMode','Window_BattleLog_clear','setup','isHidden','makeActionOrders','Game_Actor_equips','setupIconTextPopup','ShowButton','visualCutinPortraitFilename','_lastEnemy','processVictory','isForDeadFriend','WaitForExit','disperseDamage','QeCrS','MpGaugeOffsetY','setupOversaturateImpactFilter','setupFont','Setting','Window_BattleLog_displayEvasion','setCustomDamageFormula','_callSceneOptions','ptOqv','ShowPortraitsBorderStyle','_animation','Scene_Battle_start','clearMotion','#ffffff','testApply','_indent','_createDamageContainer','open','dBjnT','ActSeq_Motion_RefreshMotion','ParseEnemyNotetags','time','gkuIC','setAttack','StepDuration','ActSeq_Set_TargetActionSet','qbcdg','extraPositionY','skewBattler','ActSeq_Skew_WaitForSkew','_homeX','alive\x20battlers','rehKh','itemEffectRecoverMp','PostApplyAsTargetJS','gJkBG','clearFreezeMotion','wrHbs','_visualHpGauge_JustDied','updateEffectContainers','addBattleGridMoveCommand','autoSelectPriority','command301_PreBattleEvent','Wave','Sprite_Battler_update','%1EndActionJS','BattleManager_onEscapeSuccess','fIWyz','updateFlip','ActSeq_Horror_NoiseRemove','battleSpriteSkew','_lastAction','_endingBattle','removedStateObjects','OoWQQ','CzrJX','loadBattleback2','VisuMZ_2_BattleGridSystem','Qdanu','startActorCommandSelection','updateAttachmentSprites','ActSeq_Target_RandTarget','isFastForward','Sprite_Actor_initMembers','updatePositionBattleCore','refreshMotion','XmkrJ','DefaultSoftCap','drawItemStyleIconText','BattleManager_checkSubstitute','ActSeq_Movement_WaitForJump','UkCVq','spinBattler','result','Game_Action_needsSelection','compareBattlerSprites','updateGrow','Window_BattleLog_performAction','onJumpEnd','ActSeq_Element_AddElements','ActSeq_Camera_Reset','tIeyG','_baseTexture','boxWidth','BaseTroopIDs','ydHuI','updateShakeFlinch','ADuzO','startSkew','destroy','createActorCommandWindowBattleCore','CalcEscapeRaiseJS','WmMcP','logActionList','isQueueOptionsMenu','<CENTER>%1','cameraOffsetDuration','uHkMm','updateWaitMode','MOTIONS','_damagePopupArray','AnchorX','battleSpin','heTiF','SwAiR','onBattleStartOnceParallels','remove','font','addChildToBack','addAutoBattleCommand','ShowMissEvasion','evade','frameCount','textColor','value2','friendsUnit','ActorCmd','EMfnW','MLQfL','setHue','left','ActionStart','retreat','compatibilityVisible','isETB','subject','BattleEndEvent','_battler','isCancelled','partyCommandWindowRectBorderStyle','jHbrx','BG_TYPE','fCDbQ','tcZgt','_flinched','isCommonEventReserved','VVFye','Sprite_Actor_update','performAction','_additionalSprites','attachSpritesToDistortionSprite','Skills','forActor','BattleLogRectJS','VulPA','helpAreaHeight','isForAnyoneFocusOpponents','VisuMZ_1_ElementStatusCore','code','buffAdd','glitch','BPfSp','repeats','Scene_Battle_createAllWindows','qLAat','endAction','253vPpAaF','_forcedBattleLayout','iIYKm','helpAreaBottom','addAttackCommand','WKocI','VoiceLineType','PreApplyAsUserJS','toString','PostStartBattleJS','isAnyoneMoving','_shakeFlinchDuration','_growX','_distortionSprite','performActionMotions','UPgLK','ActSeq_Movement_WaitForOpacity','_item','aQVsr','xAfcc','isOptionsCommandAdded','_regionBattleback2','cImSx','+%1','Game_Battler_performActionStart','setBattler','BattleManager_startTurn','EscapeSuccessJS','ChargeRate','meetsSelectFrontviewActorConditions','displayBattleCoreTransitionErrorMsg','performDamage','_lastPluginCommandInterpreter','_endBattle','pha','jumpBattler','statusWindowRectBorderStyle','members','changeTurnOrderByCTB','backColor','_injectAnimationSprite','CastAnimation','boxHeight','join','_jumpHeight','ActSeq_Impact_ZoomBlurTargetCenter','effect','isDamagePopupRequested','revertTpbCachedActor','BattleManager_processVictory','textWidth','BZAAK','bPlld','_weaponSprite','ConvertParams','visualHpGauge','addImmortal','OGMyH','bossCollapse','regenerateAllBattleCore','setTargetBattlerKey','Scene_Battle_createHelpWindow','tMreV','createWeather','FGIUZ','Game_Action_itemEffectAddNormalState','TwIDn','refreshRequest','setupRgbSplitImpactFilter','Game_BattlerBase_isStateResist'];_0x5eaa=function(){return _0x291895;};return _0x5eaa();}const _0x4c6a01=_0x1161;(function(_0x53b2ea,_0xdf9d2b){const _0x49acc8=_0x1161,_0x4dba3a=_0x53b2ea();while(!![]){try{const _0x24de1c=-parseInt(_0x49acc8(0x799))/0x1+parseInt(_0x49acc8(0x315))/0x2*(parseInt(_0x49acc8(0x88e))/0x3)+parseInt(_0x49acc8(0x787))/0x4*(-parseInt(_0x49acc8(0x348))/0x5)+-parseInt(_0x49acc8(0x886))/0x6*(parseInt(_0x49acc8(0x373))/0x7)+parseInt(_0x49acc8(0xacb))/0x8+-parseInt(_0x49acc8(0x6d5))/0x9*(-parseInt(_0x49acc8(0xd04))/0xa)+parseInt(_0x49acc8(0xc10))/0xb*(parseInt(_0x49acc8(0x6b3))/0xc);if(_0x24de1c===_0xdf9d2b)break;else _0x4dba3a['push'](_0x4dba3a['shift']());}catch(_0x3dc08d){_0x4dba3a['push'](_0x4dba3a['shift']());}}}(_0x5eaa,0x87586));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0xe096fb){const _0x3a60bd=_0x1161;return _0xe096fb[_0x3a60bd(0x363)]&&_0xe096fb[_0x3a60bd(0x98e)][_0x3a60bd(0x864)]('['+label+']');})[0x0];VisuMZ[label]['Settings']=VisuMZ[label][_0x4c6a01(0x32d)]||{},VisuMZ[_0x4c6a01(0xc46)]=function(_0x485c5f,_0x30e4cc){const _0x35a03e=_0x4c6a01;for(const _0x1c4e65 in _0x30e4cc){if(_0x1c4e65['match'](/(.*):(.*)/i)){if(_0x35a03e(0x3f1)===_0x35a03e(0x3f1)){const _0x5c6981=String(RegExp['$1']),_0x5eac14=String(RegExp['$2'])['toUpperCase']()[_0x35a03e(0x4e9)]();let _0x45f6bd,_0x1034bc,_0x3e59b2;switch(_0x5eac14){case _0x35a03e(0x557):_0x45f6bd=_0x30e4cc[_0x1c4e65]!==''?Number(_0x30e4cc[_0x1c4e65]):0x0;break;case _0x35a03e(0x89e):_0x1034bc=_0x30e4cc[_0x1c4e65]!==''?JSON['parse'](_0x30e4cc[_0x1c4e65]):[],_0x45f6bd=_0x1034bc['map'](_0x579afb=>Number(_0x579afb));break;case'EVAL':_0x45f6bd=_0x30e4cc[_0x1c4e65]!==''?eval(_0x30e4cc[_0x1c4e65]):null;break;case _0x35a03e(0xdf4):_0x1034bc=_0x30e4cc[_0x1c4e65]!==''?JSON[_0x35a03e(0x750)](_0x30e4cc[_0x1c4e65]):[],_0x45f6bd=_0x1034bc[_0x35a03e(0x39f)](_0x27cebe=>eval(_0x27cebe));break;case'JSON':_0x45f6bd=_0x30e4cc[_0x1c4e65]!==''?JSON['parse'](_0x30e4cc[_0x1c4e65]):'';break;case _0x35a03e(0x411):_0x1034bc=_0x30e4cc[_0x1c4e65]!==''?JSON[_0x35a03e(0x750)](_0x30e4cc[_0x1c4e65]):[],_0x45f6bd=_0x1034bc[_0x35a03e(0x39f)](_0x3b803a=>JSON['parse'](_0x3b803a));break;case'FUNC':_0x45f6bd=_0x30e4cc[_0x1c4e65]!==''?new Function(JSON[_0x35a03e(0x750)](_0x30e4cc[_0x1c4e65])):new Function('return\x200');break;case _0x35a03e(0x981):_0x1034bc=_0x30e4cc[_0x1c4e65]!==''?JSON[_0x35a03e(0x750)](_0x30e4cc[_0x1c4e65]):[],_0x45f6bd=_0x1034bc[_0x35a03e(0x39f)](_0xca160d=>new Function(JSON[_0x35a03e(0x750)](_0xca160d)));break;case _0x35a03e(0xc7a):_0x45f6bd=_0x30e4cc[_0x1c4e65]!==''?String(_0x30e4cc[_0x1c4e65]):'';break;case _0x35a03e(0x627):_0x1034bc=_0x30e4cc[_0x1c4e65]!==''?JSON['parse'](_0x30e4cc[_0x1c4e65]):[],_0x45f6bd=_0x1034bc['map'](_0x347f54=>String(_0x347f54));break;case _0x35a03e(0x975):_0x3e59b2=_0x30e4cc[_0x1c4e65]!==''?JSON['parse'](_0x30e4cc[_0x1c4e65]):{},_0x485c5f[_0x5c6981]={},VisuMZ['ConvertParams'](_0x485c5f[_0x5c6981],_0x3e59b2);continue;case _0x35a03e(0x47b):_0x1034bc=_0x30e4cc[_0x1c4e65]!==''?JSON[_0x35a03e(0x750)](_0x30e4cc[_0x1c4e65]):[],_0x45f6bd=_0x1034bc[_0x35a03e(0x39f)](_0xf7636f=>VisuMZ[_0x35a03e(0xc46)]({},JSON[_0x35a03e(0x750)](_0xf7636f)));break;default:continue;}_0x485c5f[_0x5c6981]=_0x45f6bd;}else _0x3112f3[_0x35a03e(0x73e)]()['makeAutoBattleActions'](),_0x7292f1[_0x35a03e(0x8de)](),_0x4a6b7a[_0x35a03e(0x924)](),this[_0x35a03e(0x974)]();}}return _0x485c5f;},(_0x30336f=>{const _0x13bd25=_0x4c6a01,_0x575b6c=_0x30336f[_0x13bd25(0x2c7)];for(const _0xfd1140 of dependencies){if('CsTKN'===_0x13bd25(0x575)){if(!Imported[_0xfd1140]){if(_0x13bd25(0x939)!==_0x13bd25(0x852)){alert(_0x13bd25(0x9b5)[_0x13bd25(0x511)](_0x575b6c,_0xfd1140)),SceneManager[_0x13bd25(0x6d4)]();break;}else{if(!this[_0x13bd25(0x314)]())return;const _0xb50ac1=_0x50f3cb['BattleCore'][_0x13bd25(0x32d)][_0x13bd25(0x9ad)];if(!(_0xb50ac1[_0x13bd25(0x7bc)]??![]))return;if(this[_0x13bd25(0xd68)]<=0x0)return;const _0xd4358e=this[_0x13bd25(0x72f)]();if(_0xd4358e){const _0x389268=this[_0x13bd25(0xd68)],_0x3dba05=(_0x389268/this['mhp'])['clamp'](0.8,0x1),_0x5a807f=_0xb50ac1[_0x13bd25(0x6c1)]??0x30,_0x16d640=_0x3dba05*_0x5a807f;_0xd4358e[_0x13bd25(0x8ae)](_0x16d640,_0x3dba05);}}}}else{const _0x5bc161=_0x3c7758[_0x13bd25(0x93e)](_0x3d0b7e);return _0x5bc161>=0x0?[_0x24722d[_0x5bc161-0x1]||_0x51e701]:[_0x4ca1ec];}}const _0x3c408a=_0x30336f['description'];if(_0x3c408a[_0x13bd25(0x996)](/\[Version[ ](.*?)\]/i)){const _0x39654f=Number(RegExp['$1']);_0x39654f!==VisuMZ[label][_0x13bd25(0x542)]&&(alert(_0x13bd25(0xdd8)[_0x13bd25(0x511)](_0x575b6c,_0x39654f)),SceneManager['exit']());}if(_0x3c408a[_0x13bd25(0x996)](/\[Tier[ ](\d+)\]/i)){if(_0x13bd25(0xc89)===_0x13bd25(0xc89)){const _0x2ff001=Number(RegExp['$1']);_0x2ff001<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x13bd25(0x511)](_0x575b6c,_0x2ff001,tier)),SceneManager[_0x13bd25(0x6d4)]()):tier=Math[_0x13bd25(0xa5c)](_0x2ff001,tier);}else{const _0x28144c=_0x51c4ef(_0x717c37['$1']);return[_0x38e240['actor'](_0x28144c)];}}VisuMZ['ConvertParams'](VisuMZ[label][_0x13bd25(0x32d)],_0x30336f[_0x13bd25(0x59d)]);})(pluginData),VisuMZ[_0x4c6a01(0xaf8)]=function(_0x2c07c7){const _0x580c0f=_0x4c6a01;let _0x41c585=[];for(const _0x366426 of _0x2c07c7){_0x41c585=_0x41c585[_0x580c0f(0x4db)](VisuMZ[_0x580c0f(0xa0b)](_0x366426));}return _0x41c585[_0x580c0f(0xac7)](_0x4b65d4=>_0x4b65d4);},VisuMZ[_0x4c6a01(0xa0b)]=function(_0x688f67){const _0x2671d7=_0x4c6a01,_0x202266=BattleManager[_0x2671d7(0xac8)]()[_0x2671d7(0xac7)](_0x240c42=>_0x240c42&&_0x240c42[_0x2671d7(0xb5f)]()),_0xb88600=BattleManager[_0x2671d7(0x49e)],_0x41aa82=BattleManager[_0x2671d7(0xda1)],_0x2bbda2=BattleManager['_allTargets']?BattleManager[_0x2671d7(0x710)][_0x2671d7(0x4be)](0x0):_0x202266;_0x688f67=_0x688f67[_0x2671d7(0x613)]()['trim']();if(_0x688f67===_0x2671d7(0x481))return[_0xb88600];else{if(_0x688f67==='current\x20target')return[_0x41aa82];else{if(_0x688f67===_0x2671d7(0xdf3)){if(_0x41aa82){const _0x4967b0=_0x2bbda2[_0x2671d7(0x93e)](_0x41aa82);return _0x4967b0>=0x0?[_0x2bbda2[_0x4967b0-0x1]||_0x41aa82]:[_0x41aa82];}}else{if(_0x688f67==='text\x20target'){if(_0x41aa82){if(_0x2671d7(0x711)===_0x2671d7(0x711)){const _0x4b2170=_0x2bbda2[_0x2671d7(0x93e)](_0x41aa82);return _0x4b2170>=0x0?[_0x2bbda2[_0x4b2170+0x1]||_0x41aa82]:[_0x41aa82];}else _0x6b5022[_0x2671d7(0x5e5)][_0x2671d7(0x8c4)][_0x2671d7(0x3a4)](this,_0x28f2b8),this[_0x2671d7(0x839)]();}}else{if(_0x688f67===_0x2671d7(0x5e8)){if(_0x2671d7(0x31e)!==_0x2671d7(0x31e))_0x414614['BattleCore'][_0x2671d7(0x24e)][_0x2671d7(0x3a4)](this),this[_0x2671d7(0xbce)]();else return _0x2bbda2;}else{if(_0x688f67===_0x2671d7(0x70b))return[_0xb88600]['concat'](_0x2bbda2);else{if(_0x688f67==='not\x20focus')return _0x202266[_0x2671d7(0xac7)](_0x5048c9=>_0x5048c9!==_0xb88600&&!_0x2bbda2[_0x2671d7(0x864)](_0x5048c9)&&_0x5048c9[_0x2671d7(0xa7f)]());else{if(_0x688f67===_0x2671d7(0x649))return[VisuMZ[_0x2671d7(0x295)]()];else{if(_0x688f67[_0x2671d7(0x996)](/SPECIAL (.*)>/i)){const _0x22da52=String(RegExp['$1'])[_0x2671d7(0xcaf)](',')[_0x2671d7(0x39f)](_0x29f067=>_0x29f067['trim']());return[VisuMZ[_0x2671d7(0xa35)](_0x22da52)];}}}}}}}}}if(_0xb88600){if(_0x2671d7(0x9b3)!=='BfWxp')_0x5447c5[_0x2671d7(0x2b5)]('battleAnimation');else{if(_0x688f67===_0x2671d7(0x747))return _0xb88600[_0x2671d7(0xbe7)]()[_0x2671d7(0x490)]();else{if(_0x688f67===_0x2671d7(0xcf2))return _0xb88600[_0x2671d7(0xbe7)]()[_0x2671d7(0x490)]()[_0x2671d7(0xac7)](_0x3b9b18=>_0x3b9b18!==_0xb88600);else{if(_0x688f67==='alive\x20friends\x20not\x20target')return _0xb88600[_0x2671d7(0xbe7)]()['aliveMembers']()[_0x2671d7(0xac7)](_0x3c2e0a=>_0x3c2e0a!==_0x41aa82);else{if(_0x688f67===_0x2671d7(0x6d2))return _0xb88600[_0x2671d7(0xbe7)]()['deadMembers']();else{if(_0x688f67[_0x2671d7(0x996)](/FRIEND INDEX (\d+)/i)){if('pDHKi'===_0x2671d7(0xbdb)){this[_0x2671d7(0x8b0)](_0xeb3363-0x1);return;}else{const _0x108185=Number(RegExp['$1']);return[_0xb88600[_0x2671d7(0xbe7)]()[_0x2671d7(0xc35)]()[_0x108185]];}}}}}}if(_0x688f67==='alive\x20opponents')return _0xb88600[_0x2671d7(0x22c)]()[_0x2671d7(0x490)]();else{if(_0x688f67==='alive\x20opponents\x20not\x20target')return _0xb88600[_0x2671d7(0x22c)]()[_0x2671d7(0x490)]()[_0x2671d7(0xac7)](_0x509b75=>_0x509b75!==_0x41aa82);else{if(_0x688f67===_0x2671d7(0x4ee))return _0xb88600[_0x2671d7(0x22c)]()['deadMembers']();else{if(_0x688f67['match'](/OPPONENT INDEX (\d+)/i)){const _0x39a379=Number(RegExp['$1']);return[_0xb88600[_0x2671d7(0x22c)]()['members']()[_0x39a379]];}}}}}}if(_0x688f67==='alive\x20actors'){if(_0x2671d7(0x5cd)!=='IUeGn')return $gameParty[_0x2671d7(0x490)]();else this[_0x2671d7(0x6e1)]();}else{if(_0x688f67==='alive\x20actors\x20not\x20user')return $gameParty[_0x2671d7(0x490)]()['filter'](_0x58d3f4=>_0x58d3f4!==_0xb88600);else{if(_0x688f67===_0x2671d7(0xda9)){if('mJgnU'!==_0x2671d7(0xdb0))this[_0x2671d7(0xc4b)](),this[_0x2671d7(0x486)]('PostRegenerateJS');else return $gameParty[_0x2671d7(0x490)]()[_0x2671d7(0xac7)](_0x54c56c=>_0x54c56c!==_0x41aa82);}else{if(_0x688f67==='dead\x20actors'){if(_0x2671d7(0x7ae)!==_0x2671d7(0x7ae))this[_0x2671d7(0x3f9)]();else return $gameParty[_0x2671d7(0x419)]();}else{if(_0x688f67[_0x2671d7(0x996)](/ACTOR INDEX (\d+)/i)){if('FMQnF'===_0x2671d7(0x4eb)){const _0x582650=Number(RegExp['$1']);return[$gameParty[_0x2671d7(0xc35)]()[_0x582650]];}else{const _0x50784a=_0x57a53f[_0x2671d7(0x448)](_0x4d3978['$1']);this[_0x2671d7(0x93f)](_0x50784a);}}else{if(_0x688f67[_0x2671d7(0x996)](/ACTOR ID (\d+)/i)){if(_0x2671d7(0x730)!==_0x2671d7(0xac9)){const _0x4aa190=Number(RegExp['$1']);return[$gameActors[_0x2671d7(0x73e)](_0x4aa190)];}else _0x503fc4[_0x2671d7(0x5e5)][_0x2671d7(0x889)][_0x2671d7(0x3a4)](this),this[_0x2671d7(0x8ef)]();}}}}}}if(_0x688f67===_0x2671d7(0x3cf)){if('DtQPj'!==_0x2671d7(0x82f)){if(this[_0x2671d7(0x985)][_0x2671d7(0x3cb)]!==_0x42fab4)return this[_0x2671d7(0x985)]['svAnchorX'];return this[_0x2671d7(0x73e)]()[_0x2671d7(0x407)][_0x2671d7(0x996)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x2671d7(0x985)]['svAnchorX']=_0x1594f9(_0x1d1d18['$1']),this[_0x2671d7(0x985)]['svAnchorY']=_0x9d52a(_0x5296ce['$2'])):this[_0x2671d7(0x985)]['svAnchorX']=_0x4422a9['prototype'][_0x2671d7(0xaaf)]['call'](this),this[_0x2671d7(0x985)]['svAnchorX'];}else return $gameTroop[_0x2671d7(0x490)]();}else{if(_0x688f67==='alive\x20enemies\x20not\x20user'){if(_0x2671d7(0x3e8)===_0x2671d7(0x3e8))return $gameTroop[_0x2671d7(0x490)]()['filter'](_0x2899be=>_0x2899be!==_0xb88600);else{if(!_0x2c76ae['VisuMZ_3_ActSeqImpact'])return;const _0x2d2517=_0x363ecd[_0x2671d7(0x4c1)][_0x2671d7(0x666)];if(!_0x2d2517)return;if(_0x206147[_0x2671d7(0xde8)][_0x2671d7(0x542)]<=1.04){_0xd2589e(_0x2671d7(0x79d)),_0x2877eb[_0x2671d7(0x6d4)]();return;}_0x1260e3['ConvertParams'](_0x3f6093,_0x2ec30d);const _0x262ce3=_0x4ed4f5[_0x2671d7(0x582)](),_0x442dbd=_0x48ef6a['ms']||0x1;_0x28b150['ActSeqImpact'][_0x2671d7(0x63c)](_0x442dbd,_0x262ce3);}}else{if(_0x688f67===_0x2671d7(0x81c)){if('mpLjA'==='mpLjA')return $gameTroop[_0x2671d7(0x490)]()[_0x2671d7(0xac7)](_0xa1e54d=>_0xa1e54d!==_0x41aa82);else{const _0x544feb=_0x2eaeea[_0x2671d7(0xd05)](_0x6fc4b2);this[_0x2671d7(0xa05)][_0x2671d7(0x973)]=0x0,_0x544feb[_0x2671d7(0x39c)](this[_0x2671d7(0x369)][_0x2671d7(0x5e0)](this,_0x544feb));}}else{if(_0x688f67===_0x2671d7(0xb4b))return $gameTroop[_0x2671d7(0x419)]();else{if(_0x688f67[_0x2671d7(0x996)](/ENEMY INDEX (\d+)/i)){const _0x39a2ef=Number(RegExp['$1']);return[$gameTroop[_0x2671d7(0xc35)]()[_0x39a2ef]];}else{if(_0x688f67[_0x2671d7(0x996)](/ENEMY ID (\d+)/i)){const _0x4ef0db=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0x2671d7(0xac7)](_0x15848d=>_0x15848d['enemyId']()===_0x4ef0db);}}}}}}if(_0x688f67===_0x2671d7(0xb93))return _0x202266[_0x2671d7(0xac7)](_0x2d6884=>_0x2d6884[_0x2671d7(0x51e)]());else{if(_0x688f67===_0x2671d7(0x6d7))return _0x202266[_0x2671d7(0xac7)](_0x5d4baa=>_0x5d4baa['isAlive']()&&_0x5d4baa!==_0xb88600);else{if(_0x688f67==='alive\x20battlers\x20not\x20target')return _0x202266[_0x2671d7(0xac7)](_0x2d68c4=>_0x2d68c4[_0x2671d7(0x51e)]()&&_0x2d68c4!==_0x41aa82);else{if(_0x688f67===_0x2671d7(0x53a)){if(_0x2671d7(0xace)===_0x2671d7(0xace))return _0x202266[_0x2671d7(0xac7)](_0x126987=>_0x126987[_0x2671d7(0xb44)]());else{_0x467a28[_0x2671d7(0xc58)][_0x2671d7(0xd1c)][_0x2671d7(0x3a4)](this),this['contents'][_0x2671d7(0xd66)]();if(!this[_0x2671d7(0x962)]())return;this[_0x2671d7(0xd6f)]();}}}}}return[];},VisuMZ['GetActionSequenceSpecialTarget']=function(){const _0x36f346=_0x4c6a01;return BattleManager[_0x36f346(0xda1)];},VisuMZ['GetActionSequenceSpecialTargetWithFlags']=function(_0x53ada9){const _0x1d967b=_0x4c6a01;return BattleManager[_0x1d967b(0xda1)];},PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Set_SetupAction',_0x6d94ea=>{const _0x23d71e=_0x4c6a01;if(!SceneManager[_0x23d71e(0x503)]())return;VisuMZ[_0x23d71e(0xc46)](_0x6d94ea,_0x6d94ea);const _0x5312f6=$gameTemp[_0x23d71e(0x582)](),_0x235f7c=BattleManager[_0x23d71e(0x3b6)],_0x4c11b8=BattleManager[_0x23d71e(0x49e)],_0x1ff5c6=BattleManager[_0x23d71e(0x710)]?BattleManager[_0x23d71e(0x710)][_0x23d71e(0x4be)](0x0):[],_0x53eec9=BattleManager[_0x23d71e(0x74c)];if(!_0x5312f6||!_0x235f7c||!_0x4c11b8)return;if(!_0x235f7c[_0x23d71e(0x6a7)]())return;if(_0x6d94ea[_0x23d71e(0xcd3)])_0x53eec9[_0x23d71e(0x284)](_0x4c11b8,_0x235f7c['item']());_0x6d94ea[_0x23d71e(0x24f)]&&_0x53eec9['push']('applyImmortal',_0x4c11b8,_0x1ff5c6,!![]);if(_0x6d94ea[_0x23d71e(0xbed)])_0x53eec9[_0x23d71e(0x543)](_0x23d71e(0x4da),_0x4c11b8,_0x235f7c);if(_0x6d94ea[_0x23d71e(0x459)])_0x53eec9[_0x23d71e(0x543)](_0x23d71e(0xac6));if(_0x6d94ea[_0x23d71e(0xc39)])_0x53eec9[_0x23d71e(0x543)](_0x23d71e(0x656),_0x4c11b8,_0x235f7c);if(_0x6d94ea[_0x23d71e(0x38f)])_0x53eec9['push'](_0x23d71e(0x2dd));_0x5312f6[_0x23d71e(0x2b5)](_0x23d71e(0x46c));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x870),_0x18f160=>{const _0x25a457=_0x4c6a01;if(!SceneManager[_0x25a457(0x503)]())return;VisuMZ[_0x25a457(0xc46)](_0x18f160,_0x18f160);const _0x4c4f1f=$gameTemp[_0x25a457(0x582)](),_0x1de562=BattleManager['_action'],_0x414497=BattleManager[_0x25a457(0x49e)],_0x192c19=BattleManager['_allTargets']?BattleManager[_0x25a457(0x710)][_0x25a457(0x4be)](0x0):[],_0x984fb=BattleManager[_0x25a457(0x74c)],_0x5d9849=_0x18f160[_0x25a457(0x243)]??![];if(!_0x4c4f1f||!_0x1de562||!_0x414497)return;if(!_0x1de562[_0x25a457(0x6a7)]())return;let _0x1bfdf8=_0x5d9849?_0x984fb['getDualWieldTimes'](_0x414497):0x1;for(let _0x1daf0c=0x0;_0x1daf0c<_0x1bfdf8;_0x1daf0c++){_0x5d9849&&_0x414497[_0x25a457(0x966)]()&&_0x984fb[_0x25a457(0x543)](_0x25a457(0x418),_0x414497,_0x1daf0c);if(_0x18f160['PerformAction'])_0x984fb['push'](_0x25a457(0xbfe),_0x414497,_0x1de562);if(_0x18f160[_0x25a457(0x47f)]>0x0)_0x984fb[_0x25a457(0x543)]('waitCount',_0x18f160[_0x25a457(0x47f)]);if(_0x18f160[_0x25a457(0xaa2)])_0x984fb[_0x25a457(0x543)](_0x25a457(0x849),_0x414497,_0x192c19,_0x1de562[_0x25a457(0x6a7)]()[_0x25a457(0x934)]);if(_0x18f160[_0x25a457(0x38f)])_0x984fb[_0x25a457(0x543)](_0x25a457(0x2dd));for(const _0x32d7c4 of _0x192c19){if(!_0x32d7c4)continue;if(_0x18f160[_0x25a457(0xe14)])_0x984fb['push'](_0x25a457(0x840),_0x414497,_0x32d7c4);}}if(_0x5d9849&&_0x414497[_0x25a457(0x966)]()){if(_0x25a457(0x920)===_0x25a457(0x920))_0x984fb[_0x25a457(0x543)](_0x25a457(0x522),_0x414497);else return![];}if(_0x18f160['ApplyImmortal'])_0x984fb['push'](_0x25a457(0x2a4),_0x414497,_0x192c19,![]);_0x4c4f1f[_0x25a457(0x2b5)]('battlelog');}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xb8d),_0x4f1c7a=>{const _0xdb49f9=_0x4c6a01;if(!SceneManager[_0xdb49f9(0x503)]())return;VisuMZ[_0xdb49f9(0xc46)](_0x4f1c7a,_0x4f1c7a);const _0x349085=$gameTemp[_0xdb49f9(0x582)](),_0x30acbd=BattleManager[_0xdb49f9(0x3b6)],_0x2c6f70=BattleManager[_0xdb49f9(0x49e)],_0x11a4ac=BattleManager[_0xdb49f9(0x710)]?BattleManager[_0xdb49f9(0x710)][_0xdb49f9(0x4be)](0x0):[],_0x3ac401=BattleManager[_0xdb49f9(0x74c)],_0xb4b909=_0x4f1c7a[_0xdb49f9(0x243)]??![];if(!_0x349085||!_0x30acbd||!_0x2c6f70)return;if(!_0x30acbd['item']())return;let _0x4e6698=_0xb4b909?_0x3ac401[_0xdb49f9(0x5e6)](_0x2c6f70):0x1;for(let _0x3f35ec=0x0;_0x3f35ec<_0x4e6698;_0x3f35ec++){if(_0xdb49f9(0x2f2)!==_0xdb49f9(0x2f2)){if(!_0x4ac86d[_0xdb49f9(0x503)]())return;if(!_0x5d186c[_0xdb49f9(0xc07)])return;const _0x5697c0=_0x4cd315['_action'];if(!_0x5697c0)return;_0x5697c0[_0xdb49f9(0x514)]=!![];}else for(const _0x5431c6 of _0x11a4ac){if(_0xdb49f9(0x81b)!=='qnwTf'){if(_0x3d0ad1==='victory')this[_0xdb49f9(0x69d)]=!![];if(this['_battler']&&this[_0xdb49f9(0xbf3)]['isDead']()){this[_0xdb49f9(0x8d6)]=_0x49f950[_0xdb49f9(0xbd7)][_0xdb49f9(0x52a)];return;}const _0x390609=_0x5e32bf[_0xdb49f9(0xbd7)][_0x4dba2d];this['_motion']=_0x390609,this[_0xdb49f9(0x221)]=0x0,this[_0xdb49f9(0xb56)]=0x0;}else{if(!_0x5431c6)continue;_0xb4b909&&_0x2c6f70[_0xdb49f9(0x966)]()&&_0x3ac401[_0xdb49f9(0x543)]('setActiveWeaponSet',_0x2c6f70,_0x3f35ec);if(_0x4f1c7a['PerformAction'])_0x3ac401[_0xdb49f9(0x543)](_0xdb49f9(0xbfe),_0x2c6f70,_0x30acbd);if(_0x4f1c7a['WaitCount1']>0x0)_0x3ac401[_0xdb49f9(0x543)](_0xdb49f9(0xd78),_0x4f1c7a[_0xdb49f9(0x30b)]);if(_0x4f1c7a['ActionAnimation'])_0x3ac401[_0xdb49f9(0x543)]('showAnimation',_0x2c6f70,[_0x5431c6],_0x30acbd[_0xdb49f9(0x6a7)]()[_0xdb49f9(0x934)]);if(_0x4f1c7a[_0xdb49f9(0xa9e)]>0x0)_0x3ac401[_0xdb49f9(0x543)](_0xdb49f9(0xd78),_0x4f1c7a[_0xdb49f9(0xa9e)]);if(_0x4f1c7a['ActionEffect'])_0x3ac401['push'](_0xdb49f9(0x840),_0x2c6f70,_0x5431c6);}}}_0xb4b909&&_0x2c6f70[_0xdb49f9(0x966)]()&&_0x3ac401[_0xdb49f9(0x543)](_0xdb49f9(0x522),_0x2c6f70);if(_0x4f1c7a[_0xdb49f9(0x24f)])_0x3ac401['push'](_0xdb49f9(0x2a4),_0x2c6f70,_0x11a4ac,![]);_0x349085[_0xdb49f9(0x2b5)](_0xdb49f9(0x46c));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x482),_0x109436=>{const _0x377664=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x377664(0xc46)](_0x109436,_0x109436);const _0x17d7f9=$gameTemp[_0x377664(0x582)](),_0x14f805=BattleManager[_0x377664(0x3b6)],_0x21b1ae=BattleManager[_0x377664(0x49e)],_0x26b202=BattleManager[_0x377664(0x710)]?BattleManager[_0x377664(0x710)][_0x377664(0x4be)](0x0):[],_0x285feb=BattleManager['_logWindow'];if(!_0x17d7f9||!_0x14f805||!_0x21b1ae)return;if(!_0x14f805['item']())return;if(_0x109436[_0x377664(0x24f)])_0x285feb['push']('applyImmortal',_0x21b1ae,_0x26b202,![]);if(_0x109436[_0x377664(0x697)])_0x285feb['push'](_0x377664(0x69c));if(_0x109436[_0x377664(0xe23)])_0x285feb[_0x377664(0x543)](_0x377664(0xc7c));if(_0x109436[_0x377664(0x5f6)])_0x285feb[_0x377664(0x543)](_0x377664(0xd66));if(_0x109436[_0x377664(0x446)])_0x285feb['push'](_0x377664(0x3b1),_0x21b1ae);if(_0x109436[_0x377664(0x459)])_0x285feb['push'](_0x377664(0xac6));_0x17d7f9['setWaitMode'](_0x377664(0x46c));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_ChangeAngle',_0x4139df=>{const _0x1356a0=_0x4c6a01;if(!SceneManager[_0x1356a0(0x503)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1356a0(0xc46)](_0x4139df,_0x4139df);const _0x4fc54f=$gameTemp[_0x1356a0(0x582)](),_0x3b44e0=_0x4139df[_0x1356a0(0xa51)];if(!_0x4fc54f)return;$gameScreen[_0x1356a0(0x3fc)](_0x4139df['Angle'],_0x4139df[_0x1356a0(0xa14)],_0x4139df['EasingType']);if(_0x3b44e0)_0x4fc54f['setWaitMode'](_0x1356a0(0x43e));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x497),_0x531460=>{const _0x14e374=_0x4c6a01;if(!SceneManager[_0x14e374(0x503)]())return;if(!Imported[_0x14e374(0x880)])return;VisuMZ[_0x14e374(0xc46)](_0x531460,_0x531460);const _0x31bd70=$gameTemp[_0x14e374(0x582)](),_0x6460df=_0x531460[_0x14e374(0xa51)];if(!_0x31bd70)return;$gameScreen['setBattleAngle'](0x0,_0x531460['Duration'],_0x531460[_0x14e374(0xd9f)]);if(_0x6460df)_0x31bd70[_0x14e374(0x2b5)](_0x14e374(0x43e));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Angle_WaitForAngle',_0x203db3=>{const _0x440650=_0x4c6a01;if(!SceneManager[_0x440650(0x503)]())return;if(!Imported[_0x440650(0x880)])return;const _0x258ea6=$gameTemp[_0x440650(0x582)]();if(!_0x258ea6)return;_0x258ea6[_0x440650(0x2b5)](_0x440650(0x43e));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0xdf0),_0x56aa9a=>{const _0x32559e=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x32559e(0xc46)](_0x56aa9a,_0x56aa9a);const _0x2e6331=$gameTemp['getLastPluginCommandInterpreter'](),_0x48a326=BattleManager[_0x32559e(0x3b6)],_0x1f8166=BattleManager[_0x32559e(0x49e)],_0x2c7e2c=VisuMZ[_0x32559e(0xaf8)](_0x56aa9a[_0x32559e(0x6d1)]),_0x38e8fa=_0x56aa9a[_0x32559e(0x7f3)],_0x20be9d=BattleManager[_0x32559e(0x74c)];if(!_0x2e6331||!_0x48a326||!_0x1f8166)return;if(!_0x48a326[_0x32559e(0x6a7)]())return;let _0x1bd4eb=_0x48a326['item']()[_0x32559e(0x934)];if(_0x1bd4eb<0x0)_0x1bd4eb=_0x1f8166[_0x32559e(0xdc3)]();$gameTemp[_0x32559e(0x435)](_0x2c7e2c,_0x1bd4eb,_0x38e8fa),_0x56aa9a[_0x32559e(0x38f)]&&(_0x32559e(0xb94)!==_0x32559e(0xb94)?this[_0x32559e(0xc11)]=_0x32559e(0x3e6):_0x2e6331[_0x32559e(0x2b5)]('battleAnimation'));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x402),_0x29b6ac=>{const _0x19dd75=_0x4c6a01;if(!SceneManager[_0x19dd75(0x503)]())return;VisuMZ[_0x19dd75(0xc46)](_0x29b6ac,_0x29b6ac);const _0xde176c=$gameTemp[_0x19dd75(0x582)](),_0x6394e0=BattleManager['_subject'],_0x1d335f=VisuMZ[_0x19dd75(0xaf8)](_0x29b6ac[_0x19dd75(0x6d1)]),_0x1f87c6=_0x29b6ac[_0x19dd75(0x7f3)],_0x3d9887=BattleManager[_0x19dd75(0x74c)];if(!_0xde176c||!_0x6394e0)return;const _0x45bfa7=_0x6394e0[_0x19dd75(0xdc3)]();$gameTemp['requestAnimation'](_0x1d335f,_0x45bfa7,_0x1f87c6),_0x29b6ac[_0x19dd75(0x38f)]&&(_0x19dd75(0xb74)===_0x19dd75(0x5a7)?this['opacity']=(this[_0x19dd75(0x973)]*(_0x8b9e86-0x1)+this[_0x19dd75(0xaf0)])/_0x767f8c:_0xde176c[_0x19dd75(0x2b5)](_0x19dd75(0x8bf)));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x61b),_0x5d1247=>{const _0x53724b=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5d1247,_0x5d1247);const _0x560f02=_0x12e0aa[_0x53724b(0x518)](_0x5d1247[_0x53724b(0x403)]);if(_0x560f02<=0x0)return;const _0x58bea1=$gameTemp[_0x53724b(0x582)](),_0x12e0aa=BattleManager[_0x53724b(0x49e)],_0x2bce2e=VisuMZ[_0x53724b(0xaf8)](_0x5d1247[_0x53724b(0x6d1)]),_0x3c48cc=_0x5d1247[_0x53724b(0x7f3)],_0x1cfc53=BattleManager[_0x53724b(0x74c)];if(!_0x58bea1||!_0x12e0aa)return;$gameTemp[_0x53724b(0x435)](_0x2bce2e,_0x560f02,_0x3c48cc),_0x5d1247['WaitForAnimation']&&_0x58bea1[_0x53724b(0x2b5)]('battleAnimation');}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x235),_0x436a22=>{const _0x433e63=_0x4c6a01;if(!SceneManager[_0x433e63(0x503)]())return;VisuMZ[_0x433e63(0xc46)](_0x436a22,_0x436a22);const _0x406adf=$gameTemp['getLastPluginCommandInterpreter'](),_0x26896a=BattleManager[_0x433e63(0x3b6)],_0x3ec3c3=_0x436a22[_0x433e63(0x7f3)],_0x116f03=VisuMZ['CreateActionSequenceTargets'](_0x436a22[_0x433e63(0x6d1)]);if(!_0x406adf||!_0x26896a)return;if(!_0x26896a[_0x433e63(0x6a7)]())return;for(const _0x4fd884 of _0x116f03){if(!_0x4fd884)continue;_0x4fd884['performCastAnimation'](_0x26896a,_0x3ec3c3);}if(_0x436a22['WaitForAnimation'])_0x406adf[_0x433e63(0x2b5)](_0x433e63(0x8bf));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x319),_0x5eeb67=>{const _0x4c0aac=_0x4c6a01;VisuMZ[_0x4c0aac(0xc46)](_0x5eeb67,_0x5eeb67);const _0x1ee136=$gameTemp['getLastPluginCommandInterpreter'](),_0x1a422b=VisuMZ['CreateActionSequenceTargets'](_0x5eeb67[_0x4c0aac(0x6d1)]),_0x40cf7b=_0x5eeb67[_0x4c0aac(0x9cb)];if(!_0x40cf7b)return;for(const _0x45df06 of _0x1a422b){if(!_0x45df06)continue;if(!_0x45df06[_0x4c0aac(0x966)]())continue;_0x45df06['setBattlePortrait'](_0x40cf7b);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Animation_PlayAtCoordinate',_0x2793e7=>{const _0x3eb449=_0x4c6a01;if(!SceneManager[_0x3eb449(0x4c1)])return;if(!SceneManager['_scene']['_spriteset'])return;if(!Imported[_0x3eb449(0xad0)])return;VisuMZ[_0x3eb449(0xc46)](_0x2793e7,_0x2793e7);const _0x28214d=$gameTemp[_0x3eb449(0x582)](),_0x5ead47=Math['round'](_0x2793e7['pointX']),_0x5ca18c=Math[_0x3eb449(0x9c7)](_0x2793e7[_0x3eb449(0x213)]);$gameTemp[_0x3eb449(0x20d)](_0x5ead47,_0x5ca18c,_0x2793e7[_0x3eb449(0x387)],_0x2793e7[_0x3eb449(0x7f3)],_0x2793e7[_0x3eb449(0x74f)]);if(_0x2793e7['WaitComplete']&&_0x28214d){if('OoKRj'!==_0x3eb449(0xdba)){const _0x1341a5=_0x4e6f77[0x0][_0x3eb449(0x511)](_0x2f9593[0x0],_0x507475[0x0]),_0x4bdcd7=_0x277e8e[0x1][_0x3eb449(0x511)](_0x2b3308[0x1],_0x30438f[0x1])[_0x3eb449(0x4e9)](),_0x299166=new _0x3e30b7(_0x5d0d21['format'](_0x4bdcd7),'i');_0x5a6bd6[_0x1341a5]=_0x299166;}else SceneManager['_scene'][_0x3eb449(0x666)][_0x3eb449(0xa83)](),_0x28214d[_0x3eb449(0x2b5)](_0x3eb449(0x8bf));}}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x629),_0x4a7500=>{const _0x16f6fd=_0x4c6a01;if(!SceneManager[_0x16f6fd(0x503)]())return;VisuMZ[_0x16f6fd(0xc46)](_0x4a7500,_0x4a7500);const _0x245333=$gameTemp[_0x16f6fd(0x582)](),_0x530e42=VisuMZ['CreateActionSequenceTargets'](_0x4a7500[_0x16f6fd(0x6d1)]),_0x3bf19a=_0x4a7500[_0x16f6fd(0x387)],_0x3a4acb=_0x4a7500[_0x16f6fd(0x7f3)];if(!_0x245333)return;$gameTemp[_0x16f6fd(0x435)](_0x530e42,_0x3bf19a,_0x3a4acb);if(_0x4a7500[_0x16f6fd(0x38f)])_0x245333[_0x16f6fd(0x2b5)](_0x16f6fd(0x8bf));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x412),_0x152c5d=>{const _0x8402fe=_0x4c6a01;if(!SceneManager[_0x8402fe(0x503)]())return;const _0x333807=$gameTemp[_0x8402fe(0x582)]();if(!_0x333807)return;_0x333807[_0x8402fe(0x2b5)](_0x8402fe(0x8bf));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xaac),_0x2eebe3=>{const _0x29e55b=_0x4c6a01;if(!SceneManager[_0x29e55b(0x503)]())return;VisuMZ[_0x29e55b(0xc46)](_0x2eebe3,_0x2eebe3);const _0x573424=BattleManager[_0x29e55b(0x74c)],_0x313552=_0x2eebe3['CopyCombatLog']&&Imported[_0x29e55b(0xda6)];_0x573424['addText'](_0x2eebe3[_0x29e55b(0xc70)]),_0x313552&&Imported[_0x29e55b(0xda6)]&&$gameSystem[_0x29e55b(0x3ba)](_0x2eebe3[_0x29e55b(0xc70)]||'',_0x2eebe3[_0x29e55b(0xa54)]||0x0);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_BattleLog_Clear',_0x563231=>{const _0x1e76fe=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;const _0x3e65cf=BattleManager[_0x1e76fe(0x74c)];_0x3e65cf[_0x1e76fe(0xd66)]();}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x637),_0x350bd3=>{const _0x4057cb=_0x4c6a01;if(!SceneManager[_0x4057cb(0x503)]())return;const _0x47c81b=$gameTemp[_0x4057cb(0x582)](),_0x4d5dd1=BattleManager[_0x4057cb(0x3b6)],_0x2792e8=BattleManager[_0x4057cb(0x49e)],_0x13779f=BattleManager['_logWindow'];if(!_0x47c81b||!_0x4d5dd1||!_0x2792e8)return;if(!_0x4d5dd1[_0x4057cb(0x6a7)]())return;_0x13779f['displayAction'](_0x2792e8,_0x4d5dd1[_0x4057cb(0x6a7)]()),_0x47c81b['setWaitMode'](_0x4057cb(0x46c));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xcdb),_0x36ac20=>{const _0x1d2dd1=_0x4c6a01;if(!SceneManager[_0x1d2dd1(0x503)]())return;const _0x238be5=BattleManager[_0x1d2dd1(0x74c)];_0x238be5[_0x1d2dd1(0xe1c)]();}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x78b),_0x31c507=>{const _0x3571de=_0x4c6a01;if(!SceneManager[_0x3571de(0x503)]())return;const _0x29a324=BattleManager['_logWindow'];_0x29a324['pushBaseLine']();}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x5ae),_0x2e7b2a=>{const _0x2d31fc=_0x4c6a01;if(!SceneManager[_0x2d31fc(0x503)]())return;const _0x37f1d4=BattleManager[_0x2d31fc(0x74c)];_0x37f1d4[_0x2d31fc(0xd1c)]();}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x21c),_0xabaadc=>{const _0x4de5f2=_0x4c6a01;if(!SceneManager[_0x4de5f2(0x503)]())return;VisuMZ[_0x4de5f2(0xc46)](_0xabaadc,_0xabaadc),SceneManager[_0x4de5f2(0x4c1)]['setVisibleUI'](_0xabaadc[_0x4de5f2(0x723)]);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x95c),_0x501be5=>{const _0x4329fe=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;const _0x142184=$gameTemp[_0x4329fe(0x582)]();_0x142184[_0x4329fe(0x2b5)](_0x4329fe(0x46c));}),PluginManager['registerCommand'](pluginData['name'],_0x4c6a01(0x4e1),_0x134983=>{const _0x4cc2eb=_0x4c6a01;if(!SceneManager[_0x4cc2eb(0x503)]())return;const _0x1e5b2e=$gameTemp['getLastPluginCommandInterpreter'](),_0x424c68=BattleManager[_0x4cc2eb(0x74c)];_0x424c68['waitForNewLine'](),_0x1e5b2e['setWaitMode']('battlelog');}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x398),_0x546926=>{const _0x1876b3=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1876b3(0x880)])return;VisuMZ[_0x1876b3(0xc46)](_0x546926,_0x546926);const _0x28da39=$gameScreen['battleCameraData']();_0x28da39[_0x1876b3(0x5c1)]=_0x546926[_0x1876b3(0xb78)];}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Camera_FocusPoint',_0x45b441=>{const _0x35fa48=_0x4c6a01;if(!SceneManager[_0x35fa48(0x503)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x45b441,_0x45b441);const _0xa8e92b=$gameTemp[_0x35fa48(0x582)](),_0x47fae5=_0x45b441[_0x35fa48(0x917)];$gameScreen[_0x35fa48(0x6e0)](_0x45b441[_0x35fa48(0x4d2)],_0x45b441[_0x35fa48(0xa88)],_0x45b441[_0x35fa48(0xa14)],_0x45b441[_0x35fa48(0xd9f)]);if(_0x47fae5)_0xa8e92b[_0x35fa48(0x2b5)](_0x35fa48(0xc97));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x201),_0x4af60d=>{const _0x182f1d=_0x4c6a01;if(!SceneManager[_0x182f1d(0x503)]())return;if(!Imported[_0x182f1d(0x880)])return;VisuMZ[_0x182f1d(0xc46)](_0x4af60d,_0x4af60d);const _0x581fec=$gameTemp['getLastPluginCommandInterpreter'](),_0x5ce6a8=VisuMZ[_0x182f1d(0xaf8)](_0x4af60d[_0x182f1d(0x6d1)]),_0x5700e8=_0x4af60d[_0x182f1d(0x917)];$gameScreen['setBattleCameraTargets'](_0x5ce6a8,_0x4af60d[_0x182f1d(0xa14)],_0x4af60d['EasingType']);if(_0x5700e8)_0x581fec['setWaitMode']('battleCamera');}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Camera_Offset',_0x4f54bf=>{const _0x20f7d1=_0x4c6a01;if(!SceneManager[_0x20f7d1(0x503)]())return;if(!Imported[_0x20f7d1(0x880)])return;VisuMZ[_0x20f7d1(0xc46)](_0x4f54bf,_0x4f54bf);const _0x3e2df3=$gameTemp['getLastPluginCommandInterpreter'](),_0x523271=_0x4f54bf[_0x20f7d1(0x917)];$gameScreen[_0x20f7d1(0x3d1)](_0x4f54bf[_0x20f7d1(0xe10)],_0x4f54bf[_0x20f7d1(0x6f9)],_0x4f54bf[_0x20f7d1(0xa14)],_0x4f54bf[_0x20f7d1(0xd9f)]);if(_0x523271)_0x3e2df3[_0x20f7d1(0x2b5)]('battleCamera');}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xbc4),_0x153966=>{const _0x184524=_0x4c6a01;if(!SceneManager[_0x184524(0x503)]())return;if(!Imported[_0x184524(0x880)])return;VisuMZ[_0x184524(0xc46)](_0x153966,_0x153966);const _0x2ef276=$gameTemp[_0x184524(0x582)](),_0x180703=_0x153966[_0x184524(0x9bc)],_0x291ab6=_0x153966['ResetOffset'],_0x153745=_0x153966[_0x184524(0x917)];if(_0x180703){const _0x1d69cb=Math[_0x184524(0x9c7)](Graphics[_0x184524(0xe09)]/0x2),_0x5418c0=Math[_0x184524(0x9c7)](Graphics[_0x184524(0xb45)]/0x2);$gameScreen[_0x184524(0x6e0)](_0x1d69cb,_0x5418c0,_0x153966[_0x184524(0xa14)],_0x153966[_0x184524(0xd9f)]);}if(_0x291ab6){if(_0x184524(0x7c3)==='qqUXn')return _0x108a75['_baseY']-_0x2b64af[_0x184524(0xcaa)];else $gameScreen[_0x184524(0x3d1)](0x0,0x0,_0x153966[_0x184524(0xa14)],_0x153966[_0x184524(0xd9f)]);}if(_0x153745)_0x2ef276['setWaitMode'](_0x184524(0xc97));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x3f0),_0x37d6bc=>{const _0x34636e=_0x4c6a01;if(!SceneManager[_0x34636e(0x503)]())return;if(!Imported[_0x34636e(0x880)])return;const _0x3d0db3=$gameTemp[_0x34636e(0x582)]();if(!_0x3d0db3)return;_0x3d0db3['setWaitMode'](_0x34636e(0xc97));}),VisuMZ[_0x4c6a01(0x5e5)]['CreateCutinSettings']=function(_0x40157a){const _0x148057=_0x4c6a01;_0x40157a[_0x148057(0x691)]='';const _0xfbebb5=VisuMZ[_0x148057(0x5e7)]['CreateCutinSettings'](_0x40157a),_0x39bc55=VisuMZ['CreateActionSequenceTargets'](_0x40157a[_0x148057(0x6d1)])[0x0]||null;return _0x39bc55&&(_0xfbebb5['portraitFilename']=_0x39bc55[_0x148057(0xb6e)](),_0xfbebb5[_0x148057(0xcd5)]=_0x39bc55[_0x148057(0x293)](),_0xfbebb5['portraitHue']=_0x39bc55[_0x148057(0x878)](),_0xfbebb5[_0x148057(0xa27)]=_0x39bc55['visualCutinPortraitType'](),_0x39bc55[_0x148057(0xb37)]()&&(_0x39bc55[_0x148057(0x31a)]()&&(_0xfbebb5[_0x148057(0xd44)]=!_0xfbebb5[_0x148057(0xd44)]),_0x39bc55['flipVisualCutinVert']()&&(_0xfbebb5[_0x148057(0x549)]=!_0xfbebb5[_0x148057(0x549)]),_0xfbebb5['portraitType']===_0x148057(0xa07)&&(_0xfbebb5[_0x148057(0xd44)]=!_0xfbebb5['portraitFlipHorz']),_0x40157a[_0x148057(0x8a4)][_0x148057(0x915)]&&(_0xfbebb5[_0x148057(0xa9a)]*=-0x1),_0x40157a[_0x148057(0x8a4)][_0x148057(0x616)]&&('MsyPa'==='zWQdV'?(!_0x42bcfd['battleMembers']()[_0x148057(0x864)](this[_0x148057(0x56f)])&&(this[_0x148057(0x56f)]=null),this[_0x148057(0x56f)]?(this[_0x148057(0x99c)]=this[_0x148057(0x56f)],this[_0x148057(0x99c)][_0x148057(0x58b)]='charged',this['_inputting']=!![],this[_0x148057(0x56f)]=null):(this['cancelActorInput'](),this['_currentActor']=null,this[_0x148057(0xe1e)]=![])):_0xfbebb5[_0x148057(0xa43)]*=-0x1),_0xfbebb5[_0x148057(0x97e)]+=_0x40157a['ExtraSettings'][_0x148057(0x8e8)]??0x0)),_0xfbebb5;},PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x976),_0x589c45=>{const _0x222533=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x222533(0xc46)](_0x589c45,_0x589c45);const _0x36d83d=VisuMZ[_0x222533(0x5e5)][_0x222533(0x2d0)](_0x589c45);SceneManager[_0x222533(0x4c1)][_0x222533(0xcd6)](_0x36d83d);const _0x2742fd=$gameTemp[_0x222533(0x582)]();_0x2742fd&&_0x589c45[_0x222533(0x4f3)]&&_0x2742fd[_0x222533(0x2b5)](_0x222533(0x811));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x3d0),_0x3ef763=>{const _0x592013=_0x4c6a01;if(!SceneManager[_0x592013(0x503)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ['ConvertParams'](_0x3ef763,_0x3ef763),SceneManager[_0x592013(0x4c1)]['clearAllVisualCutins']();const _0x437895=$gameTemp['getLastPluginCommandInterpreter']();_0x437895&&_0x3ef763[_0x592013(0xb72)]&&_0x437895[_0x592013(0x2b5)](_0x592013(0x3a9));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x494),_0x402620=>{const _0x2a79ad=_0x4c6a01;if(!SceneManager[_0x2a79ad(0x503)]())return;if(!Imported[_0x2a79ad(0x901)])return;VisuMZ[_0x2a79ad(0xc46)](_0x402620,_0x402620);const _0xc817ab=_0x402620[_0x2a79ad(0xd11)][_0x2a79ad(0x613)]()[_0x2a79ad(0x4e9)]();SceneManager[_0x2a79ad(0x4c1)][_0x2a79ad(0xad3)](_0xc817ab);const _0xeb425c=$gameTemp[_0x2a79ad(0x582)]();_0xeb425c&&_0x402620[_0x2a79ad(0xb72)]&&_0xeb425c['setWaitMode']('cutinExit');}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x454),_0x5d1c11=>{const _0x2b38b8=_0x4c6a01;if(!SceneManager[_0x2b38b8(0x503)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x50aa04=$gameTemp[_0x2b38b8(0x582)]();_0x50aa04[_0x2b38b8(0x2b5)](_0x2b38b8(0x811));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x297),_0x253c1d=>{const _0x4d3e7a=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4d3e7a(0x901)])return;const _0x175ebc=$gameTemp[_0x4d3e7a(0x582)]();_0x175ebc['setWaitMode'](_0x4d3e7a(0x3a9));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x23c),_0x5c3d3e=>{const _0x5694bc=_0x4c6a01;if(!SceneManager[_0x5694bc(0x503)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x5694bc(0xc46)](_0x5c3d3e,_0x5c3d3e);const _0x1815e6=VisuMZ[_0x5694bc(0xaf8)](_0x5c3d3e[_0x5694bc(0x6d1)]),_0x3e6744=_0x5c3d3e[_0x5694bc(0xb59)]['toLowerCase']()[_0x5694bc(0x4e9)]();for(const _0x29d7ac of _0x1815e6){if(_0x5694bc(0x3a1)!=='qKkfu'){if(!_0x29d7ac)continue;_0x29d7ac[_0x5694bc(0x89a)](_0x3e6744);}else{const _0x3b3707=this[_0x5694bc(0x88c)]();_0xa6d66e=_0x3b3707[_0x87e872]?_0x3b3707[_0x261514][_0x5694bc(0x523)]:0x0;}}}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],'ActSeq_DB_DragonbonesTimeScale',_0x30910a=>{const _0x4ce853=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4ce853(0x660)])return;VisuMZ[_0x4ce853(0xc46)](_0x30910a,_0x30910a);const _0x2b5fb0=VisuMZ['CreateActionSequenceTargets'](_0x30910a[_0x4ce853(0x6d1)]),_0x292e67=_0x30910a['TimeScale'];for(const _0x2f4fe2 of _0x2b5fb0){if(!_0x2f4fe2)continue;_0x2f4fe2['dragonbonesData']()['timeScale']=_0x292e67;}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xbc3),_0x11bb9e=>{const _0x19f593=_0x4c6a01;if(!SceneManager[_0x19f593(0x503)]())return;if(!Imported[_0x19f593(0xc07)])return;VisuMZ[_0x19f593(0xc46)](_0x11bb9e,_0x11bb9e);const _0x22eaf7=BattleManager[_0x19f593(0x3b6)],_0x2afd96=_0x11bb9e[_0x19f593(0x6d9)];if(!_0x22eaf7)return;_0x22eaf7[_0x19f593(0x337)]=_0x2afd96;}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xdd9),_0x525024=>{const _0x288138=_0x4c6a01;if(!SceneManager[_0x288138(0x503)]())return;if(!Imported[_0x288138(0xc07)])return;const _0x2d2861=BattleManager[_0x288138(0x3b6)];if(!_0x2d2861)return;_0x2d2861[_0x288138(0xcfc)]();}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Element_ForceElements',_0x3716e3=>{const _0x12bdfd=_0x4c6a01;if(!SceneManager[_0x12bdfd(0x503)]())return;if(!Imported[_0x12bdfd(0xc07)])return;VisuMZ[_0x12bdfd(0xc46)](_0x3716e3,_0x3716e3);const _0x638198=BattleManager['_action'],_0x9bf59f=_0x3716e3[_0x12bdfd(0x6d9)];if(!_0x638198)return;_0x638198['_battleCoreForcedElements']=_0x9bf59f;}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],'ActSeq_Element_NullElements',_0x5e9e74=>{const _0x1cf20d=_0x4c6a01;if(!SceneManager[_0x1cf20d(0x503)]())return;if(!Imported[_0x1cf20d(0xc07)])return;const _0x456225=BattleManager[_0x1cf20d(0x3b6)];if(!_0x456225)return;_0x456225[_0x1cf20d(0x514)]=!![];}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x9f3),_0x4b7688=>{const _0x4d3601=_0x4c6a01;if(!Imported[_0x4d3601(0x5e1)])return;if(!SceneManager[_0x4d3601(0x503)]())return;VisuMZ[_0x4d3601(0xc46)](_0x4b7688,_0x4b7688);const _0x494661=VisuMZ['CreateActionSequenceTargets'](_0x4b7688['Targets']);for(const _0x2556c7 of _0x494661){if(!_0x2556c7)continue;_0x2556c7[_0x4d3601(0x436)](_0x4d3601(0x807)),_0x2556c7[_0x4d3601(0x436)](_0x4d3601(0xc0a)),_0x2556c7[_0x4d3601(0x436)]('tv'),_0x2556c7['clearHorrorEffects']();}$gamePlayer[_0x4d3601(0xd1c)]();}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x2b0),_0x3f7e8a=>{const _0x156e8f=_0x4c6a01;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x156e8f(0x503)]())return;VisuMZ[_0x156e8f(0xc46)](_0x3f7e8a,_0x3f7e8a);const _0x1be239=VisuMZ[_0x156e8f(0xaf8)](_0x3f7e8a[_0x156e8f(0x6d1)]),_0x4a63c5=_0x156e8f(0xc0a);_0x3f7e8a[_0x156e8f(0x4ea)]=Math[_0x156e8f(0xa32)](_0x3f7e8a['slices']/0x2),_0x3f7e8a['sliceMax']=_0x3f7e8a[_0x156e8f(0x7b3)],_0x3f7e8a[_0x156e8f(0xc53)]=!![];for(const _0x1938df of _0x1be239){if(!_0x1938df)continue;_0x1938df['setHorrorEffectSettings'](_0x4a63c5,_0x3f7e8a);}$gamePlayer[_0x156e8f(0xd1c)]();}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Horror_GlitchRemove',_0x4723a0=>{const _0x210195=_0x4c6a01;if(!Imported[_0x210195(0x5e1)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x210195(0xc46)](_0x4723a0,_0x4723a0);const _0x291ec4=VisuMZ[_0x210195(0xaf8)](_0x4723a0[_0x210195(0x6d1)]);for(const _0xdda240 of _0x291ec4){if('yQwVB'===_0x210195(0x225))_0x1043b5['_tpbNeedsPartyCommand']=![],this[_0x210195(0x3f3)]();else{if(!_0xdda240)continue;_0xdda240['removeHorrorEffect'](_0x210195(0xc0a));}}$gamePlayer[_0x210195(0xd1c)]();}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x822),_0xc060d2=>{const _0x1c8bbd=_0x4c6a01;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x1c8bbd(0x503)]())return;VisuMZ[_0x1c8bbd(0xc46)](_0xc060d2,_0xc060d2);const _0x1c0d6b=VisuMZ['CreateActionSequenceTargets'](_0xc060d2[_0x1c8bbd(0x6d1)]),_0x1df38c=_0x1c8bbd(0x807);for(const _0x28c617 of _0x1c0d6b){if(_0x1c8bbd(0x258)===_0x1c8bbd(0x258)){if(!_0x28c617)continue;_0x28c617[_0x1c8bbd(0x98f)](_0x1df38c,_0xc060d2);}else return[_0x1c8bbd(0x2dc),_0x1c8bbd(0x555),_0x1c8bbd(0xd5e)][_0x1c8bbd(0x864)](this[_0x1c8bbd(0xa1d)][_0x1c8bbd(0x7b7)]());}$gamePlayer[_0x1c8bbd(0xd1c)]();}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xba5),_0x1ffa6d=>{const _0x26f6c2=_0x4c6a01;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x26f6c2(0x503)]())return;VisuMZ['ConvertParams'](_0x1ffa6d,_0x1ffa6d);const _0x50af2e=VisuMZ['CreateActionSequenceTargets'](_0x1ffa6d['Targets']);for(const _0xdd921f of _0x50af2e){if(_0x26f6c2(0x90c)!==_0x26f6c2(0x90c))this['usePremadeActionSequence'](_0xf88635,_0x5ad9a3,_0x18cda7);else{if(!_0xdd921f)continue;_0xdd921f[_0x26f6c2(0x436)](_0x26f6c2(0x807));}}$gamePlayer[_0x26f6c2(0xd1c)]();}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xb46),_0x2d8ac1=>{const _0x19c8dd=_0x4c6a01;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x19c8dd(0x503)]())return;VisuMZ[_0x19c8dd(0xc46)](_0x2d8ac1,_0x2d8ac1);const _0x379acb=VisuMZ[_0x19c8dd(0xaf8)](_0x2d8ac1[_0x19c8dd(0x6d1)]),_0x2cf6ab='tv';for(const _0x5a39af of _0x379acb){if(!_0x5a39af)continue;_0x5a39af[_0x19c8dd(0x98f)](_0x2cf6ab,_0x2d8ac1);}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x825),_0x369283=>{const _0x1bf782=_0x4c6a01;if(!Imported[_0x1bf782(0x5e1)])return;if(!SceneManager[_0x1bf782(0x503)]())return;VisuMZ[_0x1bf782(0xc46)](_0x369283,_0x369283);const _0x5abb38=VisuMZ[_0x1bf782(0xaf8)](_0x369283[_0x1bf782(0x6d1)]);for(const _0x4210c6 of _0x5abb38){if(!_0x4210c6)continue;_0x4210c6['removeHorrorEffect']('tv');}$gamePlayer[_0x1bf782(0xd1c)]();}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x60d),_0x405c5d=>{const _0xde9012=_0x4c6a01;if(!Imported[_0xde9012(0x6d3)])return;const _0x4a71d8=SceneManager[_0xde9012(0x4c1)][_0xde9012(0x666)];if(!_0x4a71d8)return;if(VisuMZ['ActSeqImpact'][_0xde9012(0x542)]<=1.04){alert(_0xde9012(0x79d)),SceneManager[_0xde9012(0x6d4)]();return;}VisuMZ['ConvertParams'](_0x405c5d,_0x405c5d);const _0x28d6c2=_0x405c5d['Enable'];_0x4a71d8[_0xde9012(0xe03)](_0x28d6c2);}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xb19),_0x5bc64b=>{const _0x1db752=_0x4c6a01;if(!SceneManager[_0x1db752(0x503)]())return;if(!Imported[_0x1db752(0x6d3)])return;const _0x36762a=SceneManager[_0x1db752(0x4c1)][_0x1db752(0x666)];if(!_0x36762a)return;VisuMZ[_0x1db752(0xc46)](_0x5bc64b,_0x5bc64b);const _0xa39d3=_0x5bc64b[_0x1db752(0x943)]||0x1,_0x41df3c=_0x5bc64b[_0x1db752(0xa14)]||0x1,_0x3ea7f8=_0x5bc64b[_0x1db752(0xd9f)]||_0x1db752(0x883);_0x36762a[_0x1db752(0xc54)](_0xa39d3,_0x41df3c,_0x3ea7f8);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x3b8),_0x2c58ca=>{const _0x389758=_0x4c6a01;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3ceef5=SceneManager['_scene'][_0x389758(0x666)];if(!_0x3ceef5)return;if(VisuMZ['ActSeqImpact'][_0x389758(0x542)]<=1.04){alert(_0x389758(0x79d)),SceneManager['exit']();return;}VisuMZ[_0x389758(0xc46)](_0x2c58ca,_0x2c58ca);const _0x3cd2d7=_0x2c58ca['Enable'];_0x3ceef5[_0x389758(0xc67)](_0x3cd2d7);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x781),_0x35835d=>{const _0x24df48=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x24df48(0x6d3)])return;const _0x402757=SceneManager[_0x24df48(0x4c1)]['_spriteset'];if(!_0x402757)return;VisuMZ['ConvertParams'](_0x35835d,_0x35835d);const _0x31604e=Number(_0x35835d[_0x24df48(0x645)])||0x0,_0x3d3d9f=Number(_0x35835d[_0x24df48(0xde3)]),_0x2f5f9d=_0x35835d[_0x24df48(0xa14)]||0x1,_0x5ec571=_0x35835d['EasingType']||_0x24df48(0x883);_0x402757['setupMotionBlurImpactFilter'](_0x31604e,_0x3d3d9f,_0x2f5f9d,_0x5ec571);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xb5d),_0x816c4a=>{const _0x4891b7=_0x4c6a01;if(!SceneManager[_0x4891b7(0x503)]())return;if(!Imported[_0x4891b7(0x6d3)])return;const _0x293b4e=SceneManager['_scene']['_spriteset'];if(!_0x293b4e)return;VisuMZ['ConvertParams'](_0x816c4a,_0x816c4a);const _0x462b65=Number(_0x816c4a['Angle'])||0x0,_0x24b400=Number(_0x816c4a[_0x4891b7(0xde3)]),_0x4d39a7=_0x816c4a['Duration']||0x1,_0x5c26ef=_0x816c4a[_0x4891b7(0xd9f)]||_0x4891b7(0x883),_0x429e17=VisuMZ['CreateActionSequenceTargets'](_0x816c4a[_0x4891b7(0x6d1)]);for(const _0x1229ac of _0x429e17){if(!_0x1229ac)continue;if(!_0x1229ac['battler']())continue;_0x1229ac['battler']()[_0x4891b7(0x77a)](_0x462b65,_0x24b400,_0x4d39a7,_0x5c26ef);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Impact_MotionTrailCreate',_0x455d10=>{const _0x3bb564=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x455d10,_0x455d10);const _0x28f918={'delay':_0x455d10['delay'],'duration':_0x455d10[_0x3bb564(0xa95)],'hue':_0x455d10['hue'],'opacityStart':_0x455d10['opacityStart'],'tone':_0x455d10[_0x3bb564(0xcd0)],'visible':!![]},_0xc9a1ba=VisuMZ[_0x3bb564(0xaf8)](_0x455d10[_0x3bb564(0x6d1)]);for(const _0x428c1d of _0xc9a1ba){if(_0x3bb564(0x32c)!=='aaWuZ')return _0x3a27f3[_0x3bb564(0x5e5)][_0x3bb564(0x298)][_0x3bb564(0x3a4)](this);else{if(!_0x428c1d)continue;_0x428c1d[_0x3bb564(0x898)](_0x28f918);}}}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0xa1f),_0x34a2a1=>{const _0x2aba63=_0x4c6a01;if(!SceneManager[_0x2aba63(0x503)]())return;if(!Imported[_0x2aba63(0x6d3)])return;VisuMZ[_0x2aba63(0xc46)](_0x34a2a1,_0x34a2a1);const _0x5caa5c=VisuMZ[_0x2aba63(0xaf8)](_0x34a2a1[_0x2aba63(0x6d1)]);for(const _0x5b6976 of _0x5caa5c){if(!_0x5b6976)continue;_0x5b6976['clearBattlerMotionTrailData']();}}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xd36),_0x2e1ce3=>{const _0x231364=_0x4c6a01;if(!Imported[_0x231364(0x6d3)])return;const _0x51d905=SceneManager[_0x231364(0x4c1)][_0x231364(0x666)];if(!_0x51d905)return;if(VisuMZ[_0x231364(0xde8)][_0x231364(0x542)]<=1.04){if(_0x231364(0x5b5)!==_0x231364(0x7cf)){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}else return!![];}VisuMZ[_0x231364(0xc46)](_0x2e1ce3,_0x2e1ce3);const _0x4ae41f=_0x2e1ce3['Enable'];_0x51d905[_0x231364(0xdca)](_0x4ae41f);}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x321),_0x315aa6=>{const _0xd3f617=_0x4c6a01;if(!Imported[_0xd3f617(0x6d3)])return;const _0x55e1ea=SceneManager[_0xd3f617(0x4c1)]['_spriteset'];if(!_0x55e1ea)return;if(VisuMZ[_0xd3f617(0xde8)]['version']<=1.04){if('lwkcf'!==_0xd3f617(0xc76)){alert(_0xd3f617(0x79d)),SceneManager[_0xd3f617(0x6d4)]();return;}else{if(_0x5652be['note'][_0xd3f617(0x996)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x4329f5=_0x4a5767(_0x1fff25['$1'])[_0xd3f617(0xc9f)]()[_0xd3f617(0x4e9)]();if(_0x4329f5==='MANUAL')return _0xd3f617(0x8f5);if(_0x11cc29[_0xd3f617(0x586)][_0x4329f5])return _0x4329f5;}const _0x15fd4e=_0x269c79[_0xd3f617(0x5e5)][_0xd3f617(0x32d)][_0xd3f617(0x625)]['DefaultDamageStyle'][_0xd3f617(0xc9f)]()[_0xd3f617(0x4e9)]();if(_0x3b49af[_0xd3f617(0x586)][_0x15fd4e])return _0x15fd4e;return _0xd3f617(0x8f5);}}VisuMZ[_0xd3f617(0xc46)](_0x315aa6,_0x315aa6);const _0x1e4cc8=_0x315aa6['Enable'];_0x55e1ea[_0xd3f617(0xb76)](_0x1e4cc8);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x913),_0x4eadc8=>{const _0x2fa92c=_0x4c6a01;if(!Imported[_0x2fa92c(0x6d3)])return;const _0x290152=SceneManager[_0x2fa92c(0x4c1)]['_spriteset'];if(!_0x290152)return;VisuMZ[_0x2fa92c(0xc46)](_0x4eadc8,_0x4eadc8);const _0x4ede6e=_0x4eadc8['X']||0x0,_0x240f25=_0x4eadc8['Y']||0x0,_0x1c1bd3=_0x4eadc8[_0x2fa92c(0x6b7)]||0x0,_0x3161c9=_0x4eadc8[_0x2fa92c(0xb9f)]||0x0,_0x3cb2c9=_0x4eadc8[_0x2fa92c(0xa14)]||0x1;_0x290152[_0x2fa92c(0x871)](_0x4ede6e,_0x240f25,_0x1c1bd3,_0x3161c9,_0x3cb2c9);}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x786),_0xbea1af=>{const _0x2954fd=_0x4c6a01;if(!SceneManager[_0x2954fd(0x503)]())return;if(!Imported[_0x2954fd(0x6d3)])return;const _0x502d8e=SceneManager['_scene']['_spriteset'];if(!_0x502d8e)return;VisuMZ[_0x2954fd(0xc46)](_0xbea1af,_0xbea1af);const _0xec0298=VisuMZ[_0x2954fd(0xaf8)](_0xbea1af[_0x2954fd(0x6d1)]),_0xcb0e2=_0xbea1af['TargetLocation'],_0x2f7964=_0xbea1af[_0x2954fd(0xe10)]||0x0,_0x32f9f1=_0xbea1af[_0x2954fd(0x6f9)]||0x0,_0x30b1aa=_0xbea1af[_0x2954fd(0x6b7)]||0x0,_0x139bb7=_0xbea1af[_0x2954fd(0xb9f)]||0x0,_0x7d7272=_0xbea1af[_0x2954fd(0xa14)]||0x1;for(const _0x1c4ed5 of _0xec0298){if(!_0x1c4ed5)continue;if(!_0x1c4ed5[_0x2954fd(0x72f)]())continue;const _0x3a15f5=_0x1c4ed5[_0x2954fd(0x72f)]();let _0x3f2e19=_0x3a15f5['_baseX'],_0x5e98a6=_0x3a15f5[_0x2954fd(0xcaa)];_0x3f2e19+=(Graphics[_0x2954fd(0xe09)]-Graphics[_0x2954fd(0xbc7)])/0x2,_0x5e98a6+=(Graphics[_0x2954fd(0xb45)]-Graphics['boxHeight'])/0x2;if(_0xcb0e2['match'](/front/i))_0x3f2e19+=(_0x1c4ed5[_0x2954fd(0xb37)]()?0x1:-0x1)*_0x3a15f5[_0x2954fd(0x2e1)]()/0x2;else _0xcb0e2[_0x2954fd(0x996)](/back/i)&&(_0x3f2e19+=(_0x1c4ed5['isEnemy']()?-0x1:0x1)*_0x3a15f5[_0x2954fd(0x2e1)]()/0x2);if(_0xcb0e2[_0x2954fd(0x996)](/head/i)){if(_0x2954fd(0x639)!==_0x2954fd(0x639)){const _0x11451b=this[_0x2954fd(0x8df)],_0xc6eb3b=_0x3af418['windowPadding'](),_0x536e19=_0x57b4c4['x']+_0x563682[_0x2954fd(0x989)](_0x173d09[_0x2954fd(0xe09)]/0x2)+_0xc6eb3b;_0x11451b['x']=_0x11451b[_0x2954fd(0xe09)]/-0x2+_0x536e19,_0x11451b['y']=_0x23a918[_0x2954fd(0x989)](_0x2a9c41[_0x2954fd(0xb45)]/0x2);}else _0x5e98a6-=_0x3a15f5[_0x2954fd(0x8cd)]();}else _0xcb0e2[_0x2954fd(0x996)](/center/i)&&(_0x5e98a6-=_0x3a15f5['mainSpriteHeight']()/0x2);_0x3f2e19+=_0x2f7964,_0x5e98a6+=_0x32f9f1,_0x502d8e['setupShockwaveImpactFilter'](_0x3f2e19,_0x5e98a6,_0x30b1aa,_0x139bb7,_0x7d7272);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Impact_ShockwaveCenterTargets',_0x181afe=>{const _0x41867d=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3b08b1=SceneManager[_0x41867d(0x4c1)]['_spriteset'];if(!_0x3b08b1)return;VisuMZ[_0x41867d(0xc46)](_0x181afe,_0x181afe);const _0xe90638=VisuMZ[_0x41867d(0xaf8)](_0x181afe[_0x41867d(0x6d1)]),_0x3541c2=_0x181afe[_0x41867d(0x744)],_0x1f006d=_0x181afe['OffsetX']||0x0,_0x102163=_0x181afe['OffsetY']||0x0,_0x505211=_0x181afe['Amp']||0x0,_0x165a26=_0x181afe[_0x41867d(0xb9f)]||0x0,_0x5d53dd=_0x181afe['Duration']||0x1,_0x16c58f=Math[_0x41867d(0x892)](..._0xe90638['map'](_0x44e84f=>_0x44e84f[_0x41867d(0x72f)]()[_0x41867d(0x545)]-_0x44e84f[_0x41867d(0x72f)]()[_0x41867d(0x2e1)]()/0x2)),_0x5cc8f2=Math[_0x41867d(0xa5c)](..._0xe90638[_0x41867d(0x39f)](_0x1022ea=>_0x1022ea['battler']()['_baseX']+_0x1022ea[_0x41867d(0x72f)]()[_0x41867d(0x2e1)]()/0x2)),_0x21baf8=Math['min'](..._0xe90638[_0x41867d(0x39f)](_0x42f0ee=>_0x42f0ee[_0x41867d(0x72f)]()[_0x41867d(0xcaa)]-_0x42f0ee[_0x41867d(0x72f)]()['mainSpriteHeight']())),_0xcb2d11=Math['max'](..._0xe90638['map'](_0x225a40=>_0x225a40['battler']()[_0x41867d(0xcaa)])),_0x2cba71=_0xe90638[_0x41867d(0xac7)](_0x310a4b=>_0x310a4b[_0x41867d(0x966)]())[_0x41867d(0x991)],_0x2b88f9=_0xe90638[_0x41867d(0xac7)](_0x53b544=>_0x53b544[_0x41867d(0xb37)]())[_0x41867d(0x991)];let _0x24c9c1=0x0,_0x537400=0x0;if(_0x3541c2[_0x41867d(0x996)](/front/i)){if(_0x41867d(0x4a0)!==_0x41867d(0x4a0)){if(!_0x10e7cb[_0x41867d(0x4c1)])return null;if(!_0x11ed96['_scene'][_0x41867d(0x270)])return null;if(!_0x3aa114[_0x41867d(0x4c1)][_0x41867d(0x270)][_0x41867d(0x69e)])return null;return _0x4740a7['_scene'][_0x41867d(0x270)][_0x41867d(0x69e)];}else _0x24c9c1=_0x2cba71>=_0x2b88f9?_0x16c58f:_0x5cc8f2;}else{if(_0x3541c2[_0x41867d(0x996)](/middle/i))_0x24c9c1=(_0x16c58f+_0x5cc8f2)/0x2,melee=-0x1;else _0x3541c2[_0x41867d(0x996)](/back/i)&&(_0x24c9c1=_0x2cba71>=_0x2b88f9?_0x5cc8f2:_0x16c58f);}if(_0x3541c2[_0x41867d(0x996)](/head/i))_0x537400=_0x21baf8;else{if(_0x3541c2[_0x41867d(0x996)](/center/i))_0x537400=(_0x21baf8+_0xcb2d11)/0x2;else{if(_0x3541c2[_0x41867d(0x996)](/base/i)){if(_0x41867d(0x9ed)!==_0x41867d(0x5d5))_0x537400=_0xcb2d11;else{const _0x303d02=_0x91b7ae[_0x41867d(0x5e5)][_0x41867d(0x32d)][_0x41867d(0x612)];if(_0x303d02&&_0x303d02[_0x41867d(0x641)])return _0x303d02['jsScaleUp'][_0x41867d(0x3a4)](this);this[_0x41867d(0xe09)]=_0x57f6b5[_0x41867d(0xe09)],this[_0x41867d(0xb45)]=_0x52b6f3[_0x41867d(0xb45)];const _0xe45c39=_0x1e455f[_0x41867d(0xa5c)](0x1,this['width']/this[_0x41867d(0x593)][_0x41867d(0xe09)]),_0x122c15=_0x2e9230['max'](0x1,this['height']/this['bitmap'][_0x41867d(0xb45)]),_0x19b1e=_0x5344e1['max'](_0xe45c39,_0x122c15);this[_0x41867d(0x68b)]['x']=_0x19b1e,this[_0x41867d(0x68b)]['y']=_0x19b1e,this['x']=(_0x34a16f[_0x41867d(0xe09)]-this[_0x41867d(0xe09)])/0x2,this['y']=_0x27a9d0['height']-this[_0x41867d(0xb45)];}}}}_0x24c9c1+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0x537400+=(Graphics[_0x41867d(0xb45)]-Graphics['boxHeight'])/0x2,_0x24c9c1+=_0x1f006d,_0x537400+=_0x102163,_0x3b08b1[_0x41867d(0x871)](_0x24c9c1,_0x537400,_0x505211,_0x165a26,_0x5d53dd);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x263),_0x83ae24=>{const _0x26100f=_0x4c6a01;if(!Imported[_0x26100f(0x6d3)])return;const _0x26dc03=SceneManager[_0x26100f(0x4c1)][_0x26100f(0x666)];if(!_0x26dc03)return;if(VisuMZ[_0x26100f(0xde8)][_0x26100f(0x542)]<=1.04){if('sobHO'===_0x26100f(0x44c)){alert(_0x26100f(0x79d)),SceneManager[_0x26100f(0x6d4)]();return;}else{if(this['_targetBattlerKey']===_0x26100f(0x4d8))return!![];if(this[_0x26100f(0x432)]==='all\x20enemies')return![];return this[_0x26100f(0x841)]()&&!this[_0x26100f(0x5fa)]()?this[_0x26100f(0xb2a)]():_0x145a8a['BattleCore']['Game_Action_isForFriend'][_0x26100f(0x3a4)](this);}}VisuMZ[_0x26100f(0xc46)](_0x83ae24,_0x83ae24);const _0x1e09f2=$gameTemp[_0x26100f(0x582)](),_0x58c7e7=Math[_0x26100f(0xa5c)](0.01,_0x83ae24['Scale']);$gameTemp['setBattleImpactTimeScale'](_0x58c7e7,_0x1e09f2);}),PluginManager['registerCommand'](pluginData['name'],_0x4c6a01(0x4b9),_0x5e0f6d=>{const _0x2adc68=_0x4c6a01;if(!Imported[_0x2adc68(0x6d3)])return;const _0x57eeba=SceneManager[_0x2adc68(0x4c1)][_0x2adc68(0x666)];if(!_0x57eeba)return;if(VisuMZ['ActSeqImpact'][_0x2adc68(0x542)]<=1.04){if(_0x2adc68(0x635)!==_0x2adc68(0x635))_0x32d42a[_0x2adc68(0x435)]([this],_0x5e8c84);else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x2adc68(0x6d4)]();return;}}VisuMZ[_0x2adc68(0xc46)](_0x5e0f6d,_0x5e0f6d);const _0x3390f9=$gameTemp[_0x2adc68(0x582)](),_0x1586f9=_0x5e0f6d['ms']||0x1;VisuMZ[_0x2adc68(0xde8)]['freezeTime'](_0x1586f9,_0x3390f9);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x5f2),_0x29daa2=>{const _0x267fd6=_0x4c6a01;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2091c2=SceneManager[_0x267fd6(0x4c1)][_0x267fd6(0x666)];if(!_0x2091c2)return;VisuMZ['ConvertParams'](_0x29daa2,_0x29daa2);const _0x485317=_0x29daa2['X']||0x0,_0x41b3d4=_0x29daa2['Y']||0x0,_0x4a50ae=_0x29daa2['Strength']||0x0,_0x121a46=_0x29daa2[_0x267fd6(0x311)]||0x0,_0x587737=_0x29daa2[_0x267fd6(0xa14)]||0x1,_0x2f33e1=_0x29daa2[_0x267fd6(0xd9f)]||'Linear';_0x2091c2['setupZoomBlurImpactFilter'](_0x4a50ae,_0x485317,_0x41b3d4,_0x121a46,_0x587737,_0x2f33e1);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xc3d),_0x13ec54=>{const _0x217689=_0x4c6a01;if(!Imported[_0x217689(0x6d3)])return;const _0xa5e275=SceneManager[_0x217689(0x4c1)][_0x217689(0x666)];if(!_0xa5e275)return;VisuMZ['ConvertParams'](_0x13ec54,_0x13ec54);const _0x2859bc=VisuMZ[_0x217689(0xaf8)](_0x13ec54['Targets']),_0x3b5c5f=_0x13ec54[_0x217689(0x744)],_0xd2ca10=_0x13ec54[_0x217689(0xe10)]||0x0,_0x28ab87=_0x13ec54['OffsetY']||0x0,_0xc10185=_0x13ec54[_0x217689(0x88d)]||0x0,_0x25db6f=_0x13ec54[_0x217689(0x311)]||0x0,_0x42c788=_0x13ec54[_0x217689(0xa14)]||0x1,_0x407a64=_0x13ec54[_0x217689(0xd9f)]||_0x217689(0x883),_0xaca6ce=Math[_0x217689(0x892)](..._0x2859bc[_0x217689(0x39f)](_0x3b4a80=>_0x3b4a80[_0x217689(0x72f)]()[_0x217689(0x545)]-_0x3b4a80[_0x217689(0x72f)]()['mainSpriteWidth']()/0x2)),_0x3ef64d=Math[_0x217689(0xa5c)](..._0x2859bc['map'](_0x40701e=>_0x40701e['battler']()['_baseX']+_0x40701e[_0x217689(0x72f)]()['mainSpriteWidth']()/0x2)),_0x2cad7=Math[_0x217689(0x892)](..._0x2859bc['map'](_0x5c76e8=>_0x5c76e8[_0x217689(0x72f)]()[_0x217689(0xcaa)]-_0x5c76e8[_0x217689(0x72f)]()[_0x217689(0x8cd)]())),_0x5ed9ae=Math[_0x217689(0xa5c)](..._0x2859bc['map'](_0x3cd094=>_0x3cd094[_0x217689(0x72f)]()[_0x217689(0xcaa)])),_0x1ee049=_0x2859bc[_0x217689(0xac7)](_0x23252c=>_0x23252c[_0x217689(0x966)]())[_0x217689(0x991)],_0x2d36f2=_0x2859bc[_0x217689(0xac7)](_0x366a72=>_0x366a72['isEnemy']())[_0x217689(0x991)];let _0x55a05f=0x0,_0x32dc96=0x0;if(_0x3b5c5f['match'](/front/i))_0x217689(0x455)==='ldvrZ'?this[_0x217689(0x543)](_0x217689(0x54b),_0x3dbea1):_0x55a05f=_0x1ee049>=_0x2d36f2?_0xaca6ce:_0x3ef64d;else{if(_0x3b5c5f[_0x217689(0x996)](/middle/i)){if(_0x217689(0x5a2)!==_0x217689(0xcb1))_0x55a05f=(_0xaca6ce+_0x3ef64d)/0x2,melee=-0x1;else{if(this[_0x217689(0xbf3)]&&this[_0x217689(0xbf3)][_0x217689(0xb44)]())return![];if(this[_0x217689(0xbf3)]&&!this[_0x217689(0xbf3)][_0x217689(0x314)]())return![];return _0x532d5a[_0x217689(0x7a2)]();}}else _0x3b5c5f[_0x217689(0x996)](/back/i)&&(_0x217689(0x36c)!==_0x217689(0x36c)?this[_0x217689(0x431)]&&this['_mainSprite'][_0x217689(0xbeb)](_0x3e8aad):_0x55a05f=_0x1ee049>=_0x2d36f2?_0x3ef64d:_0xaca6ce);}if(_0x3b5c5f['match'](/head/i))_0x32dc96=_0x2cad7;else{if(_0x3b5c5f['match'](/center/i))_0x32dc96=(_0x2cad7+_0x5ed9ae)/0x2;else _0x3b5c5f[_0x217689(0x996)](/base/i)&&(_0x32dc96=_0x5ed9ae);}_0x55a05f+=(Graphics['width']-Graphics[_0x217689(0xbc7)])/0x2,_0x32dc96+=(Graphics['height']-Graphics[_0x217689(0xc3a)])/0x2,_0x55a05f+=_0xd2ca10,_0x32dc96+=_0x28ab87,_0xa5e275[_0x217689(0x2ce)](_0xc10185,_0x55a05f,_0x32dc96,_0x25db6f,_0x42c788,_0x407a64);}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x52b),_0x24ae08=>{const _0x2e3d21=_0x4c6a01;if(!Imported[_0x2e3d21(0x6d3)])return;const _0x572036=SceneManager[_0x2e3d21(0x4c1)]['_spriteset'];if(!_0x572036)return;if(VisuMZ[_0x2e3d21(0xde8)][_0x2e3d21(0x542)]<=1.05){if(_0x2e3d21(0x37a)!=='LxHru'){if(this[_0x2e3d21(0x99c)][_0x2e3d21(0x52f)]())return;this[_0x2e3d21(0x8de)](),this[_0x2e3d21(0x5fe)](),!this[_0x2e3d21(0x49e)]&&!this['_currentActor']&&_0x3bcb1f[_0x2e3d21(0x4c1)]['updateBattleProcess']();}else{alert(_0x2e3d21(0x79d)),SceneManager['exit']();return;}}VisuMZ[_0x2e3d21(0xc46)](_0x24ae08,_0x24ae08);const _0x4e1fcc=VisuMZ[_0x2e3d21(0xaf8)](_0x24ae08[_0x2e3d21(0x6d1)]),_0x26ce5d={'filename':_0x24ae08['Filename'],'horzCells':_0x24ae08[_0x2e3d21(0x457)]||0x1,'vertCells':_0x24ae08[_0x2e3d21(0x71f)]||0x1,'frameDelay':_0x24ae08[_0x2e3d21(0x80e)]||0x1,'smooth':_0x24ae08[_0x2e3d21(0x80c)]||![],'anchorX':_0x24ae08[_0x2e3d21(0x33d)]||0x0,'anchorY':_0x24ae08[_0x2e3d21(0x955)]||0x0,'offsetX':_0x24ae08[_0x2e3d21(0xdb2)]||0x0,'offsetY':_0x24ae08[_0x2e3d21(0xcba)]||0x0};for(const _0x5b2ac6 of _0x4e1fcc){if(_0x2e3d21(0xaa3)===_0x2e3d21(0xaa3)){if(!_0x5b2ac6)continue;if(!_0x5b2ac6[_0x2e3d21(0x72f)]())continue;_0x5b2ac6['battler']()[_0x2e3d21(0x9a4)](_0x26ce5d);}else _0x3f7c2c[_0x2e3d21(0x5e5)][_0x2e3d21(0x32d)][_0x2e3d21(0x64f)]['ShowEnemyGauge']&&this[_0x2e3d21(0x371)](),_0x4d474f['BattleCore'][_0x2e3d21(0x46f)][_0x2e3d21(0x3a4)](this);}const _0x5c3803=$gameTemp[_0x2e3d21(0x582)]();_0x5c3803&&_0x5c3803[_0x2e3d21(0x2b5)](_0x2e3d21(0x67d));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Inject_AnimationEnd',_0x49b953=>{const _0x599c4c=_0x4c6a01;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1cc951=SceneManager[_0x599c4c(0x4c1)][_0x599c4c(0x666)];if(!_0x1cc951)return;if(VisuMZ[_0x599c4c(0xde8)][_0x599c4c(0x542)]<=1.05){if(_0x599c4c(0x958)!==_0x599c4c(0x846)){alert(_0x599c4c(0x79d)),SceneManager[_0x599c4c(0x6d4)]();return;}else _0x40532c[_0x599c4c(0xbbd)]()[_0x599c4c(0x32a)]?this[_0x599c4c(0x543)](_0x599c4c(0x867),_0x58bd9e):this['push'](_0x599c4c(0x54b),_0x1375bd);}VisuMZ[_0x599c4c(0xc46)](_0x49b953,_0x49b953);const _0x5c4d22=VisuMZ[_0x599c4c(0xaf8)](_0x49b953[_0x599c4c(0x6d1)]);for(const _0x1c83bc of _0x5c4d22){if(!_0x1c83bc)continue;if(!_0x1c83bc[_0x599c4c(0x72f)]())continue;_0x1c83bc[_0x599c4c(0x72f)]()[_0x599c4c(0x2df)]();}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x7ac),_0x58376d=>{const _0x1b134b=_0x4c6a01;if(!Imported[_0x1b134b(0x6d3)])return;const _0x215ba1=SceneManager[_0x1b134b(0x4c1)][_0x1b134b(0x666)];if(!_0x215ba1)return;if(VisuMZ['ActSeqImpact'][_0x1b134b(0x542)]<=1.05){if('iGpMV'!==_0x1b134b(0x7c4))_0x41daee['BattleCore']['JS'][_0x382e02]['call'](this,this,this,_0x3ea540,0x0);else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}}VisuMZ[_0x1b134b(0xc46)](_0x58376d,_0x58376d);const _0x1af94f=VisuMZ[_0x1b134b(0xaf8)](_0x58376d[_0x1b134b(0x6d1)]),_0x5f2f7e=_0x58376d['pause'];for(const _0x2aaeae of _0x1af94f){if(!_0x2aaeae)continue;if(!_0x2aaeae[_0x1b134b(0x72f)]())continue;_0x2aaeae[_0x1b134b(0x72f)]()[_0x1b134b(0x97b)](_0x5f2f7e);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Inject_WaitForInjectAni',_0x283f7c=>{const _0xdd9c5a=_0x4c6a01;if(!SceneManager[_0xdd9c5a(0x503)]())return;const _0x50faf4=$gameTemp[_0xdd9c5a(0x582)]();if(!_0x50faf4)return;_0x50faf4[_0xdd9c5a(0x2b5)](_0xdd9c5a(0x990));}),PluginManager['registerCommand'](pluginData['name'],_0x4c6a01(0x29a),_0x1dff7e=>{const _0x13beef=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1dff7e,_0x1dff7e);const _0x16266a=$gameTemp['getLastPluginCommandInterpreter'](),_0x102f0b=BattleManager['_action'],_0x310807=BattleManager['_subject'],_0x114ee6=BattleManager[_0x13beef(0x74c)];if(!_0x16266a||!_0x102f0b||!_0x310807)return;if(!_0x102f0b[_0x13beef(0x6a7)]())return;const _0x308eaf=VisuMZ[_0x13beef(0xaf8)](_0x1dff7e[_0x13beef(0x6d1)]);for(const _0x95704a of _0x308eaf){if(!_0x95704a)continue;_0x114ee6['push'](_0x13beef(0x840),_0x310807,_0x95704a);}_0x16266a[_0x13beef(0x2b5)](_0x13beef(0x46c));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x71e),_0x4713f0=>{const _0x6c2243=_0x4c6a01;if(!SceneManager[_0x6c2243(0x503)]())return;if(!Imported[_0x6c2243(0x978)])return;$gameTemp['_performActionEnd']=!![];}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Mechanics_AddBuffDebuff',_0x2120aa=>{const _0x361739=_0x4c6a01;if(!SceneManager[_0x361739(0x503)]())return;VisuMZ[_0x361739(0xc46)](_0x2120aa,_0x2120aa);const _0x3936ac=[_0x361739(0xca0),_0x361739(0x819),_0x361739(0x26b),_0x361739(0xa91),_0x361739(0x48c),_0x361739(0x554),'AGI',_0x361739(0x8ce)],_0x38ec02=_0x2120aa[_0x361739(0x4df)],_0xd2c216=_0x2120aa['Debuffs'],_0x1187a4=_0x2120aa[_0x361739(0xb43)],_0xb9136f=VisuMZ[_0x361739(0xaf8)](_0x2120aa['Targets']);for(const _0x515d5e of _0xb9136f){if(_0x361739(0x564)!==_0x361739(0x564))_0x57c085[_0x361739(0x770)]([_0x592d53]);else{if(!_0x515d5e)continue;for(const _0x228908 of _0x38ec02){if(_0x361739(0xbf8)!==_0x361739(0x58e)){const _0x296bb4=_0x3936ac[_0x361739(0x93e)](_0x228908[_0x361739(0xc9f)]()['trim']());_0x296bb4>=0x0&&_0x296bb4<=0x7&&_0x515d5e[_0x361739(0x6df)](_0x296bb4,_0x1187a4);}else this[_0x361739(0x431)][_0x361739(0x593)]=_0x4423dd,this['bitmap']=new _0x5f54de(_0x29ad50[_0x361739(0xe09)],_0x4d4d19['height']);}for(const _0x4db542 of _0xd2c216){if(_0x361739(0xbc9)!==_0x361739(0xbc9))return _0x321be2(_0x3823d9['$1']);else{const _0x59ebe4=_0x3936ac[_0x361739(0x93e)](_0x4db542[_0x361739(0xc9f)]()[_0x361739(0x4e9)]());if(_0x59ebe4>=0x0&&_0x59ebe4<=0x7){if(_0x361739(0x997)!==_0x361739(0x997)){if(!_0x2f671b[_0x361739(0x7a2)]())return;const _0x4e284a=this[_0x361739(0x72f)]();if(!_0x4e284a)return;if(_0x5824bc)this['setBattlerFacePoint'](_0x18273b+_0x4e284a[_0x361739(0x545)],_0x5c6e77+_0x4e284a['_baseY'],![]);_0x58d1ea+=_0x4e284a['_baseX']-_0x4e284a[_0x361739(0xb92)],_0xbb4dc7+=_0x4e284a['_baseY']-_0x4e284a[_0x361739(0xb2f)],_0x4e284a[_0x361739(0x36f)](_0x46face,_0x163b79,_0x764c6d);if(_0x653d5e[_0x361739(0xad0)])_0x4e284a[_0x361739(0x85f)](_0x6ea2e8||'Linear');}else _0x515d5e[_0x361739(0x76c)](_0x59ebe4,_0x1187a4);}}}}}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xab0),_0x44bc4b=>{const _0x497d5b=_0x4c6a01;if(!SceneManager[_0x497d5b(0x503)]())return;VisuMZ['ConvertParams'](_0x44bc4b,_0x44bc4b);const _0x30c812=_0x44bc4b[_0x497d5b(0xd5c)],_0xf15a29=VisuMZ[_0x497d5b(0xaf8)](_0x44bc4b[_0x497d5b(0x6d1)]);for(const _0x51cc90 of _0xf15a29){if(_0x497d5b(0x2f7)===_0x497d5b(0x2f7)){if(!_0x51cc90)continue;for(const _0x4545d2 of _0x30c812){_0x51cc90[_0x497d5b(0x644)](_0x4545d2);}}else return!![];}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x810),_0x36b74b=>{const _0x7645bc=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x36b74b,_0x36b74b);const _0x317012=BattleManager[_0x7645bc(0x3b6)],_0x155227={'arPenRate':_0x36b74b[_0x7645bc(0x40c)],'arPenFlat':_0x36b74b[_0x7645bc(0xc95)],'arRedRate':_0x36b74b[_0x7645bc(0x96e)],'arRedFlat':_0x36b74b[_0x7645bc(0xd08)]};_0x317012['_armorPenetration']=_0x155227;}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Mechanics_AnalyzeWeakness',_0x30d850=>{const _0x14e459=_0x4c6a01;if(!SceneManager[_0x14e459(0x503)]())return;if(!Imported[_0x14e459(0xe02)])return;VisuMZ[_0x14e459(0xc46)](_0x30d850,_0x30d850);const _0x391e04=VisuMZ[_0x14e459(0xaf8)](_0x30d850[_0x14e459(0x6d1)]),_0x489f42=_0x30d850[_0x14e459(0x8a1)]||0x1;for(const _0xb17ce3 of _0x391e04){if(!_0xb17ce3)continue;if(!_0xb17ce3[_0x14e459(0xb37)]())continue;_0xb17ce3[_0x14e459(0x76b)](_0x489f42);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x28b),_0x5e46d2=>{const _0x2eb684=_0x4c6a01;if(!SceneManager[_0x2eb684(0x503)]())return;if(!Imported[_0x2eb684(0xd33)])return;if(!BattleManager['isATB']())return;VisuMZ[_0x2eb684(0xc46)](_0x5e46d2,_0x5e46d2);const _0x36717e=VisuMZ['CreateActionSequenceTargets'](_0x5e46d2['Targets']),_0x2ea34c=_0x5e46d2[_0x2eb684(0xc2c)],_0x5ee2d1=_0x5e46d2[_0x2eb684(0xc2c)],_0x39a4d9=_0x5e46d2[_0x2eb684(0x4bb)];for(const _0x5c1ee7 of _0x36717e){if('EvxdN'===_0x2eb684(0xbc5))_0x1c7e4e[_0x2eb684(0xdd5)](_0x3c5f63);else{if(!_0x5c1ee7)continue;if(_0x5c1ee7[_0x2eb684(0x724)]())_0x2eb684(0x50d)!==_0x2eb684(0x50d)?this[_0x2eb684(0xc3c)]=0x0:_0x5c1ee7[_0x2eb684(0x2f0)](_0x2ea34c);else{if(_0x5c1ee7['isAtbCastingState']()){if(_0x2eb684(0x441)!==_0x2eb684(0x6fb)){_0x5c1ee7[_0x2eb684(0x277)](_0x5ee2d1);if(_0x39a4d9)_0x5c1ee7[_0x2eb684(0x3d2)]();}else this[_0x2eb684(0x8c1)]=new _0x872027(),this['_battleField'][_0x2eb684(0x279)](this['_battlerContainer']);}}}}}),PluginManager['registerCommand'](pluginData['name'],_0x4c6a01(0x7d6),_0x2f0649=>{const _0x4f89e4=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4f89e4(0x41b)])return;VisuMZ[_0x4f89e4(0xc46)](_0x2f0649,_0x2f0649);const _0x503956=VisuMZ[_0x4f89e4(0xaf8)](_0x2f0649[_0x4f89e4(0x6d1)]),_0x3a1862=_0x2f0649['BoostPoints'];for(const _0x1e6b5d of _0x503956){if(_0x4f89e4(0x67b)==='ULvAc')this[_0x4f89e4(0x8be)](_0x5245c6[_0x4f89e4(0xc9f)]()[_0x4f89e4(0x4e9)]());else{if(!_0x1e6b5d)continue;_0x1e6b5d[_0x4f89e4(0x254)](_0x3a1862);}}}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Mechanics_BoostPointsStoreData',_0x2efa9f=>{const _0x407491=_0x4c6a01;if(!SceneManager[_0x407491(0x503)]())return;if(!Imported[_0x407491(0x41b)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x407491(0xc46)](_0x2efa9f,_0x2efa9f);const _0x355503=_0x2efa9f[_0x407491(0x9c2)];$gameVariables[_0x407491(0x57c)](_0x355503,BattleManager[_0x407491(0x49e)]['toUseBoostPoints']());}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Mechanics_BreakShieldChange',_0x192b29=>{const _0x158fae=_0x4c6a01;if(!SceneManager[_0x158fae(0x503)]())return;if(!Imported[_0x158fae(0x25d)])return;VisuMZ[_0x158fae(0xc46)](_0x192b29,_0x192b29);const _0x5e65d6=VisuMZ[_0x158fae(0xaf8)](_0x192b29[_0x158fae(0x6d1)]),_0x3e5554=_0x192b29['BreakShields'];for(const _0x2a72ad of _0x5e65d6){if(_0x158fae(0x4c5)!=='MDaZs')return this[_0x158fae(0xd7c)]&&this[_0x158fae(0xd7c)]['hasSvBattler']();else{if(!_0x2a72ad)continue;if(_0x2a72ad[_0x158fae(0x20a)]())continue;if(!_0x2a72ad[_0x158fae(0xd09)]())continue;_0x2a72ad[_0x158fae(0xd47)](_0x3e5554);}}}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0xc5c),_0x11e3bb=>{const _0x3bc8c3=_0x4c6a01;if(!SceneManager[_0x3bc8c3(0x503)]())return;if(!Imported[_0x3bc8c3(0x25d)])return;VisuMZ[_0x3bc8c3(0xc46)](_0x11e3bb,_0x11e3bb);const _0x5e72c6=VisuMZ[_0x3bc8c3(0xaf8)](_0x11e3bb[_0x3bc8c3(0x6d1)]);for(const _0x47df2c of _0x5e72c6){if(_0x3bc8c3(0xbbb)!==_0x3bc8c3(0xbbb))this['_effectsContainer']['x']=this['x'],this[_0x3bc8c3(0x69e)]['y']=this['y'];else{if(!_0x47df2c)continue;if(_0x47df2c[_0x3bc8c3(0x20a)]())continue;if(!_0x47df2c[_0x3bc8c3(0xd09)]())continue;_0x47df2c[_0x3bc8c3(0x643)]();}}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xa34),_0x30163b=>{const _0x619347=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x619347(0x558)])return;if(!BattleManager[_0x619347(0xd8c)]())return;VisuMZ[_0x619347(0xc46)](_0x30163b,_0x30163b);const _0x1f55aa=VisuMZ[_0x619347(0xaf8)](_0x30163b[_0x619347(0x6d1)]),_0x3faebd=_0x30163b[_0x619347(0x755)];for(const _0x581fe2 of _0x1f55aa){if(!_0x581fe2)continue;_0x581fe2[_0x619347(0x77e)](_0x3faebd);}}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x81d),_0x2eeca1=>{const _0x5924ff=_0x4c6a01;if(!SceneManager[_0x5924ff(0x503)]())return;VisuMZ[_0x5924ff(0xc46)](_0x2eeca1,_0x2eeca1);const _0x48a390=$gameTemp[_0x5924ff(0x582)](),_0xe6a86a=BattleManager[_0x5924ff(0x3b6)],_0x47c563=BattleManager[_0x5924ff(0x49e)];if(!_0x48a390||!_0xe6a86a||!_0x47c563)return;if(!_0xe6a86a[_0x5924ff(0x6a7)]())return;const _0x14c758=VisuMZ['CreateActionSequenceTargets'](_0x2eeca1[_0x5924ff(0x6d1)]);for(const _0x3a84fb of _0x14c758){if(!_0x3a84fb)continue;_0x2eeca1['ForceDeath']&&(_0x3a84fb['removeImmortal'](),_0x3a84fb[_0x5924ff(0x644)](_0x3a84fb['deathStateId']())),_0x3a84fb[_0x5924ff(0x504)]()&&_0x3a84fb[_0x5924ff(0x953)]();}_0x48a390[_0x5924ff(0x2b5)](_0x5924ff(0x7a3));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xd37),_0x4a9ab1=>{const _0x5e5af0=_0x4c6a01;if(!SceneManager[_0x5e5af0(0x503)]())return;if(!Imported[_0x5e5af0(0xad7)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x5e5af0(0xc46)](_0x4a9ab1,_0x4a9ab1);const _0x529771=VisuMZ[_0x5e5af0(0xaf8)](_0x4a9ab1['Targets']),_0x23a0cf=_0x4a9ab1[_0x5e5af0(0x233)];for(const _0x455046 of _0x529771){if(_0x5e5af0(0xb53)!=='vnzJz'){if(!_0x455046)continue;_0x455046[_0x5e5af0(0xc36)](_0x23a0cf);}else return'iconText';}}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Mechanics_CtbSpeed',_0x328b13=>{const _0x564fd7=_0x4c6a01;if(!SceneManager[_0x564fd7(0x503)]())return;if(!Imported[_0x564fd7(0xad7)])return;if(!BattleManager[_0x564fd7(0x7a0)]())return;VisuMZ['ConvertParams'](_0x328b13,_0x328b13);const _0x4b3224=VisuMZ['CreateActionSequenceTargets'](_0x328b13[_0x564fd7(0x6d1)]),_0x196745=_0x328b13[_0x564fd7(0xc2c)],_0x6acce7=_0x328b13[_0x564fd7(0xc2c)];for(const _0x37c0cc of _0x4b3224){if(!_0x37c0cc)continue;if(_0x37c0cc[_0x564fd7(0x58b)]==='charging')_0x37c0cc[_0x564fd7(0x714)](_0x196745);else _0x37c0cc[_0x564fd7(0x58b)]===_0x564fd7(0x8f1)&&_0x37c0cc[_0x564fd7(0x963)](_0x6acce7);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xdf1),_0x37c866=>{const _0x5e681a=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5e681a(0xc46)](_0x37c866,_0x37c866);const _0x1f70fd=BattleManager['_action'];if(!_0x1f70fd)return;let _0x2d5d7c=_0x37c866[_0x5e681a(0x982)];_0x1f70fd[_0x5e681a(0xb7a)](_0x2d5d7c);}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x366),_0x11bcb4=>{const _0x2438cf=_0x4c6a01;if(!SceneManager[_0x2438cf(0x503)]())return;VisuMZ['ConvertParams'](_0x11bcb4,_0x11bcb4);const _0xabd4f3=VisuMZ[_0x2438cf(0xaf8)](_0x11bcb4[_0x2438cf(0x6d1)]);for(const _0x30cfaf of _0xabd4f3){if(!_0x30cfaf)continue;if(_0x30cfaf['shouldPopupDamage']())_0x30cfaf['startDamagePopup']();}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x4ed),_0x563ed3=>{const _0x25eb44=_0x4c6a01;if(!SceneManager[_0x25eb44(0x503)]())return;VisuMZ['ConvertParams'](_0x563ed3,_0x563ed3);const _0xad92e=$gameTemp[_0x25eb44(0x582)](),_0x362a56=BattleManager['_subject'],_0x1a09cb=_0x563ed3[_0x25eb44(0x919)];if(!_0xad92e)return;if(!_0x362a56)return;_0x362a56&&_0x362a56[_0x25eb44(0xb44)]()&&_0x1a09cb['toUpperCase']()[_0x25eb44(0x4e9)]()!=='UNTITLED'&&_0xad92e[_0x25eb44(0x770)]([_0x1a09cb]);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x43d),_0x183677=>{const _0x117fa3=_0x4c6a01;if(!SceneManager[_0x117fa3(0x503)]())return;VisuMZ[_0x117fa3(0xc46)](_0x183677,_0x183677);const _0x830e66=VisuMZ['CreateActionSequenceTargets'](_0x183677[_0x117fa3(0x6d1)]);for(const _0x397efd of _0x830e66){if('eCAEE'!==_0x117fa3(0x391)){if(!_0x397efd)continue;if(!_0x397efd[_0x117fa3(0xb37)]())continue;_0x397efd[_0x117fa3(0x340)]();}else return this[_0x117fa3(0xad9)]()&&this[_0x117fa3(0xad9)]()['item']()&&this[_0x117fa3(0xad9)]()[_0x117fa3(0x215)]();}}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x6d6),_0x44b297=>{const _0x237349=_0x4c6a01;if(!SceneManager[_0x237349(0x503)]())return;if(!Imported[_0x237349(0xa80)])return;if(!BattleManager[_0x237349(0xbf0)]())return;VisuMZ[_0x237349(0xc46)](_0x44b297,_0x44b297);const _0x18ac73=_0x44b297[_0x237349(0x4c2)];BattleManager[_0x237349(0x49e)]&&BattleManager[_0x237349(0x49e)][_0x237349(0xbe7)]()[_0x237349(0xdff)](_0x18ac73);}),PluginManager['registerCommand'](pluginData['name'],_0x4c6a01(0xb30),_0x36545a=>{const _0x12548a=_0x4c6a01;if(!SceneManager[_0x12548a(0x503)]())return;if(!Imported[_0x12548a(0x64d)])return;if(!BattleManager[_0x12548a(0x665)]())return;VisuMZ[_0x12548a(0xc46)](_0x36545a,_0x36545a);const _0x21c864=_0x36545a[_0x12548a(0x4c2)];BattleManager[_0x12548a(0x49e)]&&BattleManager['_subject']['friendsUnit']()[_0x12548a(0xc92)](_0x21c864);}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xb07),_0x17d9b1=>{const _0x4d4b80=_0x4c6a01;if(!SceneManager[_0x4d4b80(0x503)]())return;VisuMZ[_0x4d4b80(0xc46)](_0x17d9b1,_0x17d9b1);const _0x2c82ea=VisuMZ['CreateActionSequenceTargets'](_0x17d9b1[_0x4d4b80(0x6d1)]),_0x574e42=_0x17d9b1[_0x4d4b80(0x926)],_0x5062b4=_0x17d9b1[_0x4d4b80(0x45c)],_0x3aad32=_0x17d9b1[_0x4d4b80(0xe1d)],_0x2b7a76=_0x17d9b1[_0x4d4b80(0x4c3)],_0x569f8a=_0x17d9b1[_0x4d4b80(0xb09)],_0x7406ab=_0x17d9b1['TP_Flat'],_0x1de015=_0x17d9b1[_0x4d4b80(0x49d)];for(const _0xea3722 of _0x2c82ea){if(!_0xea3722)continue;const _0x40694f=_0xea3722[_0x4d4b80(0x51e)](),_0x109cd4=Math[_0x4d4b80(0x9c7)](_0x574e42*_0xea3722['mhp']+_0x5062b4),_0x51b819=Math[_0x4d4b80(0x9c7)](_0x3aad32*_0xea3722[_0x4d4b80(0x449)]+_0x2b7a76),_0x286bb7=Math[_0x4d4b80(0x9c7)](_0x569f8a*_0xea3722['maxTp']()+_0x7406ab);if(_0x109cd4!==0x0)_0xea3722[_0x4d4b80(0xb0a)](_0x109cd4);if(_0x51b819!==0x0)_0xea3722[_0x4d4b80(0xddc)](_0x51b819);if(_0x286bb7!==0x0)_0xea3722['gainTp'](_0x286bb7);if(_0x1de015)_0xea3722[_0x4d4b80(0xcf4)]();_0x40694f&&_0xea3722[_0x4d4b80(0xb44)]()&&_0xea3722[_0x4d4b80(0x953)]();}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xb1c),_0x584670=>{const _0x23a5df=_0x4c6a01;if(!SceneManager[_0x23a5df(0x503)]())return;VisuMZ['ConvertParams'](_0x584670,_0x584670);const _0x4f2c8a=VisuMZ[_0x23a5df(0xaf8)](_0x584670[_0x23a5df(0x6d1)]);for(const _0x14199b of _0x4f2c8a){if(!_0x14199b)continue;_0x14199b[_0x23a5df(0x547)](_0x584670['Immortal']);}}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],'ActSeq_Mechanics_Multipliers',_0x51e003=>{const _0xa2bb94=_0x4c6a01;if(!SceneManager[_0xa2bb94(0x503)]())return;VisuMZ['ConvertParams'](_0x51e003,_0x51e003);const _0xf1ae9f=BattleManager['_action'],_0x164fae={'criticalHitRate':_0x51e003[_0xa2bb94(0xab6)],'criticalHitFlat':_0x51e003[_0xa2bb94(0xd6d)],'criticalDmgRate':_0x51e003[_0xa2bb94(0xc65)],'criticalDmgFlat':_0x51e003[_0xa2bb94(0x3d6)],'damageRate':_0x51e003[_0xa2bb94(0xddf)],'damageFlat':_0x51e003[_0xa2bb94(0x672)],'hitRate':_0x51e003[_0xa2bb94(0x48b)],'hitFlat':_0x51e003[_0xa2bb94(0xd75)]};_0xf1ae9f[_0xa2bb94(0x9a1)]=_0x164fae;}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],'ActSeq_Mechanics_OnceParallel',_0x12ec0f=>{const _0x15a2be=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x15a2be(0xc46)](_0x12ec0f,_0x12ec0f);const _0x2297ab=_0x12ec0f['CommonEventID'];SceneManager[_0x15a2be(0x4c1)][_0x15a2be(0x3ee)](_0x2297ab);}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x3dd),_0x2d387b=>{const _0x197570=_0x4c6a01;if(!SceneManager[_0x197570(0x503)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x197570(0xc46)](_0x2d387b,_0x2d387b);const _0x151908=VisuMZ[_0x197570(0xaf8)](_0x2d387b[_0x197570(0x6d1)]);for(const _0x20bcce of _0x151908){if(!_0x20bcce)continue;let _0x405bc1=_0x2d387b[_0x197570(0x59f)],_0x7aac11=_0x2d387b[_0x197570(0x804)],_0x5ac87e=_0x2d387b[_0x197570(0xa59)];if(BattleManager['_actionBattlers']['includes'](_0x20bcce)){if(_0x197570(0xc8b)!==_0x197570(0xc8b)){if(!_0x1f8d1f['VisuMZ_3_ActSeqImpact'])return;const _0x1b7192=_0x539a7b[_0x197570(0x4c1)][_0x197570(0x666)];if(!_0x1b7192)return;_0x23417e[_0x197570(0xc46)](_0x585790,_0x2cbe5b);const _0xb4e36d=_0x41a148['X']||0x0,_0xa0177f=_0x32a67e['Y']||0x0,_0x533349=_0x50b355[_0x197570(0x88d)]||0x0,_0x4e8b05=_0xd8baaf[_0x197570(0x311)]||0x0,_0x4ac63e=_0xb0e082[_0x197570(0xa14)]||0x1,_0x1dcf41=_0x1a5e6a[_0x197570(0xd9f)]||_0x197570(0x883);_0x1b7192[_0x197570(0x2ce)](_0x533349,_0xb4e36d,_0xa0177f,_0x4e8b05,_0x4ac63e,_0x1dcf41);}else _0x405bc1+=_0x5ac87e;}else _0x197570(0x7d7)!==_0x197570(0x3bb)?_0x7aac11+=_0x5ac87e:(this[_0x197570(0x270)]['show'](),this[_0x197570(0xdb6)][_0x197570(0xd46)](),this['_actorCommandWindow'][_0x197570(0xac2)]());BattleManager[_0x197570(0x78e)](_0x20bcce,-_0x405bc1,![]),BattleManager['turnOrderChangeOTB'](_0x20bcce,-_0x7aac11,!![]);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xd91),_0x3ca456=>{const _0x40ef75=_0x4c6a01;if(!SceneManager[_0x40ef75(0x503)]())return;if(!Imported[_0x40ef75(0x28f)])return;if(!BattleManager[_0x40ef75(0xd0e)]())return;VisuMZ['ConvertParams'](_0x3ca456,_0x3ca456);const _0x30cb96=BattleManager['_subject']['friendsUnit'](),_0x8b6408=_0x3ca456[_0x40ef75(0xce2)],_0x5a13e4=_0x3ca456['alterChange']||_0x40ef75(0x60c),_0x35667d=_0x3ca456[_0x40ef75(0x977)]||'unchanged',_0x188d19=_0x3ca456[_0x40ef75(0xad1)]||0x0,_0x3ba68e=_0x3ca456[_0x40ef75(0x33c)]||0x0;(_0x30cb96['canAlterActionCostPTB']()||_0x8b6408)&&(_0x8b6408&&(_0x30cb96[_0x40ef75(0xca5)]=_0x30cb96[_0x40ef75(0xca5)]||{},_0x30cb96['_ptbActionCost'][_0x40ef75(0x207)]=0x0),_0x30cb96[_0x40ef75(0xa8e)](_0x5a13e4,_0x35667d,_0x188d19,_0x3ba68e));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x99e),_0x45f62c=>{const _0x99e371=_0x4c6a01;if(!SceneManager[_0x99e371(0x503)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x99e371(0xd0e)]())return;VisuMZ[_0x99e371(0xc46)](_0x45f62c,_0x45f62c);const _0x2ec68a=BattleManager[_0x99e371(0x49e)][_0x99e371(0xbe7)]();let _0x12436e=Math['max'](_0x45f62c[_0x99e371(0x9ba)],0x0),_0x4f704d=_0x2ec68a[_0x99e371(0x6a4)](),_0x46e6b4=_0x2ec68a[_0x99e371(0x467)]();while(_0x12436e--){if(_0x4f704d<=0x0&&_0x46e6b4<=0x0){if(_0x99e371(0x3de)!==_0x99e371(0xa65))break;else{_0x5a7a70[_0x99e371(0x5e5)]['Sprite_Battler_initMembers'][_0x99e371(0x3a4)](this),this['initMembersBattleCore']();if(this[_0x99e371(0xacc)]===_0x5fd126)this[_0x99e371(0xa61)]();this[_0x99e371(0x590)]();}}else{if(_0x4f704d>0x0){if('cVzJA'!==_0x99e371(0x4de))return _0x1624e3[_0x99e371(0xac7)](_0xe0272e=>_0xe0272e[_0x99e371(0x51e)]()&&_0xe0272e!==_0x542451);else _0x4f704d--,_0x46e6b4++;}else _0x46e6b4--;}}_0x2ec68a[_0x99e371(0x817)](_0x4f704d),_0x2ec68a[_0x99e371(0x2e2)](_0x46e6b4);}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],'ActSeq_Mechanics_PtbFullHalfAction',_0x2215cc=>{const _0x43647e=_0x4c6a01;if(!SceneManager[_0x43647e(0x503)]())return;if(!Imported[_0x43647e(0x28f)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x43647e(0xc46)](_0x2215cc,_0x2215cc);const _0x595450=BattleManager[_0x43647e(0x49e)][_0x43647e(0xbe7)]();let _0x42c989=_0x2215cc['FullActions'],_0x189786=_0x2215cc['HalfActions'];_0x595450[_0x43647e(0x42f)](_0x42c989),_0x595450[_0x43647e(0xe13)](_0x189786);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x6af),_0x3a1584=>{const _0x936626=_0x4c6a01;if(!SceneManager[_0x936626(0x503)]())return;VisuMZ[_0x936626(0xc46)](_0x3a1584,_0x3a1584);const _0x2041b8=[_0x936626(0xca0),_0x936626(0x819),_0x936626(0x26b),'DEF',_0x936626(0x48c),_0x936626(0x554),'AGI','LUK'],_0x1b040d=_0x3a1584[_0x936626(0x4df)],_0x56fe6f=_0x3a1584[_0x936626(0x7d9)],_0x1e81e0=VisuMZ[_0x936626(0xaf8)](_0x3a1584['Targets']);for(const _0x1fd604 of _0x1e81e0){if('vpgSl'===_0x936626(0x56a)){const _0x48adc7=_0x409390[_0x936626(0x407)];if(_0x48adc7[_0x936626(0x996)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x1a3848=_0x4b0484(_0x582540['$1']),_0x3ae59a=_0xc2d57a['BattleCore'][_0x936626(0xcad)](_0x2bdade,'Targets');_0x427fa0[_0x936626(0x5e5)][_0x936626(0xcf0)](_0x1a3848,_0x3ae59a);}if(_0x48adc7[_0x936626(0x996)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0xd6ed2e=_0x5bdaa7(_0x1ca9a1['$1']),_0x50f99f=_0x10f2bc[_0x936626(0x5e5)][_0x936626(0xcad)](_0x438a1f,_0x936626(0xc57));_0xcb1c9d[_0x936626(0x5e5)]['createCommandVisibleJS'](_0xd6ed2e,_0x50f99f);}}else{if(!_0x1fd604)continue;for(const _0x3b43ec of _0x1b040d){const _0x4a8f69=_0x2041b8['indexOf'](_0x3b43ec[_0x936626(0xc9f)]()[_0x936626(0x4e9)]());_0x4a8f69>=0x0&&_0x4a8f69<=0x7&&_0x1fd604['isBuffAffected'](_0x4a8f69)&&_0x1fd604[_0x936626(0x7b5)](_0x4a8f69);}for(const _0x53ac15 of _0x56fe6f){const _0x1e2f65=_0x2041b8[_0x936626(0x93e)](_0x53ac15[_0x936626(0xc9f)]()['trim']());_0x1e2f65>=0x0&&_0x1e2f65<=0x7&&_0x1fd604[_0x936626(0x267)](_0x1e2f65)&&(_0x936626(0x23a)!==_0x936626(0x23a)?(this[_0x936626(0x722)](),_0x591f10[_0x936626(0x5e5)][_0x936626(0xc0d)][_0x936626(0x3a4)](this),this[_0x936626(0x7e0)]()):_0x1fd604[_0x936626(0x7b5)](_0x1e2f65));}}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_RemoveState',_0x58871c=>{const _0x359c1e=_0x4c6a01;if(!SceneManager[_0x359c1e(0x503)]())return;VisuMZ[_0x359c1e(0xc46)](_0x58871c,_0x58871c);const _0xcadfcf=_0x58871c['States'],_0x4cccf5=VisuMZ[_0x359c1e(0xaf8)](_0x58871c[_0x359c1e(0x6d1)]);for(const _0x3c2108 of _0x4cccf5){if(!_0x3c2108)continue;for(const _0x551985 of _0xcadfcf){_0x359c1e(0x7dd)!==_0x359c1e(0x7dd)?(this['_windowLayer']['x']=(_0x46fa59[_0x359c1e(0xe09)]-_0x3cd699['boxWidth'])/0x2,this[_0x359c1e(0xd01)]['y']=(_0x4bbc5f[_0x359c1e(0xb45)]-_0x368023[_0x359c1e(0xc3a)])/0x2):_0x3c2108['removeState'](_0x551985);}}}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Mechanics_StbExploit',_0x5a5013=>{const _0x3c1a9e=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3c1a9e(0x8b3)])return;if(!BattleManager[_0x3c1a9e(0x2ac)]())return;VisuMZ[_0x3c1a9e(0xc46)](_0x5a5013,_0x5a5013);const _0x33fbb0=_0x5a5013['Exploited'],_0xf43f53=VisuMZ[_0x3c1a9e(0xaf8)](_0x5a5013[_0x3c1a9e(0x6d1)]),_0x4eeed0=_0x5a5013[_0x3c1a9e(0x594)],_0x1e4d66=_0x5a5013[_0x3c1a9e(0xa3f)],_0x19fb14=_0x5a5013[_0x3c1a9e(0x8ba)],_0x519b62=BattleManager[_0x3c1a9e(0x3b6)];if(_0x33fbb0)for(const _0x59c8ca of _0xf43f53){if(!_0x59c8ca)continue;if(_0x59c8ca===user)continue;if(_0x4eeed0)_0x59c8ca[_0x3c1a9e(0xdaa)](![]);_0x59c8ca[_0x3c1a9e(0x2fa)](BattleManager[_0x3c1a9e(0x49e)],_0x519b62);}if(_0x1e4d66&&BattleManager[_0x3c1a9e(0x49e)]){if(_0x19fb14)BattleManager['_subject'][_0x3c1a9e(0xdaa)](![]);const _0x3ce38a=_0xf43f53[0x0];BattleManager[_0x3c1a9e(0xa62)](_0x3ce38a,_0x519b62);}}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x2b4),_0x24bee0=>{const _0x54c18f=_0x4c6a01;if(!SceneManager[_0x54c18f(0x503)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x54c18f(0x2ac)]())return;VisuMZ[_0x54c18f(0xc46)](_0x24bee0,_0x24bee0);const _0x521356=_0x24bee0[_0x54c18f(0x4ef)];BattleManager[_0x54c18f(0x49e)]&&BattleManager[_0x54c18f(0x49e)][_0x54c18f(0x4bc)](_0x521356);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xa66),_0x3a7415=>{const _0x2203a5=_0x4c6a01;if(!SceneManager[_0x2203a5(0x503)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x2203a5(0x2ac)]())return;VisuMZ['ConvertParams'](_0x3a7415,_0x3a7415);let _0x42de32=_0x3a7415[_0x2203a5(0x4ef)];if(BattleManager['_subject']){if(_0x2203a5(0x4a6)!==_0x2203a5(0x4a6)){if(_0x4f48a6===_0x3bf191[_0x2203a5(0x73e)]())return![];}else{BattleManager[_0x2203a5(0x49e)][_0x2203a5(0xada)]=BattleManager['_subject']['_actions']||[];while(_0x42de32--){if(_0x2203a5(0xb99)===_0x2203a5(0xd54))return 0x1;else{if(BattleManager['_subject']['_actions']['length']<=0x0)break;BattleManager[_0x2203a5(0x49e)][_0x2203a5(0xada)][_0x2203a5(0x91d)]();}}}}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Mechanics_SwapWeapon',_0x58fdf0=>{const _0x16cf87=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ['ConvertParams'](_0x58fdf0,_0x58fdf0);const _0x19bbfb=VisuMZ[_0x16cf87(0xaf8)](_0x58fdf0[_0x16cf87(0x6d1)]),_0x120b62=_0x58fdf0['WeaponTypeID'];for(const _0x3d53e0 of _0x19bbfb){if(!_0x3d53e0)continue;if(!_0x3d53e0[_0x16cf87(0x966)]())continue;_0x3d53e0[_0x16cf87(0xa67)](_0x120b62);}}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x2bd),_0x545615=>{const _0xac8c07=_0x4c6a01;if(!SceneManager[_0xac8c07(0x503)]())return;VisuMZ[_0xac8c07(0xc46)](_0x545615,_0x545615);const _0x496006=VisuMZ[_0xac8c07(0xaf8)](_0x545615[_0xac8c07(0x6d1)]),_0x2c756e=_0x545615[_0xac8c07(0xc70)],_0x17366c={'textColor':ColorManager['getColor'](_0x545615[_0xac8c07(0x863)]),'flashColor':_0x545615[_0xac8c07(0x4b8)],'flashDuration':_0x545615['FlashDuration']};for(const _0x4a651c of _0x496006){if(!_0x4a651c)continue;_0x4a651c['setupTextPopup'](_0x2c756e,_0x17366c);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x2a3),_0x59af98=>{const _0x57801e=_0x4c6a01;if(!SceneManager[_0x57801e(0x503)]())return;VisuMZ[_0x57801e(0xc46)](_0x59af98,_0x59af98);const _0x113d06=VisuMZ['CreateActionSequenceTargets'](_0x59af98['Targets']);let _0xa6529e=$gameVariables['value'](_0x59af98['Variable']);Imported['VisuMZ_0_CoreEngine']&&_0x59af98[_0x57801e(0x21a)]&&(_0xa6529e=VisuMZ['GroupDigits'](_0xa6529e));const _0x92c0d2=String(_0xa6529e),_0xe5f7e3={'textColor':ColorManager['getColor'](_0x59af98['TextColor']),'flashColor':_0x59af98[_0x57801e(0x4b8)],'flashDuration':_0x59af98[_0x57801e(0x1f6)]};for(const _0xa9b1a7 of _0x113d06){if(_0x57801e(0xc43)===_0x57801e(0xc43)){if(!_0xa9b1a7)continue;_0xa9b1a7[_0x57801e(0x9f0)](_0x92c0d2,_0xe5f7e3);}else this[_0x57801e(0xb17)][_0x57801e(0x279)](new _0x4f077c());}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x601),_0x21b3b7=>{const _0x3ba381=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;const _0x21647f=$gameTemp[_0x3ba381(0x582)]();if(!_0x21647f)return;_0x21647f[_0x3ba381(0x2b5)](_0x3ba381(0x7a3));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],'ActSeq_Motion_ClearFreezeFrame',_0x84c2ce=>{const _0x106732=_0x4c6a01;if(!SceneManager[_0x106732(0x503)]())return;VisuMZ[_0x106732(0xc46)](_0x84c2ce,_0x84c2ce);const _0x276f9a=VisuMZ[_0x106732(0xaf8)](_0x84c2ce[_0x106732(0x6d1)]);for(const _0x46c2af of _0x276f9a){if(!_0x46c2af)continue;_0x46c2af[_0x106732(0xb98)]();}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xafa),_0x143164=>{const _0x2fb283=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2fb283(0xc46)](_0x143164,_0x143164);const _0xb90970=VisuMZ[_0x2fb283(0xaf8)](_0x143164[_0x2fb283(0x6d1)]),_0x3b4689=_0x143164[_0x2fb283(0x9b8)][_0x2fb283(0x613)]()[_0x2fb283(0x4e9)]();let _0x4ed4e4=_0x143164[_0x2fb283(0x4f7)];const _0x16576c=_0x143164[_0x2fb283(0xc7b)];![_0x2fb283(0x2dc),_0x2fb283(0xe1f),_0x2fb283(0x7e7),_0x2fb283(0x3c7)][_0x2fb283(0x864)](_0x3b4689)&&(_0x4ed4e4=![]);for(const _0x4e8620 of _0xb90970){if(!_0x4e8620)continue;_0x4e8620['freezeMotion'](_0x3b4689,_0x4ed4e4,_0x16576c);}}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xa5f),_0x43d227=>{const _0x2efebf=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2efebf(0xc46)](_0x43d227,_0x43d227);const _0x17d3d4=VisuMZ['CreateActionSequenceTargets'](_0x43d227[_0x2efebf(0x6d1)]),_0x3145b1=_0x43d227[_0x2efebf(0x9b8)][_0x2efebf(0x613)]()[_0x2efebf(0x4e9)](),_0x59a8b1=_0x43d227[_0x2efebf(0x4f7)];for(const _0x29f512 of _0x17d3d4){if(!_0x29f512)continue;if(_0x3145b1[_0x2efebf(0x996)](/ATTACK[ ](\d+)/i))_0x2efebf(0xcb4)!==_0x2efebf(0x669)?_0x29f512[_0x2efebf(0x228)](Number(RegExp['$1'])):(_0x5c1cea[_0x2efebf(0x673)]=!![],_0x56cc48[_0x2efebf(0x491)](),this[_0x2efebf(0x52f)](),_0x105d07[_0x2efebf(0x758)]()&&(_0x442c6b[_0x2efebf(0xe1e)]=![]));else{if(_0x3145b1===_0x2efebf(0x2dc)){if(_0x2efebf(0x205)===_0x2efebf(0x205))_0x29f512['performAttack']();else return!![];}else _0x29f512[_0x2efebf(0x94b)](_0x3145b1);}if(!_0x59a8b1)'NAGZv'!==_0x2efebf(0x484)?_0x29f512['startWeaponAnimation'](0x0):_0x3bc085+=_0x2e5e50[_0x2efebf(0x3fa)](_0x157228[_0x2efebf(0x3ac)]);else{if(_0x59a8b1&&[_0x2efebf(0xe1f),_0x2efebf(0x7e7),_0x2efebf(0x816)][_0x2efebf(0x864)](_0x3145b1)){}}}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Motion_PerformAction',_0x3c1287=>{const _0x3a090f=_0x4c6a01;if(!SceneManager[_0x3a090f(0x503)]())return;VisuMZ[_0x3a090f(0xc46)](_0x3c1287,_0x3c1287);const _0x7d8095=BattleManager['_action'];if(!_0x7d8095)return;if(!_0x7d8095[_0x3a090f(0x6a7)]())return;const _0xd27d53=VisuMZ[_0x3a090f(0xaf8)](_0x3c1287['Targets']);for(const _0x10cac0 of _0xd27d53){if(_0x3a090f(0x266)!==_0x3a090f(0x1f8)){if(!_0x10cac0)continue;_0x10cac0['performAction'](_0x7d8095);}else this['addEscapeCommand']();}}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xb87),_0x101e9a=>{const _0x37522e=_0x4c6a01;if(!SceneManager[_0x37522e(0x503)]())return;VisuMZ[_0x37522e(0xc46)](_0x101e9a,_0x101e9a);const _0x4e3573=VisuMZ[_0x37522e(0xaf8)](_0x101e9a[_0x37522e(0x6d1)]);for(const _0x5cfb61 of _0x4e3573){if(!_0x5cfb61)continue;if(!_0x5cfb61[_0x37522e(0x72f)]())continue;_0x5cfb61[_0x37522e(0x72f)]()[_0x37522e(0xbb5)]();}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x9dd),_0x54566b=>{const _0x261c2b=_0x4c6a01;if(!SceneManager[_0x261c2b(0x503)]())return;VisuMZ['ConvertParams'](_0x54566b,_0x54566b);const _0x57797d=$gameTemp[_0x261c2b(0x582)](),_0x530516=_0x54566b[_0x261c2b(0x21b)]*Sprite_Battler[_0x261c2b(0x73a)];_0x57797d[_0x261c2b(0xcef)](_0x530516);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Movement_BattleStep',_0x488dde=>{const _0x4e4590=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4e4590(0xc46)](_0x488dde,_0x488dde);const _0xd52ae6=$gameTemp[_0x4e4590(0x582)](),_0x1c5ce6=BattleManager[_0x4e4590(0x3b6)];if(!_0xd52ae6||!_0x1c5ce6)return;if(!_0x1c5ce6['item']())return;const _0x41d9f4=VisuMZ['CreateActionSequenceTargets'](_0x488dde[_0x4e4590(0x6d1)]);for(const _0x5197f5 of _0x41d9f4){if(_0x4e4590(0xc0e)===_0x4e4590(0xc0e)){if(!_0x5197f5)continue;_0x5197f5[_0x4e4590(0x4da)](_0x1c5ce6);}else{let _0x1c83d4='battleUIOffsetY';if(this[_0x4e4590(0x496)](_0x1c83d4))return this['_cache'][_0x1c83d4];return this['_cache'][_0x1c83d4]=this[_0x4e4590(0x727)](this['actor']()),this[_0x4e4590(0x985)][_0x1c83d4];}}if(_0x488dde[_0x4e4590(0x459)])_0xd52ae6[_0x4e4590(0x2b5)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x7be),_0x415ce3=>{const _0x36ccb4=_0x4c6a01;if(!SceneManager[_0x36ccb4(0x503)]())return;if(!$gameSystem[_0x36ccb4(0x7a2)]())return;VisuMZ[_0x36ccb4(0xc46)](_0x415ce3,_0x415ce3);const _0x3a51ba=$gameTemp[_0x36ccb4(0x582)](),_0x76961e=VisuMZ[_0x36ccb4(0xaf8)](_0x415ce3[_0x36ccb4(0x6d1)]),_0x511bb1=_0x415ce3[_0x36ccb4(0x971)],_0x193be0=_0x415ce3[_0x36ccb4(0x570)],_0x3790dd=_0x415ce3[_0x36ccb4(0xccc)],_0x1b34db=_0x415ce3['Duration'],_0x361db4=_0x415ce3[_0x36ccb4(0xc91)],_0xcb9b03=_0x415ce3['EasingType'],_0x4948ac=_0x415ce3[_0x36ccb4(0x9b8)],_0xc1d0fd=_0x415ce3[_0x36ccb4(0x459)];if(!_0x3a51ba)return;for(const _0x58cdb8 of _0x76961e){if('HfUQA'!==_0x36ccb4(0xabc)){if(!_0x58cdb8)continue;let _0x1c8393=_0x193be0,_0x4c8091=_0x3790dd;if(_0x511bb1[_0x36ccb4(0x996)](/horz/i))_0x1c8393*=_0x58cdb8[_0x36ccb4(0x966)]()?-0x1:0x1;if(_0x511bb1['match'](/vert/i))_0x4c8091*=_0x58cdb8['isActor']()?-0x1:0x1;_0x58cdb8[_0x36ccb4(0x8e4)](_0x1c8393,_0x4c8091,_0x1b34db,_0x361db4,_0xcb9b03),_0x58cdb8[_0x36ccb4(0x94b)](_0x4948ac);}else _0x5ca516[_0x36ccb4(0x5e5)]['Sprite_Actor_updateShadow'][_0x36ccb4(0x3a4)](this),this[_0x36ccb4(0x743)]();}if(_0xc1d0fd)_0x3a51ba[_0x36ccb4(0x2b5)](_0x36ccb4(0x3c3));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x5cc),_0x573e9f=>{const _0x374089=_0x4c6a01;if(!SceneManager[_0x374089(0x503)]())return;if(!$gameSystem[_0x374089(0x7a2)]())return;VisuMZ[_0x374089(0xc46)](_0x573e9f,_0x573e9f);const _0x4dd3ae=$gameTemp[_0x374089(0x582)](),_0x1dff5f=VisuMZ[_0x374089(0xaf8)](_0x573e9f[_0x374089(0x6d1)]),_0x223244=_0x573e9f[_0x374089(0x881)],_0x3459ce=_0x573e9f['OffsetX'],_0x52e1e9=_0x573e9f['OffsetY'],_0x12de86=_0x573e9f[_0x374089(0xa14)],_0x285647=_0x573e9f['FaceDirection'],_0x8534dc=_0x573e9f['EasingType'],_0x162cee=_0x573e9f[_0x374089(0x9b8)],_0x1878f3=_0x573e9f['WaitForMovement'];if(!_0x4dd3ae)return;for(const _0x378acc of _0x1dff5f){if('VXigm'==='gEBln')_0x1dcdaa[_0x374089(0x593)]=_0xf13dc0,_0x46569a[_0x374089(0x593)]=_0x5c7a03,_0x1881ad[_0x374089(0xb49)](),_0x405efc['adjustPosition']();else{if(!_0x378acc)continue;const _0x15fd43=_0x573e9f[_0x374089(0x264)](_0x378acc)||{'x':0x0,'y':0x0};let _0x214280=_0x15fd43['x'],_0x559a05=_0x15fd43['y'];if(_0x223244[_0x374089(0x996)](/none/i))_0x214280+=_0x3459ce,_0x559a05+=_0x52e1e9;else{if(_0x223244[_0x374089(0x996)](/horz/i)&&_0x223244[_0x374089(0x996)](/vert/i))'snPUB'!=='lMiIf'?(_0x214280+=_0x378acc[_0x374089(0x966)]()?-_0x3459ce:_0x3459ce,_0x559a05+=_0x378acc[_0x374089(0x966)]()?-_0x52e1e9:_0x52e1e9):this[_0x374089(0xa79)]=!![];else{if(_0x223244[_0x374089(0x996)](/horz/i))_0x374089(0x606)!==_0x374089(0x606)?_0x180b79[_0x374089(0x5e5)][_0x374089(0xab3)][_0x374089(0x3a4)](this,_0x529103):(_0x214280+=_0x378acc[_0x374089(0x966)]()?-_0x3459ce:_0x3459ce,_0x559a05+=_0x52e1e9);else _0x223244[_0x374089(0x996)](/vert/i)&&(_0x214280+=_0x3459ce,_0x559a05+=_0x378acc[_0x374089(0x966)]()?-_0x52e1e9:_0x52e1e9);}}_0x378acc[_0x374089(0xb0f)](_0x214280,_0x559a05,_0x12de86,_0x285647,_0x8534dc,-0x1),_0x378acc[_0x374089(0x94b)](_0x162cee);}}if(_0x1878f3)_0x4dd3ae['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x4ad),_0xd4f1e0=>{const _0x1f2a01=_0x4c6a01;if(!SceneManager[_0x1f2a01(0x503)]())return;if(!$gameSystem[_0x1f2a01(0x7a2)]())return;VisuMZ[_0x1f2a01(0xc46)](_0xd4f1e0,_0xd4f1e0);const _0x31e689=$gameTemp[_0x1f2a01(0x582)](),_0xc8f8e6=VisuMZ['CreateActionSequenceTargets'](_0xd4f1e0[_0x1f2a01(0x6d1)]),_0x2aa1e9=_0xd4f1e0[_0x1f2a01(0x685)],_0x1c34c0=_0xd4f1e0[_0x1f2a01(0x881)],_0x45b216=_0xd4f1e0[_0x1f2a01(0xe10)],_0x519beb=_0xd4f1e0[_0x1f2a01(0x6f9)],_0x544a3c=_0xd4f1e0[_0x1f2a01(0xa14)],_0x47baf9=_0xd4f1e0[_0x1f2a01(0xc91)],_0x1b6c93=_0xd4f1e0['EasingType'],_0x2a7a7c=_0xd4f1e0[_0x1f2a01(0x9b8)],_0x4bdf6b=_0xd4f1e0[_0x1f2a01(0x459)];if(!_0x31e689)return;for(const _0x3770c2 of _0xc8f8e6){if(!_0x3770c2)continue;let _0x5be9d1=_0x3770c2[_0x1f2a01(0x72f)]()[_0x1f2a01(0x545)],_0x5b1e68=_0x3770c2[_0x1f2a01(0x72f)]()[_0x1f2a01(0xcaa)];if(_0x2aa1e9[_0x1f2a01(0x996)](/home/i)){if(_0x1f2a01(0x6dd)!==_0x1f2a01(0x6dd)){const _0x418756=_0x23f9cb[_0x1f2a01(0x407)];if(_0x418756['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x3df60c(_0x331a6c['$1'])*0.01;else{if(_0x418756[_0x1f2a01(0x996)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x59fac6(_0x26cef4['$1'])||0x0;}}else _0x5be9d1=_0x3770c2['battler']()['_homeX'],_0x5b1e68=_0x3770c2[_0x1f2a01(0x72f)]()[_0x1f2a01(0xb2f)];}else{if(_0x2aa1e9[_0x1f2a01(0x996)](/center/i))_0x5be9d1=Graphics[_0x1f2a01(0xbc7)]/0x2,_0x5b1e68=Graphics['boxHeight']/0x2;else _0x2aa1e9[_0x1f2a01(0x996)](/point (\d+), (\d+)/i)&&(_0x5be9d1=Number(RegExp['$1']),_0x5b1e68=Number(RegExp['$2']));}if(_0x1c34c0['match'](/none/i))_0x5be9d1+=_0x45b216,_0x5b1e68+=_0x519beb;else{if(_0x1c34c0[_0x1f2a01(0x996)](/horz/i)&&_0x1c34c0[_0x1f2a01(0x996)](/vert/i)){if(_0x1f2a01(0x3f7)==='HwvHl')_0x5be9d1+=_0x3770c2[_0x1f2a01(0x966)]()?-_0x45b216:_0x45b216,_0x5b1e68+=_0x3770c2[_0x1f2a01(0x966)]()?-_0x519beb:_0x519beb;else return _0x3684d9[_0x1f2a01(0x5e5)][_0x1f2a01(0x32d)]['AutoBattle'][_0x1f2a01(0x8a5)];}else{if(_0x1c34c0[_0x1f2a01(0x996)](/horz/i))_0x5be9d1+=_0x3770c2['isActor']()?-_0x45b216:_0x45b216,_0x5b1e68+=_0x519beb;else _0x1c34c0[_0x1f2a01(0x996)](/vert/i)&&(_0x5be9d1+=_0x45b216,_0x5b1e68+=_0x3770c2[_0x1f2a01(0x966)]()?-_0x519beb:_0x519beb);}}_0x3770c2['moveBattlerHomeToPoint'](_0x5be9d1,_0x5b1e68,_0x544a3c,_0x47baf9,_0x1b6c93,-0x1),_0x3770c2[_0x1f2a01(0x94b)](_0x2a7a7c);}if(_0x4bdf6b)_0x31e689[_0x1f2a01(0x2b5)](_0x1f2a01(0x3c3));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xdbd),_0x3aa0ce=>{const _0x41ecdb=_0x4c6a01;if(!SceneManager[_0x41ecdb(0x503)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x41ecdb(0xc46)](_0x3aa0ce,_0x3aa0ce);const _0x2c3571=$gameTemp[_0x41ecdb(0x582)](),_0x53e4f3=VisuMZ[_0x41ecdb(0xaf8)](_0x3aa0ce[_0x41ecdb(0x6f5)]),_0x213b8b=VisuMZ['CreateActionSequenceTargets'](_0x3aa0ce[_0x41ecdb(0xc84)]),_0x1f72b2=_0x3aa0ce[_0x41ecdb(0x744)];let _0x471912=_0x3aa0ce['MeleeDistance'];const _0x16b9e0=_0x3aa0ce['OffsetAdjust'],_0x109569=_0x3aa0ce[_0x41ecdb(0xe10)],_0x131150=_0x3aa0ce[_0x41ecdb(0x6f9)],_0x386a5d=_0x3aa0ce[_0x41ecdb(0xa14)],_0x1cb50b=_0x3aa0ce[_0x41ecdb(0xc91)],_0x51ae2e=_0x3aa0ce[_0x41ecdb(0xd9f)],_0x17aa05=_0x3aa0ce[_0x41ecdb(0x9b8)],_0x315730=_0x3aa0ce[_0x41ecdb(0x459)],_0x1ad0c5=Math[_0x41ecdb(0x892)](..._0x213b8b[_0x41ecdb(0x39f)](_0x534a40=>_0x534a40[_0x41ecdb(0x72f)]()[_0x41ecdb(0x545)]-_0x534a40[_0x41ecdb(0x72f)]()[_0x41ecdb(0x2e1)]()/0x2)),_0x21c3af=Math[_0x41ecdb(0xa5c)](..._0x213b8b[_0x41ecdb(0x39f)](_0x7586e8=>_0x7586e8[_0x41ecdb(0x72f)]()[_0x41ecdb(0x545)]+_0x7586e8['battler']()[_0x41ecdb(0x2e1)]()/0x2)),_0xf5b8b0=Math['min'](..._0x213b8b[_0x41ecdb(0x39f)](_0x52e4a6=>_0x52e4a6['battler']()[_0x41ecdb(0xcaa)]-_0x52e4a6[_0x41ecdb(0x72f)]()['mainSpriteHeight']())),_0x181d49=Math[_0x41ecdb(0xa5c)](..._0x213b8b[_0x41ecdb(0x39f)](_0x3fa6f5=>_0x3fa6f5[_0x41ecdb(0x72f)]()[_0x41ecdb(0xcaa)])),_0x2c8420=_0x213b8b['filter'](_0x149b16=>_0x149b16[_0x41ecdb(0x966)]())[_0x41ecdb(0x991)],_0x5569a2=_0x213b8b[_0x41ecdb(0xac7)](_0x1c8afa=>_0x1c8afa[_0x41ecdb(0xb37)]())[_0x41ecdb(0x991)];let _0x1ca8a8=0x0,_0x406cc3=0x0;if(_0x1f72b2[_0x41ecdb(0x996)](/front/i))_0x1ca8a8=_0x2c8420>=_0x5569a2?_0x1ad0c5:_0x21c3af;else{if(_0x1f72b2[_0x41ecdb(0x996)](/middle/i)){if(_0x41ecdb(0x3cc)!=='nnQva')_0x1ca8a8=(_0x1ad0c5+_0x21c3af)/0x2,_0x471912=-0x1;else{if(this['constructor']!==_0x46f7d7)return![];if(!_0x530699[_0x41ecdb(0x503)]())return![];return _0x2e85d4[_0x41ecdb(0x5e5)]['Settings']['BattleLayout'][_0x41ecdb(0xb7d)];}}else _0x1f72b2[_0x41ecdb(0x996)](/back/i)&&(_0x1ca8a8=_0x2c8420>=_0x5569a2?_0x21c3af:_0x1ad0c5);}if(_0x1f72b2[_0x41ecdb(0x996)](/head/i)){if(_0x41ecdb(0xab7)!==_0x41ecdb(0xca7))_0x406cc3=_0xf5b8b0;else{if(!_0x178474[_0x41ecdb(0x503)]())return;const _0x2b96be=_0x29451e[_0x41ecdb(0x582)]();if(!_0x2b96be)return;_0x2b96be['setWaitMode'](_0x41ecdb(0x885));}}else{if(_0x1f72b2[_0x41ecdb(0x996)](/center/i))_0x406cc3=(_0xf5b8b0+_0x181d49)/0x2;else _0x1f72b2[_0x41ecdb(0x996)](/base/i)&&(_0x41ecdb(0x222)!==_0x41ecdb(0x222)?(_0xd3cb52*=_0x3e6fa2[_0x41ecdb(0x7b6)](_0x3d4165[_0x41ecdb(0x909)]),_0x4700ff*=this[_0x41ecdb(0xb39)](_0x5910d5)):_0x406cc3=_0x181d49);}if(!_0x2c3571)return;for(const _0x370ba8 of _0x53e4f3){if(!_0x370ba8)continue;let _0x168c9b=_0x1ca8a8,_0x21d55a=_0x406cc3;if(_0x16b9e0['match'](/none/i))_0x168c9b+=_0x109569,_0x21d55a+=_0x131150;else{if(_0x16b9e0['match'](/horz/i)&&_0x16b9e0['match'](/vert/i)){if(_0x41ecdb(0x204)!=='czHFW')_0x168c9b+=_0x370ba8['isActor']()?-_0x109569:_0x109569,_0x21d55a+=_0x370ba8[_0x41ecdb(0x966)]()?-_0x131150:_0x131150;else return _0x41ecdb(0xdcc)[_0x41ecdb(0x511)](this[_0x41ecdb(0x966)]()?'actor':_0x41ecdb(0x962),this['name']());}else{if(_0x16b9e0[_0x41ecdb(0x996)](/horz/i))_0x168c9b+=_0x370ba8[_0x41ecdb(0x966)]()?-_0x109569:_0x109569,_0x21d55a+=_0x131150;else{if(_0x16b9e0[_0x41ecdb(0x996)](/vert/i)){if('xnqGi'!==_0x41ecdb(0x4a4)){const _0x5522d8=_0x297a58[_0xd22527];_0x5522d8&&_0x98923b[_0x41ecdb(0xdd5)](_0x3e6abd);}else _0x168c9b+=_0x109569,_0x21d55a+=_0x370ba8[_0x41ecdb(0x966)]()?-_0x131150:_0x131150;}}}}_0x370ba8[_0x41ecdb(0xb0f)](_0x168c9b,_0x21d55a,_0x386a5d,_0x1cb50b,_0x51ae2e,_0x471912),_0x370ba8[_0x41ecdb(0x94b)](_0x17aa05);}if(_0x315730)_0x2c3571['setWaitMode'](_0x41ecdb(0x3c3));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Movement_FaceDirection',_0x172b84=>{const _0x496d8a=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x496d8a(0x7a2)]())return;VisuMZ[_0x496d8a(0xc46)](_0x172b84,_0x172b84);const _0xfa4ec=VisuMZ[_0x496d8a(0xaf8)](_0x172b84['Targets']);let _0x3de100=_0x172b84[_0x496d8a(0x544)][_0x496d8a(0x996)](/back/i);for(const _0x255c56 of _0xfa4ec){if(!_0x255c56)continue;if(_0x172b84['Direction'][_0x496d8a(0x996)](/rand/i))_0x3de100=Math['randomInt'](0x2);_0x255c56[_0x496d8a(0x946)](!!_0x3de100);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x700),_0x268fe7=>{const _0x55053f=_0x4c6a01;if(!SceneManager[_0x55053f(0x503)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x268fe7,_0x268fe7);const _0x1ba235=VisuMZ[_0x55053f(0xaf8)](_0x268fe7[_0x55053f(0x6d1)]),_0x5b9111=_0x268fe7['FaceAway'];for(const _0x242002 of _0x1ba235){if(!_0x242002)continue;const _0x2ecbba=_0x268fe7[_0x55053f(0x68e)](_0x242002)||{'x':0x0,'y':0x0};let _0x2ca77b=_0x2ecbba['x'],_0x4826a2=_0x2ecbba['y'];_0x242002[_0x55053f(0xca9)](Math[_0x55053f(0x9c7)](_0x2ca77b),Math['round'](_0x4826a2),!!_0x5b9111);}}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xc64),_0x204258=>{const _0x35c125=_0x4c6a01;if(!SceneManager[_0x35c125(0x503)]())return;if(!$gameSystem[_0x35c125(0x7a2)]())return;VisuMZ[_0x35c125(0xc46)](_0x204258,_0x204258);const _0xe6867c=VisuMZ['CreateActionSequenceTargets'](_0x204258[_0x35c125(0x6d1)]);let _0xcc7d0=_0x204258[_0x35c125(0x352)];const _0x242255=_0x204258[_0x35c125(0x73b)];for(const _0x149d28 of _0xe6867c){if(_0x35c125(0x36b)==='GRbWj')this['_actorCommandWindow'][_0x35c125(0xb85)]();else{if(!_0x149d28)continue;let _0x3f80be=_0x149d28['battler']()[_0x35c125(0x545)],_0x385afe=_0x149d28[_0x35c125(0x72f)]()[_0x35c125(0xcaa)];if(_0xcc7d0[_0x35c125(0x996)](/home/i)){if(_0x35c125(0x850)!==_0x35c125(0xdd2))_0x3f80be=_0x149d28[_0x35c125(0x72f)]()['_homeX'],_0x385afe=_0x149d28[_0x35c125(0x72f)]()[_0x35c125(0xb2f)];else return;}else{if(_0xcc7d0[_0x35c125(0x996)](/center/i))_0x3f80be=Graphics[_0x35c125(0xbc7)]/0x2,_0x385afe=Graphics[_0x35c125(0xc3a)]/0x2;else _0xcc7d0[_0x35c125(0x996)](/point (\d+), (\d+)/i)&&(_0x3f80be=Number(RegExp['$1']),_0x385afe=Number(RegExp['$2']));}_0x149d28['setBattlerFacePoint'](Math[_0x35c125(0x9c7)](_0x3f80be),Math[_0x35c125(0x9c7)](_0x385afe),!!_0x242255);}}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x69b),_0x248f21=>{const _0xd1d66=_0x4c6a01;if(!SceneManager[_0xd1d66(0x503)]())return;if(!$gameSystem[_0xd1d66(0x7a2)]())return;VisuMZ[_0xd1d66(0xc46)](_0x248f21,_0x248f21);const _0x384b53=VisuMZ['CreateActionSequenceTargets'](_0x248f21[_0xd1d66(0x6f5)]),_0x5854de=VisuMZ['CreateActionSequenceTargets'](_0x248f21[_0xd1d66(0xc84)]),_0x4a5396=_0x5854de[_0xd1d66(0x39f)](_0x42a682=>_0x42a682&&_0x42a682['battler']()?_0x42a682[_0xd1d66(0x72f)]()[_0xd1d66(0x545)]:0x0)/(_0x5854de[_0xd1d66(0x991)]||0x1),_0x112e66=_0x5854de[_0xd1d66(0x39f)](_0x12f140=>_0x12f140&&_0x12f140[_0xd1d66(0x72f)]()?_0x12f140[_0xd1d66(0x72f)]()[_0xd1d66(0xcaa)]:0x0)/(_0x5854de[_0xd1d66(0x991)]||0x1),_0x27388e=_0x248f21[_0xd1d66(0x73b)];for(const _0x24f6b4 of _0x384b53){if(_0xd1d66(0x9b0)===_0xd1d66(0x6ed))_0x2dc197[_0xd1d66(0x5e5)][_0xd1d66(0x57b)][_0xd1d66(0x3a4)](this),this['onEncounterBattleCore']();else{if(!_0x24f6b4)continue;_0x24f6b4['setBattlerFacePoint'](Math['round'](_0x4a5396),Math[_0xd1d66(0x9c7)](_0x112e66),!!_0x27388e);}}}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0xb58),_0x58d2f2=>{const _0xff37c0=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xff37c0(0xc46)](_0x58d2f2,_0x58d2f2);const _0x42251e=$gameTemp['getLastPluginCommandInterpreter'](),_0x5e9c52=VisuMZ[_0xff37c0(0xaf8)](_0x58d2f2[_0xff37c0(0x6d1)]),_0x4c2823=_0x58d2f2['Height'],_0x565596=_0x58d2f2[_0xff37c0(0xa14)],_0xd6667e=_0x58d2f2[_0xff37c0(0xd9f)],_0x50bc76=_0x58d2f2[_0xff37c0(0xb55)];if(!_0x42251e)return;for(const _0x14effd of _0x5e9c52){if(!_0x14effd)continue;_0x14effd['floatBattler'](_0x4c2823,_0x565596,_0xd6667e);}if(_0x50bc76)_0x42251e[_0xff37c0(0x2b5)](_0xff37c0(0x885));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Movement_HomeReset',_0x1005d5=>{const _0x5caa5e=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5caa5e(0xc46)](_0x1005d5,_0x1005d5);const _0x570bd4=$gameTemp[_0x5caa5e(0x582)]();if(!_0x570bd4)return;const _0x261f35=VisuMZ[_0x5caa5e(0xaf8)](_0x1005d5[_0x5caa5e(0x6d1)]);for(const _0x11e162 of _0x261f35){if(!_0x11e162)continue;_0x11e162['performActionEndMembers']();}BattleManager[_0x5caa5e(0x49e)]&&BattleManager['_subject'][_0x5caa5e(0x3b1)]();if(_0x1005d5[_0x5caa5e(0x459)])_0x570bd4[_0x5caa5e(0x2b5)](_0x5caa5e(0x3c3));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Movement_Jump',_0x29c338=>{const _0x2ca784=_0x4c6a01;if(!SceneManager[_0x2ca784(0x503)]())return;VisuMZ[_0x2ca784(0xc46)](_0x29c338,_0x29c338);const _0x18ca79=$gameTemp[_0x2ca784(0x582)](),_0x3cc381=VisuMZ['CreateActionSequenceTargets'](_0x29c338[_0x2ca784(0x6d1)]),_0x5603f5=_0x29c338[_0x2ca784(0x7f6)],_0x3b8561=_0x29c338[_0x2ca784(0xa14)],_0x1d7afb=_0x29c338['WaitForJump'];if(!_0x18ca79)return;for(const _0x4c0f9f of _0x3cc381){if(!_0x4c0f9f)continue;_0x4c0f9f[_0x2ca784(0xc33)](_0x5603f5,_0x3b8561);}if(_0x1d7afb)_0x18ca79['setWaitMode'](_0x2ca784(0x942));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x471),_0x115b4f=>{const _0x284906=_0x4c6a01;if(!SceneManager[_0x284906(0x503)]())return;if(!$gameSystem[_0x284906(0x7a2)]())return;VisuMZ[_0x284906(0xc46)](_0x115b4f,_0x115b4f);const _0x35a0e3=$gameTemp[_0x284906(0x582)](),_0x1ad022=VisuMZ[_0x284906(0xaf8)](_0x115b4f[_0x284906(0x6d1)]),_0x57f824=_0x115b4f['DistanceAdjust'],_0x5af415=_0x115b4f[_0x284906(0x570)],_0x52e3da=_0x115b4f[_0x284906(0xccc)],_0x2c7393=_0x115b4f[_0x284906(0xa14)],_0x530e54=_0x115b4f[_0x284906(0xc91)],_0x571f08=_0x115b4f[_0x284906(0xd9f)],_0x5a834a=_0x115b4f[_0x284906(0x9b8)],_0x3217be=_0x115b4f['WaitForMovement'];if(!_0x35a0e3)return;for(const _0x3a6d04 of _0x1ad022){if(!_0x3a6d04)continue;let _0x581832=_0x5af415,_0x574e92=_0x52e3da;if(_0x57f824[_0x284906(0x996)](/horz/i))_0x581832*=_0x3a6d04[_0x284906(0x966)]()?-0x1:0x1;if(_0x57f824[_0x284906(0x996)](/vert/i))_0x574e92*=_0x3a6d04[_0x284906(0x966)]()?-0x1:0x1;_0x3a6d04['moveBattlerDistance'](_0x581832,_0x574e92,_0x2c7393,_0x530e54,_0x571f08),_0x3a6d04[_0x284906(0x94b)](_0x5a834a);}if(_0x3217be)_0x35a0e3['setWaitMode']('battleMove');}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Movement_MoveToJsPoint',_0x4eb3fb=>{const _0x4a86a0=_0x4c6a01;if(!SceneManager[_0x4a86a0(0x503)]())return;if(!$gameSystem[_0x4a86a0(0x7a2)]())return;VisuMZ[_0x4a86a0(0xc46)](_0x4eb3fb,_0x4eb3fb);const _0x3c2a49=$gameTemp[_0x4a86a0(0x582)](),_0x4afff7=VisuMZ[_0x4a86a0(0xaf8)](_0x4eb3fb[_0x4a86a0(0x6d1)]),_0x95a6f5=_0x4eb3fb[_0x4a86a0(0x881)],_0x35ff05=_0x4eb3fb[_0x4a86a0(0xe10)],_0x2e8f1e=_0x4eb3fb['OffsetY'],_0x13da68=_0x4eb3fb['Duration'],_0x278714=_0x4eb3fb[_0x4a86a0(0xc91)],_0x3c127c=_0x4eb3fb['EasingType'],_0x4d9adb=_0x4eb3fb[_0x4a86a0(0x9b8)],_0x4be49e=_0x4eb3fb[_0x4a86a0(0x459)];if(!_0x3c2a49)return;for(const _0x156f81 of _0x4afff7){if(_0x4a86a0(0x532)!=='tRbcE'){const _0x15a4d1=this[_0x4a86a0(0xbbd)]();if(_0x15a4d1[_0x4a86a0(0xd2c)]||_0x15a4d1['evaded']){const _0x21add9=_0x3c03c6[_0x4a86a0(0x349)](_0x15a4d1);_0x21add9[_0x4a86a0(0x244)]=![],_0x21add9[_0x4a86a0(0x34c)]=0x0,this['_damagePopupArray'][_0x4a86a0(0x543)](_0x21add9);}if(_0x15a4d1[_0x4a86a0(0x244)]){const _0xcfdd94=_0x48308f[_0x4a86a0(0x349)](_0x15a4d1);_0xcfdd94[_0x4a86a0(0xd2c)]=![],_0xcfdd94[_0x4a86a0(0xced)]=![],_0xcfdd94[_0x4a86a0(0x34c)]=0x0,this[_0x4a86a0(0xbd8)][_0x4a86a0(0x543)](_0xcfdd94);}if(_0x15a4d1[_0x4a86a0(0x34c)]!==0x0){const _0x2e9282=_0x2c9c67[_0x4a86a0(0x349)](_0x15a4d1);_0x2e9282['missed']=![],_0x2e9282[_0x4a86a0(0xced)]=![],_0x2e9282[_0x4a86a0(0x244)]=![],this['_damagePopupArray']['push'](_0x2e9282);}}else{if(!_0x156f81)continue;const _0x2a8609=_0x4eb3fb[_0x4a86a0(0x264)](_0x156f81)||{'x':0x0,'y':0x0};let _0x1d5ea8=_0x2a8609['x'],_0x2566ff=_0x2a8609['y'];if(_0x95a6f5[_0x4a86a0(0x996)](/none/i)){if('YkPZU'===_0x4a86a0(0x868))return _0x5f1901[_0x4a86a0(0x407)][_0x4a86a0(0x996)](/<COMMAND TEXT: (.*)>/i)?_0x2ea93e(_0x5695e0['$1']):_0x254a93['name'];else _0x1d5ea8+=_0x35ff05,_0x2566ff+=_0x2e8f1e;}else{if(_0x95a6f5[_0x4a86a0(0x996)](/horz/i)&&_0x95a6f5[_0x4a86a0(0x996)](/vert/i)){if(_0x4a86a0(0x995)!==_0x4a86a0(0x995))return this[_0x4a86a0(0xb04)]()[_0x4a86a0(0x2c7)]!=='';else _0x1d5ea8+=_0x156f81[_0x4a86a0(0x966)]()?-_0x35ff05:_0x35ff05,_0x2566ff+=_0x156f81[_0x4a86a0(0x966)]()?-_0x2e8f1e:_0x2e8f1e;}else{if(_0x95a6f5[_0x4a86a0(0x996)](/horz/i))_0x1d5ea8+=_0x156f81[_0x4a86a0(0x966)]()?-_0x35ff05:_0x35ff05,_0x2566ff+=_0x2e8f1e;else _0x95a6f5['match'](/vert/i)&&(_0x1d5ea8+=_0x35ff05,_0x2566ff+=_0x156f81[_0x4a86a0(0x966)]()?-_0x2e8f1e:_0x2e8f1e);}}_0x156f81[_0x4a86a0(0x442)](_0x1d5ea8,_0x2566ff,_0x13da68,_0x278714,_0x3c127c,-0x1),_0x156f81[_0x4a86a0(0x94b)](_0x4d9adb);}}if(_0x4be49e)_0x3c2a49['setWaitMode'](_0x4a86a0(0x3c3));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x41c),_0x2914bf=>{const _0xb76d0e=_0x4c6a01;if(!SceneManager[_0xb76d0e(0x503)]())return;if(!$gameSystem[_0xb76d0e(0x7a2)]())return;VisuMZ[_0xb76d0e(0xc46)](_0x2914bf,_0x2914bf);const _0x27a11b=$gameTemp[_0xb76d0e(0x582)](),_0x4a8f24=VisuMZ[_0xb76d0e(0xaf8)](_0x2914bf[_0xb76d0e(0x6d1)]),_0x11fc28=_0x2914bf[_0xb76d0e(0x685)],_0xf97729=_0x2914bf[_0xb76d0e(0x881)],_0x55b9e3=_0x2914bf[_0xb76d0e(0xe10)],_0x49c58a=_0x2914bf['OffsetY'],_0x1e9b7f=_0x2914bf[_0xb76d0e(0xa14)],_0x4533aa=_0x2914bf[_0xb76d0e(0xc91)],_0x362ea4=_0x2914bf[_0xb76d0e(0xd9f)],_0xe98f85=_0x2914bf[_0xb76d0e(0x9b8)],_0x278b46=_0x2914bf[_0xb76d0e(0x459)];if(!_0x27a11b)return;for(const _0xa91cbd of _0x4a8f24){if(!_0xa91cbd)continue;let _0x118f5a=_0xa91cbd['battler']()[_0xb76d0e(0x545)],_0x36ea79=_0xa91cbd[_0xb76d0e(0x72f)]()[_0xb76d0e(0xcaa)];if(_0x11fc28[_0xb76d0e(0x996)](/home/i))_0xb76d0e(0xdb4)===_0xb76d0e(0xcc4)?(_0x34a187['BattleCore']['Game_Party_removeActor'][_0xb76d0e(0x3a4)](this,_0xa4e6f1),_0x217a51[_0xb76d0e(0x6e5)]()):(_0x118f5a=_0xa91cbd['battler']()[_0xb76d0e(0xb92)],_0x36ea79=_0xa91cbd[_0xb76d0e(0x72f)]()[_0xb76d0e(0xb2f)]);else{if(_0x11fc28[_0xb76d0e(0x996)](/center/i))_0x118f5a=Graphics[_0xb76d0e(0xbc7)]/0x2,_0x36ea79=Graphics['boxHeight']/0x2;else _0x11fc28[_0xb76d0e(0x996)](/point (\d+), (\d+)/i)&&(_0x118f5a=Number(RegExp['$1']),_0x36ea79=Number(RegExp['$2']));}if(_0xf97729[_0xb76d0e(0x996)](/none/i))_0x118f5a+=_0x55b9e3,_0x36ea79+=_0x49c58a;else{if(_0xf97729[_0xb76d0e(0x996)](/horz/i)&&_0xf97729[_0xb76d0e(0x996)](/vert/i))_0x118f5a+=_0xa91cbd[_0xb76d0e(0x966)]()?-_0x55b9e3:_0x55b9e3,_0x36ea79+=_0xa91cbd[_0xb76d0e(0x966)]()?-_0x49c58a:_0x49c58a;else{if(_0xf97729['match'](/horz/i)){if(_0xb76d0e(0x245)===_0xb76d0e(0x362))return _0x4d162f[_0xb76d0e(0xc1d)]?this[_0xb76d0e(0x2c8)](_0x5bf9fc):_0x3c4362[_0xb76d0e(0x5e5)][_0xb76d0e(0x905)][_0xb76d0e(0x3a4)](this,_0x2237a0);else _0x118f5a+=_0xa91cbd['isActor']()?-_0x55b9e3:_0x55b9e3,_0x36ea79+=_0x49c58a;}else{if(_0xf97729[_0xb76d0e(0x996)](/vert/i)){if(_0xb76d0e(0xae2)===_0xb76d0e(0xd3b)){const _0x53b920=new _0x40c236();_0x53b920[_0xb76d0e(0x593)]=_0x320a3e[_0xb76d0e(0x9a0)](_0x410dc6[_0xb76d0e(0x440)]),_0x53b920['x']=_0x34cd57['StatusWindowAttachmentFrontOffsetX']||0x0,_0x53b920['y']=_0x1707c8['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0xb76d0e(0x279)](_0x53b920),this[_0xb76d0e(0x76d)]=_0x53b920;}else _0x118f5a+=_0x55b9e3,_0x36ea79+=_0xa91cbd[_0xb76d0e(0x966)]()?-_0x49c58a:_0x49c58a;}}}}_0xa91cbd['moveBattlerToPoint'](_0x118f5a,_0x36ea79,_0x1e9b7f,_0x4533aa,_0x362ea4,-0x1),_0xa91cbd[_0xb76d0e(0x94b)](_0xe98f85);}if(_0x278b46)_0x27a11b['setWaitMode']('battleMove');}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Movement_MoveToTarget',_0x93ec44=>{const _0x4c1e7f=_0x4c6a01;if(!SceneManager[_0x4c1e7f(0x503)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x93ec44,_0x93ec44);const _0x21cd12=$gameTemp['getLastPluginCommandInterpreter'](),_0x2b1546=VisuMZ['CreateActionSequenceTargets'](_0x93ec44[_0x4c1e7f(0x6f5)]),_0x17897b=VisuMZ['CreateActionSequenceTargets'](_0x93ec44[_0x4c1e7f(0xc84)]),_0xe2bec=_0x93ec44[_0x4c1e7f(0x744)];let _0x321cdd=_0x93ec44[_0x4c1e7f(0x406)];const _0x1d829c=_0x93ec44[_0x4c1e7f(0x881)],_0xb12c1b=_0x93ec44[_0x4c1e7f(0xe10)],_0x8833ed=_0x93ec44[_0x4c1e7f(0x6f9)],_0x4729da=_0x93ec44['Duration'],_0x195f26=_0x93ec44[_0x4c1e7f(0xc91)],_0x58c5f4=_0x93ec44[_0x4c1e7f(0xd9f)],_0x2ab7b6=_0x93ec44[_0x4c1e7f(0x9b8)],_0x25f753=_0x93ec44[_0x4c1e7f(0x459)],_0x469748=Math[_0x4c1e7f(0x892)](..._0x17897b[_0x4c1e7f(0x39f)](_0x497dd2=>_0x497dd2[_0x4c1e7f(0x72f)]()[_0x4c1e7f(0x545)]-_0x497dd2[_0x4c1e7f(0x72f)]()[_0x4c1e7f(0x2e1)]()/0x2)),_0x575a96=Math['max'](..._0x17897b['map'](_0x25432a=>_0x25432a[_0x4c1e7f(0x72f)]()[_0x4c1e7f(0x545)]+_0x25432a[_0x4c1e7f(0x72f)]()[_0x4c1e7f(0x2e1)]()/0x2)),_0x54be97=Math['min'](..._0x17897b[_0x4c1e7f(0x39f)](_0x3e9388=>_0x3e9388[_0x4c1e7f(0x72f)]()[_0x4c1e7f(0xcaa)]-_0x3e9388[_0x4c1e7f(0x72f)]()[_0x4c1e7f(0x8cd)]())),_0x12af07=Math[_0x4c1e7f(0xa5c)](..._0x17897b['map'](_0x3ec633=>_0x3ec633['battler']()[_0x4c1e7f(0xcaa)])),_0x58e03e=_0x17897b[_0x4c1e7f(0xac7)](_0x39413c=>_0x39413c[_0x4c1e7f(0x966)]())[_0x4c1e7f(0x991)],_0x463d22=_0x17897b['filter'](_0x31cc94=>_0x31cc94['isEnemy']())[_0x4c1e7f(0x991)];let _0x188f39=0x0,_0x408093=0x0;if(_0xe2bec[_0x4c1e7f(0x996)](/front/i))_0x188f39=_0x58e03e>=_0x463d22?_0x469748:_0x575a96;else{if(_0xe2bec[_0x4c1e7f(0x996)](/middle/i))_0x188f39=(_0x469748+_0x575a96)/0x2,_0x321cdd=-0x1;else{if(_0xe2bec[_0x4c1e7f(0x996)](/back/i)){if(_0x4c1e7f(0x2f1)===_0x4c1e7f(0x3f6))return this[_0x4c1e7f(0xb61)]();else _0x188f39=_0x58e03e>=_0x463d22?_0x575a96:_0x469748;}}}if(_0xe2bec[_0x4c1e7f(0x996)](/head/i))_0x408093=_0x54be97;else{if(_0xe2bec[_0x4c1e7f(0x996)](/center/i))_0x4c1e7f(0x53f)!==_0x4c1e7f(0xa90)?_0x408093=(_0x54be97+_0x12af07)/0x2:_0x597fa6+=_0x4e4228(_0x507e2b['$1']);else _0xe2bec[_0x4c1e7f(0x996)](/base/i)&&(_0x408093=_0x12af07);}if(!_0x21cd12)return;for(const _0x11106d of _0x2b1546){if(!_0x11106d)continue;let _0x247f07=_0x188f39,_0x179912=_0x408093;if(_0x1d829c[_0x4c1e7f(0x996)](/none/i))_0x247f07+=_0xb12c1b,_0x179912+=_0x8833ed;else{if(_0x1d829c[_0x4c1e7f(0x996)](/horz/i)&&_0x1d829c['match'](/vert/i))_0x247f07+=_0x11106d[_0x4c1e7f(0x966)]()?-_0xb12c1b:_0xb12c1b,_0x179912+=_0x11106d[_0x4c1e7f(0x966)]()?-_0x8833ed:_0x8833ed;else{if(_0x1d829c['match'](/horz/i))_0x247f07+=_0x11106d['isActor']()?-_0xb12c1b:_0xb12c1b,_0x179912+=_0x8833ed;else _0x1d829c[_0x4c1e7f(0x996)](/vert/i)&&(_0x247f07+=_0xb12c1b,_0x179912+=_0x11106d['isActor']()?-_0x8833ed:_0x8833ed);}}_0x11106d[_0x4c1e7f(0x442)](_0x247f07,_0x179912,_0x4729da,_0x195f26,_0x58c5f4,_0x321cdd),_0x11106d[_0x4c1e7f(0x94b)](_0x2ab7b6);}if(_0x25f753)_0x21cd12[_0x4c1e7f(0x2b5)]('battleMove');}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x357),_0x18d6ee=>{const _0x2a3726=_0x4c6a01;if(!SceneManager[_0x2a3726(0x503)]())return;VisuMZ['ConvertParams'](_0x18d6ee,_0x18d6ee);const _0x4e76d2=$gameTemp[_0x2a3726(0x582)](),_0x3df037=VisuMZ[_0x2a3726(0xaf8)](_0x18d6ee[_0x2a3726(0x6d1)]),_0x19e530=_0x18d6ee[_0x2a3726(0xda8)],_0xd5a0a8=_0x18d6ee[_0x2a3726(0xa14)],_0xcb937c=_0x18d6ee[_0x2a3726(0xd9f)],_0x996909=_0x18d6ee[_0x2a3726(0x33a)];if(!_0x4e76d2)return;for(const _0x289471 of _0x3df037){if(!_0x289471)continue;_0x289471[_0x2a3726(0x7b4)](_0x19e530,_0xd5a0a8,_0xcb937c);}if(_0x996909)_0x4e76d2[_0x2a3726(0x2b5)](_0x2a3726(0x539));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xc8d),_0xfa546a=>{const _0x16520f=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xfa546a,_0xfa546a);const _0x281b2a=$gameTemp[_0x16520f(0x582)](),_0x8a4044=VisuMZ[_0x16520f(0xaf8)](_0xfa546a[_0x16520f(0x6d1)]),_0x5363d7=_0xfa546a[_0x16520f(0x39e)],_0x34b2fe=_0xfa546a['ScaleY'],_0x1a1a0c=_0xfa546a[_0x16520f(0xa14)],_0x269c05=_0xfa546a[_0x16520f(0xd9f)],_0x4aed22=_0xfa546a[_0x16520f(0x492)];if(!_0x281b2a)return;for(const _0x574f4a of _0x8a4044){if(_0x16520f(0x591)!==_0x16520f(0x268)){if(!_0x574f4a)continue;_0x574f4a[_0x16520f(0xdc6)](_0x5363d7,_0x34b2fe,_0x1a1a0c,_0x269c05);}else{if(_0x27bd85[_0x16520f(0xb7e)][_0x16520f(0x3d8)]===0x3)return![];}}if(_0x4aed22)_0x281b2a[_0x16520f(0x2b5)](_0x16520f(0x6c2));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xcf5),_0x18d9ed=>{const _0x2e562a=_0x4c6a01;if(!SceneManager[_0x2e562a(0x503)]())return;VisuMZ[_0x2e562a(0xc46)](_0x18d9ed,_0x18d9ed);const _0x450772=$gameTemp['getLastPluginCommandInterpreter'](),_0x440f96=VisuMZ['CreateActionSequenceTargets'](_0x18d9ed['Targets']),_0x2aab67=_0x18d9ed[_0x2e562a(0xdfc)],_0x48e145=_0x18d9ed[_0x2e562a(0x525)],_0x10c863=_0x18d9ed[_0x2e562a(0xa14)],_0x1ea4fa=_0x18d9ed['EasingType'],_0x4fe190=_0x18d9ed[_0x2e562a(0xb5b)];if(!_0x450772)return;for(const _0x1a7c21 of _0x440f96){if(!_0x1a7c21)continue;_0x1a7c21[_0x2e562a(0xb90)](_0x2aab67,_0x48e145,_0x10c863,_0x1ea4fa);}if(_0x4fe190)_0x450772[_0x2e562a(0x2b5)]('battleSpriteSkew');}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xa33),_0x5d7279=>{const _0x16d4d9=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x16d4d9(0xc46)](_0x5d7279,_0x5d7279);const _0x2a7897=$gameTemp[_0x16d4d9(0x582)](),_0x51330=VisuMZ[_0x16d4d9(0xaf8)](_0x5d7279[_0x16d4d9(0x6d1)]),_0x50014b=_0x5d7279[_0x16d4d9(0x645)],_0x28170e=_0x5d7279[_0x16d4d9(0xa14)],_0x562a60=_0x5d7279[_0x16d4d9(0xd9f)],_0x4ede94=_0x5d7279['RevertAngle'],_0x188734=_0x5d7279['WaitForSpin'];if(!_0x2a7897)return;for(const _0x1b4671 of _0x51330){if(!_0x1b4671)continue;_0x1b4671[_0x16d4d9(0xbbc)](_0x50014b,_0x28170e,_0x562a60,_0x4ede94);}if(_0x188734)_0x2a7897[_0x16d4d9(0x2b5)](_0x16d4d9(0xbda));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x5c3),_0x3d4f57=>{const _0x2deede=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;const _0x194a62=$gameTemp[_0x2deede(0x582)]();if(!_0x194a62)return;_0x194a62['setWaitMode'](_0x2deede(0x885));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xbba),_0x1a8c70=>{const _0x1676af=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;const _0x2e7ae6=$gameTemp[_0x1676af(0x582)]();if(!_0x2e7ae6)return;_0x2e7ae6[_0x1676af(0x2b5)](_0x1676af(0x942));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Movement_WaitForMovement',_0x3e030b=>{const _0x47d8d8=_0x4c6a01;if(!SceneManager[_0x47d8d8(0x503)]())return;const _0x1b422f=$gameTemp[_0x47d8d8(0x582)]();if(!_0x1b422f)return;_0x1b422f[_0x47d8d8(0x2b5)](_0x47d8d8(0x3c3));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xc20),_0x3e6c9e=>{const _0x1ef4ba=_0x4c6a01;if(!SceneManager[_0x1ef4ba(0x503)]())return;const _0x457a40=$gameTemp[_0x1ef4ba(0x582)]();if(!_0x457a40)return;_0x457a40[_0x1ef4ba(0x2b5)](_0x1ef4ba(0x539));}),PluginManager[_0x4c6a01(0x430)](pluginData['name'],_0x4c6a01(0x301),_0x496488=>{const _0x59364b=_0x4c6a01;if(!SceneManager[_0x59364b(0x503)]())return;const _0x502326=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x502326)return;_0x502326[_0x59364b(0x2b5)](_0x59364b(0x6c2));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Movement_WaitForSkew',_0x2aaef8=>{const _0x18551d=_0x4c6a01;if(!SceneManager[_0x18551d(0x503)]())return;const _0x1097ce=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1097ce)return;_0x1097ce['setWaitMode'](_0x18551d(0xba6));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Movement_WaitForSpin',_0x2fd915=>{const _0x3013af=_0x4c6a01;if(!SceneManager[_0x3013af(0x503)]())return;const _0x395c87=$gameTemp[_0x3013af(0x582)]();if(!_0x395c87)return;_0x395c87['setWaitMode']('battleSpin');}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xcb9),_0x432a0b=>{const _0x187741=_0x4c6a01;if(!SceneManager[_0x187741(0x503)]())return;if(!Imported[_0x187741(0xdc2)])return;VisuMZ['ConvertParams'](_0x432a0b,_0x432a0b);const _0x4623fc=$gameTemp[_0x187741(0x582)](),_0x5252ef=_0x432a0b['WaitForProjectile'];if(!_0x4623fc)return;const _0x13e22d=BattleManager[_0x187741(0x666)];if(!_0x13e22d)return;_0x13e22d[_0x187741(0x4dc)](_0x432a0b);if(_0x5252ef)_0x4623fc['setWaitMode']('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xaa8),_0x232064=>{const _0x1d99d8=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1d99d8(0xdc2)])return;VisuMZ[_0x1d99d8(0xc46)](_0x232064,_0x232064);const _0x5f18cb=$gameTemp['getLastPluginCommandInterpreter'](),_0x39c0c0=_0x232064[_0x1d99d8(0x6c5)];if(!_0x5f18cb)return;const _0x53a81a=BattleManager['_spriteset'];if(!_0x53a81a)return;_0x53a81a['createActionSequenceProjectile'](_0x232064);if(_0x39c0c0)_0x5f18cb['setWaitMode'](_0x1d99d8(0x5ab));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xdec),_0x2cc0a6=>{const _0x58f0ab=_0x4c6a01;if(!SceneManager[_0x58f0ab(0x503)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x58f0ab(0xc46)](_0x2cc0a6,_0x2cc0a6);const _0x37dd80=$gameTemp[_0x58f0ab(0x582)](),_0x496eff=_0x2cc0a6[_0x58f0ab(0x6c5)];if(!_0x37dd80)return;const _0x5b2dde=BattleManager[_0x58f0ab(0x666)];if(!_0x5b2dde)return;_0x5b2dde[_0x58f0ab(0x4dc)](_0x2cc0a6);if(_0x496eff)_0x37dd80[_0x58f0ab(0x2b5)](_0x58f0ab(0x5ab));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_ChangeSkew',_0x28a2e3=>{const _0x539082=_0x4c6a01;if(!SceneManager[_0x539082(0x503)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x539082(0xc46)](_0x28a2e3,_0x28a2e3);const _0x200ce7=$gameTemp['getLastPluginCommandInterpreter'](),_0x3e8ba8=_0x28a2e3[_0x539082(0xb5b)];if(!_0x200ce7)return;$gameScreen[_0x539082(0x76e)](_0x28a2e3[_0x539082(0xdfc)],_0x28a2e3[_0x539082(0x525)],_0x28a2e3['Duration'],_0x28a2e3[_0x539082(0xd9f)]);if(_0x3e8ba8)_0x200ce7['setWaitMode'](_0x539082(0x480));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Skew_Reset',_0x484b18=>{const _0x1d59a0=_0x4c6a01;if(!SceneManager[_0x1d59a0(0x503)]())return;if(!Imported[_0x1d59a0(0x880)])return;VisuMZ[_0x1d59a0(0xc46)](_0x484b18,_0x484b18);const _0x4a9fd8=$gameTemp[_0x1d59a0(0x582)](),_0x277840=_0x484b18[_0x1d59a0(0xb5b)];if(!_0x4a9fd8)return;$gameScreen[_0x1d59a0(0x76e)](0x0,0x0,_0x484b18[_0x1d59a0(0xa14)],_0x484b18[_0x1d59a0(0xd9f)]);if(_0x277840)_0x4a9fd8[_0x1d59a0(0x2b5)](_0x1d59a0(0x480));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xb91),_0x5236e1=>{const _0x525d74=_0x4c6a01;if(!SceneManager[_0x525d74(0x503)]())return;if(!Imported[_0x525d74(0x880)])return;const _0x559761=$gameTemp[_0x525d74(0x582)]();if(!_0x559761)return;_0x559761['setWaitMode'](_0x525d74(0x480));}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Target_CurrentIndex',_0x2ef0ea=>{const _0x45803d=_0x4c6a01;if(!SceneManager[_0x45803d(0x503)]())return;VisuMZ[_0x45803d(0xc46)](_0x2ef0ea,_0x2ef0ea);const _0x5bf60c=$gameTemp[_0x45803d(0x582)](),_0x141228=_0x2ef0ea[_0x45803d(0x731)],_0x17649a=_0x2ef0ea['JumpToLabel'];if(!_0x5bf60c)return;BattleManager['_targetIndex']=_0x141228,BattleManager['_target']=BattleManager[_0x45803d(0x710)]?BattleManager['_allTargets'][BattleManager[_0x45803d(0xd50)]]||null:null,BattleManager[_0x45803d(0xda1)]&&_0x17649a[_0x45803d(0xc9f)]()[_0x45803d(0x4e9)]()!=='UNTITLED'&&_0x5bf60c['command119']([_0x17649a]);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x7e1),_0x23caad=>{const _0x46a545=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x46a545(0xc46)](_0x23caad,_0x23caad);const _0x46514d=$gameTemp['getLastPluginCommandInterpreter'](),_0x3387fb=_0x23caad['JumpToLabel'];if(!_0x46514d)return;BattleManager[_0x46a545(0xd50)]++,BattleManager[_0x46a545(0xda1)]=BattleManager[_0x46a545(0x710)][BattleManager[_0x46a545(0xd50)]]||null,BattleManager['_target']&&_0x3387fb[_0x46a545(0xc9f)]()[_0x46a545(0x4e9)]()!==_0x46a545(0x45b)&&_0x46514d[_0x46a545(0x770)]([_0x3387fb]);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Target_PrevTarget',_0x319661=>{const _0xfbf07a=_0x4c6a01;if(!SceneManager[_0xfbf07a(0x503)]())return;VisuMZ[_0xfbf07a(0xc46)](_0x319661,_0x319661);const _0x2c5276=$gameTemp[_0xfbf07a(0x582)](),_0x2773dc=_0x319661[_0xfbf07a(0x919)];if(!_0x2c5276)return;BattleManager[_0xfbf07a(0xd50)]--,BattleManager[_0xfbf07a(0xda1)]=BattleManager[_0xfbf07a(0x710)][BattleManager[_0xfbf07a(0xd50)]]||null;if(BattleManager[_0xfbf07a(0xda1)]&&_0x2773dc[_0xfbf07a(0xc9f)]()[_0xfbf07a(0x4e9)]()!==_0xfbf07a(0x45b)){if(_0xfbf07a(0x399)!=='qODul'){if(_0x18beff[_0xfbf07a(0x503)]()){const _0x4c1f62=this['battler']();if(_0x4c1f62)_0x4c1f62[_0xfbf07a(0x9bb)](_0x102b59);}}else _0x2c5276['command119']([_0x2773dc]);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xbb1),_0x13b822=>{const _0x3ed64a=_0x4c6a01;if(!SceneManager[_0x3ed64a(0x503)]())return;VisuMZ['ConvertParams'](_0x13b822,_0x13b822);const _0x362243=$gameTemp['getLastPluginCommandInterpreter'](),_0x52778c=_0x13b822['ForceRandom'],_0x2131b8=_0x13b822[_0x3ed64a(0x919)];if(!_0x362243)return;const _0x5ecb47=BattleManager[_0x3ed64a(0xd50)];for(;;){if(_0x3ed64a(0xaea)===_0x3ed64a(0xaea)){BattleManager[_0x3ed64a(0xd50)]=Math[_0x3ed64a(0xb10)](BattleManager[_0x3ed64a(0x710)][_0x3ed64a(0x991)]);if(!_0x52778c)break;if(BattleManager['_targetIndex']!==_0x5ecb47)break;if(BattleManager[_0x3ed64a(0x710)]['length']<=0x1){BattleManager['_targetIndex']=0x0;break;}}else return _0x527444[_0x3ed64a(0xc58)][_0x3ed64a(0x791)]();}BattleManager[_0x3ed64a(0xda1)]=BattleManager[_0x3ed64a(0x710)][BattleManager[_0x3ed64a(0xd50)]]||null,BattleManager['_target']&&_0x2131b8[_0x3ed64a(0xc9f)]()[_0x3ed64a(0x4e9)]()!==_0x3ed64a(0x45b)&&_0x362243[_0x3ed64a(0x770)]([_0x2131b8]);}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x476),_0x13430c=>{const _0x8adf1d=_0x4c6a01;if(!SceneManager[_0x8adf1d(0x503)]())return;if(!Imported[_0x8adf1d(0xa01)])return;if(!ConfigManager['battleVoices'])return;VisuMZ[_0x8adf1d(0xc46)](_0x13430c,_0x13430c);const _0x1e314f=VisuMZ['CreateActionSequenceTargets'](_0x13430c[_0x8adf1d(0x6d1)]);let _0x2effa5=_0x13430c[_0x8adf1d(0xcbe)]||'';for(const _0x246419 of _0x1e314f){if(_0x8adf1d(0x429)==='EufUe'){if(!_0x246419)continue;_0x246419[_0x8adf1d(0xd5f)](_0x2effa5);}else{if(!_0x2cd4e8[_0x8adf1d(0x7a2)]())return;const _0x5c8a41=this[_0x8adf1d(0x72f)]();if(!_0x5c8a41)return;_0x240959=_0x5d119a||0x0;if(_0x24efb9>0x0){if(_0x5c8a41[_0x8adf1d(0x545)]>_0x43a829)_0x5ec906+=_0x5c8a41[_0x8adf1d(0xe09)]/0x2+_0x83273;if(_0x5c8a41[_0x8adf1d(0x545)]<_0x13acf5)_0x5f786-=_0x5c8a41['width']/0x2+_0xb3a0a0;}if(_0x33a5c7)this[_0x8adf1d(0xca9)](_0x29f68d,_0x5415ec,![]);_0x5c8a41['startHomeMove'](_0x2683b4,_0x13d218,_0xf4c407,_0x30d51f),this[_0x8adf1d(0x513)]=_0x4decfb,this['_forcedHomeY']=_0x30bc89;}}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0xb40),_0x46431e=>{const _0x538b65=_0x4c6a01;if(!SceneManager[_0x538b65(0x503)]())return;if(!Imported[_0x538b65(0xa01)])return;if(!ConfigManager[_0x538b65(0x385)])return;VisuMZ[_0x538b65(0xc46)](_0x46431e,_0x46431e);const _0x3baf18=VisuMZ[_0x538b65(0xaf8)](_0x46431e[_0x538b65(0x6d1)]);let _0xade6b8=(_0x46431e[_0x538b65(0xc16)]||'')+(_0x46431e['Letter']||'');for(const _0x59a7d7 of _0x3baf18){if(!_0x59a7d7)continue;_0x59a7d7[_0x538b65(0xd5f)](_0xade6b8);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Weapon_ClearActiveWeapon',_0x2d1f1c=>{const _0x47b5c6=_0x4c6a01;if(!SceneManager[_0x47b5c6(0x503)]())return;VisuMZ[_0x47b5c6(0xc46)](_0x2d1f1c,_0x2d1f1c);const _0xbd0a0a=VisuMZ['CreateActionSequenceTargets'](_0x2d1f1c[_0x47b5c6(0x6d1)]);for(const _0x299143 of _0xbd0a0a){if(!_0x299143)continue;if(!_0x299143[_0x47b5c6(0x966)]())continue;_0x299143[_0x47b5c6(0xd70)]();}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x97a),_0x3983b1=>{const _0x425293=_0x4c6a01;if(!SceneManager[_0x425293(0x503)]())return;VisuMZ[_0x425293(0xc46)](_0x3983b1,_0x3983b1);const _0x1de623=$gameTemp['getLastPluginCommandInterpreter']();let _0x351bb8=![];const _0x21819b=_0x3983b1[_0x425293(0x919)],_0x1943ab=VisuMZ['CreateActionSequenceTargets'](_0x3983b1[_0x425293(0x6d1)]);for(const _0xed1174 of _0x1943ab){if(!_0xed1174)continue;if(!_0xed1174[_0x425293(0x966)]())continue;_0xed1174[_0x425293(0x87d)](),_0xed1174[_0x425293(0x88c)]()[_0x425293(0x991)]>0x0?_0x351bb8=!![]:_0xed1174['clearActiveWeaponSlot']();}_0x351bb8&&_0x21819b[_0x425293(0xc9f)]()[_0x425293(0x4e9)]()!==_0x425293(0x45b)&&(_0x425293(0x23f)===_0x425293(0x23f)?_0x1de623['command119']([_0x21819b]):(_0x2ba6d3[_0x425293(0x33d)]=_0x627986(_0xd09b5f['$1']),_0x2db873[_0x425293(0x955)]=_0x3dd313(_0x625245['$2'])));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x5b8),_0x453118=>{const _0x548846=_0x4c6a01;if(!SceneManager[_0x548846(0x503)]())return;VisuMZ[_0x548846(0xc46)](_0x453118,_0x453118);let _0x2568dc=_0x453118[_0x548846(0x8e2)];_0x2568dc--,_0x2568dc=Math[_0x548846(0xa5c)](_0x2568dc,0x0);const _0x5d2067=VisuMZ['CreateActionSequenceTargets'](_0x453118[_0x548846(0x6d1)]);for(const _0x3a7045 of _0x5d2067){if(!_0x3a7045)continue;if(!_0x3a7045[_0x548846(0x966)]())continue;_0x3a7045[_0x548846(0x2c5)](_0x2568dc);}}),PluginManager[_0x4c6a01(0x430)](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x742),_0x2ed82f=>{const _0x57a7b7=_0x4c6a01;if(!SceneManager[_0x57a7b7(0x503)]())return;if(!Imported[_0x57a7b7(0x880)])return;VisuMZ[_0x57a7b7(0xc46)](_0x2ed82f,_0x2ed82f);const _0xe88e7d=$gameTemp['getLastPluginCommandInterpreter'](),_0x1bfde8=_0x2ed82f[_0x57a7b7(0xd0b)];if(!_0xe88e7d)return;$gameScreen[_0x57a7b7(0xda3)](_0x2ed82f[_0x57a7b7(0x4cd)],_0x2ed82f[_0x57a7b7(0xa14)],_0x2ed82f['EasingType']);if(_0x1bfde8)_0xe88e7d[_0x57a7b7(0x2b5)](_0x57a7b7(0x400));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],_0x4c6a01(0x798),_0x487474=>{const _0x50a3a9=_0x4c6a01;if(!SceneManager[_0x50a3a9(0x503)]())return;if(!Imported[_0x50a3a9(0x880)])return;VisuMZ[_0x50a3a9(0xc46)](_0x487474,_0x487474);const _0x47deef=$gameTemp[_0x50a3a9(0x582)](),_0x37be39=_0x487474[_0x50a3a9(0xd0b)];if(!_0x47deef)return;$gameScreen[_0x50a3a9(0xda3)](0x1,_0x487474[_0x50a3a9(0xa14)],_0x487474['EasingType']);if(_0x37be39)_0x47deef[_0x50a3a9(0x2b5)](_0x50a3a9(0x400));}),PluginManager['registerCommand'](pluginData[_0x4c6a01(0x2c7)],'ActSeq_Zoom_WaitForZoom',_0x4ca806=>{const _0x2e4709=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2e4709(0x880)])return;const _0x433f80=$gameTemp[_0x2e4709(0x582)]();if(!_0x433f80)return;_0x433f80[_0x2e4709(0x2b5)](_0x2e4709(0x400));}),VisuMZ['BattleCore'][_0x4c6a01(0x812)]=Scene_Boot[_0x4c6a01(0xc58)][_0x4c6a01(0x91b)],Scene_Boot['prototype']['onDatabaseLoaded']=function(){const _0x51e26d=_0x4c6a01;this[_0x51e26d(0x647)](),this[_0x51e26d(0xb18)](),this[_0x51e26d(0x3ff)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x51e26d(0x5e5)][_0x51e26d(0x812)][_0x51e26d(0x3a4)](this),this[_0x51e26d(0x626)](),this[_0x51e26d(0x5f7)](),this[_0x51e26d(0xb0c)](),this[_0x51e26d(0x83c)]();},Scene_Boot[_0x4c6a01(0xc58)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x26626b=_0x4c6a01;if(VisuMZ[_0x26626b(0x9bd)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x26626b(0x8cb)](),this[_0x26626b(0x37d)]();},Scene_Boot['prototype'][_0x4c6a01(0x647)]=function(){const _0x23cb93=_0x4c6a01,_0x48ac83=$dataSystem['weaponTypes'][_0x23cb93(0x991)];for(let _0xa722b3=0x0;_0xa722b3<_0x48ac83;_0xa722b3++){const _0x19cbd0=$dataSystem[_0x23cb93(0x3a0)][_0xa722b3];if(_0x19cbd0)continue;$dataSystem['attackMotions'][_0xa722b3]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype'][_0x4c6a01(0xb18)]=function(){const _0x4b7158=_0x4c6a01,_0x4ef27b=VisuMZ['BattleCore'][_0x4b7158(0x32d)];_0x4ef27b['Damage'][_0x4b7158(0x4a7)]===undefined&&(_0x4ef27b[_0x4b7158(0x625)][_0x4b7158(0x4a7)]=_0x4b7158(0x37b));_0x4ef27b[_0x4b7158(0x9ad)][_0x4b7158(0x237)]===undefined&&('tLcTH'!=='tLcTH'?this[_0x4b7158(0xbf1)]()[_0x4b7158(0x274)]()&&_0x4477df[_0x4b7158(0x5e5)][_0x4b7158(0x27f)][_0x4b7158(0x3a4)](this):_0x4ef27b[_0x4b7158(0x9ad)][_0x4b7158(0x237)]=![]);if(_0x4ef27b['Enemy'][_0x4b7158(0x237)]===undefined){if(_0x4b7158(0xbd0)==='WmMcP')_0x4ef27b['Enemy'][_0x4b7158(0x237)]=!![];else{if(!_0x5b08dd[_0x4b7158(0x503)]())return;const _0x45b75c=_0x2dc13f['getLastPluginCommandInterpreter']();if(!_0x45b75c)return;_0x45b75c[_0x4b7158(0x2b5)](_0x4b7158(0x7a3));}}if(_0x4ef27b[_0x4b7158(0x9ad)][_0x4b7158(0xc6f)]===undefined){if(_0x4b7158(0x80a)===_0x4b7158(0x80a))_0x4ef27b[_0x4b7158(0x9ad)]['PrioritySortActive']=![];else return this[_0x4b7158(0x4b2)][_0x4b7158(0x62b)](_0x1f94c3=>_0x1f94c3[_0x4b7158(0xd24)]===_0x2f6b9f&&_0x1f94c3[_0x4b7158(0x4bf)]===_0x579139);}_0x4ef27b[_0x4b7158(0x9ad)]['PrioritySortActors']===undefined&&(_0x4ef27b[_0x4b7158(0x9ad)][_0x4b7158(0x719)]=!![]);},VisuMZ[_0x4c6a01(0x586)]={},Scene_Boot[_0x4c6a01(0xc58)][_0x4c6a01(0x3ff)]=function(){const _0x7b801=_0x4c6a01;for(const _0x46cbd4 of VisuMZ[_0x7b801(0x5e5)][_0x7b801(0x32d)][_0x7b801(0x625)][_0x7b801(0x668)]){if(!_0x46cbd4)continue;const _0x5c97aa=_0x46cbd4[_0x7b801(0x33f)]['toUpperCase']()['trim']();VisuMZ['DamageStyles'][_0x5c97aa]=_0x46cbd4;}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x959)]={},Scene_Boot['prototype'][_0x4c6a01(0x515)]=function(){const _0x2c7f12=_0x4c6a01,_0x171700=VisuMZ[_0x2c7f12(0x5e5)][_0x2c7f12(0x959)],_0x397ab8='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x15641f=[['Pre',_0x2c7f12(0x2ff)],[_0x2c7f12(0x302),_0x2c7f12(0x75c)]],_0x2c28b9=[[_0x2c7f12(0x88a),_0x2c7f12(0xde2)],[_0x2c7f12(0x30a),_0x2c7f12(0xe22)]],_0x3b40d9=[['',''],[_0x2c7f12(0x667),_0x2c7f12(0x687)],['AsTarget',_0x2c7f12(0xa3b)]];for(const _0x5ea8b6 of _0x2c28b9){if(_0x2c7f12(0x537)===_0x2c7f12(0x73f)){const _0x43e418=_0x1d5bcb(_0x13a58b['$1'])['split'](/[\r\n]+/)[_0x2c7f12(0xbde)]('');_0x17b441[_0x2c7f12(0x2c7)]=_0xe0674b[_0x2c7f12(0x96b)](_0x43e418);}else for(const _0x3694a7 of _0x3b40d9){for(const _0x51eebb of _0x15641f){if(_0x2c7f12(0xd4c)!==_0x2c7f12(0xc23)){const _0x497fef=_0x5ea8b6[0x0]['format'](_0x51eebb[0x0],_0x3694a7[0x0]),_0x4532a1=_0x5ea8b6[0x1][_0x2c7f12(0x511)](_0x51eebb[0x1],_0x3694a7[0x1])[_0x2c7f12(0x4e9)](),_0x4800f3=new RegExp(_0x397ab8[_0x2c7f12(0x511)](_0x4532a1),'i');_0x171700[_0x497fef]=_0x4800f3;}else this[_0x2c7f12(0x7c0)]();}}}const _0x4e8f89=[[_0x2c7f12(0xa93),_0x2c7f12(0xc8f)],[_0x2c7f12(0xba1),_0x2c7f12(0xa2b)]];for(const _0x304e3c of _0x4e8f89){for(const _0x3e52bf of _0x15641f){const _0x3705c0=_0x304e3c[0x0][_0x2c7f12(0x511)](_0x3e52bf[0x0]),_0x498a20=_0x304e3c[0x1][_0x2c7f12(0x511)](_0x3e52bf[0x1]),_0x413ac7=new RegExp(_0x397ab8[_0x2c7f12(0x511)](_0x498a20),'i');_0x171700[_0x3705c0]=_0x413ac7;}}const _0x344490=[['%1StartBattleJS',_0x2c7f12(0x3a2)],[_0x2c7f12(0x4ce),_0x2c7f12(0x498)],[_0x2c7f12(0x2a5),_0x2c7f12(0x716)],['BattleDefeatJS',_0x2c7f12(0x4e3)],[_0x2c7f12(0xc2b),_0x2c7f12(0xdda)],['EscapeFailureJS','JS\x20ESCAPE\x20FAILURE'],[_0x2c7f12(0xa5d),'JS\x20%1START\x20TURN'],['%1EndTurnJS','JS\x20%1END\x20TURN'],[_0x2c7f12(0x9e1),'JS\x20%1REGENERATE']];for(const _0x9a444a of _0x344490){for(const _0x5e80b3 of _0x15641f){if(_0x2c7f12(0x275)!=='UjmlM')_0xf89618[_0x2c7f12(0x5e5)][_0x2c7f12(0x54f)][_0x2c7f12(0x3a4)](this),this['applyGlobalCommonEventNotetags'](),this[_0x2c7f12(0x336)]();else{const _0x52c8fd=_0x9a444a[0x0][_0x2c7f12(0x511)](_0x5e80b3[0x0]),_0x271658=_0x9a444a[0x1][_0x2c7f12(0x511)](_0x5e80b3[0x1]),_0x5e49ab=new RegExp(_0x397ab8[_0x2c7f12(0x511)](_0x271658),'i');_0x171700[_0x52c8fd]=_0x5e49ab;}}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x5b9c3a=_0x4c6a01,_0xf852=$dataSkills['concat']($dataItems);for(const _0x5e9e80 of _0xf852){if(_0x5b9c3a(0x9c0)!==_0x5b9c3a(0x9c0))return _0x14ddd0[_0x5b9c3a(0x5e5)]['Game_Action_isForAliveFriend'][_0x5b9c3a(0x3a4)](this);else{if(!_0x5e9e80)continue;VisuMZ[_0x5b9c3a(0x5e5)][_0x5b9c3a(0xa4a)](_0x5e9e80);}}},Scene_Boot[_0x4c6a01(0xc58)][_0x4c6a01(0x8cb)]=function(){const _0x50d565=_0x4c6a01,_0x50a3c7=$dataActors[_0x50d565(0x4db)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x444bbd of _0x50a3c7){if(!_0x444bbd)continue;VisuMZ[_0x50d565(0x5e5)]['Parse_Notetags_TraitObjects'](_0x444bbd);}},Scene_Boot['prototype'][_0x4c6a01(0x5f7)]=function(){const _0x498cdc=_0x4c6a01,_0x5aa1b8=VisuMZ[_0x498cdc(0x5e5)][_0x498cdc(0x32d)]['Mechanics'][_0x498cdc(0xbc8)],_0x4a7ee2=[];for(const _0x7e8b5b of _0x5aa1b8){if(_0x498cdc(0x856)!==_0x498cdc(0x83d)){const _0x4899a6=$dataTroops[_0x7e8b5b];if(_0x4899a6)_0x4a7ee2[_0x498cdc(0x543)](JsonEx[_0x498cdc(0x349)](_0x4899a6));}else{const _0x9a823f=this[_0x498cdc(0x3b5)][_0x498cdc(0x91d)](),_0xf93089=_0x9a823f[0x0];return _0xf93089[_0x498cdc(0xada)]=_0xf93089['_actions']||[],_0xf93089[_0x498cdc(0xada)][0x0]=_0x9a823f[0x1],_0xf93089;}}for(const _0x1d3867 of $dataTroops){if(_0x498cdc(0x774)!==_0x498cdc(0x761)){if(!_0x1d3867)continue;for(const _0x3f8cce of _0x4a7ee2){if(_0x3f8cce['id']===_0x1d3867['id'])continue;_0x1d3867[_0x498cdc(0x587)]=_0x1d3867[_0x498cdc(0x587)]['concat'](_0x3f8cce['pages']);}}else return _0x5eb5e0[_0x498cdc(0x72f)]()[_0x498cdc(0xcaa)]-_0x5e68b1[_0x498cdc(0x72f)]()[_0x498cdc(0xcaa)];}},Scene_Boot['prototype'][_0x4c6a01(0xb0c)]=function(){const _0x73fb81=_0x4c6a01,_0x9c0569=VisuMZ['BattleCore']['Settings'][_0x73fb81(0x4bd)];if(_0x9c0569[_0x73fb81(0xdd3)]>0x0&&$dataCommonEvents[_0x9c0569[_0x73fb81(0xdd3)]]){if('HXKEY'==='HXKEY'){const _0x3e6350=$dataCommonEvents[_0x9c0569['BattleStartEvent']],_0x47060f=_0x3e6350['list']['length']-0x2,_0x27e2a9=_0x3e6350[_0x73fb81(0x85a)][_0x47060f];if(_0x27e2a9&&_0x27e2a9[_0x73fb81(0xc08)]!==0xe6){if(_0x73fb81(0x501)!=='bEsEN'){const _0x10fbdd={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x470015=_0x3e6350[_0x73fb81(0x85a)][_0x73fb81(0xd59)]();_0x3e6350[_0x73fb81(0x85a)]['unshift'](_0x10fbdd),_0x3e6350[_0x73fb81(0x85a)][_0x73fb81(0x720)](_0x470015);}else this['_battleLayoutStyle']=_0x73fb81(0xc9b);}}else{const _0x56b9a5=_0x426808[_0x73fb81(0x4c1)]['_statusWindow'];_0x56b9a5[_0x73fb81(0x68b)]['y']=0x0;}}},Scene_Boot[_0x4c6a01(0xc58)][_0x4c6a01(0x83c)]=function(){const _0x47dec7=_0x4c6a01;VisuMZ[_0x47dec7(0x5e5)][_0x47dec7(0xa7c)](),VisuMZ[_0x47dec7(0x5e5)][_0x47dec7(0x316)]($dataSkills),VisuMZ[_0x47dec7(0x5e5)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xa7c)]=function(){const _0x43bebc=_0x4c6a01;VisuMZ[_0x43bebc(0x5e5)][_0x43bebc(0xac4)]={};for(const _0x38311d of $dataCommonEvents){if(_0x43bebc(0xa30)!==_0x43bebc(0x8a3)){if(!_0x38311d)continue;if(_0x38311d[_0x43bebc(0x2c7)][_0x43bebc(0x996)](/\[(.*)\]/i)){if('Vhdmw'==='Vhdmw'){let _0x1a725c=String(RegExp['$1'])[_0x43bebc(0x6f6)](/,/g,'')[_0x43bebc(0xc9f)]()[_0x43bebc(0x4e9)]();VisuMZ[_0x43bebc(0x5e5)][_0x43bebc(0xac4)][_0x1a725c]=_0x38311d['id'];}else this[_0x43bebc(0x93f)](_0x154931);}}else{if(!_0x212a9d['BattleCore']['JS'][_0x47e3b8][_0x43bebc(0x3a4)](this,this[_0x43bebc(0x2fc)],_0x3dfc34))return![];}}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x316)]=function(_0x14fcf1){const _0xd22992=_0x4c6a01;for(const _0x43d467 of _0x14fcf1){if(_0xd22992(0x51c)!==_0xd22992(0x51c))_0x3234ce['BattleCore'][_0xd22992(0xe04)][_0xd22992(0x3a4)](this,_0x12ae03,_0x246023),!this['isDrain']()&&_0x379af5&&_0xf237b8[_0xd22992(0xbbd)]()[_0xd22992(0x34c)]>0x0&&this[_0xd22992(0xc8c)]('MP',_0x11e3cd,_0x44551b[_0xd22992(0xbbd)]()[_0xd22992(0x34c)]);else{if(!_0x43d467)continue;VisuMZ['BattleCore'][_0xd22992(0xdad)](_0x43d467);}}},VisuMZ['BattleCore'][_0x4c6a01(0xdad)]=function(_0x5735a3){const _0x4a3576=_0x4c6a01;if(!_0x5735a3)return;if(!_0x5735a3['effects'])return;VisuMZ[_0x4a3576(0x5e5)]['_commonEventKey']=VisuMZ[_0x4a3576(0x5e5)][_0x4a3576(0xac4)]||{};const _0x3ebea1=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x49f342=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x4305a3=[];const _0x46cb31=_0x5735a3[_0x4a3576(0x407)]['match'](_0x3ebea1);if(_0x46cb31){if(_0x4a3576(0xaf9)==='yYsKy'){for(const _0x2eb0b4 of _0x46cb31){_0x2eb0b4[_0x4a3576(0x996)](_0x3ebea1);const _0x10d7fa=String(RegExp['$1'])[_0x4a3576(0xcaf)](',')['map'](_0x8a3b37=>String(_0x8a3b37)[_0x4a3576(0xc9f)]()[_0x4a3576(0x4e9)]());_0x4305a3=_0x4305a3['concat'](_0x10d7fa);}!_0x5735a3['note'][_0x4a3576(0x996)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5735a3[_0x4a3576(0x407)]+=_0x4a3576(0xaeb));;}else this[_0x4a3576(0x74c)][_0x4a3576(0x543)](_0x4a3576(0x7a6),_0x24b0f3[_0x4a3576(0x4d0)][_0x4a3576(0x511)](_0x20bf41[_0x4a3576(0x2c7)]())),this[_0x4a3576(0x74c)][_0x4a3576(0x543)](_0x4a3576(0xcef));}if(_0x5735a3[_0x4a3576(0x407)][_0x4a3576(0x996)](_0x49f342)){if(_0x4a3576(0x2ee)!==_0x4a3576(0x27b)){const _0x589d80=String(RegExp['$1'])[_0x4a3576(0xcaf)](/[\r\n]+/)[_0x4a3576(0x39f)](_0x5967e2=>String(_0x5967e2)[_0x4a3576(0xc9f)]()[_0x4a3576(0x4e9)]());_0x4305a3=_0x4305a3[_0x4a3576(0x4db)](_0x589d80);!_0x5735a3[_0x4a3576(0x407)][_0x4a3576(0x996)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5735a3[_0x4a3576(0x407)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}else _0x1392fb[_0x4a3576(0x543)](_0x4a3576(0x418),_0x4378fa,_0x32f590);}for(const _0x28543a of _0x4305a3){if(_0x4a3576(0x85c)!==_0x4a3576(0x85c))return!![];else{if(VisuMZ[_0x4a3576(0x5e5)]['_commonEventKey'][_0x28543a]){const _0x1d20b9=VisuMZ['BattleCore'][_0x4a3576(0xac4)][_0x28543a],_0x19a48f={'code':0x2c,'dataId':_0x1d20b9,'value1':0x1,'value2':0x0};_0x5735a3[_0x4a3576(0xcf7)][_0x4a3576(0x543)](_0x19a48f);}}}},Scene_Boot[_0x4c6a01(0xc58)][_0x4c6a01(0x37d)]=function(){const _0x3f9de3=_0x4c6a01,_0x443b75=$dataSkills['concat']($dataItems);for(const _0x339dd9 of _0x443b75){if(_0x3f9de3(0x26e)==='JYEvI'){if(!_0x339dd9)continue;VisuMZ[_0x3f9de3(0x5e5)][_0x3f9de3(0xd9d)](_0x339dd9);}else{if(!_0x19f60f['value'](_0x409bdd))return!![];}}},VisuMZ['BattleCore'][_0x4c6a01(0xb27)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x4c6a01(0xb27)]=function(_0x2a9d6b){const _0x34d403=_0x4c6a01;VisuMZ[_0x34d403(0x5e5)][_0x34d403(0xb27)]&&(_0x34d403(0x5ba)!==_0x34d403(0x5ba)?_0x55c331[_0x34d403(0xd5d)]([0x0,0x0,0x0,0x0]):VisuMZ[_0x34d403(0x5e5)][_0x34d403(0xb27)][_0x34d403(0x3a4)](this,_0x2a9d6b)),VisuMZ[_0x34d403(0x5e5)][_0x34d403(0xc82)](_0x2a9d6b);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xda2)]=VisuMZ['ParseClassNotetags'],VisuMZ[_0x4c6a01(0xda2)]=function(_0x262420){const _0x2240df=_0x4c6a01;VisuMZ[_0x2240df(0x5e5)][_0x2240df(0xda2)]&&VisuMZ[_0x2240df(0x5e5)][_0x2240df(0xda2)]['call'](this,_0x262420),VisuMZ[_0x2240df(0x5e5)]['Parse_Notetags_TraitObjects'](_0x262420);},VisuMZ['BattleCore'][_0x4c6a01(0x30f)]=VisuMZ['ParseSkillNotetags'],VisuMZ['ParseSkillNotetags']=function(_0x4ed124){const _0x1fae5b=_0x4c6a01;VisuMZ[_0x1fae5b(0x5e5)]['ParseSkillNotetags']&&VisuMZ[_0x1fae5b(0x5e5)][_0x1fae5b(0x30f)][_0x1fae5b(0x3a4)](this,_0x4ed124),VisuMZ[_0x1fae5b(0x5e5)][_0x1fae5b(0xa4a)](_0x4ed124),VisuMZ['BattleCore']['Parse_Notetags_Targets'](_0x4ed124);},VisuMZ['BattleCore'][_0x4c6a01(0x265)]=VisuMZ[_0x4c6a01(0x265)],VisuMZ[_0x4c6a01(0x265)]=function(_0x40a15e){const _0x5a5a3c=_0x4c6a01;VisuMZ[_0x5a5a3c(0x5e5)][_0x5a5a3c(0x265)]&&VisuMZ[_0x5a5a3c(0x5e5)][_0x5a5a3c(0x265)]['call'](this,_0x40a15e),VisuMZ[_0x5a5a3c(0x5e5)]['Parse_Notetags_Action'](_0x40a15e),VisuMZ[_0x5a5a3c(0x5e5)][_0x5a5a3c(0xd9d)](_0x40a15e);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xccf)]=VisuMZ[_0x4c6a01(0xccf)],VisuMZ[_0x4c6a01(0xccf)]=function(_0x3280c0){const _0x585b43=_0x4c6a01;if(VisuMZ[_0x585b43(0x5e5)][_0x585b43(0xccf)]){if(_0x585b43(0xd3f)===_0x585b43(0xd3f))VisuMZ[_0x585b43(0x5e5)][_0x585b43(0xccf)]['call'](this,_0x3280c0);else return _0x4c5901[_0x585b43(0x5e5)][_0x585b43(0x32d)][_0x585b43(0x84c)][_0x585b43(0x395)];}VisuMZ['BattleCore'][_0x585b43(0xc82)](_0x3280c0);},VisuMZ[_0x4c6a01(0x5e5)]['ParseArmorNotetags']=VisuMZ[_0x4c6a01(0xab3)],VisuMZ[_0x4c6a01(0xab3)]=function(_0x424743){const _0x120d5f=_0x4c6a01;VisuMZ[_0x120d5f(0x5e5)]['ParseArmorNotetags']&&VisuMZ['BattleCore']['ParseArmorNotetags'][_0x120d5f(0x3a4)](this,_0x424743),VisuMZ[_0x120d5f(0x5e5)][_0x120d5f(0xc82)](_0x424743);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xb88)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x4c6a01(0xb88)]=function(_0x13c5b4){const _0x38baeb=_0x4c6a01;VisuMZ[_0x38baeb(0x5e5)][_0x38baeb(0xb88)]&&(_0x38baeb(0x936)!==_0x38baeb(0x7fb)?VisuMZ[_0x38baeb(0x5e5)][_0x38baeb(0xb88)][_0x38baeb(0x3a4)](this,_0x13c5b4):(_0x186b20[_0x38baeb(0x5e5)][_0x38baeb(0x30f)]&&_0x1be98a[_0x38baeb(0x5e5)][_0x38baeb(0x30f)][_0x38baeb(0x3a4)](this,_0x58c738),_0x5990c9[_0x38baeb(0x5e5)]['Parse_Notetags_Action'](_0x458932),_0x43e4c6[_0x38baeb(0x5e5)][_0x38baeb(0xd9d)](_0x1b4ca4))),VisuMZ[_0x38baeb(0x5e5)][_0x38baeb(0xc82)](_0x13c5b4);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xd6a)]=VisuMZ[_0x4c6a01(0xd6a)],VisuMZ[_0x4c6a01(0xd6a)]=function(_0x485620){const _0x567391=_0x4c6a01;VisuMZ['BattleCore'][_0x567391(0xd6a)]&&VisuMZ[_0x567391(0x5e5)][_0x567391(0xd6a)]['call'](this,_0x485620),VisuMZ['BattleCore'][_0x567391(0xc82)](_0x485620);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xa4a)]=function(_0x2055e3){const _0xa5c28e=_0x4c6a01,_0x28eb50=[_0xa5c28e(0xa1a),'PostApplyJS',_0xa5c28e(0xd88),'PostDamageJS',_0xa5c28e(0x912),'PostStartActionJS','PreEndActionJS','PostEndActionJS'];for(const _0x16da54 of _0x28eb50){VisuMZ['BattleCore'][_0xa5c28e(0x7ca)](_0x2055e3,_0x16da54);}const _0x323edf=_0x2055e3[_0xa5c28e(0x407)];_0x323edf[_0xa5c28e(0x996)](/<ALWAYS CRITICAL/i)&&(_0x2055e3[_0xa5c28e(0x6fc)][_0xa5c28e(0x572)]=!![]),_0x323edf[_0xa5c28e(0x996)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0xa5c28e(0x28c)!==_0xa5c28e(0xcf3)?_0x2055e3[_0xa5c28e(0xc0c)]=Math[_0xa5c28e(0xa5c)](0x1,Number(RegExp['$1'])):(this[_0xa5c28e(0x4d4)]+=_0x263f5e[_0xa5c28e(0x4c0)](),this[_0xa5c28e(0xa05)]['y']+=_0x3c947b[_0xa5c28e(0x82b)]())),_0x323edf[_0xa5c28e(0x996)](/<TARGET:[ ](.*)>/i)&&(_0xa5c28e(0xbd5)!==_0xa5c28e(0xbd5)?this['_mainSprite'][_0xa5c28e(0x593)][_0xa5c28e(0x80c)]!==this['_battler']['battlerSmoothImage']()&&(this['_mainSprite'][_0xa5c28e(0x593)][_0xa5c28e(0x80c)]=this['_battler'][_0xa5c28e(0x5ef)]()):_0x2055e3[_0xa5c28e(0x262)]=String(RegExp['$1'])[_0xa5c28e(0xc9f)]()['trim']());},VisuMZ['BattleCore']['Parse_Notetags_TraitObjects']=function(_0x4eac58){const _0x258701=_0x4c6a01,_0x4207db=[_0x258701(0xc17),'PostApplyAsUserJS',_0x258701(0xcdd),_0x258701(0x7a9),_0x258701(0x9d4),_0x258701(0xb96),_0x258701(0xb28),_0x258701(0x428),_0x258701(0x912),'PostStartActionJS','PreEndActionJS',_0x258701(0x85b),_0x258701(0xcca),_0x258701(0xc19),_0x258701(0x8c3),_0x258701(0x94f),_0x258701(0x2a5),_0x258701(0x394),_0x258701(0xc2b),_0x258701(0x2d1),_0x258701(0x20e),_0x258701(0x6e2),'PreEndTurnJS','PostEndTurnJS',_0x258701(0xcbb),_0x258701(0x925)];for(const _0x1d86d6 of _0x4207db){'DyhXM'!=='FPUFA'?VisuMZ[_0x258701(0x5e5)][_0x258701(0x7ca)](_0x4eac58,_0x1d86d6):_0xf03f92['addState'](_0x1caa42);}},VisuMZ['BattleCore'][_0x4c6a01(0xd9d)]=function(_0x345f9b){const _0x400340=_0x4c6a01,_0x5d8fbd=_0x345f9b[_0x400340(0x407)];if(_0x5d8fbd[_0x400340(0x996)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x3fb7bd=String(RegExp['$1']),_0x4fd18f=VisuMZ[_0x400340(0x5e5)][_0x400340(0xcad)](_0x345f9b,_0x400340(0x6d1));VisuMZ['BattleCore'][_0x400340(0xcf0)](_0x3fb7bd,_0x4fd18f);}if(_0x5d8fbd[_0x400340(0x996)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x400340(0xdc9)===_0x400340(0x6cd)){const _0x35d6af=_0x1719b7[_0x400340(0x93e)](_0x25ccc5);return _0x35d6af>=0x0?[_0x30013f[_0x35d6af+0x1]||_0x5a099b]:[_0x4d2076];}else{const _0x4fe037=String(RegExp['$1']),_0x4718a1=VisuMZ[_0x400340(0x5e5)][_0x400340(0xcad)](_0x345f9b,_0x400340(0xc57));VisuMZ[_0x400340(0x5e5)][_0x400340(0x40e)](_0x4fe037,_0x4718a1);}}},VisuMZ[_0x4c6a01(0x5e5)]['JS']={},VisuMZ[_0x4c6a01(0x5e5)]['createJS']=function(_0x38f903,_0x1c2c2f){const _0x9846df=_0x4c6a01,_0x119ca2=_0x38f903[_0x9846df(0x407)];if(_0x119ca2['match'](VisuMZ[_0x9846df(0x5e5)][_0x9846df(0x959)][_0x1c2c2f])){const _0x251dd2=RegExp['$1'],_0x210449=_0x9846df(0x55b)[_0x9846df(0x511)](_0x251dd2),_0x26be27=VisuMZ[_0x9846df(0x5e5)]['createKeyJS'](_0x38f903,_0x1c2c2f);VisuMZ[_0x9846df(0x5e5)]['JS'][_0x26be27]=new Function(_0x210449);}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xcad)]=function(_0x35d815,_0x5e95de){const _0x65df9=_0x4c6a01;if(VisuMZ['createKeyJS'])return VisuMZ[_0x65df9(0xcad)](_0x35d815,_0x5e95de);let _0x594ec3='';if($dataActors[_0x65df9(0x864)](_0x35d815))_0x594ec3=_0x65df9(0xdcb)[_0x65df9(0x511)](_0x35d815['id'],_0x5e95de);if($dataClasses[_0x65df9(0x864)](_0x35d815))_0x594ec3=_0x65df9(0x23d)['format'](_0x35d815['id'],_0x5e95de);if($dataSkills['includes'](_0x35d815))_0x594ec3=_0x65df9(0xd56)[_0x65df9(0x511)](_0x35d815['id'],_0x5e95de);if($dataItems['includes'](_0x35d815))_0x594ec3=_0x65df9(0x466)[_0x65df9(0x511)](_0x35d815['id'],_0x5e95de);if($dataWeapons[_0x65df9(0x864)](_0x35d815))_0x594ec3=_0x65df9(0x401)['format'](_0x35d815['id'],_0x5e95de);if($dataArmors['includes'](_0x35d815))_0x594ec3=_0x65df9(0x869)[_0x65df9(0x511)](_0x35d815['id'],_0x5e95de);if($dataEnemies[_0x65df9(0x864)](_0x35d815))_0x594ec3=_0x65df9(0xab2)[_0x65df9(0x511)](_0x35d815['id'],_0x5e95de);if($dataStates[_0x65df9(0x864)](_0x35d815))_0x594ec3=_0x65df9(0xa7d)['format'](_0x35d815['id'],_0x5e95de);return _0x594ec3;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xcf0)]=function(_0x47b832,_0xacfbf7){const _0xa52210=_0x4c6a01,_0x57a226='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0xa52210(0x511)](_0x47b832);VisuMZ['BattleCore']['JS'][_0xacfbf7]=new Function(_0x57a226);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x40e)]=function(_0x29a48f,_0x46d968){const _0x25bb8f=_0x4c6a01,_0x16d852=_0x25bb8f(0xdaf)[_0x25bb8f(0x511)](_0x29a48f);VisuMZ['BattleCore']['JS'][_0x46d968]=new Function(_0x16d852);},TextManager[_0x4c6a01(0x654)]=VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x32d)][_0x4c6a01(0x921)][_0x4c6a01(0x3c5)],TextManager['autoBattleStart']=VisuMZ['BattleCore'][_0x4c6a01(0x32d)][_0x4c6a01(0x4f8)]['StartName'],TextManager[_0x4c6a01(0x619)]=VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x32d)]['AutoBattle'][_0x4c6a01(0x980)],TextManager[_0x4c6a01(0xc47)]=VisuMZ['BattleCore'][_0x4c6a01(0x32d)][_0x4c6a01(0x64f)][_0x4c6a01(0x33f)],ColorManager[_0x4c6a01(0x46b)]=function(_0x50f813){const _0x44a674=_0x4c6a01;return _0x50f813=String(_0x50f813),_0x50f813['match'](/#(.*)/i)?'#%1'[_0x44a674(0x511)](String(RegExp['$1'])):this[_0x44a674(0xbe5)](Number(_0x50f813));},DataManager[_0x4c6a01(0x465)]=function(_0xb886d9){const _0x14a61a=_0x4c6a01;if(_0xb886d9[_0x14a61a(0x407)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x37b47f=String(RegExp['$1'])[_0x14a61a(0xc9f)]()['trim']();if(_0x37b47f===_0x14a61a(0x8f5))return'MANUAL';if(VisuMZ[_0x14a61a(0x586)][_0x37b47f])return _0x37b47f;}const _0x4f9fab=VisuMZ[_0x14a61a(0x5e5)][_0x14a61a(0x32d)][_0x14a61a(0x625)][_0x14a61a(0x21e)]['toUpperCase']()['trim']();if(VisuMZ[_0x14a61a(0x586)][_0x4f9fab])return _0x4f9fab;return _0x14a61a(0x8f5);},DataManager['getStypeIdWithName']=function(_0x326821){const _0x2a50d4=_0x4c6a01;_0x326821=_0x326821[_0x2a50d4(0xc9f)]()[_0x2a50d4(0x4e9)](),this[_0x2a50d4(0x99a)]=this['_stypeIDs']||{};if(this['_stypeIDs'][_0x326821])return this['_stypeIDs'][_0x326821];for(let _0x27f053=0x1;_0x27f053<0x64;_0x27f053++){if(!$dataSystem[_0x2a50d4(0x7f0)][_0x27f053])continue;let _0x518762=$dataSystem['skillTypes'][_0x27f053]['toUpperCase']()['trim']();_0x518762=_0x518762['replace'](/\x1I\[(\d+)\]/gi,''),_0x518762=_0x518762[_0x2a50d4(0x6f6)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x518762]=_0x27f053;}return this['_stypeIDs'][_0x326821]||0x0;},DataManager[_0x4c6a01(0x60e)]=function(_0x38ea5c){const _0x3c4d81=_0x4c6a01;_0x38ea5c=_0x38ea5c[_0x3c4d81(0xc9f)]()[_0x3c4d81(0x4e9)](),this[_0x3c4d81(0xc71)]=this[_0x3c4d81(0xc71)]||{};if(this['_skillIDs'][_0x38ea5c])return this[_0x3c4d81(0xc71)][_0x38ea5c];for(const _0xdc3c5f of $dataSkills){if(_0x3c4d81(0x2a6)!==_0x3c4d81(0x2a6))_0x28263d[_0x3c4d81(0x379)]=![];else{if(!_0xdc3c5f)continue;this['_skillIDs'][_0xdc3c5f[_0x3c4d81(0x2c7)][_0x3c4d81(0xc9f)]()[_0x3c4d81(0x4e9)]()]=_0xdc3c5f['id'];}}return this[_0x3c4d81(0xc71)][_0x38ea5c]||0x0;},DataManager[_0x4c6a01(0x897)]=function(_0x408bf3){const _0x4edfe1=_0x4c6a01;_0x408bf3=_0x408bf3[_0x4edfe1(0xc9f)]()[_0x4edfe1(0x4e9)](),this[_0x4edfe1(0x36a)]=this['_enemyIDs']||{};if(this[_0x4edfe1(0x36a)][_0x408bf3])return this[_0x4edfe1(0x36a)][_0x408bf3];for(const _0xdd0fbe of $dataEnemies){if(!_0xdd0fbe)continue;this[_0x4edfe1(0x36a)][_0xdd0fbe['name'][_0x4edfe1(0xc9f)]()['trim']()]=_0xdd0fbe['id'];}return this[_0x4edfe1(0x36a)][_0x408bf3]||0x0;},DataManager[_0x4c6a01(0x6cc)]=function(_0x59e809){const _0x4086d6=_0x4c6a01;_0x59e809=_0x59e809[_0x4086d6(0xc9f)]()[_0x4086d6(0x4e9)](),this[_0x4086d6(0x560)]=this['_wtypeIDs']||{};if(this[_0x4086d6(0x560)][_0x59e809])return this['_wtypeIDs'][_0x59e809];for(let _0x277762=0x1;_0x277762<0x64;_0x277762++){if(!$dataSystem[_0x4086d6(0x83b)][_0x277762])continue;let _0x2047a5=$dataSystem['weaponTypes'][_0x277762][_0x4086d6(0xc9f)]()[_0x4086d6(0x4e9)]();_0x2047a5=_0x2047a5[_0x4086d6(0x6f6)](/\x1I\[(\d+)\]/gi,''),_0x2047a5=_0x2047a5[_0x4086d6(0x6f6)](/\\I\[(\d+)\]/gi,''),this[_0x4086d6(0x560)][_0x2047a5]=_0x277762;}return this[_0x4086d6(0x560)][_0x4086d6(0x35d)]=0x0,this[_0x4086d6(0x560)][_0x59e809]||0x0;},DataManager[_0x4c6a01(0x56b)]=function(_0x129e79){const _0x5c107b=_0x4c6a01,_0x4d7b34='\x5cI[%1]%2';let _0x306783=_0x129e79[_0x5c107b(0x5be)],_0x1aae81=_0x129e79[_0x5c107b(0x2c7)];const _0x41e4ad=_0x129e79['note'];if(_0x41e4ad[_0x5c107b(0x996)](/<DISPLAY ICON: (\d+)>/i)){if(_0x5c107b(0x66f)===_0x5c107b(0xab1)){if(!_0x4738ba[_0x5c107b(0x5e5)][_0x5c107b(0x32d)][_0x5c107b(0x84c)]['ShowCurrentState'])return;_0x51a527['BattleCore'][_0x5c107b(0xe11)][_0x5c107b(0x3a4)](this,_0x365cd2);}else _0x306783=Number(RegExp['$1']);}return _0x41e4ad['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x5c107b(0xb48)===_0x5c107b(0xb48)?_0x1aae81=String(RegExp['$1']):_0x1ccf80[_0x5c107b(0x5e5)]['ParseClassNotetags']['call'](this,_0x192bc8)),_0x4d7b34[_0x5c107b(0x511)](_0x306783,_0x1aae81);},DataManager[_0x4c6a01(0x5bc)]=function(_0x475bec){const _0x4e4f83=_0x4c6a01;return _0x475bec[_0x4e4f83(0x407)][_0x4e4f83(0x996)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x475bec[_0x4e4f83(0x2c7)];},DataManager[_0x4c6a01(0x247)]=function(_0x5d8598){const _0x284532=_0x4c6a01;if(_0x5d8598[_0x284532(0x407)][_0x284532(0x996)](/<COMMAND ICON: (\d+)>/i))return Number(RegExp['$1']);else{if(_0x284532(0x2b1)===_0x284532(0x2b1))return _0x5d8598['iconIndex'];else{const _0x40b078=this[_0x284532(0xd68)],_0x193e78=(_0x40b078/this[_0x284532(0x769)])[_0x284532(0x381)](0.8,0x1),_0x3f988a=_0x34f8d5[_0x284532(0x6c1)]??0x30,_0x13a66c=_0x193e78*_0x3f988a;_0x3fca0f[_0x284532(0x8ae)](_0x13a66c,_0x193e78);}}},DataManager['swapEnemyIDs']=function(_0x34407e){const _0x9e5a8=_0x4c6a01,_0x4f7a85=$dataEnemies[_0x34407e];if(_0x4f7a85){if(_0x9e5a8(0x305)!=='XJXab'){if(_0x4f7a85['note'][_0x9e5a8(0x996)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x5ae385=String(RegExp['$1'])[_0x9e5a8(0xcaf)](/[\r\n]+/)[_0x9e5a8(0xbde)](''),_0x62f217=this['processRandomizedData'](_0x5ae385);_0x34407e=this[_0x9e5a8(0x897)](_0x62f217)||_0x34407e,_0x34407e=DataManager[_0x9e5a8(0x3ca)](_0x34407e);}}else{if(this[_0x9e5a8(0x7a1)]<=0x0)return;if(!this[_0x9e5a8(0xc1d)])return;const _0x155442=this['_skewDuration'],_0x4e1c83=this[_0x9e5a8(0x636)],_0x536755=this[_0x9e5a8(0x600)],_0x46aecf=this['_distortionSprite'];_0x469fe4['VisuMZ_0_CoreEngine']?(_0x46aecf[_0x9e5a8(0x6c9)]['x']=this[_0x9e5a8(0xa71)](_0x46aecf[_0x9e5a8(0x6c9)]['x'],this['_targetSkewX'],_0x155442,_0x4e1c83,_0x536755),_0x46aecf[_0x9e5a8(0x6c9)]['y']=this[_0x9e5a8(0xa71)](_0x46aecf[_0x9e5a8(0x6c9)]['y'],this[_0x9e5a8(0xa0a)],_0x155442,_0x4e1c83,_0x536755)):(_0x46aecf['skew']['x']=(_0x46aecf[_0x9e5a8(0x6c9)]['x']*(_0x155442-0x1)+this['_targetSkewX'])/_0x155442,_0x46aecf[_0x9e5a8(0x6c9)]['y']=(_0x46aecf['skew']['y']*(_0x155442-0x1)+this['_targetSkewY'])/_0x155442);this['_skewDuration']--;if(this['_skewDuration']<=0x0)this[_0x9e5a8(0xde7)]();}}return _0x34407e;},DataManager['processRandomizedData']=function(_0x266317){const _0x51d290=_0x4c6a01;let _0xdc3f9b=0x0;const _0x52efb9={};for(const _0xb3f706 of _0x266317){if(_0xb3f706['match'](/(.*):[ ](\d+)/i)){const _0x5db40a=String(RegExp['$1'])[_0x51d290(0x4e9)](),_0x41c369=Number(RegExp['$2']);_0x52efb9[_0x5db40a]=_0x41c369,_0xdc3f9b+=_0x41c369;}else{if(_0xb3f706[_0x51d290(0x996)](/(.*):[ ](\d+\.?\d+)/i)){if(_0x51d290(0x820)==='QYSXT')_0x276e5b+=_0x5185f9;else{const _0x3162fc=String(RegExp['$1'])[_0x51d290(0x4e9)](),_0x403eaf=Number(RegExp['$2']);_0x52efb9[_0x3162fc]=_0x403eaf,_0xdc3f9b+=_0x403eaf;}}else _0xb3f706!==''&&(_0x52efb9[_0xb3f706]=0x1,_0xdc3f9b++);}}if(_0xdc3f9b<=0x0)return'';let _0x32596e=Math[_0x51d290(0x8f7)]()*_0xdc3f9b;for(const _0x4a255b in _0x52efb9){if('zEFYc'===_0x51d290(0x58c))_0x50b0b6?this[_0x51d290(0xb68)](_0x420861[_0x51d290(0x85a)],0x0):this[_0x51d290(0xce4)]();else{_0x32596e-=_0x52efb9[_0x4a255b];if(_0x32596e<=0x0)return _0x4a255b;}}return'';},DataManager[_0x4c6a01(0xa2f)]=function(_0x52e751){const _0x240897=_0x4c6a01;if(!_0x52e751)return![];if(!VisuMZ[_0x240897(0x5e5)][_0x240897(0x32d)]['ActionSequence'][_0x240897(0xabd)])return![];if(_0x52e751[_0x240897(0x407)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x52e751[_0x240897(0x407)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x4621e1 of _0x52e751[_0x240897(0xcf7)]){if(_0x240897(0x43c)===_0x240897(0x43c)){if(!_0x4621e1)continue;if(_0x4621e1[_0x240897(0xc08)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}else _0x39a4f5[_0x240897(0x3c4)]();}return![];},DataManager[_0x4c6a01(0x32f)]=function(_0x453580){const _0x3df7d8=_0x4c6a01,_0x5ec3cd=$dataTroops[_0x453580];if(!_0x5ec3cd)return'';let _0x1446da='';_0x1446da+=_0x5ec3cd[_0x3df7d8(0x2c7)];for(const _0x5be2c1 of _0x5ec3cd['pages']){for(const _0x249214 of _0x5be2c1[_0x3df7d8(0x85a)]){if(_0x3df7d8(0x356)!==_0x3df7d8(0x356))_0x2bbb0a['prototype'][_0x3df7d8(0x253)][_0x3df7d8(0x3a4)](this);else{if([0x6c,0x198]['includes'](_0x249214[_0x3df7d8(0xc08)])){if(_0x3df7d8(0xb4a)===_0x3df7d8(0xb4a))_0x1446da+='\x0a',_0x1446da+=_0x249214[_0x3df7d8(0x59d)][0x0];else return _0x2293f4[_0x3df7d8(0x4c1)]['battleLayoutStyle']()===_0x3df7d8(0x2ab)?_0x122066[_0x3df7d8(0x5e5)]['Settings'][_0x3df7d8(0x376)][_0x3df7d8(0x5c5)]:_0x32224a[_0x3df7d8(0x5e5)][_0x3df7d8(0x32d)][_0x3df7d8(0x376)][_0x3df7d8(0x9ca)];}}}}return _0x1446da;},ConfigManager[_0x4c6a01(0x813)]=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x4c6a01(0xa1b)]=ConfigManager[_0x4c6a01(0xa1b)]??![],ConfigManager[_0x4c6a01(0xc47)]=ConfigManager[_0x4c6a01(0xc47)]??!![],VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x9da)]=ConfigManager[_0x4c6a01(0x74b)],ConfigManager[_0x4c6a01(0x74b)]=function(){const _0x370e13=_0x4c6a01,_0x9d8a04=VisuMZ[_0x370e13(0x5e5)]['ConfigManager_makeData'][_0x370e13(0x3a4)](this);return _0x9d8a04[_0x370e13(0x813)]=this[_0x370e13(0x813)],_0x9d8a04['autoBattleUseSkills']=this['autoBattleUseSkills'],_0x9d8a04[_0x370e13(0xc47)]=this[_0x370e13(0xc47)],_0x9d8a04;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x2a8)]=ConfigManager['applyData'],ConfigManager[_0x4c6a01(0xb52)]=function(_0x60f22e){const _0x342792=_0x4c6a01;VisuMZ['BattleCore'][_0x342792(0x2a8)][_0x342792(0x3a4)](this,_0x60f22e);if(_0x342792(0x813)in _0x60f22e){if(_0x342792(0xc7d)===_0x342792(0xc7d))this[_0x342792(0x813)]=_0x60f22e[_0x342792(0x813)];else{const _0x31e6d2=this[_0x342792(0xbe7)]()[_0x342792(0x490)]();if(_0x31e6d2[_0x342792(0x991)]===0x1&&_0x31e6d2[0x0]===this)return![];}}else this[_0x342792(0x813)]=![];_0x342792(0xa1b)in _0x60f22e?this[_0x342792(0xa1b)]=_0x60f22e[_0x342792(0xa1b)]:_0x342792(0xac5)!==_0x342792(0xac5)?(_0x391d94[_0x342792(0x5e5)][_0x342792(0xc4d)]['call'](this),this[_0x342792(0x229)]()):this[_0x342792(0xa1b)]=![],_0x342792(0xc47)in _0x60f22e?_0x342792(0x22e)!==_0x342792(0x84e)?this[_0x342792(0xc47)]=_0x60f22e['visualHpGauge']:(this[_0x342792(0x431)]=new _0x111934(),this[_0x342792(0x431)]['anchor']['x']=0.5,this['_mainSprite'][_0x342792(0x434)]['y']=0x1,this['addChild'](this['_mainSprite']),this[_0x342792(0xc00)]()):this[_0x342792(0xc47)]=!![];},ImageManager[_0x4c6a01(0x7f2)]=ImageManager[_0x4c6a01(0x7f2)]||0x9,ImageManager[_0x4c6a01(0x313)]=ImageManager[_0x4c6a01(0x313)]||0x6,VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x63f)]=BattleManager['setup'],BattleManager[_0x4c6a01(0xb68)]=function(_0x12715d,_0x1ba172,_0x5c6ced){const _0x36c85d=_0x4c6a01;VisuMZ[_0x36c85d(0x5e5)][_0x36c85d(0x63f)][_0x36c85d(0x3a4)](this,_0x12715d,_0x1ba172,_0x5c6ced),this[_0x36c85d(0x79c)]={};},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xd58)]=BattleManager['initMembers'],BattleManager[_0x4c6a01(0xd4b)]=function(){const _0x2ac106=_0x4c6a01;VisuMZ['BattleCore'][_0x2ac106(0xd58)]['call'](this),this[_0x2ac106(0x3b5)]=[];},BattleManager[_0x4c6a01(0x6e5)]=function(){const _0x2ced51=_0x4c6a01;if(!SceneManager[_0x2ced51(0x503)]())return;const _0x384ac8=SceneManager['_scene'][_0x2ced51(0x270)];if(_0x384ac8)_0x384ac8[_0x2ced51(0x82e)]();},BattleManager[_0x4c6a01(0xb02)]=function(){const _0x1aa694=_0x4c6a01;if(BattleManager[_0x1aa694(0x758)]())return _0x1aa694(0x6ac);return'DTB';},BattleManager[_0x4c6a01(0x8a0)]=function(_0x1aa8a6){const _0x3cbb48=_0x4c6a01;return _0x1aa8a6=_0x1aa8a6[_0x3cbb48(0xc9f)]()[_0x3cbb48(0x4e9)](),this[_0x3cbb48(0xb02)]()===_0x1aa8a6;},BattleManager['isDTB']=function(){const _0x502799=_0x4c6a01;return this['isBattleSys'](_0x502799(0x7ec));},BattleManager[_0x4c6a01(0xcfd)]=function(){const _0x4527e6=_0x4c6a01;return this[_0x4527e6(0xc6b)]();},BattleManager[_0x4c6a01(0x8f9)]=function(){const _0x558a4b=_0x4c6a01;return!this[_0x558a4b(0xcfd)]();},BattleManager[_0x4c6a01(0x538)]=function(){const _0x269d48=_0x4c6a01;return!this[_0x269d48(0xcfd)]()&&!this[_0x269d48(0x8f9)]();},BattleManager[_0x4c6a01(0x8fb)]=function(_0x2f1819){const _0xa86ed6=_0x4c6a01;this['_battlerKeyCache']=this[_0xa86ed6(0x79c)]||{};if(this['_battlerKeyCache'][_0x2f1819]!==undefined)return this[_0xa86ed6(0x79c)][_0x2f1819];this['_battlerKeyCache'][_0x2f1819]=null;const _0x3dd60e=this[_0xa86ed6(0xac8)](),_0x5b5f7d=_0x3dd60e[_0xa86ed6(0xd9b)](_0x160147=>_0x160147[_0xa86ed6(0x9c3)]()===_0x2f1819);if(_0x5b5f7d)this[_0xa86ed6(0x79c)][_0x2f1819]=_0x5b5f7d;return this[_0xa86ed6(0x79c)][_0x2f1819];},Game_BattlerBase['prototype'][_0x4c6a01(0x9c3)]=function(){const _0x206c36=_0x4c6a01;return _0x206c36(0xdcc)[_0x206c36(0x511)](this[_0x206c36(0x966)]()?_0x206c36(0x73e):_0x206c36(0x962),this['name']());},Game_Action['prototype'][_0x4c6a01(0xc4c)]=function(_0x3d00d5){const _0x4646f7=_0x4c6a01;if(this[_0x4646f7(0x432)]!=='')return;if(typeof _0x3d00d5===_0x4646f7(0xb05)){if(_0x4646f7(0x9de)!==_0x4646f7(0x9de)){const _0x47729c=this['visibilityState']();if(_0x47729c&&this[_0x4646f7(0x973)]<0xff)this['opacity']+=0x10;else!_0x47729c&&this['opacity']>0x0&&(this[_0x4646f7(0x973)]-=0x10);}else this[_0x4646f7(0x432)]=_0x3d00d5[_0x4646f7(0x613)]()[_0x4646f7(0x4e9)]();}else{if('ODNkp'!==_0x4646f7(0x20f)){if(this[_0x4646f7(0xaf0)]===_0x246f4c)return;this[_0x4646f7(0xaf0)]=_0x47442e,this[_0x4646f7(0x3db)]=_0xd4e1b2,this[_0x4646f7(0xd41)]=_0x4e2f38,this['_opacityEasing']=_0x53bf7f||_0x4646f7(0x883);if(_0x1bdcdc<=0x0)this['opacity']=_0x33cdcb;}else this[_0x4646f7(0x432)]=_0x3d00d5[_0x4646f7(0x9c3)]();}},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xa94)]=function(){const _0x302392=_0x4c6a01;return[this[_0x302392(0x8f0)]()];},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x8f0)]=function(){const _0x32da1e=_0x4c6a01,_0x7bd4d9=this[_0x32da1e(0x432)]||'',_0x51ab8f=BattleManager['getBattlerFromKey'](_0x7bd4d9);if(!_0x51ab8f)return this['getBattlerKeyTargetReplacement']();if(!_0x51ab8f[_0x32da1e(0x51e)]())return this[_0x32da1e(0xa15)]();return _0x51ab8f;},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xa15)]=function(){const _0x1f8429=_0x4c6a01,_0x5f5b52=this['_targetBattlerKey'];if(_0x5f5b52[_0x1f8429(0x996)](/ACTOR/i)){if('vdIQF'===_0x1f8429(0xaf5))this[_0x1f8429(0x74c)]['push'](_0x1f8429(0x7a6),_0x14feb6[_0x1f8429(0xaa5)]['format'](_0x24cd28)),this[_0x1f8429(0x74c)][_0x1f8429(0x543)](_0x1f8429(0xcef)),_0x53d2ca=!![];else return this[_0x1f8429(0xbe7)]()['trueRandomTarget']();}else return this['opponentsUnit']()[_0x1f8429(0x5dc)]();},BattleManager['selectedBattlers']=function(){const _0x463322=_0x4c6a01;return this['allBattleMembers']()[_0x463322(0xac7)](_0x229cbc=>_0x229cbc[_0x463322(0x50f)]());},BattleManager[_0x4c6a01(0x486)]=function(_0x3469e3){const _0x31aa38=_0x4c6a01;if(_0x3469e3===_0x31aa38(0x2a5)){if(_0x31aa38(0x35c)!==_0x31aa38(0x35c))return _0x195b9d[_0x31aa38(0xc58)]['damageOffsetY'][_0x31aa38(0x3a4)](this);else this['_endingBattle']=!![];}$gameParty['processBattleCoreJS'](_0x3469e3),$gameTroop[_0x31aa38(0x486)](_0x3469e3);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x517)]=BattleManager[_0x4c6a01(0x659)],BattleManager[_0x4c6a01(0x659)]=function(){const _0x2071f1=_0x4c6a01;this[_0x2071f1(0xc31)]=![],this['_autoBattle']=ConfigManager[_0x2071f1(0x813)],this[_0x2071f1(0xba8)]=![],this[_0x2071f1(0x486)](_0x2071f1(0xcca)),VisuMZ[_0x2071f1(0x5e5)]['BattleManager_startBattle'][_0x2071f1(0x3a4)](this),this[_0x2071f1(0x486)](_0x2071f1(0xc19));},BattleManager[_0x4c6a01(0x838)]=function(_0x39faa7){const _0x47d1fd=_0x4c6a01,_0x3391b9=VisuMZ[_0x47d1fd(0x5e5)][_0x47d1fd(0x32d)][_0x47d1fd(0x4bd)];if(_0x39faa7!==_0x47d1fd(0x4a3)&&_0x3391b9['BattleEndEvent']&&VisuMZ[_0x47d1fd(0x5e5)][_0x47d1fd(0xc90)](_0x3391b9[_0x47d1fd(0xbf2)])){if(_0x47d1fd(0x4e5)!==_0x47d1fd(0xd0c))$gameTemp[_0x47d1fd(0xdd5)](_0x3391b9[_0x47d1fd(0xbf2)]);else{const _0x1032a9='\x5cI[%1]%2';let _0x1483ae=_0x26b56f['iconIndex'],_0x212ede=_0x4afaa6['name'];const _0x2427d2=_0x5b0e39['note'];return _0x2427d2[_0x47d1fd(0x996)](/<DISPLAY ICON: (\d+)>/i)&&(_0x1483ae=_0x520903(_0x11509e['$1'])),_0x2427d2[_0x47d1fd(0x996)](/<DISPLAY TEXT: (.*)>/i)&&(_0x212ede=_0x265253(_0x1a895e['$1'])),_0x1032a9['format'](_0x1483ae,_0x212ede);}}const _0x209552='%1Event'['format'](_0x39faa7);_0x3391b9[_0x209552]&&VisuMZ[_0x47d1fd(0x5e5)][_0x47d1fd(0xc90)](_0x3391b9[_0x209552])&&('AZDMX'===_0x47d1fd(0x34e)?_0x1842be['reserveCommonEvent'](_0x2d4c13[_0x45c477]):$gameTemp[_0x47d1fd(0xdd5)](_0x3391b9[_0x209552]));},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x6bb)]=BattleManager[_0x4c6a01(0x72b)],BattleManager[_0x4c6a01(0x72b)]=function(){const _0x18ffbb=_0x4c6a01;if(this[_0x18ffbb(0x9b2)]===_0x18ffbb(0x7fd)){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ['BattleCore'][_0x18ffbb(0x6bb)][_0x18ffbb(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xc41)]=BattleManager['processVictory'],BattleManager[_0x4c6a01(0xb70)]=function(){const _0x44e92a=_0x4c6a01;this['_endingBattle']=!![],this[_0x44e92a(0x486)](_0x44e92a(0x2a5)),VisuMZ['BattleCore']['BattleManager_processVictory']['call'](this),this[_0x44e92a(0x838)]('Victory');},VisuMZ['BattleCore'][_0x4c6a01(0x662)]=BattleManager[_0x4c6a01(0xd40)],BattleManager[_0x4c6a01(0xd40)]=function(){const _0x339d46=_0x4c6a01;this[_0x339d46(0xba8)]=!![],VisuMZ[_0x339d46(0x5e5)][_0x339d46(0x662)][_0x339d46(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xcd1)]=BattleManager[_0x4c6a01(0xb14)],BattleManager[_0x4c6a01(0xb14)]=function(){const _0x1bb598=_0x4c6a01;this['_endingBattle']=!![],this['processBattleCoreJS']('BattleDefeatJS'),VisuMZ['BattleCore'][_0x1bb598(0xcd1)]['call'](this),this[_0x1bb598(0x838)](_0x1bb598(0xc79));},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xcc6)]=BattleManager['endBattle'],BattleManager[_0x4c6a01(0x670)]=function(_0xcecf03){const _0x501256=_0x4c6a01;this[_0x501256(0xc31)]=!![],this[_0x501256(0x673)]=![],this[_0x501256(0x486)](_0x501256(0x8c3)),VisuMZ['BattleCore'][_0x501256(0xcc6)][_0x501256(0x3a4)](this,_0xcecf03),this['processBattleCoreJS'](_0x501256(0x94f));},VisuMZ['BattleCore']['BattleManager_startTurn']=BattleManager['startTurn'],BattleManager['startTurn']=function(){const _0x4ca560=_0x4c6a01;if(this['isTurnBased']())this[_0x4ca560(0x486)](_0x4ca560(0x20e));VisuMZ[_0x4ca560(0x5e5)][_0x4ca560(0xc2a)]['call'](this);if(this['isTurnBased']())this['processBattleCoreJS'](_0x4ca560(0x6e2));},BattleManager[_0x4c6a01(0x42b)]=function(){const _0x1ecd54=_0x4c6a01,_0x40d404=this['_subject'],_0x1a7bdd=_0x40d404[_0x1ecd54(0xad9)]();if(_0x1a7bdd)_0x1ecd54(0x374)!==_0x1ecd54(0xc8e)?(_0x1a7bdd[_0x1ecd54(0x63d)](),_0x1a7bdd[_0x1ecd54(0x749)]()?(this[_0x1ecd54(0x5fb)](),_0x40d404[_0x1ecd54(0x5d3)]()):'xhClU'!==_0x1ecd54(0x628)?this['startMotion'](_0x1ecd54(0xcef)):(_0x40d404[_0x1ecd54(0x5d3)](),this[_0x1ecd54(0xc0f)]())):this[_0x1ecd54(0x72e)]();else{if(_0x1ecd54(0x2c4)!=='cezIj'){if(_0x242f6e[_0x1ecd54(0x407)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x1fc99b=_0x1784dc(_0x5d91ef['$1'])[_0x1ecd54(0xcaf)](/[\r\n]+/)[_0x1ecd54(0xbde)](''),_0x5bb3ef=this[_0x1ecd54(0x96b)](_0x1fc99b);_0x2ba8f8=this[_0x1ecd54(0x897)](_0x5bb3ef)||_0xbab5b3,_0x2890b5=_0xcee87a[_0x1ecd54(0x3ca)](_0x7974ea);}}else this[_0x1ecd54(0xc0f)](),this['_subject']=null;}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x611)]=BattleManager[_0x4c6a01(0x5fb)],BattleManager[_0x4c6a01(0x5fb)]=function(){const _0x30210a=_0x4c6a01,_0x5bf6c3=this['_subject'][_0x30210a(0xad9)](),_0x2a7c79=this[_0x30210a(0x49e)];if(_0x5bf6c3&&_0x5bf6c3[_0x30210a(0xbf1)]()===_0x2a7c79){if(_0x30210a(0xd81)===_0x30210a(0xe0c)){if(this[_0x30210a(0x6b2)])return this['_battleLayoutStyle'];return this[_0x30210a(0x6b2)]=_0x2d42e3[_0x30210a(0x4c1)][_0x30210a(0xd3a)](),this[_0x30210a(0x6b2)];}else _0x5bf6c3[_0x30210a(0x61f)](_0x30210a(0x912));}VisuMZ[_0x30210a(0x5e5)][_0x30210a(0x611)][_0x30210a(0x3a4)](this),_0x5bf6c3&&_0x5bf6c3[_0x30210a(0xbf1)]()===_0x2a7c79&&_0x5bf6c3[_0x30210a(0x61f)]('PostStartActionJS');},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x470)]=BattleManager[_0x4c6a01(0xc0f)],BattleManager['endAction']=function(){const _0x4ea5b5=_0x4c6a01,_0x298866=this[_0x4ea5b5(0x3b6)],_0xeb89c6=this['_subject'];_0x298866&&_0x298866!==this[_0x4ea5b5(0xba7)]&&_0x298866[_0x4ea5b5(0xbf1)]()===_0xeb89c6&&(_0x4ea5b5(0x9d6)==='jZiJW'?_0x298866['actionBattleCoreJS'](_0x4ea5b5(0x3cd)):this[_0x4ea5b5(0x371)]()),this['_subject']?VisuMZ['BattleCore']['BattleManager_endAction'][_0x4ea5b5(0x3a4)](this):this['_phase']=_0x4ea5b5(0x7fd),_0x298866&&_0x298866!==this['_lastAction']&&_0x298866['subject']()===_0xeb89c6&&_0x298866[_0x4ea5b5(0x61f)]('PostEndActionJS'),this['refreshBattlerMotions'](this[_0x4ea5b5(0xac8)]()),this[_0x4ea5b5(0xba7)]=this[_0x4ea5b5(0x3b6)];},BattleManager[_0x4c6a01(0xb50)]=function(_0x4a9a73){const _0x3d7580=_0x4c6a01;for(const _0x26e7a8 of _0x4a9a73){if(!_0x26e7a8)continue;if(!_0x26e7a8['battler']())continue;_0x26e7a8['battler']()[_0x3d7580(0xbb5)]();}},BattleManager[_0x4c6a01(0x8fc)]=function(){const _0xdcc86d=_0x4c6a01;!this['_logWindow'][_0xdcc86d(0x5a4)]()&&this[_0xdcc86d(0xc0f)]();},Game_Battler['prototype']['onAllActionsEnd']=function(){const _0x59d794=_0x4c6a01;this['clearResult']();if(Imported[_0x59d794(0xa52)]){const _0x9eb010=VisuMZ[_0x59d794(0x8bd)][_0x59d794(0x32d)][_0x59d794(0xd5c)];_0x9eb010&&_0x9eb010[_0x59d794(0xa73)]===![]&&this[_0x59d794(0xe0a)](0x1);}else this[_0x59d794(0xe0a)](0x1);this[_0x59d794(0x5ac)]();},BattleManager[_0x4c6a01(0x3b7)]=function(){const _0x6948d5=_0x4c6a01;this['_escapeRatio']=VisuMZ[_0x6948d5(0x5e5)][_0x6948d5(0x32d)][_0x6948d5(0x4bd)]['CalcEscapeRatioJS']['call'](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xba2)]=BattleManager[_0x4c6a01(0xd52)],BattleManager[_0x4c6a01(0xd52)]=function(){const _0x119d39=_0x4c6a01;this[_0x119d39(0x486)](_0x119d39(0xc2b)),BattleManager[_0x119d39(0x666)][_0x119d39(0x632)](),VisuMZ[_0x119d39(0x5e5)][_0x119d39(0xba2)][_0x119d39(0x3a4)](this),this[_0x119d39(0x838)](_0x119d39(0x70d));},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x3a7)]=BattleManager[_0x4c6a01(0xb13)],BattleManager[_0x4c6a01(0xb13)]=function(){const _0xa4873c=_0x4c6a01;this[_0xa4873c(0x486)](_0xa4873c(0x2d1));const _0xf1db4a=this[_0xa4873c(0x748)];VisuMZ[_0xa4873c(0x5e5)][_0xa4873c(0x3a7)][_0xa4873c(0x3a4)](this),this[_0xa4873c(0x748)]=_0xf1db4a+VisuMZ['BattleCore'][_0xa4873c(0x32d)][_0xa4873c(0x4bd)]['CalcEscapeRaiseJS'][_0xa4873c(0x3a4)](this),this[_0xa4873c(0xe1e)]=![],this[_0xa4873c(0x838)](_0xa4873c(0x4a3));},BattleManager['displayStartMessages']=function(){const _0x103ef9=_0x4c6a01;let _0x54adf2=![];if(this[_0x103ef9(0x9fc)]())for(const _0x28ba72 of $gameTroop['enemyNames']()){this[_0x103ef9(0x74c)][_0x103ef9(0x543)](_0x103ef9(0x7a6),TextManager[_0x103ef9(0xaa5)]['format'](_0x28ba72)),this[_0x103ef9(0x74c)][_0x103ef9(0x543)](_0x103ef9(0xcef)),_0x54adf2=!![];}if(this[_0x103ef9(0x34f)])this['_logWindow'][_0x103ef9(0x543)]('addText',TextManager[_0x103ef9(0xcd7)][_0x103ef9(0x511)]($gameParty[_0x103ef9(0x2c7)]())),this[_0x103ef9(0x74c)][_0x103ef9(0x543)](_0x103ef9(0xcef));else{if(this['_surprise']){if(_0x103ef9(0xdb7)!=='OodzU')this[_0x103ef9(0x74c)][_0x103ef9(0x543)]('addText',TextManager[_0x103ef9(0x4d0)][_0x103ef9(0x511)]($gameParty['name']())),this[_0x103ef9(0x74c)]['push']('wait');else{if(!_0x193c6b['isSceneBattle']())return;if(!_0x52c4ba[_0x103ef9(0x880)])return;_0x1ff518[_0x103ef9(0xc46)](_0x532d0f,_0x375d0b);const _0x52771d=_0x2a0a78[_0x103ef9(0x582)](),_0x2a2724=_0x209220[_0x103ef9(0xb5b)];if(!_0x52771d)return;_0x34b892[_0x103ef9(0x76e)](_0x1c9fda[_0x103ef9(0xdfc)],_0x5cd157[_0x103ef9(0x525)],_0x573285[_0x103ef9(0xa14)],_0x25351b['EasingType']);if(_0x2a2724)_0x52771d[_0x103ef9(0x2b5)](_0x103ef9(0x480));}}}_0x54adf2&&(this[_0x103ef9(0x74c)]['push'](_0x103ef9(0xcef)),this[_0x103ef9(0x74c)][_0x103ef9(0x543)](_0x103ef9(0xd66))),this['isTpb']()&&this[_0x103ef9(0x294)]()&&(this[_0x103ef9(0x5ad)]=![]);},BattleManager[_0x4c6a01(0x9fc)]=function(){const _0x109564=_0x4c6a01;if(BattleManager[_0x109564(0x673)])return![];return VisuMZ[_0x109564(0x5e5)][_0x109564(0x32d)][_0x109564(0x82d)][_0x109564(0x779)];},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x8e1)]=BattleManager[_0x4c6a01(0xd71)],BattleManager[_0x4c6a01(0xd71)]=function(){const _0x37b53e=_0x4c6a01;VisuMZ['BattleCore'][_0x37b53e(0x8e1)][_0x37b53e(0x3a4)](this),this[_0x37b53e(0xc6b)]()&&this[_0x37b53e(0x294)]()&&!this[_0x37b53e(0x272)]&&$gameParty[_0x37b53e(0x5c9)]()&&this[_0x37b53e(0x52f)]();},BattleManager[_0x4c6a01(0x294)]=function(){const _0x7e3ead=_0x4c6a01;return VisuMZ[_0x7e3ead(0x5e5)]['Settings']['PartyCmd']['SkipPartyCmd'];},BattleManager[_0x4c6a01(0x6ef)]=function(){const _0x943be6=_0x4c6a01;this[_0x943be6(0x692)]()&&this[_0x943be6(0x52f)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x698)]=Scene_Battle[_0x4c6a01(0xc58)]['startActorCommandSelection'],Scene_Battle['prototype'][_0x4c6a01(0xbaf)]=function(){const _0x27638=_0x4c6a01;VisuMZ[_0x27638(0x5e5)]['Scene_Battle_startActorCommandSelection']['call'](this),BattleManager[_0x27638(0x758)]()&&BattleManager[_0x27638(0x5ad)]&&(BattleManager[_0x27638(0x5ad)]=![],this[_0x27638(0x3f3)]());},BattleManager[_0x4c6a01(0x993)]=function(_0x34ab0e,_0x2204cc){const _0x4a708e=_0x4c6a01;this[_0x4a708e(0x3b6)]['_reflectionTarget']=_0x2204cc,this['_logWindow']['displayReflection'](_0x2204cc),this[_0x4a708e(0x74c)][_0x4a708e(0x6f4)](_0x34ab0e,this[_0x4a708e(0x3b6)]),this[_0x4a708e(0x3b6)][_0x4a708e(0x8f3)](_0x34ab0e),this['_logWindow'][_0x4a708e(0x614)](_0x34ab0e,_0x34ab0e);},VisuMZ[_0x4c6a01(0x5e5)]['BattleManager_makeActionOrders']=BattleManager[_0x4c6a01(0xb6a)],BattleManager[_0x4c6a01(0xb6a)]=function(){const _0x40a833=_0x4c6a01;VisuMZ[_0x40a833(0x5e5)][_0x40a833(0xa29)][_0x40a833(0x3a4)](this),this['_actionBattlers']=this[_0x40a833(0x3df)][_0x40a833(0xac7)](_0x597ca4=>_0x597ca4&&_0x597ca4[_0x40a833(0xb5f)]());},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x93a)]=BattleManager[_0x4c6a01(0xe1a)],BattleManager['updatePhase']=function(_0x317ce8){const _0x4cff49=_0x4c6a01;if(this['_phase']===_0x4cff49(0x96c))this[_0x4cff49(0x2f4)]();else this['_phase']==='forceAction'?this[_0x4cff49(0x890)]():VisuMZ['BattleCore']['BattleManager_updatePhase'][_0x4cff49(0x3a4)](this,_0x317ce8);},BattleManager[_0x4c6a01(0x1fa)]=function(){const _0x1f495f=_0x4c6a01;this[_0x1f495f(0x710)]=this[_0x1f495f(0x780)][_0x1f495f(0x4be)](0x0),this['_targetIndex']=0x0,this[_0x1f495f(0xda1)]=this[_0x1f495f(0x710)][0x0]||null,this[_0x1f495f(0x9b2)]=_0x1f495f(0x96c);},BattleManager[_0x4c6a01(0x2f4)]=function(){const _0x372420=_0x4c6a01;if(!this['updateEventMain']()&&!this['_logWindow'][_0x372420(0x5a4)]()){if(_0x372420(0x255)===_0x372420(0x8cf)){if(!_0x293951)return 0x0;let _0x377bfe=0x0;const _0x3008a5=_0x5a058f[_0x372420(0x407)];return _0x3008a5['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x377bfe+=_0x422313(_0x1b88bb['$1'])),_0x3008a5[_0x372420(0x996)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x377bfe+=_0x2f36bc(_0xc30ce6['$2'])),_0x377bfe;}else this[_0x372420(0x9b2)]=_0x372420(0x1f4);}},BattleManager[_0x4c6a01(0x739)]=function(_0x5c334b){const _0x12c6c3=_0x4c6a01;this[_0x12c6c3(0x3df)][_0x12c6c3(0xbde)](_0x5c334b);if(_0x5c334b===this[_0x12c6c3(0x49e)])return;const _0x3bd04c=JsonEx['makeDeepCopy'](_0x5c334b[_0x12c6c3(0xad9)]());this[_0x12c6c3(0x3b5)][_0x12c6c3(0x543)]([_0x5c334b,_0x3bd04c]);},BattleManager['processForcedAction']=function(){},BattleManager[_0x4c6a01(0xb35)]=function(){const _0x5aee84=_0x4c6a01;if(this[_0x5aee84(0x758)]())this[_0x5aee84(0x9b2)]=_0x5aee84(0x7fd);else this[_0x5aee84(0x3b5)][_0x5aee84(0x991)]>0x0?this['_phase']=_0x5aee84(0x7fd):this[_0x5aee84(0xd71)]();},BattleManager[_0x4c6a01(0x933)]=function(){const _0x419b42=_0x4c6a01,_0x159915=this[_0x419b42(0x49e)];if(_0x159915&&this[_0x419b42(0x758)]()){if('sRPGc'!=='tKElS')_0x159915[_0x419b42(0x9f6)](_0x419b42(0x512));else{const _0x3191a8=_0x33cc73['BattleCore'][_0x419b42(0x32d)][_0x419b42(0x4bd)];_0x4e2f96!==_0x419b42(0x4a3)&&_0x3191a8[_0x419b42(0xbf2)]&&_0x470f0b[_0x419b42(0x5e5)][_0x419b42(0xc90)](_0x3191a8['BattleEndEvent'])&&_0x4f7955[_0x419b42(0xdd5)](_0x3191a8[_0x419b42(0xbf2)]);const _0x582bb9='%1Event'[_0x419b42(0x511)](_0x1e07b9);_0x3191a8[_0x582bb9]&&_0x1e2a56[_0x419b42(0x5e5)]['CheckMapBattleEventValid'](_0x3191a8[_0x582bb9])&&_0x31c61d[_0x419b42(0xdd5)](_0x3191a8[_0x582bb9]);}}for(;;){const _0x593cf1=this[_0x419b42(0x53e)]();if(!_0x593cf1)return null;if(_0x593cf1[_0x419b42(0xa6e)]()&&_0x593cf1[_0x419b42(0x51e)]()){if(_0x419b42(0x427)===_0x419b42(0x847))_0x4659e2[_0x419b42(0x7b5)](_0x345aa0);else return _0x593cf1;}}},BattleManager[_0x4c6a01(0x53e)]=function(){const _0x333a89=_0x4c6a01;if(this[_0x333a89(0x3b5)]['length']>0x0){const _0x4698d5=this['_forcedBattlers'][_0x333a89(0x91d)](),_0x1841f7=_0x4698d5[0x0];return _0x1841f7[_0x333a89(0xada)]=_0x1841f7[_0x333a89(0xada)]||[],_0x1841f7[_0x333a89(0xada)][0x0]=_0x4698d5[0x1],_0x1841f7;}else return this[_0x333a89(0x3df)][_0x333a89(0x91d)]();},VisuMZ[_0x4c6a01(0x5e5)]['Game_Battler_forceAction']=Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x739)],Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x739)]=function(_0x188423,_0x5d527e){const _0x437def=_0x4c6a01;VisuMZ[_0x437def(0x5e5)][_0x437def(0x767)]['call'](this,_0x188423,_0x5d527e),this[_0x437def(0xada)][this[_0x437def(0xada)][_0x437def(0x991)]-0x1]['_forceAction']=!![];},Game_Interpreter[_0x4c6a01(0xc58)]['command339']=function(_0x399dc2){const _0x1b0f24=_0x4c6a01;return this[_0x1b0f24(0x7db)](_0x399dc2[0x0],_0x399dc2[0x1],_0x1978fa=>{const _0x3b97b0=_0x1b0f24;!_0x1978fa[_0x3b97b0(0x504)]()&&(_0x3b97b0(0x6fd)!==_0x3b97b0(0x565)?(_0x1978fa[_0x3b97b0(0x739)](_0x399dc2[0x2],_0x399dc2[0x3]),BattleManager[_0x3b97b0(0x739)](_0x1978fa)):this[_0x3b97b0(0xa22)](_0x421e8d)?_0x2fda95['prepareCustomActionSequence']():this[_0x3b97b0(0x94d)](_0x46c369,_0xa5244b,_0x30f3aa));}),!![];},VisuMZ['BattleCore'][_0x4c6a01(0xcb3)]=Game_Battler['prototype'][_0x4c6a01(0x6ca)],Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x6ca)]=function(){const _0x2fe39b=_0x4c6a01;VisuMZ['BattleCore'][_0x2fe39b(0xcb3)][_0x2fe39b(0x3a4)](this);if(this[_0x2fe39b(0xada)]['length']<=0x0){if(_0x2fe39b(0x46d)!==_0x2fe39b(0x86c))this[_0x2fe39b(0xa9f)]=Number[_0x2fe39b(0x8d5)];else{const _0x5932a9=_0x4b2b80['_scene'][_0x2fe39b(0x270)];if(_0x5932a9)_0x5932a9[_0x2fe39b(0x972)](_0x5056f6,this['_battler']);}}},BattleManager[_0x4c6a01(0xdb5)]=function(){const _0x696bf5=_0x4c6a01;if(VisuMZ[_0x696bf5(0x5e5)]['Settings'][_0x696bf5(0x625)]['EndBattlePopups']??!![])return![];return SceneManager[_0x696bf5(0x503)]()&&this['_endingBattle'];},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x7c2)]=BattleManager[_0x4c6a01(0x52f)],BattleManager[_0x4c6a01(0x52f)]=function(){const _0x4ce154=_0x4c6a01;if(this[_0x4ce154(0x758)]()){if(_0x4ce154(0x200)!==_0x4ce154(0x200)){if(!this['visible'])return![];if(_0x969bab[_0x4ce154(0x7a2)]())return![];const _0x51cd6a=_0x236705[_0x4ce154(0x4c1)]['battleLayoutStyle'](),_0x56206c=['default',_0x4ce154(0x85a),'xp',_0x4ce154(0x3e6),_0x4ce154(0x2ab)];return _0x56206c[_0x4ce154(0x864)](_0x51cd6a);}else this[_0x4ce154(0x417)]();}else _0x4ce154(0xb0d)!==_0x4ce154(0xb0d)?_0x5ce553=_0x4ebece>=_0xa1ee1c?_0x5867ac:_0x41f0dc:VisuMZ[_0x4ce154(0x5e5)][_0x4ce154(0x7c2)][_0x4ce154(0x3a4)](this);},BattleManager[_0x4c6a01(0x417)]=function(){const _0x3b035d=_0x4c6a01;if(this['_currentActor']){if(this['_currentActor'][_0x3b035d(0x52f)]())return;this[_0x3b035d(0x8de)](),this[_0x3b035d(0x5fe)](),!this[_0x3b035d(0x49e)]&&!this[_0x3b035d(0x99c)]&&SceneManager[_0x3b035d(0x4c1)][_0x3b035d(0x519)]();}else!this[_0x3b035d(0x49e)]&&('ITfBW'!==_0x3b035d(0xda7)?this[_0x3b035d(0x924)]():_0xba2020[_0x3b035d(0x396)](0x0));},BattleManager[_0x4c6a01(0x5fe)]=function(){const _0x48400b=_0x4c6a01;if(!this[_0x48400b(0x692)]()||this[_0x48400b(0xdfe)]()){if(_0x48400b(0x9cd)!==_0x48400b(0x53b))this['_tpbSceneChangeCacheActor']&&(!$gameParty['battleMembers']()[_0x48400b(0x864)](this[_0x48400b(0x56f)])&&(this[_0x48400b(0x56f)]=null)),!this[_0x48400b(0x56f)]?(this[_0x48400b(0x9c5)](),this['_currentActor']=null,this['_inputting']=![]):_0x48400b(0x633)!==_0x48400b(0x68f)?this[_0x48400b(0xc40)]():(this[_0x48400b(0xd85)]=this[_0x48400b(0xd85)]||0x0,this[_0x48400b(0xd85)]++,this[_0x48400b(0x985)]={});else{if(!_0x530696['isSceneBattle']())return!![];const _0x217071=[_0x48400b(0x983),_0x48400b(0x24d)];return _0x217071['includes'](_0x4e39cd['name']);}}},BattleManager[_0x4c6a01(0xc40)]=function(){const _0x1e4a04=_0x4c6a01;!$gameParty[_0x1e4a04(0x9df)]()[_0x1e4a04(0x864)](this[_0x1e4a04(0x56f)])&&(this['_tpbSceneChangeCacheActor']=null),this['_tpbSceneChangeCacheActor']?_0x1e4a04(0xd6e)==='PLHvU'?_0x2a4d26[_0x1e4a04(0x2c5)](_0x4abd4e):(this[_0x1e4a04(0x99c)]=this[_0x1e4a04(0x56f)],this[_0x1e4a04(0x99c)][_0x1e4a04(0x58b)]='charged',this['_inputting']=!![],this['_tpbSceneChangeCacheActor']=null):_0x1e4a04(0xa18)===_0x1e4a04(0xcee)?_0x4b14ae[_0x1e4a04(0x543)](_0x1220db(_0x194cf0['$1'])):(this[_0x1e4a04(0x9c5)](),this['_currentActor']=null,this['_inputting']=![]);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x92a)]=BattleManager[_0x4c6a01(0x4e7)],BattleManager[_0x4c6a01(0x4e7)]=function(){const _0x24efd7=_0x4c6a01;if(this[_0x24efd7(0x9b2)]===_0x24efd7(0x96c)){if('aVPFG'!==_0x24efd7(0x585))this[_0x24efd7(0x72f)]()[_0x24efd7(0xbb5)]();else return this[_0x24efd7(0x796)]();}else return VisuMZ[_0x24efd7(0x5e5)][_0x24efd7(0x92a)][_0x24efd7(0x3a4)](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x53a693=_0x4c6a01;return this[_0x53a693(0x479)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x2e7)]=BattleManager[_0x4c6a01(0x9c5)],BattleManager['cancelActorInput']=function(){const _0x40b8fa=_0x4c6a01;if(this[_0x40b8fa(0x758)]()&&this['_phase']===_0x40b8fa(0x93d)){if(_0x40b8fa(0xcfe)===_0x40b8fa(0xcfe))this['_currentActor']=null;else{const _0xcba109=_0x4dba13[_0x40b8fa(0xbbd)](),_0x14481e=_0xcba109[_0x40b8fa(0xab5)]();for(const _0x45bf26 of _0x14481e){const _0x49128d=_0x1713ba['isActor']()?_0x45bf26[_0x40b8fa(0x5c0)]:_0x45bf26[_0x40b8fa(0x27d)];_0x49128d&&_0x3968e2[_0x40b8fa(0x5e5)]['Settings'][_0x40b8fa(0x84c)][_0x40b8fa(0x68a)]&&(this[_0x40b8fa(0x543)](_0x40b8fa(0xa13)),this[_0x40b8fa(0x543)](_0x40b8fa(0xe1c)),this[_0x40b8fa(0x543)](_0x40b8fa(0x949)),this[_0x40b8fa(0x543)](_0x40b8fa(0x7a6),_0x49128d[_0x40b8fa(0x511)](_0x3f8425[_0x40b8fa(0x2c7)]())),this[_0x40b8fa(0x543)]('wait')),_0x45bf26['id']===_0x2c800a['deathStateId']()&&this['push'](_0x40b8fa(0x953),_0x28d104);}}}VisuMZ[_0x40b8fa(0x5e5)][_0x40b8fa(0x2e7)][_0x40b8fa(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x536)]=BattleManager[_0x4c6a01(0xa08)],BattleManager[_0x4c6a01(0xa08)]=function(){const _0x89e4f6=_0x4c6a01,_0x3474aa=this['_currentActor'];if(_0x3474aa&&!_0x3474aa[_0x89e4f6(0xa08)]()){const _0x279c96=_0x3474aa[_0x89e4f6(0xa70)];_0x3474aa[_0x89e4f6(0xada)][_0x279c96]=new Game_Action(_0x3474aa);}return VisuMZ[_0x89e4f6(0x5e5)][_0x89e4f6(0x536)][_0x89e4f6(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xbb9)]=BattleManager[_0x4c6a01(0x648)],BattleManager['checkSubstitute']=function(_0x4f9e1e){const _0x3a8ea7=_0x4c6a01;if(this[_0x3a8ea7(0x3b6)]['isForFriend']())return![];return VisuMZ[_0x3a8ea7(0x5e5)][_0x3a8ea7(0xbb9)][_0x3a8ea7(0x3a4)](this,_0x4f9e1e);},SceneManager[_0x4c6a01(0x503)]=function(){const _0x2bf450=_0x4c6a01;return this[_0x2bf450(0x4c1)]&&this[_0x2bf450(0x4c1)][_0x2bf450(0xacc)]===Scene_Battle;},SceneManager[_0x4c6a01(0x703)]=function(){const _0x253239=_0x4c6a01;return Spriteset_Battle[_0x253239(0xc58)][_0x253239(0x791)]();},SceneManager[_0x4c6a01(0x507)]=function(){const _0x20d546=_0x4c6a01;if(SceneManager[_0x20d546(0x58d)](Scene_Options))return!![];return![];},SceneManager[_0x4c6a01(0x680)]=function(){const _0x3bedca=_0x4c6a01;if(SceneManager[_0x3bedca(0xae7)](Scene_Options))return!![];return![];},SceneManager[_0x4c6a01(0x3b3)]=function(_0xf986c6){const _0x24e435=_0x4c6a01;if(!SceneManager[_0x24e435(0x503)]())return!![];const _0x3c003c=[_0x24e435(0x983),_0x24e435(0x24d)];return _0x3c003c[_0x24e435(0x864)](_0xf986c6[_0x24e435(0x2c7)]);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x6cf)]=SceneManager[_0x4c6a01(0x543)],SceneManager[_0x4c6a01(0x543)]=function(_0x5f5c3e){const _0x4a1a48=_0x4c6a01;if(!SceneManager[_0x4a1a48(0x3b3)](_0x5f5c3e))return this['displayBattleCoreTransitionErrorMsg'](_0x5f5c3e);VisuMZ[_0x4a1a48(0x5e5)][_0x4a1a48(0x6cf)][_0x4a1a48(0x3a4)](this,_0x5f5c3e);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x37558b){const _0x16c87e=_0x4c6a01;if(!$gameTemp[_0x16c87e(0x271)]())return;if(this[_0x16c87e(0x7da)])return;this[_0x16c87e(0x7da)]=!![];let _0x250d91='';_0x250d91+=_0x16c87e(0x842),_0x250d91+=_0x16c87e(0x437)[_0x16c87e(0x511)](_0x37558b['name']),alert(_0x250d91);},VisuMZ['BattleCore'][_0x4c6a01(0x95a)]=Game_Temp[_0x4c6a01(0xc58)][_0x4c6a01(0x435)],Game_Temp['prototype'][_0x4c6a01(0x435)]=function(_0x226103,_0xcaa098,_0x1d75b0){const _0x1b4d27=_0x4c6a01;_0x226103=_0x226103[_0x1b4d27(0xac7)]((_0x4ab3b4,_0x20465a,_0x269f11)=>_0x269f11['indexOf'](_0x4ab3b4)===_0x20465a),SceneManager[_0x1b4d27(0x503)]()&&SceneManager[_0x1b4d27(0x703)]()&&(_0x1d75b0=!_0x1d75b0),VisuMZ['BattleCore']['Game_Temp_requestAnimation']['call'](this,_0x226103,_0xcaa098,_0x1d75b0),SceneManager['isSceneBattle']()&&BattleManager['_spriteset'][_0x1b4d27(0x35b)]();},Game_Temp[_0x4c6a01(0xc58)]['setLastPluginCommandInterpreter']=function(_0x542fc4){this['_lastPluginCommandInterpreter']=_0x542fc4;},Game_Temp[_0x4c6a01(0xc58)]['getLastPluginCommandInterpreter']=function(){const _0x4d87ca=_0x4c6a01;return this[_0x4d87ca(0xc30)];},Game_Temp['prototype'][_0x4c6a01(0x581)]=function(){const _0x4ff3b8=_0x4c6a01;this[_0x4ff3b8(0xc11)]=undefined;},Game_Temp[_0x4c6a01(0xc58)]['applyForcedGameTroopSettingsBattleCore']=function(_0x3baf4f){const _0x134942=_0x4c6a01;$gameMap&&$dataMap&&$dataMap[_0x134942(0x407)]&&(_0x134942(0x597)!==_0x134942(0x597)?(_0xb749ca[_0x134942(0x7ff)]=!![],this['makeSuccess'](_0x594c8b)):this[_0x134942(0xd4d)]($dataMap[_0x134942(0x407)]));const _0xbe9d91=$dataTroops[_0x3baf4f];if(_0xbe9d91){let _0xf879c9=DataManager['createTroopNote'](_0xbe9d91['id']);this[_0x134942(0xd4d)](_0xf879c9);}},Game_Temp['prototype'][_0x4c6a01(0xd4d)]=function(_0x421758){const _0x5f3dc4=_0x4c6a01;if(!_0x421758)return;if(_0x421758[_0x5f3dc4(0x996)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){if('oNgTb'!==_0x5f3dc4(0x3e4)){const _0x22397=String(RegExp['$1']);if(_0x22397['match'](/DEFAULT/i))this[_0x5f3dc4(0xc11)]=_0x5f3dc4(0xc9b);else{if(_0x22397[_0x5f3dc4(0x996)](/LIST/i))this[_0x5f3dc4(0xc11)]=_0x5f3dc4(0x85a);else{if(_0x22397[_0x5f3dc4(0x996)](/XP/i))this[_0x5f3dc4(0xc11)]='xp';else{if(_0x22397['match'](/PORTRAIT/i))this['_forcedBattleLayout']='portrait';else{if(_0x22397['match'](/BORDER/i)){if(_0x5f3dc4(0xc50)==='FGIUZ')this[_0x5f3dc4(0xc11)]=_0x5f3dc4(0x2ab);else{const _0x5d3d0b=_0x3136ac[_0x5f3dc4(0xa52)]?_0x25f64f['SkillsStatesCore']['Settings']['Skills']:_0x6276db[_0x5f3dc4(0x5e5)]['Settings'][_0x5f3dc4(0xbe8)],_0x51a74c=_0xb7e0db['magicSkills'][_0x5f3dc4(0x864)](_0x54c6e7),_0x1f2180=_0x51a74c?_0x5d3d0b[_0x5f3dc4(0xc5b)]:_0x5d3d0b[_0x5f3dc4(0x701)];_0x1ca7f7=_0x5f3dc4(0x751)[_0x5f3dc4(0x511)](_0x1f2180,_0x41cc8f);}}else{if(_0x22397[_0x5f3dc4(0x996)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if('EpbpU'!=='EpbpU'){if(!_0xff8289[_0x5f3dc4(0x503)]())return;if(!_0x5c0bbe[_0x5f3dc4(0x901)])return;_0x812163[_0x5f3dc4(0xc46)](_0x42a66b,_0x29f2eb),_0x432ded['_scene']['clearAllVisualCutins']();const _0xabb83c=_0x13c637[_0x5f3dc4(0x582)]();_0xabb83c&&_0x134685[_0x5f3dc4(0xb72)]&&_0xabb83c[_0x5f3dc4(0x2b5)]('cutinExit');}else{if(Imported[_0x5f3dc4(0x7f7)]){if(_0x5f3dc4(0xce7)!==_0x5f3dc4(0xd96))this[_0x5f3dc4(0xc11)]=_0x5f3dc4(0xa4f);else{if(!_0xf9ad7[_0x5f3dc4(0x3b3)](_0x1935cd))return this[_0x5f3dc4(0xc2e)](_0x324341);_0x128b63[_0x5f3dc4(0x5e5)]['SceneManager_push'][_0x5f3dc4(0x3a4)](this,_0x2dc4fc);}}else this[_0x5f3dc4(0xc11)]=_0x5f3dc4(0xc9b);}}else _0x22397[_0x5f3dc4(0x996)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x5f3dc4(0x8f4)]?this[_0x5f3dc4(0xc11)]=_0x5f3dc4(0x520):this[_0x5f3dc4(0xc11)]=_0x5f3dc4(0xc9b));}}}}}}else{let _0x19a349='';_0x19a349+=_0x5f3dc4(0x94a),_0x19a349+=_0x5f3dc4(0x7a7),_0x19a349+=_0x5f3dc4(0x5eb),_0x397f0f(_0x19a349),_0x2b229f[_0x5f3dc4(0x6d4)]();}}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x6a1)]=Game_System[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)],Game_System[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)]=function(){const _0x59787b=_0x4c6a01;VisuMZ[_0x59787b(0x5e5)][_0x59787b(0x6a1)]['call'](this),this[_0x59787b(0xd90)]();},Game_System[_0x4c6a01(0xc58)][_0x4c6a01(0xd90)]=function(){const _0x3d1271=_0x4c6a01;this[_0x3d1271(0x872)]=this[_0x3d1271(0x872)]||[];},Game_System['prototype'][_0x4c6a01(0xd3d)]=function(){const _0x4844ab=_0x4c6a01;if(this[_0x4844ab(0x872)]===undefined)this[_0x4844ab(0xd90)]();return this[_0x4844ab(0x872)];},Game_System[_0x4c6a01(0xc58)][_0x4c6a01(0xc72)]=function(_0x41e77e){const _0xda6653=_0x4c6a01;if(this[_0xda6653(0x872)]===undefined)this['initBattleCore']();if(!_0x41e77e)return;if(this['_defeatedEnemies']['includes'](_0x41e77e))return;this[_0xda6653(0x872)][_0xda6653(0x543)](_0x41e77e),this[_0xda6653(0x872)]['sort']((_0x3d0940,_0x36026d)=>_0x3d0940-_0x36026d);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x930)]=Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x55c)],Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x55c)]=function(_0x39fdf0){const _0x158e88=_0x4c6a01,_0x4ce408=this[_0x158e88(0x51e)](),_0x2f0fb6=this[_0x158e88(0x212)]();VisuMZ['BattleCore'][_0x158e88(0x930)]['call'](this,_0x39fdf0);if(this[_0x158e88(0xb37)]()&&_0x4ce408&&this['isDead']()){if(_0x158e88(0x661)===_0x158e88(0x240)){const _0x4c3e1e=_0x124ad9['autoBattleStyle'],_0x564d12=_0x158e88(0xa1b);this[_0x158e88(0x39b)](_0x4c3e1e,_0x564d12);}else this[_0x158e88(0xb9a)]=!this[_0x158e88(0x320)](),$gameSystem[_0x158e88(0xc72)](this[_0x158e88(0x69a)]());}if(SceneManager[_0x158e88(0x503)]()&&_0x2f0fb6!==this[_0x158e88(0x212)]()){if(this[_0x158e88(0x72f)]()){if(_0x158e88(0x231)!=='mQQEs')this['battler']()[_0x158e88(0xbb5)]();else return _0x33fc67['CoreEngine'][_0x158e88(0x32d)][_0x158e88(0x6a5)][_0x158e88(0xb65)];}}},Game_Enemy[_0x4c6a01(0xc58)]['hasBeenDefeatedBefore']=function(){const _0xd75d8c=_0x4c6a01;return $gameSystem[_0xd75d8c(0xd3d)]()[_0xd75d8c(0x864)](this[_0xd75d8c(0x475)]);},VisuMZ[_0x4c6a01(0x5e5)]['Game_BattlerBase_eraseState']=Game_BattlerBase['prototype'][_0x4c6a01(0x808)],Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x808)]=function(_0xf90150){const _0x53b518=_0x4c6a01;VisuMZ[_0x53b518(0x5e5)][_0x53b518(0x709)][_0x53b518(0x3a4)](this,_0xf90150),this[_0x53b518(0xb37)]()&&_0xf90150===this[_0x53b518(0xaee)]()&&this[_0x53b518(0x51e)]()&&(this[_0x53b518(0xb9a)]=![]),!this['_tempActor']&&!this[_0x53b518(0x521)]&&SceneManager[_0x53b518(0x503)]()&&this[_0x53b518(0x390)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x426)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xd66)],Game_Action[_0x4c6a01(0xc58)]['clear']=function(){const _0x3882fb=_0x4c6a01;VisuMZ[_0x3882fb(0x5e5)]['Game_Action_clear'][_0x3882fb(0x3a4)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x3882fb(0x9a1)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x3882fb(0xc9b),this[_0x3882fb(0x839)]();},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x839)]=function(){this['_targetBattlerKey']='';},VisuMZ['BattleCore'][_0x4c6a01(0x291)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xd8d)],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xd8d)]=function(_0x40810c){const _0x2cdd51=_0x4c6a01;VisuMZ[_0x2cdd51(0x5e5)][_0x2cdd51(0x291)]['call'](this,_0x40810c),this[_0x2cdd51(0x839)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x8c4)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xac0)],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xac0)]=function(_0xa3c634){const _0x5eb9c3=_0x4c6a01;VisuMZ[_0x5eb9c3(0x5e5)][_0x5eb9c3(0x8c4)][_0x5eb9c3(0x3a4)](this,_0xa3c634),this['clearTargetBattlerKey']();},VisuMZ['BattleCore'][_0x4c6a01(0xd5a)]=Game_Action[_0x4c6a01(0xc58)]['setItem'],Game_Action['prototype'][_0x4c6a01(0x4b3)]=function(_0x3ff063){const _0x2754a1=_0x4c6a01;VisuMZ['BattleCore'][_0x2754a1(0xd5a)][_0x2754a1(0x3a4)](this,_0x3ff063),this[_0x2754a1(0x839)]();},Game_Action['prototype']['makeDamageValue']=function(_0x3751f8,_0x31feb6){const _0x3b6b0e=_0x4c6a01;return VisuMZ['BattleCore'][_0x3b6b0e(0x32d)][_0x3b6b0e(0x625)][_0x3b6b0e(0xa99)][_0x3b6b0e(0x3a4)](this,_0x3751f8,_0x31feb6);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xa60)]=function(_0x40879d,_0xa6e098){const _0x4ad711=_0x4c6a01;return VisuMZ[_0x4ad711(0x5e5)][_0x4ad711(0x32d)][_0x4ad711(0x625)][_0x4ad711(0x54d)][_0x4ad711(0x3a4)](this,_0x40879d,_0xa6e098);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x9fe)]=function(_0x556f88,_0x3ceb14){const _0x105b17=_0x4c6a01;return VisuMZ['BattleCore']['Settings'][_0x105b17(0x625)][_0x105b17(0x602)]['call'](this,_0x556f88,_0x3ceb14);},VisuMZ['BattleCore']['Game_Action_itemHit']=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x1ef)],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x1ef)]=function(_0x498c82){const _0x59b08a=_0x4c6a01,_0x46eee3=this['item']()[_0x59b08a(0x407)];if(_0x46eee3[_0x59b08a(0x996)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x46eee3[_0x59b08a(0x996)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0x59b08a(0xdd7)===_0x59b08a(0xdd7))return Number(RegExp['$1'])/0x64;else _0xa16eff[_0x59b08a(0xc58)][_0x59b08a(0x67a)][_0x59b08a(0x3a4)](this),this['createAttachedSprites']();}else{let _0x2979c6=VisuMZ[_0x59b08a(0x5e5)][_0x59b08a(0xa21)]['call'](this,_0x498c82);return _0x2979c6=this[_0x59b08a(0x9a1)][_0x59b08a(0xa72)]*_0x2979c6+this[_0x59b08a(0x9a1)][_0x59b08a(0x75e)],_0x2979c6;}}},Game_Action['prototype'][_0x4c6a01(0x203)]=function(_0x1b6196){const _0x27d9e2=_0x4c6a01;if(!this[_0x27d9e2(0x6a7)]()[_0x27d9e2(0x6fc)][_0x27d9e2(0x572)])return 0x0;let _0x288d2c=VisuMZ[_0x27d9e2(0x5e5)]['Settings'][_0x27d9e2(0x625)][_0x27d9e2(0x740)][_0x27d9e2(0x3a4)](this,_0x1b6196);return _0x288d2c=this[_0x27d9e2(0x9a1)]['criticalHitRate']*_0x288d2c+this['_multipliers']['criticalHitFlat'],_0x288d2c;},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x4e4)]=function(_0x1a9cef){const _0x156134=_0x4c6a01;return _0x1a9cef=VisuMZ['BattleCore'][_0x156134(0x32d)][_0x156134(0x625)][_0x156134(0x286)][_0x156134(0x3a4)](this,_0x1a9cef),_0x1a9cef=this[_0x156134(0x9a1)][_0x156134(0x303)]*_0x1a9cef+this[_0x156134(0x9a1)][_0x156134(0x2af)],_0x1a9cef;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x677)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x1fb)],Game_Action['prototype'][_0x4c6a01(0x1fb)]=function(_0x48801f){const _0x596a40=_0x4c6a01;if(this[_0x596a40(0x574)]!==_0x596a40(0xc9b))return this[_0x596a40(0xd19)](_0x48801f);else{if(DataManager[_0x596a40(0x465)](this[_0x596a40(0x6a7)]())===_0x596a40(0x8f5)){if(_0x596a40(0xd72)===_0x596a40(0x2d3))_0x2d1ca8['push']('setActiveWeaponSet',_0x452ecb,_0x21b2ae);else return VisuMZ[_0x596a40(0x5e5)][_0x596a40(0x677)][_0x596a40(0x3a4)](this,_0x48801f);}else return this[_0x596a40(0xb64)](_0x48801f);}},Game_Action['prototype'][_0x4c6a01(0xb7a)]=function(_0x1243ae){this['_customDamageFormula']=_0x1243ae;},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xd19)]=function(_0x237d82){const _0x3a90ed=_0x4c6a01,_0x50b993=this[_0x3a90ed(0x6a7)](),_0x4ddd70=_0x50b993['damage'][_0x3a90ed(0x8d1)];_0x50b993[_0x3a90ed(0x6fc)][_0x3a90ed(0x8d1)]=this[_0x3a90ed(0x574)];let _0x57f160=VisuMZ[_0x3a90ed(0x5e5)]['Game_Action_evalDamageFormula'][_0x3a90ed(0x3a4)](this,_0x237d82);return _0x50b993[_0x3a90ed(0x6fc)][_0x3a90ed(0x8d1)]=_0x4ddd70,_0x57f160;},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x794)]=function(){const _0x2d4218=_0x4c6a01;if(this['item']()['note'][_0x2d4218(0x996)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x57d00a=String(RegExp['$1'])[_0x2d4218(0xc9f)]()[_0x2d4218(0x4e9)]();return _0x57d00a;}return _0x2d4218(0x8f5);},Game_Action[_0x4c6a01(0xc58)]['evalDamageFormulaBattleCore']=function(_0xc5fe16){const _0x417610=_0x4c6a01,_0x501130=DataManager['getDamageStyle'](this[_0x417610(0x6a7)]()),_0x40029d=VisuMZ[_0x417610(0x586)][_0x501130];try{return _0x40029d[_0x417610(0x982)]['call'](this,_0xc5fe16);}catch(_0x1936ac){if(_0x417610(0x90d)!==_0x417610(0x90d)){_0x58c0c6=(_0x18b0a0+_0x4efe29)/0x2;if(_0x52d637['battler']())_0x36540b+=_0x354bb9[_0x417610(0x72f)]()['height']/0x2;}else{if($gameTemp[_0x417610(0x271)]())console[_0x417610(0x690)](_0x1936ac);return VisuMZ[_0x417610(0x5e5)][_0x417610(0x677)][_0x417610(0x3a4)](this);}}},Game_Action['prototype'][_0x4c6a01(0xd8a)]=function(_0x67cfd9,_0x31379b){const _0x33ca99=_0x4c6a01;if(this['isCertainHit']())return _0x31379b;const _0x42c5ce=this['subject'](),_0x331314=_0x67cfd9;let _0x10fc20=[],_0x34e3af=[];_0x10fc20['push'](this[_0x33ca99(0x6ee)][_0x33ca99(0x25b)],this[_0x33ca99(0x6ee)]['arRedFlat']),_0x34e3af[_0x33ca99(0x543)](this['_armorPenetration'][_0x33ca99(0x24b)],this[_0x33ca99(0x6ee)][_0x33ca99(0x95f)]);const _0x5a5e5f=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x188313=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x19963b=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x29af83=this[_0x33ca99(0x8c7)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x10fc20=_0x10fc20['concat'](_0x331314[_0x33ca99(0x1ec)]()['map'](_0x41f1a1=>_0x41f1a1&&_0x41f1a1[_0x33ca99(0x407)]['match'](_0x5a5e5f)?Number(RegExp['$1']):0x0)),_0x34e3af=_0x34e3af[_0x33ca99(0x4db)](_0x331314['traitObjects']()[_0x33ca99(0x39f)](_0x6d0007=>_0x6d0007&&_0x6d0007['note'][_0x33ca99(0x996)](_0x188313)?Number(RegExp['$1'])/0x64:0x0)),_0x10fc20=_0x10fc20[_0x33ca99(0x4db)](_0x42c5ce['traitObjects']()[_0x33ca99(0x39f)](_0x46ad84=>_0x46ad84&&_0x46ad84['note'][_0x33ca99(0x996)](_0x19963b)?Number(RegExp['$1']):0x0)),_0x34e3af=_0x34e3af['concat'](_0x42c5ce[_0x33ca99(0x1ec)]()[_0x33ca99(0x39f)](_0x402835=>_0x402835&&_0x402835[_0x33ca99(0x407)][_0x33ca99(0x996)](_0x29af83)?Number(RegExp['$1'])/0x64:0x0));this[_0x33ca99(0x6a7)]()[_0x33ca99(0x407)][_0x33ca99(0x996)](_0x19963b)&&_0x10fc20[_0x33ca99(0x543)](Number(RegExp['$1']));if(this['item']()[_0x33ca99(0x407)][_0x33ca99(0x996)](_0x29af83)){if(_0x33ca99(0xa76)!==_0x33ca99(0xcfa))_0x34e3af[_0x33ca99(0x543)](Number(RegExp['$1']));else return this[_0x33ca99(0x393)]();}return _0x31379b=_0x10fc20['reduce']((_0x32644c,_0x45ed28)=>_0x32644c-_0x45ed28,_0x31379b),_0x31379b>0x0&&(_0x31379b=_0x34e3af[_0x33ca99(0x211)]((_0x494baf,_0x15e415)=>_0x494baf*(0x1-_0x15e415),_0x31379b)),_0x31379b;},VisuMZ['BattleCore'][_0x4c6a01(0x566)]=Game_Action['prototype']['executeDamage'],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xc6d)]=function(_0x332bef,_0xaeb120){const _0x3a9f1b=_0x4c6a01;_0xaeb120=_0xaeb120*this[_0x3a9f1b(0x9a1)]['damageRate'],_0xaeb120+=this[_0x3a9f1b(0x9a1)][_0x3a9f1b(0x8c9)]*(_0xaeb120>=0x0?0x1:-0x1),_0xaeb120=this[_0x3a9f1b(0xd53)](_0x3a9f1b(0x638),_0x332bef,_0xaeb120,![]),_0xaeb120=this[_0x3a9f1b(0x795)](_0xaeb120),_0xaeb120=Math[_0x3a9f1b(0x9c7)](_0xaeb120),this[_0x3a9f1b(0x906)]=_0xaeb120,this[_0x3a9f1b(0x5b9)]=this[_0x3a9f1b(0x5b9)]||0x0,this[_0x3a9f1b(0x5b9)]+=_0xaeb120,VisuMZ[_0x3a9f1b(0x5e5)][_0x3a9f1b(0x566)][_0x3a9f1b(0x3a4)](this,_0x332bef,_0xaeb120),this[_0x3a9f1b(0xd53)](_0x3a9f1b(0xa5e),_0x332bef,_0xaeb120,!![]);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x795)]=function(_0x51eef2){const _0x3bc5ea=_0x4c6a01;if(this[_0x3bc5ea(0xe15)]())return _0x51eef2;return _0x51eef2=this['applySoftDamageCap'](_0x51eef2),_0x51eef2=this['applyHardDamageCap'](_0x51eef2),_0x51eef2;},Game_Action['prototype'][_0x4c6a01(0xe15)]=function(){const _0x509e4d=_0x4c6a01,_0x32d967=/<BYPASS DAMAGE CAP>/i;if(this[_0x509e4d(0x6a7)]()['note'][_0x509e4d(0x996)](_0x32d967))return!![];if(this[_0x509e4d(0xbf1)]()[_0x509e4d(0x1ec)]()['some'](_0x355993=>_0x355993&&_0x355993[_0x509e4d(0x407)][_0x509e4d(0x996)](_0x32d967)))return!![];return!VisuMZ[_0x509e4d(0x5e5)][_0x509e4d(0x32d)][_0x509e4d(0x625)]['EnableDamageCap'];},Game_Action[_0x4c6a01(0xc58)]['applySoftDamageCap']=function(_0x1e44e0){const _0x8e9fe1=_0x4c6a01;if(!VisuMZ[_0x8e9fe1(0x5e5)][_0x8e9fe1(0x32d)][_0x8e9fe1(0x625)]['EnableSoftCap'])return _0x1e44e0;const _0x29a6bb=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x8e9fe1(0x6a7)]()['note'][_0x8e9fe1(0x996)](_0x29a6bb))return _0x1e44e0;if(this[_0x8e9fe1(0xbf1)]()[_0x8e9fe1(0x1ec)]()['some'](_0x2dcc2a=>_0x2dcc2a&&_0x2dcc2a['note']['match'](_0x29a6bb)))return _0x8e9fe1(0xd9a)==='KnebA'?_0x1e44e0:_0x396e42[_0x8e9fe1(0x5e5)]['Settings'][_0x8e9fe1(0x625)][_0x8e9fe1(0xa99)]['call'](this,_0x35fd71,_0x4c1553);const _0x683f19=_0x1e44e0<0x0?-0x1:0x1;_0x1e44e0=Math['abs'](_0x1e44e0);let _0x1c4db4=this[_0x8e9fe1(0xbf1)]()[_0x8e9fe1(0xc5d)]();this[_0x8e9fe1(0x6a7)]()[_0x8e9fe1(0x407)][_0x8e9fe1(0x996)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x1c4db4+=Number(RegExp['$1'])/0x64);_0x1c4db4=_0x1c4db4[_0x8e9fe1(0x381)](0.01,0x1);const _0x133a9d=this[_0x8e9fe1(0x66d)](),_0x422852=_0x1c4db4*_0x133a9d;if(_0x1e44e0>_0x422852&&_0x133a9d>_0x422852){if('JtOjD'!==_0x8e9fe1(0x762)){_0x1ec02f[_0x8e9fe1(0x5e5)][_0x8e9fe1(0xd16)]['call'](this,_0x39699a),this[_0x8e9fe1(0x326)](),this['setupBattleCoreData']();const _0x1baaca=this['battler']();_0x1baaca&&(_0x1baaca[_0x8e9fe1(0x61a)]=_0x3eddb0,_0x1baaca[_0x8e9fe1(0xc29)](this));}else{_0x1e44e0-=_0x422852;const _0x21113c=VisuMZ[_0x8e9fe1(0x5e5)]['Settings']['Damage'][_0x8e9fe1(0xca2)],_0x1ce09f=Math['max'](0x1-_0x1e44e0/((_0x133a9d-_0x422852)*_0x21113c+_0x1e44e0),0.01);_0x1e44e0*=_0x1ce09f,_0x1e44e0+=_0x422852;}}return _0x1e44e0*_0x683f19;},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x66d)]=function(){const _0x5f2fab=_0x4c6a01;return this[_0x5f2fab(0x6a7)]()[_0x5f2fab(0x407)][_0x5f2fab(0x996)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x5f2fab(0xbf1)]()['hardDamageCap']();},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x392)]=function(_0x564862){const _0x28d2a8=_0x4c6a01;console[_0x28d2a8(0x690)](_0x564862);let _0xaad2e=this[_0x28d2a8(0x66d)]();return _0x564862[_0x28d2a8(0x381)](-_0xaad2e,_0xaad2e);},Game_Action['prototype'][_0x4c6a01(0xd7b)]=function(){const _0xc8bd2c=_0x4c6a01;if(!this[_0xc8bd2c(0x6a7)]())return![];return(this[_0xc8bd2c(0x6a7)]()[_0xc8bd2c(0x407)]||'')[_0xc8bd2c(0x996)](/<DISPERSE DAMAGE>/i);},Game_Action['prototype']['disperseDamage']=function(_0x4460ef){const _0x3c56ff=_0x4c6a01;if(this[_0x3c56ff(0xd7b)]()){let _0x5ed968=BattleManager[_0x3c56ff(0x780)];_0x4460ef/=_0x5ed968['length'],this['isAttack']()&&(_0x4460ef*=this['subject']()['attackTimesAdd']()+0x1),_0x4460ef=_0x4460ef>0x0?Math[_0x3c56ff(0xa32)](_0x4460ef):Math['floor'](_0x4460ef);}return _0x4460ef;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xcda)]=Game_Action['prototype'][_0x4c6a01(0xd2d)],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xd2d)]=function(_0x4cd5f5,_0x47d5dd){const _0x3cd124=_0x4c6a01;let _0x61c636=VisuMZ[_0x3cd124(0x5e5)][_0x3cd124(0xcda)]['call'](this,_0x4cd5f5,_0x47d5dd);return this['disperseDamage'](_0x61c636);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x6b6)]=function(_0x129453,_0x88d23a){const _0x2e50ce=_0x4c6a01;let _0x4f813b=(_0x129453[_0x2e50ce(0x769)]*_0x88d23a[_0x2e50ce(0x5c7)]+_0x88d23a[_0x2e50ce(0xbe6)])*_0x129453['rec'];_0x4f813b=this['disperseDamage'](_0x4f813b);if(this[_0x2e50ce(0xa56)]()){if(_0x2e50ce(0x529)!==_0x2e50ce(0x6d8))_0x4f813b*=this[_0x2e50ce(0xbf1)]()['pha'];else{if(this['_battlePortrait']===_0x22455e)this[_0x2e50ce(0x333)]();this[_0x2e50ce(0x6ff)]=_0x58db57;if(_0x2fe8a7[_0x2e50ce(0x503)]()&&_0x11d8df[_0x2e50ce(0x9df)]()[_0x2e50ce(0x864)](this)){const _0x5c3466=_0x5d191f['_scene'][_0x2e50ce(0x270)];_0x5c3466&&_0x5c3466[_0x2e50ce(0x308)](this);}}}_0x4f813b=Math[_0x2e50ce(0x989)](_0x4f813b),_0x4f813b!==0x0&&(_0x129453[_0x2e50ce(0xb0a)](_0x4f813b),this[_0x2e50ce(0x76a)](_0x129453));},Game_Action['prototype'][_0x4c6a01(0xb95)]=function(_0x55ab8b,_0x2485be){const _0x4a3fa6=_0x4c6a01;let _0x14c91f=(_0x55ab8b['mmp']*_0x2485be[_0x4a3fa6(0x5c7)]+_0x2485be[_0x4a3fa6(0xbe6)])*_0x55ab8b[_0x4a3fa6(0x7c9)];_0x14c91f=this[_0x4a3fa6(0xb73)](_0x14c91f),this['isItem']()&&(_0x14c91f*=this['subject']()[_0x4a3fa6(0xc32)]),_0x14c91f=Math[_0x4a3fa6(0x989)](_0x14c91f),_0x14c91f!==0x0&&(_0x55ab8b['gainMp'](_0x14c91f),this[_0x4a3fa6(0x76a)](_0x55ab8b));},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xa9b)]=function(_0x20d344,_0x1ceba8){const _0x330066=_0x4c6a01;let _0x28582c=Math[_0x330066(0x989)](_0x1ceba8['value1']);_0x28582c=this[_0x330066(0xb73)](_0x28582c),_0x28582c!==0x0&&(_0x20d344[_0x330066(0x8aa)](_0x28582c),this[_0x330066(0x76a)](_0x20d344));},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x580)]=Game_Action[_0x4c6a01(0xc58)]['apply'],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x8f3)]=function(_0x102e55){const _0x160a80=_0x4c6a01;this[_0x160a80(0xd53)]('PreApply%1JS',_0x102e55,0x0,!![]),VisuMZ[_0x160a80(0x5e5)][_0x160a80(0x580)]['call'](this,_0x102e55),this[_0x160a80(0xd53)](_0x160a80(0xddb),_0x102e55,this[_0x160a80(0x906)]||0x0,!![]),this['applyResultSwitches'](_0x102e55);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xd53)]=function(_0x4d685,_0x284a40,_0x202cf9,_0x264956){const _0x305258=_0x4c6a01;if(this[_0x305258(0x521)]||this[_0x305258(0x752)])return;_0x202cf9=_0x202cf9||0x0;const _0x302c2f=_0x202cf9,_0x8c0947=VisuMZ[_0x305258(0x5e5)]['Settings'][_0x305258(0x4bd)],_0x509b34=_0x4d685[_0x305258(0x511)]('');if(_0x8c0947[_0x509b34]){_0x202cf9=_0x8c0947[_0x509b34]['call'](this,_0x202cf9,_0x284a40);if(_0x264956)_0x202cf9=_0x302c2f;}let _0x4de72f=VisuMZ[_0x305258(0x5e5)][_0x305258(0xcad)](this[_0x305258(0x6a7)](),_0x4d685[_0x305258(0x511)](''));if(VisuMZ[_0x305258(0x5e5)]['JS'][_0x4de72f]){_0x202cf9=VisuMZ[_0x305258(0x5e5)]['JS'][_0x4de72f][_0x305258(0x3a4)](this,this[_0x305258(0xbf1)](),_0x284a40,this[_0x305258(0x6a7)](),_0x202cf9);if(_0x264956)_0x202cf9=_0x302c2f;}for(const _0x2af810 of this[_0x305258(0xbf1)]()['traitObjects']()){if(!_0x2af810)continue;_0x4de72f=VisuMZ[_0x305258(0x5e5)][_0x305258(0xcad)](_0x2af810,_0x4d685[_0x305258(0x511)](_0x305258(0x667)));if(VisuMZ[_0x305258(0x5e5)]['JS'][_0x4de72f]){_0x202cf9=VisuMZ[_0x305258(0x5e5)]['JS'][_0x4de72f][_0x305258(0x3a4)](this,this[_0x305258(0xbf1)](),_0x284a40,_0x2af810,_0x202cf9);if(_0x264956)_0x202cf9=_0x302c2f;}}for(const _0x3ec557 of _0x284a40[_0x305258(0x1ec)]()){if(!_0x3ec557)continue;_0x4de72f=VisuMZ[_0x305258(0x5e5)][_0x305258(0xcad)](_0x3ec557,_0x4d685[_0x305258(0x511)]('AsTarget'));if(VisuMZ[_0x305258(0x5e5)]['JS'][_0x4de72f]){if(_0x305258(0xa41)===_0x305258(0x686)){if(this[_0x305258(0x6b2)])return this[_0x305258(0x6b2)];return this[_0x305258(0x6b2)]=_0x419ce4['_scene']['battleLayoutStyle'](),this[_0x305258(0x6b2)];}else{_0x202cf9=VisuMZ[_0x305258(0x5e5)]['JS'][_0x4de72f][_0x305258(0x3a4)](this,this['subject'](),_0x284a40,_0x3ec557,_0x202cf9);if(_0x264956)_0x202cf9=_0x302c2f;}}}return _0x202cf9;},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x61f)]=function(_0xd3f697){const _0x38e442=_0x4c6a01,_0x1225b6=this[_0x38e442(0x5b9)]||0x0,_0x51f665=VisuMZ['BattleCore'][_0x38e442(0x32d)][_0x38e442(0x4bd)],_0x5b4305=_0xd3f697[_0x38e442(0x511)]('');_0x51f665[_0x5b4305]&&(_0x38e442(0x3ed)!==_0x38e442(0x3ed)?(this[_0x38e442(0x4f1)](),this[_0x38e442(0xcc7)]()):_0x51f665[_0x5b4305]['call'](this,_0x1225b6));let _0x12d873=VisuMZ[_0x38e442(0x5e5)][_0x38e442(0xcad)](this['item'](),_0xd3f697);VisuMZ[_0x38e442(0x5e5)]['JS'][_0x12d873]&&VisuMZ[_0x38e442(0x5e5)]['JS'][_0x12d873][_0x38e442(0x3a4)](this,this['subject'](),this[_0x38e442(0xbf1)](),this[_0x38e442(0x6a7)](),_0x1225b6);for(const _0x49107f of this[_0x38e442(0xbf1)]()[_0x38e442(0x1ec)]()){if(!_0x49107f)continue;_0x12d873=VisuMZ['BattleCore'][_0x38e442(0xcad)](_0x49107f,_0xd3f697),VisuMZ[_0x38e442(0x5e5)]['JS'][_0x12d873]&&VisuMZ[_0x38e442(0x5e5)]['JS'][_0x12d873][_0x38e442(0x3a4)](this,this['subject'](),this[_0x38e442(0xbf1)](),_0x49107f,_0x1225b6);}},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xb51)]=function(){const _0x368f67=_0x4c6a01;return VisuMZ[_0x368f67(0x5e5)][_0x368f67(0x32d)][_0x368f67(0x4bd)][_0x368f67(0x351)]['call'](this);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xae5)]=function(){const _0x433b06=_0x4c6a01;return VisuMZ[_0x433b06(0x5e5)][_0x433b06(0x32d)][_0x433b06(0x4bd)]['AllowRandomSpeed'];},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x5fa)]=function(){const _0x21b44f=_0x4c6a01;if(this[_0x21b44f(0x432)]===_0x21b44f(0x4d8))return![];if(this[_0x21b44f(0x432)]===_0x21b44f(0x2c9))return![];if(!this[_0x21b44f(0x6a7)]())return![];return this[_0x21b44f(0x6a7)]()[_0x21b44f(0x407)][_0x21b44f(0x996)](/<JS TARGETS>/i);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x841)]=function(){const _0x5d5f79=_0x4c6a01;if(this['_targetBattlerKey']==='all\x20actors')return![];if(this[_0x5d5f79(0x432)]===_0x5d5f79(0x2c9))return![];if(!this[_0x5d5f79(0xd4e)]&&this[_0x5d5f79(0xbf1)]()[_0x5d5f79(0x707)]())return![];if(this['isCustomBattleScope']())return!![];if(!this[_0x5d5f79(0x6a7)]())return![];return typeof this[_0x5d5f79(0x6a7)]()[_0x5d5f79(0x262)]===_0x5d5f79(0xb05);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x62c)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x7e8)],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x7e8)]=function(){const _0x198923=_0x4c6a01;if(this['_targetBattlerKey']===_0x198923(0x4d8))return![];if(this[_0x198923(0x432)]===_0x198923(0x2c9))return!![];return this['isBattleCoreTargetScope']()&&!this[_0x198923(0x5fa)]()?this[_0x198923(0x4ac)]():VisuMZ[_0x198923(0x5e5)][_0x198923(0x62c)][_0x198923(0x3a4)](this);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x4ac)]=function(){const _0x2e8099=_0x4c6a01,_0x176665=this[_0x2e8099(0x6a7)]()[_0x2e8099(0x262)];if(_0x176665[_0x2e8099(0x996)](/ANY/i))return!![];return _0x176665['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x887)]=Game_Action['prototype']['isForFriend'],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x4d1)]=function(){const _0x173cc9=_0x4c6a01;if(this[_0x173cc9(0x432)]==='all\x20actors')return!![];if(this['_targetBattlerKey']==='all\x20enemies')return![];if(this[_0x173cc9(0x841)]()&&!this[_0x173cc9(0x5fa)]()){if(_0x173cc9(0x831)===_0x173cc9(0x831))return this[_0x173cc9(0xb2a)]();else _0x272b35+=_0x19001b;}else return VisuMZ['BattleCore'][_0x173cc9(0x887)][_0x173cc9(0x3a4)](this);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xb2a)]=function(){const _0x1922f1=_0x4c6a01,_0xf7478e=this[_0x1922f1(0x6a7)]()[_0x1922f1(0x262)];return _0xf7478e[_0x1922f1(0x996)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x4c6a01(0xc58)]['isForAnyone']=function(){const _0x514b84=_0x4c6a01;if(this[_0x514b84(0x841)]()&&!this[_0x514b84(0x5fa)]()){if('vJpzJ'!==_0x514b84(0x93c)){const _0x281728=this[_0x514b84(0x6a7)]()[_0x514b84(0x262)];return _0x281728['match'](/(?:ENEMY|FOE)/i)&&_0x281728[_0x514b84(0x996)](/OR/i)&&_0x281728[_0x514b84(0x996)](/(?:ALLY|FRIEND)/i);}else return _0x9b6ec3[_0x514b84(0x407)][_0x514b84(0x996)](/<COMMAND ICON: (\d+)>/i)?_0x34e64b(_0x2f20e9['$1']):_0x5212b5[_0x514b84(0x5be)];}else{if('GePjV'!=='tLvmi')return![];else _0x2b9e11=_0x111900;}},Game_Action['prototype']['isForAnyoneFocusFriends']=function(){const _0x3f5f97=_0x4c6a01;if(this['isForAnyone']()){if(_0x3f5f97(0x87f)===_0x3f5f97(0xe19))this[_0x3f5f97(0x94b)](_0x3f5f97(0x7e7));else{const _0x1cad65=this[_0x3f5f97(0x6a7)]()[_0x3f5f97(0x262)];if(_0x1cad65[_0x3f5f97(0x996)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}}return![];},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xc06)]=function(){const _0x433ee4=_0x4c6a01;if(this[_0x433ee4(0x90a)]()){const _0x50b839=this[_0x433ee4(0x6a7)]()['scope'];if(_0x50b839[_0x433ee4(0x996)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x4c6a01(0x5e5)]['Game_Action_isForAliveFriend']=Game_Action['prototype'][_0x4c6a01(0x5fd)],Game_Action['prototype'][_0x4c6a01(0x5fd)]=function(){const _0x499df2=_0x4c6a01;if(this['isBattleCoreTargetScope']()&&!this[_0x499df2(0x5fa)]())return this[_0x499df2(0xcdf)]();else{if(_0x499df2(0xd13)==='nFYzi'){const _0x2c3a90=this[_0x499df2(0x651)]();this[_0x499df2(0x396)](_0x2c3a90);}else return VisuMZ[_0x499df2(0x5e5)][_0x499df2(0x7bb)]['call'](this);}},Game_Action['prototype'][_0x4c6a01(0xcdf)]=function(){if(this['isForAnyone']())return!![];return![];},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x34d)]=function(){const _0x74ba99=_0x4c6a01;return this['item']()&&this[_0x74ba99(0x6a7)]()['note'][_0x74ba99(0x996)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x4c6a01(0x5e5)]['Game_Action_isForOne']=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x6ce)],Game_Action[_0x4c6a01(0xc58)]['isForOne']=function(){const _0x3750f4=_0x4c6a01;if(this['_targetBattlerKey']===_0x3750f4(0x4d8))return![];if(this[_0x3750f4(0x432)]===_0x3750f4(0x2c9))return![];if(this[_0x3750f4(0x841)]()&&!this[_0x3750f4(0x5fa)]())return this['isForOneBattleCore']();else{if(_0x3750f4(0x6f7)!==_0x3750f4(0x6f7)){_0x151e38['BattleCore'][_0x3750f4(0x276)][_0x3750f4(0x3a4)](this);if(this['item']()[_0x3750f4(0x407)][_0x3750f4(0x996)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0x3750f4(0x407)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x136178[_0x3750f4(0x99b)]=[]),_0x17f404[_0x3750f4(0xa2f)](this['item']())&&(_0x206941[_0x3750f4(0x99b)]=[]);}else return VisuMZ[_0x3750f4(0x5e5)][_0x3750f4(0x5ce)][_0x3750f4(0x3a4)](this);}},Game_Action[_0x4c6a01(0xc58)]['isForOneBattleCore']=function(){if(this['isForAnyone']())return!![];return![];},VisuMZ[_0x4c6a01(0x5e5)]['Game_Action_isForRandom']=Game_Action[_0x4c6a01(0xc58)]['isForRandom'],Game_Action[_0x4c6a01(0xc58)]['isForRandom']=function(){const _0x533868=_0x4c6a01;if(this[_0x533868(0x432)]===_0x533868(0x4d8))return![];if(this[_0x533868(0x432)]==='all\x20enemies')return![];if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()){if(_0x533868(0x365)==='BHoTv')_0x335664['BattleCore'][_0x533868(0x63f)][_0x533868(0x3a4)](this,_0x22e1fe,_0x40eaf6,_0xa6fad5),this['_battlerKeyCache']={};else return this[_0x533868(0x829)]();}else return VisuMZ['BattleCore'][_0x533868(0xa8c)]['call'](this);},Game_Action['prototype'][_0x4c6a01(0x829)]=function(){const _0xed9a34=_0x4c6a01,_0x3d896c=this[_0xed9a34(0x6a7)]()['scope'];return _0x3d896c[_0xed9a34(0x996)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xd87)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xa68)],Game_Action[_0x4c6a01(0xc58)]['isForAll']=function(){const _0x4b828f=_0x4c6a01;if(this[_0x4b828f(0x432)]===_0x4b828f(0x4d8))return!![];if(this[_0x4b828f(0x432)]===_0x4b828f(0x2c9))return!![];return VisuMZ['BattleCore'][_0x4b828f(0xd87)][_0x4b828f(0x3a4)](this);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xd92)]=function(){const _0x426e60=_0x4c6a01;if(!this[_0x426e60(0x6a7)]())return![];if(this[_0x426e60(0xb71)]())return![];return(this[_0x426e60(0x6a7)]()[_0x426e60(0x407)]||'')[_0x426e60(0x996)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore'][_0x4c6a01(0x678)]=Game_Action['prototype'][_0x4c6a01(0xb82)],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xb82)]=function(_0x217844){const _0x1803b0=_0x4c6a01;if(this[_0x1803b0(0x34d)]()&&_0x217844===this[_0x1803b0(0xbf1)]())return![];return VisuMZ[_0x1803b0(0x5e5)][_0x1803b0(0x678)][_0x1803b0(0x3a4)](this,_0x217844);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x38e)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x51b)],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x51b)]=function(){const _0x8e196=_0x4c6a01,_0x198fcf=VisuMZ['BattleCore'][_0x8e196(0x38e)][_0x8e196(0x3a4)](this);if(this[_0x8e196(0x34d)]())_0x198fcf[_0x8e196(0xbde)](this[_0x8e196(0xbf1)]());return _0x198fcf;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xbbe)]=Game_Action[_0x4c6a01(0xc58)]['needsSelection'],Game_Action[_0x4c6a01(0xc58)]['needsSelection']=function(){const _0x54e54f=_0x4c6a01;return this['isBattleCoreTargetScope']()&&!this[_0x54e54f(0x5fa)]()?this['needsSelectionBattleCore']():VisuMZ[_0x54e54f(0x5e5)][_0x54e54f(0xbbe)]['call'](this);},Game_Action['prototype'][_0x4c6a01(0x3e7)]=function(){const _0x15555c=_0x4c6a01,_0x4599e3=this[_0x15555c(0x6a7)]()['scope'];if(_0x4599e3[_0x15555c(0x996)](/RANDOM/i))return![];if(_0x4599e3[_0x15555c(0x996)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x4599e3[_0x15555c(0x996)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x4599e3[_0x15555c(0x996)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x4599e3[_0x15555c(0x996)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x15555c(0x5e5)][_0x15555c(0xbbe)][_0x15555c(0x3a4)](this);},VisuMZ['BattleCore']['Game_Action_makeTargets']=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x5b4)],Game_Action[_0x4c6a01(0xc58)]['makeTargets']=function(){const _0x435f8c=_0x4c6a01;let _0x470d38=[];if(this[_0x435f8c(0x841)]()){if(this[_0x435f8c(0x5fa)]()){if(_0x435f8c(0xdfd)!=='airtC')return _0x4b7452=_0x5484fb(_0x74e5d),_0x57be5f['match'](/#(.*)/i)?_0x435f8c(0x8c6)[_0x435f8c(0x511)](_0x5baddd(_0x381c07['$1'])):this[_0x435f8c(0xbe5)](_0x4d66b3(_0x4ad105));else _0x470d38=this[_0x435f8c(0xadd)]();}else{if('IhxMj'!=='IhxMj')return this['basicGaugesY'](_0xfd6c82)-this['gaugeLineHeight']();else _0x470d38=this[_0x435f8c(0xc81)]();}}else _0x435f8c(0xb1f)===_0x435f8c(0x2f6)?(this[_0x435f8c(0x67f)]!==_0x2c3a6f||this[_0x435f8c(0x8d8)]!==_0x4c9953)&&(this[_0x435f8c(0x67f)]=_0x2b185d,this['_targetHomeY']=_0x3a843a,this[_0x435f8c(0x67c)]=_0x55478d,this[_0x435f8c(0x96d)]=_0x4a7d55,this[_0x435f8c(0x73d)]=_0x4bc5d9,_0x56a2d9<=0x0&&this['onHomeMoveEnd']()):_0x470d38=VisuMZ[_0x435f8c(0x5e5)][_0x435f8c(0x38a)]['call'](this);return _0x470d38=this[_0x435f8c(0x6db)](_0x470d38),_0x470d38;},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x845)]=function(){const _0x372b7c=_0x4c6a01;return this['subject']()['isActor']()&&!this['subject']()[_0x372b7c(0x77d)]();},Game_Action['prototype'][_0x4c6a01(0xadd)]=function(){const _0x34b22e=_0x4c6a01,_0x134ab5=VisuMZ[_0x34b22e(0x5e5)][_0x34b22e(0xcad)](this[_0x34b22e(0x6a7)](),_0x34b22e(0x6d1));if(VisuMZ[_0x34b22e(0x5e5)]['JS'][_0x134ab5]){targets=VisuMZ[_0x34b22e(0x5e5)]['Game_Action_makeTargets'][_0x34b22e(0x3a4)](this);const _0x487ecf=VisuMZ[_0x34b22e(0x5e5)][_0x34b22e(0xcad)](this[_0x34b22e(0x6a7)](),_0x34b22e(0x6d1));return targets=VisuMZ['BattleCore']['JS'][_0x487ecf]['call'](this,this[_0x34b22e(0xbf1)](),targets),this['repeatTargets'](targets);}return this[_0x34b22e(0xc81)]();},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xc81)]=function(){const _0x2ac753=_0x4c6a01;let _0x5dab81=[];const _0x22fa43=String(this['item']()[_0x2ac753(0x262)]);if(this[_0x2ac753(0xc06)]())return this[_0x2ac753(0x845)]()?(_0x5dab81=this[_0x2ac753(0xa94)](),this[_0x2ac753(0xc9e)](_0x5dab81)):(this[_0x2ac753(0xd50)]=-0x1,_0x5dab81[_0x2ac753(0x543)](...this[_0x2ac753(0xb3b)]()),this[_0x2ac753(0xc9e)](_0x5dab81));if(this['isForAnyoneFocusFriends']()){if(this[_0x2ac753(0x845)]())return _0x5dab81=this[_0x2ac753(0xa94)](),this['repeatTargets'](_0x5dab81);else{if(Imported['VisuMZ_3_BattleAI']){if(VisuMZ['BattleAI'][_0x2ac753(0x542)]<1.19){if(_0x2ac753(0x524)!==_0x2ac753(0x524))return this[_0x2ac753(0x2fc)]&&this[_0x2ac753(0x2fc)]['canUseItemCommand']();else{let _0xc9c089='';_0xc9c089+=_0x2ac753(0x94a),_0xc9c089+=_0x2ac753(0x7a7),_0xc9c089+=_0x2ac753(0x5eb),alert(_0xc9c089),SceneManager[_0x2ac753(0x6d4)]();}}}return this[_0x2ac753(0xd50)]=-0x1,_0x5dab81[_0x2ac753(0x543)](...this[_0x2ac753(0x994)]()),this[_0x2ac753(0xc9e)](_0x5dab81);}}if(_0x22fa43[_0x2ac753(0x996)](/(\d+) RANDOM ANY/i)){let _0x275f55=Number(RegExp['$1']);while(_0x275f55--){const _0x537a29=Math[_0x2ac753(0xb10)](0x2)===0x0?this[_0x2ac753(0x22c)]():this[_0x2ac753(0xbe7)]();_0x5dab81[_0x2ac753(0x543)](_0x537a29[_0x2ac753(0x5dc)]());}return this[_0x2ac753(0xc9e)](_0x5dab81);}if(_0x22fa43['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x5b5cab=Number(RegExp['$1']);while(_0x5b5cab--){if(_0x2ac753(0x4f0)===_0x2ac753(0x273)){const _0x2b248b=_0x5e10a6[_0x2ac753(0x93e)](_0xa4fd01[_0x2ac753(0xc9f)]()[_0x2ac753(0x4e9)]());_0x2b248b>=0x0&&_0x2b248b<=0x7&&_0x2bf73c['isBuffAffected'](_0x2b248b)&&_0x515044[_0x2ac753(0x7b5)](_0x2b248b);}else _0x5dab81[_0x2ac753(0x543)](this[_0x2ac753(0x22c)]()[_0x2ac753(0x5dc)]());}return this[_0x2ac753(0xc9e)](_0x5dab81);}if(_0x22fa43[_0x2ac753(0x996)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x2ac753(0x2f5)!==_0x2ac753(0x2f5))return _0x303dcc[_0x2ac753(0x5e5)][_0x2ac753(0x32d)]['Enemy'][_0x2ac753(0x891)];else{let _0x4845bb=Number(RegExp['$1']);while(_0x4845bb--){_0x5dab81[_0x2ac753(0x543)](this[_0x2ac753(0xbe7)]()[_0x2ac753(0x5dc)]());}return this[_0x2ac753(0xc9e)](_0x5dab81);}}if(_0x22fa43[_0x2ac753(0x996)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x5dab81['push'](...this['friendsUnit']()['aliveMembers']()[_0x2ac753(0xac7)](_0x4d2549=>_0x4d2549!==this[_0x2ac753(0xbf1)]())),this[_0x2ac753(0xc9e)](_0x5dab81);return VisuMZ['BattleCore'][_0x2ac753(0x38a)][_0x2ac753(0x3a4)](this);},Game_Action[_0x4c6a01(0xc58)]['randomTargets']=function(_0x540c83){const _0x393ede=_0x4c6a01,_0x56529c=[];for(let _0x7579a6=0x0;_0x7579a6<this['numTargets']();_0x7579a6++){_0x56529c['push'](_0x540c83[_0x393ede(0x5dc)]());}return _0x56529c;},Game_Action[_0x4c6a01(0xc58)]['applyTargetFilters']=function(_0x545b3f){const _0x34911f=_0x4c6a01;if(!this['item']())return _0x545b3f;const _0x5ccf80=this['item']()['note'];if(this[_0x34911f(0x34d)]()){if('CjFBU'!==_0x34911f(0x9a2)){if(!_0xe7c7e1['BattleCore'][_0x34911f(0x32d)][_0x34911f(0x64f)][_0x34911f(0x452)])return;const _0x3e73cf=_0x458cc0['visualHpGauge'],_0x957360=_0x34911f(0xc47);this[_0x34911f(0x39b)](_0x3e73cf,_0x957360);}else{this[_0x34911f(0xa68)]()&&_0x545b3f[_0x34911f(0xbde)](this[_0x34911f(0xbf1)]());if(_0x545b3f[_0x34911f(0x864)](this['subject']())){const _0x2def65=this[_0x34911f(0xbe7)]()['aliveMembers']()[_0x34911f(0xbde)](this[_0x34911f(0xbf1)]());if(_0x2def65[_0x34911f(0x991)]>0x0){_0x2def65[_0x34911f(0xa04)]((_0x58add6,_0x1eedc9)=>_0x58add6['hpRate']()-_0x1eedc9['hpRate']());while(_0x545b3f[_0x34911f(0x864)](this[_0x34911f(0xbf1)]())){if(_0x34911f(0x35a)===_0x34911f(0x927))this[_0x34911f(0x6fe)]=!![],_0x26f87b[_0x34911f(0xdd5)](_0x51cd8b[_0x34911f(0xdd3)]),_0x215ab5[_0x34911f(0x68c)](),_0x5f3ed4[_0x34911f(0x7cd)][_0x34911f(0xe17)]=!![];else{const _0x2c22dc=_0x545b3f[_0x34911f(0x93e)](this[_0x34911f(0xbf1)]());_0x545b3f[_0x2c22dc]=_0x2def65[Math[_0x34911f(0xb10)](_0x2def65[_0x34911f(0x991)])];}}}else _0x545b3f['remove'](this[_0x34911f(0xbf1)]());}}}return _0x545b3f;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x853)]=Game_Action[_0x4c6a01(0xc58)]['itemEffectAddAttackState'],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x657)]=function(_0x500494,_0x4fd58f){const _0x827c79=_0x4c6a01;VisuMZ[_0x827c79(0x5e5)][_0x827c79(0x853)]['call'](this,_0x500494,_0x4fd58f);if(!_0x500494[_0x827c79(0x5af)]())return;for(const _0x343cb5 of this[_0x827c79(0xbf1)]()[_0x827c79(0x8fe)]()){if(_0x343cb5===_0x500494[_0x827c79(0xaee)]()){let _0x396046=_0x4fd58f[_0x827c79(0x5c7)];_0x396046*=_0x500494[_0x827c79(0x7b6)](_0x343cb5),_0x396046*=this[_0x827c79(0xbf1)]()[_0x827c79(0x87e)](_0x343cb5),_0x396046*=this['lukEffectRate'](_0x500494),Math[_0x827c79(0x8f7)]()<_0x396046&&(_0x500494[_0x827c79(0x7ff)]=!![],this['makeSuccess'](_0x500494));}}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xc51)]=Game_Action['prototype'][_0x4c6a01(0x31b)],Game_Action[_0x4c6a01(0xc58)]['itemEffectAddNormalState']=function(_0x488975,_0x6fdf68){const _0x5c7e3d=_0x4c6a01;VisuMZ[_0x5c7e3d(0x5e5)][_0x5c7e3d(0xc51)]['call'](this,_0x488975,_0x6fdf68);if(!_0x488975[_0x5c7e3d(0x5af)]())return;if(_0x6fdf68[_0x5c7e3d(0x909)]!==_0x488975['deathStateId']())return;let _0x448d20=_0x6fdf68['value1'];!this[_0x5c7e3d(0x79f)]()&&(_0x5c7e3d(0x1f3)===_0x5c7e3d(0x5c4)?this[_0x5c7e3d(0xc48)]():(_0x448d20*=_0x488975[_0x5c7e3d(0x7b6)](_0x6fdf68[_0x5c7e3d(0x909)]),_0x448d20*=this[_0x5c7e3d(0xb39)](_0x488975)));if(Math[_0x5c7e3d(0x8f7)]()<_0x448d20){if(_0x5c7e3d(0x615)!==_0x5c7e3d(0x4e8))_0x488975['_deathStateApplied']=!![],this['makeSuccess'](_0x488975);else{const _0x326446=_0x273bbd[_0x5c7e3d(0x5e5)][_0x5c7e3d(0x32d)]['BattleLayout'];if(_0x326446[_0x5c7e3d(0x60f)])return;_0x4c82f2[_0x5c7e3d(0xc58)][_0x5c7e3d(0x776)][_0x5c7e3d(0x3a4)](this,_0x37a790);}}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x54f)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x705)],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x705)]=function(){const _0x1f0c0a=_0x4c6a01;VisuMZ['BattleCore'][_0x1f0c0a(0x54f)][_0x1f0c0a(0x3a4)](this),this['applyGlobalCommonEventNotetags'](),this[_0x1f0c0a(0x336)]();},Game_Action[_0x4c6a01(0xc58)]['applyGlobalCommonEventNotetags']=function(){const _0x29d466=_0x4c6a01;if(!SceneManager[_0x29d466(0x503)]())return;const _0x584347=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x4d696f=this[_0x29d466(0x6a7)]()[_0x29d466(0x407)][_0x29d466(0x996)](_0x584347);if(_0x4d696f)for(const _0x140e48 of _0x4d696f){if(_0x29d466(0xa58)!==_0x29d466(0x495)){if(!_0x140e48)continue;_0x140e48[_0x29d466(0x996)](_0x584347);const _0x1fda5b=String(RegExp['$1'])[_0x29d466(0xcaf)](',')[_0x29d466(0x39f)](_0x8f5dc0=>String(_0x8f5dc0)[_0x29d466(0x4e9)]()),_0x27cb20=_0x1fda5b['map'](_0x25d511=>DataManager[_0x29d466(0x51a)](_0x25d511));for(const _0x571071 of _0x27cb20){const _0x697f95=$dataCommonEvents[_0x571071];_0x697f95&&$gameTemp[_0x29d466(0xdd5)](_0x571071);}}else _0x25b099&&(_0x415166[_0x29d466(0xca5)]=_0x4f0f7c[_0x29d466(0xca5)]||{},_0xdba85c[_0x29d466(0xca5)][_0x29d466(0x207)]=0x0),_0xcef2c0[_0x29d466(0xa8e)](_0x1a08f0,_0x58a71b,_0x4575eb,_0x4267b0);}},DataManager[_0x4c6a01(0x51a)]=function(_0x112fcf){const _0x30aec1=_0x4c6a01;_0x112fcf=_0x112fcf['toUpperCase']()[_0x30aec1(0x4e9)](),this['_commonEventIDs']=this[_0x30aec1(0x5a0)]||{};if(this[_0x30aec1(0x5a0)][_0x112fcf])return this[_0x30aec1(0x5a0)][_0x112fcf];for(const _0x3d0a24 of $dataCommonEvents){if(!_0x3d0a24)continue;let _0x70e093=_0x3d0a24[_0x30aec1(0x2c7)];_0x70e093=_0x70e093[_0x30aec1(0x6f6)](/\x1I\[(\d+)\]/gi,''),_0x70e093=_0x70e093[_0x30aec1(0x6f6)](/\\I\[(\d+)\]/gi,''),this[_0x30aec1(0x5a0)][_0x70e093[_0x30aec1(0xc9f)]()[_0x30aec1(0x4e9)]()]=_0x3d0a24['id'];}return this[_0x30aec1(0x5a0)][_0x112fcf]||0x0;},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x336)]=function(){const _0x5da4bb=_0x4c6a01;if(!SceneManager[_0x5da4bb(0x503)]())return;const _0x26a29f=VisuMZ[_0x5da4bb(0x5e5)]['Settings'][_0x5da4bb(0x4bd)];if(_0x26a29f[_0x5da4bb(0x9ef)]){if('PQgMH'!==_0x5da4bb(0x827))return _0x3c3728[_0x5da4bb(0x4c1)][_0x5da4bb(0x666)][_0x5da4bb(0x621)](_0x589cc1[0x0],_0x233a28[0x1]),!![];else $gameSwitches[_0x5da4bb(0x57c)](_0x26a29f[_0x5da4bb(0x9ef)],![]);}_0x26a29f[_0x5da4bb(0x712)]&&$gameSwitches[_0x5da4bb(0x57c)](_0x26a29f['SwitchMissEvade'],![]);_0x26a29f[_0x5da4bb(0xcb8)]&&$gameVariables['setValue'](_0x26a29f[_0x5da4bb(0xcb8)],0x0);if(_0x26a29f[_0x5da4bb(0xd5b)]){if(_0x5da4bb(0x908)!==_0x5da4bb(0xab8))$gameVariables[_0x5da4bb(0x57c)](_0x26a29f[_0x5da4bb(0xd5b)],0x0);else{const _0x285c67=this[_0x5da4bb(0x3fe)](),_0x5d4e96=_0x10b7af[_0x5da4bb(0x5e5)][_0x5da4bb(0x32d)][_0x5da4bb(0x921)][_0x5da4bb(0x9ee)],_0x59ef30=_0x285c67===_0x5da4bb(0x2b8)?_0x53a2da[_0x5da4bb(0x340)]:_0x5da4bb(0x751)[_0x5da4bb(0x511)](_0x5d4e96,_0x3fc7f1[_0x5da4bb(0x340)]),_0xe06a28=this['isEscapeCommandEnabled']();this[_0x5da4bb(0x39b)](_0x59ef30,_0x5da4bb(0x340),_0xe06a28);}}},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x5bb)]=function(_0x21f750){const _0x39cb80=_0x4c6a01;if(!SceneManager[_0x39cb80(0x503)]())return;if(!_0x21f750)return;const _0x2e1461=_0x21f750[_0x39cb80(0xbbd)](),_0x368479=VisuMZ[_0x39cb80(0x5e5)][_0x39cb80(0x32d)][_0x39cb80(0x4bd)];_0x368479[_0x39cb80(0x9ef)]&&_0x2e1461[_0x39cb80(0x572)]&&$gameSwitches[_0x39cb80(0x57c)](_0x368479[_0x39cb80(0x9ef)],!![]);_0x368479[_0x39cb80(0x712)]&&(_0x2e1461[_0x39cb80(0xd2c)]||_0x2e1461[_0x39cb80(0xced)])&&$gameSwitches[_0x39cb80(0x57c)](_0x368479[_0x39cb80(0x712)],!![]);if(_0x368479[_0x39cb80(0xcb8)]){if('wtWxr'!=='wtWxr'){if(!_0x46f7a0[_0x39cb80(0x503)]())return;if(!_0x30c1ba['VisuMZ_3_ActSeqCamera'])return;_0x140e8e[_0x39cb80(0xc46)](_0x407592,_0x66771e);const _0x41af54=_0x4437ad[_0x39cb80(0x582)](),_0x4ca0fd=_0x580e98[_0x39cb80(0x917)];_0x47835b[_0x39cb80(0x6e0)](_0x1f2c67[_0x39cb80(0x4d2)],_0x40e320[_0x39cb80(0xa88)],_0x578017['Duration'],_0xda0418[_0x39cb80(0xd9f)]);if(_0x4ca0fd)_0x41af54['setWaitMode'](_0x39cb80(0xc97));}else{let _0x3a1699=$gameVariables[_0x39cb80(0x3a8)](_0x368479[_0x39cb80(0xcb8)]);_0x2e1461[_0x39cb80(0x3ac)]>0x0&&('oyexx'===_0x39cb80(0x35e)?(this[_0x39cb80(0x49f)](_0x1b0df5),this[_0x39cb80(0x8ab)]()):_0x3a1699+=Math[_0x39cb80(0x3fa)](_0x2e1461[_0x39cb80(0x3ac)])),$gameVariables[_0x39cb80(0x57c)](_0x368479[_0x39cb80(0xcb8)],_0x3a1699);}}if(_0x368479['VariableHeal']){let _0x3f8be5=$gameVariables[_0x39cb80(0x3a8)](_0x368479[_0x39cb80(0xd5b)]);_0x2e1461['hpDamage']<0x0&&(_0x3f8be5+=Math[_0x39cb80(0x3fa)](_0x2e1461[_0x39cb80(0x3ac)])),$gameVariables['setValue'](_0x368479['VariableHeal'],_0x3f8be5);}},VisuMZ['BattleCore'][_0x4c6a01(0x6b4)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xd1a)]=Game_Action['prototype'][_0x4c6a01(0x463)],Game_Action['prototype'][_0x4c6a01(0x463)]=function(_0x132628,_0x482f3d){const _0x1511e5=_0x4c6a01;VisuMZ[_0x1511e5(0x5e5)][_0x1511e5(0xd1a)][_0x1511e5(0x3a4)](this,_0x132628,_0x482f3d);!this[_0x1511e5(0xd10)]()&&_0x132628&&_0x132628[_0x1511e5(0xbbd)]()[_0x1511e5(0x3ac)]>0x0&&this['performLifeSteal']('HP',_0x132628,_0x132628['result']()['hpDamage']);if(_0x132628){if('jHbrx'!==_0x1511e5(0xbf6))_0x36a8bb[_0x1511e5(0xc58)][_0x1511e5(0x663)]['call'](this),this[_0x1511e5(0x666)]&&this[_0x1511e5(0x666)]['update'](),_0xe7421e[_0x1511e5(0x56f)]&&_0x32da1a[_0x1511e5(0xc40)]();else{this[_0x1511e5(0x214)]=this[_0x1511e5(0x214)]||{};const _0xc70592=_0x132628['battlerKey']();this[_0x1511e5(0x214)][_0xc70592]=_0x482f3d;}}},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xde0)]=function(_0x4da140){const _0x3de270=_0x4c6a01;this[_0x3de270(0x214)]=this['_executeHpDamage']||{};const _0x5708be=_0x4da140[_0x3de270(0x9c3)]();return this[_0x3de270(0x214)][_0x5708be]||0x0;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xe04)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x2e6)],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x2e6)]=function(_0x2ca44d,_0x5bab03){const _0x2d8f2c=_0x4c6a01;VisuMZ[_0x2d8f2c(0x5e5)][_0x2d8f2c(0xe04)][_0x2d8f2c(0x3a4)](this,_0x2ca44d,_0x5bab03);if(!this[_0x2d8f2c(0xd10)]()&&_0x2ca44d&&_0x2ca44d[_0x2d8f2c(0xbbd)]()['mpDamage']>0x0){if(_0x2d8f2c(0x548)!=='GxKQE')this[_0x2d8f2c(0xc8c)]('MP',_0x2ca44d,_0x2ca44d[_0x2d8f2c(0xbbd)]()[_0x2d8f2c(0x34c)]);else return[this[_0x2d8f2c(0x8f0)]()];}},Game_Action[_0x4c6a01(0xc58)]['performLifeSteal']=function(_0xd2bbd8,_0x2a4882,_0x512ebd){const _0x280354=_0x4c6a01;_0xd2bbd8=_0xd2bbd8[_0x280354(0xc9f)]()[_0x280354(0x4e9)]();const _0x185583=this[_0x280354(0x51d)](_0xd2bbd8,_0x2a4882);if(_0x185583<=0x0)return;const _0x33c77c=Math[_0x280354(0x9c7)](_0x512ebd*_0x185583);if(_0x33c77c<=0x0)return;let _0xeb1be9=this[_0x280354(0xbf1)]();if(this[_0x280354(0x415)])_0xeb1be9=this['_reflectionTarget'];const _0x45f48f=_0x2a4882['isNegativeLifeSteal'](_0xd2bbd8)?-0x1:0x1;if(_0xd2bbd8==='HP')_0xeb1be9['gainHp'](_0x45f48f*_0x33c77c);if(_0xd2bbd8==='MP')_0xeb1be9[_0x280354(0xddc)](_0x45f48f*_0x33c77c);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x51d)]=function(_0x5bc671,_0x26d883){const _0x159ea7=_0x4c6a01;if(this[_0x159ea7(0x423)](_0x5bc671))return 0x0;if(this[_0x159ea7(0xbf1)]()[_0x159ea7(0x6eb)](_0x5bc671))return 0x0;if(_0x26d883[_0x159ea7(0x325)](_0x5bc671))return 0x0;let _0x1a4309=0x0;return _0x1a4309+=this['itemLifeStealRate'](_0x5bc671),_0x1a4309+=this[_0x159ea7(0xbf1)]()[_0x159ea7(0x51d)](_0x5bc671,this['item']()['hitType']),_0x1a4309[_0x159ea7(0x381)](0x0,0x1);},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x423)]=function(_0x534f53){const _0x21f2d4=_0x4c6a01;_0x534f53=_0x534f53[_0x21f2d4(0xc9f)]()[_0x21f2d4(0x4e9)]();const _0x5f16ce=VisuMZ[_0x21f2d4(0x5e5)][_0x21f2d4(0x6b4)],_0x948301=this[_0x21f2d4(0x6a7)]()['note']||'';if(_0x948301[_0x21f2d4(0x996)](_0x5f16ce[_0x21f2d4(0x8e5)]))return!![];if(_0x534f53==='HP'&&_0x948301['match'](_0x5f16ce[_0x21f2d4(0x55a)]))return!![];if(_0x534f53==='MP'&&_0x948301['match'](_0x5f16ce['cancelMpLifeSteal']))return!![];return![];},Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xa2d)]=function(_0x5d0ea6){const _0x1cfef5=_0x4c6a01,_0x2d6683=VisuMZ[_0x1cfef5(0x5e5)][_0x1cfef5(0x6b4)],_0x20bc83=this['item']()[_0x1cfef5(0x407)]||'';_0x5d0ea6=_0x5d0ea6[_0x1cfef5(0xc9f)]()[_0x1cfef5(0x4e9)]();const _0x2483fa=_0x20bc83['match'](_0x2d6683[_0x1cfef5(0xa24)]);if(_0x2483fa){if('ySlUA'==='ySlUA')for(const _0x5e5d3c of _0x2483fa){if('XlGsg'===_0x1cfef5(0xda4)){_0x5e5d3c[_0x1cfef5(0x996)](_0x2d6683[_0x1cfef5(0xa24)]);const _0x6dfe0e=String(RegExp['$1'])[_0x1cfef5(0xc9f)]()[_0x1cfef5(0x4e9)](),_0x3a0cf1=Number(RegExp['$2'])*0.01;if(_0x6dfe0e!==_0x5d0ea6)continue;return _0x3a0cf1;}else{if(_0x39652b['_spriteset'][_0x1cfef5(0x6ec)]())return!![];this[_0x1cfef5(0x893)]=_0x1cfef5(0x990);}}else _0x1b397d['BattleCore'][_0x1cfef5(0xc63)][_0x1cfef5(0x3a4)](this,_0xe29326),_0x18bb54[_0x1cfef5(0x6e5)]();}return 0x0;},Game_BattlerBase['prototype'][_0x4c6a01(0x51d)]=function(_0x4f4125,_0x3e4b51){const _0x3ea00e=_0x4c6a01,_0x525b0c=VisuMZ[_0x3ea00e(0x5e5)][_0x3ea00e(0x6b4)];let _0x3cb374=0x0;_0x4f4125=_0x4f4125[_0x3ea00e(0xc9f)]()['trim']();for(const _0xeffee9 of this[_0x3ea00e(0x1ec)]()){if(!_0xeffee9)continue;const _0x91a152=_0xeffee9[_0x3ea00e(0x407)]||'',_0x4a29b9=_0x91a152[_0x3ea00e(0x996)](_0x525b0c[_0x3ea00e(0x289)]);if(_0x4a29b9)for(const _0x8913de of _0x4a29b9){if(_0x3ea00e(0x509)!==_0x3ea00e(0xbdc)){_0x8913de[_0x3ea00e(0x996)](_0x525b0c[_0x3ea00e(0x289)]);const _0x4b2ace=String(RegExp['$1'])['toUpperCase']()[_0x3ea00e(0x4e9)](),_0x1122ba=String(RegExp['$2']),_0x55cd21=Number(RegExp['$3'])*0.01;if(_0x4b2ace!==_0x4f4125)continue;if(_0x3e4b51===Game_Action[_0x3ea00e(0x330)]&&_0x1122ba[_0x3ea00e(0x996)](/CERTAIN/i))'aoyEf'!==_0x3ea00e(0xc1f)?_0x3cb374+=_0x55cd21:(_0x4e1bf0+=_0xf16975[_0x3ea00e(0x966)]()?-_0x445cdd:_0x3fb883,_0x165d24+=_0x1f42d2);else{if(_0x3e4b51===Game_Action[_0x3ea00e(0x45f)]&&_0x1122ba[_0x3ea00e(0x996)](/PHYS/i))_0x3cb374+=_0x55cd21;else _0x3e4b51===Game_Action[_0x3ea00e(0x6c8)]&&_0x1122ba[_0x3ea00e(0x996)](/MAGIC/i)&&(_0x3cb374+=_0x55cd21);}}else _0x3f1c56*=this['expRate']();}}return _0x3cb374;},Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x6eb)]=function(_0x141594){const _0x5f1239=_0x4c6a01;_0x141594=_0x141594[_0x5f1239(0xc9f)]()[_0x5f1239(0x4e9)]();const _0x392794=VisuMZ['BattleCore'][_0x5f1239(0x6b4)];for(const _0x280d5c of this[_0x5f1239(0x1ec)]()){if(!_0x280d5c)continue;const _0x492cab=_0x280d5c[_0x5f1239(0x407)]||'';if(_0x492cab[_0x5f1239(0x996)](_0x392794[_0x5f1239(0x792)])){if('iTMBu'===_0x5f1239(0xde9))return!![];else this[_0x5f1239(0x486)](_0x5f1239(0x20e)),_0x3ee716['BattleCore'][_0x5f1239(0x280)][_0x5f1239(0x3a4)](this),this[_0x5f1239(0x486)](_0x5f1239(0x6e2));}if(_0x141594==='HP'&&_0x492cab[_0x5f1239(0x996)](_0x392794[_0x5f1239(0x7d3)])){if('caMtA'===_0x5f1239(0x384))this[_0x5f1239(0xa05)]['x']=0x0,this[_0x5f1239(0x4d4)]=_0x2c43a3['ceil'](_0x16e4ea[_0x5f1239(0xe09)]/0x2);else return!![];}if(_0x141594==='MP'&&_0x492cab[_0x5f1239(0x996)](_0x392794[_0x5f1239(0x5b2)]))return!![];}return![];},Game_BattlerBase['prototype'][_0x4c6a01(0xa0c)]=function(_0x17a7ab){const _0x4352d0=_0x4c6a01;_0x17a7ab=_0x17a7ab[_0x4352d0(0xc9f)]()[_0x4352d0(0x4e9)]();const _0x40760a=VisuMZ['BattleCore']['LifeStealRegExp'];for(const _0x4938e1 of this[_0x4352d0(0x1ec)]()){if(_0x4352d0(0xcbc)==='lVxPa'){let _0x362744=(_0x1b581a['mmp']*_0x565902[_0x4352d0(0x5c7)]+_0x249a64['value2'])*_0x54496c['rec'];_0x362744=this[_0x4352d0(0xb73)](_0x362744),this[_0x4352d0(0xa56)]()&&(_0x362744*=this[_0x4352d0(0xbf1)]()[_0x4352d0(0xc32)]),_0x362744=_0x57fb4c[_0x4352d0(0x989)](_0x362744),_0x362744!==0x0&&(_0x173d46[_0x4352d0(0xddc)](_0x362744),this[_0x4352d0(0x76a)](_0x473ef2));}else{if(!_0x4938e1)continue;const _0x37321d=_0x4938e1[_0x4352d0(0x407)]||'';if(_0x37321d[_0x4352d0(0x996)](_0x40760a[_0x4352d0(0x830)]))return!![];if(_0x17a7ab==='HP'&&_0x37321d[_0x4352d0(0x996)](_0x40760a[_0x4352d0(0xcce)]))return!![];if(_0x17a7ab==='MP'&&_0x37321d[_0x4352d0(0x996)](_0x40760a[_0x4352d0(0xb3e)])){if(_0x4352d0(0x1f1)===_0x4352d0(0x6a2)){const _0x4902a0=_0x4f3827['BattleCore'][_0x4352d0(0xac4)][_0x43e4d4],_0x36ccbc={'code':0x2c,'dataId':_0x4902a0,'value1':0x1,'value2':0x0};_0x5a3f26['effects'][_0x4352d0(0x543)](_0x36ccbc);}else return!![];}}}return![];},Game_BattlerBase[_0x4c6a01(0xc58)]['isGuardLifeSteal']=function(_0x1725e7){const _0x402b5b=_0x4c6a01;_0x1725e7=_0x1725e7[_0x402b5b(0xc9f)]()[_0x402b5b(0x4e9)]();const _0x1423fb=VisuMZ[_0x402b5b(0x5e5)][_0x402b5b(0x6b4)];for(const _0x1688de of this[_0x402b5b(0x1ec)]()){if(_0x402b5b(0x9d7)==='wnNmC')_0x2b1b4e[_0x402b5b(0x3d1)](0x0,0x0,_0x30bcdb[_0x402b5b(0xa14)],_0x32430e[_0x402b5b(0xd9f)]);else{if(!_0x1688de)continue;const _0x32b3c1=_0x1688de[_0x402b5b(0x407)]||'';if(_0x32b3c1['match'](_0x1423fb[_0x402b5b(0x6c6)]))return!![];if(_0x1725e7==='HP'&&_0x32b3c1[_0x402b5b(0x996)](_0x1423fb[_0x402b5b(0x66b)]))return!![];if(_0x1725e7==='MP'&&_0x32b3c1['match'](_0x1423fb[_0x402b5b(0x6c3)]))return _0x402b5b(0x1fc)==='wuPrx'?_0x4f115b['BattleCore'][_0x402b5b(0x32d)]['BattleLayout'][_0x402b5b(0x9ca)]:!![];}}return![];},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x4d6)]=Game_BattlerBase[_0x4c6a01(0xc58)]['initMembers'],Game_BattlerBase['prototype'][_0x4c6a01(0xd4b)]=function(){const _0x57a5e2=_0x4c6a01;VisuMZ['BattleCore'][_0x57a5e2(0x4d6)]['call'](this),this[_0x57a5e2(0x734)]();},Game_BattlerBase[_0x4c6a01(0xc58)]['initMembersBattleCore']=function(){this['_immortal']=![];},VisuMZ['BattleCore'][_0x4c6a01(0x41e)]=Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0xd1c)],Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0xd1c)]=function(){const _0x43c8eb=_0x4c6a01;this['_cache']={},VisuMZ['BattleCore']['Game_BattlerBase_refresh'][_0x43c8eb(0x3a4)](this);},Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x496)]=function(_0x3c0936){const _0x166921=_0x4c6a01;return this[_0x166921(0x985)]=this[_0x166921(0x985)]||{},this['_cache'][_0x3c0936]!==undefined;},Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0xda0)]=function(){const _0x1176db=_0x4c6a01;if(this[_0x1176db(0x985)][_0x1176db(0xda0)]!==undefined)return this['_cache'][_0x1176db(0xda0)];const _0x52bcb4=/<DAMAGE CAP:[ ](\d+)>/i,_0x1f475a=this[_0x1176db(0x1ec)]()[_0x1176db(0x39f)](_0x4a9eab=>_0x4a9eab&&_0x4a9eab['note'][_0x1176db(0x996)](_0x52bcb4)?Number(RegExp['$1']):0x0);let _0x3fe766=_0x1f475a[_0x1176db(0x991)]>0x0?Math['max'](..._0x1f475a):0x0;if(_0x3fe766<=0x0)_0x3fe766=VisuMZ['BattleCore'][_0x1176db(0x32d)][_0x1176db(0x625)]['DefaultHardCap'];return this[_0x1176db(0x985)][_0x1176db(0xda0)]=_0x3fe766,this[_0x1176db(0x985)][_0x1176db(0xda0)];},Game_BattlerBase['prototype'][_0x4c6a01(0xc5d)]=function(){const _0x6bf0e5=_0x4c6a01;if(this['_cache'][_0x6bf0e5(0x94c)]!==undefined)return this[_0x6bf0e5(0x985)][_0x6bf0e5(0x94c)];let _0x21dcee=VisuMZ['BattleCore']['Settings'][_0x6bf0e5(0x625)][_0x6bf0e5(0xbb7)];const _0x397c93=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x477fbe=this[_0x6bf0e5(0x1ec)]()[_0x6bf0e5(0x39f)](_0x6fe199=>_0x6fe199&&_0x6fe199[_0x6bf0e5(0x407)]['match'](_0x397c93)?Number(RegExp['$1'])/0x64:0x0);return _0x21dcee=_0x477fbe['reduce']((_0x3ef690,_0x2dd1be)=>_0x3ef690+_0x2dd1be,_0x21dcee),this[_0x6bf0e5(0x985)]['softDamageCap']=_0x21dcee,this[_0x6bf0e5(0x985)]['softDamageCap'][_0x6bf0e5(0x381)](0.01,0x1);},VisuMZ[_0x4c6a01(0x5e5)]['Game_BattlerBase_die']=Game_BattlerBase[_0x4c6a01(0xc58)]['die'],Game_BattlerBase['prototype'][_0x4c6a01(0xaa7)]=function(){const _0x437d9a=_0x4c6a01;VisuMZ[_0x437d9a(0x5e5)]['Game_BattlerBase_die'][_0x437d9a(0x3a4)](this);if(SceneManager[_0x437d9a(0x503)]()){if(_0x437d9a(0xba3)==='fIWyz')this[_0x437d9a(0x94b)](_0x437d9a(0x52a));else{const _0x60d2c9=_0x3fd4a5['prototype'][_0x437d9a(0xd3a)]();['default','list',_0x437d9a(0x3e6),'border'][_0x437d9a(0x864)](_0x60d2c9)&&(this[_0x437d9a(0x973)]=0x0);}}},Game_BattlerBase[_0x4c6a01(0xc58)]['battler']=function(){const _0x4679d7=_0x4c6a01;if(!SceneManager[_0x4679d7(0x503)]())return null;if(!SceneManager[_0x4679d7(0x4c1)][_0x4679d7(0x666)])return null;return SceneManager[_0x4679d7(0x4c1)][_0x4679d7(0x666)]['findTargetSprite'](this);},Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0xaaf)]=function(){const _0xfd6806=_0x4c6a01;return VisuMZ[_0xfd6806(0x5e5)][_0xfd6806(0x32d)]['Actor'][_0xfd6806(0xbd9)];},Game_BattlerBase['prototype'][_0x4c6a01(0x706)]=function(){const _0x2acdbc=_0x4c6a01;return VisuMZ[_0x2acdbc(0x5e5)]['Settings']['Actor'][_0x2acdbc(0x6a9)];},Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x95d)]=function(){const _0x4183a1=_0x4c6a01;if(this['isActor']&&this[_0x4183a1(0x966)]()){if(_0x4183a1(0xc15)===_0x4183a1(0xa44))_0x5ed058['prototype'][_0x4183a1(0x32e)]['call'](this),this[_0x4183a1(0x91c)](),this[_0x4183a1(0xca1)]();else return VisuMZ[_0x4183a1(0x5e5)][_0x4183a1(0x32d)][_0x4183a1(0x9ad)][_0x4183a1(0xc9d)];}else return VisuMZ[_0x4183a1(0x5e5)][_0x4183a1(0x32d)][_0x4183a1(0x82d)]['Shadow'];},Game_BattlerBase[_0x4c6a01(0xc58)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase['prototype']['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x4c6a01(0x510)]=function(){return 0x0;},Game_BattlerBase[_0x4c6a01(0xc58)]['createBattleUIOffsetX']=function(_0x5044d0){const _0x5565be=_0x4c6a01;if(!_0x5044d0)return 0x0;let _0x1f1d52=0x0;const _0x386d00=_0x5044d0[_0x5565be(0x407)];return _0x386d00[_0x5565be(0x996)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x1f1d52+=Number(RegExp['$1'])),_0x386d00[_0x5565be(0x996)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1f1d52+=Number(RegExp['$1'])),_0x1f1d52;},Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x727)]=function(_0x387037){const _0x2b74eb=_0x4c6a01;if(!_0x387037)return 0x0;let _0x150ce7=0x0;const _0xb91f95=_0x387037['note'];return _0xb91f95[_0x2b74eb(0x996)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x150ce7+=Number(RegExp['$1'])),_0xb91f95[_0x2b74eb(0x996)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x150ce7+=Number(RegExp['$2'])),_0x150ce7;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xc55)]=Game_BattlerBase[_0x4c6a01(0xc58)]['isStateResist'],Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x439)]=function(_0x5bd8c0){const _0x2eee5d=_0x4c6a01;if(_0x5bd8c0===this['deathStateId']()&&this[_0x2eee5d(0x5af)]())return!![];return VisuMZ['BattleCore']['Game_BattlerBase_isStateResist'][_0x2eee5d(0x3a4)](this,_0x5bd8c0);},Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x5af)]=function(){return this['_immortal'];},Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x547)]=function(_0x23c9bc){const _0x32ba85=_0x4c6a01;_0x23c9bc?this[_0x32ba85(0xc48)]():this[_0x32ba85(0x397)]();},Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0xc48)]=function(){const _0x4d1d84=_0x4c6a01;if(this[_0x4d1d84(0xb44)]())return;this[_0x4d1d84(0x474)]=!![],this[_0x4d1d84(0x7ff)]=![];},Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x397)]=function(){const _0x8b5a95=_0x4c6a01,_0x1ca090=this['isAlive']();this[_0x8b5a95(0x474)]=![],_0x1ca090&&this[_0x8b5a95(0x7ff)]&&this[_0x8b5a95(0xaa7)](),this[_0x8b5a95(0x7ff)]=![],this[_0x8b5a95(0xd1c)](),this['isDead']()&&_0x1ca090&&(this[_0x8b5a95(0x953)](),this[_0x8b5a95(0x390)]());},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x631)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x988)],Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0x988)]=function(){const _0x3d05c2=_0x4c6a01;if(this['item']())return VisuMZ['BattleCore'][_0x3d05c2(0x631)]['call'](this);else{if('Fzlxk'!=='Fzlxk')_0x65dc72[_0x3d05c2(0x5e5)][_0x3d05c2(0x3d5)][_0x3d05c2(0x3a4)](this),this[_0x3d05c2(0xd43)]();else return 0x0;}},VisuMZ['BattleCore'][_0x4c6a01(0x86f)]=Game_Action[_0x4c6a01(0xc58)][_0x4c6a01(0xb8b)],Game_Action['prototype'][_0x4c6a01(0xb8b)]=function(){const _0x2f71bf=_0x4c6a01;this[_0x2f71bf(0xbf1)]()&&this[_0x2f71bf(0xbf1)]()[_0x2f71bf(0x759)]()?VisuMZ[_0x2f71bf(0x5e5)]['Game_Action_setAttack']['call'](this):_0x2f71bf(0x948)!==_0x2f71bf(0x948)?this['_battleField'][_0x2f71bf(0x279)](this[_0x2f71bf(0x26d)]):this[_0x2f71bf(0xd66)]();},VisuMZ['BattleCore'][_0x4c6a01(0x447)]=Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x759)],Game_BattlerBase[_0x4c6a01(0xc58)][_0x4c6a01(0x759)]=function(){const _0x11c306=_0x4c6a01;if(!this[_0x11c306(0x9c6)]())return![];return VisuMZ[_0x11c306(0x5e5)]['Game_BattlerBase_canAttack'][_0x11c306(0x3a4)](this);},Game_BattlerBase['prototype'][_0x4c6a01(0x9c6)]=function(){const _0x4094fb=_0x4c6a01;for(const _0x46f292 of this[_0x4094fb(0x1ec)]()){if(!_0x46f292)continue;if(_0x46f292['note']['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x4c6a01(0x5e5)]['Game_Action_setGuard']=Game_Action[_0x4c6a01(0xc58)]['setGuard'],Game_Action[_0x4c6a01(0xc58)]['setGuard']=function(){const _0x4520a5=_0x4c6a01;if(this['subject']()['canGuard']()){if(_0x4520a5(0x4fa)!==_0x4520a5(0xa45))VisuMZ[_0x4520a5(0x5e5)][_0x4520a5(0x27f)][_0x4520a5(0x3a4)](this);else{let _0xcd69d6=_0x264744(_0x4aefeb['$1']);while(_0xcd69d6--){const _0x1c9295=_0x2b697b[_0x4520a5(0xb10)](0x2)===0x0?this[_0x4520a5(0x22c)]():this[_0x4520a5(0xbe7)]();_0x1d345a[_0x4520a5(0x543)](_0x1c9295[_0x4520a5(0x5dc)]());}return this[_0x4520a5(0xc9e)](_0x576fa0);}}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x9e5)]=Game_BattlerBase['prototype'][_0x4c6a01(0x274)],Game_BattlerBase[_0x4c6a01(0xc58)]['canGuard']=function(){const _0x33db00=_0x4c6a01;if(!this[_0x33db00(0xa36)]())return![];return VisuMZ[_0x33db00(0x5e5)][_0x33db00(0x9e5)][_0x33db00(0x3a4)](this);},Game_BattlerBase['prototype'][_0x4c6a01(0xa36)]=function(){const _0x12ee22=_0x4c6a01;for(const _0x5fbc48 of this[_0x12ee22(0x1ec)]()){if(!_0x5fbc48)continue;if(_0x5fbc48[_0x12ee22(0x407)][_0x12ee22(0x996)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x4c6a01(0xc58)]['canUseItemCommand']=function(){const _0x1de8c4=_0x4c6a01;for(const _0x6035dd of this[_0x1de8c4(0x1ec)]()){if(!_0x6035dd)continue;if(_0x6035dd[_0x1de8c4(0x407)][_0x1de8c4(0x996)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x4c6a01(0x5e5)]['Game_BattlerBase_meetsUsableItemConditions']=Game_BattlerBase[_0x4c6a01(0xc58)]['meetsUsableItemConditions'],Game_BattlerBase[_0x4c6a01(0xc58)]['meetsUsableItemConditions']=function(_0x4891cf){const _0xc05d29=_0x4c6a01;if(_0x4891cf&&_0x4891cf[_0xc05d29(0x407)][_0xc05d29(0x996)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0xc05d29(0x81e)!==_0xc05d29(0x7a5)){const _0x22f3bd=this[_0xc05d29(0xbe7)]()[_0xc05d29(0x490)]();if(_0x22f3bd[_0xc05d29(0x991)]===0x1&&_0x22f3bd[0x0]===this)return![];}else _0x1dc3fc[_0xc05d29(0x5e5)]['Window_BattleLog_popupDamage'][_0xc05d29(0x3a4)](this,_0x56b54e),this[_0xc05d29(0x89b)]();}return VisuMZ[_0xc05d29(0x5e5)][_0xc05d29(0x3d9)][_0xc05d29(0x3a4)](this,_0x4891cf);},Game_Battler[_0x4c6a01(0xc58)]['allowRandomSpeed']=function(){const _0x45c797=_0x4c6a01;return VisuMZ[_0x45c797(0x5e5)][_0x45c797(0x32d)]['Mechanics'][_0x45c797(0x290)];},VisuMZ['BattleCore'][_0x4c6a01(0xa74)]=Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x6ad)],Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x6ad)]=function(){const _0x5f3ffb=_0x4c6a01;if(SceneManager[_0x5f3ffb(0x503)]()){if(_0x5f3ffb(0x682)===_0x5f3ffb(0x50e))this[_0x5f3ffb(0x431)][_0x5f3ffb(0x593)][_0x5f3ffb(0x80c)]=this[_0x5f3ffb(0xbf3)][_0x5f3ffb(0x5ef)]();else{if(BattleManager['isTpb']()){if(_0x5f3ffb(0x777)!==_0x5f3ffb(0x777))return _0x2f0c39['_target'];else{if(this['turnCount']()<=0x0)return;}}else{if($gameTroop[_0x5f3ffb(0x9d5)]()<=0x0)return;}}}if(SceneManager[_0x5f3ffb(0x503)]()&&BattleManager[_0x5f3ffb(0x758)]()&&this[_0x5f3ffb(0x65e)]===Graphics[_0x5f3ffb(0xbe4)])return;this['_lastRegenFrameCount']=Graphics[_0x5f3ffb(0xbe4)],SceneManager[_0x5f3ffb(0x503)]()&&(_0x5f3ffb(0x359)==='kwioc'?this['processBattleCoreJS'](_0x5f3ffb(0xcbb)):this[_0x5f3ffb(0x94b)](_0x5f3ffb(0x3c7))),VisuMZ['BattleCore'][_0x5f3ffb(0xa74)][_0x5f3ffb(0x3a4)](this),SceneManager[_0x5f3ffb(0x503)]()&&(this['regenerateAllBattleCore'](),this[_0x5f3ffb(0x486)](_0x5f3ffb(0x925)));},Game_Battler['prototype']['regenerateAllBattleCore']=function(){const _0x268da3=_0x4c6a01;if(SceneManager[_0x268da3(0x503)]()){if(_0x268da3(0x80f)==='qefcN')for(const _0x4f70e6 of this[_0x268da3(0x1ec)]()){if(_0x268da3(0x87c)!==_0x268da3(0xdb3)){if(!_0x4f70e6)continue;this[_0x268da3(0x75f)](_0x4f70e6);}else return _0x266a10['BattleCore'][_0x268da3(0x624)][_0x268da3(0x3a4)](this,_0x58bb13);}else _0x3eebc8[_0x268da3(0x523)]=_0x358358[_0x268da3(0x6cc)](_0x21cba9['$1']);}},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x75f)]=function(_0x154a94){const _0x2a3a27=_0x4c6a01;if(!Imported[_0x2a3a27(0xad0)])return;if(!SceneManager[_0x2a3a27(0x503)]())return;if(this[_0x2a3a27(0xb44)]())return;if(this[_0x2a3a27(0xb69)]())return;if(_0x154a94[_0x2a3a27(0x407)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x2a3a27(0xb12)!==_0x2a3a27(0x599)){const _0x321575=Number(RegExp['$1']);$gameTemp[_0x2a3a27(0xdb8)]([this],_0x321575,![],![]);}else{const _0x16245d=_0x4c214c['$1'],_0x3e7137=_0x2a3a27(0x55b)['format'](_0x16245d),_0x429863=_0x2db33b[_0x2a3a27(0x5e5)]['createKeyJS'](_0x194663,_0x72be39);_0x2a9f55[_0x2a3a27(0x5e5)]['JS'][_0x429863]=new _0x22a033(_0x3e7137);}}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x280)]=Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xae9)],Game_Battler['prototype'][_0x4c6a01(0xae9)]=function(){const _0x18f93d=_0x4c6a01;this[_0x18f93d(0x486)](_0x18f93d(0x20e)),VisuMZ[_0x18f93d(0x5e5)][_0x18f93d(0x280)]['call'](this),this['processBattleCoreJS'](_0x18f93d(0x6e2));},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xdb1)]=Game_Battler['prototype'][_0x4c6a01(0xcff)],Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xcff)]=function(){const _0x293eb0=_0x4c6a01;this[_0x293eb0(0x486)]('PreEndTurnJS'),VisuMZ[_0x293eb0(0x5e5)][_0x293eb0(0xdb1)]['call'](this);if(VisuMZ[_0x293eb0(0x5e5)][_0x293eb0(0x32d)][_0x293eb0(0x4bd)][_0x293eb0(0xaf3)]){if(_0x293eb0(0xb63)!==_0x293eb0(0x534))this[_0x293eb0(0x5ac)]();else{this['_flashColor']=_0x5cba44[_0x293eb0(0xd00)]||[0x0,0x0,0x0,0x0],this[_0x293eb0(0x583)]=_0x1cf415[_0x293eb0(0x349)](this[_0x293eb0(0x583)]),this['_flashDuration']=_0x55dc05[_0x293eb0(0x7df)]||0x0;const _0xa30718=this[_0x293eb0(0x9f9)](),_0x3227e5=_0x4e9723['floor'](_0xa30718*0x1e),_0x45bf0c=this[_0x293eb0(0x8c5)](_0x3227e5,_0xa30718);_0x45bf0c[_0x293eb0(0x593)][_0x293eb0(0xbe5)]=_0x552df7[_0x293eb0(0x46b)](_0xca4f75[_0x293eb0(0xbe5)]),_0x45bf0c['bitmap'][_0x293eb0(0xa5a)](_0x1c2e8b,0x0,0x0,_0x3227e5,_0xa30718,_0x293eb0(0x85d)),_0x45bf0c['dy']=0x0;}}this[_0x293eb0(0x486)](_0x293eb0(0xab9));},Game_Battler['prototype'][_0x4c6a01(0x486)]=function(_0x1991ba){const _0x4dcc0f=_0x4c6a01;if(this['_tempBattler']||this[_0x4dcc0f(0x752)])return;const _0x4b1011=VisuMZ[_0x4dcc0f(0x5e5)][_0x4dcc0f(0x32d)]['Mechanics'];if(_0x4b1011[_0x1991ba])_0x4b1011[_0x1991ba][_0x4dcc0f(0x3a4)](this);for(const _0x577608 of this[_0x4dcc0f(0x1ec)]()){if(_0x4dcc0f(0x837)!==_0x4dcc0f(0x837))_0x41a938=_0x752f88(_0x5616b8['$1']),_0x45527b--;else{if(!_0x577608)continue;key=VisuMZ[_0x4dcc0f(0x5e5)][_0x4dcc0f(0xcad)](_0x577608,_0x1991ba),VisuMZ[_0x4dcc0f(0x5e5)]['JS'][key]&&VisuMZ[_0x4dcc0f(0x5e5)]['JS'][key][_0x4dcc0f(0x3a4)](this,this,this,_0x577608,0x0);}}},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xaed)]=function(){const _0x10360a=_0x4c6a01;return VisuMZ[_0x10360a(0x5e5)][_0x10360a(0x32d)][_0x10360a(0x9ad)][_0x10360a(0x3af)]||![];},Game_Battler[_0x4c6a01(0xc58)]['isChanting']=function(){const _0x123351=_0x4c6a01;if(this[_0x123351(0x5bf)]()){if(this[_0x123351(0xaed)]()){if(this[_0x123351(0xada)][_0x123351(0x664)](_0x43fcba=>_0x43fcba[_0x123351(0x6a7)]()&&_0x43fcba['isMagical']()))return!![];}else{if(this['_actions'][_0x123351(0x664)](_0x222565=>_0x222565[_0x123351(0x6a7)]()&&_0x222565[_0x123351(0x215)]()))return!![];}}if(BattleManager[_0x123351(0x758)]()&&this[_0x123351(0x58b)]==='casting')return this['chantStyle']()?this[_0x123351(0xad9)]()&&this[_0x123351(0xad9)]()['item']()&&this[_0x123351(0xad9)]()[_0x123351(0xb1e)]():this[_0x123351(0xad9)]()&&this[_0x123351(0xad9)]()[_0x123351(0x6a7)]()&&this[_0x123351(0xad9)]()['isMagicSkill']();return![];},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x364)]=function(){const _0x1f0bbc=_0x4c6a01;if(BattleManager[_0x1f0bbc(0x758)]()&&this[_0x1f0bbc(0x58b)]===_0x1f0bbc(0x8f1)){if(this[_0x1f0bbc(0xaed)]()){if(_0x1f0bbc(0xd1f)!==_0x1f0bbc(0xd1f)){if(_0x55ec28['battleCameraData']()[_0x1f0bbc(0x6be)]>0x0)return!![];if(_0x4eda8f['battleCameraData']()[_0x1f0bbc(0xbd4)]>0x0)return!![];this[_0x1f0bbc(0x893)]='';}else return this[_0x1f0bbc(0xad9)]()&&this[_0x1f0bbc(0xad9)]()['item']()&&!this[_0x1f0bbc(0xad9)]()[_0x1f0bbc(0xb1e)]();}else return this[_0x1f0bbc(0xad9)]()&&this[_0x1f0bbc(0xad9)]()[_0x1f0bbc(0x6a7)]()&&!this['currentAction']()[_0x1f0bbc(0x215)]();}return![];},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x584)]=Game_Battler['prototype'][_0x4c6a01(0x569)],Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x569)]=function(){const _0x1b9cdf=_0x4c6a01;VisuMZ['BattleCore']['Game_Battler_clearDamagePopup'][_0x1b9cdf(0x3a4)](this),this[_0x1b9cdf(0xbd8)]=[];},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xc3f)]=function(){const _0x159ab7=_0x4c6a01;if(!this[_0x159ab7(0xbd8)])this[_0x159ab7(0x569)]();return this[_0x159ab7(0xbd8)][_0x159ab7(0x991)]>0x0;},Game_Battler[_0x4c6a01(0xc58)]['startDamagePopup']=function(){const _0x192fd9=_0x4c6a01;if(!SceneManager[_0x192fd9(0x503)]())return;if(BattleManager[_0x192fd9(0xdb5)]())return;if(!this[_0x192fd9(0xbd8)])this[_0x192fd9(0x569)]();this['createSeparateDamagePopups']();const _0x5e3b99=this[_0x192fd9(0x72f)]();if(_0x5e3b99)_0x5e3b99[_0x192fd9(0xc99)]();},Game_Battler['prototype'][_0x4c6a01(0xb54)]=function(){const _0x44bb3e=_0x4c6a01,_0x288b22=this[_0x44bb3e(0xbbd)]();if(_0x288b22['missed']||_0x288b22['evaded']){const _0x484f64=JsonEx[_0x44bb3e(0x349)](_0x288b22);_0x484f64[_0x44bb3e(0x244)]=![],_0x484f64['mpDamage']=0x0,this['_damagePopupArray'][_0x44bb3e(0x543)](_0x484f64);}if(_0x288b22[_0x44bb3e(0x244)]){const _0x1462b2=JsonEx[_0x44bb3e(0x349)](_0x288b22);_0x1462b2[_0x44bb3e(0xd2c)]=![],_0x1462b2[_0x44bb3e(0xced)]=![],_0x1462b2[_0x44bb3e(0x34c)]=0x0,this[_0x44bb3e(0xbd8)]['push'](_0x1462b2);}if(_0x288b22[_0x44bb3e(0x34c)]!==0x0){if('Fzcye'!==_0x44bb3e(0xbb6)){const _0x312751=JsonEx[_0x44bb3e(0x349)](_0x288b22);_0x312751[_0x44bb3e(0xd2c)]=![],_0x312751['evaded']=![],_0x312751['hpAffected']=![],this[_0x44bb3e(0xbd8)]['push'](_0x312751);}else{const _0x261047=_0x61f31b[_0x996d8e];if(!_0x261047)return'';let _0x8c7f56='';_0x8c7f56+=_0x261047['name'];for(const _0x4a73cf of _0x261047[_0x44bb3e(0x587)]){for(const _0x5bc7e3 of _0x4a73cf['list']){[0x6c,0x198][_0x44bb3e(0x864)](_0x5bc7e3['code'])&&(_0x8c7f56+='\x0a',_0x8c7f56+=_0x5bc7e3[_0x44bb3e(0x59d)][0x0]);}}return _0x8c7f56;}}},Game_Battler[_0x4c6a01(0xc58)]['getNextDamagePopup']=function(){const _0x38619f=_0x4c6a01;if(!this[_0x38619f(0xbd8)])this['clearDamagePopup']();if(VisuMZ[_0x38619f(0x5e5)][_0x38619f(0x32d)][_0x38619f(0x625)]['NewPopupBottom'])return this[_0x38619f(0xbd8)][_0x38619f(0x91d)]();else{if(_0x38619f(0x2bb)!==_0x38619f(0x59e))return this[_0x38619f(0xbd8)][_0x38619f(0xd59)]();else{if(_0xe17d5['isTpb']()){if(this['turnCount']()<=0x0)return;}else{if(_0x4faf06['turnCount']()<=0x0)return;}}}},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x9f0)]=function(_0x9495fb,_0xc3d1e0){const _0x2f2ff0=_0x4c6a01;if(!SceneManager[_0x2f2ff0(0x503)]())return;if(BattleManager[_0x2f2ff0(0xdb5)]())return;if(!this[_0x2f2ff0(0x72f)]())return;if(_0x9495fb[_0x2f2ff0(0x991)]<=0x0)return;_0xc3d1e0=_0xc3d1e0||{},_0xc3d1e0[_0x2f2ff0(0xbe5)]=_0xc3d1e0[_0x2f2ff0(0xbe5)]||_0x2f2ff0(0xb81),_0xc3d1e0[_0x2f2ff0(0xd00)]=_0xc3d1e0[_0x2f2ff0(0xd00)]||[0x0,0x0,0x0,0x0],_0xc3d1e0['flashDuration']=_0xc3d1e0['flashDuration']||0x0,this[_0x2f2ff0(0x72f)]()[_0x2f2ff0(0x9f0)](_0x9495fb,_0xc3d1e0);},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xb6c)]=function(_0x31ceec,_0x3c1d32,_0x21c4a6){const _0x23ef64=_0x4c6a01;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x23ef64(0x72f)]())return;if(_0x3c1d32[_0x23ef64(0x991)]<=0x0)return;_0x21c4a6=_0x21c4a6||{},_0x21c4a6[_0x23ef64(0xbe5)]=_0x21c4a6[_0x23ef64(0xbe5)]||_0x23ef64(0xb81),_0x21c4a6[_0x23ef64(0xd00)]=_0x21c4a6['flashColor']||[0x0,0x0,0x0,0x0],_0x21c4a6[_0x23ef64(0x7df)]=_0x21c4a6[_0x23ef64(0x7df)]||0x0,this[_0x23ef64(0x72f)]()[_0x23ef64(0xb6c)](_0x31ceec,_0x3c1d32,_0x21c4a6);},Game_Battler[_0x4c6a01(0xc58)]['notFocusValid']=function(){const _0x476991=_0x4c6a01;if(this[_0x476991(0xb69)]())return![];if(this[_0x476991(0x51e)]()&&this[_0x476991(0xb5f)]())return!![];if(this[_0x476991(0xb37)]()&&this[_0x476991(0xdc1)]()){if(this[_0x476991(0xb44)]()&&this['allowCollapse']())return![];}else{if(this[_0x476991(0xb44)]())return![];}return!![];},VisuMZ['BattleCore']['Game_Battler_clearMotion']=Game_Battler['prototype']['clearMotion'],Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xb80)]=function(){const _0x450112=_0x4c6a01;VisuMZ['BattleCore'][_0x450112(0x44d)][_0x450112(0x3a4)](this),this[_0x450112(0xb98)]();},Game_Battler[_0x4c6a01(0xc58)]['canBattlerMove']=function(){return!![];},Game_Battler['prototype']['isBattlerGrounded']=function(){return![];},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x344)]=Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x7dc)],Game_Battler[_0x4c6a01(0xc58)]['onBattleStart']=function(_0x4cf0fa){const _0x584875=_0x4c6a01;VisuMZ[_0x584875(0x5e5)][_0x584875(0x344)][_0x584875(0x3a4)](this,_0x4cf0fa),this[_0x584875(0xd67)](_0x4cf0fa),this['clearDamagePopup']();},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xd67)]=function(_0x16c763){const _0x4c2c7e=_0x4c6a01;this[_0x4c2c7e(0x946)](![]),this[_0x4c2c7e(0x513)]=undefined,this[_0x4c2c7e(0x48e)]=undefined;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x2d8)]=Game_Battler[_0x4c6a01(0xc58)]['onBattleEnd'],Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xa8d)]=function(){const _0x1307e4=_0x4c6a01;VisuMZ['BattleCore'][_0x1307e4(0x2d8)]['call'](this),this[_0x1307e4(0x561)]();},Game_Battler['prototype']['onBattleEndBattleCore']=function(){const _0x49e151=_0x4c6a01;this[_0x49e151(0x513)]=undefined,this[_0x49e151(0x48e)]=undefined;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xc28)]=Game_Battler['prototype'][_0x4c6a01(0x4da)],Game_Battler['prototype'][_0x4c6a01(0x4da)]=function(_0x344c4f){const _0x1a6442=_0x4c6a01;VisuMZ['BattleCore']['Game_Battler_performActionStart'][_0x1a6442(0x3a4)](this,_0x344c4f);if(!_0x344c4f[_0x1a6442(0x884)]()){const _0x4baa1c=this[_0x1a6442(0x72f)]();_0x4baa1c&&_0x4baa1c[_0x1a6442(0x3ad)]();}this['setBattlerFlip'](![]);},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x556)]=function(){const _0x457648=_0x4c6a01,_0x1d6ada=this[_0x457648(0xbfa)];this[_0x457648(0xbfa)]=![];if(BattleManager[_0x457648(0x479)]()&&this[_0x457648(0x323)]()){if(_0x457648(0x67e)!=='qZFhO'){const _0x2130ba=this[_0x457648(0x72f)]();if(_0x2130ba&&_0x1d6ada)_0x2130ba['stepForward']();return;}else return;}const _0x5c969c=this[_0x457648(0x72f)]();if(_0x5c969c)_0x5c969c[_0x457648(0x6b8)]();this[_0x457648(0x946)](![]),this[_0x457648(0x390)]();},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xc1e)]=function(_0x136b5f){const _0x30b53b=_0x4c6a01;if(_0x136b5f[_0x30b53b(0xa4c)]())this[_0x30b53b(0x3f9)]();else{if(_0x136b5f['isGuard']())_0x30b53b(0xcab)===_0x30b53b(0x2e5)?(_0x5a046e[_0x30b53b(0x5e5)][_0x30b53b(0xb7f)][_0x30b53b(0x3a4)](this),_0x55ebbf['onBattleStartOnceParallels']()):this[_0x30b53b(0x94b)](_0x30b53b(0x555));else{if(_0x136b5f[_0x30b53b(0xb1e)]())_0x30b53b(0x483)!==_0x30b53b(0x8d7)?this[_0x30b53b(0x94b)](_0x30b53b(0x765)):this[_0x30b53b(0x924)]();else{if(_0x136b5f[_0x30b53b(0x968)]())[0x1,0x2,0x5,0x6][_0x30b53b(0x864)](_0x136b5f[_0x30b53b(0x6a7)]()[_0x30b53b(0x6fc)][_0x30b53b(0xd11)])?this[_0x30b53b(0x3f9)]():_0x30b53b(0xa3a)!==_0x30b53b(0xa3a)?this[_0x30b53b(0x83a)]=_0x13aefc[_0x30b53b(0x9a0)](_0x353c53[_0x30b53b(0x932)]):this[_0x30b53b(0x94b)]('skill');else _0x136b5f[_0x30b53b(0xa56)]()&&this['requestMotion']('item');}}}},Game_Battler['prototype'][_0x4c6a01(0x9f2)]=function(){const _0x2badd8=_0x4c6a01;return $dataSystem[_0x2badd8(0x3a0)][0x0];},Game_Battler['prototype'][_0x4c6a01(0x651)]=function(){const _0xea0953=_0x4c6a01,_0xe5beaf=this['getAttackMotion']();return _0xe5beaf?_0xe5beaf[_0xea0953(0xa2c)]:0x0;},Game_Battler['prototype'][_0x4c6a01(0xcc2)]=function(_0x276839){const _0x2fc4a3=_0x4c6a01;if(!$gameSystem[_0x2fc4a3(0x7a2)]())return;const _0xe8258c=this[_0x2fc4a3(0x72f)](),_0xa03572=_0x276839['battler']();if(!_0xe8258c||!_0xa03572)return;const _0x15ae97=_0xa03572[_0x2fc4a3(0x545)],_0x38cb24=_0xa03572[_0x2fc4a3(0xcaa)];this[_0x2fc4a3(0x442)](_0x15ae97,_0x38cb24,0x0,![],_0x2fc4a3(0x883),-0x1),_0xe8258c[_0x2fc4a3(0x242)]();const _0x329033=VisuMZ[_0x2fc4a3(0x5e5)]['Settings'][_0x2fc4a3(0x7bf)];let _0x305fcb=(_0xa03572[_0x2fc4a3(0xe09)]+_0xe8258c[_0x2fc4a3(0xe09)])/0x2;_0x305fcb*=this[_0x2fc4a3(0x966)]()?0x1:-0x1;let _0x366bd1=_0x329033[_0x2fc4a3(0x41a)]*(this['isActor']()?0x1:-0x1);_0x276839[_0x2fc4a3(0xd42)](_0x305fcb,_0x366bd1,0x0,![],_0x2fc4a3(0x883)),_0xa03572[_0x2fc4a3(0x242)]();},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x94b)]=function(_0x90054e){const _0x7f5419=_0x4c6a01;if(SceneManager[_0x7f5419(0x503)]()){const _0x42132f=this[_0x7f5419(0x72f)]();_0x42132f&&(_0x7f5419(0x37f)==='VNDWW'?(_0x42132f[_0x7f5419(0x986)](_0x90054e),[_0x7f5419(0x7e7),'thrust',_0x7f5419(0x3c7)][_0x7f5419(0x864)](_0x90054e)&&this[_0x7f5419(0x78c)]()):this[_0x7f5419(0xd61)]=(this[_0x7f5419(0xd61)]*(_0x573301-0x1)+this['_targetAngle'])/_0x197a70);}this['clearFreezeMotion']();},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x78c)]=function(){},Game_Battler[_0x4c6a01(0xc58)]['startWeaponAnimation']=function(_0x344e8c){const _0x1ce482=_0x4c6a01;if(SceneManager[_0x1ce482(0x503)]()){if('aNybu'!==_0x1ce482(0x6c7))this[_0x1ce482(0x55f)](_0x392333,_0x557e48);else{const _0x1d4501=this['battler']();if(_0x1d4501)_0x1d4501[_0x1ce482(0x9bb)](_0x344e8c);}}},Game_Battler['prototype'][_0x4c6a01(0x3d3)]=function(){if(SceneManager['isSceneBattle']()){const _0x11709b=this['getAttackWeaponAnimationId']();this['startWeaponAnimation'](_0x11709b);}},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x656)]=function(_0x1cba04,_0x3d6fad){const _0xc934a=_0x4c6a01;if(!_0x1cba04)return;if(!_0x1cba04['item']())return;if(_0x1cba04['isAttack']())return;if(_0x1cba04[_0xc934a(0x884)]())return;if(_0x1cba04[_0xc934a(0xa56)]())return;if($gameTemp[_0xc934a(0x7ba)])return;let _0x3e137c=0x0;const _0x4f6406=VisuMZ['BattleCore'][_0xc934a(0x32d)][_0xc934a(0x7bf)],_0x142ffc=_0x1cba04['item']()['note'];if(_0x142ffc[_0xc934a(0x996)](/<CAST ANIMATION: (\d+)>/i)){if(_0xc934a(0xabf)===_0xc934a(0x90e))return null;else _0x3e137c=Number(RegExp['$1']);}else{if(_0x142ffc['match'](/<NO CAST ANIMATION>/i)){if(_0xc934a(0x610)!==_0xc934a(0x86e))return;else{let _0x5b4957=_0x2e7417['skillTypes'][_0x6c27c7];if(!_0x5b4957)return;let _0x5f0a50=_0x5b4957;const _0xe8f8e3=this[_0xc934a(0x3fe)]();if(_0xe8f8e3==='text')_0x5f0a50=_0x5f0a50[_0xc934a(0x6f6)](/\x1I\[(\d+)\]/gi,''),_0x5f0a50=_0x5f0a50[_0xc934a(0x6f6)](/\\I\[(\d+)\]/gi,'');else{if(!_0x5b4957[_0xc934a(0x996)](/\\I\[(\d+)\]/i)){const _0x3ac924=_0x2d5269[_0xc934a(0xa52)]?_0x18ce1b[_0xc934a(0x8bd)][_0xc934a(0x32d)][_0xc934a(0xc01)]:_0x4a7a0b[_0xc934a(0x5e5)]['Settings'][_0xc934a(0xbe8)],_0x33c236=_0x177a3f['magicSkills'][_0xc934a(0x864)](_0x41d848),_0x2283fe=_0x33c236?_0x3ac924[_0xc934a(0xc5b)]:_0x3ac924[_0xc934a(0x701)];_0x5f0a50='\x5cI[%1]%2'[_0xc934a(0x511)](_0x2283fe,_0x5b4957);}}this[_0xc934a(0x39b)](_0x5f0a50,'skill',!![],_0x532875);}}else{if(_0x1cba04['isCertainHit']())_0x3e137c=_0x4f6406['CastCertain'];else{if(_0x1cba04['isPhysical']()){if(_0xc934a(0x6ea)!==_0xc934a(0x788))_0x3e137c=_0x4f6406[_0xc934a(0x8c0)];else{if(this[_0xc934a(0x985)][_0xc934a(0xda0)]!==_0x406e5b)return this[_0xc934a(0x985)][_0xc934a(0xda0)];const _0x5a7075=/<DAMAGE CAP:[ ](\d+)>/i,_0x56a53f=this['traitObjects']()[_0xc934a(0x39f)](_0x552ab6=>_0x552ab6&&_0x552ab6[_0xc934a(0x407)]['match'](_0x5a7075)?_0x5b0ac7(_0x3441d1['$1']):0x0);let _0x3463dd=_0x56a53f[_0xc934a(0x991)]>0x0?_0x21364d[_0xc934a(0xa5c)](..._0x56a53f):0x0;if(_0x3463dd<=0x0)_0x3463dd=_0x3d2abb[_0xc934a(0x5e5)][_0xc934a(0x32d)][_0xc934a(0x625)][_0xc934a(0x28e)];return this['_cache']['hardDamageCap']=_0x3463dd,this[_0xc934a(0x985)][_0xc934a(0xda0)];}}else _0x1cba04['isMagical']()&&(_0xc934a(0xd63)==='FTwUl'?this[_0xc934a(0x2e0)]=this[_0xc934a(0xa71)](this[_0xc934a(0x2e0)],this['_targetFloatHeight'],_0x1adade,_0x292e70,_0x5a934c):_0x3e137c=_0x4f6406[_0xc934a(0x6b5)]);}}}_0x3e137c>0x0&&$gameTemp['requestAnimation']([this],_0x3e137c,!!_0x3d6fad);},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x79b)]=function(){const _0x33d1fc=_0x4c6a01;SoundManager[_0x33d1fc(0xaa0)]();let _0x39a903=VisuMZ[_0x33d1fc(0x5e5)]['Settings']['ActionSequence']['ReflectAnimation'];if(_0x39a903>0x0){if(_0x33d1fc(0xbfc)===_0x33d1fc(0xce8)){this[_0x33d1fc(0x486)]('EscapeFailureJS');const _0x41ebaf=this['_escapeRatio'];_0x41e093[_0x33d1fc(0x5e5)][_0x33d1fc(0x3a7)][_0x33d1fc(0x3a4)](this),this[_0x33d1fc(0x748)]=_0x41ebaf+_0x5b493d[_0x33d1fc(0x5e5)][_0x33d1fc(0x32d)][_0x33d1fc(0x4bd)][_0x33d1fc(0xbcf)]['call'](this),this[_0x33d1fc(0xe1e)]=![],this['processPostBattleCommonEvents']('EscapeFail');}else Imported[_0x33d1fc(0xad0)]?$gameTemp[_0x33d1fc(0xdb8)]([this],_0x39a903):$gameTemp[_0x33d1fc(0x435)]([this],_0x39a903);}},VisuMZ['BattleCore']['Game_Battler_performDamage']=Game_Battler[_0x4c6a01(0xc58)]['performDamage'],Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xc2f)]=function(){const _0xcbe20f=_0x4c6a01;VisuMZ[_0xcbe20f(0x5e5)]['Game_Battler_performDamage'][_0xcbe20f(0x3a4)](this),this[_0xcbe20f(0xcc0)](),this[_0xcbe20f(0xaa1)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x622)]=Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x6b9)],Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x6b9)]=function(){const _0x3440f8=_0x4c6a01;VisuMZ['BattleCore'][_0x3440f8(0x622)][_0x3440f8(0x3a4)](this),this[_0x3440f8(0xcc0)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xdc4)]=Game_Battler['prototype'][_0x4c6a01(0x867)],Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x867)]=function(){const _0x475a33=_0x4c6a01;VisuMZ['BattleCore'][_0x475a33(0xdc4)][_0x475a33(0x3a4)](this),this[_0x475a33(0xcc0)]();},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xcc0)]=function(){const _0x2f6cd0=_0x4c6a01;if(!$gameSystem[_0x2f6cd0(0x7a2)]())return;if(this['_flinched'])return;this['_flinched']=!![];const _0x40d80d=this[_0x2f6cd0(0x72f)]();if(_0x40d80d)_0x40d80d[_0x2f6cd0(0xcf8)]();},Game_Battler['prototype'][_0x4c6a01(0xaa1)]=function(){const _0x55d23a=_0x4c6a01;if(!this[_0x55d23a(0x314)]())return;const _0x1475fc=VisuMZ['BattleCore'][_0x55d23a(0x32d)]['Actor'];if(!(_0x1475fc[_0x55d23a(0x7bc)]??![]))return;if(this[_0x55d23a(0xd68)]<=0x0)return;const _0x2347f6=this[_0x55d23a(0x72f)]();if(_0x2347f6){const _0x5db554=this[_0x55d23a(0xd68)],_0x25b287=(_0x5db554/this[_0x55d23a(0x769)])[_0x55d23a(0x381)](0.8,0x1),_0x192c29=_0x1475fc['ShakeFlinchPower']??0x30,_0x4007d5=_0x25b287*_0x192c29;_0x2347f6['startShakeFlinch'](_0x4007d5,_0x25b287);}},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x390)]=function(){const _0x3ab772=_0x4c6a01;if(this[_0x3ab772(0xb44)]()&&this['_motionType']!==_0x3ab772(0x52a)){this[_0x3ab772(0x94b)](_0x3ab772(0x52a));return;}if(this['isDead']()&&this['_motionType']===_0x3ab772(0x52a))return;if(!!this[_0x3ab772(0x63a)])return;if(this['isEnemy']()){if(_0x3ab772(0xded)===_0x3ab772(0xded)){if(!this[_0x3ab772(0xaca)]()&&this!==BattleManager[_0x3ab772(0x49e)]){if(this[_0x3ab772(0x72f)]())this['battler']()[_0x3ab772(0xbb5)]();}this[_0x3ab772(0xb98)]();return;}else return _0x14bb43;}if(this[_0x3ab772(0x875)]===_0x3ab772(0x954))return;if(this[_0x3ab772(0x875)]===_0x3ab772(0x340)&&!BattleManager[_0x3ab772(0x323)]())return;if(this[_0x3ab772(0x875)]===_0x3ab772(0x555)&&!BattleManager['isInputting']())return;this[_0x3ab772(0xb80)]();if(BattleManager[_0x3ab772(0x479)]()&&this===BattleManager[_0x3ab772(0x49e)])return;if(this[_0x3ab772(0x72f)]()&&BattleManager[_0x3ab772(0x323)]()){if(_0x3ab772(0xb8a)==='ufEEu'){const _0x164e08=this[_0x3ab772(0xa37)]('singleSkill',_0x2d3cfe['id']);this['select'](_0x164e08||0x0);}else{this[_0x3ab772(0x72f)]()[_0x3ab772(0xbb5)](),this[_0x3ab772(0xb98)]();return;}}},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xaca)]=function(){const _0x520de8=_0x4c6a01;if(!this[_0x520de8(0xdc1)]())return![];const _0x26d59f=this[_0x520de8(0x72f)]();if(!_0x26d59f)return![];const _0x422685=_0x26d59f[_0x520de8(0x551)];if(!_0x422685)return![];const _0x463114=_0x422685[_0x520de8(0x8d6)];return _0x463114&&!_0x463114[_0x520de8(0xd22)];},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x28a)]=function(){return this['_isBattlerFlipped'];},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x946)]=function(_0x4eb900){const _0x27885a=_0x4c6a01;if(!$gameSystem['isSideView']())return;this[_0x27885a(0x453)]=_0x4eb900;const _0x5a56d4=this[_0x27885a(0x72f)]();if(_0x5a56d4)_0x5a56d4[_0x27885a(0xba4)]();},Game_Battler[_0x4c6a01(0xc58)]['setBattlerFacePoint']=function(_0x1f770a,_0x264dec,_0x2db58a){const _0x275ccc=_0x4c6a01;if(!$gameSystem[_0x275ccc(0x7a2)]())return;const _0x242225=this[_0x275ccc(0x72f)]();if(!_0x242225)return;if(_0x1f770a===_0x242225[_0x275ccc(0x545)])return;let _0x32b9df=![];if(this[_0x275ccc(0x966)]()){if(_0x1f770a>_0x242225['_baseX'])_0x32b9df=!![];if(_0x1f770a<_0x242225['_baseX'])_0x32b9df=![];}else{if(this[_0x275ccc(0xb37)]()){if(_0x1f770a>_0x242225[_0x275ccc(0x545)])_0x32b9df=![];if(_0x1f770a<_0x242225['_baseX'])_0x32b9df=!![];}};this[_0x275ccc(0x946)](_0x2db58a?!_0x32b9df:_0x32b9df),_0x242225[_0x275ccc(0xba4)]();},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xd42)]=function(_0x502eeb,_0x292552,_0x1bcd7b,_0x3a2410,_0x57971d){const _0xe169f6=_0x4c6a01;if(!$gameSystem[_0xe169f6(0x7a2)]())return;const _0x399d4a=this[_0xe169f6(0x72f)]();if(!_0x399d4a)return;if(_0x3a2410)this['setBattlerFacePoint'](_0x502eeb+_0x399d4a[_0xe169f6(0x545)],_0x292552+_0x399d4a[_0xe169f6(0xcaa)],![]);_0x502eeb+=_0x399d4a[_0xe169f6(0x545)]-_0x399d4a[_0xe169f6(0xb92)],_0x292552+=_0x399d4a['_baseY']-_0x399d4a['_homeY'],_0x399d4a[_0xe169f6(0x36f)](_0x502eeb,_0x292552,_0x1bcd7b);if(Imported[_0xe169f6(0xad0)])_0x399d4a[_0xe169f6(0x85f)](_0x57971d||_0xe169f6(0x883));},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x442)]=function(_0x2bbf0c,_0x4495e3,_0x3a3cad,_0x1dafe1,_0x546924,_0x2a4c98){const _0x108d63=_0x4c6a01;if(!$gameSystem[_0x108d63(0x7a2)]())return;const _0x5e0937=this[_0x108d63(0x72f)]();if(!_0x5e0937)return;if(_0x2bbf0c===Infinity||_0x4495e3===Infinity)return;if(isNaN(_0x2bbf0c)||isNaN(_0x4495e3))return;_0x2a4c98=_0x2a4c98||0x0;if(_0x2a4c98>0x0){if(_0x5e0937[_0x108d63(0x545)]>_0x2bbf0c)_0x2bbf0c+=_0x5e0937[_0x108d63(0xe09)]/0x2+_0x2a4c98;if(_0x5e0937[_0x108d63(0x545)]<_0x2bbf0c)_0x2bbf0c-=_0x5e0937[_0x108d63(0xe09)]/0x2+_0x2a4c98;}if(_0x1dafe1)this[_0x108d63(0xca9)](_0x2bbf0c,_0x4495e3,![]);_0x2bbf0c-=_0x5e0937[_0x108d63(0xb92)],_0x4495e3-=_0x5e0937[_0x108d63(0xb2f)],_0x5e0937[_0x108d63(0x36f)](_0x2bbf0c,_0x4495e3,_0x3a3cad);if(Imported['VisuMZ_0_CoreEngine'])_0x5e0937['setMoveEasingType'](_0x546924||_0x108d63(0x883));},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x8e4)]=function(_0x87c914,_0x15fc06,_0x441398,_0x2054ed,_0x1a1723){const _0xcc8d4c=_0x4c6a01;if(!$gameSystem['isSideView']())return;const _0x1da907=this[_0xcc8d4c(0x72f)]();if(!_0x1da907)return;if(_0x2054ed)this[_0xcc8d4c(0xca9)](_0x87c914+_0x1da907['_baseX'],_0x15fc06+_0x1da907[_0xcc8d4c(0xcaa)],![]);_0x87c914+=_0x1da907[_0xcc8d4c(0xb92)],_0x15fc06+=_0x1da907['_homeY'],_0x1da907[_0xcc8d4c(0x5d6)](_0x87c914,_0x15fc06,_0x441398,_0x1a1723),this['_forcedHomeX']=_0x87c914,this[_0xcc8d4c(0x48e)]=_0x15fc06;},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xb0f)]=function(_0x203bfe,_0x5cc69b,_0x5b7a72,_0x44f17c,_0x54525b,_0x5a1772){const _0x416a8f=_0x4c6a01;if(!$gameSystem[_0x416a8f(0x7a2)]())return;const _0x1f2809=this[_0x416a8f(0x72f)]();if(!_0x1f2809)return;_0x5a1772=_0x5a1772||0x0;if(_0x5a1772>0x0){if(_0x1f2809['_baseX']>_0x203bfe)_0x203bfe+=_0x1f2809['width']/0x2+_0x5a1772;if(_0x1f2809[_0x416a8f(0x545)]<_0x203bfe)_0x203bfe-=_0x1f2809['width']/0x2+_0x5a1772;}if(_0x44f17c)this['setBattlerFacePoint'](_0x203bfe,_0x5cc69b,![]);_0x1f2809[_0x416a8f(0x5d6)](_0x203bfe,_0x5cc69b,_0x5b7a72,_0x54525b),this['_forcedHomeX']=_0x203bfe,this['_forcedHomeY']=_0x5cc69b;},Game_Battler['prototype'][_0x4c6a01(0x223)]=function(_0x487946,_0x2a4ce3,_0x564ea8){const _0x2ad4b6=_0x4c6a01;if(!$gameSystem[_0x2ad4b6(0x7a2)]())return;const _0x540ef6=this['battler']();if(!_0x540ef6)return;_0x540ef6[_0x2ad4b6(0x96a)](_0x487946,_0x2a4ce3,_0x564ea8);},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xc33)]=function(_0x5428a5,_0x55a667){const _0x1a94d1=_0x4c6a01;if(!$gameSystem[_0x1a94d1(0x7a2)]())return;const _0x508d5a=this[_0x1a94d1(0x72f)]();if(!_0x508d5a)return;_0x508d5a[_0x1a94d1(0x34b)](_0x5428a5,_0x55a667);},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xbbc)]=function(_0x537399,_0xb7ac04,_0x4ee322,_0x40e050){const _0x21e9a4=_0x4c6a01;if(!$gameSystem['isSideView']())return;const _0x24b710=this['battler']();if(!_0x24b710)return;_0x24b710[_0x21e9a4(0x2a7)](_0x537399,_0xb7ac04,_0x4ee322,_0x40e050);},Game_Battler['prototype'][_0x4c6a01(0xb90)]=function(_0x46de9e,_0x1e0bd7,_0xd2ed26,_0x30222a){const _0x419d50=_0x4c6a01;if(!$gameSystem['isSideView']())return;const _0x4e1dd4=this[_0x419d50(0x72f)]();if(!_0x4e1dd4)return;this[_0x419d50(0x966)]()&&(_0x419d50(0x4f6)==='HJdZJ'?(this[_0x419d50(0xb92)]=this[_0x419d50(0x67f)],this['_homeY']=this[_0x419d50(0x8d8)]):(_0x46de9e*=-0x1,_0x1e0bd7*=-0x1)),_0x4e1dd4[_0x419d50(0xbcc)](_0x46de9e,_0x1e0bd7,_0xd2ed26,_0x30222a);},Game_Battler[_0x4c6a01(0xc58)]['growBattler']=function(_0x386fd1,_0x144956,_0x21d71a,_0x1b190a){const _0x37b2af=_0x4c6a01;if(!$gameSystem[_0x37b2af(0x7a2)]())return;const _0x5b507f=this[_0x37b2af(0x72f)]();if(!_0x5b507f)return;_0x5b507f[_0x37b2af(0x802)](_0x386fd1,_0x144956,_0x21d71a,_0x1b190a);},Game_Battler[_0x4c6a01(0xc58)]['changeBattlerOpacity']=function(_0x1d6f82,_0x503ce6,_0xeb3fea){const _0x12845f=_0x4c6a01;if(!$gameSystem['isSideView']())return;const _0x22536f=this[_0x12845f(0x72f)]();if(!_0x22536f)return;_0x22536f['startOpacity'](_0x1d6f82,_0x503ce6,_0xeb3fea);},Game_Battler[_0x4c6a01(0xc58)]['clearFreezeMotion']=function(){const _0x41c190=_0x4c6a01,_0x233bc6=!!this[_0x41c190(0x63a)];this['_freezeMotionData']=undefined,_0x233bc6&&(this[_0x41c190(0x390)](),this[_0x41c190(0x82a)]());},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x82a)]=function(){const _0xb99d51=_0x4c6a01;if(!SceneManager[_0xb99d51(0x503)]())return;const _0x458939=this[_0xb99d51(0x72f)]();if(!_0x458939)return;let _0x24afb9=this[_0xb99d51(0x966)]()?_0x458939[_0xb99d51(0xc45)]:_0x458939['_svBattlerSprite'][_0xb99d51(0xc45)];if(_0x24afb9){if('Xqaho'===_0xb99d51(0x646)){if(!_0x3bc09c[_0xb99d51(0x5e5)][_0xb99d51(0x32d)][_0xb99d51(0x625)][_0xb99d51(0xd97)])return _0x4f9477;const _0x54fdab=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0xb99d51(0x407)][_0xb99d51(0x996)](_0x54fdab))return _0x402326;if(this[_0xb99d51(0xbf1)]()[_0xb99d51(0x1ec)]()['some'](_0x329c36=>_0x329c36&&_0x329c36[_0xb99d51(0x407)][_0xb99d51(0x996)](_0x54fdab)))return _0x4fc6c6;const _0x155a2=_0x160e66<0x0?-0x1:0x1;_0x41d951=_0x5dae11[_0xb99d51(0x3fa)](_0x4e823b);let _0x3800fb=this['subject']()[_0xb99d51(0xc5d)]();this[_0xb99d51(0x6a7)]()['note']['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x3800fb+=_0x380abe(_0x44378b['$1'])/0x64);_0x3800fb=_0x3800fb['clamp'](0.01,0x1);const _0x1683bb=this[_0xb99d51(0x66d)](),_0x5e5946=_0x3800fb*_0x1683bb;if(_0x17dafb>_0x5e5946&&_0x1683bb>_0x5e5946){_0x1d9116-=_0x5e5946;const _0x49cf32=_0x334cf4[_0xb99d51(0x5e5)][_0xb99d51(0x32d)]['Damage'][_0xb99d51(0xca2)],_0x488946=_0xf7e71f[_0xb99d51(0xa5c)](0x1-_0x56ca9c/((_0x1683bb-_0x5e5946)*_0x49cf32+_0x5889f4),0.01);_0x2857f3*=_0x488946,_0x319d62+=_0x5e5946;}return _0x3dc9c8*_0x155a2;}else _0x24afb9[_0xb99d51(0xb68)](0x0);}},Game_Battler['prototype'][_0x4c6a01(0x2ca)]=function(_0x75edd4,_0x4bddf3,_0x2e84ed){const _0x565b2a=_0x4c6a01;if(this[_0x565b2a(0xb37)]()&&!this[_0x565b2a(0xdc1)]())return;let _0x58866b=0x0,_0x1962c5=0x0;if(_0x75edd4[_0x565b2a(0x996)](/ATTACK[ ](\d+)/i)){if('JnvRm'==='PleTB')return this[_0x565b2a(0x829)]();else _0x1962c5=Number(RegExp['$1']),_0x1962c5--;}if(this['isActor']()){const _0x3d31c8=this[_0x565b2a(0x88c)]();_0x58866b=_0x3d31c8[_0x1962c5]?_0x3d31c8[_0x1962c5][_0x565b2a(0x523)]:0x0;}else{if(this[_0x565b2a(0xb37)]()){if(_0x565b2a(0x493)!==_0x565b2a(0x493)){const _0x127d39=new _0x3bbef1();_0x127d39[_0x565b2a(0x593)]=_0x335b1e[_0x565b2a(0x9a0)](_0x2d352e[_0x565b2a(0x652)]),_0x127d39['x']=_0x39b49e[_0x565b2a(0x530)]||0x0,_0x127d39['y']=_0x4d3c02[_0x565b2a(0x414)]||0x0,this[_0x565b2a(0xbe0)](_0x127d39),this[_0x565b2a(0x43f)]=_0x127d39;}else _0x58866b=this[_0x565b2a(0xb04)]()[_0x565b2a(0x523)]||0x0;}}const _0x4b89ac=$dataSystem['attackMotions'][_0x58866b];if(_0x75edd4['match'](/attack/i)){if(_0x565b2a(0x208)==='LlUjU'){let _0x51352a=_0x59274b[_0x565b2a(0x349)](_0x3a0343['BattleCore'][_0x565b2a(0xcbd)][_0x565b2a(0x3a4)](this));return _0x58bdc0[_0x565b2a(0x5e5)]['ShuffleArray'](_0x51352a);}else _0x75edd4=[_0x565b2a(0xe1f),_0x565b2a(0x7e7),'missile'][_0x4b89ac[_0x565b2a(0xd11)]]||_0x565b2a(0x7e7);}this[_0x565b2a(0x63a)]={'motionType':_0x75edd4,'weaponImageId':_0x4bddf3?_0x4b89ac[_0x565b2a(0xa2c)]:0x0,'pattern':_0x2e84ed};},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x38d)]=function(_0x2df81a){const _0x2c4566=_0x4c6a01;if(!_0x2df81a)return![];return _0x2df81a[_0x2c4566(0xbe7)]()===this['friendsUnit']();},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x46e)]=function(_0x11aa8d){const _0x20b251=_0x4c6a01;if(!_0x11aa8d)return![];return _0x11aa8d[_0x20b251(0x22c)]()===this[_0x20b251(0xbe7)]();},Game_Battler[_0x4c6a01(0xc58)]['hasStaticSvBattler']=function(){return![];},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x2d9)]=function(){const _0x19b9c9=_0x4c6a01;return this[_0x19b9c9(0x1ee)]()[_0x19b9c9(0x996)](/\$/i);},Game_Enemy[_0x4c6a01(0xc58)]['hasStaticSvBattler']=function(){const _0x3901ce=_0x4c6a01;return this[_0x3901ce(0xdc1)]()&&this[_0x3901ce(0xdea)]()[_0x3901ce(0x996)](/\$/i);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xc6a)]=Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xb68)],Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xb68)]=function(_0x10f4a6){const _0x67516b=_0x4c6a01;VisuMZ[_0x67516b(0x5e5)][_0x67516b(0xc6a)][_0x67516b(0x3a4)](this,_0x10f4a6),this['initBattlePortrait']();},Game_Actor['prototype'][_0x4c6a01(0x333)]=function(){const _0x539901=_0x4c6a01;this[_0x539901(0x6ff)]='',this[_0x539901(0x73e)]()&&this['actor']()[_0x539901(0x407)][_0x539901(0x996)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x4c6a01(0xc58)]['getBattlePortraitFilename']=function(){const _0x16cc7e=_0x4c6a01;if(this[_0x16cc7e(0x393)]()!=='')return _0x16cc7e(0x688)!==_0x16cc7e(0x2d4)?this[_0x16cc7e(0x393)]():this[_0x16cc7e(0x746)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this['getMenuImage']()!=='')return this[_0x16cc7e(0xb61)]();}return'';},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x393)]=function(){const _0x3cdee5=_0x4c6a01;if(this['_battlePortrait']===undefined)this[_0x3cdee5(0x333)]();return this[_0x3cdee5(0x6ff)];},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x969)]=function(_0x2f89d5){const _0x4bce8d=_0x4c6a01;if(this[_0x4bce8d(0x6ff)]===undefined)this[_0x4bce8d(0x333)]();this[_0x4bce8d(0x6ff)]=_0x2f89d5;if(SceneManager[_0x4bce8d(0x503)]()&&$gameParty[_0x4bce8d(0x9df)]()['includes'](this)){const _0x4e0553=SceneManager[_0x4bce8d(0x4c1)][_0x4bce8d(0x270)];_0x4e0553&&_0x4e0553['refreshActorPortrait'](this);}},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x47e)]=function(){return!![];},Game_Actor[_0x4c6a01(0xc58)]['isAutoBattle']=function(){const _0x286f08=_0x4c6a01;if(!this[_0x286f08(0x707)]()&&BattleManager[_0x286f08(0x673)])return!![];return Game_Battler[_0x286f08(0xc58)][_0x286f08(0x77d)][_0x286f08(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xa69)]=Game_Actor['prototype'][_0x4c6a01(0x984)],Game_Actor['prototype'][_0x4c6a01(0x984)]=function(){const _0x67b3b9=_0x4c6a01;if(BattleManager[_0x67b3b9(0x673)]&&!ConfigManager[_0x67b3b9(0xa1b)])return _0x67b3b9(0x4f4)===_0x67b3b9(0x4f4)?this[_0x67b3b9(0xb31)]():_0x41b785['BattleCore'][_0x67b3b9(0x32d)][_0x67b3b9(0x921)][_0x67b3b9(0x941)];else{if(_0x67b3b9(0xa0d)!=='vSmFu'){if(this[_0x67b3b9(0x432)]===_0x67b3b9(0x4d8))return!![];if(this[_0x67b3b9(0x432)]===_0x67b3b9(0x2c9))return!![];return _0x377408[_0x67b3b9(0x5e5)][_0x67b3b9(0xd87)]['call'](this);}else{return VisuMZ[_0x67b3b9(0x5e5)][_0x67b3b9(0xa69)][_0x67b3b9(0x3a4)](this);;}}},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xb31)]=function(){const _0x4e4127=_0x4c6a01,_0x1b241c=[],_0x4d37b4=new Game_Action(this);return _0x4d37b4[_0x4e4127(0xb8b)](),_0x1b241c[_0x4e4127(0x543)](_0x4d37b4),_0x1b241c;},Game_Actor[_0x4c6a01(0xc58)]['battleCommands']=function(){const _0x4747a9=_0x4c6a01;if(this[_0x4747a9(0xdc0)]()[_0x4747a9(0x407)][_0x4747a9(0x996)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i))return String(RegExp['$1'])[_0x4747a9(0xcaf)](/[\r\n]+/);else{if(_0x4747a9(0x618)===_0x4747a9(0x6f8)){let _0x286a93='battleUIOffsetX';if(this['checkCacheKey'](_0x286a93))return this[_0x4747a9(0x985)][_0x286a93];return this[_0x4747a9(0x985)][_0x286a93]=this[_0x4747a9(0xc96)](this['enemy']()),this[_0x4747a9(0x985)][_0x286a93];}else return VisuMZ[_0x4747a9(0x5e5)][_0x4747a9(0x32d)][_0x4747a9(0xbe8)]['BattleCmdList'];}},Game_Actor['prototype'][_0x4c6a01(0xaaf)]=function(){const _0x239928=_0x4c6a01;if(this['_cache'][_0x239928(0x3cb)]!==undefined)return this['_cache'][_0x239928(0x3cb)];return this[_0x239928(0x73e)]()['note'][_0x239928(0x996)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?_0x239928(0x7e5)==='EVeRw'?this[_0x239928(0x299)](_0x3c4548[_0x239928(0xb04)]()[_0x239928(0x2db)]||_0x239928(0x929)):(this[_0x239928(0x985)][_0x239928(0x3cb)]=eval(RegExp['$1']),this[_0x239928(0x985)][_0x239928(0xa55)]=eval(RegExp['$2'])):this[_0x239928(0x985)]['svAnchorX']=Game_Battler['prototype'][_0x239928(0xaaf)]['call'](this),this['_cache'][_0x239928(0x3cb)];},Game_Actor['prototype']['svBattlerAnchorY']=function(){const _0xbdd2d3=_0x4c6a01;if(this[_0xbdd2d3(0x985)]['svAnchorY']!==undefined)return this[_0xbdd2d3(0x985)][_0xbdd2d3(0xa55)];return this['actor']()[_0xbdd2d3(0x407)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0xbdd2d3(0x985)]['svAnchorX']=eval(RegExp['$1']),this[_0xbdd2d3(0x985)]['svAnchorY']=eval(RegExp['$2'])):this[_0xbdd2d3(0x985)]['svAnchorY']=Game_Battler[_0xbdd2d3(0xc58)][_0xbdd2d3(0x706)][_0xbdd2d3(0x3a4)](this),this['_cache'][_0xbdd2d3(0xa55)];},Game_Actor[_0x4c6a01(0xc58)]['svBattlerShadowVisible']=function(){const _0x3e0ae6=_0x4c6a01;if(this[_0x3e0ae6(0x985)]['svShadow']!==undefined)return this[_0x3e0ae6(0x985)][_0x3e0ae6(0x801)];if(this[_0x3e0ae6(0x73e)]()[_0x3e0ae6(0x407)][_0x3e0ae6(0x996)](/<SIDEVIEW SHOW SHADOW>/i))_0x3e0ae6(0x775)===_0x3e0ae6(0x775)?this[_0x3e0ae6(0x985)]['svShadow']=!![]:_0xda9ead[_0x3e0ae6(0x9ad)][_0x3e0ae6(0xc6f)]=![];else this['actor']()[_0x3e0ae6(0x407)][_0x3e0ae6(0x996)](/<SIDEVIEW HIDE SHADOW>/i)?_0x3e0ae6(0x888)!==_0x3e0ae6(0x8ff)?this[_0x3e0ae6(0x985)][_0x3e0ae6(0x801)]=![]:_0x503a09['prototype'][_0x3e0ae6(0x353)][_0x3e0ae6(0x3a4)](this,_0x467e83,_0x4055c4,_0x26fc27,_0x5489b6):this[_0x3e0ae6(0x985)][_0x3e0ae6(0x801)]=Game_Battler[_0x3e0ae6(0xc58)][_0x3e0ae6(0x95d)][_0x3e0ae6(0x3a4)](this);return this[_0x3e0ae6(0x985)][_0x3e0ae6(0x801)];},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x5ef)]=function(){const _0x28a726=_0x4c6a01;return VisuMZ[_0x28a726(0x5e5)]['Settings'][_0x28a726(0x9ad)][_0x28a726(0x237)];},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x78c)]=function(){const _0x296fa4=_0x4c6a01,_0x5f4efe=this[_0x296fa4(0x88c)](),_0x52bdae=_0x5f4efe[0x0]?_0x5f4efe[0x0][_0x296fa4(0x523)]:0x0,_0x26ec11=$dataSystem[_0x296fa4(0x3a0)][_0x52bdae];_0x26ec11&&this['startWeaponAnimation'](_0x26ec11[_0x296fa4(0xa2c)]);},Game_Actor[_0x4c6a01(0xc58)]['performAction']=function(_0x388d6f){const _0x29e2e2=_0x4c6a01;Game_Battler[_0x29e2e2(0xc58)][_0x29e2e2(0xbfe)][_0x29e2e2(0x3a4)](this,_0x388d6f),this['performActionMotions'](_0x388d6f);},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x9f2)]=function(){const _0x945eb2=_0x4c6a01,_0x2e6424=this[_0x945eb2(0x88c)](),_0x3513e4=_0x2e6424[0x0]?_0x2e6424[0x0][_0x945eb2(0x523)]:0x0;return $dataSystem[_0x945eb2(0x3a0)][_0x3513e4];},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x518)]=function(_0x41e492){const _0x4ccbb7=_0x4c6a01;_0x41e492=_0x41e492||0x1,_0x41e492--;const _0x1fef71=this[_0x4ccbb7(0x88c)]();return _0x1fef71[_0x41e492]?_0x1fef71[_0x41e492]['animationId']:0x0;},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x9a9)]=function(_0x40e99f){const _0x365280=_0x4c6a01;_0x40e99f=_0x40e99f||0x1,_0x40e99f--;const _0x1faf38=this['weapons'](),_0x2cd9db=_0x1faf38[_0x40e99f]?_0x1faf38[_0x40e99f][_0x365280(0x523)]:0x0;return $dataSystem[_0x365280(0x3a0)][_0x2cd9db];},Game_Actor[_0x4c6a01(0xc58)]['performAttackSlot']=function(_0x360227){const _0x26e457=_0x4c6a01;_0x360227=_0x360227||0x1,_0x360227--;const _0x510fce=this[_0x26e457(0x88c)](),_0xfba7a0=_0x510fce[_0x360227]?_0x510fce[_0x360227][_0x26e457(0x523)]:0x0,_0x3a5003=$dataSystem['attackMotions'][_0xfba7a0];if(_0x3a5003){if(_0x3a5003[_0x26e457(0xd11)]===0x0)this['requestMotion'](_0x26e457(0xe1f));else{if(_0x3a5003['type']===0x1)this[_0x26e457(0x94b)](_0x26e457(0x7e7));else _0x3a5003['type']===0x2&&(_0x26e457(0xdeb)!==_0x26e457(0x65d)?this['requestMotion'](_0x26e457(0x3c7)):this[_0x26e457(0x432)]=_0x6a578b['toLowerCase']()[_0x26e457(0x4e9)]());}this[_0x26e457(0x396)](_0x3a5003['weaponImageId']);}},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x2c5)]=function(_0x28d7c5){const _0x1023de=_0x4c6a01;if(this[_0x1023de(0x966)]()){if(_0x1023de(0x9e3)!==_0x1023de(0x9e3)){if(_0x1e16fa===_0x34140f[_0x1023de(0xaee)]()){let _0x31900e=_0x4c059d[_0x1023de(0x5c7)];_0x31900e*=_0x5d371f[_0x1023de(0x7b6)](_0xe024fd),_0x31900e*=this[_0x1023de(0xbf1)]()['attackStatesRate'](_0x454fd3),_0x31900e*=this['lukEffectRate'](_0x29002f),_0x3f9584[_0x1023de(0x8f7)]()<_0x31900e&&(_0x14bc05['_deathStateApplied']=!![],this[_0x1023de(0x76a)](_0x334f78));}}else{const _0x5db74e=this[_0x1023de(0x88c)]();if(_0x5db74e['length']>0x0){if(_0x1023de(0x4b6)===_0x1023de(0x4b6)){const _0x10e134=_0x5db74e[_0x28d7c5];if(_0x10e134)_0x28d7c5=this[_0x1023de(0xdbe)]()[_0x1023de(0x93e)](_0x10e134);}else{if(!_0x4c2b32['isSideView']())return;const _0x333abc=this[_0x1023de(0x72f)]();if(!_0x333abc)return;if(_0x1174a9)this[_0x1023de(0xca9)](_0x565f34+_0x333abc[_0x1023de(0x545)],_0x20653c+_0x333abc[_0x1023de(0xcaa)],![]);_0x2f4363+=_0x333abc[_0x1023de(0xb92)],_0x18cea8+=_0x333abc[_0x1023de(0xb2f)],_0x333abc[_0x1023de(0x5d6)](_0x407a02,_0x2b02d4,_0x5ad571,_0x3967e2),this['_forcedHomeX']=_0x2afa21,this['_forcedHomeY']=_0x31c1b0;}}}}this[_0x1023de(0xd85)]=_0x28d7c5||0x0,this[_0x1023de(0x985)]={};},Game_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x87d)]=function(){const _0x496955=_0x4c6a01;this[_0x496955(0xd85)]=this[_0x496955(0xd85)]||0x0,this[_0x496955(0xd85)]++,this[_0x496955(0x985)]={};},Game_Battler['prototype'][_0x4c6a01(0xd70)]=function(){const _0x5b9ba4=_0x4c6a01;this[_0x5b9ba4(0xd85)]=undefined,this[_0x5b9ba4(0x985)]={};},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xb6b)]=Game_Actor['prototype'][_0x4c6a01(0xdbe)],Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xdbe)]=function(){const _0x532165=_0x4c6a01;let _0x268545=VisuMZ[_0x532165(0x5e5)][_0x532165(0xb6b)][_0x532165(0x3a4)](this);if(this['_tempEquipCheck'])return _0x268545;if(this[_0x532165(0xd85)]!==undefined){if('ApjJJ'!==_0x532165(0xad5)){this[_0x532165(0xdf5)]=!![];const _0x2c0c16=this[_0x532165(0xe0e)]();for(let _0x228716=0x0;_0x228716<_0x2c0c16[_0x532165(0x991)];_0x228716++){_0x2c0c16[_0x228716]===0x1&&this[_0x532165(0xd85)]!==_0x228716&&(_0x268545[_0x228716]=null);}this['_tempEquipCheck']=undefined;}else this[_0x532165(0xadf)](),this['addBattleCoreAutoBattleStyleCommand']();}return _0x268545;},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x5e6)]=function(_0xea060b){const _0x5cdc4e=_0x4c6a01;return _0xea060b[_0x5cdc4e(0x966)]()?_0xea060b[_0x5cdc4e(0x88c)]()[_0x5cdc4e(0x991)]||0x1:0x1;},Window_BattleLog[_0x4c6a01(0xc58)]['setActiveWeaponSet']=function(_0x3ab194,_0x66533f){const _0x47788a=_0x4c6a01;_0x3ab194&&_0x3ab194[_0x47788a(0x966)]()&&_0x3ab194['setActiveWeaponSlot'](_0x66533f),this[_0x47788a(0x89b)]();},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x522)]=function(_0x5a42d5){const _0x4853dc=_0x4c6a01;_0x5a42d5&&_0x5a42d5[_0x4853dc(0x966)]()&&_0x5a42d5[_0x4853dc(0xd70)](),this[_0x4853dc(0x89b)]();},Game_Actor['prototype']['battleUIOffsetX']=function(){const _0x334147=_0x4c6a01;let _0x2fd6f6=_0x334147(0x655);if(this[_0x334147(0x496)](_0x2fd6f6))return this['_cache'][_0x2fd6f6];return this['_cache'][_0x2fd6f6]=this[_0x334147(0xc96)](this[_0x334147(0x73e)]()),this[_0x334147(0x985)][_0x2fd6f6];},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x510)]=function(){const _0xefbc2a=_0x4c6a01;let _0x33e27=_0xefbc2a(0x510);if(this[_0xefbc2a(0x496)](_0x33e27))return this[_0xefbc2a(0x985)][_0x33e27];return this[_0xefbc2a(0x985)][_0x33e27]=this[_0xefbc2a(0x727)](this[_0xefbc2a(0x73e)]()),this[_0xefbc2a(0x985)][_0x33e27];},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x3c9)]=Game_Enemy['prototype'][_0x4c6a01(0xb68)],Game_Enemy['prototype'][_0x4c6a01(0xb68)]=function(_0xa5b2b8,_0x456b0b,_0x1c5d47){const _0x18d4c3=_0x4c6a01;_0xa5b2b8=DataManager[_0x18d4c3(0x3ca)](_0xa5b2b8),VisuMZ[_0x18d4c3(0x5e5)][_0x18d4c3(0x3c9)][_0x18d4c3(0x3a4)](this,_0xa5b2b8,_0x456b0b,_0x1c5d47);if(Imported[_0x18d4c3(0xc07)]){if('dEWYO'!==_0x18d4c3(0xd45))this[_0x18d4c3(0xd3c)]();else{if(_0x420559[_0x18d4c3(0xad8)]&&_0x2a3c38[_0x18d4c3(0x39d)]!==_0x2eedd2)return _0x104910['uiInputPosition'];else{if(this[_0x18d4c3(0xd3a)]()===_0x18d4c3(0x2ab))return![];else{return _0x4b44d0[_0x18d4c3(0xc58)][_0x18d4c3(0xd83)][_0x18d4c3(0x3a4)](this);;}}}}this[_0x18d4c3(0x326)](),this[_0x18d4c3(0x206)](),Imported['VisuMZ_1_ElementStatusCore']&&(_0x18d4c3(0x234)===_0x18d4c3(0x234)?this[_0x18d4c3(0xc68)]():_0x1c2f4f[_0x18d4c3(0x49e)][_0x18d4c3(0xbe7)]()['gainCurrentActionsFTB'](_0x5bfa5d));},Game_Enemy[_0x4c6a01(0xc58)]['clearBattleCoreData']=function(){const _0x4bc94a=_0x4c6a01,_0x3e73c9=VisuMZ[_0x4bc94a(0x5e5)][_0x4bc94a(0x32d)][_0x4bc94a(0x82d)];this[_0x4bc94a(0xcae)]=_0x3e73c9[_0x4bc94a(0x332)],this[_0x4bc94a(0xa4b)]={};},Game_Enemy['prototype']['setupBattleCoreData']=function(){const _0x105d7=_0x4c6a01,_0x23a603=VisuMZ[_0x105d7(0x5e5)]['Settings']['Enemy'],_0x2aaaa7=this[_0x105d7(0x962)]()['note'];this[_0x105d7(0xa4b)]={'name':'','wtypeId':_0x23a603[_0x105d7(0xb1a)],'collapse':_0x23a603[_0x105d7(0x715)],'motionIdle':_0x23a603[_0x105d7(0x372)],'width':_0x23a603[_0x105d7(0xdc7)]||0x40,'height':_0x23a603['Height']||0x40,'anchorX':_0x23a603[_0x105d7(0xbd9)]||0x0,'anchorY':_0x23a603[_0x105d7(0x6a9)]||0x0,'shadow':_0x23a603[_0x105d7(0xc9d)]};_0x2aaaa7[_0x105d7(0x996)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x105d7(0xcae)]=Number(RegExp['$1']));const _0x56b342=this['_svBattlerData'];if(_0x2aaaa7['match'](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x105d7(0x9ff)!==_0x105d7(0x9ff)){const _0x6093c6=_0x4577c4[_0x105d7(0x8bd)][_0x105d7(0x32d)][_0x105d7(0xd5c)];_0x6093c6&&_0x6093c6['ActionEndUpdate']===![]&&this[_0x105d7(0xe0a)](0x1);}else _0x56b342[_0x105d7(0x2c7)]=String(RegExp['$1']);}else{if(_0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x4a3e0b=String(RegExp['$1'])[_0x105d7(0xcaf)](/[\r\n]+/)[_0x105d7(0xbde)]('');_0x56b342[_0x105d7(0x2c7)]=DataManager[_0x105d7(0x96b)](_0x4a3e0b);}}if(_0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x105d7(0xa53)!=='dUOIM')return _0x4f3116['_forcedBattleLayout'];else _0x56b342[_0x105d7(0x33d)]=eval(RegExp['$1']),_0x56b342[_0x105d7(0x955)]=eval(RegExp['$2']);}if(_0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW COLLAPSE>/i))_0x105d7(0x499)!==_0x105d7(0x859)?_0x56b342[_0x105d7(0x81a)]=!![]:this[_0x105d7(0x973)]+=0x10;else{if(_0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW NO COLLAPSE>/i)){if(_0x105d7(0x89d)!=='uXTJU')_0x56b342[_0x105d7(0x81a)]=![];else{const _0x521cf4=_0x2d56b3[this[_0x105d7(0x2fc)][_0x105d7(0x42a)]()];if(!_0x521cf4)return;if(!this[_0x105d7(0x8ca)](_0x521cf4))return;const _0x3c98e5=this['commandStyle'](),_0x42a0a1=_0x4b5fbf[_0x105d7(0x5bc)](_0x521cf4),_0x5aad45=_0x281eb5[_0x105d7(0x247)](_0x521cf4),_0x5a5c97=_0x3c98e5===_0x105d7(0x2b8)?_0x42a0a1:_0x105d7(0x751)[_0x105d7(0x511)](_0x5aad45,_0x42a0a1);this[_0x105d7(0x39b)](_0x5a5c97,_0x105d7(0x555),this[_0x105d7(0x2fc)]['canGuard']());}}}if(_0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW SHOW SHADOW>/i))_0x56b342[_0x105d7(0x379)]=!![];else _0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x105d7(0x64b)!==_0x105d7(0x64b)?this[_0x105d7(0x753)]():_0x56b342[_0x105d7(0x379)]=![]);if(_0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x56b342[_0x105d7(0x2db)]=String(RegExp['$1'])[_0x105d7(0x613)]()[_0x105d7(0x4e9)]();else{if(_0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x105d7(0x57f)!==_0x105d7(0x5b6)){const _0x3a28c5=String(RegExp['$1'])[_0x105d7(0xcaf)](/[\r\n]+/)[_0x105d7(0xbde)]('');_0x56b342[_0x105d7(0x2db)]=DataManager[_0x105d7(0x96b)](_0x3a28c5);}else this[_0x105d7(0x748)]=_0x2eb1c7[_0x105d7(0x5e5)][_0x105d7(0x32d)][_0x105d7(0x4bd)][_0x105d7(0x468)]['call'](this);}}_0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x56b342[_0x105d7(0xe09)]=Number(RegExp['$1']),_0x56b342[_0x105d7(0xb45)]=Number(RegExp['$2']));if(_0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW WEAPON: (.*)>/i))_0x56b342['wtypeId']=DataManager[_0x105d7(0x6cc)](RegExp['$1']);else{if(_0x2aaaa7[_0x105d7(0x996)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x1dbd5a=String(RegExp['$1'])[_0x105d7(0xcaf)](/[\r\n]+/)['remove'](''),_0x541a55=DataManager['processRandomizedData'](_0x1dbd5a);_0x56b342['wtypeId']=DataManager[_0x105d7(0x6cc)](_0x541a55);}}if(Imported[_0x105d7(0xc07)]){if(_0x105d7(0xb2c)==='DqrGO')this[_0x105d7(0x2a2)]=new _0x3ac7af(),this[_0x105d7(0x279)](this[_0x105d7(0x2a2)]);else{const _0x1703c9=this['getTraitSetKeys']();for(const _0x26df88 of _0x1703c9){if(_0x105d7(0xa8a)!=='SXjUy')_0x52329d[_0x105d7(0x81a)]=!![];else{const _0x5c3aff=this[_0x105d7(0x620)](_0x26df88)['Name'][_0x105d7(0xc9f)]()[_0x105d7(0x4e9)](),_0x3b9dff=_0x26df88[_0x105d7(0xc9f)]()[_0x105d7(0x4e9)]();if(_0x2aaaa7['match'](VisuMZ['ElementStatusCore'][_0x105d7(0x959)][_0x105d7(0x4a9)[_0x105d7(0x511)](_0x3b9dff,_0x5c3aff)])){if(_0x105d7(0xc52)===_0x105d7(0x4b4)){_0x1fb5d6[_0x105d7(0xc58)][_0x105d7(0xaad)][_0x105d7(0x3a4)](this);if(this[_0x105d7(0x962)]()[_0x105d7(0xb37)]())this[_0x105d7(0xb6f)]=this[_0x105d7(0x962)]();if(this[_0x105d7(0x962)]()[_0x105d7(0x966)]())this['_lastActor']=this[_0x105d7(0x962)]();}else _0x56b342['name']=String(RegExp['$1']);}else{if(_0x2aaaa7['match'](VisuMZ[_0x105d7(0x5e2)]['RegExp'][_0x105d7(0x608)[_0x105d7(0x511)](_0x3b9dff,_0x5c3aff)])){const _0x38fd26=String(RegExp['$1'])[_0x105d7(0xcaf)](/[\r\n]+/)[_0x105d7(0xbde)]('');_0x56b342['name']=DataManager[_0x105d7(0x96b)](_0x38fd26);}}if(_0x2aaaa7[_0x105d7(0x996)](VisuMZ[_0x105d7(0x5e2)][_0x105d7(0x959)]['SvWeaponSolo-%1-%2'['format'](_0x3b9dff,_0x5c3aff)]))_0x56b342['wtypeId']=DataManager[_0x105d7(0x6cc)](RegExp['$1']);else{if(_0x2aaaa7[_0x105d7(0x996)](VisuMZ['ElementStatusCore'][_0x105d7(0x959)][_0x105d7(0xdcd)['format'](_0x3b9dff,_0x5c3aff)])){const _0x3bf2cb=String(RegExp['$1'])[_0x105d7(0xcaf)](/[\r\n]+/)[_0x105d7(0xbde)](''),_0x15f8f5=DataManager[_0x105d7(0x96b)](_0x3bf2cb);_0x56b342['wtypeId']=DataManager[_0x105d7(0x6cc)](_0x15f8f5);}}if(_0x2aaaa7[_0x105d7(0x996)](VisuMZ[_0x105d7(0x5e2)][_0x105d7(0x959)][_0x105d7(0x7c1)[_0x105d7(0x511)](_0x3b9dff,_0x5c3aff)])){if(_0x105d7(0xc12)==='iIYKm')_0x56b342['motionIdle']=String(RegExp['$1'])['toLowerCase']()[_0x105d7(0x4e9)]();else return _0xe5c94a[_0x105d7(0x5e5)]['Settings']['BattleLayout']['SkillItemStandardCols'];}else{if(_0x2aaaa7['match'](VisuMZ[_0x105d7(0x5e2)]['RegExp']['SvMotionIdleMass-%1-%2'[_0x105d7(0x511)](_0x3b9dff,_0x5c3aff)])){const _0x5015e4=String(RegExp['$1'])[_0x105d7(0xcaf)](/[\r\n]+/)['remove']('');_0x56b342[_0x105d7(0x2db)]=DataManager[_0x105d7(0x96b)](_0x5015e4);}}}}}}},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xdc3)]=function(){const _0x1761bd=_0x4c6a01;return this[_0x1761bd(0xcae)]||0x0;},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x456)]=function(){return this['attackAnimationId1']();},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x518)]=function(_0x43edc6){const _0x1ca1a0=_0x4c6a01;return this[_0x1ca1a0(0xdc3)]();},Game_Enemy[_0x4c6a01(0xc58)]['canBattlerMove']=function(){const _0x2c7a13=_0x4c6a01;if(this[_0x2c7a13(0x962)]()[_0x2c7a13(0x407)][_0x2c7a13(0x996)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x2c7a13(0xc58)]['canBattlerMove'][_0x2c7a13(0x3a4)](this);},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xb5c)]=function(){const _0x364ac6=_0x4c6a01;if(this[_0x364ac6(0x962)]()[_0x364ac6(0x407)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x784)]=function(){const _0x4d514=_0x4c6a01,_0xcb1309=[];for(const _0x1d1335 of this[_0x4d514(0x962)]()[_0x4d514(0xcdc)]){if('ShxDW'!==_0x4d514(0x261)){const _0x389cb1=$dataSkills[_0x1d1335[_0x4d514(0x6cb)]];if(_0x389cb1&&!_0xcb1309['includes'](_0x389cb1))_0xcb1309['push'](_0x389cb1);}else _0x1d4979[_0x4d514(0x57c)](_0x534316[_0x4d514(0xd5b)],0x0);}return _0xcb1309;},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x655)]=function(){const _0x3ebf9b=_0x4c6a01;let _0x2778b8=_0x3ebf9b(0x655);if(this[_0x3ebf9b(0x496)](_0x2778b8))return this['_cache'][_0x2778b8];return this['_cache'][_0x2778b8]=this[_0x3ebf9b(0xc96)](this[_0x3ebf9b(0x962)]()),this[_0x3ebf9b(0x985)][_0x2778b8];},Game_Enemy['prototype'][_0x4c6a01(0x510)]=function(){const _0x4f3288=_0x4c6a01;let _0x2aa560=_0x4f3288(0x510);if(this[_0x4f3288(0x496)](_0x2aa560))return this[_0x4f3288(0x985)][_0x2aa560];return this[_0x4f3288(0x985)][_0x2aa560]=this['createBattleUIOffsetY'](this[_0x4f3288(0x962)]()),this[_0x4f3288(0x985)][_0x2aa560];},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xb04)]=function(){const _0x5813e8=_0x4c6a01;if(this['_svBattlerData']!==undefined)return this[_0x5813e8(0xa4b)];return this[_0x5813e8(0x206)](),this[_0x5813e8(0xa4b)];},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xdc1)]=function(){const _0x217682=_0x4c6a01;return this[_0x217682(0xb04)]()['name']!=='';},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xdea)]=function(){const _0x5aef62=_0x4c6a01;return this['svBattlerData']()[_0x5aef62(0x2c7)];},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x5ef)]=function(){const _0x4483fe=_0x4c6a01;return this[_0x4483fe(0xdc1)]()?VisuMZ[_0x4483fe(0x5e5)][_0x4483fe(0x32d)][_0x4483fe(0x9ad)][_0x4483fe(0x237)]:VisuMZ[_0x4483fe(0x5e5)][_0x4483fe(0x32d)]['Enemy']['SmoothImage'];},Game_Enemy['prototype']['performAction']=function(_0x3b77de){const _0x37b67b=_0x4c6a01;Game_Battler['prototype'][_0x37b67b(0xbfe)][_0x37b67b(0x3a4)](this,_0x3b77de);if(this[_0x37b67b(0xdc1)]())this[_0x37b67b(0xc1e)](_0x3b77de);},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x3f9)]=function(){const _0x164949=_0x4c6a01,_0x391da8=this[_0x164949(0xb04)]()[_0x164949(0x523)]||0x0,_0x1df549=$dataSystem['attackMotions'][_0x391da8];if(_0x1df549){if(_0x164949(0xcc8)===_0x164949(0xcc8)){if(_0x1df549[_0x164949(0xd11)]===0x0)this['requestMotion'](_0x164949(0xe1f));else{if(_0x1df549[_0x164949(0xd11)]===0x1){if('oxbhJ'!==_0x164949(0x5f0))this[_0x164949(0x94b)](_0x164949(0x7e7));else return!![];}else{if(_0x1df549[_0x164949(0xd11)]===0x2){if(_0x164949(0x851)===_0x164949(0xc44)){_0x4cee12[_0x164949(0x99c)][_0x164949(0x9f6)](_0x164949(0x512));const _0xf55ce6=_0x219788[_0x164949(0x99c)][_0x164949(0x72f)]();if(_0xf55ce6)_0xf55ce6[_0x164949(0x6b8)]();}else this[_0x164949(0x94b)](_0x164949(0x3c7));}}}}else{if(_0x4b26bc['isCommonEventReserved']())return![];}}},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x78c)]=function(){const _0x174ec7=_0x4c6a01,_0x3e622f=this['svBattlerData']()[_0x174ec7(0x523)]||0x0,_0xee09c6=$dataSystem[_0x174ec7(0x3a0)][_0x3e622f];_0xee09c6&&(_0x174ec7(0xbf9)===_0x174ec7(0x367)?(this[_0x174ec7(0xba8)]=!![],this[_0x174ec7(0x486)](_0x174ec7(0x2a5)),_0x27d16d[_0x174ec7(0x5e5)]['BattleManager_processVictory'][_0x174ec7(0x3a4)](this),this[_0x174ec7(0x838)](_0x174ec7(0x60b))):this[_0x174ec7(0x396)](_0xee09c6[_0x174ec7(0xa2c)]));},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x9f2)]=function(){const _0x1adc01=_0x4c6a01,_0x3e30bb=this[_0x1adc01(0xb04)]()[_0x1adc01(0x523)]||0x0;return $dataSystem[_0x1adc01(0x3a0)][_0x3e30bb];},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x9a9)]=function(_0x206b7b){const _0x52657c=_0x4c6a01;return this[_0x52657c(0x9f2)]();},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xc2f)]=function(){const _0x42710b=_0x4c6a01;Game_Battler[_0x42710b(0xc58)][_0x42710b(0xc2f)][_0x42710b(0x3a4)](this),this[_0x42710b(0x47e)]()&&this[_0x42710b(0xdc1)]()&&this[_0x42710b(0x94b)](_0x42710b(0x6fc)),SoundManager[_0x42710b(0x725)]();},Game_Enemy[_0x4c6a01(0xc58)]['performEvasion']=function(){const _0x8d328f=_0x4c6a01;Game_Battler['prototype'][_0x8d328f(0x867)][_0x8d328f(0x3a4)](this),this[_0x8d328f(0x94b)](_0x8d328f(0xbe3));},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x54b)]=function(){const _0x4d2533=_0x4c6a01;Game_Battler[_0x4d2533(0xc58)][_0x4d2533(0x54b)][_0x4d2533(0x3a4)](this),this['requestMotion'](_0x4d2533(0xbe3));},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x2fb)]=function(){const _0x2f07d6=_0x4c6a01;Game_Battler[_0x2f07d6(0xc58)][_0x2f07d6(0x2fb)]['call'](this),this[_0x2f07d6(0x3f9)]();},Game_Enemy['prototype']['allowCollapse']=function(){const _0x4fd0b6=_0x4c6a01;if(this['hasSvBattler']()){if(this[_0x4fd0b6(0xccd)]()>=0x1)return!![];return this['svBattlerData']()['collapse'];}else return!![];},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xaaf)]=function(){const _0x41237b=_0x4c6a01;return this[_0x41237b(0xb04)]()['anchorX'];},Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x706)]=function(){const _0x9e3f68=_0x4c6a01;return this[_0x9e3f68(0xb04)]()[_0x9e3f68(0x955)];},Game_Enemy['prototype'][_0x4c6a01(0x95d)]=function(){const _0x4eb0ab=_0x4c6a01;return this['svBattlerData']()[_0x4eb0ab(0x379)];},VisuMZ[_0x4c6a01(0x5e5)]['Game_Enemy_transform']=Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x29d)],Game_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x29d)]=function(_0x1a48fe){const _0x9d1067=_0x4c6a01;VisuMZ['BattleCore']['Game_Enemy_transform'][_0x9d1067(0x3a4)](this,_0x1a48fe),this['clearBattleCoreData'](),this['setupBattleCoreData']();const _0x419ab1=this[_0x9d1067(0x72f)]();if(_0x419ab1){if(_0x9d1067(0x858)!==_0x9d1067(0xbab))_0x419ab1[_0x9d1067(0x61a)]=undefined,_0x419ab1[_0x9d1067(0xc29)](this);else{if(this[_0x9d1067(0x6ff)]===_0x2af256)this[_0x9d1067(0x333)]();return this[_0x9d1067(0x6ff)];}}},Game_Unit['prototype'][_0x4c6a01(0x486)]=function(_0xcb627d){const _0x49ca2d=_0x4c6a01;for(const _0x50c690 of this['members']()){if(_0x49ca2d(0xcec)!=='HEgWU'){if(_0x50c690)_0x50c690[_0x49ca2d(0x486)](_0xcb627d);}else return _0xf93d42['BattleCore'][_0x49ca2d(0x32d)][_0x49ca2d(0x82d)][_0x49ca2d(0xc9d)];}},Game_Unit['prototype'][_0x4c6a01(0x5dc)]=function(){const _0x7c5baf=_0x4c6a01,_0x538914=this[_0x7c5baf(0x490)]();return _0x538914[Math[_0x7c5baf(0xb10)](_0x538914[_0x7c5baf(0x991)])];},VisuMZ[_0x4c6a01(0x5e5)]['Game_Party_addActor']=Game_Party[_0x4c6a01(0xc58)][_0x4c6a01(0x9aa)],Game_Party[_0x4c6a01(0xc58)]['addActor']=function(_0x28d43f){const _0x363bf1=_0x4c6a01;VisuMZ[_0x363bf1(0x5e5)][_0x363bf1(0xc63)]['call'](this,_0x28d43f),BattleManager[_0x363bf1(0x6e5)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x444)]=Game_Party[_0x4c6a01(0xc58)][_0x4c6a01(0x380)],Game_Party['prototype'][_0x4c6a01(0x380)]=function(_0x5dbf19){const _0x128e5a=_0x4c6a01;VisuMZ[_0x128e5a(0x5e5)][_0x128e5a(0x444)]['call'](this,_0x5dbf19),BattleManager[_0x128e5a(0x6e5)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xb1d)]=Game_Troop[_0x4c6a01(0xc58)][_0x4c6a01(0xb68)],Game_Troop['prototype'][_0x4c6a01(0xb68)]=function(_0x6b505d){const _0x40fa6c=_0x4c6a01;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x40fa6c(0xe20)](_0x6b505d),VisuMZ['BattleCore']['Game_Troop_setup']['call'](this,_0x6b505d),this[_0x40fa6c(0x8cc)]();},VisuMZ[_0x4c6a01(0x5e5)]['Game_Troop_expTotal']=Game_Troop[_0x4c6a01(0xc58)][_0x4c6a01(0x7c7)],Game_Troop[_0x4c6a01(0xc58)][_0x4c6a01(0x7c7)]=function(){const _0x31fb85=_0x4c6a01;let _0x39d524=VisuMZ[_0x31fb85(0x5e5)][_0x31fb85(0x4f2)]['call'](this);return this[_0x31fb85(0x992)]&&(_0x31fb85(0x29f)===_0x31fb85(0x54c)?(_0x56de31[_0x31fb85(0x5e5)][_0x31fb85(0xd5a)][_0x31fb85(0x3a4)](this,_0x431084),this['clearTargetBattlerKey']()):_0x39d524*=this[_0x31fb85(0x992)]()),Math[_0x31fb85(0xa32)](_0x39d524);},Game_Troop[_0x4c6a01(0xc58)][_0x4c6a01(0x992)]=function(){return 0x1;},Game_Troop[_0x4c6a01(0xc58)][_0x4c6a01(0x8cc)]=function(){const _0x19d361=_0x4c6a01,_0x391819=DataManager[_0x19d361(0x32f)](this['troop']()['id']);if(_0x391819['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x1557ac=RegExp['$1'][_0x19d361(0xcaf)](',')[_0x19d361(0x39f)](_0x577ca6=>Number(_0x577ca6));this[_0x19d361(0xdf6)](),this[_0x19d361(0xb3a)](_0x1557ac);}},Game_Troop[_0x4c6a01(0xc58)][_0x4c6a01(0xdf6)]=function(){const _0x3fa70c=_0x4c6a01;let _0x2d0399='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x2d0399+=_0x3fa70c(0x2d6);Imported[_0x3fa70c(0x558)]&&(VisuMZ[_0x3fa70c(0x500)]['version']<1.11&&(alert(_0x2d0399[_0x3fa70c(0x511)](_0x3fa70c(0x2b7))),SceneManager[_0x3fa70c(0x6d4)]()));if(Imported[_0x3fa70c(0xad7)]){if(_0x3fa70c(0xd74)!=='nLOxT')VisuMZ[_0x3fa70c(0xa10)][_0x3fa70c(0x542)]<1.19&&(alert(_0x2d0399['format']('CTB')),SceneManager[_0x3fa70c(0x6d4)]());else{if(!_0x4dbf78[_0x3fa70c(0x503)]())return;const _0x313d01=_0x4d8cd2[_0x3fa70c(0x582)]();if(!_0x313d01)return;_0x313d01[_0x3fa70c(0x2b5)](_0x3fa70c(0xbda));}}Imported[_0x3fa70c(0x8b3)]&&(_0x3fa70c(0x345)===_0x3fa70c(0x345)?VisuMZ[_0x3fa70c(0xb60)]['version']<1.15&&(alert(_0x2d0399[_0x3fa70c(0x511)](_0x3fa70c(0xaf6))),SceneManager[_0x3fa70c(0x6d4)]()):(_0x444fba[_0x3fa70c(0x5e5)]['Game_BattlerBase_eraseState'][_0x3fa70c(0x3a4)](this,_0x7885e8),this[_0x3fa70c(0xb37)]()&&_0x3c40af===this['deathStateId']()&&this[_0x3fa70c(0x51e)]()&&(this[_0x3fa70c(0xb9a)]=![]),!this['_tempActor']&&!this[_0x3fa70c(0x521)]&&_0x535a15['isSceneBattle']()&&this[_0x3fa70c(0x390)]()));},Game_Troop[_0x4c6a01(0xc58)][_0x4c6a01(0xb3a)]=function(_0x28a338){const _0x499c62=_0x4c6a01;this[_0x499c62(0x58a)]={};for(const _0x40327f of this[_0x499c62(0xc35)]()){if(_0x499c62(0x965)!==_0x499c62(0x965))_0x29c588=_0x379efa['filter']((_0x9793d9,_0x1bb6c0,_0x93f630)=>_0x93f630[_0x499c62(0x93e)](_0x9793d9)===_0x1bb6c0),_0x356c0c[_0x499c62(0x503)]()&&_0x365ff3[_0x499c62(0x703)]()&&(_0x53665c=!_0x2f159e),_0x5c4c2a['BattleCore'][_0x499c62(0x95a)][_0x499c62(0x3a4)](this,_0x2a3724,_0x975992,_0x59f175),_0x2a90f5['isSceneBattle']()&&_0x45d38c[_0x499c62(0x666)][_0x499c62(0x35b)]();else{if(!_0x40327f)continue;_0x40327f[_0x499c62(0x679)]('');}}for(const _0x3bfdfa of _0x28a338){const _0xe314b2=$dataTroops[_0x3bfdfa];if(_0xe314b2)this[_0x499c62(0xb4e)](_0xe314b2);}this['makeUniqueNames']();},Game_Troop[_0x4c6a01(0xc58)][_0x4c6a01(0xb4e)]=function(_0xbd3550){const _0xbe2b8=_0x4c6a01;for(const _0x3c644a of _0xbd3550['members']){if('zdOss'!=='UjdtY'){if($dataEnemies[_0x3c644a[_0xbe2b8(0x69a)]]){if(_0xbe2b8(0x47c)===_0xbe2b8(0xd27)){_0x41ee67=_0x5d69e2||0x1,_0x4f71a2--;const _0x5368d3=this[_0xbe2b8(0x88c)](),_0x9d5a3b=_0x5368d3[_0x32fc0c]?_0x5368d3[_0x36d668][_0xbe2b8(0x523)]:0x0;return _0x42328d[_0xbe2b8(0x3a0)][_0x9d5a3b];}else{const _0x46c8e5=_0x3c644a['enemyId'],_0x28aaa7=_0x3c644a['x'],_0x47f304=_0x3c644a['y'],_0x477ae1=new Game_Enemy(_0x46c8e5,_0x28aaa7,_0x47f304);_0x3c644a[_0xbe2b8(0x341)]&&_0x477ae1[_0xbe2b8(0xd46)](),this['_enemies'][_0xbe2b8(0x543)](_0x477ae1);}}}else return _0x506f46[_0xbe2b8(0xbe7)]()['deadMembers']();}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x889)]=Game_Map['prototype'][_0x4c6a01(0xa19)],Game_Map[_0x4c6a01(0xc58)][_0x4c6a01(0xa19)]=function(){const _0x34cbac=_0x4c6a01;VisuMZ[_0x34cbac(0x5e5)]['Game_Map_setupBattleback'][_0x34cbac(0x3a4)](this),this[_0x34cbac(0x8ef)]();},Game_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x8ef)]=function(){const _0x57ba3d=_0x4c6a01;this[_0x57ba3d(0xafe)]={},this[_0x57ba3d(0xc25)]={};if(!$dataMap)return;const _0x467226=$dataMap['note'];if(!_0x467226)return;const _0x2708ff=_0x467226[_0x57ba3d(0x996)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x2708ff)for(const _0x3f8967 of _0x2708ff){_0x3f8967[_0x57ba3d(0x996)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x3eecad=Number(RegExp['$1']),_0x1896e1=Number(RegExp['$2']),_0xb60a9b=_0x1896e1===0x1?this[_0x57ba3d(0xafe)]:this[_0x57ba3d(0xc25)],_0x1c3f4c=String(RegExp['$3']);_0xb60a9b[_0x3eecad]=_0x1c3f4c;}},VisuMZ['BattleCore'][_0x4c6a01(0x31d)]=Game_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x22b)],Game_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x22b)]=function(){const _0x160e26=_0x4c6a01;if(!BattleManager['isBattleTest']()){if(_0x160e26(0x772)!==_0x160e26(0x772))return _0x168f97[_0x160e26(0xc56)][_0x160e26(0x3a4)](this);else{const _0x50e42c=$gamePlayer[_0x160e26(0x4d3)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x160e26(0xafe)]&&this[_0x160e26(0xafe)][_0x50e42c]){if(_0x160e26(0x44a)===_0x160e26(0x44a))return this[_0x160e26(0xafe)][_0x50e42c];else _0x498d03[_0x160e26(0x5e5)][_0x160e26(0xa29)][_0x160e26(0x3a4)](this),this[_0x160e26(0x3df)]=this[_0x160e26(0x3df)][_0x160e26(0xac7)](_0x47f492=>_0x47f492&&_0x47f492[_0x160e26(0xb5f)]());}}}return VisuMZ['BattleCore'][_0x160e26(0x31d)][_0x160e26(0x3a4)](this);},VisuMZ['BattleCore'][_0x4c6a01(0x828)]=Game_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x32b)],Game_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x32b)]=function(){const _0x59157a=_0x4c6a01;if(!BattleManager[_0x59157a(0x251)]()){const _0x37665c=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x59157a(0xc25)][_0x37665c])return this[_0x59157a(0xc25)][_0x37665c];}return VisuMZ[_0x59157a(0x5e5)][_0x59157a(0x828)]['call'](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xcbd)]=Game_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x27a)],Game_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x27a)]=function(){const _0x24245c=_0x4c6a01;let _0x119bb0=JsonEx[_0x24245c(0x349)](VisuMZ[_0x24245c(0x5e5)][_0x24245c(0xcbd)][_0x24245c(0x3a4)](this));return VisuMZ[_0x24245c(0x5e5)]['ShuffleArray'](_0x119bb0);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xd28)]=function(_0x21db46){const _0x193fc2=_0x4c6a01;var _0x287e3d,_0x460582,_0x5c956a;for(_0x5c956a=_0x21db46['length']-0x1;_0x5c956a>0x0;_0x5c956a--){_0x287e3d=Math['floor'](Math[_0x193fc2(0x8f7)]()*(_0x5c956a+0x1)),_0x460582=_0x21db46[_0x5c956a],_0x21db46[_0x5c956a]=_0x21db46[_0x287e3d],_0x21db46[_0x287e3d]=_0x460582;}return _0x21db46;},VisuMZ['BattleCore'][_0x4c6a01(0x577)]=Game_Interpreter[_0x4c6a01(0xc58)][_0x4c6a01(0xaff)],Game_Interpreter[_0x4c6a01(0xc58)][_0x4c6a01(0xaff)]=function(_0x20473f){const _0x34ffaf=_0x4c6a01;return $gameTemp[_0x34ffaf(0xd77)](this),VisuMZ[_0x34ffaf(0x5e5)][_0x34ffaf(0x577)][_0x34ffaf(0x3a4)](this,_0x20473f);},VisuMZ['BattleCore'][_0x4c6a01(0xce1)]=Game_Interpreter[_0x4c6a01(0xc58)][_0x4c6a01(0xbd6)],Game_Interpreter[_0x4c6a01(0xc58)]['updateWaitMode']=function(){const _0x82a375=_0x4c6a01;if(SceneManager[_0x82a375(0x503)]()){if(_0x82a375(0x862)==='AlsEl')switch(this[_0x82a375(0x893)]){case _0x82a375(0x43e):if(Imported[_0x82a375(0x880)]){if($gameScreen[_0x82a375(0x329)]()[_0x82a375(0x818)]>0x0)return!![];this[_0x82a375(0x893)]='';}break;case'battleAnimation':if(BattleManager[_0x82a375(0x666)][_0x82a375(0xd12)]())return!![];this[_0x82a375(0x893)]='';break;case'battleCamera':if(Imported[_0x82a375(0x880)]){if(_0x82a375(0xd0d)!==_0x82a375(0xd0d))_0x4dce7b+=_0x4dcc3b[_0x82a375(0x9ad)][_0x82a375(0xe10)]||0x0,_0x28c20c+=_0x3a887c[_0x82a375(0x9ad)]['OffsetY']||0x0;else{if($gameScreen[_0x82a375(0x329)]()[_0x82a375(0x6be)]>0x0)return!![];if($gameScreen[_0x82a375(0x329)]()['cameraOffsetDuration']>0x0)return!![];this['_waitMode']='';}}break;case _0x82a375(0x7a3):if(BattleManager[_0x82a375(0x666)]['isEffecting']())return!![];this[_0x82a375(0x893)]='';break;case _0x82a375(0x885):if(BattleManager[_0x82a375(0x666)][_0x82a375(0x1ff)]())return!![];this[_0x82a375(0x893)]='';break;case'battleJump':if(BattleManager['_spriteset'][_0x82a375(0x5f3)]())return!![];this[_0x82a375(0x893)]='';break;case _0x82a375(0x46c):if(BattleManager[_0x82a375(0x74c)]['isBusy']())return!![];this['_waitMode']='';break;case _0x82a375(0x3c3):if(BattleManager[_0x82a375(0x666)][_0x82a375(0xc1a)]())return!![];this[_0x82a375(0x893)]='';break;case _0x82a375(0x539):if(BattleManager[_0x82a375(0x666)]['isAnyoneChangingOpacity']())return!![];this[_0x82a375(0x893)]='';break;case _0x82a375(0x6c2):if(BattleManager[_0x82a375(0x666)]['isAnyoneGrowing']())return!![];this[_0x82a375(0x893)]='';break;case'battleSpriteSkew':if(BattleManager['_spriteset'][_0x82a375(0x814)]())return!![];this['_waitMode']='';break;case _0x82a375(0x5ab):if(Imported[_0x82a375(0xdc2)]){if(_0x82a375(0x97c)==='XMKtF'){if(BattleManager[_0x82a375(0x666)]['isAnyProjectilePresent']())return!![];this[_0x82a375(0x893)]='';}else{if(!_0x1cb690[_0x82a375(0xad0)])return;if(!_0x4c05a7[_0x82a375(0x503)]())return;if(this['isDead']())return;if(this[_0x82a375(0xb69)]())return;if(_0x575701['note'][_0x82a375(0x996)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x5680ee=_0x4e77c2(_0x271369['$1']);_0x5b2270[_0x82a375(0xdb8)]([this],_0x5680ee,![],![]);}}}break;case _0x82a375(0x480):if(Imported['VisuMZ_3_ActSeqCamera']){if('goCgm'==='goCgm'){if($gameScreen[_0x82a375(0x329)]()[_0x82a375(0x33b)]>0x0)return!![];this['_waitMode']='';}else _0x150788['x']+=this['x'],_0x42eef9['y']+=this['y'];}break;case _0x82a375(0xbda):if(BattleManager[_0x82a375(0x666)][_0x82a375(0x778)]())return!![];this[_0x82a375(0x893)]='';break;case _0x82a375(0x400):if(Imported[_0x82a375(0x880)]){if(_0x82a375(0x72d)!==_0x82a375(0xd73)){if($gameScreen[_0x82a375(0x329)]()['zoomDuration']>0x0)return!![];this['_waitMode']='';}else _0x26def2=_0x131d27;}break;case _0x82a375(0x67d):if(Imported[_0x82a375(0x6d3)]){if(BattleManager['_spriteset'][_0x82a375(0x6ec)]){if(BattleManager[_0x82a375(0x666)][_0x82a375(0x6ec)]())return!![];this[_0x82a375(0x893)]='battleInjectAni';}else this[_0x82a375(0x893)]='';break;}break;case'battleInjectAni':if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager['_spriteset']['isAnyoneInjectAnimating']())return!![];this['_waitMode']='';}break;}else this[_0x82a375(0x6bc)]();}return VisuMZ[_0x82a375(0x5e5)]['Game_Interpreter_updateWaitMode'][_0x82a375(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x7ce)]=Game_Interpreter['prototype'][_0x4c6a01(0x4ba)],Game_Interpreter['prototype'][_0x4c6a01(0x4ba)]=function(_0x3e8f39){const _0x481217=_0x4c6a01;return!$gameParty[_0x481217(0xe16)]()?this['command301_PreBattleEvent'](_0x3e8f39):VisuMZ[_0x481217(0x5e5)]['Game_Interpreter_command301'][_0x481217(0x3a4)](this,_0x3e8f39);},Game_Interpreter[_0x4c6a01(0xc58)][_0x4c6a01(0xd21)]=function(_0x14c9e8){const _0x30c475=_0x4c6a01;return VisuMZ[_0x30c475(0x5e5)][_0x30c475(0x7ce)]['call'](this,_0x14c9e8),BattleManager[_0x30c475(0x4fd)](_0x2affed=>{const _0x2b59c3=_0x30c475;if('PXZuS'===_0x2b59c3(0x2cd))return 0xff;else this['_branch'][this['_indent']]=_0x2affed;}),!![];},VisuMZ['BattleCore']['CheckMapBattleEventValid']=function(_0x17f45e){const _0x2523e5=_0x4c6a01,_0x42aba8=$dataCommonEvents[_0x17f45e];if(!_0x42aba8)return![];if(_0x42aba8[_0x2523e5(0x85a)][_0x2523e5(0x991)]<=0x1)return![];return!![];},Game_Interpreter[_0x4c6a01(0xc58)]['command301_PreBattleEvent']=function(_0x1d9e76){const _0x244706=_0x4c6a01,_0x4d2030=VisuMZ[_0x244706(0x5e5)][_0x244706(0x32d)]['Mechanics'],_0x35fc22=_0x4d2030[_0x244706(0xdd3)],_0x4bc90b=$dataCommonEvents[_0x35fc22];if(_0x4bc90b&&VisuMZ[_0x244706(0x5e5)]['CheckMapBattleEventValid'](_0x35fc22)){const _0x1fa53b=this[_0x244706(0xb33)]()?this[_0x244706(0xa39)]:0x0,_0x17fc92=_0x4bc90b[_0x244706(0x85a)];this[_0x244706(0x2a1)](_0x17fc92,_0x1fa53b),this['_list']=JsonEx[_0x244706(0x349)](this[_0x244706(0x4b2)]);const _0x4fec32={'code':0xbc3,'indent':this[_0x244706(0xb83)],'parameters':JsonEx[_0x244706(0x349)](_0x1d9e76)};return this[_0x244706(0x4b2)][_0x244706(0xb34)](this[_0x244706(0x281)]+0x1,0x0,_0x4fec32),!![];}else{if(_0x244706(0x5a8)!=='kEEPt')return VisuMZ[_0x244706(0x5e5)][_0x244706(0x7ce)][_0x244706(0x3a4)](this,_0x1d9e76);else this['_weather'][_0x244706(0xd11)]=_0x14a286[_0x244706(0xa38)](),this['_weather']['power']=_0x1d874a[_0x244706(0x59a)]();}},VisuMZ['BattleCore'][_0x4c6a01(0x57b)]=BattleManager['onEncounter'],BattleManager[_0x4c6a01(0x4c4)]=function(){const _0x2bd092=_0x4c6a01;VisuMZ[_0x2bd092(0x5e5)][_0x2bd092(0x57b)][_0x2bd092(0x3a4)](this),this[_0x2bd092(0xc7e)]();},BattleManager[_0x4c6a01(0xc7e)]=function(){const _0xfe82bf=_0x4c6a01,_0x2b379a=VisuMZ[_0xfe82bf(0x5e5)][_0xfe82bf(0x32d)]['Mechanics'],_0xfedf1a=_0x2b379a[_0xfe82bf(0xdd3)];_0xfedf1a&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0xfedf1a)&&(this[_0xfe82bf(0x6fe)]=!![],$gameTemp[_0xfe82bf(0xdd5)](_0x2b379a[_0xfe82bf(0xdd3)]),$gameMap[_0xfe82bf(0x68c)](),$gameMap[_0xfe82bf(0x7cd)][_0xfe82bf(0xe17)]=!![]),_0x2b379a[_0xfe82bf(0x26f)]>0x0&&(this[_0xfe82bf(0x89c)]=!![]);},VisuMZ[_0x4c6a01(0x5e5)]['Scene_Map_updateCallMenu']=Scene_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x8c8)],Scene_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x8c8)]=function(){const _0xd8b150=_0x4c6a01;if(BattleManager[_0xd8b150(0x6fe)])return;VisuMZ[_0xd8b150(0x5e5)][_0xd8b150(0x6bf)]['call'](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xb22)]=Scene_Map['prototype']['launchBattle'],Scene_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x4cf)]=function(){const _0x516220=_0x4c6a01;if(BattleManager[_0x516220(0x6fe)]){if(_0x516220(0xbea)!==_0x516220(0x696))this[_0x516220(0x8e6)]();else for(const _0x222906 of _0x490301){const _0x2d2156=_0x1ef40a[_0x516220(0x511)](_0x4b432b['name'](),_0x2692a0[_0x516220(0xa5b)](_0x222906));this[_0x516220(0x543)](_0x516220(0xe1c)),this[_0x516220(0x543)](_0x516220(0x949)),this[_0x516220(0x543)](_0x516220(0x7a6),_0x2d2156),this[_0x516220(0x543)](_0x516220(0xcef));}}else{if('JADmw'===_0x516220(0x1f9))VisuMZ[_0x516220(0x5e5)]['Scene_Map_launchBattle'][_0x516220(0x3a4)](this);else return _0x488daf[_0x516220(0x503)]()?_0x8623d5['_scene']['_spriteset']['_damageContainer']:this[_0x516220(0x36d)];}},Scene_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x8e6)]=function(){this['_active']=!![];},VisuMZ[_0x4c6a01(0x5e5)]['SceneManager_isSceneChanging']=SceneManager['isSceneChanging'],SceneManager[_0x4c6a01(0x7e4)]=function(){const _0x208e6f=_0x4c6a01;if(BattleManager[_0x208e6f(0x6fe)])return![];return VisuMZ[_0x208e6f(0x5e5)][_0x208e6f(0x66e)][_0x208e6f(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)]['Game_Interpreter_terminate']=Game_Interpreter[_0x4c6a01(0xc58)][_0x4c6a01(0xce4)],Game_Interpreter[_0x4c6a01(0xc58)][_0x4c6a01(0xce4)]=function(){const _0x2f0033=_0x4c6a01;VisuMZ['BattleCore'][_0x2f0033(0xb3d)][_0x2f0033(0x3a4)](this),this[_0x2f0033(0xe17)]&&(this[_0x2f0033(0xe17)]=undefined,SceneManager[_0x2f0033(0x4c1)][_0x2f0033(0xddd)]());},Scene_Map['prototype'][_0x4c6a01(0xddd)]=function(){const _0x4b1f36=_0x4c6a01;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x4b1f36(0x3ec)]=!![],this[_0x4b1f36(0xd1b)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x7c6)]=Scene_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)],Scene_Map['prototype'][_0x4c6a01(0x67a)]=function(){const _0x1dc745=_0x4c6a01;VisuMZ[_0x1dc745(0x5e5)][_0x1dc745(0x7c6)][_0x1dc745(0x3a4)](this),BattleManager[_0x1dc745(0x3ec)]&&(this[_0x1dc745(0x285)]=!![],BattleManager[_0x1dc745(0x3ec)]=undefined);},VisuMZ[_0x4c6a01(0x5e5)]['Scene_Map_initialize']=Scene_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)],Scene_Map[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)]=function(){const _0x40f83c=_0x4c6a01;VisuMZ[_0x40f83c(0x5e5)][_0x40f83c(0xd89)][_0x40f83c(0x3a4)](this),$gameTemp[_0x40f83c(0x581)]();},VisuMZ['BattleCore'][_0x4c6a01(0x276)]=Scene_ItemBase[_0x4c6a01(0xc58)]['applyItem'],Scene_ItemBase['prototype'][_0x4c6a01(0x317)]=function(){const _0x50126e=_0x4c6a01;VisuMZ[_0x50126e(0x5e5)][_0x50126e(0x276)][_0x50126e(0x3a4)](this);if(this[_0x50126e(0x6a7)]()[_0x50126e(0x407)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;if(this[_0x50126e(0x6a7)]()[_0x50126e(0x407)]['match'](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x50126e(0x55e)!==_0x50126e(0x55e)){this[_0x50126e(0xd18)](_0x14515b)['match'](/\\I\[(\d+)\]/i);const _0x5adecb=_0x1da109(_0x3f363a['$1'])||0x0,_0x2b741c=this[_0x50126e(0xc94)](_0x3680d2),_0x4f7e11=_0x2b741c['x']+_0x743518[_0x50126e(0x989)]((_0x2b741c[_0x50126e(0xe09)]-_0x27cb08[_0x50126e(0x24a)])/0x2),_0x1ebadf=_0x2b741c['y']+(_0x2b741c[_0x50126e(0xb45)]-_0x3a44eb[_0x50126e(0xd84)])/0x2;this[_0x50126e(0xd51)](_0x5adecb,_0x4f7e11,_0x1ebadf);}else $gameTemp['_commonEventQueue']=[];}DataManager['checkAutoCustomActionSequenceNotetagEffect'](this['item']())&&($gameTemp[_0x50126e(0x99b)]=[]);},VisuMZ[_0x4c6a01(0x5e5)]['Scene_Options_maxCommands']=Scene_Options[_0x4c6a01(0xc58)][_0x4c6a01(0x5b3)],Scene_Options['prototype']['maxCommands']=function(){const _0x55bf9e=_0x4c6a01;let _0x51ac4f=VisuMZ['BattleCore'][_0x55bf9e(0x27c)][_0x55bf9e(0x3a4)](this);const _0x51ffc2=VisuMZ[_0x55bf9e(0x5e5)][_0x55bf9e(0x32d)];if(_0x51ffc2[_0x55bf9e(0x4f8)][_0x55bf9e(0x66c)]&&_0x51ffc2[_0x55bf9e(0x4f8)][_0x55bf9e(0xa82)])_0x51ac4f+=0x2;if(_0x51ffc2[_0x55bf9e(0x64f)][_0x55bf9e(0x66c)]&&_0x51ffc2['HpGauge'][_0x55bf9e(0xa82)])_0x51ac4f+=0x1;return _0x51ac4f;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x4a5)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)]=function(){const _0x627fda=_0x4c6a01;VisuMZ[_0x627fda(0x5e5)]['Scene_Battle_initialize'][_0x627fda(0x3a4)](this),this[_0x627fda(0x8b7)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xb7f)]=Scene_Battle['prototype']['start'],Scene_Battle[_0x4c6a01(0xc58)]['start']=function(){const _0x4aca75=_0x4c6a01;SceneManager[_0x4aca75(0x507)]()?(Scene_Message[_0x4aca75(0xc58)][_0x4aca75(0x663)][_0x4aca75(0x3a4)](this),this[_0x4aca75(0x666)]&&this['_spriteset'][_0x4aca75(0x32e)](),BattleManager[_0x4aca75(0x56f)]&&BattleManager[_0x4aca75(0xc40)]()):(VisuMZ['BattleCore'][_0x4aca75(0xb7f)][_0x4aca75(0x3a4)](this),$gameTroop[_0x4aca75(0xbdd)]());},VisuMZ[_0x4c6a01(0x5e5)]['Scene_Battle_stop']=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xd1b)],Scene_Battle['prototype']['stop']=function(){const _0x4dc9e3=_0x4c6a01;SceneManager['isNextSceneBattleTransitionable']()?'OkatI'!==_0x4dc9e3(0xd2a)?Scene_Message[_0x4dc9e3(0xc58)][_0x4dc9e3(0xd1b)][_0x4dc9e3(0x3a4)](this):this['_hpGaugeSprite'][_0x4dc9e3(0x22f)]=![]:VisuMZ[_0x4dc9e3(0x5e5)][_0x4dc9e3(0x9b9)]['call'](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x617)]=Scene_Battle['prototype'][_0x4c6a01(0xce4)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xce4)]=function(){const _0x73256a=_0x4c6a01;SceneManager[_0x73256a(0x680)]()?Scene_Message[_0x73256a(0xc58)][_0x73256a(0xce4)][_0x73256a(0x3a4)](this):VisuMZ[_0x73256a(0x5e5)][_0x73256a(0x617)][_0x73256a(0x3a4)](this),this[_0x73256a(0x8b7)]();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xd83)]=function(){const _0x479fac=_0x4c6a01;if(ConfigManager[_0x479fac(0xad8)]&&ConfigManager[_0x479fac(0x39d)]!==undefined)return'dWMPT'==='FGHzT'?![]:ConfigManager[_0x479fac(0x39d)];else{if(this['battleLayoutStyle']()===_0x479fac(0x2ab)){if(_0x479fac(0xcde)===_0x479fac(0xcde))return![];else{if(_0x480818[_0x479fac(0xdb5)]())return;const _0x30a24d=_0x2f8f6d['BattleCore'][_0x479fac(0x32d)][_0x479fac(0x625)],_0x1b00ab=new _0x5603fa();_0x1b00ab[_0x479fac(0x1ea)]=_0x30a24d[_0x479fac(0xca6)],this[_0x479fac(0x438)](_0x1b00ab),_0x1b00ab['setup'](this['_battler']),_0x1b00ab[_0x479fac(0xd95)](this[_0x479fac(0xbf3)]),this[_0x479fac(0x972)](_0x1b00ab);}}else{return Scene_Message[_0x479fac(0xc58)][_0x479fac(0xd83)][_0x479fac(0x3a4)](this);;}}},VisuMZ[_0x4c6a01(0x5e5)]['Scene_Battle_createAllWindows']=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x42e)],Scene_Battle['prototype'][_0x4c6a01(0x42e)]=function(){const _0x528beb=_0x4c6a01;this['createEnemyNameContainer'](),VisuMZ[_0x528beb(0x5e5)][_0x528beb(0xc0d)][_0x528beb(0x3a4)](this),this[_0x528beb(0x7e0)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x3d5)]=Scene_Battle[_0x4c6a01(0xc58)]['createEnemyWindow'],Scene_Battle['prototype']['createEnemyWindow']=function(){const _0x2f1c46=_0x4c6a01;VisuMZ[_0x2f1c46(0x5e5)][_0x2f1c46(0x3d5)]['call'](this),this[_0x2f1c46(0xd43)]();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xd43)]=function(){this['createMultiTargetWindow'](!![]),this['createMultiTargetWindow'](![]);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x236)]=function(_0x5b6535){const _0x4a3223=_0x4c6a01,_0x28403a=Window_BattleMultiTarget[_0x4a3223(0x489)],_0x137cd8=this[_0x4a3223(0xcfb)](0x1,!![]);let _0xdc0849=_0x5b6535?Graphics[_0x4a3223(0xbc7)]-_0x28403a:0x0;_0xdc0849+=_0x5b6535?Window_BattleMultiTarget[_0x4a3223(0x98c)]:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x368391=[_0x4a3223(0x520)][_0x4a3223(0x864)](this['battleLayoutStyle']())?0x0:this['_statusWindow'][_0x4a3223(0xb45)];let _0xb8827a=Graphics[_0x4a3223(0xc3a)]-_0x368391-_0x137cd8;return _0xb8827a+=_0x5b6535?Window_BattleMultiTarget['ACTOR_OFFSET_Y']:Window_BattleMultiTarget['ENEMY_OFFSET_Y'],new Rectangle(_0xdc0849,_0xb8827a,_0x28403a,_0x137cd8);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x2d2)]=function(_0x528946){const _0x42ce24=_0x4c6a01,_0x3c2e37=this[_0x42ce24(0x236)](_0x528946),_0xe7c57e=new Window_BattleMultiTarget(_0x3c2e37,_0x528946);this[_0x42ce24(0xd26)](_0xe7c57e);if(_0x528946){if(_0x42ce24(0x44b)!==_0x42ce24(0x6a3))this[_0x42ce24(0x653)]=_0xe7c57e;else return this['skillItemWindowRectMiddle']();}else{if('JirjB'==='JirjB')this[_0x42ce24(0x899)]=_0xe7c57e;else{if(this[_0x42ce24(0xacc)]===_0x2d8be2&&!_0x41a9f2[_0x42ce24(0xdc1)]())return;}}},VisuMZ[_0x4c6a01(0x5e5)]['Scene_Battle_createCancelButton']=Scene_Battle['prototype'][_0x4c6a01(0x8fa)],Scene_Battle['prototype'][_0x4c6a01(0x8fa)]=function(){const _0x6d007e=_0x4c6a01;VisuMZ[_0x6d007e(0x5e5)][_0x6d007e(0xc9a)][_0x6d007e(0x3a4)](this),this[_0x6d007e(0xd3a)]()===_0x6d007e(0x2ab)&&this[_0x6d007e(0x7c0)]();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x451)]=function(_0x4cb85e){const _0x15d4f7=_0x4c6a01;_0x4cb85e?(this[_0x15d4f7(0xd01)]['x']=(Graphics[_0x15d4f7(0xe09)]-Graphics[_0x15d4f7(0xbc7)])/0x2,this['_windowLayer']['y']=(Graphics[_0x15d4f7(0xb45)]-Graphics[_0x15d4f7(0xc3a)])/0x2):(this['_windowLayer']['x']=Graphics['width']*0xa,this['_windowLayer']['y']=Graphics[_0x15d4f7(0xb45)]*0xa);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x8eb)]=Scene_Battle[_0x4c6a01(0xc58)]['selectNextCommand'],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x52f)]=function(){const _0x599b80=_0x4c6a01,_0x108caf=BattleManager[_0x599b80(0x73e)]();VisuMZ[_0x599b80(0x5e5)]['Scene_Battle_selectNextCommand'][_0x599b80(0x3a4)](this);if(_0x108caf){if(_0x599b80(0xa7a)!==_0x599b80(0xa7a)){if(this[_0x599b80(0xacc)]===_0x3c46b0)return;this[_0x599b80(0xbc0)](),this['finalizeScale']();}else{if(_0x108caf===BattleManager[_0x599b80(0x73e)]())return;if(_0x108caf===BattleManager[_0x599b80(0x49e)])return;if(_0x108caf[_0x599b80(0x72f)]())_0x108caf[_0x599b80(0x72f)]()['stepBack']();}}},VisuMZ['BattleCore']['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x4c6a01(0xc58)]['selectPreviousCommand'],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x805)]=function(){const _0x119797=_0x4c6a01,_0x500980=BattleManager[_0x119797(0x73e)]();if(_0x500980&&_0x500980['battler'])_0x500980[_0x119797(0x72f)]()[_0x119797(0x6b8)]();VisuMZ['BattleCore'][_0x119797(0x576)][_0x119797(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xcf6)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x39a)],Scene_Battle[_0x4c6a01(0xc58)]['logWindowRect']=function(){const _0x306416=_0x4c6a01;if(VisuMZ[_0x306416(0x5e5)][_0x306416(0x32d)][_0x306416(0x84c)]['BattleLogRectJS']){if(_0x306416(0x4b0)!=='IeJOZ')return VisuMZ['BattleCore'][_0x306416(0x32d)]['BattleLog']['BattleLogRectJS'][_0x306416(0x3a4)](this);else{if(_0x33c228['isPreviousSceneBattleTransitionable']())return;if(!_0x1f01ff)return;if(!_0x43d775[_0x306416(0xdd4)]())return;_0x62bb37[_0x306416(0x5e5)][_0x306416(0x62d)]['call'](this);}}return VisuMZ['BattleCore'][_0x306416(0xcf6)]['call'](this);},VisuMZ['BattleCore'][_0x4c6a01(0x331)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x528)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x528)]=function(){const _0x40ddd8=_0x4c6a01;VisuMZ[_0x40ddd8(0x5e5)][_0x40ddd8(0x331)]['call'](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x488)]=function(){const _0x4ef759=_0x4c6a01,_0x4bf665=this[_0x4ef759(0xde6)];_0x4bf665[_0x4ef759(0x952)](_0x4ef759(0x654),this['commandAutoBattle']['bind'](this)),_0x4bf665['setHandler'](_0x4ef759(0x6e8),this[_0x4ef759(0x65b)][_0x4ef759(0x5e0)](this));const _0xc35e0d=this[_0x4ef759(0xd3a)]();switch(_0xc35e0d){case'xp':case _0x4ef759(0x3e6):return this['_partyCommandWindow'][_0x4ef759(0xa12)](0x1);break;}},Scene_Battle['prototype'][_0x4c6a01(0x3d4)]=function(){const _0x1e146e=_0x4c6a01;BattleManager[_0x1e146e(0x673)]=!![],$gameParty[_0x1e146e(0x491)](),this[_0x1e146e(0x52f)](),BattleManager['isTpb']()&&(BattleManager['_inputting']=![]);},Scene_Battle['prototype']['commandOptions']=function(){const _0x353cf=_0x4c6a01;if(this[_0x353cf(0xbd2)]())_0x353cf(0x96f)==='JTXkA'?(this['_callSceneOptions']=!![],this['_logWindow'][_0x353cf(0x543)](_0x353cf(0x7a6),VisuMZ[_0x353cf(0x5e5)][_0x353cf(0x32d)]['PartyCmd'][_0x353cf(0x63b)])):_0x10cab4['setWaitMode']('battleAnimation');else{if(_0x353cf(0x74d)===_0x353cf(0x74d))this['callOptions']();else{const _0x2c1e13=_0x729c33[_0x353cf(0x4c1)][_0x353cf(0xdb6)];_0x2c1e13[_0x353cf(0x5c8)](),_0x2c1e13[_0x353cf(0xb66)](!![]),_0x2c1e13['refresh'](),_0x2c1e13[_0x353cf(0x3c4)]();const _0x10b789=_0x3361a8[_0x353cf(0x4c1)][_0x353cf(0xd3a)](),_0x218f23=['xp',_0x353cf(0x3e6),'border'];if(_0x218f23[_0x353cf(0x864)](_0x10b789)){const _0x470be0=_0x1877c7['_scene']['_statusWindow'];_0x470be0[_0x353cf(0x68b)]['y']=0x0;}}}},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xbd2)]=function(){const _0x113109=_0x4c6a01;return BattleManager[_0x113109(0x479)]();},Scene_Battle[_0x4c6a01(0xc58)]['callOptions']=function(){const _0x4521cf=_0x4c6a01;this[_0x4521cf(0xb7b)]=![],this[_0x4521cf(0x666)][_0x4521cf(0x32e)](),this[_0x4521cf(0xd01)][_0x4521cf(0x22f)]=![];if(BattleManager[_0x4521cf(0x251)]())($dataSystem[_0x4521cf(0x22b)]||$dataSystem[_0x4521cf(0x32b)])&&SceneManager['snapForBackground']();else($gameMap['battleback1Name']()||$gameMap[_0x4521cf(0x32b)]())&&SceneManager[_0x4521cf(0x98a)]();SceneManager[_0x4521cf(0x543)](Scene_Options);if(BattleManager[_0x4521cf(0x758)]()){if(_0x4521cf(0x834)===_0x4521cf(0x834))BattleManager[_0x4521cf(0x56f)]=BattleManager[_0x4521cf(0x73e)]();else{if(_0x5e1f65[_0x4521cf(0x329)]()[_0x4521cf(0x683)]>0x0)return!![];this[_0x4521cf(0x893)]='';}}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x9a5)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x519)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x519)]=function(){const _0x1c2234=_0x4c6a01;VisuMZ[_0x1c2234(0x5e5)][_0x1c2234(0x9a5)][_0x1c2234(0x3a4)](this);if(this[_0x1c2234(0xb7b)]&&!BattleManager['_subject'])this['callOptions']();},VisuMZ[_0x4c6a01(0x5e5)]['Scene_Battle_update']=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)]=function(){const _0x379e5c=_0x4c6a01;VisuMZ[_0x379e5c(0x5e5)][_0x379e5c(0x835)][_0x379e5c(0x3a4)](this),this[_0x379e5c(0x3da)]();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x7e0)]=function(){const _0x36e0a1=_0x4c6a01,_0x565490=this['autoBattleWindowRect']();this[_0x36e0a1(0x540)]=new Window_AutoBattleCancel(_0x565490),this[_0x36e0a1(0x540)][_0x36e0a1(0xd46)](),this[_0x36e0a1(0x279)](this['_autoBattleWindow']);},Scene_Battle[_0x4c6a01(0xc58)]['autoBattleWindowRect']=function(){const _0x4fbadb=_0x4c6a01;return VisuMZ['BattleCore']['Settings'][_0x4fbadb(0x4f8)][_0x4fbadb(0x6e7)][_0x4fbadb(0x3a4)](this);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x8b7)]=function(){const _0x4728d1=_0x4c6a01;this[_0x4728d1(0x218)]=[];},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x3da)]=function(){const _0xb2979e=_0x4c6a01;if(!this[_0xb2979e(0x218)])return;for(const _0x79bd51 of this[_0xb2979e(0x218)]){_0x79bd51&&('Sriox'===_0xb2979e(0xd86)?this['initialize'](...arguments):_0x79bd51['update']());}},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x3ee)]=function(_0x22beda){const _0x46c525=_0x4c6a01,_0x32b7c4=$dataCommonEvents[_0x22beda];if(!_0x32b7c4)return;const _0x52974c=new Game_BattleOnceParallelInterpreter();this[_0x46c525(0xdf2)](_0x52974c),_0x52974c['setCommonEvent'](_0x22beda);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xdf2)]=function(_0x1591bb){const _0x4b7d5f=_0x4c6a01;this[_0x4b7d5f(0x218)]=this['_onceParallelInterpreters']||[],this[_0x4b7d5f(0x218)][_0x4b7d5f(0x543)](_0x1591bb);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x4fb)]=function(_0x5ae960){const _0xcf713b=_0x4c6a01;this[_0xcf713b(0x218)]=this[_0xcf713b(0x218)]||[],this[_0xcf713b(0x218)][_0xcf713b(0xbde)](_0x5ae960);},Game_Troop[_0x4c6a01(0xc58)][_0x4c6a01(0xbdd)]=function(){const _0x289013=_0x4c6a01;for(const _0x140138 of this['troop']()[_0x289013(0x587)]){if(!this[_0x289013(0xa86)](_0x140138))continue;SceneManager[_0x289013(0x4c1)][_0x289013(0x5da)](_0x140138);}},Game_Troop['prototype'][_0x4c6a01(0xa86)]=function(_0x5729c3){const _0x4cc35e=_0x4c6a01;if(!_0x5729c3)return;for(const _0x350d67 of _0x5729c3[_0x4cc35e(0x85a)]){if([0x6c,0x198][_0x4cc35e(0x864)](_0x350d67[_0x4cc35e(0xc08)])){const _0x40b228=_0x350d67[_0x4cc35e(0x59d)][0x0];if(_0x40b228['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle['prototype'][_0x4c6a01(0x5da)]=function(_0x440ab7){const _0x4cda5a=_0x4c6a01;if(!_0x440ab7)return;const _0x4e7f67=new Game_BattleOnceParallelInterpreter();this[_0x4cda5a(0xdf2)](_0x4e7f67),_0x4e7f67['setTroopPage'](_0x440ab7);};function Game_BattleOnceParallelInterpreter(){const _0x9271bf=_0x4c6a01;this[_0x9271bf(0x67a)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x4c6a01(0xb36)](Game_Interpreter[_0x4c6a01(0xc58)]),Game_BattleOnceParallelInterpreter[_0x4c6a01(0xc58)][_0x4c6a01(0xacc)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x4c6a01(0xc58)][_0x4c6a01(0x3e0)]=function(_0x524ffc){const _0x886a41=$dataCommonEvents[_0x524ffc];_0x886a41?this['setup'](_0x886a41['list'],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter[_0x4c6a01(0xc58)][_0x4c6a01(0xce4)]=function(){const _0x380c2b=_0x4c6a01;if(!SceneManager[_0x380c2b(0x503)]())return;SceneManager[_0x380c2b(0x4c1)][_0x380c2b(0x4fb)](this),Game_Interpreter[_0x380c2b(0xc58)][_0x380c2b(0xce4)][_0x380c2b(0x3a4)](this);},Game_BattleOnceParallelInterpreter[_0x4c6a01(0xc58)]['setTroopPage']=function(_0x37d940){const _0x59e8fd=_0x4c6a01;_0x37d940?this['setup'](_0x37d940['list'],0x0):this[_0x59e8fd(0xce4)]();},Scene_Battle[_0x4c6a01(0xc58)]['isPartyCommandWindowDisabled']=function(){const _0x22db4d=_0x4c6a01;return VisuMZ[_0x22db4d(0x5e5)][_0x22db4d(0x32d)]['PartyCmd'][_0x22db4d(0xd2f)];},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xdef)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x99d)],Scene_Battle[_0x4c6a01(0xc58)]['startPartyCommandSelection']=function(){const _0xf46561=_0x4c6a01;this[_0xf46561(0x674)]()?this[_0xf46561(0x3a3)]():VisuMZ[_0xf46561(0x5e5)]['Scene_Battle_startPartyCommandSelection']['call'](this);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x3a3)]=function(){const _0x2a3ec3=_0x4c6a01;if(BattleManager['isDTB']())this['selectNextCommand']();else BattleManager[_0x2a3ec3(0x758)]()&&VisuMZ[_0x2a3ec3(0x5e5)][_0x2a3ec3(0xdef)][_0x2a3ec3(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x2de)]=Scene_Battle['prototype'][_0x4c6a01(0xae8)],Scene_Battle['prototype']['commandFight']=function(){const _0x20c076=_0x4c6a01;if(BattleManager[_0x20c076(0x758)]()){if(_0x20c076(0xcb2)!==_0x20c076(0xcb2)){if(!_0x6f01fd)return 0x0;let _0x3dd0f7=0x0;const _0x2b5508=_0xb4e481[_0x20c076(0x407)];return _0x2b5508[_0x20c076(0x996)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x3dd0f7+=_0x514114(_0x29d1b5['$1'])),_0x2b5508[_0x20c076(0x996)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x3dd0f7+=_0x4f7051(_0x3016af['$1'])),_0x3dd0f7;}else this[_0x20c076(0x9ce)](),this[_0x20c076(0xbaf)]();}else{if(_0x20c076(0x836)!=='dgEDJ'){const _0x132190=this['commandStyle'](),_0x25a049=_0x16cc6f[_0x20c076(0x5e5)][_0x20c076(0x32d)][_0x20c076(0x921)]['CmdIconFight'],_0xf6a410=_0x132190===_0x20c076(0x2b8)?_0x1e092a[_0x20c076(0x56d)]:_0x20c076(0x751)[_0x20c076(0x511)](_0x25a049,_0x274db8[_0x20c076(0x56d)]),_0x47e347=this['isFightCommandEnabled']();this['addCommand'](_0xf6a410,'fight',_0x47e347);}else VisuMZ[_0x20c076(0x5e5)][_0x20c076(0x2de)][_0x20c076(0x3a4)](this);}},Scene_Battle[_0x4c6a01(0xc58)]['tpbCommandFight']=function(){const _0x561d75=_0x4c6a01;if(!VisuMZ[_0x561d75(0x5e5)][_0x561d75(0x4c9)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return;const _0x1f0af4=$gameParty[_0x561d75(0x490)]()[_0x561d75(0xac7)](_0x163744=>_0x163744[_0x561d75(0xcbf)]()&&_0x163744['canInput']());BattleManager[_0x561d75(0x99c)]=_0x1f0af4[0x0]||null,BattleManager['_currentActor']&&BattleManager[_0x561d75(0x99c)]['setActionState']('inputting');},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x24e)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xde5)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xde5)]=function(){const _0x21b1ee=_0x4c6a01;VisuMZ['BattleCore'][_0x21b1ee(0x24e)][_0x21b1ee(0x3a4)](this),this[_0x21b1ee(0xbce)]();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xbce)]=function(){const _0x240e25=_0x4c6a01,_0x7c222=this[_0x240e25(0xa1d)];_0x7c222[_0x240e25(0x952)](_0x240e25(0x340),this['actorCommandEscape'][_0x240e25(0x5e0)](this)),_0x7c222['setHandler']('autoBattle',this[_0x240e25(0x4af)]['bind'](this)),_0x7c222[_0x240e25(0x952)]('singleSkill',this['actorCommandSingleSkill']['bind'](this)),BattleManager[_0x240e25(0x758)]()&&(_0x240e25(0xc6c)===_0x240e25(0x7b0)?(_0x1bc4cd+=_0x526427,_0x758a98+=_0x5d725e):this[_0x240e25(0x674)]()?delete _0x7c222[_0x240e25(0x57d)][_0x240e25(0x7d1)]:_0x240e25(0x4c7)===_0x240e25(0x4c7)?_0x7c222['setHandler'](_0x240e25(0x7d1),this['actorCommandCancelTPB'][_0x240e25(0x5e0)](this)):this[_0x240e25(0x973)]=this[_0x240e25(0xa71)](this[_0x240e25(0x973)],this[_0x240e25(0xaf0)],_0x25e2a2,_0x354cd9,_0x311664));},Scene_Battle['prototype'][_0x4c6a01(0x84a)]=function(){const _0x210051=_0x4c6a01;this[_0x210051(0xa57)]();},Scene_Battle[_0x4c6a01(0xc58)]['actorCommandAutoBattle']=function(){const _0x17c4b3=_0x4c6a01;BattleManager[_0x17c4b3(0x73e)]()[_0x17c4b3(0xd99)](),BattleManager[_0x17c4b3(0x8de)](),BattleManager[_0x17c4b3(0x924)](),this[_0x17c4b3(0x974)]();},Scene_Battle[_0x4c6a01(0xc58)]['actorCommandSingleSkill']=function(){const _0x5f3891=_0x4c6a01,_0x4cd774=BattleManager[_0x5f3891(0xa08)](),_0x196f25=this['_actorCommandWindow'][_0x5f3891(0xa77)]();_0x4cd774['setSkill'](_0x196f25),BattleManager[_0x5f3891(0x73e)]()[_0x5f3891(0x30c)]($dataSkills[_0x196f25]),this[_0x5f3891(0x288)]();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x3f3)]=function(){const _0x292a31=_0x4c6a01;if(this[_0x292a31(0xd0a)]()){if('AvceB'!==_0x292a31(0xa75))this[_0x292a31(0xc7f)]();else{const _0x5be50b=_0x577ce2[_0x292a31(0x5e5)][_0x292a31(0x32d)][_0x292a31(0x82d)];_0x5be50b['LastSelected']?this[_0x292a31(0x6bc)]():this[_0x292a31(0xb9d)]();}}else{if(_0x292a31(0x47d)!==_0x292a31(0x47d))for(const _0x1d0572 of _0x19ddde){const _0x25c6df=_0xeccdac[0x0][_0x292a31(0x511)](_0x1d0572[0x0]),_0x2715f3=_0x17f2cc[0x1][_0x292a31(0x511)](_0x1d0572[0x1]),_0x33088d=new _0x40717c(_0x4e2e7b[_0x292a31(0x511)](_0x2715f3),'i');_0x467c20[_0x25c6df]=_0x33088d;}else this[_0x292a31(0xae1)]();}},VisuMZ['BattleCore'][_0x4c6a01(0x4c9)]=![],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xd0a)]=function(){const _0x3c7bc7=_0x4c6a01;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x3c7bc7(0x7a0)]())return![];else{if(!VisuMZ[_0x3c7bc7(0x5e5)][_0x3c7bc7(0x4c9)])return![];const _0x1a5f5c=$gameParty[_0x3c7bc7(0x490)]()[_0x3c7bc7(0xac7)](_0xec8a06=>_0xec8a06[_0x3c7bc7(0xcbf)]()&&_0xec8a06[_0x3c7bc7(0x5c9)]());return _0x1a5f5c[_0x3c7bc7(0x991)]>0x0&&BattleManager['actor']()!==_0x1a5f5c[_0x1a5f5c[_0x3c7bc7(0x991)]-0x1];}},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xc7f)]=function(){const _0x25646b=_0x4c6a01,_0x6e0de7=BattleManager[_0x25646b(0x73e)](),_0x5e452=_0x6e0de7[_0x25646b(0x72f)]();if(_0x5e452)_0x5e452[_0x25646b(0x6b8)]();const _0x2be960=$gameParty[_0x25646b(0x490)]()['filter'](_0x36175c=>_0x36175c['isTpbCharged']()&&_0x36175c['canInput']()),_0x4cb439=_0x2be960[_0x25646b(0x93e)](_0x6e0de7),_0x34faec=_0x2be960[_0x4cb439+0x1];BattleManager[_0x25646b(0x99c)]=_0x34faec||null;if(_0x34faec)_0x34faec['setActionState']('inputting');_0x6e0de7[_0x25646b(0x9f6)]('undecided'),this[_0x25646b(0x974)]();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xae1)]=function(){const _0xc574a2=_0x4c6a01;this[_0xc574a2(0xde6)][_0xc574a2(0xb68)](),this[_0xc574a2(0xa1d)][_0xc574a2(0x5de)]();if(!VisuMZ[_0xc574a2(0x5e5)][_0xc574a2(0x4c9)])return;if(Imported[_0xc574a2(0xad7)]&&BattleManager['isCTB']())return;if(BattleManager[_0xc574a2(0x99c)]){BattleManager[_0xc574a2(0x99c)][_0xc574a2(0x9f6)](_0xc574a2(0x512));const _0x4d36fe=BattleManager[_0xc574a2(0x99c)][_0xc574a2(0x72f)]();if(_0x4d36fe)_0x4d36fe[_0xc574a2(0x6b8)]();}BattleManager[_0xc574a2(0x99c)]=null;},VisuMZ['BattleCore'][_0x4c6a01(0xc4d)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x410)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x410)]=function(){const _0x172cd1=_0x4c6a01;VisuMZ[_0x172cd1(0x5e5)][_0x172cd1(0xc4d)][_0x172cd1(0x3a4)](this),this[_0x172cd1(0x229)]();},Scene_Battle[_0x4c6a01(0xc58)]['createHelpWindowBattleCore']=function(){const _0x23b91b=_0x4c6a01;this[_0x23b91b(0xa1d)]['setHelpWindow'](this['_helpWindow']),this[_0x23b91b(0xde6)][_0x23b91b(0x806)](this[_0x23b91b(0x7ed)]);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xd3a)]=function(){const _0x2ad2f7=_0x4c6a01;if($gameTemp['_forcedBattleLayout']!==undefined){if('MLbUa'!==_0x2ad2f7(0x736))!_0x2cdc93[_0x2ad2f7(0x9df)]()[_0x2ad2f7(0x864)](this[_0x2ad2f7(0x56f)])&&(this['_tpbSceneChangeCacheActor']=null);else return $gameTemp[_0x2ad2f7(0xc11)];}if(this[_0x2ad2f7(0x6b2)])return this[_0x2ad2f7(0x6b2)];this[_0x2ad2f7(0x6b2)]=VisuMZ[_0x2ad2f7(0x5e5)]['Settings'][_0x2ad2f7(0x376)][_0x2ad2f7(0x634)]['toLowerCase']()[_0x2ad2f7(0x4e9)]();if(this['_battleLayoutStyle']===_0x2ad2f7(0xa4f)&&!Imported[_0x2ad2f7(0x7f7)]){if(_0x2ad2f7(0xd80)===_0x2ad2f7(0xae6))return 0xa;else this[_0x2ad2f7(0x6b2)]=_0x2ad2f7(0xc9b);}if(this[_0x2ad2f7(0x6b2)]===_0x2ad2f7(0x520)&&!Imported[_0x2ad2f7(0x8f4)]){if(_0x2ad2f7(0xb47)==='Qdneh')this['_battleLayoutStyle']='default';else{if(!_0x4f40ab['isSceneBattle']())return;if(!_0x1c9580[_0x2ad2f7(0x880)])return;_0x197e9b['ConvertParams'](_0x2f8b0c,_0x1acf23);const _0x3b6fb1=_0x549712['getLastPluginCommandInterpreter'](),_0x2cefae=_0x1ce670[_0x2ad2f7(0x917)];_0x340c69[_0x2ad2f7(0x3d1)](_0x36383b[_0x2ad2f7(0xe10)],_0x31f7d5[_0x2ad2f7(0x6f9)],_0x5d31c3[_0x2ad2f7(0xa14)],_0x3a1ec1[_0x2ad2f7(0xd9f)]);if(_0x2cefae)_0x3b6fb1[_0x2ad2f7(0x2b5)](_0x2ad2f7(0xc97));}}return this['_battleLayoutStyle'];},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x630)]=Scene_Battle[_0x4c6a01(0xc58)]['windowAreaHeight'],Scene_Battle['prototype'][_0x4c6a01(0x9c9)]=function(){const _0x8b9b48=_0x4c6a01,_0x34c831=this['battleLayoutStyle']();switch(_0x34c831){case _0x8b9b48(0x85a):return this[_0x8b9b48(0xcfb)](Math['max'](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ[_0x8b9b48(0x5e5)][_0x8b9b48(0x630)][_0x8b9b48(0x3a4)](this);break;}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x658)]=Scene_Battle['prototype'][_0x4c6a01(0x89f)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x89f)]=function(){const _0x2fe3f1=_0x4c6a01,_0x549b05=this[_0x2fe3f1(0xd3a)]();switch(_0x549b05){case _0x2fe3f1(0x2ab):return this[_0x2fe3f1(0x8b1)]();break;case _0x2fe3f1(0xc9b):case _0x2fe3f1(0x85a):case'xp':case _0x2fe3f1(0x3e6):default:return VisuMZ[_0x2fe3f1(0x5e5)][_0x2fe3f1(0x658)][_0x2fe3f1(0x3a4)](this);break;}},Scene_Battle['prototype']['statusWindowRect']=function(){const _0xd8afba=_0x4c6a01,_0x582fbe=this['battleLayoutStyle']();switch(_0x582fbe){case'xp':case'portrait':return this['statusWindowRectXPStyle']();break;case _0xd8afba(0x2ab):return this[_0xd8afba(0xc34)]();break;case'default':case _0xd8afba(0x85a):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xe21)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x8b6)],Scene_Battle['prototype'][_0x4c6a01(0x8b6)]=function(){const _0x256d5c=_0x4c6a01,_0x1d3aea=this[_0x256d5c(0xd3a)]();switch(_0x1d3aea){case'xp':case'portrait':return this[_0x256d5c(0x70e)]();break;case _0x256d5c(0x2ab):return this[_0x256d5c(0xbf5)]();case _0x256d5c(0xc9b):case _0x256d5c(0x85a):default:return this[_0x256d5c(0x445)]();break;}},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x445)]=function(){const _0x459195=_0x4c6a01,_0x351c9a=VisuMZ[_0x459195(0x5e5)][_0x459195(0x32d)][_0x459195(0x376)],_0x48d066=_0x351c9a[_0x459195(0x8c2)]||0xc0,_0x10f5e3=this[_0x459195(0x9c9)](),_0xc054c6=this['isRightInputMode']()?Graphics[_0x459195(0xbc7)]-_0x48d066:0x0,_0x561873=Graphics['boxHeight']-_0x10f5e3;return new Rectangle(_0xc054c6,_0x561873,_0x48d066,_0x10f5e3);},Scene_Battle[_0x4c6a01(0xc58)]['actorCommandWindowRect']=function(){return this['partyCommandWindowRect']();},VisuMZ['BattleCore'][_0x4c6a01(0x9bf)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x61c)],Scene_Battle[_0x4c6a01(0xc58)]['updateStatusWindowPosition']=function(){const _0x3af067=_0x4c6a01,_0x2f4c51=this[_0x3af067(0xd3a)]();switch(_0x2f4c51){case'xp':case'portrait':case _0x3af067(0x2ab):break;case _0x3af067(0xc9b):case _0x3af067(0x85a):default:VisuMZ['BattleCore']['Scene_Battle_updateStatusWindowPosition'][_0x3af067(0x3a4)](this);break;}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x2cc)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x3ae)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x3ae)]=function(){const _0x4bae0f=_0x4c6a01;VisuMZ[_0x4bae0f(0x5e5)][_0x4bae0f(0x2cc)][_0x4bae0f(0x3a4)](this),this[_0x4bae0f(0x74e)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x7ef)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x607)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x607)]=function(){const _0x4cf3d7=_0x4c6a01;VisuMZ[_0x4cf3d7(0x5e5)][_0x4cf3d7(0x7ef)][_0x4cf3d7(0x3a4)](this),this[_0x4cf3d7(0xb0b)][_0x4cf3d7(0x9cf)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x74e)]=function(){const _0x2b5c73=_0x4c6a01,_0x23c55d=this['battleLayoutStyle']();['xp',_0x2b5c73(0x3e6),_0x2b5c73(0x2ab)][_0x2b5c73(0x864)](_0x23c55d)&&this['_actorCommandWindow']['close'](),(_0x23c55d===_0x2b5c73(0x2ab)||this[_0x2b5c73(0xd48)]())&&(this[_0x2b5c73(0xaba)][_0x2b5c73(0x5de)](),this['_itemWindow'][_0x2b5c73(0x5de)]());},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xac3)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x2a9)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x2a9)]=function(){const _0x56e91b=_0x4c6a01;VisuMZ['BattleCore'][_0x56e91b(0xac3)]['call'](this),this[_0x56e91b(0xa0e)]();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x7e3)]=function(){const _0x136526=_0x4c6a01;return[_0x136526(0x2dc),'guard',_0x136526(0xd5e)][_0x136526(0x864)](this[_0x136526(0xa1d)][_0x136526(0x7b7)]());},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xaa9)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x957)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x957)]=function(){const _0x465618=_0x4c6a01;if(this[_0x465618(0x7e3)]()){if(_0x465618(0x945)===_0x465618(0x945))this[_0x465618(0x270)][_0x465618(0x5c8)](),this[_0x465618(0xdb6)][_0x465618(0xd46)](),this['_actorCommandWindow'][_0x465618(0xac2)]();else return _0x24d777[_0x465618(0x6e6)]();}else _0x465618(0xd2b)==='KDWkQ'?VisuMZ[_0x465618(0x5e5)][_0x465618(0xaa9)]['call'](this):this[_0x465618(0x894)](_0x521132,_0x15cb7e,_0x14b2db);this['cancelTargetSelectionVisibility']();},VisuMZ['BattleCore'][_0x4c6a01(0x2a0)]=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x4a1)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x4a1)]=function(){const _0x553df0=_0x4c6a01,_0x88815d=BattleManager[_0x553df0(0xa08)]();_0x88815d[_0x553df0(0xc4c)](this[_0x553df0(0xb0b)]['enemy']()),this[_0x553df0(0xb0b)][_0x553df0(0x388)](),VisuMZ[_0x553df0(0x5e5)][_0x553df0(0x2a0)][_0x553df0(0x3a4)](this),this[_0x553df0(0xa0e)]();},VisuMZ['BattleCore']['Scene_Battle_onEnemyCancel']=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x4d5)],Scene_Battle['prototype'][_0x4c6a01(0x4d5)]=function(){const _0x24a886=_0x4c6a01;this[_0x24a886(0x7e3)]()?(this[_0x24a886(0x270)]['show'](),this[_0x24a886(0xb0b)][_0x24a886(0xd46)](),this['_actorCommandWindow'][_0x24a886(0xac2)]()):VisuMZ[_0x24a886(0x5e5)][_0x24a886(0x9e9)][_0x24a886(0x3a4)](this),this[_0x24a886(0x9a3)](),this[_0x24a886(0xb0b)][_0x24a886(0x388)]();},Scene_Battle['prototype'][_0x4c6a01(0xa0e)]=function(){const _0x1cff7a=_0x4c6a01,_0x48b212=this[_0x1cff7a(0xd3a)]();if(_0x48b212===_0x1cff7a(0x2ab)||this[_0x1cff7a(0xd48)]()){if(_0x1cff7a(0x676)!==_0x1cff7a(0x7ea)){this[_0x1cff7a(0xaba)][_0x1cff7a(0xb85)]();if(this[_0x1cff7a(0xaba)][_0x1cff7a(0x43a)]){if(_0x1cff7a(0x2e4)!==_0x1cff7a(0x2e4))return!![];else this['_skillWindow']['show']();}this[_0x1cff7a(0xa49)][_0x1cff7a(0xb85)](),this['_itemWindow'][_0x1cff7a(0x43a)]&&(_0x1cff7a(0x45e)!==_0x1cff7a(0x45e)?this[_0x1cff7a(0x89b)]():this[_0x1cff7a(0xa49)]['show']());}else _0x6c4ef5=_0x57d4c5['SideviewSelect'];}},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x9a3)]=function(){const _0x3811e8=_0x4c6a01,_0x1170b6=this[_0x3811e8(0xd3a)]();['xp',_0x3811e8(0x3e6),_0x3811e8(0x2ab)][_0x3811e8(0x864)](_0x1170b6)&&this[_0x3811e8(0xa1d)][_0x3811e8(0xb85)](),this[_0x3811e8(0xa0e)]();},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xa1e)]=function(){const _0xa4ede7=_0x4c6a01,_0xcb0f15=VisuMZ[_0xa4ede7(0x5e5)][_0xa4ede7(0x32d)][_0xa4ede7(0x376)],_0x2a8499=Window_BattleStatus['prototype'][_0xa4ede7(0xd1d)](),_0x4e4a57=Graphics['boxWidth']-(_0xcb0f15[_0xa4ede7(0x8c2)]||0xc0),_0x3ac69c=this[_0xa4ede7(0x9c9)]()+_0x2a8499,_0x3d5989=this['isRightInputMode']()?0x0:Graphics[_0xa4ede7(0xbc7)]-_0x4e4a57,_0xf9a853=Graphics[_0xa4ede7(0xc3a)]-_0x3ac69c+_0x2a8499;return new Rectangle(_0x3d5989,_0xf9a853,_0x4e4a57,_0x3ac69c);},Scene_Battle['prototype']['statusWindowRectXPStyle']=function(){const _0x166faa=_0x4c6a01,_0x56e4e5=Window_BattleStatus[_0x166faa(0xc58)][_0x166faa(0xd1d)](),_0x348703=Graphics[_0x166faa(0xbc7)],_0x17a483=this['windowAreaHeight']()+_0x56e4e5,_0x32e56a=0x0,_0x3b44aa=Graphics['boxHeight']-_0x17a483+_0x56e4e5;return new Rectangle(_0x32e56a,_0x3b44aa,_0x348703,_0x17a483);},Scene_Battle['prototype'][_0x4c6a01(0x70e)]=function(){const _0x41ee88=_0x4c6a01,_0x46131f=Graphics[_0x41ee88(0xbc7)]/0x2,_0x573df5=this[_0x41ee88(0xcfb)](VisuMZ[_0x41ee88(0x5e5)][_0x41ee88(0x32d)]['BattleLayout'][_0x41ee88(0x29c)],!![]),_0x14d6dd=Math['round']((Graphics[_0x41ee88(0xbc7)]-_0x46131f)/0x2),_0x124279=Graphics[_0x41ee88(0xc3a)]-_0x573df5-this[_0x41ee88(0x7d2)]()[_0x41ee88(0xb45)];return new Rectangle(_0x14d6dd,_0x124279,_0x46131f,_0x573df5);},Scene_Battle[_0x4c6a01(0xc58)]['helpWindowRectBorderStyle']=function(){const _0x72a3f=_0x4c6a01,_0x5ef50a=Graphics['width'],_0x391d0e=Math['round']((Graphics[_0x72a3f(0xbc7)]-_0x5ef50a)/0x2),_0x4f2a71=this[_0x72a3f(0xc05)](),_0x1eb774=(Graphics[_0x72a3f(0xb45)]-Graphics[_0x72a3f(0xc3a)])/-0x2;return new Rectangle(_0x391d0e,_0x1eb774,_0x5ef50a,_0x4f2a71);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xc34)]=function(){const _0x22910e=_0x4c6a01,_0x25c55e=Graphics[_0x22910e(0xe09)],_0x50840f=Math[_0x22910e(0x9c7)]((Graphics[_0x22910e(0xbc7)]-_0x25c55e)/0x2),_0x552e2c=this['calcWindowHeight'](0x4,!![]),_0x434f9a=Graphics[_0x22910e(0xc3a)]-_0x552e2c+(Graphics[_0x22910e(0xb45)]-Graphics['boxHeight'])/0x2;return new Rectangle(_0x50840f,_0x434f9a,_0x25c55e,_0x552e2c);},Scene_Battle['prototype'][_0x4c6a01(0xbf5)]=function(){const _0x535b12=_0x4c6a01,_0x1231cd=Math[_0x535b12(0x989)](Graphics[_0x535b12(0xe09)]/0x3),_0x572a5f=this[_0x535b12(0xd83)]()?(Graphics[_0x535b12(0xe09)]+Graphics[_0x535b12(0xbc7)])/0x2-_0x1231cd:(Graphics[_0x535b12(0xe09)]-Graphics['boxWidth'])/-0x2,_0x48f3f3=this[_0x535b12(0x8b1)](),_0x4f1e8c=_0x48f3f3['y']+_0x48f3f3[_0x535b12(0xb45)],_0x576d35=this[_0x535b12(0xc34)](),_0x48ea13=_0x576d35['y']-_0x4f1e8c;return new Rectangle(_0x572a5f,_0x4f1e8c,_0x1231cd,_0x48ea13);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x746)]=function(){const _0x45b06e=_0x4c6a01,_0x3934cf=Math['ceil'](Graphics[_0x45b06e(0xe09)]/0x3),_0x2fafaa=Math[_0x45b06e(0x9c7)]((Graphics['boxWidth']-_0x3934cf)/0x2),_0x5c6530=this[_0x45b06e(0xbf5)](),_0x4bb657=_0x5c6530['y'],_0x2cae15=_0x5c6530[_0x45b06e(0xb45)];return new Rectangle(_0x2fafaa,_0x4bb657,_0x3934cf,_0x2cae15);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x7c0)]=function(){const _0x125a16=_0x4c6a01;this[_0x125a16(0xde4)]['y']=this[_0x125a16(0x7ed)]['y']+this['_helpWindow'][_0x125a16(0xb45)];if(this['isRightInputMode']()){if(_0x125a16(0x7a4)===_0x125a16(0x562))this[_0x125a16(0x899)]=_0x4bc86c;else{if(this[_0x125a16(0xd3a)]()==='border'){if(_0x125a16(0x64c)===_0x125a16(0x8e9))return-0x1;else this['_cancelButton']['x']=0x8;}else this[_0x125a16(0xde4)]['x']=-this[_0x125a16(0xde4)]['width']-0x4;}}else this[_0x125a16(0xde4)]['x']=Graphics[_0x125a16(0xe09)]-(Graphics[_0x125a16(0xe09)]-Graphics[_0x125a16(0xbc7)])/0x2-this[_0x125a16(0xde4)][_0x125a16(0xe09)]-0x4;},VisuMZ[_0x4c6a01(0x5e5)]['Scene_Battle_skillWindowRect']=Scene_Battle['prototype'][_0x4c6a01(0x424)],Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x424)]=function(){const _0x1a18c1=_0x4c6a01;if(this['battleLayoutStyle']()===_0x1a18c1(0x2ab))return this[_0x1a18c1(0x746)]();else return this[_0x1a18c1(0xd48)]()?this['skillItemWindowRectMiddle']():VisuMZ[_0x1a18c1(0x5e5)]['Scene_Battle_skillWindowRect'][_0x1a18c1(0x3a4)](this);},VisuMZ['BattleCore']['Scene_Battle_itemWindowRect']=Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x6a6)],Scene_Battle['prototype'][_0x4c6a01(0x6a6)]=function(){const _0x40ae7d=_0x4c6a01;if(this['battleLayoutStyle']()===_0x40ae7d(0x2ab)){if(_0x40ae7d(0xcb5)!=='LPCIC')return this[_0x40ae7d(0x746)]();else _0x31cedc[_0x40ae7d(0x952)](_0x40ae7d(0x7d1),this[_0x40ae7d(0x3f3)][_0x40ae7d(0x5e0)](this));}else{if(this[_0x40ae7d(0xd48)]()){if(_0x40ae7d(0x6ba)!==_0x40ae7d(0x85e))return this['skillItemWindowRectMiddle']();else{if(_0x1d5e12[_0x40ae7d(0x5e5)][_0x40ae7d(0x32d)][_0x40ae7d(0x84c)][_0x40ae7d(0xc03)])return _0x2be338['BattleCore']['Settings'][_0x40ae7d(0x84c)][_0x40ae7d(0xc03)][_0x40ae7d(0x3a4)](this);return _0x3c1b37[_0x40ae7d(0x5e5)]['Scene_Battle_logWindowRect']['call'](this);}}else{if(_0x40ae7d(0x640)!=='QqATg'){const _0x58c919=new _0x1b7e3b(0x0,0x0,_0x25f71c[_0x40ae7d(0xe09)],_0x410f3c[_0x40ae7d(0xb45)]);this[_0x40ae7d(0x8df)]=new _0x57a0e8(_0x58c919),this[_0x40ae7d(0x8df)]['opacity']=0x0,this[_0x40ae7d(0x279)](this[_0x40ae7d(0x8df)]),this['updateCommandNameWindow']();}else return VisuMZ[_0x40ae7d(0x5e5)][_0x40ae7d(0x298)][_0x40ae7d(0x3a4)](this);}}},Scene_Battle['prototype']['isSkillItemWindowsMiddle']=function(){const _0x3b5f12=_0x4c6a01;return VisuMZ[_0x3b5f12(0x5e5)][_0x3b5f12(0x32d)][_0x3b5f12(0x376)][_0x3b5f12(0x1f7)];},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x7eb)]=function(){const _0x2a74e8=_0x4c6a01,_0x1fe8ab=Sprite_Button[_0x2a74e8(0xc58)]['blockWidth']()*0x2+0x4;let _0x56e6a1=Graphics['boxWidth']-_0x1fe8ab;if(Imported[_0x2a74e8(0xad0)]&&SceneManager[_0x2a74e8(0x728)]()){if(_0x2a74e8(0x282)!==_0x2a74e8(0xcb7))_0x56e6a1+=_0x1fe8ab;else return _0x3c9a3f[_0x2a74e8(0x5e5)][_0x2a74e8(0x32d)][_0x2a74e8(0x4bd)]['CalcActionSpeedJS'][_0x2a74e8(0x3a4)](this);}const _0x354f2b=this[_0x2a74e8(0xc13)](),_0x6c19be=Graphics[_0x2a74e8(0xc3a)]-_0x354f2b-this[_0x2a74e8(0x5a9)]()[_0x2a74e8(0xb45)]+Window_BattleStatus['prototype']['extraHeight'](),_0xaecd9e=0x0;return new Rectangle(_0xaecd9e,_0x354f2b,_0x56e6a1,_0x6c19be);},Scene_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x722)]=function(){const _0x21fe7b=_0x4c6a01;if(!VisuMZ[_0x21fe7b(0x5e5)][_0x21fe7b(0x32d)][_0x21fe7b(0x82d)][_0x21fe7b(0x754)])return;this[_0x21fe7b(0xc6e)]=new Sprite(),this[_0x21fe7b(0xc6e)]['x']=this[_0x21fe7b(0xd01)]['x'],this[_0x21fe7b(0xc6e)]['y']=this[_0x21fe7b(0xd01)]['y'];const _0x28e652=this[_0x21fe7b(0x217)][_0x21fe7b(0x93e)](this['_windowLayer']);this[_0x21fe7b(0x546)](this[_0x21fe7b(0xc6e)],_0x28e652);for(let _0x5c797a=0x0;_0x5c797a<0x8;_0x5c797a++){const _0x284b1d=new Window_EnemyName(_0x5c797a);this[_0x21fe7b(0xc6e)]['addChild'](_0x284b1d);}},Sprite_Battler['_motionSpeed']=VisuMZ['BattleCore'][_0x4c6a01(0x32d)][_0x4c6a01(0x9ad)][_0x4c6a01(0x287)],VisuMZ['BattleCore'][_0x4c6a01(0xb4c)]=Sprite_Battler[_0x4c6a01(0xc58)]['initMembers'],Sprite_Battler['prototype'][_0x4c6a01(0xd4b)]=function(){const _0x565c73=_0x4c6a01;VisuMZ[_0x565c73(0x5e5)][_0x565c73(0xb4c)]['call'](this),this['initMembersBattleCore']();if(this[_0x565c73(0xacc)]===Sprite_Enemy)this['createShadowSprite']();this[_0x565c73(0x590)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x734)]=function(){const _0xd1d05=_0x4c6a01;this[_0xd1d05(0x545)]=0x0,this[_0xd1d05(0xcaa)]=0x0,this['_floatHeight']=0x0,this['_targetFloatHeight']=0x0,this[_0xd1d05(0x389)]=0x0,this[_0xd1d05(0x8ad)]=0x0,this[_0xd1d05(0xb4d)]=_0xd1d05(0x883),this['_jumpHeight']=0x0,this[_0xd1d05(0xb3c)]=0x0,this[_0xd1d05(0xc88)]=0x0,this[_0xd1d05(0x6ae)]=0x0,this['_targetOpacity']=0xff,this['_opacityDuration']=0x0,this[_0xd1d05(0xd41)]=0x0,this[_0xd1d05(0x789)]=_0xd1d05(0x883),this[_0xd1d05(0xd61)]=0x0,this[_0xd1d05(0x44e)]=0x0,this['_angleDuration']=0x0,this['_angleWholeDuration']=0x0,this[_0xd1d05(0xa25)]=_0xd1d05(0x883),this[_0xd1d05(0x75b)]=!![],this[_0xd1d05(0xe07)]=0x0,this[_0xd1d05(0xdbc)]=0x0,this[_0xd1d05(0x248)]=0x0,this[_0xd1d05(0xa0a)]=0x0,this[_0xd1d05(0x7a1)]=0x0,this[_0xd1d05(0x636)]=0x0,this['_skewEasing']='Linear',this[_0xd1d05(0xc1c)]=0x1,this['_growY']=0x1,this['_targetGrowX']=0x1,this['_targetGrowY']=0x1,this[_0xd1d05(0x826)]=0x0,this[_0xd1d05(0xa47)]=0x0,this[_0xd1d05(0xb5a)]=_0xd1d05(0x883),this['_flipScaleX']=0x1,this[_0xd1d05(0x67f)]=0x0,this[_0xd1d05(0x8d8)]=0x0,this[_0xd1d05(0x67c)]=0x0,this[_0xd1d05(0x96d)]=0x0,this['_homeEasing']=_0xd1d05(0x883),this[_0xd1d05(0xc1b)]=0x0,this[_0xd1d05(0x413)]=0x0;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xa61)]=function(){const _0x5bd62f=_0x4c6a01;this[_0x5bd62f(0x230)]=new Sprite(),this[_0x5bd62f(0x230)]['bitmap']=ImageManager['loadSystem'](_0x5bd62f(0x4f5)),this[_0x5bd62f(0x230)][_0x5bd62f(0x593)][_0x5bd62f(0x80c)]=VisuMZ['BattleCore']['Settings'][_0x5bd62f(0x9ad)][_0x5bd62f(0x237)],this['_shadowSprite'][_0x5bd62f(0x434)]['x']=0.5,this[_0x5bd62f(0x230)][_0x5bd62f(0x434)]['y']=0.5,this[_0x5bd62f(0x230)]['y']=-0x2,this[_0x5bd62f(0x230)][_0x5bd62f(0x22f)]=![],this['addChild'](this[_0x5bd62f(0x230)]);},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x590)]=function(){const _0x5c3a07=_0x4c6a01;this['_distortionSprite']=new Sprite(),this[_0x5c3a07(0xc1d)]['anchor']['x']=0.5,this[_0x5c3a07(0xc1d)]['anchor']['y']=0.5,this[_0x5c3a07(0x279)](this['_distortionSprite']);},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xc00)]=function(){const _0x49f875=_0x4c6a01;if(!this['_distortionSprite'])return;if(this['_shadowSprite']){if(_0x49f875(0x1fe)!==_0x49f875(0x1fe))this[_0x49f875(0x94b)](_0x49f875(0x3c7));else{const _0x5d3a2a=this[_0x49f875(0x506)](this[_0x49f875(0xc1d)]);this[_0x49f875(0x546)](this[_0x49f875(0x230)],_0x5d3a2a),this[_0x49f875(0xa46)]();}}this['_svBattlerSprite']&&this[_0x49f875(0xc1d)]['addChild'](this['_svBattlerSprite']),this[_0x49f875(0xc45)]&&('FwnFo'!==_0x49f875(0x866)?(_0x51945a[_0x49f875(0xc58)][_0x49f875(0x4d7)][_0x49f875(0x3a4)](this),this[_0x49f875(0x227)]?this[_0x49f875(0xb0e)]():_0x3159f2[_0x49f875(0x5e5)][_0x49f875(0xb5e)]['call'](this)):this['_distortionSprite'][_0x49f875(0x279)](this[_0x49f875(0xc45)])),this[_0x49f875(0x431)]&&this[_0x49f875(0xc1d)][_0x49f875(0x279)](this['_mainSprite']),this[_0x49f875(0xc38)]&&this[_0x49f875(0xc1d)][_0x49f875(0x279)](this[_0x49f875(0xc38)]),this['_dragonbonesSpriteContainer']&&this[_0x49f875(0xc1d)]['addChild'](this[_0x49f875(0x937)]);},Sprite_Battler['prototype'][_0x4c6a01(0xa46)]=function(){const _0x310820=_0x4c6a01;if(!this[_0x310820(0x230)])return;if(this['_battler']&&this[_0x310820(0xbf3)]['svBattlerShadowVisible']()){const _0x24a7e0=this['_shadowSprite'][_0x310820(0x593)];this[_0x310820(0x230)][_0x310820(0x8b4)](0x0,0x0,_0x24a7e0[_0x310820(0xe09)],_0x24a7e0[_0x310820(0xb45)]);}else this[_0x310820(0x230)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x4c6a01(0x92e)]=function(){const _0xa3d397=_0x4c6a01;return SceneManager[_0xa3d397(0x503)]()?SceneManager['_scene'][_0xa3d397(0x666)]['_damageContainer']:this[_0xa3d397(0x36d)];},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x9f0)]=function(_0x291ff9,_0x355cb1){const _0x328100=_0x4c6a01;if(!this[_0x328100(0xbf3)][_0x328100(0x47e)]())return;if(BattleManager[_0x328100(0xdb5)]())return;const _0x59fed5=VisuMZ['BattleCore']['Settings'][_0x328100(0x625)],_0x482df6=new Sprite_Damage();_0x482df6['_duration']=_0x59fed5['PopupDuration'],this[_0x328100(0x438)](_0x482df6),_0x482df6[_0x328100(0x9f0)](_0x291ff9,_0x355cb1),this[_0x328100(0x972)](_0x482df6);},Sprite_Battler[_0x4c6a01(0xc58)]['setupIconTextPopup']=function(_0x3b8f31,_0x1ff262,_0xdddc16){const _0x362848=_0x4c6a01;if(!this[_0x362848(0xbf3)][_0x362848(0x47e)]())return;if(BattleManager[_0x362848(0xdb5)]())return;const _0x46712b=VisuMZ[_0x362848(0x5e5)][_0x362848(0x32d)][_0x362848(0x625)],_0x1c14ae=new Sprite_Damage();_0x1c14ae[_0x362848(0x1ea)]=_0x46712b[_0x362848(0xca6)],this[_0x362848(0x438)](_0x1c14ae),_0x1c14ae[_0x362848(0xb6c)](_0x3b8f31,_0x1ff262,_0xdddc16),this['addDamageSprite'](_0x1c14ae);},Sprite_Battler[_0x4c6a01(0xc58)]['setupDamagePopup']=function(){const _0x571c14=_0x4c6a01;if(!this['_battler'][_0x571c14(0xc3f)]())return;while(this[_0x571c14(0xbf3)][_0x571c14(0xc3f)]()){this['_battler'][_0x571c14(0x47e)]()&&this['createDamageSprite']();}this[_0x571c14(0xbf3)][_0x571c14(0x569)](),this[_0x571c14(0xbf3)][_0x571c14(0x5d8)]();},Sprite_Battler['prototype'][_0x4c6a01(0x9f1)]=function(){const _0x18bcd8=_0x4c6a01;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x1e0a3d=VisuMZ['BattleCore']['Settings'][_0x18bcd8(0x625)],_0x354f02=new Sprite_Damage();_0x354f02[_0x18bcd8(0x1ea)]=_0x1e0a3d[_0x18bcd8(0xca6)],this[_0x18bcd8(0x438)](_0x354f02),_0x354f02[_0x18bcd8(0xb68)](this['_battler']),_0x354f02[_0x18bcd8(0xd95)](this['_battler']),this[_0x18bcd8(0x972)](_0x354f02);},Sprite_Battler['prototype']['addDamageSprite']=function(_0x109afc){const _0x4c0d26=_0x4c6a01;this[_0x4c0d26(0x209)][_0x4c0d26(0x543)](_0x109afc);if(this[_0x4c0d26(0x6a8)]()){const _0x42fb6d=SceneManager['_scene'][_0x4c0d26(0x270)];if(_0x42fb6d)_0x42fb6d['addDamageSprite'](_0x109afc,this[_0x4c0d26(0xbf3)]);}else{if('hFAgW'==='Wjrhh')this[_0x4c0d26(0x70c)]();else{this[_0x4c0d26(0x92e)]()[_0x4c0d26(0x279)](_0x109afc);if(SceneManager['isBattleFlipped']())_0x109afc[_0x4c0d26(0x68b)]['x']=-0x1;}}},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x6a8)]=function(){const _0x236a4a=_0x4c6a01;return!$gameSystem[_0x236a4a(0x7a2)]()&&this[_0x236a4a(0xbf3)]&&this[_0x236a4a(0xbf3)]['isActor']();return!$gameSystem[_0x236a4a(0x7a2)]()&&this[_0x236a4a(0xbf3)]&&this[_0x236a4a(0xbf3)][_0x236a4a(0x966)]()&&Window_BattleStatus[_0x236a4a(0xc58)][_0x236a4a(0xd3a)]()==='portrait';},Sprite_Battler['prototype'][_0x4c6a01(0x438)]=function(_0x4a1a8f){const _0xadb4bf=_0x4c6a01;this[_0xadb4bf(0x93b)](_0x4a1a8f,!![]);const _0x5d8de5=VisuMZ['BattleCore'][_0xadb4bf(0x32d)][_0xadb4bf(0x625)],_0x40228a=SceneManager['isBattleFlipped']()?-0x1:0x1;if(_0x5d8de5[_0xadb4bf(0x269)]){if(_0xadb4bf(0xa3e)==='Lujzt')this[_0xadb4bf(0xc11)]=_0xadb4bf(0xa4f);else for(const _0x4ae476 of this[_0xadb4bf(0x209)]){if('tInaq'!==_0xadb4bf(0xaf2))_0x4ae476['x']+=_0x5d8de5[_0xadb4bf(0xa11)]*_0x40228a,_0x4ae476['y']+=_0x5d8de5[_0xadb4bf(0xb25)];else{if(!this[_0xadb4bf(0xdc1)]())return![];const _0xffdfe9=this[_0xadb4bf(0x72f)]();if(!_0xffdfe9)return![];const _0x4536e6=_0xffdfe9[_0xadb4bf(0x551)];if(!_0x4536e6)return![];const _0x551846=_0x4536e6[_0xadb4bf(0x8d6)];return _0x551846&&!_0x551846[_0xadb4bf(0xd22)];}}}else{const _0x215b40=this['_damages'][this['_damages'][_0xadb4bf(0x991)]-0x1];_0x215b40&&(_0x4a1a8f['x']=_0x215b40['x']+_0x5d8de5[_0xadb4bf(0xa11)]*_0x40228a,_0x4a1a8f['y']=_0x215b40['y']+_0x5d8de5['PopupShiftY']);}},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x93b)]=function(_0x10dd6b,_0x2112af){const _0x539624=_0x4c6a01,_0x3bb28d=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x1b1746=this['_baseX'];_0x1b1746+=this['extraPositionX']();let _0x368ce8=this['_baseY'];const _0x1a0ca4=this['_distortionSprite'][_0x539624(0x68b)]['y'];_0x368ce8+=this['extraPositionY']();const _0x10a9ca=SceneManager[_0x539624(0x4c1)][_0x539624(0x270)];if(_0x10a9ca&&this[_0x539624(0x36d)]===_0x10a9ca){_0x1b1746+=_0x10a9ca['x']-this[_0x539624(0x571)]();const _0x326fc9=_0x10a9ca[_0x539624(0x833)]()*0x3/0x4;_0x368ce8=_0x10a9ca['y']+_0x326fc9,_0x368ce8=Math[_0x539624(0x892)](_0x368ce8,_0x10a9ca['y']+this['y']-this[_0x539624(0xb45)]+_0x326fc9);}_0x10dd6b['x']=Math[_0x539624(0x9c7)](_0x1b1746+this[_0x539624(0x571)]()*_0x3bb28d),_0x10dd6b['y']=Math[_0x539624(0x9c7)](_0x368ce8+this[_0x539624(0x78f)]());},VisuMZ[_0x4c6a01(0x5e5)]['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x571)],Sprite_Battler[_0x4c6a01(0xc58)]['damageOffsetX']=function(){const _0x2a08e7=_0x4c6a01;let _0x154e26=VisuMZ[_0x2a08e7(0x5e5)][_0x2a08e7(0x5b7)]['call'](this),_0x2cb1e4=VisuMZ[_0x2a08e7(0x5e5)][_0x2a08e7(0x32d)]['Damage'][_0x2a08e7(0x56c)]||0x0;return Math[_0x2a08e7(0x9c7)](_0x154e26+_0x2cb1e4);},VisuMZ['BattleCore']['Sprite_Battler_damageOffsetY']=Sprite_Battler['prototype']['damageOffsetY'],Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x78f)]=function(){const _0x1a811a=_0x4c6a01;let _0x11be5f=VisuMZ['BattleCore'][_0x1a811a(0x6b0)][_0x1a811a(0x3a4)](this);switch(VisuMZ['BattleCore']['Settings'][_0x1a811a(0x625)][_0x1a811a(0x4a7)]){case _0x1a811a(0x7ad):_0x11be5f-=this['height']*this[_0x1a811a(0x68b)]['y'];break;case'center':_0x11be5f-=this['height']*this['scale']['y']*0.5;break;}let _0x72f21=VisuMZ[_0x1a811a(0x5e5)]['Settings']['Damage'][_0x1a811a(0x57e)]||0x0;return Math[_0x1a811a(0x9c7)](_0x11be5f+_0x72f21);},Sprite_Actor['prototype'][_0x4c6a01(0x571)]=function(){const _0xb3476a=_0x4c6a01;return Sprite_Battler[_0xb3476a(0xc58)][_0xb3476a(0x571)][_0xb3476a(0x3a4)](this);},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x78f)]=function(){const _0x5d024e=_0x4c6a01;return Sprite_Battler[_0x5d024e(0xc58)][_0x5d024e(0x78f)]['call'](this);},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x25a)]=function(_0x5a90cb){const _0x45a7c7=_0x4c6a01;if(this[_0x45a7c7(0x6a8)]())SceneManager[_0x45a7c7(0x4c1)]['_statusWindow']['removeDamageSprite'](_0x5a90cb);else{if(_0x45a7c7(0x9e8)===_0x45a7c7(0x9e8))this[_0x45a7c7(0x92e)]()['removeChild'](_0x5a90cb),this[_0x45a7c7(0x209)][_0x45a7c7(0xbde)](_0x5a90cb),_0x5a90cb[_0x45a7c7(0xbcd)]();else{const _0x47edec=_0x2ffcb0[_0x2afe39];if(_0x47edec)_0x331068=this[_0x45a7c7(0xdbe)]()[_0x45a7c7(0x93e)](_0x47edec);}}},VisuMZ['BattleCore'][_0x4c6a01(0x5fc)]=Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x7cb)],Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x7cb)]=function(_0x2b2da4,_0x436412){const _0x42858b=_0x4c6a01,_0x4daba4=VisuMZ[_0x42858b(0x5e5)][_0x42858b(0x32d)];if(this['constructor']===Sprite_Actor)_0x2b2da4+=_0x4daba4['Actor'][_0x42858b(0xe10)]||0x0,_0x436412+=_0x4daba4[_0x42858b(0x9ad)]['OffsetY']||0x0;else this['constructor']===Sprite_Enemy&&(_0x2b2da4+=_0x4daba4[_0x42858b(0x82d)]['OffsetX']||0x0,_0x436412+=_0x4daba4[_0x42858b(0x82d)][_0x42858b(0x6f9)]||0x0);this['_battler']&&(_0x2b2da4=this[_0x42858b(0xbf3)][_0x42858b(0x513)]??_0x2b2da4,_0x436412=this[_0x42858b(0xbf3)][_0x42858b(0x48e)]??_0x436412),VisuMZ[_0x42858b(0x5e5)][_0x42858b(0x5fc)][_0x42858b(0x3a4)](this,_0x2b2da4,_0x436412),this[_0x42858b(0x67f)]=this[_0x42858b(0xb92)],this[_0x42858b(0x8d8)]=this['_homeY'],this[_0x42858b(0x67c)]=0x0,this[_0x42858b(0x96d)]=0x0,this[_0x42858b(0x73d)]='Linear';},VisuMZ['BattleCore'][_0x4c6a01(0xba0)]=Sprite_Battler['prototype'][_0x4c6a01(0x32e)],Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)]=function(){const _0x53bf0d=_0x4c6a01;VisuMZ[_0x53bf0d(0x5e5)]['Sprite_Battler_update'][_0x53bf0d(0x3a4)](this);if(!this[_0x53bf0d(0xbf3)]&&this['_hpGaugeSprite']){if(_0x53bf0d(0x2c3)!==_0x53bf0d(0x404))this[_0x53bf0d(0x487)][_0x53bf0d(0x22f)]=![];else{const _0x1a894d=this[_0x53bf0d(0xd3a)]();['xp','portrait',_0x53bf0d(0x2ab)][_0x53bf0d(0x864)](_0x1a894d)&&this[_0x53bf0d(0xa1d)][_0x53bf0d(0xb85)](),this[_0x53bf0d(0xa0e)]();}}},VisuMZ[_0x4c6a01(0x5e5)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x4c6a01(0xc58)]['updateMain'],Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x55d)]=function(){const _0x213faf=_0x4c6a01;this[_0x213faf(0x4a8)](),this[_0x213faf(0x425)](),this[_0x213faf(0x8b9)](),this['updateFlip'](),VisuMZ[_0x213faf(0x5e5)][_0x213faf(0x59b)][_0x213faf(0x3a4)](this),this[_0x213faf(0x88f)](),this['updateShakeFlinch']();if(this[_0x213faf(0xacc)]===Sprite_Enemy)this['updateShadow']();},VisuMZ['BattleCore'][_0x4c6a01(0x4ca)]=Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x242)],Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x242)]=function(){const _0xce60c0=_0x4c6a01;this[_0xce60c0(0xaae)](),VisuMZ['BattleCore'][_0xce60c0(0x4ca)]['call'](this),this[_0xce60c0(0xbb4)](),this[_0xce60c0(0x541)]();},Sprite_Battler[_0x4c6a01(0xc58)]['updateSelectionEffect']=function(){const _0x52e961=_0x4c6a01,_0x54ac06=this['mainSprite']();if(this[_0x52e961(0xbf3)][_0x52e961(0x50f)]()){this['_selectionEffectCount']++;if(Graphics['frameCount']%0x1e<0xf){if('NkvgK'==='fxrds'){if(!_0x421f64['isSceneBattle']())return;const _0x2ea21c=_0x343247['getLastPluginCommandInterpreter']();_0x2ea21c[_0x52e961(0x2b5)](_0x52e961(0x46c));}else _0x54ac06[_0x52e961(0xd5d)]([0xff,0xff,0xff,0x40]);}else _0x52e961(0x8b5)!==_0x52e961(0x8b5)?(this['_currentAngle']=_0x1bc4e6,this[_0x52e961(0x75b)]&&(this[_0x52e961(0x44e)]=0x0,this[_0x52e961(0xd61)]=0x0)):_0x54ac06[_0x52e961(0xd5d)]([0x0,0x0,0x0,0x0]);}else this['_selectionEffectCount']>0x0&&(this['_selectionEffectCount']=0x0,_0x54ac06[_0x52e961(0xd5d)]([0x0,0x0,0x0,0x0]));},Sprite_Battler['prototype'][_0x4c6a01(0x8a2)]=function(_0x55dfe4,_0x29cf93){const _0x5255db=_0x4c6a01,_0x42c5ea=_0x55dfe4-this[_0x5255db(0xb92)],_0x39eb16=_0x29cf93-this[_0x5255db(0xb2f)];this['_homeX']=_0x55dfe4,this['_homeY']=_0x29cf93,this[_0x5255db(0xafc)]-=_0x42c5ea,this['_offsetY']-=_0x39eb16,this['_targetOffsetX']-=_0x42c5ea,this[_0x5255db(0x951)]-=_0x39eb16,this[_0x5255db(0x242)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x5d6)]=function(_0x52565d,_0x111cbc,_0x15b4ba,_0x27c060){const _0x642761=_0x4c6a01;if(this['_targetHomeX']!==_0x52565d||this[_0x642761(0x8d8)]!==_0x111cbc){if(_0x642761(0xdee)!==_0x642761(0xdee))_0x529266+=_0x47f913[_0x642761(0x3fa)](_0xc8c8e6[_0x642761(0x3ac)]);else{this[_0x642761(0x67f)]=_0x52565d,this[_0x642761(0x8d8)]=_0x111cbc,this[_0x642761(0x67c)]=_0x15b4ba,this['_homeWholeDuration']=_0x15b4ba,this['_homeEasing']=_0x27c060;if(_0x15b4ba<=0x0){if(_0x642761(0x9b4)===_0x642761(0x3f8))return![];else this[_0x642761(0x6aa)]();}}}},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xaae)]=function(){const _0x4cf874=_0x4c6a01;if(this[_0x4cf874(0x67c)]<=0x0)return;const _0x579195=this[_0x4cf874(0x67c)],_0x295c89=this['_homeWholeDuration'],_0x3bab90=this['_homeEasing'];if(Imported[_0x4cf874(0xad0)]){if('rsyCY'!==_0x4cf874(0x49a))this[_0x4cf874(0xb92)]=this[_0x4cf874(0xa71)](this['_homeX'],this['_targetHomeX'],_0x579195,_0x295c89,_0x3bab90),this[_0x4cf874(0xb2f)]=this[_0x4cf874(0xa71)](this[_0x4cf874(0xb2f)],this[_0x4cf874(0x8d8)],_0x579195,_0x295c89,_0x3bab90);else return this[_0x4cf874(0x6b2)];}else{if(_0x4cf874(0xa64)===_0x4cf874(0x5d7)){if(this[_0x4cf874(0x985)][_0x4cf874(0x94c)]!==_0x3bff91)return this[_0x4cf874(0x985)][_0x4cf874(0x94c)];let _0x776d=_0x36858f['BattleCore']['Settings'][_0x4cf874(0x625)][_0x4cf874(0xbb7)];const _0x267a9c=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x19a7ac=this[_0x4cf874(0x1ec)]()[_0x4cf874(0x39f)](_0x16b2c1=>_0x16b2c1&&_0x16b2c1['note']['match'](_0x267a9c)?_0x2e3d4c(_0x3480b1['$1'])/0x64:0x0);return _0x776d=_0x19a7ac[_0x4cf874(0x211)]((_0x208f02,_0x223989)=>_0x208f02+_0x223989,_0x776d),this[_0x4cf874(0x985)][_0x4cf874(0x94c)]=_0x776d,this[_0x4cf874(0x985)][_0x4cf874(0x94c)][_0x4cf874(0x381)](0.01,0x1);}else this['_homeX']=(this[_0x4cf874(0xb92)]*(_0x579195-0x1)+this[_0x4cf874(0x67f)])/_0x579195,this[_0x4cf874(0xb2f)]=(this[_0x4cf874(0xb2f)]*(_0x579195-0x1)+this['_targetHomeY'])/_0x579195;}this[_0x4cf874(0x67c)]--;if(this['_homeDuration']<=0x0)this[_0x4cf874(0x6aa)]();},Sprite_Battler['prototype']['onHomeMoveEnd']=function(){const _0x2c216a=_0x4c6a01;this['_homeX']=this[_0x2c216a(0x67f)],this['_homeY']=this[_0x2c216a(0x8d8)];},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xbb4)]=function(){const _0x497d65=_0x4c6a01;this['_baseX']=this['x'],this[_0x497d65(0xcaa)]=this['y'],this[_0x497d65(0xb08)](),this[_0x497d65(0xd38)](),this['x']+=this[_0x497d65(0x65c)](),this['y']+=this['extraPositionY'](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x497d65(0x989)](this['x']),this['y']=Math[_0x497d65(0x989)](this['y']);},Sprite_Battler['prototype'][_0x4c6a01(0x65c)]=function(){let _0x1ea7de=0x0;return _0x1ea7de;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xb8f)]=function(){const _0x296454=_0x4c6a01;let _0x452b46=0x0;if(this[_0x296454(0xbf3)]&&!this[_0x296454(0xbf3)][_0x296454(0xb5c)]()){if(_0x296454(0x42c)!==_0x296454(0xad2))_0x452b46-=this[_0x296454(0x2e0)],_0x452b46-=this[_0x296454(0xc3c)];else{const _0x37ddba=_0x50756f['actor']();if(_0x37ddba&&_0x37ddba[_0x296454(0x72f)])_0x37ddba[_0x296454(0x72f)]()[_0x296454(0x6b8)]();_0x3871ff[_0x296454(0x5e5)][_0x296454(0x576)]['call'](this);}}return _0x452b46;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xb26)]=function(){const _0x1565d0=_0x4c6a01;let _0x233f0e=0x0;if(this[_0x1565d0(0xc1d)]&&this[_0x1565d0(0xacc)]!==Sprite_SvEnemy){if(_0x1565d0(0x8a7)===_0x1565d0(0x2b2))return!![];else{const _0x15cbaf=this[_0x1565d0(0xc1d)]['scale']['y'];_0x233f0e-=(_0x15cbaf-0x1)*this[_0x1565d0(0xb45)];}}return _0x233f0e;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xba4)]=function(){const _0xced387=_0x4c6a01,_0x2deda1=this[_0xced387(0xbf3)]&&this[_0xced387(0xbf3)][_0xced387(0x28a)]();this[_0xced387(0xa4e)]=(_0x2deda1?-0x1:0x1)*Math[_0xced387(0x3fa)](this[_0xced387(0x68b)]['x']);},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x96a)]=function(_0x20c55a,_0x4d5faf,_0x1c50d3){const _0x58ae6e=_0x4c6a01;if(!this[_0x58ae6e(0xdd4)]())return;if(this[_0x58ae6e(0x4fe)]===_0x20c55a)return;this[_0x58ae6e(0x4fe)]=_0x20c55a,this[_0x58ae6e(0x389)]=_0x4d5faf,this[_0x58ae6e(0x8ad)]=_0x4d5faf,this[_0x58ae6e(0xb4d)]=_0x1c50d3||_0x58ae6e(0x883);if(_0x4d5faf<=0x0)this[_0x58ae6e(0x2e0)]=_0x20c55a;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xb08)]=function(){const _0x513a7a=_0x4c6a01;if(this['_floatDuration']<=0x0)return;const _0xf17fe8=this[_0x513a7a(0x389)],_0x339df0=this['_floatWholeDuration'],_0x41b11f=this[_0x513a7a(0xb4d)];if(Imported[_0x513a7a(0xad0)])this[_0x513a7a(0x2e0)]=this[_0x513a7a(0xa71)](this['_floatHeight'],this[_0x513a7a(0x4fe)],_0xf17fe8,_0x339df0,_0x41b11f);else{if(_0x513a7a(0x928)!==_0x513a7a(0x928)){if(_0xf62656['battleCameraData']()[_0x513a7a(0x33b)]>0x0)return!![];this[_0x513a7a(0x893)]='';}else this[_0x513a7a(0x2e0)]=(this[_0x513a7a(0x2e0)]*(_0xf17fe8-0x1)+this['_targetFloatHeight'])/_0xf17fe8;}this[_0x513a7a(0x389)]--;if(this[_0x513a7a(0x389)]<=0x0)this[_0x513a7a(0x2cb)]();},Sprite_Battler['prototype'][_0x4c6a01(0x2cb)]=function(){const _0x481657=_0x4c6a01;this[_0x481657(0x2e0)]=this[_0x481657(0x4fe)];},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xabb)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x34b)]=function(_0x1e3c0c,_0x49c5ba){const _0x7b8086=_0x4c6a01;if(!this[_0x7b8086(0xdd4)]())return;if(_0x49c5ba<=0x0)return;this[_0x7b8086(0xb3c)]=_0x1e3c0c,this['_jumpDuration']=_0x49c5ba,this[_0x7b8086(0x6ae)]=_0x49c5ba;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xd38)]=function(){const _0x316352=_0x4c6a01;if(this['_jumpDuration']<=0x0)return;const _0x181ea9=this['_jumpWholeDuration']-this[_0x316352(0xc88)],_0x24229a=this[_0x316352(0x6ae)]/0x2,_0x3712bb=this['_jumpMaxHeight'],_0x3634d5=-_0x3712bb/Math['pow'](_0x24229a,0x2);this[_0x316352(0xc3c)]=_0x3634d5*Math['pow'](_0x181ea9-_0x24229a,0x2)+_0x3712bb,this[_0x316352(0xc88)]--;if(this[_0x316352(0xc88)]<=0x0)return this[_0x316352(0xbc2)]();},Sprite_Battler['prototype']['onJumpEnd']=function(){const _0x3acd91=_0x4c6a01;this[_0x3acd91(0xc3c)]=0x0;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xc59)]=function(){const _0x233b35=_0x4c6a01;return this[_0x233b35(0xc88)]>0x0;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xc66)]=function(_0xe91ab4,_0x522b23,_0x56e887){const _0x3a480a=_0x4c6a01;if(this[_0x3a480a(0xaf0)]===_0xe91ab4)return;this[_0x3a480a(0xaf0)]=_0xe91ab4,this['_opacityDuration']=_0x522b23,this[_0x3a480a(0xd41)]=_0x522b23,this[_0x3a480a(0x789)]=_0x56e887||_0x3a480a(0x883);if(_0x522b23<=0x0)this[_0x3a480a(0x973)]=_0xe91ab4;},Sprite_Battler[_0x4c6a01(0xc58)]['updateOpacity']=function(){const _0x15df43=_0x4c6a01;if(this['constructor']['name']==='Sprite_SvEnemy')return;if(this[_0x15df43(0x3db)]<=0x0)return;const _0x58a6ae=this[_0x15df43(0x3db)],_0x21c610=this['_opacityWholeDuration'],_0x5d8081=this[_0x15df43(0x789)];if(Imported['VisuMZ_0_CoreEngine'])this['opacity']=this[_0x15df43(0xa71)](this[_0x15df43(0x973)],this['_targetOpacity'],_0x58a6ae,_0x21c610,_0x5d8081);else{if(_0x15df43(0x918)===_0x15df43(0x918))this[_0x15df43(0x973)]=(this['opacity']*(_0x58a6ae-0x1)+this[_0x15df43(0xaf0)])/_0x58a6ae;else{this[_0x15df43(0x4a8)](),this[_0x15df43(0x425)](),this[_0x15df43(0x8b9)](),this['updateFlip'](),_0x27b510['BattleCore']['Sprite_Battler_updateMain'][_0x15df43(0x3a4)](this),this[_0x15df43(0x88f)](),this[_0x15df43(0xbca)]();if(this[_0x15df43(0xacc)]===_0x3cd2fd)this['updateShadow']();}}this[_0x15df43(0x3db)]--;if(this['_opacityDuration']<=0x0)this[_0x15df43(0xd57)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xd57)]=function(){const _0x5a9279=_0x4c6a01;this[_0x5a9279(0x973)]=this[_0x5a9279(0xaf0)];},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x3bd)]=function(){const _0x27b8e0=_0x4c6a01;return this[_0x27b8e0(0x3db)]>0x0;},Sprite_Battler[_0x4c6a01(0xc58)]['updateShadow']=function(){const _0x28db5b=_0x4c6a01;this[_0x28db5b(0x230)][_0x28db5b(0x22f)]=this[_0x28db5b(0xbf3)][_0x28db5b(0xdc1)](),this[_0x28db5b(0x5d2)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x5d2)]=function(){const _0x417270=_0x4c6a01;if(!this[_0x417270(0x230)])return;this[_0x417270(0x230)]['y']=this[_0x417270(0xcaa)]-this['y']-0x2;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x4b1)]=function(){const _0xdef44=_0x4c6a01;if(!this[_0xdef44(0xbf3)])return;this[_0xdef44(0x77b)]=this[_0xdef44(0xbf3)]['battlerShadowScaleX'](),this[_0xdef44(0xade)]=this[_0xdef44(0xbf3)]['battlerShadowScaleY']();},Game_BattlerBase[_0x4c6a01(0xc58)]['battlerShadowScaleX']=function(){const _0x31ce0f=_0x4c6a01,_0x52e4f8=this['isActor']()?this[_0x31ce0f(0x73e)]():this[_0x31ce0f(0x962)]();if(_0x52e4f8){if(_0x31ce0f(0x9ab)!==_0x31ce0f(0x9ab)){if(!_0x53a847[_0x31ce0f(0x503)]())return;if(!_0x2a0f39[_0x31ce0f(0x901)])return;_0x4d403f[_0x31ce0f(0xc46)](_0x180924,_0x59f291);const _0x1cc388=_0x45b4aa['type'][_0x31ce0f(0x613)]()['trim']();_0x1cca63[_0x31ce0f(0x4c1)][_0x31ce0f(0xad3)](_0x1cc388);const _0x4d205f=_0x4b2e84['getLastPluginCommandInterpreter']();_0x4d205f&&_0x3aef01[_0x31ce0f(0xb72)]&&_0x4d205f[_0x31ce0f(0x2b5)](_0x31ce0f(0x3a9));}else{const _0x25b5db=_0x52e4f8[_0x31ce0f(0x407)];if(_0x25b5db['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x25b5db[_0x31ce0f(0x996)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}}return 0x1;},Game_BattlerBase[_0x4c6a01(0xc58)]['battlerShadowScaleY']=function(){const _0x1b7915=_0x4c6a01,_0x5a4c2d=this['isActor']()?this['actor']():this[_0x1b7915(0x962)]();if(_0x5a4c2d){if(_0x1b7915(0xaab)!=='WDZVy'){const _0x240f35=_0x5a4c2d[_0x1b7915(0x407)];if(_0x240f35[_0x1b7915(0x996)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i)){if('zhQes'===_0x1b7915(0xd64))return Number(RegExp['$1'])*0.01;else _0x14ae8c[_0x1b7915(0x5e5)]['Settings'][_0x1b7915(0x9ad)]['HomePosJS']?_0x3ce953['BattleCore'][_0x1b7915(0x32d)][_0x1b7915(0x9ad)][_0x1b7915(0x354)][_0x1b7915(0x3a4)](this,_0x1f6ab4):_0x221c2f[_0x1b7915(0x5e5)][_0x1b7915(0x8f6)][_0x1b7915(0x3a4)](this,_0x3fe19d);}else{if(_0x240f35[_0x1b7915(0x996)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if(_0x1b7915(0x45a)!==_0x1b7915(0x45a)){var _0x3e4cf8,_0x3b8f56,_0x2041bc;for(_0x2041bc=_0x1d6e88[_0x1b7915(0x991)]-0x1;_0x2041bc>0x0;_0x2041bc--){_0x3e4cf8=_0x177863[_0x1b7915(0x989)](_0xd5afbf[_0x1b7915(0x8f7)]()*(_0x2041bc+0x1)),_0x3b8f56=_0x57301d[_0x2041bc],_0x330d8c[_0x2041bc]=_0x46bef3[_0x3e4cf8],_0x5ac122[_0x3e4cf8]=_0x3b8f56;}return _0x224894;}else return Number(RegExp['$1'])||0x0;}}}else{const _0x1ba64d=_0x2b68f1['BattleCore'][_0x1b7915(0x32d)][_0x1b7915(0x9ad)],_0x43afc4=this[_0x1b7915(0xbf3)]&&this[_0x1b7915(0xbf3)][_0x1b7915(0x966)]()?0x1:-0x1,_0x3590b9=this['_baseX']-this[_0x1b7915(0xb92)]+_0x43afc4*_0x1ba64d[_0x1b7915(0xa40)],_0x24fd79=this['_baseY']-this[_0x1b7915(0xb2f)]+_0x43afc4*_0x1ba64d[_0x1b7915(0xb2b)],_0x9d9a9b=_0x1ba64d[_0x1b7915(0x708)];this['startMove'](_0x3590b9,_0x24fd79,_0x9d9a9b);}}return 0x1;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x4a8)]=function(){const _0x37fe86=_0x4c6a01;if(this[_0x37fe86(0xacc)]===Sprite_SvEnemy)return;this[_0x37fe86(0xbc0)](),this[_0x37fe86(0x3e2)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x3e2)]=function(){const _0x12abf6=_0x4c6a01,_0x3605da=this[_0x12abf6(0xc1d)];_0x3605da&&(_0x3605da[_0x12abf6(0x68b)]['x']=this[_0x12abf6(0x75d)](),_0x3605da['scale']['y']=this[_0x12abf6(0xe00)]());},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x75d)]=function(){const _0x183ad0=_0x4c6a01;let _0x323629=0x1;return _0x323629*=this[_0x183ad0(0xa4e)],_0x323629*=this[_0x183ad0(0xc1c)],_0x323629;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xe00)]=function(){const _0x368c8f=_0x4c6a01;return 0x1*this[_0x368c8f(0x7f8)];},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x2e1)]=function(){const _0x390384=_0x4c6a01;return this[_0x390384(0xe09)]*this[_0x390384(0x75d)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x8cd)]=function(){const _0x4531c8=_0x4c6a01;return this['height']*this[_0x4531c8(0xe00)]();},Sprite_Battler[_0x4c6a01(0xc58)]['startGrow']=function(_0x50a0d8,_0x17c71a,_0x1db203,_0x4178da){const _0x447d85=_0x4c6a01;if(!this[_0x447d85(0xdd4)]())return;if(!this[_0x447d85(0xc1d)])return;if(this['_targetGrowX']===_0x50a0d8&&this[_0x447d85(0x335)]===_0x17c71a)return;this[_0x447d85(0x738)]=_0x50a0d8,this[_0x447d85(0x335)]=_0x17c71a,this[_0x447d85(0x826)]=_0x1db203,this[_0x447d85(0xa47)]=_0x1db203,this['_growEasing']=_0x4178da||_0x447d85(0x883),_0x1db203<=0x0&&(_0x447d85(0xc04)===_0x447d85(0xc04)?(this['_growX']=this[_0x447d85(0x738)],this[_0x447d85(0x7f8)]=this['_targetGrowY']):this[_0x447d85(0x72f)]()&&this[_0x447d85(0x72f)]()[_0x447d85(0xbb5)]());},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xbc0)]=function(){const _0x19752b=_0x4c6a01;if(this[_0x19752b(0x826)]<=0x0)return;if(!this[_0x19752b(0xc1d)])return;const _0x262ad4=this[_0x19752b(0x826)],_0x5ad222=this[_0x19752b(0xa47)],_0x12e259=this[_0x19752b(0xb5a)];Imported[_0x19752b(0xad0)]?(this[_0x19752b(0xc1c)]=this[_0x19752b(0xa71)](this[_0x19752b(0xc1c)],this[_0x19752b(0x738)],_0x262ad4,_0x5ad222,_0x12e259),this[_0x19752b(0x7f8)]=this[_0x19752b(0xa71)](this[_0x19752b(0x7f8)],this[_0x19752b(0x335)],_0x262ad4,_0x5ad222,_0x12e259)):(this[_0x19752b(0xc1c)]=(this[_0x19752b(0xc1c)]*(_0x262ad4-0x1)+this[_0x19752b(0x738)])/_0x262ad4,this[_0x19752b(0x7f8)]=(this[_0x19752b(0x7f8)]*(_0x262ad4-0x1)+this[_0x19752b(0x335)])/_0x262ad4);this[_0x19752b(0x826)]--;if(this[_0x19752b(0x826)]<=0x0)this[_0x19752b(0xd65)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xd65)]=function(){const _0x55cdc5=_0x4c6a01;this[_0x55cdc5(0xc1c)]=this[_0x55cdc5(0x738)],this[_0x55cdc5(0x7f8)]=this['_targetGrowY'];},Sprite_Battler['prototype'][_0x4c6a01(0x681)]=function(){const _0xa994e7=_0x4c6a01;return this[_0xa994e7(0x826)]>0x0;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xbcc)]=function(_0x3fa2c7,_0x555a4e,_0x5ac74b,_0x5a90a7){const _0x31b47c=_0x4c6a01;if(!this[_0x31b47c(0xdd4)]())return;if(!this['_distortionSprite'])return;if(this[_0x31b47c(0x248)]===_0x3fa2c7&&this[_0x31b47c(0xa0a)]===_0x555a4e)return;this['_targetSkewX']=_0x3fa2c7,this['_targetSkewY']=_0x555a4e,this[_0x31b47c(0x7a1)]=_0x5ac74b,this[_0x31b47c(0x636)]=_0x5ac74b,this['_skewEasing']=_0x5a90a7||_0x31b47c(0x883),_0x5ac74b<=0x0&&(this[_0x31b47c(0xc1d)][_0x31b47c(0x6c9)]['x']=this[_0x31b47c(0x248)],this[_0x31b47c(0xc1d)]['skew']['y']=this[_0x31b47c(0xa0a)]);},Sprite_Battler[_0x4c6a01(0xc58)]['updateSkew']=function(){const _0x20384b=_0x4c6a01;if(this['_skewDuration']<=0x0)return;if(!this[_0x20384b(0xc1d)])return;const _0x11f4cc=this[_0x20384b(0x7a1)],_0x3f9a48=this[_0x20384b(0x636)],_0x5422d0=this[_0x20384b(0x600)],_0x397ef0=this[_0x20384b(0xc1d)];if(Imported[_0x20384b(0xad0)]){if(_0x20384b(0xca8)!=='Lmxwr')_0x397ef0['skew']['x']=this['applyEasing'](_0x397ef0[_0x20384b(0x6c9)]['x'],this[_0x20384b(0x248)],_0x11f4cc,_0x3f9a48,_0x5422d0),_0x397ef0[_0x20384b(0x6c9)]['y']=this[_0x20384b(0xa71)](_0x397ef0[_0x20384b(0x6c9)]['y'],this[_0x20384b(0xa0a)],_0x11f4cc,_0x3f9a48,_0x5422d0);else{if(!this['_battler'])return;this['_shadowScaleX']=this[_0x20384b(0xbf3)][_0x20384b(0x41d)](),this[_0x20384b(0xade)]=this['_battler'][_0x20384b(0xd76)]();}}else _0x20384b(0xa02)!==_0x20384b(0xaa4)?(_0x397ef0[_0x20384b(0x6c9)]['x']=(_0x397ef0['skew']['x']*(_0x11f4cc-0x1)+this[_0x20384b(0x248)])/_0x11f4cc,_0x397ef0[_0x20384b(0x6c9)]['y']=(_0x397ef0['skew']['y']*(_0x11f4cc-0x1)+this[_0x20384b(0xa0a)])/_0x11f4cc):this['autoSelectPriority']();this[_0x20384b(0x7a1)]--;if(this[_0x20384b(0x7a1)]<=0x0)this[_0x20384b(0xde7)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xde7)]=function(){const _0x42898e=_0x4c6a01;this[_0x42898e(0xc1d)]['skew']['x']=this[_0x42898e(0x248)],this[_0x42898e(0xc1d)]['skew']['y']=this[_0x42898e(0xa0a)];},Sprite_Battler[_0x4c6a01(0xc58)]['isSkewing']=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x4c6a01(0xc58)]['startSpin']=function(_0x2efa7d,_0x3747ca,_0x43b4b2,_0x47cbc2){const _0xaea692=_0x4c6a01;if(!this[_0xaea692(0xdd4)]())return;if(!this[_0xaea692(0xc1d)])return;if(this['_targetAngle']===_0x2efa7d)return;this[_0xaea692(0x44e)]=_0x2efa7d,this[_0xaea692(0x219)]=_0x3747ca,this['_angleWholeDuration']=_0x3747ca,this['_angleEasing']=_0x43b4b2||_0xaea692(0x883),this['_angleRevertOnFinish']=_0x47cbc2,this[_0xaea692(0x75b)]===undefined&&(_0xaea692(0xa06)==='GyLro'?this[_0xaea692(0x75b)]=!![]:(_0x4907d1=_0x12f874*this[_0xaea692(0x9a1)]['damageRate'],_0x53895a+=this['_multipliers'][_0xaea692(0x8c9)]*(_0x5bad42>=0x0?0x1:-0x1),_0x1ddf1b=this[_0xaea692(0xd53)](_0xaea692(0x638),_0x1a0d4d,_0x308ee6,![]),_0x276f7a=this[_0xaea692(0x795)](_0x3e7814),_0x311197=_0x39d17b[_0xaea692(0x9c7)](_0x17ce78),this[_0xaea692(0x906)]=_0x4f316e,this[_0xaea692(0x5b9)]=this[_0xaea692(0x5b9)]||0x0,this[_0xaea692(0x5b9)]+=_0x49f254,_0x18e824[_0xaea692(0x5e5)]['Game_Action_executeDamage'][_0xaea692(0x3a4)](this,_0x2f8deb,_0x2d21c5),this[_0xaea692(0xd53)](_0xaea692(0xa5e),_0x422977,_0xa23aa9,!![]))),_0x3747ca<=0x0&&(this[_0xaea692(0xd61)]=_0x2efa7d,this[_0xaea692(0x75b)]&&(this[_0xaea692(0x44e)]=0x0,this[_0xaea692(0xd61)]=0x0));},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x8b9)]=function(){const _0x53add9=_0x4c6a01;this[_0x53add9(0x4f1)](),this[_0x53add9(0xcc7)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x4f1)]=function(){const _0x4ca87c=_0x4c6a01;if(this['_angleDuration']<=0x0)return;const _0x385b81=this[_0x4ca87c(0x219)],_0x5f57b8=this[_0x4ca87c(0x21f)],_0x464dd0=this[_0x4ca87c(0xa25)];Imported['VisuMZ_0_CoreEngine']?this['_currentAngle']=this[_0x4ca87c(0xa71)](this[_0x4ca87c(0xd61)],this['_targetAngle'],_0x385b81,_0x5f57b8,_0x464dd0):this[_0x4ca87c(0xd61)]=(this[_0x4ca87c(0xd61)]*(_0x385b81-0x1)+this[_0x4ca87c(0x44e)])/_0x385b81;this[_0x4ca87c(0x219)]--;if(this[_0x4ca87c(0x219)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x9e7)]=function(){const _0x3c86c2=_0x4c6a01;this[_0x3c86c2(0xd61)]=this[_0x3c86c2(0x44e)],this[_0x3c86c2(0x75b)]&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x7b2)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xcc7)]=function(){const _0x20c985=_0x4c6a01;if(!this[_0x20c985(0xc1d)])return;const _0xaef484=this[_0x20c985(0xd61)],_0x55e8c7=this[_0x20c985(0x68b)]['x'],_0x1d2e91=this[_0x20c985(0xbf3)][_0x20c985(0x966)]()?-0x1:0x1;this['_distortionSprite']['angle']=_0xaef484*_0x55e8c7*_0x1d2e91;const _0x523124=this[_0x20c985(0xc1d)][_0x20c985(0x68b)]['y'];this['_distortionSprite']['y']=this[_0x20c985(0xb45)]*-0.5*(0x2-_0x523124),this[_0x20c985(0xc1d)]['y']=Math[_0x20c985(0xa32)](this['_distortionSprite']['y']);const _0x268836=[this['_mainSprite'],this['_svBattlerSprite'],this[_0x20c985(0x937)]];for(const _0x117e89 of _0x268836){if(!_0x117e89)continue;_0x117e89['y']=this[_0x20c985(0xb45)]*0.5;}this[_0x20c985(0x230)]&&(this['_shadowScaleX']=this[_0x20c985(0x77b)]??0x1,this[_0x20c985(0xade)]=this[_0x20c985(0xade)]??0x1,this['_shadowSprite'][_0x20c985(0x68b)]['x']=this['_distortionSprite'][_0x20c985(0x68b)]['x']*this[_0x20c985(0x77b)],this[_0x20c985(0x230)][_0x20c985(0x68b)]['y']=this[_0x20c985(0xc1d)][_0x20c985(0x68b)]['y']*this[_0x20c985(0xade)]);},VisuMZ[_0x4c6a01(0x5e5)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x4c6a01(0xc58)]['createStateSprite'],Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x239)]=function(){const _0x59e4ab=_0x4c6a01;VisuMZ[_0x59e4ab(0x5e5)]['Sprite_Actor_createStateSprite']['call'](this),VisuMZ[_0x59e4ab(0x5e5)][_0x59e4ab(0x32d)]['HpGauge'][_0x59e4ab(0x694)]&&('nNGxf'===_0x59e4ab(0x3be)?this['push'](_0x59e4ab(0x418),_0xd855c6,_0x38083a):this[_0x59e4ab(0x371)]());},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x46f)]=Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x33e)],Sprite_Enemy[_0x4c6a01(0xc58)]['createStateIconSprite']=function(){const _0x2d8b56=_0x4c6a01;VisuMZ['BattleCore']['Settings'][_0x2d8b56(0x64f)][_0x2d8b56(0xcd2)]&&('ZPRgw'===_0x2d8b56(0xc86)?(_0x4d5588[_0x2d8b56(0x22b)]||_0x56ae57[_0x2d8b56(0x32b)])&&_0x4f2703['snapForBackground']():this['createHpGaugeSprite']()),VisuMZ[_0x2d8b56(0x5e5)][_0x2d8b56(0x46f)][_0x2d8b56(0x3a4)](this);},Sprite_Battler[_0x4c6a01(0xc58)]['createHpGaugeSprite']=function(){const _0x18217f=_0x4c6a01;if(!ConfigManager[_0x18217f(0xc47)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x122c7e=VisuMZ[_0x18217f(0x5e5)][_0x18217f(0x32d)]['HpGauge'],_0x44c017=new Sprite_HpGauge();_0x44c017[_0x18217f(0x434)]['x']=_0x122c7e['AnchorX'],_0x44c017[_0x18217f(0x434)]['y']=_0x122c7e[_0x18217f(0x6a9)],_0x44c017[_0x18217f(0x68b)]['x']=_0x44c017[_0x18217f(0x68b)]['y']=_0x122c7e['Scale'],this['_hpGaugeSprite']=_0x44c017,this[_0x18217f(0x279)](this[_0x18217f(0x487)]),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager[_0x18217f(0x40f)](this[_0x18217f(0x487)]);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x2e8)]=Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xc29)],Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xc29)]=function(_0x31a44f){const _0x43decb=_0x4c6a01,_0x295ac4=this[_0x43decb(0xbf3)];VisuMZ['BattleCore'][_0x43decb(0x2e8)][_0x43decb(0x3a4)](this,_0x31a44f),this[_0x43decb(0x83e)](_0x31a44f);if(_0x295ac4!==_0x31a44f)this['updateShadowScale']();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x83e)]=function(_0x5a3877){const _0x2906bd=_0x4c6a01;if(!_0x5a3877)return;if(!this[_0x2906bd(0x487)])return;if(_0x5a3877[_0x2906bd(0x966)]()){}else{if(_0x5a3877[_0x2906bd(0xb37)]()){if(this[_0x2906bd(0xacc)]===Sprite_SvEnemy&&!_0x5a3877[_0x2906bd(0xdc1)]())return;}}this[_0x2906bd(0x487)][_0x2906bd(0xb68)](_0x5a3877,'hp');},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x2d9)]=function(){const _0xa62f4=_0x4c6a01;return this[_0xa62f4(0xbf3)]&&this['_battler'][_0xa62f4(0x2d9)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x753)]=function(){const _0x5e48ca=_0x4c6a01,_0x36d8ea=this['_mainSprite'][_0x5e48ca(0x593)];if(!_0x36d8ea)return;const _0x4b2384=_0x36d8ea[_0x5e48ca(0xe09)];let _0x21e932=_0x36d8ea[_0x5e48ca(0xb45)];if(this[_0x5e48ca(0xbf3)]['isDead']()){if('xaTlm'!==_0x5e48ca(0xc5e)){if(_0x367ec3[_0x5e48ca(0xc6b)]())this[_0x5e48ca(0x52f)]();else _0xc7368['isTpb']()&&_0x4cf883['BattleCore']['Scene_Battle_startPartyCommandSelection']['call'](this);}else{if(this['_frame'])_0x21e932=Math[_0x5e48ca(0xa5c)](0x0,this['_frame'][_0x5e48ca(0xb45)]-0x4);}}this[_0x5e48ca(0x431)][_0x5e48ca(0x8b4)](0x0,0x0,_0x4b2384,_0x21e932),this[_0x5e48ca(0x8b4)](0x0,0x0,_0x4b2384,_0x21e932);},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x88f)]=function(){const _0x41994d=_0x4c6a01;if(!this['_battler'])return;if(!this[_0x41994d(0x487)])return;const _0x30a052=VisuMZ[_0x41994d(0x5e5)][_0x41994d(0x32d)][_0x41994d(0x64f)],_0x57fc68=this[_0x41994d(0x487)];_0x57fc68[_0x41994d(0x22f)]=this['isVisualHpGaugeDisplayed']();const _0x2fd302=_0x30a052[_0x41994d(0xe10)],_0x260b54=_0x30a052[_0x41994d(0x6f9)];_0x57fc68['x']=_0x2fd302,_0x57fc68['x']+=this['_battler'][_0x41994d(0x655)](),_0x57fc68['y']=-this[_0x41994d(0xb45)]+_0x260b54,_0x57fc68['y']+=this[_0x41994d(0xbf3)][_0x41994d(0x510)](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager[_0x41994d(0x4c1)][_0x41994d(0x666)]&&(_0x57fc68['x']+=this['x'],_0x57fc68['y']+=this['y']);},Sprite_Battler[_0x4c6a01(0xc58)]['isVisualHpGaugeDisplayed']=function(){const _0x14bb16=_0x4c6a01;if(!this['_battler'])return![];if(this[_0x14bb16(0xbf3)][_0x14bb16(0x966)]())return!![];if(this['_battler'][_0x14bb16(0xb69)]())return![];if(this[_0x14bb16(0x973)]<=0x0)return![];const _0x20b1f6=this['_battler']['enemy']()[_0x14bb16(0x407)];if(_0x20b1f6[_0x14bb16(0x996)](/<SHOW HP GAUGE>/i))return!![];if(_0x20b1f6[_0x14bb16(0x996)](/<HIDE HP GAUGE>/i))return![];const _0x557538=VisuMZ[_0x14bb16(0x5e5)][_0x14bb16(0x32d)][_0x14bb16(0x64f)];if(_0x557538[_0x14bb16(0x5a3)]){if(_0x557538[_0x14bb16(0x771)]&&BattleManager[_0x14bb16(0x251)]())return!![];if(this['_battler'][_0x14bb16(0xb9a)])return![];return this['_battler'][_0x14bb16(0x320)]();}return!![];},VisuMZ['BattleCore']['Sprite_Battler_isMoving']=Sprite_Battler['prototype'][_0x4c6a01(0x5a1)],Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x5a1)]=function(){const _0xfb6f58=_0x4c6a01;if(!this[_0xfb6f58(0xbf3)])return![];if(this[_0xfb6f58(0x67c)]>0x0)return!![];return VisuMZ[_0xfb6f58(0x5e5)][_0xfb6f58(0x877)][_0xfb6f58(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xa3d)]=Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x36f)],Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x36f)]=function(_0x3bf43d,_0x49a1e5,_0x3addbe){const _0x4da5f1=_0x4c6a01;if(this[_0x4da5f1(0xdd4)]()){if(_0x4da5f1(0x6ab)==='KrBvM')VisuMZ[_0x4da5f1(0x5e5)]['Sprite_Battler_startMove'][_0x4da5f1(0x3a4)](this,_0x3bf43d,_0x49a1e5,_0x3addbe);else{if(!this['isAutoBattleCommandAdded']())return;const _0xa61c1a=this[_0x4da5f1(0x3fe)](),_0x576ad9=_0xbbb0ce['BattleCore']['Settings'][_0x4da5f1(0x921)][_0x4da5f1(0xcf9)],_0x19e200=_0xa61c1a==='text'?_0xe9b828[_0x4da5f1(0x654)]:_0x4da5f1(0x751)['format'](_0x576ad9,_0x47a323['autoBattle']),_0xbb3630=this['isAutoBattleCommandEnabled']();this[_0x4da5f1(0x39b)](_0x19e200,_0x4da5f1(0x654),_0xbb3630);}}},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xdd4)]=function(){const _0x9c2b05=_0x4c6a01;if(this['_battler']&&this['_battler'][_0x9c2b05(0xb44)]())return![];if(this[_0x9c2b05(0xbf3)]&&!this[_0x9c2b05(0xbf3)][_0x9c2b05(0x314)]())return![];return $gameSystem[_0x9c2b05(0x7a2)]();},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x3ad)]=function(){},Sprite_Battler['prototype'][_0x4c6a01(0x6b8)]=function(){const _0x2d8e9d=_0x4c6a01;this[_0x2d8e9d(0x36f)](0x0,0x0,0xc);},Sprite_Battler[_0x4c6a01(0xc58)]['retreat']=function(){},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xcf8)]=function(){const _0x1ad3e5=_0x4c6a01,_0x310043=VisuMZ[_0x1ad3e5(0x5e5)][_0x1ad3e5(0x32d)][_0x1ad3e5(0x9ad)],_0x3ea872=this[_0x1ad3e5(0xbf3)]&&this[_0x1ad3e5(0xbf3)]['isActor']()?0x1:-0x1,_0x4de529=this[_0x1ad3e5(0x545)]-this[_0x1ad3e5(0xb92)]+_0x3ea872*_0x310043['FlinchDistanceX'],_0x480d86=this[_0x1ad3e5(0xcaa)]-this['_homeY']+_0x3ea872*_0x310043['FlinchDistanceY'],_0x15d522=_0x310043[_0x1ad3e5(0x708)];this['startMove'](_0x4de529,_0x480d86,_0x15d522);},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0x8ae)]=function(_0x278556,_0x825dce){const _0x47e944=_0x4c6a01,_0x2fe685=VisuMZ[_0x47e944(0x5e5)]['Settings'][_0x47e944(0x9ad)];this[_0x47e944(0xc1b)]=Math['ceil']((_0x2fe685[_0x47e944(0x40a)]??0x18)*_0x825dce),this['_shakeFlinchPower']=Math[_0x47e944(0xa5c)](this[_0x47e944(0x413)],_0x278556);},Sprite_Battler[_0x4c6a01(0xc58)][_0x4c6a01(0xbca)]=function(){const _0x2fb6b8=_0x4c6a01,_0x5620d9=VisuMZ[_0x2fb6b8(0x5e5)][_0x2fb6b8(0x32d)][_0x2fb6b8(0x9ad)];if(!(_0x5620d9['ShakeFlinch']??![]))return;if(this[_0x2fb6b8(0xc1b)]>0x0){const _0x3c3f12=this[_0x2fb6b8(0xc1b)];this[_0x2fb6b8(0x413)]=this[_0x2fb6b8(0x413)]*(_0x3c3f12-0x1)/_0x3c3f12,this[_0x2fb6b8(0xc1b)]--,this[_0x2fb6b8(0xc1b)]<=0x0&&(this[_0x2fb6b8(0x413)]=0x0);}if(this[_0x2fb6b8(0x413)]>0x0){if(_0x2fb6b8(0x848)!=='HHrOp'){this[_0x2fb6b8(0x431)]['x']=Math[_0x2fb6b8(0xb10)](this[_0x2fb6b8(0x413)])*(Math[_0x2fb6b8(0x8f7)]()<0.5?-0x1:0x1);if(this[_0x2fb6b8(0xcaa)]!==this['y']){if(_0x2fb6b8(0xbae)!==_0x2fb6b8(0x3f5))this[_0x2fb6b8(0x431)]['y']=this[_0x2fb6b8(0xb45)]*0.5,this[_0x2fb6b8(0x431)]['y']+=Math[_0x2fb6b8(0xb10)](this[_0x2fb6b8(0x413)])*(Math[_0x2fb6b8(0x8f7)]()<0.5?-0x1:0x1);else{if(!_0x36ae32['isPlaytest']())return;_0x1b1d83[_0x2fb6b8(0x690)](this['_methods'][_0x2fb6b8(0x39f)](_0x140acf=>_0x140acf[_0x2fb6b8(0x2c7)])[_0x2fb6b8(0xc3b)]('\x0a'));}}}else _0x25abe1[_0x2fb6b8(0xd46)]();}else this['_mainSprite']['x']=0x0,this[_0x2fb6b8(0x431)]['y']=this[_0x2fb6b8(0xb45)]*0.5;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xbb3)]=Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xd4b)],Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xd4b)]=function(){const _0x4c23df=_0x4c6a01;VisuMZ[_0x4c23df(0x5e5)][_0x4c23df(0xbb3)][_0x4c23df(0x3a4)](this),this[_0x4c23df(0xc00)]();},Sprite_Actor[_0x4c6a01(0xc58)]['mainSprite']=function(){const _0x489caa=_0x4c6a01;return this[_0x489caa(0xc1d)]||this[_0x489caa(0x431)]||this;},VisuMZ[_0x4c6a01(0x5e5)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xb1b)],Sprite_Actor[_0x4c6a01(0xc58)]['moveToStartPosition']=function(){},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x8ec)]=function(_0x46bed5){const _0x4d88e1=_0x4c6a01;if(SceneManager[_0x4d88e1(0x507)]())return;if(!_0x46bed5)return;if(!_0x46bed5['canMove']())return;VisuMZ[_0x4d88e1(0x5e5)]['Sprite_Actor_moveToStartPosition'][_0x4d88e1(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x8f6)]=Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x815)],Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x815)]=function(_0xfe6fbe){const _0x24543b=_0x4c6a01;VisuMZ[_0x24543b(0x5e5)][_0x24543b(0x32d)][_0x24543b(0x9ad)][_0x24543b(0x354)]?VisuMZ[_0x24543b(0x5e5)][_0x24543b(0x32d)][_0x24543b(0x9ad)]['HomePosJS'][_0x24543b(0x3a4)](this,_0xfe6fbe):VisuMZ[_0x24543b(0x5e5)]['Sprite_Actor_setActorHome'][_0x24543b(0x3a4)](this,_0xfe6fbe);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x477)]=Sprite_Actor['prototype']['setBattler'],Sprite_Actor[_0x4c6a01(0xc58)]['setBattler']=function(_0x26dc0a){const _0x43e016=_0x4c6a01;VisuMZ[_0x43e016(0x5e5)][_0x43e016(0x477)]['call'](this,_0x26dc0a),this[_0x43e016(0x25f)](_0x26dc0a);},Sprite_Actor[_0x4c6a01(0xc58)]['setBattlerBattleCore']=function(_0x414cae){const _0x5545c0=_0x4c6a01;if(!_0x414cae)return;if(!this[_0x5545c0(0x431)])return;this['_mainSprite'][_0x5545c0(0x434)]['x']=this['_actor'][_0x5545c0(0xaaf)](),this[_0x5545c0(0x431)][_0x5545c0(0x434)]['y']=this[_0x5545c0(0x2fc)][_0x5545c0(0x706)](),this[_0x5545c0(0xa46)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xbfd)]=Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)],Sprite_Actor['prototype'][_0x4c6a01(0x32e)]=function(){const _0x596f5d=_0x4c6a01;VisuMZ[_0x596f5d(0x5e5)][_0x596f5d(0xbfd)][_0x596f5d(0x3a4)](this);if(this['_actor']){if(_0x596f5d(0x92c)==='UaBVG')this[_0x596f5d(0x220)](),this[_0x596f5d(0xa98)]();else{const _0x57d479=this[_0x596f5d(0x3fe)](),_0x1604b5=_0x473f5d['BattleCore'][_0x596f5d(0x32d)]['PartyCmd']['CmdIconAutoBattle'],_0x249579=_0x57d479===_0x596f5d(0x2b8)?_0x7dcaf1[_0x596f5d(0x654)]:_0x596f5d(0x751)[_0x596f5d(0x511)](_0x1604b5,_0x36af03['autoBattle']),_0x4219bb=this[_0x596f5d(0x65f)]();this[_0x596f5d(0x39b)](_0x249579,_0x596f5d(0x654),_0x4219bb);}}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x508)]=Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x40b)],Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x40b)]=function(){const _0x3fb983=_0x4c6a01;VisuMZ[_0x3fb983(0x5e5)][_0x3fb983(0x508)][_0x3fb983(0x3a4)](this);if(this[_0x3fb983(0x431)]&&this['_mainSprite']['bitmap']&&this[_0x3fb983(0xbf3)]){if(this['_mainSprite']['bitmap']['smooth']!==this[_0x3fb983(0xbf3)]['battlerSmoothImage']()){if(_0x3fb983(0xd02)!==_0x3fb983(0xd02)){const _0x3b0ced=_0x5657ee[_0x3fb983(0x5e5)][_0x3fb983(0x32d)][_0x3fb983(0x625)];this[_0x3fb983(0x583)]=_0x3b0ced[_0x3fb983(0xb00)][_0x3fb983(0x4be)](0x0),this[_0x3fb983(0x53d)]=_0x3b0ced[_0x3fb983(0x409)];}else this['_mainSprite'][_0x3fb983(0x593)][_0x3fb983(0x80c)]=this[_0x3fb983(0xbf3)]['battlerSmoothImage']();}}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x386)]=Sprite_Actor['prototype'][_0x4c6a01(0x800)],Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x800)]=function(){const _0x2fd7c6=_0x4c6a01;VisuMZ[_0x2fd7c6(0x5e5)][_0x2fd7c6(0x386)]['call'](this),this[_0x2fd7c6(0x743)]();},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x743)]=function(){const _0x16fe09=_0x4c6a01;if(!this[_0x16fe09(0x431)])return;if(!this['_shadowSprite'])return;this[_0x16fe09(0xa46)](),this[_0x16fe09(0x5d2)]();},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x220)]=function(){const _0x333286=_0x4c6a01;this[_0x333286(0x695)]['scale']['x']=0x1/(this[_0x333286(0x68b)]['x']||0.001),this['_stateSprite'][_0x333286(0x68b)]['y']=0x1/(this[_0x333286(0x68b)]['y']||0.001);},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xa98)]=function(){const _0x53d788=_0x4c6a01;if(!$gameSystem[_0x53d788(0x7a2)]()&&this[_0x53d788(0xacc)]===Sprite_Actor){if(_0x53d788(0x28d)===_0x53d788(0x28d)){const _0x49aa03=Scene_Battle[_0x53d788(0xc58)][_0x53d788(0xd3a)]();[_0x53d788(0xc9b),_0x53d788(0x85a),_0x53d788(0x3e6),_0x53d788(0x2ab)]['includes'](_0x49aa03)&&(this[_0x53d788(0x973)]=0x0);}else{if(_0x3c40e9&&_0x217940[_0x53d788(0x407)][_0x53d788(0x996)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x98106f=this[_0x53d788(0xbe7)]()[_0x53d788(0x490)]();if(_0x98106f[_0x53d788(0x991)]===0x1&&_0x98106f[0x0]===this)return![];}return _0x20fdde['BattleCore'][_0x53d788(0x3d9)][_0x53d788(0x3a4)](this,_0x552792);}}},Sprite_Actor[_0x4c6a01(0xc58)]['refreshMotion']=function(){const _0x386d92=_0x4c6a01,_0x1e2e22=this[_0x386d92(0x2fc)];if(_0x1e2e22){const _0x266e7a=_0x1e2e22[_0x386d92(0x212)]();if(_0x1e2e22[_0x386d92(0x323)]()||_0x1e2e22[_0x386d92(0x3e1)]())this[_0x386d92(0x299)]('walk');else{if(_0x266e7a===0x3)this[_0x386d92(0x299)](_0x386d92(0x52a));else{if(_0x266e7a===0x2)_0x386d92(0x88b)!=='QnimI'?this[_0x386d92(0x299)](_0x386d92(0x91a)):(this['createMultiTargetWindow'](!![]),this[_0x386d92(0x2d2)](![]));else{if(this[_0x386d92(0xe08)])this['startMotion'](_0x386d92(0x340));else{if(_0x1e2e22[_0x386d92(0x364)]())'XGVqp'!==_0x386d92(0xab4)?this[_0x386d92(0x299)](_0x386d92(0xcef)):(_0x47213b+=_0x34ae97[_0x386d92(0x966)]()?-_0x3ebe80:_0x2a6ab9,_0x3167bb+=_0x3e34ce[_0x386d92(0x966)]()?-_0x2cb3bd:_0x3e479c);else{if(_0x1e2e22[_0x386d92(0xcac)]())this[_0x386d92(0x299)](_0x386d92(0x91e));else{if(_0x1e2e22['isGuard']()||_0x1e2e22['isGuardWaiting']())this[_0x386d92(0x299)]('guard');else{if(_0x266e7a===0x1)this[_0x386d92(0x299)](_0x386d92(0xd4f));else{if(_0x1e2e22[_0x386d92(0x7cc)]())_0x386d92(0x83f)===_0x386d92(0x83f)?this[_0x386d92(0x299)](_0x386d92(0xdf7)):(_0x264091[_0x386d92(0x5e5)][_0x386d92(0xa8f)][_0x386d92(0x3a4)](this),this['updateShadowVisibility']());else{if(_0x1e2e22[_0x386d92(0xc80)]())this[_0x386d92(0x299)](_0x386d92(0x929));else{if(_0x1e2e22[_0x386d92(0xad9)]())this[_0x386d92(0x299)](_0x386d92(0xcef));else{if(_0x386d92(0x782)!==_0x386d92(0x782)){if(!_0x5fcb66[_0x386d92(0x5e5)][_0x386d92(0x32d)]['BattleLayout']['ShowPortraits'])return![];if(_0x2bdd4e['getBattlePortrait']())return!![];return _0x4face9['VisuMZ_1_MainMenuCore']&&_0x32d2ba['getMenuImage']();}else this[_0x386d92(0x299)](_0x386d92(0x929));}}}}}}}}}}}}},Sprite_Actor[_0x4c6a01(0xc58)]['retreat']=function(){const _0x55dfa9=_0x4c6a01,_0x2d02a3=0xa,_0x5a07d0=0x12c*_0x2d02a3,_0x1fb12f=0x1e*_0x2d02a3;this[_0x55dfa9(0x36f)](_0x5a07d0,0x0,_0x1fb12f);},Sprite_Actor['prototype'][_0x4c6a01(0xdde)]=function(){const _0x22825a=_0x4c6a01;Sprite_Battler[_0x22825a(0xc58)][_0x22825a(0xdde)][_0x22825a(0x3a4)](this);},Sprite_Actor['prototype'][_0x4c6a01(0x8d3)]=function(){const _0x19c85d=_0x4c6a01;return Sprite_Battler[_0x19c85d(0x73a)];},Sprite_Weapon[_0x4c6a01(0xc58)][_0x4c6a01(0x216)]=function(){const _0x438e5d=_0x4c6a01;return Sprite_Battler[_0x438e5d(0x73a)];},Sprite_Actor['prototype'][_0x4c6a01(0x50c)]=function(){},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xc9c)]=function(){},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xd8f)]=function(){const _0x4b3eec=_0x4c6a01;if(this[_0x4b3eec(0x8d6)]&&++this[_0x4b3eec(0x221)]>=this[_0x4b3eec(0x8d3)]()){if(this[_0x4b3eec(0x8d6)][_0x4b3eec(0xd22)])this[_0x4b3eec(0xb56)]=(this[_0x4b3eec(0xb56)]+0x1)%0x4;else this[_0x4b3eec(0xb56)]<0x2?this['_pattern']++:this[_0x4b3eec(0xbb5)]();this[_0x4b3eec(0x221)]=0x0;}},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x986)]=function(_0xef48f3){const _0x443c7=_0x4c6a01;if(_0xef48f3===_0x443c7(0x954))this[_0x443c7(0x69d)]=!![];if(this[_0x443c7(0xbf3)]&&this['_battler']['isDead']()){this[_0x443c7(0x8d6)]=Sprite_Actor['MOTIONS'][_0x443c7(0x52a)];return;}const _0x519068=Sprite_Actor[_0x443c7(0xbd7)][_0xef48f3];this['_motion']=_0x519068,this[_0x443c7(0x221)]=0x0,this[_0x443c7(0xb56)]=0x0;},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x9bb)]=function(_0xc8f50d){const _0x59905f=_0x4c6a01;if(this[_0x59905f(0x2d9)]())return;this[_0x59905f(0x8db)](),this[_0x59905f(0xc45)][_0x59905f(0xb68)](_0xc8f50d),this[_0x59905f(0x2fc)]['clearWeaponAnimation']();},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x8db)]=function(){const _0x276876=_0x4c6a01;let _0x331a2a=-0x10,_0x540427=this[_0x276876(0xb45)]*0.5;const _0x588173=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x2ac579=this['_battler'][_0x276876(0x1ec)]()[_0x276876(0x39f)](_0x2a99a5=>_0x2a99a5&&_0x2a99a5['note'][_0x276876(0x996)](_0x588173)?Number(RegExp['$1']):0x0),_0x156598=this[_0x276876(0xbf3)][_0x276876(0x1ec)]()['map'](_0x2d76c6=>_0x2d76c6&&_0x2d76c6[_0x276876(0x407)][_0x276876(0x996)](_0x588173)?Number(RegExp['$2']):0x0);_0x331a2a=_0x2ac579[_0x276876(0x211)]((_0x2d3b07,_0xf2dd26)=>_0x2d3b07+_0xf2dd26,_0x331a2a),_0x540427=_0x156598['reduce']((_0x33720c,_0x2cdc0a)=>_0x33720c+_0x2cdc0a,_0x540427),this[_0x276876(0xc45)]['x']=_0x331a2a,this[_0x276876(0xc45)]['y']=_0x540427,this['_weaponSprite'][_0x276876(0x32e)]();},Sprite_Weapon[_0x4c6a01(0xc58)]['setup']=function(_0x1d3e7f){const _0x5b68a9=_0x4c6a01;this['_weaponImageId']=_0x1d3e7f,this[_0x5b68a9(0x49c)]=-0x1,this[_0x5b68a9(0xb56)]=0x0,this[_0x5b68a9(0x43b)](),this[_0x5b68a9(0x478)]();},Sprite_Actor[_0x4c6a01(0xc58)]['updateTargetPosition']=function(){},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x3ad)]=function(){const _0x4c804a=_0x4c6a01,_0x3d7f7f=VisuMZ[_0x4c804a(0x5e5)][_0x4c804a(0x32d)][_0x4c804a(0x7bf)],_0x93b1a=_0x3d7f7f[_0x4c804a(0x61d)],_0x38c610=_0x3d7f7f[_0x4c804a(0x41a)],_0x5d772c=_0x3d7f7f[_0x4c804a(0xb8c)];this[_0x4c804a(0x36f)](-_0x93b1a,-_0x38c610,_0x5d772c);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x4e0)]=Sprite_Actor['prototype'][_0x4c6a01(0x478)],Sprite_Actor['prototype'][_0x4c6a01(0x478)]=function(){const _0x596158=_0x4c6a01;this[_0x596158(0x2d9)]()?this[_0x596158(0x753)]():(this[_0x596158(0xa85)](),VisuMZ[_0x596158(0x5e5)][_0x596158(0x4e0)][_0x596158(0x3a4)](this));},Sprite_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0xa85)]=function(){const _0x1b3dd2=_0x4c6a01;if(this[_0x1b3dd2(0xbf3)]&&this['_battler'][_0x1b3dd2(0x63a)]){const _0x1260c5=this[_0x1b3dd2(0xbf3)][_0x1b3dd2(0x63a)];this['_motion']=Sprite_Actor[_0x1b3dd2(0xbd7)][_0x1260c5[_0x1b3dd2(0xcd8)]],this[_0x1b3dd2(0xb56)]=_0x1260c5[_0x1b3dd2(0xb11)];const _0x1f3ffc=this[_0x1b3dd2(0xc45)];_0x1f3ffc[_0x1b3dd2(0x355)](_0x1260c5[_0x1b3dd2(0xa2c)],_0x1260c5[_0x1b3dd2(0xb11)]),this[_0x1b3dd2(0x8db)]();}},Sprite_Weapon[_0x4c6a01(0xc58)]['freezeFrame']=function(_0x58b43a,_0x3edc6f){const _0x538734=_0x4c6a01;this['_weaponImageId']=_0x58b43a,this['_animationCount']=-Infinity,this[_0x538734(0xb56)]=_0x3edc6f,this[_0x538734(0x43b)](),this[_0x538734(0x478)]();},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xd4b)]=function(){const _0x1d0b86=_0x4c6a01;Sprite_Battler['prototype']['initMembers']['call'](this),this[_0x1d0b86(0xd7c)]=null,this[_0x1d0b86(0xa26)]=![],this[_0x1d0b86(0x61a)]='',this['_battlerHue']=0x0,this[_0x1d0b86(0x4d9)]=null,this[_0x1d0b86(0x5b0)]=0x0,this[_0x1d0b86(0x693)]=0x0,this[_0x1d0b86(0xd32)](),this[_0x1d0b86(0x33e)]();},VisuMZ[_0x4c6a01(0x5e5)]['Sprite_Enemy_update']=Sprite_Enemy['prototype'][_0x4c6a01(0x32e)],Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)]=function(){const _0xd744a1=_0x4c6a01;VisuMZ['BattleCore'][_0xd744a1(0xa8f)][_0xd744a1(0x3a4)](this),this[_0xd744a1(0xa46)]();},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xd32)]=function(){const _0x57c78e=_0x4c6a01;this[_0x57c78e(0x431)]=new Sprite(),this['_mainSprite'][_0x57c78e(0x434)]['x']=0.5,this['_mainSprite'][_0x57c78e(0x434)]['y']=0x1,this[_0x57c78e(0x279)](this[_0x57c78e(0x431)]),this['attachSpritesToDistortionSprite']();},Sprite_Enemy['prototype'][_0x4c6a01(0x8a8)]=function(){const _0x4c31f2=_0x4c6a01;return this['_distortionSprite']||this[_0x4c31f2(0x431)]||this;},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x43b)]=function(_0x513c9d){const _0x7059ae=_0x4c6a01;this[_0x7059ae(0x593)]=new Bitmap(0x1,0x1);if(this[_0x7059ae(0xdc1)]()){const _0x2a1645=this[_0x7059ae(0xd7c)]['svBattlerData']();this[_0x7059ae(0x593)]=new Bitmap(_0x2a1645['width'],_0x2a1645[_0x7059ae(0xb45)]),this[_0x7059ae(0x431)][_0x7059ae(0x593)]=new Bitmap(0x1,0x1);}else{if($gameSystem['isSideView']()){const _0x43297e=ImageManager['loadSvEnemy'](_0x513c9d);_0x43297e[_0x7059ae(0x39c)](this[_0x7059ae(0xd6b)][_0x7059ae(0x5e0)](this,_0x43297e));}else{const _0x3a5f97=ImageManager['loadEnemy'](_0x513c9d);_0x3a5f97[_0x7059ae(0x39c)](this[_0x7059ae(0xd6b)]['bind'](this,_0x3a5f97));}}},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xd6b)]=function(_0x1c4829){const _0x1c6e90=_0x4c6a01;this['_mainSprite'][_0x1c6e90(0x593)]=_0x1c4829,this[_0x1c6e90(0x593)]=new Bitmap(_0x1c4829[_0x1c6e90(0xe09)],_0x1c4829[_0x1c6e90(0xb45)]);},VisuMZ[_0x4c6a01(0x5e5)]['Sprite_Enemy_setHue']=Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xbeb)],Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xbeb)]=function(_0x1f4266){const _0x58e1a1=_0x4c6a01;this['_mainSprite']&&this[_0x58e1a1(0x431)][_0x58e1a1(0xbeb)](_0x1f4266);},VisuMZ[_0x4c6a01(0x5e5)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x44f)],Sprite_Enemy['prototype'][_0x4c6a01(0x44f)]=function(){const _0x25e2f8=_0x4c6a01;if(this[_0x25e2f8(0x377)]())VisuMZ[_0x25e2f8(0x5e5)][_0x25e2f8(0x99f)][_0x25e2f8(0x3a4)](this);else{this[_0x25e2f8(0xa26)]=!this['_enemy'][_0x25e2f8(0xb69)]();if(!this['_appeared']){if('ODBiv'!==_0x25e2f8(0xd49))this[_0x25e2f8(0x973)]=0x0;else{if(_0xeec29f[_0x25e2f8(0xbf3)]&&_0x2884ae[_0x25e2f8(0xbf3)]){if(_0x2f91c4[_0x25e2f8(0xbf3)]['isActor']()&&_0x4bf8d7[_0x25e2f8(0xbf3)][_0x25e2f8(0xb37)]())return 0x1;else{if(_0x1d10df[_0x25e2f8(0xbf3)][_0x25e2f8(0x966)]()&&_0x5b221c['_battler']['isEnemy']())return-0x1;}}}}}},VisuMZ['BattleCore'][_0x4c6a01(0x8f8)]=Sprite_Enemy['prototype'][_0x4c6a01(0x9d8)],Sprite_Enemy['prototype'][_0x4c6a01(0x9d8)]=function(){const _0x2c8d61=_0x4c6a01;if(this[_0x2c8d61(0x377)]())VisuMZ[_0x2c8d61(0x5e5)][_0x2c8d61(0x8f8)][_0x2c8d61(0x3a4)](this);},Sprite_Enemy['prototype'][_0x4c6a01(0x478)]=function(){const _0x28222a=_0x4c6a01;Sprite_Battler[_0x28222a(0xc58)][_0x28222a(0x478)][_0x28222a(0x3a4)](this);const _0x2e1fcc=this[_0x28222a(0x8a8)]()||this;if(!_0x2e1fcc)return;if(!_0x2e1fcc['bitmap']){if(_0x28222a(0x9b1)===_0x28222a(0x9b1))_0x2e1fcc[_0x28222a(0x593)]=new Bitmap(this[_0x28222a(0xe09)],this['height']);else{this[_0x28222a(0x543)](_0x28222a(0x79b),_0x361225);if(!_0x5f04d5[_0x28222a(0x5e5)][_0x28222a(0x32d)][_0x28222a(0x84c)][_0x28222a(0xd17)])return;this['push'](_0x28222a(0x7a6),_0x399161[_0x28222a(0x902)][_0x28222a(0x511)](_0x26202f[_0x28222a(0x2c7)]()));}}if(this[_0x28222a(0x4d9)]===_0x28222a(0xc4a))_0x28222a(0x62e)!==_0x28222a(0x62e)?(this[_0x28222a(0x218)]=this[_0x28222a(0x218)]||[],this[_0x28222a(0x218)][_0x28222a(0x543)](_0x4844a3)):this['_mainSprite'][_0x28222a(0x8b4)](0x0,0x0,this[_0x28222a(0x431)][_0x28222a(0xe09)],this[_0x28222a(0x5b0)]);else{if(_0x28222a(0x3c1)===_0x28222a(0x3c1))_0x2e1fcc[_0x28222a(0x8b4)](0x0,0x0,_0x2e1fcc[_0x28222a(0x593)][_0x28222a(0xe09)],this['bitmap'][_0x28222a(0xb45)]);else{_0x464584[_0x28222a(0xaa0)]();let _0x59c4f8=_0x2e5b1a[_0x28222a(0x5e5)][_0x28222a(0x32d)]['ActionSequence'][_0x28222a(0xa0f)];_0x59c4f8>0x0&&(_0x339850[_0x28222a(0xad0)]?_0x54aa54['requestFauxAnimation']([this],_0x59c4f8):_0xf3c93['requestAnimation']([this],_0x59c4f8));}}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x642)]=Sprite_Enemy['prototype'][_0x4c6a01(0x5ff)],Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x5ff)]=function(){const _0x2fc2d4=_0x4c6a01;if(this['allowCollapse']())VisuMZ[_0x2fc2d4(0x5e5)]['Sprite_Enemy_updateBossCollapse']['call'](this);},Sprite_Enemy[_0x4c6a01(0xc58)]['isMoving']=function(){const _0x5b8a6f=_0x4c6a01;return Sprite_Battler['prototype'][_0x5b8a6f(0x5a1)][_0x5b8a6f(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x62f)]=Sprite_Enemy['prototype'][_0x4c6a01(0x220)],Sprite_Enemy['prototype']['updateStateSprite']=function(){const _0x238d81=_0x4c6a01;VisuMZ[_0x238d81(0x5e5)][_0x238d81(0x62f)]['call'](this),this[_0x238d81(0x2b9)]();},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x2b9)]=function(){const _0x4e42c7=_0x4c6a01,_0x260caf=VisuMZ['BattleCore']['Settings'][_0x4e42c7(0x82d)];if(_0x260caf[_0x4e42c7(0x1f5)]&&!_0x260caf[_0x4e42c7(0x754)]){if(_0x4e42c7(0xd06)==='VSvhD'){this[_0x4e42c7(0x71a)][_0x4e42c7(0x973)]=0x0;return;}else return _0x3c7c0b(_0x3bb2b5['$1'])||0x0;}this[_0x4e42c7(0x71a)]['x']=0x0,this['_stateIconSprite']['x']+=this[_0x4e42c7(0xbf3)][_0x4e42c7(0x655)](),this[_0x4e42c7(0x71a)]['y']=-this[_0x4e42c7(0x593)][_0x4e42c7(0xb45)]-this[_0x4e42c7(0x71a)]['height']-0x4,this[_0x4e42c7(0x71a)]['y']+=this['_battler'][_0x4e42c7(0x510)](),this[_0x4e42c7(0x71a)]['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0x4e42c7(0x71a)][_0x4e42c7(0x68b)]['y']=0x1/(this['scale']['y']||0.001);if(this[_0x4e42c7(0xdc1)]()){if(_0x4e42c7(0xbe9)===_0x4e42c7(0xbe9))this[_0x4e42c7(0x551)][_0x4e42c7(0x695)]['scale']['x']=-0x1/(this['scale']['x']||0.001),this['_svBattlerSprite'][_0x4e42c7(0x695)][_0x4e42c7(0x68b)]['y']=0x1/(this[_0x4e42c7(0x68b)]['y']||0.001);else{if(!_0x355e24['SkillsStatesCore']['CheckVisibleBattleNotetags'](this[_0x4e42c7(0x2fc)],_0xba8acc))return!![];if(!_0x10f319[_0x4e42c7(0x8bd)][_0x4e42c7(0x246)](this[_0x4e42c7(0x2fc)],_0x2615ba))return!![];if(!_0x5bf630[_0x4e42c7(0x8bd)][_0x4e42c7(0x5f5)](this['_actor'],_0x2d23cf))return!![];}}},VisuMZ[_0x4c6a01(0x5e5)]['Sprite_Enemy_setBattler']=Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xc29)],Sprite_Enemy[_0x4c6a01(0xc58)]['setBattler']=function(_0x22247e){const _0x44d1f6=_0x4c6a01;VisuMZ[_0x44d1f6(0x5e5)][_0x44d1f6(0x485)]['call'](this,_0x22247e),this[_0x44d1f6(0x857)](_0x22247e);},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x857)]=function(_0x3e177c){const _0x5a4490=_0x4c6a01;if(!this['_svBattlerSprite']){if(_0x5a4490(0xd8e)===_0x5a4490(0xd8e))this[_0x5a4490(0x551)]=new Sprite_SvEnemy(_0x3e177c),this[_0x5a4490(0xc00)]();else{let _0x5e6951=_0x21feae[_0x5a4490(0x3a8)](_0x357f22[_0x5a4490(0xcb8)]);_0x53f951[_0x5a4490(0x3ac)]>0x0&&(_0x5e6951+=_0x499369[_0x5a4490(0x3fa)](_0x59d56a[_0x5a4490(0x3ac)])),_0x4149d6[_0x5a4490(0x57c)](_0x3e1734['VariableDmg'],_0x5e6951);}}this[_0x5a4490(0x551)][_0x5a4490(0xc29)](_0x3e177c);},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xdc1)]=function(){const _0x4245a8=_0x4c6a01;return this[_0x4245a8(0xd7c)]&&this['_enemy'][_0x4245a8(0xdc1)]();},Sprite_Enemy['prototype']['allowCollapse']=function(){const _0x1eac7e=_0x4c6a01;if(this['hasSvBattler']()){if(_0x1eac7e(0x960)!==_0x1eac7e(0x2c6))return this[_0x1eac7e(0xd7c)][_0x1eac7e(0x377)]();else this[_0x1eac7e(0x7af)]=_0x542713,this['_animationCount']=-0x1,this[_0x1eac7e(0xb56)]=0x0,this['loadBitmap'](),this['updateFrame']();}else return!![];},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0xbb5)]=function(){const _0x49c643=_0x4c6a01;this[_0x49c643(0xdc1)]()&&this[_0x49c643(0x551)][_0x49c643(0xbb5)]();},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x986)]=function(_0x13fd3c){const _0xe51634=_0x4c6a01;if(this[_0xe51634(0xdc1)]())this[_0xe51634(0x551)][_0xe51634(0x986)](_0x13fd3c);},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x9bb)]=function(_0x17579d){const _0x40bb9d=_0x4c6a01;if(this['hasSvBattler']())this['_svBattlerSprite'][_0x40bb9d(0x9bb)](_0x17579d);},Sprite_Enemy[_0x4c6a01(0xc58)][_0x4c6a01(0x3ad)]=function(){const _0x21d589=_0x4c6a01,_0x14421f=VisuMZ[_0x21d589(0x5e5)][_0x21d589(0x32d)][_0x21d589(0x7bf)],_0x5f3e3c=_0x14421f['StepDistanceX'],_0x577f97=_0x14421f[_0x21d589(0x41a)],_0x274e02=_0x14421f[_0x21d589(0xb8c)];this[_0x21d589(0x36f)](_0x5f3e3c,_0x577f97,_0x274e02);};function Sprite_SvEnemy(){const _0x30726d=_0x4c6a01;this[_0x30726d(0x67a)](...arguments);}Sprite_SvEnemy[_0x4c6a01(0xc58)]=Object[_0x4c6a01(0xb36)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0xacc)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x4c6a01(0xc58)]['initialize']=function(_0x2280e5){const _0x13681f=_0x4c6a01;Sprite_Actor['prototype'][_0x13681f(0x67a)]['call'](this,_0x2280e5),this[_0x13681f(0x68b)]['x']=-0x1,this[_0x13681f(0x695)][_0x13681f(0x68b)]['x']=-0x1;},Sprite_SvEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0xa61)]=function(){},Sprite_SvEnemy['prototype'][_0x4c6a01(0xb1b)]=function(){},Sprite_SvEnemy['prototype'][_0x4c6a01(0x815)]=function(_0x52abef){},Sprite_SvEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x800)]=function(){},Sprite_SvEnemy[_0x4c6a01(0xc58)]['updateShadowPosition']=function(){},Sprite_SvEnemy['prototype']['updateStateSprite']=function(){const _0x18c8b3=_0x4c6a01;this[_0x18c8b3(0x695)][_0x18c8b3(0x22f)]=![];},Sprite_SvEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x40b)]=function(){const _0x58291e=_0x4c6a01;Sprite_Battler[_0x58291e(0xc58)][_0x58291e(0x40b)][_0x58291e(0x3a4)](this);const _0x357173=this[_0x58291e(0x2fc)][_0x58291e(0xdea)]();this['_battlerName']!==_0x357173&&(this[_0x58291e(0x61a)]=_0x357173,this[_0x58291e(0x431)]['bitmap']=ImageManager[_0x58291e(0x6e9)](_0x357173));if(this[_0x58291e(0x431)]&&this[_0x58291e(0x431)][_0x58291e(0x593)]&&this[_0x58291e(0xbf3)]){if(_0x58291e(0x7d8)!==_0x58291e(0x7d8)){if(!_0x319229[_0x58291e(0x7a2)]())return;_0x3d7162['BattleCore'][_0x58291e(0xdb9)][_0x58291e(0x3a4)](this,_0x3551c9);}else{if(this[_0x58291e(0x431)]['bitmap'][_0x58291e(0x80c)]!==this[_0x58291e(0xbf3)][_0x58291e(0x5ef)]()){if(_0x58291e(0x252)===_0x58291e(0x2aa)){if(!_0x4d4d1e['isSceneBattle']())return;_0x3377a2[_0x58291e(0xc46)](_0x5e4789,_0xefb1ef);const _0x27e15d=_0x539099['_action'],_0x2af78e={'arPenRate':_0x38a1fd[_0x58291e(0x40c)],'arPenFlat':_0x2c481f[_0x58291e(0xc95)],'arRedRate':_0x4188ec[_0x58291e(0x96e)],'arRedFlat':_0x938209[_0x58291e(0xd08)]};_0x27e15d[_0x58291e(0x6ee)]=_0x2af78e;}else this[_0x58291e(0x431)][_0x58291e(0x593)][_0x58291e(0x80c)]=this[_0x58291e(0xbf3)]['battlerSmoothImage']();}}}},Sprite_SvEnemy[_0x4c6a01(0xc58)]['retreat']=function(){},Sprite_SvEnemy['prototype'][_0x4c6a01(0x36f)]=function(_0x36ddfa,_0xfa2062,_0x30f297){if(this['parent'])this['parent']['startMove'](_0x36ddfa,_0xfa2062,_0x30f297);},Sprite_SvEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0xbb5)]=function(){const _0x5c9d0b=_0x4c6a01,_0x2f9c9e=this[_0x5c9d0b(0x2fc)];if(_0x2f9c9e){if(_0x5c9d0b(0x2e9)===_0x5c9d0b(0x2e9)){const _0x492a18=_0x2f9c9e[_0x5c9d0b(0x212)]();if(_0x2f9c9e[_0x5c9d0b(0x323)]()||_0x2f9c9e[_0x5c9d0b(0x3e1)]())this[_0x5c9d0b(0x299)](_0x5c9d0b(0x929));else{if(_0x492a18===0x3){if(_0x5c9d0b(0x9ae)!==_0x5c9d0b(0x86b))this[_0x5c9d0b(0x299)]('dead');else{const _0x2adce2=_0x7f8e57['prototype']['slice'][_0x5c9d0b(0x3a4)](arguments,0x1),_0x3ccea6={'name':_0x517103,'params':_0x2adce2},_0x28e780=this['_methods'][_0x5c9d0b(0x39f)](_0x545283=>_0x545283[_0x5c9d0b(0x2c7)])['indexOf'](_0x5c9d0b(0x92b));_0x28e780>=0x0?this[_0x5c9d0b(0x327)][_0x5c9d0b(0xb34)](_0x28e780,0x0,_0x3ccea6):this[_0x5c9d0b(0x327)][_0x5c9d0b(0x543)](_0x3ccea6);}}else{if(_0x492a18===0x2)_0x5c9d0b(0x793)!==_0x5c9d0b(0x793)?this[_0x5c9d0b(0x813)]=_0x35409d[_0x5c9d0b(0x813)]:this[_0x5c9d0b(0x299)]('sleep');else{if(_0x2f9c9e[_0x5c9d0b(0xcac)]()){if(_0x5c9d0b(0x9cc)!=='vsiGE'){if(!_0x2a77e1[_0x5c9d0b(0x503)]())return;if(!_0x55d873['VisuMZ_3_BoostAction'])return;if(!_0x3fc360[_0x5c9d0b(0x49e)])return;_0x2a5999[_0x5c9d0b(0xc46)](_0x595536,_0x225048);const _0x4d7efb=_0x2ee2f[_0x5c9d0b(0x9c2)];_0x5d42cd[_0x5c9d0b(0x57c)](_0x4d7efb,_0x320aec[_0x5c9d0b(0x49e)][_0x5c9d0b(0x422)]());}else this['startMotion'](_0x5c9d0b(0x91e));}else{if(_0x2f9c9e[_0x5c9d0b(0x884)]()||_0x2f9c9e['isGuardWaiting']()){if('UHyfD'!==_0x5c9d0b(0xc49))this['startMotion'](_0x5c9d0b(0x555));else{if(this[_0x5c9d0b(0x9b2)]==='turn'){if(_0x3bd819[_0x5c9d0b(0xbfb)]())return![];}return _0xee7855[_0x5c9d0b(0x5e5)][_0x5c9d0b(0x6bb)]['call'](this);}}else{if(_0x492a18===0x1)this[_0x5c9d0b(0x299)]('abnormal');else{if(_0x2f9c9e[_0x5c9d0b(0x7cc)]())this[_0x5c9d0b(0x299)]('dying');else _0x2f9c9e[_0x5c9d0b(0xc80)]()?this[_0x5c9d0b(0x299)](_0x5c9d0b(0x929)):this[_0x5c9d0b(0x299)](_0x2f9c9e[_0x5c9d0b(0xb04)]()[_0x5c9d0b(0x2db)]||_0x5c9d0b(0x929));}}}}}}}else _0x171179['remove'](this[_0x5c9d0b(0xbf1)]());}},Sprite_SvEnemy['prototype'][_0x4c6a01(0x559)]=function(){const _0x8e7aa4=_0x4c6a01;return this[_0x8e7aa4(0x36d)]?this[_0x8e7aa4(0x36d)][_0x8e7aa4(0xafc)]===0x0&&this[_0x8e7aa4(0x36d)][_0x8e7aa4(0xa28)]===0x0:!![];},Sprite_SvEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0xba4)]=function(){},VisuMZ['BattleCore'][_0x4c6a01(0x905)]=Sprite_Animation[_0x4c6a01(0xc58)][_0x4c6a01(0x9d0)],Sprite_Animation[_0x4c6a01(0xc58)][_0x4c6a01(0x9d0)]=function(_0x4947f8){const _0x6a960e=_0x4c6a01;return _0x4947f8[_0x6a960e(0xc1d)]?this['targetDistortionSpritePosition'](_0x4947f8):VisuMZ['BattleCore'][_0x6a960e(0x905)][_0x6a960e(0x3a4)](this,_0x4947f8);},Sprite_Animation[_0x4c6a01(0xc58)][_0x4c6a01(0x2c8)]=function(_0x376499){const _0x358109=_0x4c6a01;let _0x5ce7e8=_0x376499['x'],_0x15ab28=_0x376499['y'],_0x4285e2=_0x376499[_0x358109(0xb45)],_0x3ff921=_0x376499[_0x358109(0xc1d)][_0x358109(0x68b)]['y'];_0x376499['x']=_0x376499[_0x358109(0x545)]+_0x376499['extraPositionX'](),_0x376499['y']=_0x376499['_baseY']+_0x376499[_0x358109(0xb8f)](),_0x376499[_0x358109(0xb45)]*=_0x3ff921;let _0x3153df=VisuMZ[_0x358109(0x5e5)][_0x358109(0x905)]['call'](this,_0x376499);return _0x376499['x']=_0x5ce7e8,_0x376499['y']=_0x15ab28,_0x376499['height']=_0x4285e2,_0x3153df;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xcf1)]=Sprite_AnimationMV[_0x4c6a01(0xc58)]['updatePosition'],Sprite_AnimationMV['prototype']['updatePosition']=function(){const _0x1e89b5=_0x4c6a01;VisuMZ[_0x1e89b5(0x5e5)][_0x1e89b5(0xcf1)][_0x1e89b5(0x3a4)](this);if(!SceneManager[_0x1e89b5(0x503)]())return;if(this[_0x1e89b5(0xb7e)][_0x1e89b5(0x3d8)]===0x3)this['x']=Math['round'](Graphics['boxWidth']/0x2),this['y']=Math[_0x1e89b5(0x9c7)](Graphics[_0x1e89b5(0xc3a)]/0x2);else{if(_0x1e89b5(0xd25)===_0x1e89b5(0xdfb))this[_0x1e89b5(0xc47)]=!![];else{if(this['battleStatusSprite'])return;}}},Sprite_Damage[_0x4c6a01(0xc58)][_0x4c6a01(0xd95)]=function(_0x52026d){const _0x276be1=_0x4c6a01,_0x53f18f=_0x52026d['getNextDamagePopup']()||_0x52026d[_0x276be1(0xbbd)]();if(_0x53f18f[_0x276be1(0xd2c)]||_0x53f18f[_0x276be1(0xced)])this['_colorType']=0x0,this[_0x276be1(0x760)]();else{if(_0x53f18f[_0x276be1(0x244)])'RgnaW'===_0x276be1(0x699)?(this['_colorType']=_0x53f18f[_0x276be1(0x3ac)]>=0x0?0x0:0x1,this[_0x276be1(0x5d1)](_0x53f18f[_0x276be1(0x3ac)])):this[_0x276be1(0x543)](_0x276be1(0x522),_0x44c195);else _0x52026d[_0x276be1(0x51e)]()&&_0x53f18f[_0x276be1(0x34c)]!==0x0&&(_0x276be1(0x896)===_0x276be1(0x896)?(this[_0x276be1(0x675)]=_0x53f18f[_0x276be1(0x34c)]>=0x0?0x2:0x3,this['createDigits'](_0x53f18f[_0x276be1(0x34c)])):(_0x273e60+=_0x857859,_0x1b79c7+=_0x4cf03b));}_0x53f18f[_0x276be1(0x572)]&&this['setupCriticalEffect']();},Sprite_Damage[_0x4c6a01(0xc58)][_0x4c6a01(0xb68)]=function(_0xa3ac7){},Sprite_Damage[_0x4c6a01(0xc58)]['createDigits']=function(_0x883fbb){const _0x32e276=_0x4c6a01;let _0x2dcb9=this[_0x32e276(0x6c4)](_0x883fbb);const _0x41d02d=this['fontSize'](),_0x43e87d=Math[_0x32e276(0x989)](_0x41d02d*0.75);for(let _0x1f9fd6=0x0;_0x1f9fd6<_0x2dcb9[_0x32e276(0x991)];_0x1f9fd6++){const _0x4cb471=this[_0x32e276(0x8c5)](_0x43e87d,_0x41d02d);_0x4cb471['bitmap'][_0x32e276(0xa5a)](_0x2dcb9[_0x1f9fd6],0x0,0x0,_0x43e87d,_0x41d02d,'center'),_0x4cb471['x']=(_0x1f9fd6-(_0x2dcb9[_0x32e276(0x991)]-0x1)/0x2)*_0x43e87d,_0x4cb471['dy']=-_0x1f9fd6;}},Sprite_Damage[_0x4c6a01(0xc58)][_0x4c6a01(0x6c4)]=function(_0x384edf){const _0x938721=_0x4c6a01;let _0x36efe4=Math[_0x938721(0x3fa)](_0x384edf)[_0x938721(0xc18)]();if(this[_0x938721(0x900)]()){if(_0x938721(0xb97)!==_0x938721(0xb97)){const _0x584d05=!!this['_freezeMotionData'];this[_0x938721(0x63a)]=_0x5151f9,_0x584d05&&(this[_0x938721(0x390)](),this[_0x938721(0x82a)]());}else _0x36efe4=VisuMZ[_0x938721(0x764)](_0x36efe4);}const _0x427ad2=VisuMZ[_0x938721(0x5e5)][_0x938721(0x32d)][_0x938721(0x625)];let _0x2f5e7d='',_0x52a57e='';switch(this[_0x938721(0x675)]){case 0x0:_0x2f5e7d=_0x427ad2['hpDamageFmt']||_0x938721(0x588),_0x52a57e=TextManager['hp'];if(_0x384edf===0x0)_0x2f5e7d='%1';break;case 0x1:_0x2f5e7d=_0x427ad2['hpHealingFmt']||_0x938721(0xc27),_0x52a57e=TextManager['hp'];break;case 0x2:_0x2f5e7d=_0x427ad2[_0x938721(0x2c0)]||'-%1\x20MP',_0x52a57e=TextManager['mp'];break;case 0x3:_0x2f5e7d=_0x427ad2[_0x938721(0xe0b)]||_0x938721(0xca3),_0x52a57e=TextManager['mp'];break;}return _0x2f5e7d[_0x938721(0x511)](_0x36efe4,_0x52a57e)[_0x938721(0x4e9)]();},Sprite_Damage[_0x4c6a01(0xc58)][_0x4c6a01(0x900)]=function(){const _0x57d84d=_0x4c6a01;return Imported['VisuMZ_0_CoreEngine']?VisuMZ['CoreEngine'][_0x57d84d(0x32d)]['QoL'][_0x57d84d(0xb65)]:_0x57d84d(0x6dc)!=='TEvYz'?![]:_0x463445[_0x57d84d(0x982)][_0x57d84d(0x3a4)](this,_0x15ff46);},Sprite_Damage[_0x4c6a01(0xc58)][_0x4c6a01(0x6e1)]=function(){const _0xf60343=_0x4c6a01,_0x4dc570=VisuMZ['BattleCore'][_0xf60343(0x32d)]['Damage'];this[_0xf60343(0x583)]=_0x4dc570[_0xf60343(0xb00)]['slice'](0x0),this[_0xf60343(0x53d)]=_0x4dc570[_0xf60343(0x409)];},Sprite_Damage[_0x4c6a01(0xc58)][_0x4c6a01(0x9f0)]=function(_0x5309b1,_0x5e51b6){const _0x1e53b5=_0x4c6a01;this[_0x1e53b5(0x583)]=_0x5e51b6['flashColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x1e53b5(0x349)](this[_0x1e53b5(0x583)]),this[_0x1e53b5(0x53d)]=_0x5e51b6[_0x1e53b5(0x7df)]||0x0;const _0x50cb80=this[_0x1e53b5(0x9f9)](),_0x496082=Math[_0x1e53b5(0x989)](_0x50cb80*0x1e),_0x5e3b0b=this['createChildSprite'](_0x496082,_0x50cb80);_0x5e3b0b['bitmap'][_0x1e53b5(0xbe5)]=ColorManager[_0x1e53b5(0x46b)](_0x5e51b6[_0x1e53b5(0xbe5)]),_0x5e3b0b[_0x1e53b5(0x593)][_0x1e53b5(0xa5a)](_0x5309b1,0x0,0x0,_0x496082,_0x50cb80,_0x1e53b5(0x85d)),_0x5e3b0b['dy']=0x0;},Sprite_Damage[_0x4c6a01(0xc58)]['setupIconTextPopup']=function(_0x41bb19,_0x333779,_0x1474c1){const _0x11303d=_0x4c6a01,_0x46105e=Math[_0x11303d(0xa5c)](this['fontSize'](),ImageManager['iconHeight']),_0x5137d3=Math[_0x11303d(0x989)](_0x46105e*0x1e),_0x2ae059=this[_0x11303d(0x8c5)](_0x5137d3,_0x46105e),_0x49612a=ImageManager[_0x11303d(0x24a)]/0x2,_0x97531f=_0x2ae059[_0x11303d(0x593)]['measureTextWidth'](_0x333779+'\x20');_0x2ae059['bitmap'][_0x11303d(0xbe5)]=ColorManager[_0x11303d(0x46b)](_0x1474c1[_0x11303d(0xbe5)]),_0x2ae059['bitmap'][_0x11303d(0xa5a)](_0x333779,_0x49612a,0x0,_0x5137d3-_0x49612a,_0x46105e,'center');const _0xc783b0=Math[_0x11303d(0x9c7)]((_0x46105e-ImageManager['iconHeight'])/0x2),_0x3b7fbc=_0x5137d3/0x2-ImageManager['iconWidth']-_0x97531f/0x2+_0x49612a/0x2,_0x337ab4=ImageManager[_0x11303d(0x9a0)]('IconSet'),_0x1590b3=ImageManager[_0x11303d(0x24a)],_0x16a979=ImageManager[_0x11303d(0xd84)],_0x5f5373=_0x41bb19%0x10*_0x1590b3,_0x79e1db=Math[_0x11303d(0x989)](_0x41bb19/0x10)*_0x16a979;_0x2ae059[_0x11303d(0x593)][_0x11303d(0x7e2)](_0x337ab4,_0x5f5373,_0x79e1db,_0x1590b3,_0x16a979,_0x3b7fbc,_0xc783b0),this[_0x11303d(0x583)]=_0x1474c1[_0x11303d(0xd00)]||[0x0,0x0,0x0,0x0],this[_0x11303d(0x583)]=JsonEx[_0x11303d(0x349)](this[_0x11303d(0x583)]),this[_0x11303d(0x53d)]=_0x1474c1[_0x11303d(0x7df)]||0x0,_0x2ae059['dy']=0x0;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x84b)]=Sprite_Damage[_0x4c6a01(0xc58)][_0x4c6a01(0x8c5)],Sprite_Damage[_0x4c6a01(0xc58)][_0x4c6a01(0x8c5)]=function(_0x478800,_0x3bd340){const _0x45adba=_0x4c6a01;return _0x3bd340=Math[_0x45adba(0x9c7)](_0x3bd340*1.2),VisuMZ[_0x45adba(0x5e5)][_0x45adba(0x84b)][_0x45adba(0x3a4)](this,_0x478800,_0x3bd340);},VisuMZ['BattleCore']['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0x4c6a01(0xc58)][_0x4c6a01(0x478)],Sprite_StateIcon[_0x4c6a01(0xc58)]['updateFrame']=function(){const _0x1f1688=_0x4c6a01;VisuMZ[_0x1f1688(0x5e5)]['Sprite_StateIcon_updateFrame'][_0x1f1688(0x3a4)](this),this[_0x1f1688(0x973)]=this[_0x1f1688(0x526)]>0x0?0xff:0x0;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x40d)]=Sprite_Weapon['prototype'][_0x4c6a01(0x43b)],Sprite_Weapon[_0x4c6a01(0xc58)][_0x4c6a01(0x43b)]=function(){const _0x1f1653=_0x4c6a01;VisuMZ[_0x1f1653(0x5e5)][_0x1f1653(0x40d)][_0x1f1653(0x3a4)](this),this[_0x1f1653(0x593)]&&(this['bitmap'][_0x1f1653(0x80c)]=VisuMZ[_0x1f1653(0x5e5)][_0x1f1653(0x32d)][_0x1f1653(0x9ad)][_0x1f1653(0x237)]);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x832)]=Sprite_Gauge[_0x4c6a01(0xc58)][_0x4c6a01(0x421)],Sprite_Gauge['prototype']['smoothness']=function(){const _0x551003=_0x4c6a01;if(this[_0x551003(0xcc9)]!==_0x551003(0xb89)){if(_0x551003(0x5bd)!==_0x551003(0x5bd))this['startMotion'](_0x551003(0xd4f));else return VisuMZ[_0x551003(0x5e5)][_0x551003(0x32d)][_0x551003(0x64f)][_0x551003(0xd82)]??0x14;}else return VisuMZ['BattleCore'][_0x551003(0x832)][_0x551003(0x3a4)](this);};function _0x1161(_0x39ea14,_0x2596cf){const _0x5eaa1c=_0x5eaa();return _0x1161=function(_0x11617c,_0xb63404){_0x11617c=_0x11617c-0x1ea;let _0x5729d8=_0x5eaa1c[_0x11617c];return _0x5729d8;},_0x1161(_0x39ea14,_0x2596cf);}function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge[_0x4c6a01(0xc58)]=Object[_0x4c6a01(0xb36)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x4c6a01(0xc58)][_0x4c6a01(0xacc)]=Sprite_HpGauge,Sprite_HpGauge[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)]=function(){const _0x1fe467=_0x4c6a01;Sprite_Gauge[_0x1fe467(0xc58)][_0x1fe467(0x67a)][_0x1fe467(0x3a4)](this);},Sprite_HpGauge[_0x4c6a01(0xc58)][_0x4c6a01(0x803)]=function(){return 0x0;},Sprite_HpGauge[_0x4c6a01(0xc58)][_0x4c6a01(0x98d)]=function(){const _0x551bd2=_0x4c6a01;this[_0x551bd2(0x593)][_0x551bd2(0xd66)]();const _0x414007=this[_0x551bd2(0x7e9)]();!isNaN(_0x414007)&&this[_0x551bd2(0xdd1)]();};function Sprite_EnemyName(){const _0x46da7e=_0x4c6a01;this[_0x46da7e(0x67a)](...arguments);}Sprite_EnemyName[_0x4c6a01(0xc58)]=Object[_0x4c6a01(0xb36)](Sprite_Name[_0x4c6a01(0xc58)]),Sprite_EnemyName['prototype']['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)]=function(){const _0x1f5744=_0x4c6a01;Sprite_Name[_0x1f5744(0xc58)][_0x1f5744(0x67a)][_0x1f5744(0x3a4)](this),this[_0x1f5744(0x292)]();},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0xd4b)]=function(){const _0x5813f6=_0x4c6a01;Sprite_Name[_0x5813f6(0xc58)]['initMembers']['call'](this),this[_0x5813f6(0x973)]=0x0,this[_0x5813f6(0xa03)]=null,this['anchor']['x']=0.5,this[_0x5813f6(0x434)]['y']=0x0;},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x292)]=function(){const _0x30ec34=_0x4c6a01;VisuMZ[_0x30ec34(0x5e5)][_0x30ec34(0x32d)][_0x30ec34(0x82d)][_0x30ec34(0x1f5)]&&(_0x30ec34(0xa4d)!=='dQBFj'?(_0x5f0251+=_0x5ac6e7,_0x12222d+=_0xa0ce79['isActor']()?-_0x4991d4:_0x4ed8ec):(this[_0x30ec34(0x71a)]=new Sprite_StateIcon(),this['addChild'](this['_stateIconSprite'])));},Sprite_EnemyName['prototype'][_0x4c6a01(0x718)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x61e)]=function(){const _0x13a671=_0x4c6a01;return this[_0x13a671(0x338)]=this['_lineHeight']||Window_Base['prototype'][_0x13a671(0x833)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName['prototype'][_0x4c6a01(0x9f9)]=function(){const _0x22451e=_0x4c6a01;return VisuMZ[_0x22451e(0x5e5)][_0x22451e(0x32d)][_0x22451e(0x82d)]['NameFontSize']||$gameSystem[_0x22451e(0x31f)]();},Sprite_EnemyName[_0x4c6a01(0xc58)]['linkSprite']=function(_0x4ad7a4){this['_linkedSprite']=_0x4ad7a4;},Sprite_EnemyName[_0x4c6a01(0xc58)]['update']=function(){const _0x2c0b14=_0x4c6a01;Sprite_Name['prototype'][_0x2c0b14(0x32e)]['call'](this),this[_0x2c0b14(0x735)](),this[_0x2c0b14(0x242)](),this[_0x2c0b14(0x1f2)](),this['updateOpacity']();},Sprite_EnemyName[_0x4c6a01(0xc58)]['redraw']=function(){const _0x4b308a=_0x4c6a01;this[_0x4b308a(0x7fe)]=undefined;const _0x369d81=this[_0x4b308a(0x2c7)](),_0x4be567=this[_0x4b308a(0x718)](),_0x4701fe=Window_Base['prototype'][_0x4b308a(0x833)]();this['setupFont'](),this[_0x4b308a(0x593)][_0x4b308a(0xd66)](),this[_0x4b308a(0x593)][_0x4b308a(0xa5a)](_0x369d81,0x0,0x0,_0x4be567,_0x4701fe,_0x4b308a(0x85d));},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x735)]=function(){const _0x1dbe5b=_0x4c6a01;if(!this['_linkedSprite'])return;this[_0x1dbe5b(0xbf3)]!==this[_0x1dbe5b(0xa03)][_0x1dbe5b(0xbf3)]&&this['setup'](this[_0x1dbe5b(0xa03)][_0x1dbe5b(0xbf3)]);},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x242)]=function(){const _0x458517=_0x4c6a01;if(!this['_linkedSprite'])return;this[_0x458517(0x338)]=this[_0x458517(0x338)]||Window_Base['prototype'][_0x458517(0x833)](),this['x']=Math[_0x458517(0x9c7)](this[_0x458517(0xa03)]['_baseX']),this['y']=Math[_0x458517(0x9c7)](this[_0x458517(0xa03)][_0x458517(0xcaa)]-this[_0x458517(0x338)]*0.5);const _0x54f543=VisuMZ[_0x458517(0x5e5)][_0x458517(0x32d)]['Enemy'];this['x']+=Math[_0x458517(0x9c7)](_0x54f543[_0x458517(0x4ae)]||0x0),this['y']+=Math[_0x458517(0x9c7)](_0x54f543[_0x458517(0x704)]||0x0);},Sprite_EnemyName['prototype'][_0x4c6a01(0x1f2)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0xb29)]=function(){const _0x2388b4=_0x4c6a01;if(!this[_0x2388b4(0x71a)])return;this[_0x2388b4(0xbf3)]!==this[_0x2388b4(0x71a)][_0x2388b4(0xbf3)]&&this['_stateIconSprite'][_0x2388b4(0xb68)](this[_0x2388b4(0xbf3)]);const _0x3d48e1=this[_0x2388b4(0xc42)]();this[_0x2388b4(0x338)]=this[_0x2388b4(0x338)]||Window_Base[_0x2388b4(0xc58)][_0x2388b4(0x833)](),this[_0x2388b4(0x71a)]['x']=Math[_0x2388b4(0x9c7)]((_0x3d48e1+ImageManager['iconWidth'])/0x2)+0x8,this[_0x2388b4(0x71a)]['y']=this[_0x2388b4(0x338)]/0x2;const _0x1e6aaa=VisuMZ['BattleCore'][_0x2388b4(0x32d)]['Enemy'];this[_0x2388b4(0x71a)]['x']+=_0x1e6aaa[_0x2388b4(0x671)]||0x0,this[_0x2388b4(0x71a)]['y']+=_0x1e6aaa['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x541)]=function(){const _0x4abdc5=_0x4c6a01,_0x151ea7=this[_0x4abdc5(0x865)]();if(_0x151ea7&&this['opacity']<0xff)this['opacity']+=0x10;else!_0x151ea7&&this['opacity']>0x0&&(this[_0x4abdc5(0x973)]-=0x10);},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x865)]=function(){const _0x20c042=_0x4c6a01;if(this[_0x20c042(0x36e)]())return![];else{if(!this[_0x20c042(0xbf3)]){if(_0x20c042(0x756)!=='IKeVV')return![];else _0x30363d['setActionState']('undecided');}else{if(this[_0x20c042(0xbf3)]['isDead']())return _0x20c042(0x9e2)==='zXFEU'?![]:_0x5c327e[_0x20c042(0x22c)]()[_0x20c042(0x419)]();else{if(!this[_0x20c042(0xbf3)]['isAppeared']())return![];else{if(this['compatibilityVisible']())return!![];else{if(this['isAlwaysVisible']())return!![];else{if(this[_0x20c042(0x9af)]())return!![];else{if(this['opacity']>0x0){if('hsNTo'!=='hsNTo')this['_branch'][this[_0x20c042(0xb83)]]=_0x16449;else return![];}}}}}}}}},Sprite_EnemyName[_0x4c6a01(0xc58)]['isAlwaysHidden']=function(){const _0x2937f6=_0x4c6a01;return VisuMZ[_0x2937f6(0x5e5)][_0x2937f6(0x32d)][_0x2937f6(0x82d)][_0x2937f6(0x891)];},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0xbef)]=function(){return![];},Sprite_EnemyName[_0x4c6a01(0xc58)]['isAlwaysVisible']=function(){const _0x289e8f=_0x4c6a01;return VisuMZ[_0x289e8f(0x5e5)][_0x289e8f(0x32d)][_0x289e8f(0x82d)][_0x289e8f(0x37e)];},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x9af)]=function(){const _0x5af89f=_0x4c6a01;return VisuMZ[_0x5af89f(0x5e5)][_0x5af89f(0x32d)][_0x5af89f(0x82d)]['NameAlwaysSelectOnly']?this[_0x5af89f(0xbf3)][_0x5af89f(0x50f)]():SceneManager[_0x5af89f(0x4c1)][_0x5af89f(0xb0b)]&&SceneManager['_scene'][_0x5af89f(0xb0b)][_0x5af89f(0x43a)]&&SceneManager[_0x5af89f(0x4c1)]['_enemyWindow'][_0x5af89f(0xdc8)]['includes'](this[_0x5af89f(0xbf3)]);},Sprite_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0xc42)]=function(){const _0x3f9d11=_0x4c6a01;if(!this[_0x3f9d11(0xbf3)])return 0x0;if(this[_0x3f9d11(0x7fe)])return this['_cacheTextWidth'];const _0x43dcf9=this['name']();return this[_0x3f9d11(0xb77)](),this[_0x3f9d11(0x7fe)]=this['bitmap'][_0x3f9d11(0x300)](_0x43dcf9)||0x1,this[_0x3f9d11(0x7fe)];},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x5ea)]=Sprite_Battleback[_0x4c6a01(0xc58)][_0x4c6a01(0xb49)],Sprite_Battleback[_0x4c6a01(0xc58)][_0x4c6a01(0xb49)]=function(){const _0x2ad2c9=_0x4c6a01,_0x1572d3=VisuMZ[_0x2ad2c9(0x5e5)][_0x2ad2c9(0x32d)][_0x2ad2c9(0x612)];if(!_0x1572d3)return VisuMZ['BattleCore'][_0x2ad2c9(0x5ea)][_0x2ad2c9(0x3a4)](this);const _0x39e00f=String(_0x1572d3[_0x2ad2c9(0x458)])||'MZ';switch(_0x39e00f){case'MZ':VisuMZ[_0x2ad2c9(0x5e5)]['Sprite_Battleback_adjustPosition'][_0x2ad2c9(0x3a4)](this);break;case _0x2ad2c9(0x961):this['adjustPosition_1for1']();break;case'ScaleToFit':this[_0x2ad2c9(0xa87)]();break;case _0x2ad2c9(0x8e7):this[_0x2ad2c9(0x42d)]();break;case _0x2ad2c9(0x3b2):this[_0x2ad2c9(0xb21)]();break;}},Sprite_Battleback[_0x4c6a01(0xc58)][_0x4c6a01(0xacd)]=function(){const _0x50695b=_0x4c6a01,_0x29aafd=VisuMZ[_0x50695b(0x5e5)][_0x50695b(0x32d)][_0x50695b(0x612)];if(_0x29aafd&&_0x29aafd[_0x50695b(0xc56)]){if(_0x50695b(0x2bf)===_0x50695b(0x7aa)){if(!_0x41c7bc[_0x50695b(0x503)]())return;const _0x38bc2f=_0x44059a[_0x50695b(0x582)]();if(!_0x38bc2f)return;_0x38bc2f[_0x50695b(0x2b5)](_0x50695b(0x6c2));}else return _0x29aafd['jsOneForOne'][_0x50695b(0x3a4)](this);}this[_0x50695b(0xe09)]=Graphics[_0x50695b(0xe09)],this[_0x50695b(0xb45)]=Graphics['height'];const _0x48f6b3=0x1;this[_0x50695b(0x68b)]['x']=_0x48f6b3,this['scale']['y']=_0x48f6b3,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x4c6a01(0xc58)][_0x4c6a01(0xa87)]=function(){const _0x2ccb20=_0x4c6a01,_0x329191=VisuMZ['BattleCore'][_0x2ccb20(0x32d)][_0x2ccb20(0x612)];if(_0x329191&&_0x329191[_0x2ccb20(0x26c)])return _0x329191['jsScaleToFit'][_0x2ccb20(0x3a4)](this);this[_0x2ccb20(0xe09)]=Graphics['width'],this[_0x2ccb20(0xb45)]=Graphics[_0x2ccb20(0xb45)];const _0x623955=this[_0x2ccb20(0xe09)]/this[_0x2ccb20(0x593)][_0x2ccb20(0xe09)],_0x139468=this['height']/this[_0x2ccb20(0x593)][_0x2ccb20(0xb45)],_0x464619=Math[_0x2ccb20(0xa5c)](_0x623955,_0x139468);this[_0x2ccb20(0x68b)]['x']=_0x464619,this[_0x2ccb20(0x68b)]['y']=_0x464619,this['x']=(Graphics['width']-this[_0x2ccb20(0xe09)])/0x2,this['y']=Graphics[_0x2ccb20(0xb45)]-this[_0x2ccb20(0xb45)];},Sprite_Battleback[_0x4c6a01(0xc58)][_0x4c6a01(0x42d)]=function(){const _0x207321=_0x4c6a01,_0x2b9fc0=VisuMZ['BattleCore']['Settings'][_0x207321(0x612)];if(_0x2b9fc0&&_0x2b9fc0[_0x207321(0x45d)]){if(_0x207321(0xabe)!=='AZtXi')return _0x2b9fc0['jsScaleDown']['call'](this);else{const _0x422809=_0x2fbdcd[_0x207321(0x750)]('['+_0x1789da['$1'][_0x207321(0x996)](/\d+/g)+']');for(const _0x520e9c of _0x422809){if(_0xc48ddc['value'](_0x520e9c))return!![];}return![];}}this[_0x207321(0xe09)]=Graphics[_0x207321(0xe09)],this[_0x207321(0xb45)]=Graphics[_0x207321(0xb45)];const _0x2d385b=Math['min'](0x1,this['width']/this['bitmap'][_0x207321(0xe09)]),_0x4e0576=Math[_0x207321(0x892)](0x1,this[_0x207321(0xb45)]/this[_0x207321(0x593)][_0x207321(0xb45)]),_0x26848c=Math[_0x207321(0xa5c)](_0x2d385b,_0x4e0576);this[_0x207321(0x68b)]['x']=_0x26848c,this[_0x207321(0x68b)]['y']=_0x26848c,this['x']=(Graphics[_0x207321(0xe09)]-this[_0x207321(0xe09)])/0x2,this['y']=Graphics[_0x207321(0xb45)]-this[_0x207321(0xb45)];},Sprite_Battleback[_0x4c6a01(0xc58)][_0x4c6a01(0xb21)]=function(){const _0xd5505=_0x4c6a01,_0x589b5e=VisuMZ['BattleCore'][_0xd5505(0x32d)]['BattlebackScale'];if(_0x589b5e&&_0x589b5e[_0xd5505(0x641)]){if(_0xd5505(0x49b)!==_0xd5505(0x49b)){_0x2d0410-=_0x39ae30;const _0x2f355d=_0x176f92[_0xd5505(0x5e5)]['Settings'][_0xd5505(0x625)][_0xd5505(0xca2)],_0x53819a=_0x297949[_0xd5505(0xa5c)](0x1-_0x596571/((_0x48d0d0-_0x435cec)*_0x2f355d+_0x1106e7),0.01);_0x58f1bd*=_0x53819a,_0x40599c+=_0x5700ec;}else return _0x589b5e[_0xd5505(0x641)][_0xd5505(0x3a4)](this);}this['width']=Graphics[_0xd5505(0xe09)],this[_0xd5505(0xb45)]=Graphics[_0xd5505(0xb45)];const _0x57bce9=Math[_0xd5505(0xa5c)](0x1,this[_0xd5505(0xe09)]/this[_0xd5505(0x593)][_0xd5505(0xe09)]),_0x1ebeb4=Math[_0xd5505(0xa5c)](0x1,this[_0xd5505(0xb45)]/this[_0xd5505(0x593)]['height']),_0x49fc9c=Math[_0xd5505(0xa5c)](_0x57bce9,_0x1ebeb4);this['scale']['x']=_0x49fc9c,this[_0xd5505(0x68b)]['y']=_0x49fc9c,this['x']=(Graphics['width']-this[_0xd5505(0xe09)])/0x2,this['y']=Graphics[_0xd5505(0xb45)]-this[_0xd5505(0xb45)];},Spriteset_Battle[_0x4c6a01(0x278)]=![],Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x791)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x9c8)]=function(){return 0x0;},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xb32)]=function(){return 0x0;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x2d5)]=Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x5ee)],Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x5ee)]=function(){const _0x1083e8=_0x4c6a01;VisuMZ[_0x1083e8(0x5e5)][_0x1083e8(0x2d5)][_0x1083e8(0x3a4)](this),this[_0x1083e8(0xc4f)](),this[_0x1083e8(0x2eb)]();},VisuMZ['BattleCore']['Spriteset_Battle_update']=Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)],Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)]=function(){const _0x50cbd5=_0x4c6a01;VisuMZ['BattleCore'][_0x50cbd5(0x77f)][_0x50cbd5(0x3a4)](this),this['updateBattlerContainer'](),this[_0x50cbd5(0xc60)](),this[_0x50cbd5(0xa6f)]();},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xc4f)]=function(){const _0x108333=_0x4c6a01;this[_0x108333(0x567)]=new Weather(),this['_battleField'][_0x108333(0x279)](this[_0x108333(0x567)]);},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xa6f)]=function(){const _0x32ab0e=_0x4c6a01;this[_0x32ab0e(0x567)][_0x32ab0e(0xd11)]=$gameScreen['weatherType'](),this[_0x32ab0e(0x567)]['power']=$gameScreen[_0x32ab0e(0x59a)]();},Game_Interpreter[_0x4c6a01(0xc58)]['command236']=function(_0x4a4c4b){const _0x5b842a=_0x4c6a01;$gameScreen['changeWeather'](_0x4a4c4b[0x0],_0x4a4c4b[0x1],_0x4a4c4b[0x2]);if(_0x4a4c4b[0x3])this[_0x5b842a(0xcef)](_0x4a4c4b[0x2]);return!![];},VisuMZ['BattleCore'][_0x4c6a01(0x516)]=Game_Interpreter[_0x4c6a01(0xc58)]['command283'],Game_Interpreter['prototype'][_0x4c6a01(0x2b6)]=function(_0x148b77){const _0x58810e=_0x4c6a01;return SceneManager['isSceneBattle']()?_0x58810e(0x3aa)!=='YLrNP'?this['isBattleCoreTargetScope']()&&!this[_0x58810e(0x5fa)]()?this[_0x58810e(0x3e7)]():_0x3c8c54[_0x58810e(0x5e5)][_0x58810e(0xbbe)][_0x58810e(0x3a4)](this):(SceneManager[_0x58810e(0x4c1)][_0x58810e(0x666)][_0x58810e(0x621)](_0x148b77[0x0],_0x148b77[0x1]),!![]):VisuMZ['BattleCore'][_0x58810e(0x516)][_0x58810e(0x3a4)](this,_0x148b77);},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x3e5)]=function(_0x494a97,_0x5bc5a6){const _0x57b1db=_0x4c6a01;_0x494a97[_0x57b1db(0x593)]=_0x5bc5a6;},Spriteset_Battle[_0x4c6a01(0xc58)]['changeBattlebacks']=function(_0x31e8c7,_0x4a7cf1){const _0x3380bb=_0x4c6a01;_0x31e8c7=_0x31e8c7||'',_0x4a7cf1=_0x4a7cf1||'';if(_0x31e8c7===''&&_0x4a7cf1===''){if(_0x3380bb(0xb42)===_0x3380bb(0xb42))_0x31e8c7=this['_back1Sprite'][_0x3380bb(0x22b)](),_0x4a7cf1=this[_0x3380bb(0x3dc)]['battleback2Name']();else{const _0x42151d=this[_0x3380bb(0xd98)];this[_0x3380bb(0x713)][_0x3380bb(0xa3c)](_0x42151d,_0x42151d),this['_cursorArea']['x']=_0x42151d-this[_0x3380bb(0x232)]['x'],this['_cursorArea']['y']=_0x42151d-this[_0x3380bb(0x232)]['y'],this[_0x3380bb(0x797)]>0x0&&this[_0x3380bb(0xdd6)]>0x0?this[_0x3380bb(0x713)][_0x3380bb(0x22f)]=this[_0x3380bb(0x52e)]():this['_cursorArea'][_0x3380bb(0x22f)]=![];}}const _0x2763b8=ImageManager['loadBattleback1'](_0x31e8c7),_0x5ee22a=ImageManager[_0x3380bb(0xbac)](_0x4a7cf1);_0x2763b8[_0x3380bb(0x39c)](this[_0x3380bb(0xd0f)][_0x3380bb(0x5e0)](this,this[_0x3380bb(0x2f3)],this[_0x3380bb(0x3dc)],_0x2763b8,_0x5ee22a));},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xd0f)]=function(_0x4e0c54,_0xd351f7,_0xbd6684,_0x47561a){const _0xdde239=_0x4c6a01;_0x47561a['addLoadListener'](this[_0xdde239(0x5db)][_0xdde239(0x5e0)](this,_0x4e0c54,_0xd351f7,_0xbd6684,_0x47561a));},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x5db)]=function(_0x4342d2,_0x349bf3,_0x41b88c,_0x1d972d){const _0x228dc1=_0x4c6a01;_0x4342d2[_0x228dc1(0x593)]=_0x41b88c,_0x349bf3[_0x228dc1(0x593)]=_0x1d972d,_0x4342d2[_0x228dc1(0xb49)](),_0x349bf3['adjustPosition']();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xadc)]=Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x854)],Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x854)]=function(){const _0x12a59a=_0x4c6a01;VisuMZ[_0x12a59a(0x5e5)][_0x12a59a(0xadc)][_0x12a59a(0x3a4)](this),this[_0x12a59a(0x592)]();},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x592)]=function(){const _0x2316d2=_0x4c6a01;this[_0x2316d2(0x2f9)](),this[_0x2316d2(0x9a8)](),this[_0x2316d2(0x56e)](),this[_0x2316d2(0xe01)](),this[_0x2316d2(0xd62)]();},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x2f9)]=function(){const _0x579b10=_0x4c6a01;this[_0x579b10(0x8c1)]=new Sprite(),this[_0x579b10(0xb23)][_0x579b10(0x279)](this[_0x579b10(0x8c1)]);},Spriteset_Battle[_0x4c6a01(0xc58)]['createAnimationContainer']=function(){const _0x847cd8=_0x4c6a01;this[_0x847cd8(0x26d)]=new Sprite();if(Spriteset_Battle['ANTI_TINT_UI'])this[_0x847cd8(0x279)](this[_0x847cd8(0x26d)]);else{if(_0x847cd8(0xb7c)===_0x847cd8(0xb7c))this[_0x847cd8(0xb23)]['addChild'](this[_0x847cd8(0x26d)]);else{this[_0x847cd8(0x95e)][_0x847cd8(0xd66)]();const _0x1d5458=_0x1d9f80[_0x847cd8(0x5e5)][_0x847cd8(0x32d)]['AutoBattle'][_0x847cd8(0xd31)],_0x375df0=_0x1d5458[_0x847cd8(0x511)](this[_0x847cd8(0x54a)](),this[_0x847cd8(0x86d)]()),_0x4f61d4=this[_0x847cd8(0x6f2)](_0x375df0)[_0x847cd8(0xe09)],_0x37edf1=_0x2571be[_0x847cd8(0x989)]((this[_0x847cd8(0x797)]-_0x4f61d4)/0x2);this[_0x847cd8(0x7de)](_0x375df0,_0x37edf1,0x0,_0x4f61d4);}}},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xe01)]=function(){const _0x543af9=_0x4c6a01;this[_0x543af9(0x2a2)]=new Sprite(),this[_0x543af9(0x2a2)]['x']=this[_0x543af9(0xb23)]['x'],this['_damageContainer']['y']=this[_0x543af9(0xb23)]['y'],this[_0x543af9(0x279)](this['_damageContainer']);},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xd62)]=function(){const _0x1a75ef=_0x4c6a01;if(!this[_0x1a75ef(0x791)]())return;this[_0x1a75ef(0x8c1)][_0x1a75ef(0x68b)]['x']=-0x1,this[_0x1a75ef(0x8c1)]['x']=this[_0x1a75ef(0xb23)]['width'],this[_0x1a75ef(0x2c1)][_0x1a75ef(0x68b)]['x']=-0x1,this[_0x1a75ef(0x2c1)]['x']=this[_0x1a75ef(0xb23)][_0x1a75ef(0xe09)],this['_animationContainer'][_0x1a75ef(0x68b)]['x']=-0x1,this[_0x1a75ef(0x26d)]['x']=this['_battleField']['width'],this[_0x1a75ef(0x2a2)]['scale']['x']=-0x1,this[_0x1a75ef(0x2a2)]['x']=this[_0x1a75ef(0xb23)]['x']+this[_0x1a75ef(0xb23)][_0x1a75ef(0xe09)];},Spriteset_Battle['prototype'][_0x4c6a01(0x844)]=function(){const _0x4e3176=_0x4c6a01;Imported[_0x4e3176(0xad0)]&&this[_0x4e3176(0xd79)]()&&(_0x4e3176(0xcea)!=='Usjwv'?this['repositionEnemiesByResolution']():this[_0x4e3176(0x474)]=![]);const _0x41026d=$gameTroop['members'](),_0x220c7d=[];for(const _0x1aacfb of _0x41026d){_0x220c7d['push'](new Sprite_Enemy(_0x1aacfb));}_0x220c7d[_0x4e3176(0xa04)](this[_0x4e3176(0xa9d)][_0x4e3176(0x5e0)](this));for(const _0x4697bb of _0x220c7d){this[_0x4e3176(0x8c1)][_0x4e3176(0x279)](_0x4697bb);}this['_enemySprites']=_0x220c7d;},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x250)]=function(){const _0x533c72=_0x4c6a01;this['_actorSprites']=[];for(let _0x105a7b=0x0;_0x105a7b<$gameParty['maxBattleMembers']();_0x105a7b++){if(_0x533c72(0x27e)!==_0x533c72(0x27e))this[_0x533c72(0x5fa)]()?_0x41e666=this[_0x533c72(0xadd)]():_0x263e80=this[_0x533c72(0xc81)]();else{const _0x3177a2=$gameParty[_0x533c72(0x9df)]()[_0x105a7b],_0x28e1b2=new Sprite_Actor();_0x28e1b2[_0x533c72(0x8ec)](_0x3177a2),_0x28e1b2['setBattler'](_0x3177a2),_0x28e1b2['update'](),this[_0x533c72(0x8bb)][_0x533c72(0x543)](_0x28e1b2),this[_0x533c72(0x8c1)][_0x533c72(0x279)](_0x28e1b2);}}},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xa8b)]=function(_0x47018e,_0x25f851,_0xa6598a,_0x5758cb){const _0x336538=_0x4c6a01,_0x522e9f=this[_0x336538(0x2ef)](_0x25f851),_0x2fbaba=new(_0x522e9f?Sprite_AnimationMV:Sprite_Animation)(),_0x356d4e=this['makeTargetSprites'](_0x47018e);this['animationShouldMirror'](_0x47018e[0x0])&&(_0xa6598a=!_0xa6598a),_0x2fbaba[_0x336538(0xd39)]=_0x47018e,_0x2fbaba[_0x336538(0xb68)](_0x356d4e,_0x25f851,_0xa6598a,_0x5758cb),this[_0x336538(0x309)](_0x2fbaba);},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x309)]=function(_0x3d50b6){const _0x202dd9=_0x4c6a01;this[_0x202dd9(0x843)](_0x3d50b6)?(this[_0x202dd9(0x595)]()[_0x202dd9(0x279)](_0x3d50b6),_0x3d50b6[_0x202dd9(0x3bc)]=!![]):_0x202dd9(0x578)===_0x202dd9(0xdbb)?(this[_0x202dd9(0x26d)]['x']=this[_0x202dd9(0x69e)]['x'],this[_0x202dd9(0x26d)]['y']=this[_0x202dd9(0x69e)]['y']):(this[_0x202dd9(0x26d)]['addChild'](_0x3d50b6),Spriteset_Battle[_0x202dd9(0x278)]&&(_0x202dd9(0x702)!==_0x202dd9(0x729)?(this[_0x202dd9(0x26d)]['x']=this[_0x202dd9(0x69e)]['x'],this[_0x202dd9(0x26d)]['y']=this['_effectsContainer']['y']):this[_0x202dd9(0xc11)]='default')),this[_0x202dd9(0xa17)][_0x202dd9(0x543)](_0x3d50b6);},Spriteset_Battle[_0x4c6a01(0xc58)]['isAnimationShownOnBattlePortrait']=function(_0x592d83){const _0x22bf0b=_0x4c6a01;if(!_0x592d83)return![];if(!_0x592d83[_0x22bf0b(0xb7e)])return![];if(!_0x592d83[_0x22bf0b(0xd39)][0x0])return![];if(_0x592d83[_0x22bf0b(0xd39)][0x0]['isActor']&&!_0x592d83[_0x22bf0b(0xd39)][0x0][_0x22bf0b(0x966)]())return![];if($gameSystem[_0x22bf0b(0x7a2)]())return![];if(!this[_0x22bf0b(0x595)]())return![];if(_0x592d83[_0x22bf0b(0xacc)]===Sprite_Animation){if(_0x592d83['_animation'][_0x22bf0b(0x9fb)]!==0x0)return![];}else{if(_0x592d83['constructor']===Sprite_AnimationMV){if('eXPKD'===_0x22bf0b(0x23e)){if(!_0x4e0ab9[_0x22bf0b(0x7a2)]())return;const _0x4ae0f3=this['battler']();if(!_0x4ae0f3)return;_0x4ae0f3[_0x22bf0b(0x96a)](_0x145939,_0x256381,_0x3e238e);}else{if(_0x592d83['_animation'][_0x22bf0b(0x3d8)]===0x3)return![];}}}return!![];const _0x5ba192=Window_BattleStatus[_0x22bf0b(0xc58)][_0x22bf0b(0xd3a)]();return['xp',_0x22bf0b(0x3e6)][_0x22bf0b(0x3e3)](_0x5ba192);},Spriteset_Battle[_0x4c6a01(0xc58)]['battleStatusWindowAnimationContainer']=function(){const _0xe29dee=_0x4c6a01;if(!SceneManager['_scene'])return null;if(!SceneManager[_0xe29dee(0x4c1)][_0xe29dee(0x270)])return null;if(!SceneManager[_0xe29dee(0x4c1)][_0xe29dee(0x270)]['_effectsContainer'])return null;return SceneManager['_scene'][_0xe29dee(0x270)][_0xe29dee(0x69e)];},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x6e4)]=function(_0x36d4b7){const _0x43b916=_0x4c6a01;this['removeAnimationFromContainer'](_0x36d4b7);for(const _0x25e405 of _0x36d4b7[_0x43b916(0xd39)]){_0x25e405['endAnimation']&&_0x25e405[_0x43b916(0x249)]();}_0x36d4b7['destroy']();},Spriteset_Battle[_0x4c6a01(0xc58)]['removeAnimationFromContainer']=function(_0x34b1ef){const _0x4af661=_0x4c6a01;this[_0x4af661(0x843)](_0x34b1ef)?'ZGygM'!==_0x4af661(0x86a)?this[_0x4af661(0x595)]()['removeChild'](_0x34b1ef):(_0x4ef7f6['BattleCore'][_0x4af661(0xb67)][_0x4af661(0x3a4)](this),this[_0x4af661(0x89b)]()):this[_0x4af661(0x26d)][_0x4af661(0x79e)](_0x34b1ef);this[_0x4af661(0x69e)][_0x4af661(0x79e)](_0x34b1ef),this[_0x4af661(0x26d)][_0x4af661(0x79e)](_0x34b1ef),this[_0x4af661(0xa17)]['remove'](_0x34b1ef);if(this[_0x4af661(0xe0d)])this['_fauxAnimationSprites'][_0x4af661(0xbde)](_0x34b1ef);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x605)]=Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xa84)],Spriteset_Battle[_0x4c6a01(0xc58)]['updateActors']=function(){const _0x21627d=_0x4c6a01;VisuMZ[_0x21627d(0x5e5)][_0x21627d(0x605)][_0x21627d(0x3a4)](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xa48)]=function(){const _0x59e490=_0x4c6a01;this[_0x59e490(0x8c1)][_0x59e490(0x217)][_0x59e490(0xa04)](this[_0x59e490(0xbbf)][_0x59e490(0x5e0)](this)),this['putActiveBattlerOnTop']();if(!this[_0x59e490(0x8c1)])return;this['_battlerContainer'][_0x59e490(0x973)]=this[_0x59e490(0x6f0)]();},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xbbf)]=function(_0x501860,_0x45dcc0){const _0x243beb=_0x4c6a01;if(VisuMZ[_0x243beb(0x5e5)][_0x243beb(0x32d)][_0x243beb(0x9ad)][_0x243beb(0x719)]){if(_0x501860['_battler']&&_0x45dcc0[_0x243beb(0xbf3)]){if(_0x501860[_0x243beb(0xbf3)]['isActor']()&&_0x45dcc0[_0x243beb(0xbf3)][_0x243beb(0xb37)]())return 0x1;else{if(_0x45dcc0[_0x243beb(0xbf3)][_0x243beb(0x966)]()&&_0x501860[_0x243beb(0xbf3)][_0x243beb(0xb37)]()){if(_0x243beb(0x405)==='FXgBm')_0x38e2d3=_0x1166c9;else return-0x1;}}}}return _0x501860[_0x243beb(0xcaa)]!==_0x45dcc0['_baseY']?_0x501860[_0x243beb(0xcaa)]-_0x45dcc0[_0x243beb(0xcaa)]:_0x243beb(0xc77)==='aivvF'?this[_0x243beb(0x841)]()&&!this[_0x243beb(0x5fa)]()?this[_0x243beb(0xcdf)]():_0x189d42['BattleCore'][_0x243beb(0x7bb)][_0x243beb(0x3a4)](this):_0x45dcc0[_0x243beb(0xadb)]-_0x501860[_0x243beb(0xadb)];},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x809)]=function(){const _0x168730=_0x4c6a01;if(!VisuMZ[_0x168730(0x5e5)][_0x168730(0x32d)]['Actor'][_0x168730(0xc6f)])return;const _0x20343=BattleManager['_subject'];if(_0x20343){if(_0x168730(0xe12)!=='yQzqs'){if(_0x20343[_0x168730(0x966)]()&&!$gameSystem['isSideView']())return;const _0xc80dcd=_0x20343['battler']();if(_0xc80dcd&&_0x20343[_0x168730(0x966)]())this[_0x168730(0x8c1)][_0x168730(0x279)](_0xc80dcd);}else{const _0x3060fd=this[_0x168730(0x72f)]();if(_0x3060fd&&_0x3948cd)_0x3060fd[_0x168730(0x3ad)]();return;}}},Spriteset_Battle['prototype']['processEscape']=function(){const _0x5a9810=_0x4c6a01;for(const _0x3ddfae of $gameParty['aliveMembers']()){if(!_0x3ddfae)continue;if(!_0x3ddfae[_0x5a9810(0x72f)]())continue;_0x3ddfae['battler']()[_0x5a9810(0xe08)]=!![],_0x3ddfae[_0x5a9810(0x72f)]()[_0x5a9810(0xbee)]();}},Spriteset_Battle[_0x4c6a01(0xc58)]['createUIContainer']=function(){const _0x201737=_0x4c6a01;this[_0x201737(0x2c1)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?'UUiIL'===_0x201737(0x66a)?this[_0x201737(0x279)](this[_0x201737(0x2c1)]):(this['_baseX']=this['x'],this[_0x201737(0xcaa)]=this['y'],this[_0x201737(0xb08)](),this[_0x201737(0xd38)](),this['x']+=this[_0x201737(0x65c)](),this['y']+=this[_0x201737(0xb8f)](),this['y']+=this['extraPositionScaledY'](),this['x']=_0x2d9a44[_0x201737(0x989)](this['x']),this['y']=_0x1003c2[_0x201737(0x989)](this['y'])):this[_0x201737(0xb23)][_0x201737(0x279)](this[_0x201737(0x2c1)]),SceneManager['_scene'][_0x201737(0x2c1)]=this[_0x201737(0x2c1)];},Spriteset_Battle[_0x4c6a01(0xc58)]['createEnemyNames']=function(){const _0x3d7d55=_0x4c6a01;if(VisuMZ[_0x3d7d55(0x5e5)]['Settings'][_0x3d7d55(0x82d)][_0x3d7d55(0x754)])return;this[_0x3d7d55(0xc6e)]=new Sprite(),BattleManager['addChildToUiContainer'](this[_0x3d7d55(0xc6e)]);for(const _0x428654 of this['_enemySprites']){if(_0x3d7d55(0x3a5)!==_0x3d7d55(0x3a5)){this[_0x3d7d55(0xde6)][_0x3d7d55(0xb68)](),this[_0x3d7d55(0xa1d)][_0x3d7d55(0x5de)]();if(!_0x1925bc[_0x3d7d55(0x5e5)][_0x3d7d55(0x4c9)])return;if(_0x112f42[_0x3d7d55(0xad7)]&&_0x3124c6[_0x3d7d55(0x7a0)]())return;if(_0x4fbd4c[_0x3d7d55(0x99c)]){_0x123943[_0x3d7d55(0x99c)]['setActionState'](_0x3d7d55(0x512));const _0x12fd54=_0x24dcf9[_0x3d7d55(0x99c)][_0x3d7d55(0x72f)]();if(_0x12fd54)_0x12fd54[_0x3d7d55(0x6b8)]();}_0x40887b[_0x3d7d55(0x99c)]=null;}else{const _0x5d15ca=new Sprite_EnemyName();this['_enemyNameContainer'][_0x3d7d55(0x279)](_0x5d15ca),_0x5d15ca[_0x3d7d55(0x322)](_0x428654);}}},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xc60)]=function(){const _0x1e3397=_0x4c6a01;if(!this[_0x1e3397(0x2a2)])return;if(!this['_uiContainer'])return;const _0x59ec19=Spriteset_Battle['ANTI_TINT_UI']?this['_damageContainer']['x']:0x0,_0x57710a=Spriteset_Battle[_0x1e3397(0x278)]?this[_0x1e3397(0x2a2)]['y']:0x0,_0x12c087=Imported['VisuMZ_3_ActSeqCamera']?this[_0x1e3397(0xb23)]['x']:0x0,_0x8f3c99=Imported[_0x1e3397(0x880)]?this[_0x1e3397(0xb23)]['y']:0x0;this['_uiContainer']['x']=_0x59ec19+_0x12c087,this[_0x1e3397(0x2c1)]['y']=_0x57710a+_0x8f3c99;},BattleManager[_0x4c6a01(0x40f)]=function(_0xd7e83a){const _0x2b3fdd=_0x4c6a01;if(!SceneManager['_scene'][_0x2b3fdd(0x2c1)])return;SceneManager[_0x2b3fdd(0x4c1)][_0x2b3fdd(0x2c1)][_0x2b3fdd(0x279)](_0xd7e83a);},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x6f0)]=function(){return 0xff;},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x5a4)]=function(){return![];},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x1ff)]=function(){const _0x4267b1=_0x4c6a01;return this[_0x4267b1(0x94e)]()['some'](_0x31afda=>_0x31afda[_0x4267b1(0xabb)]());},Spriteset_Battle['prototype']['isAnyoneJumping']=function(){const _0xdd65af=_0x4c6a01;return this[_0xdd65af(0x94e)]()[_0xdd65af(0x664)](_0x115148=>_0x115148[_0xdd65af(0xc59)]());},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x773)]=function(){const _0x2ec2bb=_0x4c6a01;return this[_0x2ec2bb(0x94e)]()[_0x2ec2bb(0x664)](_0x4621a1=>_0x4621a1['isGrowing']());},Spriteset_Battle[_0x4c6a01(0xc58)]['isAnyoneSkewing']=function(){const _0x141b4d=_0x4c6a01;return this['battlerSprites']()[_0x141b4d(0x664)](_0x5ab71e=>_0x5ab71e[_0x141b4d(0x52d)]());},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0x778)]=function(){const _0x4ccfee=_0x4c6a01;return this[_0x4ccfee(0x94e)]()[_0x4ccfee(0x664)](_0x5e9c0f=>_0x5e9c0f[_0x4ccfee(0x7b2)]());},Spriteset_Battle[_0x4c6a01(0xc58)][_0x4c6a01(0xa9c)]=function(){const _0x33202a=_0x4c6a01;return this[_0x33202a(0x94e)]()[_0x33202a(0x664)](_0x436439=>_0x436439[_0x33202a(0x3bd)]());},VisuMZ[_0x4c6a01(0x5e5)]['Window_ItemList_maxCols']=Window_ItemList[_0x4c6a01(0xc58)][_0x4c6a01(0x37c)],Window_ItemList['prototype'][_0x4c6a01(0x37c)]=function(){const _0x3970e8=_0x4c6a01;if(SceneManager[_0x3970e8(0x503)]()){if(SceneManager[_0x3970e8(0x4c1)][_0x3970e8(0xd3a)]()===_0x3970e8(0x2ab)){if(_0x3970e8(0x9d2)===_0x3970e8(0x9d2))return VisuMZ[_0x3970e8(0x5e5)]['Settings'][_0x3970e8(0x376)][_0x3970e8(0x5c5)];else this[_0x3970e8(0xaba)][_0x3970e8(0x5de)](),this[_0x3970e8(0xa49)][_0x3970e8(0x5de)]();}else return VisuMZ[_0x3970e8(0x5e5)][_0x3970e8(0x32d)][_0x3970e8(0x376)]['SkillItemStandardCols'];}else return VisuMZ[_0x3970e8(0x5e5)][_0x3970e8(0x72c)]['call'](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x328)]=Window_SkillList[_0x4c6a01(0xc58)][_0x4c6a01(0x37c)],Window_SkillList[_0x4c6a01(0xc58)][_0x4c6a01(0x37c)]=function(){const _0x5ee0b9=_0x4c6a01;if(SceneManager[_0x5ee0b9(0x503)]()){if(SceneManager[_0x5ee0b9(0x4c1)][_0x5ee0b9(0xd3a)]()===_0x5ee0b9(0x2ab)){if(_0x5ee0b9(0x910)!==_0x5ee0b9(0x910))this[_0x5ee0b9(0xbe1)]();else return VisuMZ[_0x5ee0b9(0x5e5)][_0x5ee0b9(0x32d)]['BattleLayout'][_0x5ee0b9(0x5c5)];}else{if('dSNAA'!==_0x5ee0b9(0x8d0))this[_0x5ee0b9(0x545)]=0x0,this[_0x5ee0b9(0xcaa)]=0x0,this['_floatHeight']=0x0,this[_0x5ee0b9(0x4fe)]=0x0,this[_0x5ee0b9(0x389)]=0x0,this['_floatWholeDuration']=0x0,this['_floatEasing']=_0x5ee0b9(0x883),this[_0x5ee0b9(0xc3c)]=0x0,this[_0x5ee0b9(0xb3c)]=0x0,this['_jumpDuration']=0x0,this['_jumpWholeDuration']=0x0,this[_0x5ee0b9(0xaf0)]=0xff,this['_opacityDuration']=0x0,this['_opacityWholeDuration']=0x0,this[_0x5ee0b9(0x789)]=_0x5ee0b9(0x883),this[_0x5ee0b9(0xd61)]=0x0,this[_0x5ee0b9(0x44e)]=0x0,this[_0x5ee0b9(0x219)]=0x0,this[_0x5ee0b9(0x21f)]=0x0,this[_0x5ee0b9(0xa25)]=_0x5ee0b9(0x883),this[_0x5ee0b9(0x75b)]=!![],this['_skewX']=0x0,this[_0x5ee0b9(0xdbc)]=0x0,this[_0x5ee0b9(0x248)]=0x0,this[_0x5ee0b9(0xa0a)]=0x0,this['_skewDuration']=0x0,this['_skewWholeDuration']=0x0,this[_0x5ee0b9(0x600)]=_0x5ee0b9(0x883),this[_0x5ee0b9(0xc1c)]=0x1,this[_0x5ee0b9(0x7f8)]=0x1,this[_0x5ee0b9(0x738)]=0x1,this['_targetGrowY']=0x1,this[_0x5ee0b9(0x826)]=0x0,this[_0x5ee0b9(0xa47)]=0x0,this['_growEasing']=_0x5ee0b9(0x883),this[_0x5ee0b9(0xa4e)]=0x1,this[_0x5ee0b9(0x67f)]=0x0,this['_targetHomeY']=0x0,this['_homeDuration']=0x0,this[_0x5ee0b9(0x96d)]=0x0,this[_0x5ee0b9(0x73d)]=_0x5ee0b9(0x883),this[_0x5ee0b9(0xc1b)]=0x0,this[_0x5ee0b9(0x413)]=0x0;else return VisuMZ[_0x5ee0b9(0x5e5)][_0x5ee0b9(0x32d)]['BattleLayout'][_0x5ee0b9(0x9ca)];}}else return VisuMZ[_0x5ee0b9(0x5e5)][_0x5ee0b9(0x328)][_0x5ee0b9(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x6b1)]=Window_Options[_0x4c6a01(0xc58)][_0x4c6a01(0x318)],Window_Options[_0x4c6a01(0xc58)][_0x4c6a01(0x318)]=function(){const _0x41f82b=_0x4c6a01;VisuMZ[_0x41f82b(0x5e5)][_0x41f82b(0x6b1)][_0x41f82b(0x3a4)](this),this[_0x41f82b(0x3bf)](),this['addShowHpGaugeCommand']();},Window_Options['prototype'][_0x4c6a01(0x3bf)]=function(){const _0x35b1cf=_0x4c6a01;if(VisuMZ[_0x35b1cf(0x5e5)][_0x35b1cf(0x32d)][_0x35b1cf(0x4f8)]['AddOption']){if('zsWXO'!=='Mupix')this[_0x35b1cf(0xadf)](),this[_0x35b1cf(0x6fa)]();else{const _0x8e69e0=_0x5aef6d[_0x35b1cf(0x5e5)]['Settings'][_0x35b1cf(0x4bd)],_0x1f0864=_0x8e69e0[_0x35b1cf(0xdd3)],_0x13e77c=_0x15797c[_0x1f0864];if(_0x13e77c&&_0x4b38f6[_0x35b1cf(0x5e5)][_0x35b1cf(0xc90)](_0x1f0864)){const _0x1dd059=this['isOnCurrentMap']()?this['_eventId']:0x0,_0x40eb68=_0x13e77c[_0x35b1cf(0x85a)];this[_0x35b1cf(0x2a1)](_0x40eb68,_0x1dd059),this[_0x35b1cf(0x4b2)]=_0x356ad8[_0x35b1cf(0x349)](this[_0x35b1cf(0x4b2)]);const _0x2e1f97={'code':0xbc3,'indent':this[_0x35b1cf(0xb83)],'parameters':_0x177c45[_0x35b1cf(0x349)](_0x17d961)};return this['_list']['splice'](this['_index']+0x1,0x0,_0x2e1f97),!![];}else return _0xc63134[_0x35b1cf(0x5e5)]['Game_Interpreter_command301']['call'](this,_0x47fc6a);}}},Window_Options['prototype'][_0x4c6a01(0x69f)]=function(){const _0x630171=_0x4c6a01;if(!VisuMZ[_0x630171(0x5e5)][_0x630171(0x32d)][_0x630171(0x64f)][_0x630171(0x452)])return;const _0x565013=TextManager[_0x630171(0xc47)],_0x27d4ca=_0x630171(0xc47);this[_0x630171(0x39b)](_0x565013,_0x27d4ca);},Window_Options[_0x4c6a01(0xc58)][_0x4c6a01(0xadf)]=function(){const _0x4edbc8=_0x4c6a01,_0x31911=TextManager[_0x4edbc8(0x71c)],_0x1ad4e8='autoBattleAtStart';this['addCommand'](_0x31911,_0x1ad4e8);},Window_Options[_0x4c6a01(0xc58)][_0x4c6a01(0x6fa)]=function(){const _0x569040=_0x4c6a01,_0x3623a6=TextManager[_0x569040(0x619)],_0x212e74=_0x569040(0xa1b);this[_0x569040(0x39b)](_0x3623a6,_0x212e74);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x624)]=Window_Options[_0x4c6a01(0xc58)][_0x4c6a01(0xda5)],Window_Options[_0x4c6a01(0xc58)]['statusText']=function(_0x3bea5a){const _0x2af92e=_0x4c6a01,_0x3dd4e6=this[_0x2af92e(0x9d1)](_0x3bea5a);if(_0x3dd4e6===_0x2af92e(0xa1b)){if(_0x2af92e(0x6da)===_0x2af92e(0x4a2)){const _0x2c7e7d=_0x377fbf(_0x2487c5['$1'])[_0x2af92e(0xcaf)](/[\r\n]+/)['remove']('');_0x557e6a[_0x2af92e(0x2db)]=_0x1968e8[_0x2af92e(0x96b)](_0x2c7e7d);}else return this[_0x2af92e(0x70a)]();}else return VisuMZ[_0x2af92e(0x5e5)][_0x2af92e(0x624)]['call'](this,_0x3bea5a);},Window_Options[_0x4c6a01(0xc58)][_0x4c6a01(0x70a)]=function(){const _0x394239=_0x4c6a01,_0x36478d=VisuMZ[_0x394239(0x5e5)][_0x394239(0x32d)][_0x394239(0x4f8)],_0x4232a5=this['getConfigValue'](_0x394239(0xa1b));return _0x4232a5?_0x36478d[_0x394239(0x339)]:_0x36478d[_0x394239(0x531)];},Window_ShopStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xcb6)]=function(){const _0x2bd71f=_0x4c6a01,_0x4fca19=DataManager[_0x2bd71f(0x465)](this[_0x2bd71f(0xc21)]),_0x57f170=VisuMZ[_0x2bd71f(0x586)][_0x4fca19];if(!_0x57f170)return this['getItemDamageAmountLabelOriginal']();const _0x5a4a8d='DamageType%1'['format'](this[_0x2bd71f(0xc21)]['damage']['type']),_0x1e0ccd=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x2bd71f(0xc21)][_0x2bd71f(0x6fc)]['type']];return _0x57f170[_0x5a4a8d][_0x2bd71f(0x511)](_0x1e0ccd);},Window_ShopStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x38b)]=function(){const _0x56a10d=_0x4c6a01,_0x448df4=DataManager[_0x56a10d(0x465)](this[_0x56a10d(0xc21)]),_0x25e8c7=VisuMZ['DamageStyles'][_0x448df4];if(!_0x25e8c7)return this[_0x56a10d(0x8af)]();return _0x25e8c7[_0x56a10d(0x31c)][_0x56a10d(0x3a4)](this);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x226)]=Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)],Window_PartyCommand[_0x4c6a01(0xc58)]['initialize']=function(_0x11c8fa){const _0x219479=_0x4c6a01;VisuMZ[_0x219479(0x5e5)][_0x219479(0x226)]['call'](this,_0x11c8fa),this['createCommandNameWindow'](_0x11c8fa);},Window_PartyCommand[_0x4c6a01(0xc58)]['createCommandNameWindow']=function(_0x1e1a2e){const _0x41ffe6=_0x4c6a01,_0x410ca0=new Rectangle(0x0,0x0,_0x1e1a2e[_0x41ffe6(0xe09)],_0x1e1a2e['height']);this['_commandNameWindow']=new Window_Base(_0x410ca0),this[_0x41ffe6(0x8df)][_0x41ffe6(0x973)]=0x0,this['addChild'](this[_0x41ffe6(0x8df)]),this['updateCommandNameWindow']();},Window_PartyCommand['prototype'][_0x4c6a01(0xce3)]=function(){const _0x46076c=_0x4c6a01;Window_Command[_0x46076c(0xc58)][_0x46076c(0xce3)][_0x46076c(0x3a4)](this);if(this[_0x46076c(0x8df)])this[_0x46076c(0x80d)]();},Window_PartyCommand[_0x4c6a01(0xc58)]['updateCommandNameWindow']=function(){const _0x25c04a=_0x4c6a01,_0x3fc662=this[_0x25c04a(0x8df)];_0x3fc662[_0x25c04a(0x95e)][_0x25c04a(0xd66)]();const _0x1c4161=this[_0x25c04a(0x334)](this[_0x25c04a(0x433)]());if(_0x1c4161===_0x25c04a(0xd69)&&this[_0x25c04a(0x8b8)]()>0x0){const _0x25b55e=this['itemLineRect'](this['index']());let _0x377021=this[_0x25c04a(0xd18)](this[_0x25c04a(0x433)]());_0x377021=_0x377021[_0x25c04a(0x6f6)](/\\I\[(\d+)\]/gi,''),_0x3fc662[_0x25c04a(0x598)](),this[_0x25c04a(0xaa6)](_0x377021,_0x25b55e),this[_0x25c04a(0x73c)](_0x377021,_0x25b55e),this[_0x25c04a(0x5f1)](_0x377021,_0x25b55e);}},Window_PartyCommand[_0x4c6a01(0xc58)]['commandNameWindowDrawBackground']=function(_0x78f20b,_0x5d6fd3){},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x73c)]=function(_0x11242b,_0x2b717f){const _0x462e79=_0x4c6a01,_0x2653ed=this[_0x462e79(0x8df)];_0x2653ed[_0x462e79(0xa5a)](_0x11242b,0x0,_0x2b717f['y'],_0x2653ed[_0x462e79(0x797)],_0x462e79(0x85d));},Window_PartyCommand[_0x4c6a01(0xc58)]['commandNameWindowCenter']=function(_0x46136d,_0x43d61c){const _0x67ec0f=_0x4c6a01,_0xbf6a6a=this[_0x67ec0f(0x8df)],_0xf7861b=$gameSystem['windowPadding'](),_0x4c2e6e=_0x43d61c['x']+Math[_0x67ec0f(0x989)](_0x43d61c['width']/0x2)+_0xf7861b;_0xbf6a6a['x']=_0xbf6a6a[_0x67ec0f(0xe09)]/-0x2+_0x4c2e6e,_0xbf6a6a['y']=Math[_0x67ec0f(0x989)](_0x43d61c[_0x67ec0f(0xb45)]/0x2);},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x2c2)]=function(){const _0x14a65a=_0x4c6a01;this[_0x14a65a(0xd1e)](),this[_0x14a65a(0xbe1)](),this[_0x14a65a(0x48a)](),this['addOptionsCommand'](),this[_0x14a65a(0x71b)]();},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xd1e)]=function(){const _0x379802=_0x4c6a01,_0x2733f8=this[_0x379802(0x3fe)](),_0x175601=VisuMZ[_0x379802(0x5e5)]['Settings']['PartyCmd']['CmdIconFight'],_0x1f1aae=_0x2733f8===_0x379802(0x2b8)?TextManager['fight']:_0x379802(0x751)[_0x379802(0x511)](_0x175601,TextManager['fight']),_0x270505=this[_0x379802(0x5aa)]();this[_0x379802(0x39b)](_0x1f1aae,_0x379802(0x56d),_0x270505);},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x5aa)]=function(){return!![];},Window_PartyCommand[_0x4c6a01(0xc58)]['addAutoBattleCommand']=function(){const _0x3e0556=_0x4c6a01;if(!this[_0x3e0556(0x947)]())return;const _0x46e41d=this[_0x3e0556(0x3fe)](),_0x447574=VisuMZ['BattleCore'][_0x3e0556(0x32d)][_0x3e0556(0x921)][_0x3e0556(0xcf9)],_0x27ba51=_0x46e41d===_0x3e0556(0x2b8)?TextManager[_0x3e0556(0x654)]:_0x3e0556(0x751)[_0x3e0556(0x511)](_0x447574,TextManager[_0x3e0556(0x654)]),_0x43ecbe=this['isAutoBattleCommandEnabled']();this[_0x3e0556(0x39b)](_0x27ba51,_0x3e0556(0x654),_0x43ecbe);},Window_PartyCommand['prototype'][_0x4c6a01(0x947)]=function(){const _0x468abe=_0x4c6a01;return VisuMZ[_0x468abe(0x5e5)]['Settings']['PartyCmd']['CommandAddAutoBattle'];},Window_PartyCommand[_0x4c6a01(0xc58)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x4c6a01(0xc58)]['addCustomCommands']=function(){},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x65a)]=function(){const _0x4550eb=_0x4c6a01;if(!this[_0x4550eb(0xc24)]())return;const _0x53a47b=this['commandStyle'](),_0x206983=VisuMZ[_0x4550eb(0x5e5)][_0x4550eb(0x32d)][_0x4550eb(0x921)][_0x4550eb(0x84f)],_0x15a4a2=_0x53a47b===_0x4550eb(0x2b8)?TextManager['options']:_0x4550eb(0x751)[_0x4550eb(0x511)](_0x206983,TextManager['options']),_0x25fbc0=this[_0x4550eb(0xdce)]();this[_0x4550eb(0x39b)](_0x15a4a2,_0x4550eb(0x6e8),_0x25fbc0);},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xc24)]=function(){const _0x57b2c6=_0x4c6a01;return VisuMZ[_0x57b2c6(0x5e5)]['Settings'][_0x57b2c6(0x921)]['CommandAddOptions'];},Window_PartyCommand[_0x4c6a01(0xc58)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x4c6a01(0x71b)]=function(){const _0x1b448f=_0x4c6a01,_0x3e435a=this['commandStyle'](),_0x3b16b6=VisuMZ['BattleCore'][_0x1b448f(0x32d)][_0x1b448f(0x921)][_0x1b448f(0x9ee)],_0x465132=_0x3e435a===_0x1b448f(0x2b8)?TextManager[_0x1b448f(0x340)]:_0x1b448f(0x751)[_0x1b448f(0x511)](_0x3b16b6,TextManager[_0x1b448f(0x340)]),_0x11237c=this[_0x1b448f(0x950)]();this['addCommand'](_0x465132,_0x1b448f(0x340),_0x11237c);},Window_PartyCommand[_0x4c6a01(0xc58)]['isEscapeCommandEnabled']=function(){const _0x280d63=_0x4c6a01;return BattleManager[_0x280d63(0x6e6)]();},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x3eb)]=function(){const _0x34aff2=_0x4c6a01;return VisuMZ[_0x34aff2(0x5e5)]['Settings'][_0x34aff2(0x921)][_0x34aff2(0x941)];},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xce9)]=function(_0xffbcc8){const _0x36f547=_0x4c6a01,_0x754df6=this[_0x36f547(0x334)](_0xffbcc8);if(_0x754df6==='iconText')_0x36f547(0x8d9)!=='kCwQL'?(this[_0x36f547(0x543)]('performAction',_0x58d9f2,_0x4fc464),this[_0x36f547(0x543)](_0x36f547(0xd78),_0x4e604a[_0x36f547(0x73a)]),this[_0x36f547(0x543)](_0x36f547(0x849),_0x2ffc60,_0x3f0c82['clone'](),_0x1683cc[_0x36f547(0x934)]),this[_0x36f547(0x543)]('waitForAnimation')):this[_0x36f547(0xbb8)](_0xffbcc8);else _0x754df6===_0x36f547(0xd69)?this['drawItemStyleIcon'](_0xffbcc8):Window_Command[_0x36f547(0xc58)][_0x36f547(0xce9)][_0x36f547(0x3a4)](this,_0xffbcc8);},Window_PartyCommand['prototype'][_0x4c6a01(0x3fe)]=function(){const _0x2f01f3=_0x4c6a01;return VisuMZ['BattleCore'][_0x2f01f3(0x32d)][_0x2f01f3(0x921)][_0x2f01f3(0x650)];},Window_PartyCommand[_0x4c6a01(0xc58)]['commandStyleCheck']=function(_0x38daf4){const _0x4aef14=_0x4c6a01;if(_0x38daf4<0x0)return _0x4aef14(0x2b8);const _0xdf696e=this['commandStyle']();if(_0xdf696e!==_0x4aef14(0x874))return _0xdf696e;else{if(this[_0x4aef14(0x8b8)]()>0x0){if(_0x4aef14(0x3c6)!=='qixDs'){const _0xa8133f=this[_0x4aef14(0xd18)](_0x38daf4);if(_0xa8133f['match'](/\\I\[(\d+)\]/i)){const _0x501e1b=this[_0x4aef14(0xc94)](_0x38daf4),_0x298910=this[_0x4aef14(0x6f2)](_0xa8133f)[_0x4aef14(0xe09)];if(_0x298910<=_0x501e1b['width']){if(_0x4aef14(0x2bc)!==_0x4aef14(0x2bc)){if(!this[_0x4aef14(0xa03)])return;this[_0x4aef14(0x338)]=this[_0x4aef14(0x338)]||_0x3acc29[_0x4aef14(0xc58)][_0x4aef14(0x833)](),this['x']=_0x1c633e[_0x4aef14(0x9c7)](this[_0x4aef14(0xa03)]['_baseX']),this['y']=_0x14bfe8[_0x4aef14(0x9c7)](this[_0x4aef14(0xa03)][_0x4aef14(0xcaa)]-this[_0x4aef14(0x338)]*0.5);const _0x442294=_0x22d04c[_0x4aef14(0x5e5)][_0x4aef14(0x32d)]['Enemy'];this['x']+=_0x455800[_0x4aef14(0x9c7)](_0x442294[_0x4aef14(0x4ae)]||0x0),this['y']+=_0x436559['round'](_0x442294[_0x4aef14(0x704)]||0x0);}else return'iconText';}else{if(_0x4aef14(0x4f9)!==_0x4aef14(0x4f9))_0x96a5e4=(_0xc017e3+_0x421bd2)/0x2;else return _0x4aef14(0xd69);}}}else{if(!this[_0x4aef14(0xbf3)])return 0x0;if(this[_0x4aef14(0x7fe)])return this[_0x4aef14(0x7fe)];const _0x36cb0e=this[_0x4aef14(0x2c7)]();return this['setupFont'](),this[_0x4aef14(0x7fe)]=this['bitmap'][_0x4aef14(0x300)](_0x36cb0e)||0x1,this['_cacheTextWidth'];}}}return _0x4aef14(0x2b8);},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xbb8)]=function(_0x28ac0d){const _0x13df88=_0x4c6a01,_0x25f3d1=this[_0x13df88(0xc94)](_0x28ac0d),_0x196f68=this[_0x13df88(0xd18)](_0x28ac0d),_0x2420a0=this[_0x13df88(0x6f2)](_0x196f68)['width'];this[_0x13df88(0x935)](this[_0x13df88(0xa6a)](_0x28ac0d));const _0x320175=this[_0x13df88(0x3eb)]();if(_0x320175==='right')this['drawTextEx'](_0x196f68,_0x25f3d1['x']+_0x25f3d1[_0x13df88(0xe09)]-_0x2420a0,_0x25f3d1['y'],_0x2420a0);else{if(_0x320175===_0x13df88(0x85d)){const _0x4613e9=_0x25f3d1['x']+Math['floor']((_0x25f3d1['width']-_0x2420a0)/0x2);this[_0x13df88(0x7de)](_0x196f68,_0x4613e9,_0x25f3d1['y'],_0x2420a0);}else{if(_0x13df88(0x378)===_0x13df88(0x9be)){this[_0x13df88(0xb6f)]=null,_0x45dd0a[_0x13df88(0x5e5)]['Window_BattleEnemy_initialize'][_0x13df88(0x3a4)](this,_0x582990);if(_0x52335a[_0x13df88(0x361)]){if(_0x406677[_0x13df88(0x70f)][_0x13df88(0x542)]<1.12){let _0x5413ce='';_0x5413ce+=_0x13df88(0x71d),_0x5413ce+='in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20',_0x5413ce+=_0x13df88(0x5eb),_0x201e1e(_0x5413ce),_0x493fbd[_0x13df88(0x6d4)]();}}}else this[_0x13df88(0x7de)](_0x196f68,_0x25f3d1['x'],_0x25f3d1['y'],_0x2420a0);}}},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x59c)]=function(_0x1a53b3){const _0x3e88ab=_0x4c6a01;this[_0x3e88ab(0xd18)](_0x1a53b3)[_0x3e88ab(0x996)](/\\I\[(\d+)\]/i);const _0x247816=Number(RegExp['$1'])||0x0,_0x9458a=this[_0x3e88ab(0xc94)](_0x1a53b3),_0x1b3258=_0x9458a['x']+Math[_0x3e88ab(0x989)]((_0x9458a[_0x3e88ab(0xe09)]-ImageManager[_0x3e88ab(0x24a)])/0x2),_0x38e3b0=_0x9458a['y']+(_0x9458a[_0x3e88ab(0xb45)]-ImageManager[_0x3e88ab(0xd84)])/0x2;this[_0x3e88ab(0xd51)](_0x247816,_0x1b3258,_0x38e3b0);},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xd46)]=function(){},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xac2)]=function(){const _0x3e4150=_0x4c6a01;Window_Command[_0x3e4150(0xc58)][_0x3e4150(0xac2)]['call'](this);const _0x55da2e=this[_0x3e4150(0xd3a)]();if(_0x55da2e===_0x3e4150(0x2ab)){if(_0x3e4150(0x550)===_0x3e4150(0x550))this[_0x3e4150(0x8ab)]();else return _0x5d5d49[_0x3e4150(0x323)]();}},Window_PartyCommand['prototype'][_0x4c6a01(0xd3a)]=function(){const _0x3d5bf5=_0x4c6a01;if(this[_0x3d5bf5(0x6b2)])return this[_0x3d5bf5(0x6b2)];return this[_0x3d5bf5(0x6b2)]=SceneManager[_0x3d5bf5(0x4c1)][_0x3d5bf5(0xd3a)](),this[_0x3d5bf5(0x6b2)];},Window_PartyCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x8dc)]=function(){const _0x1702a3=_0x4c6a01,_0x1c6932=VisuMZ['BattleCore'][_0x1702a3(0x32d)][_0x1702a3(0x921)],_0x47893e=this[_0x1702a3(0x7b7)]();switch(_0x47893e){case'fight':this['_helpWindow'][_0x1702a3(0x48d)](_0x1c6932[_0x1702a3(0x5ec)]);break;case'autoBattle':this['_helpWindow'][_0x1702a3(0x48d)](_0x1c6932[_0x1702a3(0xa31)]);break;case _0x1702a3(0x6e8):this['_helpWindow'][_0x1702a3(0x48d)](_0x1c6932[_0x1702a3(0x60a)]);break;case _0x1702a3(0x340):this[_0x1702a3(0x7ed)][_0x1702a3(0x48d)](_0x1c6932[_0x1702a3(0x9e0)]);break;default:this[_0x1702a3(0x7ed)][_0x1702a3(0x48d)]('');break;}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x757)]=Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)],Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)]=function(_0x15cf0b){const _0x13b52d=_0x4c6a01;VisuMZ['BattleCore'][_0x13b52d(0x757)][_0x13b52d(0x3a4)](this,_0x15cf0b),this[_0x13b52d(0x553)](_0x15cf0b);},Window_ActorCommand[_0x4c6a01(0xc58)]['createCommandNameWindow']=function(_0x66217){const _0x207953=_0x4c6a01,_0x1f02c3=new Rectangle(0x0,0x0,_0x66217[_0x207953(0xe09)],_0x66217['height']);this[_0x207953(0x8df)]=new Window_Base(_0x1f02c3),this['_commandNameWindow'][_0x207953(0x973)]=0x0,this[_0x207953(0x279)](this[_0x207953(0x8df)]),this[_0x207953(0x80d)]();},Window_ActorCommand[_0x4c6a01(0xc58)]['callUpdateHelp']=function(){const _0x3bd044=_0x4c6a01;Window_Command[_0x3bd044(0xc58)]['callUpdateHelp'][_0x3bd044(0x3a4)](this);if(this[_0x3bd044(0x8df)])this[_0x3bd044(0x80d)]();},Window_ActorCommand['prototype'][_0x4c6a01(0x80d)]=function(){const _0x2b0730=_0x4c6a01,_0x19c399=this[_0x2b0730(0x8df)];_0x19c399[_0x2b0730(0x95e)][_0x2b0730(0xd66)]();const _0x154795=this[_0x2b0730(0x334)](this[_0x2b0730(0x433)]());if(_0x154795===_0x2b0730(0xd69)&&this[_0x2b0730(0x8b8)]()>0x0){if(_0x2b0730(0x462)!==_0x2b0730(0xa63)){const _0x38a0ac=this[_0x2b0730(0xc94)](this[_0x2b0730(0x433)]());let _0x558cdc=this[_0x2b0730(0xd18)](this[_0x2b0730(0x433)]());_0x558cdc=_0x558cdc[_0x2b0730(0x6f6)](/\\I\[(\d+)\]/gi,''),_0x19c399[_0x2b0730(0x598)](),this[_0x2b0730(0xaa6)](_0x558cdc,_0x38a0ac),this[_0x2b0730(0x73c)](_0x558cdc,_0x38a0ac),this[_0x2b0730(0x5f1)](_0x558cdc,_0x38a0ac);}else{if(_0x11a36e>_0x1b8c36[_0x2b0730(0x545)])_0x2faa02=!![];if(_0x47f465<_0x1dd3a5[_0x2b0730(0x545)])_0x5ed389=![];}}},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xaa6)]=function(_0x907a87,_0x130798){},Window_ActorCommand['prototype'][_0x4c6a01(0x73c)]=function(_0x5d0758,_0x501c2a){const _0x3dc21d=_0x4c6a01,_0x42cd2f=this[_0x3dc21d(0x8df)];_0x42cd2f[_0x3dc21d(0xa5a)](_0x5d0758,0x0,_0x501c2a['y'],_0x42cd2f[_0x3dc21d(0x797)],_0x3dc21d(0x85d));},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x5f1)]=function(_0x418ca5,_0x577fd5){const _0xe47014=_0x4c6a01,_0x589def=this[_0xe47014(0x8df)],_0x44d0ea=$gameSystem[_0xe47014(0x7ee)](),_0x3ec268=_0x577fd5['x']+Math['floor'](_0x577fd5[_0xe47014(0xe09)]/0x2)+_0x44d0ea;_0x589def['x']=_0x589def[_0xe47014(0xe09)]/-0x2+_0x3ec268,_0x589def['y']=Math[_0xe47014(0x989)](_0x577fd5[_0xe47014(0xb45)]/0x2);},Window_ActorCommand['prototype'][_0x4c6a01(0x2c2)]=function(){const _0xf739ab=_0x4c6a01;if(!this['_actor'])return;const _0x4275b0=this['_actor'][_0xf739ab(0x502)]();for(const _0x3a6fdb of _0x4275b0){this[_0xf739ab(0x8be)](_0x3a6fdb[_0xf739ab(0xc9f)]()[_0xf739ab(0x4e9)]());}},Window_ActorCommand['prototype']['makeBattleCommand']=function(_0x107f7a){const _0x20e0ed=_0x4c6a01;if(_0x107f7a===_0x20e0ed(0x5f8)){if('KyBQs'===_0x20e0ed(0x6a0)){const _0x4667c3=this['findSymbolExt'](_0x20e0ed(0x8ed),_0x361e5f['stypeId']);this[_0x20e0ed(0x375)](_0x4667c3||0x0);}else this[_0x20e0ed(0xc14)]();}[_0x20e0ed(0x4cb),_0x20e0ed(0x823)][_0x20e0ed(0x864)](_0x107f7a)&&('CdARh'!==_0x20e0ed(0x8bc)?this[_0x20e0ed(0x9fd)]():this[_0x20e0ed(0x2e0)]=this[_0x20e0ed(0x4fe)]);if(_0x107f7a===_0x20e0ed(0x62a)){if('qVtGE'===_0x20e0ed(0xa92))this['addGuardCommand']();else{if(!_0x57b1c1[_0x20e0ed(0xc58)][_0x20e0ed(0x9f8)][_0x20e0ed(0x3a4)](this,_0x588689))return!![];if(!_0x169d36['prototype']['checkShowHideSwitchNotetags'][_0x20e0ed(0x3a4)](this,_0x4ca611))return!![];if(!_0x37ea0f['prototype'][_0x20e0ed(0x460)][_0x20e0ed(0x3a4)](this,_0xe01156))return!![];}}_0x107f7a===_0x20e0ed(0xc61)&&this['addItemCommand']();_0x107f7a===_0x20e0ed(0x46a)&&this['addEscapeCommand']();_0x107f7a==='AUTO\x20BATTLE'&&(_0x20e0ed(0xc0b)!==_0x20e0ed(0xc0b)?this['addChild'](this[_0x20e0ed(0x26d)]):this['addAutoBattleCommand']());if(_0x107f7a['match'](/STYPE: (\d+)/i)){const _0x2a967c=Number(RegExp['$1']);this[_0x20e0ed(0x93f)](_0x2a967c);}else{if(_0x107f7a[_0x20e0ed(0x996)](/STYPE: (.*)/i)){if(_0x20e0ed(0x30d)!==_0x20e0ed(0x30d))this['updateHomeMove'](),_0x183ed2[_0x20e0ed(0x5e5)]['Sprite_Battler_updatePosition']['call'](this),this[_0x20e0ed(0xbb4)](),this[_0x20e0ed(0x541)]();else{const _0x52d523=DataManager[_0x20e0ed(0x448)](RegExp['$1']);this[_0x20e0ed(0x93f)](_0x52d523);}}}_0x107f7a==='ALL\x20SKILLS'&&(_0x20e0ed(0xc22)!==_0x20e0ed(0xbaa)?this[_0x20e0ed(0x785)]():_0x2bc7c9['BattleCore'][_0x20e0ed(0x32d)][_0x20e0ed(0x4f8)][_0x20e0ed(0x66c)]&&(this[_0x20e0ed(0xadf)](),this[_0x20e0ed(0x6fa)]()));if(_0x107f7a[_0x20e0ed(0x996)](/SKILL: (\d+)/i)){const _0x203e90=Number(RegExp['$1']);this[_0x20e0ed(0x8a9)]($dataSkills[_0x203e90]);}else{if(_0x107f7a[_0x20e0ed(0x996)](/SKILL: (.*)/i)){if(_0x20e0ed(0xdab)===_0x20e0ed(0xdab)){const _0x31f89b=DataManager[_0x20e0ed(0x60e)](RegExp['$1']);this[_0x20e0ed(0x8a9)]($dataSkills[_0x31f89b]);}else{const _0x385d2a=this[_0x20e0ed(0xd3a)]();if(['xp'][_0x20e0ed(0x864)](_0x385d2a)&&!_0x4f74c8[_0x20e0ed(0x7a2)]()){this[_0x20e0ed(0x3fb)](0x0,0x0,0x0,0x0);return;}_0x52171f[_0x20e0ed(0xc58)][_0x20e0ed(0x4ec)]['call'](this);}}}if(_0x107f7a==='PARTY'&&Imported[_0x20e0ed(0xc5f)]){if('VjaqT'===_0x20e0ed(0x9e6))return _0x3f6628(_0x2513bf['$2']);else this['addPartyCommand']();}[_0x20e0ed(0xa50),_0x20e0ed(0x343)][_0x20e0ed(0x864)](_0x107f7a)&&Imported[_0x20e0ed(0xda6)]&&(_0x20e0ed(0xbcb)!==_0x20e0ed(0xb3f)?this[_0x20e0ed(0x70c)]():_0x4de806['BattleCore'][_0x20e0ed(0x617)][_0x20e0ed(0x3a4)](this)),_0x107f7a===_0x20e0ed(0x310)&&Imported[_0x20e0ed(0x9f7)]&&this['addWeaponSwapCommand'](!![]),_0x107f7a==='GRID\x20MOVE'&&Imported[_0x20e0ed(0xbad)]&&('tkJdq'===_0x20e0ed(0x7b1)?this[_0x20e0ed(0xc1d)][_0x20e0ed(0x279)](this[_0x20e0ed(0x551)]):this[_0x20e0ed(0xb9c)]());},Window_ActorCommand['prototype'][_0x4c6a01(0xc14)]=function(){const _0x3a3b7e=_0x4c6a01,_0x7c0ce0=$dataSkills[this[_0x3a3b7e(0x2fc)]['attackSkillId']()];if(!_0x7c0ce0)return;if(!this[_0x3a3b7e(0x8ca)](_0x7c0ce0))return;const _0x1beabf=this[_0x3a3b7e(0x3fe)](),_0x22815d=DataManager['battleCommandName'](_0x7c0ce0),_0x3a913a=DataManager['battleCommandIcon'](_0x7c0ce0),_0x26a5a6=_0x1beabf===_0x3a3b7e(0x2b8)?_0x22815d:_0x3a3b7e(0x751)['format'](_0x3a913a,_0x22815d);this['addCommand'](_0x26a5a6,_0x3a3b7e(0x2dc),this[_0x3a3b7e(0x2fc)][_0x3a3b7e(0x759)]());},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xd35)]=function(){const _0x30d949=_0x4c6a01,_0x5159a4=$dataSkills[this[_0x30d949(0x2fc)][_0x30d949(0x42a)]()];if(!_0x5159a4)return;if(!this[_0x30d949(0x8ca)](_0x5159a4))return;const _0x21cd40=this[_0x30d949(0x3fe)](),_0x52dd37=DataManager[_0x30d949(0x5bc)](_0x5159a4),_0x139a5a=DataManager[_0x30d949(0x247)](_0x5159a4),_0x468c3c=_0x21cd40===_0x30d949(0x2b8)?_0x52dd37:_0x30d949(0x751)[_0x30d949(0x511)](_0x139a5a,_0x52dd37);this['addCommand'](_0x468c3c,_0x30d949(0x555),this[_0x30d949(0x2fc)][_0x30d949(0x274)]());},Window_ActorCommand['prototype'][_0x4c6a01(0x7fc)]=function(){const _0x5e3341=_0x4c6a01,_0xd3df03=this[_0x5e3341(0x3fe)](),_0x69f63a=VisuMZ[_0x5e3341(0x5e5)][_0x5e3341(0x32d)][_0x5e3341(0xbe8)][_0x5e3341(0x4e6)],_0x5e0547=_0xd3df03===_0x5e3341(0x2b8)?TextManager[_0x5e3341(0x6a7)]:_0x5e3341(0x751)['format'](_0x69f63a,TextManager[_0x5e3341(0x6a7)]),_0xf9ad38=this['isItemCommandEnabled']();this[_0x5e3341(0x39b)](_0x5e0547,_0x5e3341(0x6a7),_0xf9ad38);},Window_ActorCommand['prototype'][_0x4c6a01(0x9fa)]=function(){const _0x4d242e=_0x4c6a01;return this[_0x4d242e(0x2fc)]&&this[_0x4d242e(0x2fc)][_0x4d242e(0x360)]();},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x9fd)]=function(){const _0x14fbbb=_0x4c6a01,_0x3ef720=this['_actor'][_0x14fbbb(0x7f0)]();for(const _0xaf65e4 of _0x3ef720){'tMreV'===_0x14fbbb(0xc4e)?this[_0x14fbbb(0x93f)](_0xaf65e4):_0x154c24['changeCtbCastTime'](_0x2dd8af);}},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x93f)]=function(_0x5ecb3c){const _0x3c1caa=_0x4c6a01;let _0x353499=$dataSystem['skillTypes'][_0x5ecb3c];if(!_0x353499)return;let _0x3d220a=_0x353499;const _0x11045d=this[_0x3c1caa(0x3fe)]();if(_0x11045d===_0x3c1caa(0x2b8))_0x3d220a=_0x3d220a[_0x3c1caa(0x6f6)](/\x1I\[(\d+)\]/gi,''),_0x3d220a=_0x3d220a[_0x3c1caa(0x6f6)](/\\I\[(\d+)\]/gi,'');else{if(!_0x353499[_0x3c1caa(0x996)](/\\I\[(\d+)\]/i)){if(_0x3c1caa(0xd7d)!==_0x3c1caa(0xd7d)){const _0x1e9c32=this[_0x3c1caa(0x432)];return _0x1e9c32[_0x3c1caa(0x996)](/ACTOR/i)?this['friendsUnit']()['trueRandomTarget']():this[_0x3c1caa(0x22c)]()[_0x3c1caa(0x5dc)]();}else{const _0x127961=Imported[_0x3c1caa(0xa52)]?VisuMZ['SkillsStatesCore'][_0x3c1caa(0x32d)][_0x3c1caa(0xc01)]:VisuMZ[_0x3c1caa(0x5e5)]['Settings'][_0x3c1caa(0xbe8)],_0x37c883=$dataSystem['magicSkills'][_0x3c1caa(0x864)](_0x5ecb3c),_0xb97eb4=_0x37c883?_0x127961['IconStypeMagic']:_0x127961['IconStypeNorm'];_0x3d220a=_0x3c1caa(0x751)['format'](_0xb97eb4,_0x353499);}}}this['addCommand'](_0x3d220a,'skill',!![],_0x5ecb3c);},Window_ActorCommand['prototype']['addSingleSkillCommands']=function(){const _0x998315=_0x4c6a01,_0x7d2867=this['_actor'][_0x998315(0x7f0)](),_0x146db7=this[_0x998315(0x2fc)]['skills']();for(const _0x139bc4 of _0x146db7){if('KTlDe'===_0x998315(0x4b5)){const _0x397fe2=_0x3a3a56[_0xc66432];if(_0x397fe2)this['addExtendedTroopMembers'](_0x397fe2);}else{if(!_0x139bc4)continue;if(Imported[_0x998315(0xa52)]){if(_0x998315(0xacf)!==_0x998315(0xacf)){if(!_0xae3b4d['isSceneBattle']())return;if(!_0x22a188[_0x998315(0x978)])return;_0x20a534[_0x998315(0xb41)]=!![];}else{if(this[_0x998315(0x4cc)](_0x139bc4))continue;if(this[_0x998315(0x4c6)](_0x139bc4))continue;}}else{if(!_0x7d2867[_0x998315(0x864)](_0x139bc4[_0x998315(0xd9c)]))continue;}this['addSingleSkillCommand'](_0x139bc4);}}},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x4cc)]=function(_0x108fd8){const _0x25ff44=_0x4c6a01,_0x5a737b=this[_0x25ff44(0x2fc)][_0x25ff44(0x7f0)](),_0x5c2af6=_0x5a737b[_0x25ff44(0xac7)](_0x3197f9=>DataManager[_0x25ff44(0x7f1)](_0x108fd8)[_0x25ff44(0x864)](_0x3197f9));return _0x5c2af6[_0x25ff44(0x991)]<=0x0;},Window_ActorCommand['prototype'][_0x4c6a01(0x4c6)]=function(_0x55938b){const _0x3717f0=_0x4c6a01;if(Imported[_0x3717f0(0xa52)]){if(_0x3717f0(0x2cf)!=='FWgPD')this[_0x3717f0(0x4c8)](_0xb39f1b,_0x26a044,_0xa03114);else{if(VisuMZ[_0x3717f0(0x8bd)]['version']>=1.24){if(this[_0x3717f0(0x2fc)]){if(_0x3717f0(0x5d9)==='mhgzw'){const _0x35c81d=this[_0x3717f0(0xbfa)];this[_0x3717f0(0xbfa)]=![];if(_0x23bf91[_0x3717f0(0x479)]()&&this['isInputting']()){const _0x17599e=this[_0x3717f0(0x72f)]();if(_0x17599e&&_0x35c81d)_0x17599e[_0x3717f0(0x3ad)]();return;}const _0x4cc60a=this[_0x3717f0(0x72f)]();if(_0x4cc60a)_0x4cc60a[_0x3717f0(0x6b8)]();this[_0x3717f0(0x946)](![]),this['requestMotionRefresh']();}else{if(!VisuMZ[_0x3717f0(0x8bd)][_0x3717f0(0x9f5)](this[_0x3717f0(0x2fc)],_0x55938b))return!![];if(!VisuMZ[_0x3717f0(0x8bd)][_0x3717f0(0x246)](this[_0x3717f0(0x2fc)],_0x55938b))return!![];if(!VisuMZ[_0x3717f0(0x8bd)][_0x3717f0(0x5f5)](this[_0x3717f0(0x2fc)],_0x55938b))return!![];}}}else{if(!Window_SkillList[_0x3717f0(0xc58)][_0x3717f0(0x9f8)][_0x3717f0(0x3a4)](this,_0x55938b))return!![];if(!Window_SkillList['prototype'][_0x3717f0(0x48f)][_0x3717f0(0x3a4)](this,_0x55938b))return!![];if(!Window_SkillList[_0x3717f0(0xc58)][_0x3717f0(0x460)]['call'](this,_0x55938b))return!![];}}}return![];},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x8a9)]=function(_0x5cbf05){const _0x2b5887=_0x4c6a01;if(!_0x5cbf05)return;if(!this[_0x2b5887(0x8ca)](_0x5cbf05))return;const _0x46a2d9=this[_0x2b5887(0x3fe)](),_0xe3d0e6=DataManager[_0x2b5887(0x5bc)](_0x5cbf05),_0x46740b=DataManager[_0x2b5887(0x247)](_0x5cbf05),_0x378cdf=_0x46a2d9===_0x2b5887(0x2b8)?_0xe3d0e6:_0x2b5887(0x751)[_0x2b5887(0x511)](_0x46740b,_0xe3d0e6),_0x2cd036=this[_0x2b5887(0x2fc)][_0x2b5887(0x84d)](_0x5cbf05);this[_0x2b5887(0x39b)](_0x378cdf,_0x2b5887(0xd5e),_0x2cd036,_0x5cbf05['id']);},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x8ca)]=function(_0x17fd67){const _0x367eb6=_0x4c6a01,_0x129f7a=_0x17fd67[_0x367eb6(0x407)];if(_0x129f7a[_0x367eb6(0x996)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x367eb6(0x2fc)][_0x367eb6(0x5e9)](_0x17fd67['id']))return![];}if(_0x129f7a[_0x367eb6(0x996)](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor'][_0x367eb6(0x998)](_0x17fd67['id']))return![];}const _0x94074=VisuMZ[_0x367eb6(0x5e5)][_0x367eb6(0xcad)](_0x17fd67,_0x367eb6(0xc57));if(VisuMZ[_0x367eb6(0x5e5)]['JS'][_0x94074]){if(_0x367eb6(0xaf7)!=='BbNVt'){if(!VisuMZ[_0x367eb6(0x5e5)]['JS'][_0x94074][_0x367eb6(0x3a4)](this,this[_0x367eb6(0x2fc)],_0x17fd67))return![];}else{if(this[_0x367eb6(0x22f)]&&_0x485dec[_0x367eb6(0x8d4)]()){const _0x5046b1=this[_0x367eb6(0x596)]();if(_0x5046b1>=0x0){const _0x5b1346=this[_0x367eb6(0xc02)]()?_0x367eb6(0x29b):'pageup';_0xaea4d['virtualClick'](_0x5b1346);}}}}return VisuMZ['BattleCore'][_0x367eb6(0x6f1)](_0x17fd67);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x6f1)]=function(_0x1ccc1e){const _0x24f573=_0x4c6a01,_0x45491f=_0x1ccc1e[_0x24f573(0x407)];if(_0x45491f[_0x24f573(0x996)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x24f573(0xc73)===_0x24f573(0x609)){const _0x1418ca=_0x4e4f16[_0xd201cc['BattleStartEvent']],_0x7a6c31=_0x1418ca[_0x24f573(0x85a)]['length']-0x2,_0x468910=_0x1418ca['list'][_0x7a6c31];if(_0x468910&&_0x468910[_0x24f573(0xc08)]!==0xe6){const _0x22ee58={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x17bef7=_0x1418ca[_0x24f573(0x85a)]['pop']();_0x1418ca['list'][_0x24f573(0x720)](_0x22ee58),_0x1418ca[_0x24f573(0x85a)][_0x24f573(0x720)](_0x17bef7);}}else{const _0x5d82ab=JSON[_0x24f573(0x750)]('['+RegExp['$1'][_0x24f573(0x996)](/\d+/g)+']');for(const _0x6af099 of _0x5d82ab){if(_0x24f573(0x29e)===_0x24f573(0x29e)){if(!$gameSwitches[_0x24f573(0x3a8)](_0x6af099))return![];}else return _0x3cd533['BattleCore'][_0x24f573(0x7ce)]['call'](this,_0x1bde56),_0x4049a2[_0x24f573(0x4fd)](_0x38f886=>{this['_branch'][this['_indent']]=_0x38f886;}),!![];}return!![];}}if(_0x45491f[_0x24f573(0x996)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x24f573(0x855)!==_0x24f573(0x855))_0x1d996a=_0x3538fc['GroupDigits'](_0x51cb76);else{const _0x2fa58f=JSON[_0x24f573(0x750)]('['+RegExp['$1'][_0x24f573(0x996)](/\d+/g)+']');for(const _0x6ad770 of _0x2fa58f){if(!$gameSwitches[_0x24f573(0x3a8)](_0x6ad770))return![];}return!![];}}if(_0x45491f[_0x24f573(0x996)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x441ed8=JSON[_0x24f573(0x750)]('['+RegExp['$1'][_0x24f573(0x996)](/\d+/g)+']');for(const _0x596666 of _0x441ed8){if($gameSwitches[_0x24f573(0x3a8)](_0x596666))return!![];}return![];}if(_0x45491f[_0x24f573(0x996)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x24f573(0xa23)!==_0x24f573(0x5d4)){const _0x155ada=JSON[_0x24f573(0x750)]('['+RegExp['$1'][_0x24f573(0x996)](/\d+/g)+']');for(const _0x35902c of _0x155ada){if(!$gameSwitches['value'](_0x35902c))return!![];}return![];}else{if(_0x56d406[_0x24f573(0x5e5)][_0x24f573(0x32d)][_0x24f573(0x82d)]['NameLegacy'])return;this[_0x24f573(0xc6e)]=new _0x195730(),_0x5e6ca1[_0x24f573(0x40f)](this['_enemyNameContainer']);for(const _0x46f119 of this[_0x24f573(0x91f)]){const _0x5c53b6=new _0x30c7a1();this[_0x24f573(0xc6e)][_0x24f573(0x279)](_0x5c53b6),_0x5c53b6[_0x24f573(0x322)](_0x46f119);}}}if(_0x45491f[_0x24f573(0x996)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3aab1e=JSON['parse']('['+RegExp['$1'][_0x24f573(0x996)](/\d+/g)+']');for(const _0x49bf6f of _0x3aab1e){if(_0x24f573(0xde1)!==_0x24f573(0x57a)){if(!$gameSwitches[_0x24f573(0x3a8)](_0x49bf6f))return!![];}else{if(!_0x5eb29a[_0x24f573(0x503)]())return;if(!_0xeaf9ef[_0x24f573(0x880)])return;const _0x36e23e=_0x373237[_0x24f573(0x582)]();if(!_0x36e23e)return;_0x36e23e[_0x24f573(0x2b5)](_0x24f573(0x480));}}return![];}if(_0x45491f[_0x24f573(0x996)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2f0eac=JSON[_0x24f573(0x750)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x3fbf86 of _0x2f0eac){if($gameSwitches[_0x24f573(0x3a8)](_0x3fbf86))return![];}return!![];}return!![];},Window_ActorCommand[_0x4c6a01(0xc58)]['addEscapeCommand']=function(){const _0xc38c39=_0x4c6a01,_0x4c6c32=this[_0xc38c39(0x3fe)](),_0x2763ff=VisuMZ[_0xc38c39(0x5e5)][_0xc38c39(0x32d)][_0xc38c39(0x921)][_0xc38c39(0x9ee)],_0x183440=_0x4c6c32===_0xc38c39(0x2b8)?TextManager[_0xc38c39(0x340)]:_0xc38c39(0x751)[_0xc38c39(0x511)](_0x2763ff,TextManager[_0xc38c39(0x340)]),_0x23df43=this[_0xc38c39(0x950)]();this[_0xc38c39(0x39b)](_0x183440,_0xc38c39(0x340),_0x23df43);},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x950)]=function(){return BattleManager['canEscape']();},Window_ActorCommand['prototype'][_0x4c6a01(0xbe1)]=function(){const _0xc29fa2=_0x4c6a01,_0x43cb58=this[_0xc29fa2(0x3fe)](),_0x54da51=VisuMZ[_0xc29fa2(0x5e5)][_0xc29fa2(0x32d)][_0xc29fa2(0x921)][_0xc29fa2(0xcf9)],_0x42b1c3=_0x43cb58==='text'?TextManager[_0xc29fa2(0x654)]:_0xc29fa2(0x751)['format'](_0x54da51,TextManager[_0xc29fa2(0x654)]),_0x426ce5=this['isAutoBattleCommandEnabled']();this[_0xc29fa2(0x39b)](_0x42b1c3,_0xc29fa2(0x654),_0x426ce5);},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x65f)]=function(){return!![];},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x3eb)]=function(){const _0x350f7d=_0x4c6a01;return VisuMZ[_0x350f7d(0x5e5)][_0x350f7d(0x32d)][_0x350f7d(0xbe8)]['CmdTextAlign'];},Window_ActorCommand[_0x4c6a01(0xc58)]['drawItem']=function(_0x53dd93){const _0x4c482e=_0x4c6a01,_0x4a51c2=this[_0x4c482e(0x334)](_0x53dd93);if(_0x4a51c2===_0x4c482e(0x8dd))this[_0x4c482e(0xbb8)](_0x53dd93);else _0x4a51c2==='icon'?_0x4c482e(0xc5a)!==_0x4c482e(0xc5a)?(_0x3d5eee[_0x4c482e(0x5e5)][_0x4c482e(0x41f)][_0x4c482e(0x3a4)](this),delete this[_0x4c482e(0x57d)][_0x4c482e(0x527)],delete this[_0x4c482e(0x57d)]['pagedown']):this[_0x4c482e(0x59c)](_0x53dd93):'ntwrL'===_0x4c482e(0x2ba)?(_0x18c1a4['BattleCore'][_0x4c482e(0xab3)]&&_0x53331b[_0x4c482e(0x5e5)]['ParseArmorNotetags'][_0x4c482e(0x3a4)](this,_0xf19db2),_0x101466[_0x4c482e(0x5e5)][_0x4c482e(0xc82)](_0xac802b)):Window_Command[_0x4c482e(0xc58)][_0x4c482e(0xce9)][_0x4c482e(0x3a4)](this,_0x53dd93);this[_0x4c482e(0xa78)](_0x53dd93);},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x3fe)]=function(){const _0x4ffbc9=_0x4c6a01;return VisuMZ[_0x4ffbc9(0x5e5)][_0x4ffbc9(0x32d)][_0x4ffbc9(0xbe8)][_0x4ffbc9(0x650)];},Window_ActorCommand[_0x4c6a01(0xc58)]['commandStyleCheck']=function(_0x29aa65){const _0xce8420=_0x4c6a01;if(_0x29aa65<0x0)return _0xce8420(0x2b8);const _0x35b304=this[_0xce8420(0x3fe)]();if(_0x35b304!==_0xce8420(0x874)){if(_0xce8420(0x382)!=='Bgxvr')return _0x35b304;else{const _0x53d3ce=_0x55b07a[_0xce8420(0x72f)]();this['push'](_0xce8420(0xd7a),[_0x98e837],_0xefe8e4,_0x389913),this[_0xce8420(0x543)]('performMoveToPoint',_0x4d0975,_0x53d3ce[_0xce8420(0xb92)],_0x53d3ce[_0xce8420(0xb2f)],_0x392fca,![],'Linear'),this[_0xce8420(0x543)](_0xce8420(0x94b),[_0xf35f6c],'evade'),this[_0xce8420(0x543)]('waitForMovement'),this['push'](_0xce8420(0x94b),[_0x671aec],_0xce8420(0x929));}}else{if(this['maxItems']()>0x0){const _0x4c1097=this[_0xce8420(0xd18)](_0x29aa65);if(_0x4c1097['match'](/\\I\[(\d+)\]/i)){if('ZwxgS'!==_0xce8420(0xd93))this[_0xce8420(0x22f)]=_0xc81f1d[_0xce8420(0x673)];else{const _0x5cc56a=this[_0xce8420(0xc94)](_0x29aa65),_0xfa88f2=this[_0xce8420(0x6f2)](_0x4c1097)['width'];if(_0xfa88f2<=_0x5cc56a[_0xce8420(0xe09)])return _0xce8420(0x8dd);else{if(_0xce8420(0x5f4)!==_0xce8420(0x312))return'icon';else _0x2ee741[_0xce8420(0x5e5)][_0xce8420(0x370)]['call'](this),_0x160dd3['isSceneBattle']()&&this[_0xce8420(0x94b)]('dead');}}}}}return _0xce8420(0x2b8);},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xbb8)]=function(_0x1969ab){const _0x42fcff=_0x4c6a01,_0x72cc02=this[_0x42fcff(0xc94)](_0x1969ab),_0x9cc856=this[_0x42fcff(0xd18)](_0x1969ab),_0x416322=this['textSizeEx'](_0x9cc856)[_0x42fcff(0xe09)];this[_0x42fcff(0x935)](this[_0x42fcff(0xa6a)](_0x1969ab));const _0x59e3b6=this[_0x42fcff(0x3eb)]();if(_0x59e3b6===_0x42fcff(0x821))_0x42fcff(0xc26)===_0x42fcff(0x9b7)?(_0x4c40d8[_0x42fcff(0x5e5)][_0x42fcff(0xc9a)][_0x42fcff(0x3a4)](this),this['battleLayoutStyle']()===_0x42fcff(0x2ab)&&this[_0x42fcff(0x7c0)]()):this[_0x42fcff(0x7de)](_0x9cc856,_0x72cc02['x']+_0x72cc02[_0x42fcff(0xe09)]-_0x416322,_0x72cc02['y'],_0x416322);else{if(_0x59e3b6===_0x42fcff(0x85d)){if(_0x42fcff(0xc83)===_0x42fcff(0xc83)){const _0x3c8c38=_0x72cc02['x']+Math['floor']((_0x72cc02[_0x42fcff(0xe09)]-_0x416322)/0x2);this[_0x42fcff(0x7de)](_0x9cc856,_0x3c8c38,_0x72cc02['y'],_0x416322);}else return _0x267798[_0x42fcff(0x5e5)][_0x42fcff(0x516)][_0x42fcff(0x3a4)](this,_0x45bf8d);}else _0x42fcff(0x2be)!==_0x42fcff(0x5e4)?this[_0x42fcff(0x7de)](_0x9cc856,_0x72cc02['x'],_0x72cc02['y'],_0x416322):(_0x3b0a0a=this[_0x42fcff(0x2f3)]['battleback1Name'](),_0x2d590d=this[_0x42fcff(0x3dc)][_0x42fcff(0x32b)]());}},Window_ActorCommand[_0x4c6a01(0xc58)]['drawItemStyleIcon']=function(_0x54de4c){const _0x4f01d8=_0x4c6a01;this[_0x4f01d8(0xd18)](_0x54de4c)[_0x4f01d8(0x996)](/\\I\[(\d+)\]/i);const _0x5d4cd1=Number(RegExp['$1'])||0x0,_0x477d16=this[_0x4f01d8(0xc94)](_0x54de4c),_0x469cef=_0x477d16['x']+Math[_0x4f01d8(0x989)]((_0x477d16[_0x4f01d8(0xe09)]-ImageManager[_0x4f01d8(0x24a)])/0x2),_0xf7e2d2=_0x477d16['y']+(_0x477d16['height']-ImageManager[_0x4f01d8(0xd84)])/0x2;this[_0x4f01d8(0xd51)](_0x5d4cd1,_0x469cef,_0xf7e2d2);},Window_ActorCommand['prototype'][_0x4c6a01(0xa78)]=function(_0x252b3b){const _0x1f5fa1=_0x4c6a01;if(!(VisuMZ[_0x1f5fa1(0x5e5)][_0x1f5fa1(0x32d)]['ActorCmd'][_0x1f5fa1(0x535)]??!![]))return;const _0x52db72=this['commandSymbol'](_0x252b3b);if(![_0x1f5fa1(0x2dc),_0x1f5fa1(0x555),'singleSkill'][_0x1f5fa1(0x864)](_0x52db72))return;const _0x225eac=this[_0x1f5fa1(0xc94)](_0x252b3b);let _0x2119d2=null;if(_0x52db72===_0x1f5fa1(0x2dc))_0x2119d2=$dataSkills[this[_0x1f5fa1(0x2fc)][_0x1f5fa1(0xd34)]()];else _0x52db72===_0x1f5fa1(0x555)?_0x2119d2=$dataSkills[this[_0x1f5fa1(0x2fc)][_0x1f5fa1(0x42a)]()]:_0x2119d2=$dataSkills[this[_0x1f5fa1(0x4b2)][_0x252b3b][_0x1f5fa1(0x4bf)]];this[_0x1f5fa1(0x353)](this[_0x1f5fa1(0x2fc)],_0x2119d2,_0x225eac['x'],_0x225eac['y'],_0x225eac[_0x1f5fa1(0xe09)]);},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x353)]=function(_0x2482c4,_0x3cbe44,_0x6d8f58,_0x19b57b,_0x516ffb){const _0x5a5c03=_0x4c6a01;if(!_0x3cbe44)return;if(Imported[_0x5a5c03(0xa52)]){if(_0x5a5c03(0xaf4)!==_0x5a5c03(0x3b4))Window_Command['prototype'][_0x5a5c03(0x353)][_0x5a5c03(0x3a4)](this,_0x2482c4,_0x3cbe44,_0x6d8f58,_0x19b57b,_0x516ffb);else{if(this[_0x5a5c03(0xbf3)]&&this[_0x5a5c03(0xbf3)]['_freezeMotionData']){const _0x4418d9=this[_0x5a5c03(0xbf3)]['_freezeMotionData'];this['_motion']=_0x440938[_0x5a5c03(0xbd7)][_0x4418d9[_0x5a5c03(0xcd8)]],this['_pattern']=_0x4418d9[_0x5a5c03(0xb11)];const _0x1e7348=this['_weaponSprite'];_0x1e7348[_0x5a5c03(0x355)](_0x4418d9['weaponImageId'],_0x4418d9[_0x5a5c03(0xb11)]),this[_0x5a5c03(0x8db)]();}}}else _0x5a5c03(0x63e)===_0x5a5c03(0x63e)?Window_SkillList[_0x5a5c03(0xc58)][_0x5a5c03(0x353)]['call'](this,_0x3cbe44,_0x6d8f58,_0x19b57b,_0x516ffb):_0xf5aa10[_0x5a5c03(0xc58)][_0x5a5c03(0x67a)][_0x5a5c03(0x3a4)](this);},Window_ActorCommand[_0x4c6a01(0xc58)]['hide']=function(){},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xac2)]=function(){const _0x433a1b=_0x4c6a01;Window_Command[_0x433a1b(0xc58)]['activate'][_0x433a1b(0x3a4)](this);const _0x4c4c7d=this[_0x433a1b(0xd3a)]();_0x4c4c7d==='border'&&this[_0x433a1b(0x8ab)]();},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xd3a)]=function(){const _0xd3b8b6=_0x4c6a01;if(this[_0xd3b8b6(0x6b2)])return this[_0xd3b8b6(0x6b2)];return this[_0xd3b8b6(0x6b2)]=SceneManager['_scene'][_0xd3b8b6(0xd3a)](),this['_battleLayoutStyle'];},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x6d0)]=Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0xb68)],Window_ActorCommand[_0x4c6a01(0xc58)]['setup']=function(_0x577e2b){const _0x13f06a=_0x4c6a01,_0x14693d=this[_0x13f06a(0xd3a)]();if(_0x577e2b&&['xp','portrait'][_0x13f06a(0x864)](_0x14693d))this[_0x13f06a(0x51f)](_0x577e2b);else _0x577e2b&&[_0x13f06a(0x2ab)]['includes'](_0x14693d)&&(_0x13f06a(0xcb0)!=='vVugl'?(this[_0x13f06a(0x49f)](_0x577e2b),this['showHelpWindow']()):(_0x324510[_0x13f06a(0x5e5)][_0x13f06a(0x835)][_0x13f06a(0x3a4)](this),this[_0x13f06a(0x3da)]()));VisuMZ[_0x13f06a(0x5e5)]['Window_ActorCommand_setup']['call'](this,_0x577e2b),_0x577e2b&&$gameTroop['aliveMembers']()[_0x13f06a(0x991)]>0x0&&_0x577e2b[_0x13f06a(0x72f)]()&&_0x577e2b[_0x13f06a(0x72f)]()[_0x13f06a(0x3ad)]();},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x51f)]=function(_0x32afbc){const _0x88797b=_0x4c6a01,_0x568c68=VisuMZ[_0x88797b(0x5e5)][_0x88797b(0x32d)]['BattleLayout'][_0x88797b(0x8c2)],_0x13c794=Math[_0x88797b(0x9c7)](Graphics['boxWidth']/0x3),_0x79e3e2=Math[_0x88797b(0x9c7)](Graphics[_0x88797b(0xbc7)]/$gameParty['battleMembers']()[_0x88797b(0x991)]),_0x31990b=Math[_0x88797b(0xa5c)](Math[_0x88797b(0x892)](_0x13c794,_0x79e3e2),_0x568c68),_0xc1a09f=this[_0x88797b(0x7b9)](VisuMZ[_0x88797b(0x5e5)]['Settings'][_0x88797b(0x376)][_0x88797b(0x29c)]),_0x4b833a=Math[_0x88797b(0x989)]((Graphics[_0x88797b(0xbc7)]-Graphics['width'])/0x2),_0x2b1ed2=Graphics['boxWidth']-_0x4b833a,_0x23b7cf=(Math['round'](_0x79e3e2*_0x32afbc[_0x88797b(0x433)]())+Math[_0x88797b(0x9c7)]((_0x79e3e2-_0x31990b)/0x2))[_0x88797b(0x381)](_0x4b833a,_0x2b1ed2-_0x31990b),_0x5994e6=Math[_0x88797b(0x9c7)](SceneManager['_scene']['_statusWindow']['y']-_0xc1a09f);this[_0x88797b(0xa3c)](_0x23b7cf,_0x5994e6,_0x31990b,_0xc1a09f),this[_0x88797b(0x443)](),this[_0x88797b(0xa12)](0x1);},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x49f)]=function(_0x5b1b27){const _0x1f5c25=_0x4c6a01,_0x433ba0=SceneManager['_scene']['partyCommandWindowRectBorderStyle']();this[_0x1f5c25(0xa3c)](_0x433ba0['x'],_0x433ba0['y'],_0x433ba0[_0x1f5c25(0xe09)],_0x433ba0[_0x1f5c25(0xb45)]),this[_0x1f5c25(0x443)](),this[_0x1f5c25(0xa12)](0x0);},Window_ActorCommand[_0x4c6a01(0xc58)][_0x4c6a01(0x689)]=function(){const _0x34c980=_0x4c6a01;if(this[_0x34c980(0x68d)]){const _0x4838f1=this[_0x34c980(0x68d)][_0x34c980(0x593)],_0x34e778=this[_0x34c980(0xe09)]-0x8,_0x5322f8=this[_0x34c980(0xb45)],_0x76f2ac=this[_0x34c980(0xd7e)],_0x48fb1e=ColorManager[_0x34c980(0xe25)](),_0x5a93e7=ColorManager[_0x34c980(0x9e4)]();this[_0x34c980(0x68d)]['x']=0x4,_0x4838f1[_0x34c980(0x8ac)](_0x34e778,_0x5322f8),_0x4838f1['gradientFillRect'](0x0,0x0,_0x34e778,_0x76f2ac,_0x5a93e7,_0x48fb1e,!![]),_0x4838f1[_0x34c980(0x741)](0x0,_0x76f2ac,_0x34e778,_0x5322f8-_0x76f2ac*0x2,_0x48fb1e),_0x4838f1[_0x34c980(0x4dd)](0x0,_0x5322f8-_0x76f2ac,_0x34e778,_0x76f2ac,_0x48fb1e,_0x5a93e7,!![]),this[_0x34c980(0x68d)][_0x34c980(0x8b4)](0x0,0x0,_0x34e778,_0x5322f8);}},Window_ActorCommand[_0x4c6a01(0xc58)]['updateHelp']=function(){const _0x578bd=_0x4c6a01;if(!this['_actor'])return;const _0x3f64c3=VisuMZ[_0x578bd(0x5e5)][_0x578bd(0x32d)][_0x578bd(0xbe8)],_0x57076b=this['currentSymbol']();switch(_0x57076b){case _0x578bd(0x2dc):this[_0x578bd(0x3ea)]($dataSkills[this[_0x578bd(0x2fc)][_0x578bd(0xd34)]()]);break;case _0x578bd(0x555):this[_0x578bd(0x3ea)]($dataSkills[this['_actor'][_0x578bd(0x42a)]()]);break;case _0x578bd(0x8ed):const _0x1c46e5=_0x3f64c3['HelpSkillType'],_0x2744bc=_0x1c46e5[_0x578bd(0x511)]($dataSystem[_0x578bd(0x7f0)][this[_0x578bd(0xa77)]()]);this[_0x578bd(0x7ed)][_0x578bd(0x48d)](_0x2744bc);break;case'singleSkill':this[_0x578bd(0x3ea)]($dataSkills[this['currentExt']()]);break;case _0x578bd(0x6a7):this[_0x578bd(0x7ed)][_0x578bd(0x48d)](_0x3f64c3[_0x578bd(0x3f2)]);break;case _0x578bd(0x340):this[_0x578bd(0x7ed)][_0x578bd(0x48d)](_0x3f64c3[_0x578bd(0x9e0)]);break;case'autoBattle':this['_helpWindow'][_0x578bd(0x48d)](_0x3f64c3[_0x578bd(0xa31)]);break;default:this[_0x578bd(0x7ed)][_0x578bd(0x48d)]('');break;}},Window_ActorCommand[_0x4c6a01(0xc58)]['selectLast']=function(){const _0x357582=_0x4c6a01;this[_0x357582(0x8b0)](0x0);if(this[_0x357582(0x2fc)]&&ConfigManager[_0x357582(0x347)]){if(_0x357582(0x368)===_0x357582(0x368)){const _0x89beb5=this['_actor'][_0x357582(0x7b8)]();this['selectSymbol'](_0x89beb5);if(_0x89beb5===_0x357582(0x8ed)){const _0x349987=this['_actor'][_0x357582(0x307)]();if(_0x349987){if('RzaeR'===_0x357582(0xceb)){_0x1ab4cf['BattleCore'][_0x357582(0xc51)][_0x357582(0x3a4)](this,_0x576484,_0x35a514);if(!_0x334238[_0x357582(0x5af)]())return;if(_0x400c58[_0x357582(0x909)]!==_0x19685b[_0x357582(0xaee)]())return;let _0x4f8c71=_0x36f086[_0x357582(0x5c7)];!this[_0x357582(0x79f)]()&&(_0x4f8c71*=_0x462fb8[_0x357582(0x7b6)](_0x20b424[_0x357582(0x909)]),_0x4f8c71*=this[_0x357582(0xb39)](_0x55abd0)),_0x59dec5[_0x357582(0x8f7)]()<_0x4f8c71&&(_0x5132da[_0x357582(0x7ff)]=!![],this[_0x357582(0x76a)](_0x46e3d3));}else{const _0x4ca8da=this[_0x357582(0xa37)](_0x357582(0x8ed),_0x349987['stypeId']);this['select'](_0x4ca8da||0x0);}}}else{if(_0x89beb5===_0x357582(0xd5e)){const _0x4ee053=this[_0x357582(0x2fc)][_0x357582(0x307)]();if(_0x4ee053){const _0x11ab95=this['findSymbolExt'](_0x357582(0xd5e),_0x4ee053['id']);this[_0x357582(0x375)](_0x11ab95||0x0);}}}}else return _0xde80ec[_0x357582(0x5e5)][_0x357582(0x32d)][_0x357582(0x921)][_0x357582(0xd2f)];}},Window_ActorCommand[_0x4c6a01(0xc58)]['findSymbolExt']=function(_0x39ae57,_0x2b743f){const _0x49986d=_0x4c6a01;return this[_0x49986d(0x4b2)]['findIndex'](_0x4455fb=>_0x4455fb[_0x49986d(0xd24)]===_0x39ae57&&_0x4455fb['ext']===_0x2b743f);},VisuMZ[_0x4c6a01(0x5e5)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)],Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)]=function(_0x196aab){const _0x19ef53=_0x4c6a01;VisuMZ[_0x19ef53(0x5e5)][_0x19ef53(0x3d7)]['call'](this,_0x196aab),this[_0x19ef53(0xd90)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xd3a)]=function(){const _0x38b893=_0x4c6a01;if(this[_0x38b893(0x6b2)])return this[_0x38b893(0x6b2)];return this[_0x38b893(0x6b2)]=SceneManager[_0x38b893(0x4c1)][_0x38b893(0xd3a)](),this[_0x38b893(0x6b2)];},Window_BattleStatus['prototype']['initBattleCore']=function(){const _0x307127=_0x4c6a01;this[_0x307127(0xae3)]=this[_0x307127(0xdae)]();const _0x1a2cc0=VisuMZ[_0x307127(0x5e5)][_0x307127(0x32d)]['BattleLayout'];_0x1a2cc0[_0x307127(0x8ee)]&&(_0x307127(0x9c1)!==_0x307127(0x9c1)?(_0x2a8a32[_0x307127(0x5e5)][_0x307127(0x2d5)][_0x307127(0x3a4)](this),this['createWeather'](),this[_0x307127(0x2eb)]()):this[_0x307127(0x973)]=0x0);},Window_BattleStatus[_0x4c6a01(0xc58)]['isFrameVisible']=function(){const _0x40605a=_0x4c6a01,_0x11197c=VisuMZ[_0x40605a(0x5e5)][_0x40605a(0x32d)][_0x40605a(0x376)];if(_0x11197c[_0x40605a(0x932)])return'VzEgN'==='fhpoE'?0x0:!![];const _0xc4114d=this['battleLayoutStyle']();switch(_0xc4114d){case _0x40605a(0x85a):case _0x40605a(0x2ab):return!![];break;case _0x40605a(0xc9b):case'xp':case _0x40605a(0x3e6):default:return![];break;}},Window_BattleStatus['prototype'][_0x4c6a01(0xd1d)]=function(){const _0x1bc323=_0x4c6a01;if(this[_0x1bc323(0xdae)]())return 0x0;else{if(_0x1bc323(0x861)!==_0x1bc323(0x861)){if(!_0xbc4412[_0x1bc323(0x503)]())return;const _0xc3fbae=_0x2968b4[_0x1bc323(0x74c)];_0xc3fbae[_0x1bc323(0xd66)]();}else return 0xa;}},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x37c)]=function(){const _0x28b602=_0x4c6a01,_0x58893b=this[_0x28b602(0xd3a)]();switch(_0x58893b){case'list':return 0x1;break;case'xp':case _0x28b602(0x3e6):return $gameParty[_0x28b602(0x9df)]()[_0x28b602(0x991)];break;case _0x28b602(0xc9b):default:return $gameParty[_0x28b602(0x6f3)]();break;}},Window_BattleStatus[_0x4c6a01(0xc58)]['itemHeight']=function(){const _0x5d9998=_0x4c6a01,_0x5b0239=this['battleLayoutStyle']();switch(_0x5b0239){case _0x5d9998(0x85a):return Window_StatusBase['prototype'][_0x5d9998(0x824)]['call'](this);break;case _0x5d9998(0xc9b):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xd14)]=function(){const _0x241750=_0x4c6a01,_0xa43cf3=this['battleLayoutStyle']();switch(_0xa43cf3){case _0x241750(0x85a):return Window_StatusBase[_0x241750(0xc58)][_0x241750(0xd14)][_0x241750(0x3a4)](this);break;case _0x241750(0xc9b):case'xp':case _0x241750(0x3e6):default:return 0x0;break;}},Window_BattleStatus[_0x4c6a01(0xc58)]['updatePadding']=function(){const _0x2eb054=_0x4c6a01;this[_0x2eb054(0xdae)]()?Window_StatusBase[_0x2eb054(0xc58)][_0x2eb054(0x253)][_0x2eb054(0x3a4)](this):this[_0x2eb054(0xd7e)]=0x8;},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x5f9)]=function(){const _0x3c2a9c=_0x4c6a01,_0x27c5f4=VisuMZ[_0x3c2a9c(0x5e5)][_0x3c2a9c(0x32d)][_0x3c2a9c(0x376)];_0x27c5f4[_0x3c2a9c(0x932)]?this[_0x3c2a9c(0x83a)]=ImageManager[_0x3c2a9c(0x9a0)](_0x27c5f4[_0x3c2a9c(0x932)]):_0x3c2a9c(0xdac)==='aLjcB'?Window_StatusBase[_0x3c2a9c(0xc58)][_0x3c2a9c(0x5f9)][_0x3c2a9c(0x3a4)](this):this[_0x3c2a9c(0xc1d)]['addChild'](this[_0x3c2a9c(0x937)]);},Window_BattleStatus[_0x4c6a01(0xc58)]['drawItemBackground']=function(_0x4d2290){const _0x2023b8=_0x4c6a01,_0x4e2be1=VisuMZ[_0x2023b8(0x5e5)][_0x2023b8(0x32d)][_0x2023b8(0x376)];if(_0x4e2be1['StatusWindowSelectableBackHide'])return;Window_StatusBase[_0x2023b8(0xc58)]['drawItemBackground'][_0x2023b8(0x3a4)](this,_0x4d2290);},Window_BattleStatus['prototype'][_0x4c6a01(0x82e)]=function(){const _0x46543d=_0x4c6a01;this[_0x46543d(0xa79)]=!![];},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)]=function(){const _0xdf700d=_0x4c6a01;Window_StatusBase[_0xdf700d(0xc58)][_0xdf700d(0x32e)][_0xdf700d(0x3a4)](this),this[_0xdf700d(0x52c)](),this[_0xdf700d(0xb9b)]();if(this['battleLayoutStyle']()===_0xdf700d(0x2ab))this[_0xdf700d(0x74a)]();},Window_BattleStatus['prototype']['updateRefresh']=function(){const _0x29feb8=_0x4c6a01;if($gameTemp[_0x29feb8(0xa16)]())this[_0x29feb8(0x1fd)](),this[_0x29feb8(0xa79)]=![],$gameTemp[_0x29feb8(0x783)]();else{if(this[_0x29feb8(0xa79)]){if(_0x29feb8(0x47a)===_0x29feb8(0x47a))this['_requestRefresh']=![],this[_0x29feb8(0xd1c)](),this['updateAttachmentSprites']();else{if(!this[_0x29feb8(0x9c6)]())return![];return _0x436b01[_0x29feb8(0x5e5)][_0x29feb8(0x447)][_0x29feb8(0x3a4)](this);}}}},Window_BattleStatus[_0x4c6a01(0xc58)]['show']=function(){const _0x287632=_0x4c6a01;Window_StatusBase[_0x287632(0xc58)][_0x287632(0x5c8)]['call'](this);if(!$gameSystem[_0x287632(0x7a2)]())this[_0x287632(0xd1c)]();},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xd46)]=function(){const _0x31480e=_0x4c6a01;if(this[_0x31480e(0xacc)]===Window_BattleStatus)return;Window_StatusBase[_0x31480e(0xc58)][_0x31480e(0xd46)]['call'](this);},Window_BattleStatus['prototype'][_0x4c6a01(0xd9e)]=function(_0x3d3ea3){const _0x31a905=_0x4c6a01,_0x4d855b=this[_0x31a905(0xd3a)]();switch(_0x4d855b){case'xp':case'portrait':break;case _0x31a905(0xc9b):case _0x31a905(0x85a):case'border':default:return Window_StatusBase[_0x31a905(0xc58)][_0x31a905(0xd9e)][_0x31a905(0x3a4)](this,_0x3d3ea3);break;}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xdb9)]=Window_BattleStatus[_0x4c6a01(0xc58)]['drawItemImage'],Window_BattleStatus['prototype'][_0x4c6a01(0xd23)]=function(_0x14897b){const _0x10bc58=_0x4c6a01,_0x120aa8=this[_0x10bc58(0xd3a)]();switch(_0x120aa8){case _0x10bc58(0x85a):this[_0x10bc58(0x78d)](_0x14897b);break;case'xp':this[_0x10bc58(0x241)](_0x14897b);break;case _0x10bc58(0x3e6):this[_0x10bc58(0x8e3)](_0x14897b);break;case _0x10bc58(0xc9b):case'border':default:VisuMZ[_0x10bc58(0x5e5)][_0x10bc58(0xdb9)][_0x10bc58(0x3a4)](this,_0x14897b);break;}},Window_BattleStatus[_0x4c6a01(0xc58)]['drawItemStatus']=function(_0x3587cc){const _0x4eff03=_0x4c6a01,_0x9742a0=this[_0x4eff03(0xd3a)]();if(!$gameSystem[_0x4eff03(0x7a2)]())this['centerFrontViewSprite'](_0x3587cc);switch(_0x9742a0){case _0x4eff03(0x85a):this['drawItemStatusListStyle'](_0x3587cc);break;case'xp':case _0x4eff03(0x3e6):case'default':case'border':default:this[_0x4eff03(0x20c)](_0x3587cc);break;}},Window_BattleStatus['prototype'][_0x4c6a01(0x4ec)]=function(){const _0x2fcd6a=_0x4c6a01,_0x4016d4=this['battleLayoutStyle']();if(['xp']['includes'](_0x4016d4)&&!$gameSystem[_0x2fcd6a(0x7a2)]()){this[_0x2fcd6a(0x3fb)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x2fcd6a(0xc58)][_0x2fcd6a(0x4ec)][_0x2fcd6a(0x3a4)](this);},Window_BattleStatus['prototype'][_0x4c6a01(0x50a)]=function(_0x4800a4){const _0x5dcacf=_0x4c6a01,_0x49c0f3=this[_0x5dcacf(0x73e)](_0x4800a4)[_0x5dcacf(0x72f)]();if(!_0x49c0f3)return;const _0x47aeed=this[_0x5dcacf(0xd3a)](),_0x47f58a=this['itemRect'](_0x4800a4);let _0xfce88=Math['round'](_0x47f58a['x']+_0x47f58a['width']/0x2)+this[_0x5dcacf(0xd7e)];if(['list'][_0x5dcacf(0x864)](_0x47aeed)){if('scdpf'==='PtbuB'){const _0x954959=this['_actor'][_0x5dcacf(0x7f0)](),_0x5caac5=_0x954959[_0x5dcacf(0xac7)](_0x103567=>_0x5d406f[_0x5dcacf(0x7f1)](_0x379884)[_0x5dcacf(0x864)](_0x103567));return _0x5caac5[_0x5dcacf(0x991)]<=0x0;}else _0xfce88=_0x47f58a[_0x5dcacf(0xe09)]/$gameParty[_0x5dcacf(0x9df)]()[_0x5dcacf(0x991)],_0xfce88*=_0x4800a4,_0xfce88+=_0x47f58a[_0x5dcacf(0xe09)]/$gameParty[_0x5dcacf(0x9df)]()[_0x5dcacf(0x991)]/0x2;}let _0x117f43=Math[_0x5dcacf(0x9c7)](this[_0x5dcacf(0x2ad)](_0x4800a4,_0x49c0f3,_0x47f58a));_0x49c0f3[_0x5dcacf(0x7cb)](_0xfce88,_0x117f43),this[_0x5dcacf(0x546)](_0x49c0f3,0x1),_0x49c0f3[_0x5dcacf(0x5c8)](),this[_0x5dcacf(0x5cf)](),this[_0x5dcacf(0xbb0)]();},Window_BattleStatus[_0x4c6a01(0xc58)]['frontviewSpriteY']=function(_0x2ee4db,_0x5da44a,_0x12c9d6){const _0x28dd6e=_0x4c6a01,_0x402b4f=VisuMZ[_0x28dd6e(0x5e5)][_0x28dd6e(0x32d)]['BattleLayout'],_0x2de4f7=this[_0x28dd6e(0xd3a)]();if(_0x2de4f7==='xp'){const _0x1b6b4a=_0x402b4f[_0x28dd6e(0x3ab)];switch(_0x1b6b4a[_0x28dd6e(0x613)]()[_0x28dd6e(0x4e9)]()){case _0x28dd6e(0x358):return _0x12c9d6[_0x28dd6e(0xb45)]-_0x5da44a[_0x28dd6e(0x230)][_0x28dd6e(0xb45)]/0x4;break;case'center':const _0x628e3c=_0x402b4f[_0x28dd6e(0x472)];return(_0x12c9d6[_0x28dd6e(0xb45)]+(_0x5da44a['height']||_0x628e3c))/0x2;break;case'top':return 0x0;case _0x28dd6e(0x2c7):default:return this[_0x28dd6e(0xac1)](_0x12c9d6);break;}}else{if(_0x2de4f7===_0x28dd6e(0x3e6)){}}return _0x5da44a[_0x28dd6e(0xb45)];},Sprite_Name[_0x4c6a01(0xc58)]['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x4c6a01(0xc58)]['redraw']=function(){const _0x2ae66d=_0x4c6a01,_0x3bd61a=this[_0x2ae66d(0x2c7)](),_0x2fbac1=this[_0x2ae66d(0x718)](),_0x424a08=this[_0x2ae66d(0x61e)]();this['setupFont'](),this[_0x2ae66d(0x593)][_0x2ae66d(0xd66)](),this[_0x2ae66d(0x593)][_0x2ae66d(0x26a)](_0x3bd61a,0x4,0x0,_0x2fbac1,_0x424a08,_0x2ae66d(0xbec));},Bitmap['prototype']['drawTextTopAligned']=function(_0x1d08ce,_0x185570,_0x3ed97c,_0x30f9bd,_0x83fe81,_0x9438d1){const _0x4135ac=_0x4c6a01,_0x440ae7=this[_0x4135ac(0xcd9)],_0x5d79fc=_0x440ae7[_0x4135ac(0xd3e)];_0x30f9bd=_0x30f9bd||0xffffffff;let _0x407a9a=_0x185570,_0x5505bb=Math[_0x4135ac(0x9c7)](_0x3ed97c+0x18/0x2+this[_0x4135ac(0x9f9)]*0.35);_0x9438d1===_0x4135ac(0x85d)&&('qtupH'!==_0x4135ac(0x202)?(this[_0x4135ac(0xb92)]=this['applyEasing'](this[_0x4135ac(0xb92)],this[_0x4135ac(0x67f)],_0x3096d0,_0x1799b8,_0x364c92),this['_homeY']=this['applyEasing'](this[_0x4135ac(0xb2f)],this['_targetHomeY'],_0x5bbbd5,_0x2c5e98,_0x25b11d)):_0x407a9a+=_0x30f9bd/0x2),_0x9438d1===_0x4135ac(0x821)&&(_0x4135ac(0x9a6)!==_0x4135ac(0x9a6)?(_0x58bcf7['x']+=_0x3efc77[_0x4135ac(0xa11)]*_0x4d4dd5,_0x20f2c8['y']+=_0x5ae6b9[_0x4135ac(0xb25)]):_0x407a9a+=_0x30f9bd),_0x440ae7[_0x4135ac(0xb62)](),_0x440ae7[_0x4135ac(0xbdf)]=this['_makeFontNameText'](),_0x440ae7[_0x4135ac(0xa2a)]=_0x9438d1,_0x440ae7[_0x4135ac(0x6bd)]=_0x4135ac(0x938),_0x440ae7[_0x4135ac(0xd3e)]=0x1,this[_0x4135ac(0x5d0)](_0x1d08ce,_0x407a9a,_0x5505bb,_0x30f9bd),_0x440ae7['globalAlpha']=_0x5d79fc,this[_0x4135ac(0x2d7)](_0x1d08ce,_0x407a9a,_0x5505bb,_0x30f9bd),_0x440ae7[_0x4135ac(0xafb)](),this[_0x4135ac(0xbc6)][_0x4135ac(0x32e)]();},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xac1)]=function(_0x36390f){const _0x32c50e=_0x4c6a01;return this[_0x32c50e(0x5ed)](_0x36390f)-this[_0x32c50e(0x923)]();},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x78d)]=function(_0xbf3ef3){const _0x3f5ce4=_0x4c6a01;if(!VisuMZ[_0x3f5ce4(0x5e5)][_0x3f5ce4(0x32d)][_0x3f5ce4(0x376)][_0x3f5ce4(0xdd0)])return;const _0x392138=this[_0x3f5ce4(0x73e)](_0xbf3ef3),_0x1142c3=this[_0x3f5ce4(0x450)](_0xbf3ef3);_0x1142c3['width']=ImageManager[_0x3f5ce4(0x4ab)],_0x1142c3[_0x3f5ce4(0xb45)]-=0x2,this[_0x3f5ce4(0x3fd)](_0x392138,_0x1142c3['x']+0x1,_0x1142c3['y']+0x1,_0x1142c3[_0x3f5ce4(0xe09)],_0x1142c3[_0x3f5ce4(0xb45)]);},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xcc5)]=function(_0x5a4216){const _0x4e9e73=_0x4c6a01,_0x184b78=VisuMZ[_0x4e9e73(0x5e5)][_0x4e9e73(0x32d)]['BattleLayout'],_0x56f84d=$dataSystem[_0x4e9e73(0xb15)]?0x4:0x3,_0x15546b=_0x56f84d*0x80+(_0x56f84d-0x1)*0x8+0x4,_0x100515=this[_0x4e9e73(0x73e)](_0x5a4216),_0x445f3f=this[_0x4e9e73(0x450)](_0x5a4216);let _0x406159=_0x445f3f['x']+this[_0x4e9e73(0xd7e)];if(_0x184b78[_0x4e9e73(0xdd0)])_0x406159=_0x445f3f['x']+ImageManager['faceWidth']+0x8;else{if(_0x4e9e73(0x684)!=='qLjVk')_0x406159+=ImageManager[_0x4e9e73(0x24a)];else{const _0x18d49c=_0x1fe9e8[_0x224361];if(!_0x18d49c)return![];if(_0x18d49c[_0x4e9e73(0x85a)]['length']<=0x1)return![];return!![];}}const _0x2bdd63=Math[_0x4e9e73(0x9c7)](Math[_0x4e9e73(0x892)](_0x445f3f['x']+_0x445f3f[_0x4e9e73(0xe09)]-_0x15546b,_0x406159)),_0x1aa81d=Math[_0x4e9e73(0x9c7)](_0x445f3f['y']+(_0x445f3f[_0x4e9e73(0xb45)]-Sprite_Name[_0x4e9e73(0xc58)]['bitmapHeight']())/0x2),_0x398f30=Math['round'](_0x2bdd63-ImageManager[_0x4e9e73(0x24a)]/0x2-0x4),_0x190e97=Math[_0x4e9e73(0x9c7)](_0x445f3f['y']+(_0x445f3f[_0x4e9e73(0xb45)]-ImageManager[_0x4e9e73(0xd84)])/0x2+ImageManager['iconHeight']/0x2);let _0x2ff18d=_0x2bdd63+0x88;const _0x443521=_0x1aa81d;this['placeTimeGauge'](_0x100515,_0x2bdd63-0x4+(_0x184b78[_0x4e9e73(0x9eb)]||0x0),_0x1aa81d+(_0x184b78['TpbGaugeOffsetY']||0x0)),this['placeActorName'](_0x100515,_0x2bdd63+(_0x184b78['NameOffsetX']||0x0),_0x1aa81d+(_0x184b78['NameOffsetY']||0x0)),this[_0x4e9e73(0x6c0)](_0x100515,_0x398f30+(_0x184b78[_0x4e9e73(0x763)]||0x0),_0x190e97+(_0x184b78[_0x4e9e73(0x768)]||0x0)),this[_0x4e9e73(0xe0f)](_0x100515,'hp',_0x2ff18d+0x88*0x0+(_0x184b78[_0x4e9e73(0x970)]||0x0),_0x443521+(_0x184b78['HpGaugeOffsetY']||0x0)),this[_0x4e9e73(0xe0f)](_0x100515,'mp',_0x2ff18d+0x88*0x1+(_0x184b78['MpGaugeOffsetX']||0x0),_0x443521+(_0x184b78[_0x4e9e73(0xb75)]||0x0)),$dataSystem[_0x4e9e73(0xb15)]&&this['placeGauge'](_0x100515,'tp',_0x2ff18d+0x88*0x2+(_0x184b78[_0x4e9e73(0x80b)]||0x0),_0x443521+(_0x184b78['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x241)]=function(_0x367e12){const _0xeca686=_0x4c6a01;if(!$gameSystem[_0xeca686(0x7a2)]())return;VisuMZ['BattleCore'][_0xeca686(0xdb9)]['call'](this,_0x367e12);},Window_BattleStatus[_0x4c6a01(0xc58)]['drawItemStatusXPStyle']=function(_0x3f704f){const _0x3c2571=_0x4c6a01,_0x130b1d=VisuMZ[_0x3c2571(0x5e5)]['Settings'][_0x3c2571(0x376)],_0x5434ba=this[_0x3c2571(0x73e)](_0x3f704f),_0x46e6ca=this[_0x3c2571(0x450)](_0x3f704f),_0x4a81d6=Math['round'](_0x46e6ca['x']+(_0x46e6ca[_0x3c2571(0xe09)]-0x80)/0x2),_0x3b2ef6=this[_0x3c2571(0xac1)](_0x46e6ca);let _0x48c3b2=_0x4a81d6-ImageManager['iconWidth']/0x2-0x4,_0x303fb9=_0x3b2ef6+ImageManager[_0x3c2571(0xd84)]/0x2;_0x48c3b2-ImageManager[_0x3c2571(0x24a)]/0x2<_0x46e6ca['x']&&(_0x48c3b2=_0x4a81d6+ImageManager[_0x3c2571(0x24a)]/0x2-0x4,_0x303fb9=_0x3b2ef6-ImageManager[_0x3c2571(0xd84)]/0x2);const _0x590c90=_0x4a81d6,_0x9ee194=this['basicGaugesY'](_0x46e6ca);this[_0x3c2571(0x58f)](_0x5434ba,_0x4a81d6+(_0x130b1d[_0x3c2571(0x9eb)]||0x0),_0x3b2ef6+(_0x130b1d[_0x3c2571(0x9dc)]||0x0)),this[_0x3c2571(0x8b2)](_0x5434ba,_0x4a81d6+(_0x130b1d[_0x3c2571(0x4ae)]||0x0),_0x3b2ef6+(_0x130b1d[_0x3c2571(0x704)]||0x0)),this['placeStateIcon'](_0x5434ba,_0x48c3b2+(_0x130b1d['StateIconOffsetX']||0x0),_0x303fb9+(_0x130b1d['StateIconOffsetY']||0x0)),this['placeGauge'](_0x5434ba,'hp',_0x590c90+(_0x130b1d[_0x3c2571(0x970)]||0x0),_0x9ee194+(_0x130b1d[_0x3c2571(0x408)]||0x0)),this[_0x3c2571(0xe0f)](_0x5434ba,'mp',_0x590c90+(_0x130b1d['MpGaugeOffsetX']||0x0),_0x9ee194+this[_0x3c2571(0x923)]()+(_0x130b1d['MpGaugeOffsetY']||0x0)),$dataSystem['optDisplayTp']&&this['placeGauge'](_0x5434ba,'tp',_0x590c90+(_0x130b1d[_0x3c2571(0x80b)]||0x0),_0x9ee194+this[_0x3c2571(0x923)]()*0x2+(_0x130b1d['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xd03)]=function(_0x5e45c7){const _0x52c5c9=_0x4c6a01;if(!VisuMZ['BattleCore'][_0x52c5c9(0x32d)][_0x52c5c9(0x376)][_0x52c5c9(0x914)])return![];if(_0x5e45c7[_0x52c5c9(0x393)]())return!![];return Imported[_0x52c5c9(0x907)]&&_0x5e45c7[_0x52c5c9(0xb61)]();},Game_Actor['prototype'][_0x4c6a01(0x4c0)]=function(){const _0x180ac8=_0x4c6a01;if(this[_0x180ac8(0x73e)]()['note'][_0x180ac8(0x996)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x180ac8(0x73e)]()[_0x180ac8(0x407)][_0x180ac8(0x996)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x4c6a01(0xc58)][_0x4c6a01(0x82b)]=function(){const _0x3a8b8e=_0x4c6a01;if(this[_0x3a8b8e(0x73e)]()['note'][_0x3a8b8e(0x996)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x3a8b8e(0x73e)]()[_0x3a8b8e(0x407)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x8e3)]=function(_0x7a0c4e){const _0x18dac9=_0x4c6a01,_0x4744a2=this[_0x18dac9(0x73e)](_0x7a0c4e);if(this[_0x18dac9(0xd03)](_0x4744a2)){if(_0x18dac9(0xa20)==='roUtS')_0x5400f0=_0x468197['width']/_0x1f612f[_0x18dac9(0x9df)]()[_0x18dac9(0x991)],_0x18505d*=_0x5e70ff,_0x26fa92+=_0x87c989[_0x18dac9(0xe09)]/_0x150da1[_0x18dac9(0x9df)]()[_0x18dac9(0x991)]/0x2;else{const _0x1a5893='actor%1-portrait'[_0x18dac9(0x511)](_0x4744a2[_0x18dac9(0xae0)]()),_0x1d4730=this[_0x18dac9(0x589)](_0x1a5893,Sprite),_0x1aec3e=_0x4744a2[_0x18dac9(0xdbf)]();if(_0x1aec3e!=='')_0x1d4730[_0x18dac9(0x593)]=ImageManager['loadPicture'](_0x1aec3e);else{if(_0x18dac9(0x210)!=='PbIsE')return this[_0x18dac9(0x22c)]()[_0x18dac9(0x5dc)]();else _0x1d4730['bitmap']=ImageManager['_emptyBitmap'];}const _0x553a41=this[_0x18dac9(0x450)](_0x7a0c4e);_0x1d4730['anchor']['x']=0.5,_0x1d4730[_0x18dac9(0x434)]['y']=0x1;let _0x330775=Math[_0x18dac9(0x9c7)](_0x553a41['x']+_0x553a41[_0x18dac9(0xe09)]/0x2)+this[_0x18dac9(0xd7e)];_0x330775+=_0x4744a2[_0x18dac9(0x4c0)]();let _0x284442=Math[_0x18dac9(0x9c7)](this['height']);_0x284442+=_0x4744a2[_0x18dac9(0x82b)](),_0x1d4730['move'](_0x330775,_0x284442);const _0x19010a=VisuMZ[_0x18dac9(0x5e5)][_0x18dac9(0x32d)][_0x18dac9(0x376)]['PortraitScale'];_0x1d4730[_0x18dac9(0x68b)]['x']=_0x19010a,_0x1d4730['scale']['y']=_0x19010a,_0x1d4730[_0x18dac9(0x5c8)]();}}else{const _0x3d5360=this[_0x18dac9(0x95b)](_0x7a0c4e);this[_0x18dac9(0x3fd)](_0x4744a2,_0x3d5360['x'],_0x3d5360['y'],_0x3d5360[_0x18dac9(0xe09)],_0x3d5360['height']);}},Window_BattleStatus['prototype'][_0x4c6a01(0x589)]=function(_0x39e076,_0x506bca){const _0xb34f7a=_0x4c6a01,_0x324cdb=this[_0xb34f7a(0xbff)];if(_0x324cdb[_0x39e076])return _0x324cdb[_0x39e076];else{const _0x5ec050=new _0x506bca();return _0x324cdb[_0x39e076]=_0x5ec050,this[_0xb34f7a(0xbe0)](_0x5ec050),this[_0xb34f7a(0xbe0)](this[_0xb34f7a(0x713)]),_0x5ec050;}},Window_BattleStatus[_0x4c6a01(0xc58)]['_createClientArea']=function(){const _0x881cae=_0x4c6a01;this['_createCursorArea'](),this[_0x881cae(0x469)](),Window_StatusBase[_0x881cae(0xc58)][_0x881cae(0xdf9)][_0x881cae(0x3a4)](this),this[_0x881cae(0xb84)]();},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xd07)]=function(){const _0x3835c4=_0x4c6a01;this['_cursorArea']=new Sprite(),this['_cursorArea'][_0x3835c4(0xd15)]=[new PIXI[(_0x3835c4(0xd15))][(_0x3835c4(0xd55))]()],this[_0x3835c4(0x713)]['filterArea']=new Rectangle(),this[_0x3835c4(0x713)][_0x3835c4(0xa3c)](this['_padding'],this['_padding']),this[_0x3835c4(0x279)](this['_cursorArea']);},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x469)]=function(){const _0xd0ed5a=_0x4c6a01;this[_0xd0ed5a(0x69e)]=new Sprite(),this['addChild'](this[_0xd0ed5a(0x69e)]);},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x5cf)]=function(){const _0x464505=_0x4c6a01;if(this[_0x464505(0x69e)]){if(_0x464505(0xae4)!=='TKDig')return![];else this[_0x464505(0x279)](this['_effectsContainer']);}},Window_BattleStatus['prototype'][_0x4c6a01(0xb84)]=function(){const _0x27ea62=_0x4c6a01;this[_0x27ea62(0x2a2)]=new Sprite(),this[_0x27ea62(0x279)](this['_damageContainer']);},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xd30)]=function(){const _0x3a2831=_0x4c6a01;this[_0x3a2831(0xb17)]=new Sprite();for(let _0xb3159f=0x0;_0xb3159f<0x9;_0xb3159f++){this['_cursorSprite'][_0x3a2831(0x279)](new Sprite());}this[_0x3a2831(0x713)]['addChild'](this[_0x3a2831(0xb17)]);},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xd2e)]=function(){const _0x46543f=_0x4c6a01;Window_StatusBase[_0x46543f(0xc58)][_0x46543f(0xd2e)][_0x46543f(0x3a4)](this),this[_0x46543f(0x533)]();},Window_BattleStatus[_0x4c6a01(0xc58)]['_updateCursorArea']=function(){const _0x51bb89=_0x4c6a01,_0x5dfd11=this[_0x51bb89(0xd98)];this[_0x51bb89(0x713)][_0x51bb89(0xa3c)](_0x5dfd11,_0x5dfd11),this[_0x51bb89(0x713)]['x']=_0x5dfd11-this[_0x51bb89(0x232)]['x'],this[_0x51bb89(0x713)]['y']=_0x5dfd11-this[_0x51bb89(0x232)]['y'];if(this[_0x51bb89(0x797)]>0x0&&this['innerHeight']>0x0){if(_0x51bb89(0x2fe)===_0x51bb89(0x2fe))this[_0x51bb89(0x713)][_0x51bb89(0x22f)]=this[_0x51bb89(0x52e)]();else{if(this[_0x51bb89(0x3b5)][_0x51bb89(0x991)]>0x0){const _0x464ac3=this[_0x51bb89(0x3b5)][_0x51bb89(0x91d)](),_0x1ddc7b=_0x464ac3[0x0];return _0x1ddc7b['_actions']=_0x1ddc7b[_0x51bb89(0xada)]||[],_0x1ddc7b[_0x51bb89(0xada)][0x0]=_0x464ac3[0x1],_0x1ddc7b;}else return this[_0x51bb89(0x3df)][_0x51bb89(0x91d)]();}}else this['_cursorArea']['visible']=![];},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x7fa)]=function(){const _0x119617=_0x4c6a01;Window_StatusBase[_0x119617(0xc58)][_0x119617(0x7fa)][_0x119617(0x3a4)](this),this[_0x119617(0x931)]();},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x931)]=function(){const _0x59e993=_0x4c6a01,_0x3f12d6=this['_cursorArea'][_0x59e993(0xe24)][_0x59e993(0x8f3)](new Point(0x0,0x0)),_0xbf8c30=this[_0x59e993(0x713)][_0x59e993(0x1eb)];_0xbf8c30['x']=_0x3f12d6['x']+this[_0x59e993(0x232)]['x'],_0xbf8c30['y']=_0x3f12d6['y']+this['origin']['y'],_0xbf8c30['width']=this[_0x59e993(0x797)],_0xbf8c30[_0x59e993(0xb45)]=this[_0x59e993(0xdd6)];},Window_BattleStatus['prototype'][_0x4c6a01(0x308)]=function(_0x5ab7f1){const _0x4872eb=_0x4c6a01;if(this[_0x4872eb(0xd3a)]()!==_0x4872eb(0x3e6))return;this[_0x4872eb(0x8e3)](_0x5ab7f1[_0x4872eb(0x433)]());},Window_BattleStatus['prototype'][_0x4c6a01(0x972)]=function(_0x32903c,_0x19ee92){const _0x256155=_0x4c6a01;if(!this[_0x256155(0x2a2)])return;if(!_0x32903c)return;if(!_0x19ee92)return;const _0x18adce=this[_0x256155(0x450)](_0x19ee92[_0x256155(0x433)]());_0x18adce['x']+=_0x18adce['width']/0x2+this[_0x256155(0xd7e)],_0x32903c['x']=_0x18adce['x'],_0x32903c['y']=_0x18adce['y'],this[_0x256155(0x2a2)][_0x256155(0x279)](_0x32903c);},Window_BattleStatus[_0x4c6a01(0xc58)]['removeDamageSprite']=function(_0x1428e2){const _0x56058c=_0x4c6a01;if(!this[_0x56058c(0x2a2)])return;if(!_0x1428e2)return;this[_0x56058c(0x2a2)]['removeChild'](_0x1428e2);},Window_BattleStatus[_0x4c6a01(0xc58)]['updateBorderStyle']=function(){const _0x151708=_0x4c6a01;if(!this[_0x151708(0xd6c)]())return;if(!this[_0x151708(0xa05)])this[_0x151708(0x7f5)]();this['prepareBorderActor'](),this[_0x151708(0xdcf)]();},Window_BattleStatus['prototype'][_0x4c6a01(0xd6c)]=function(){const _0x39b081=_0x4c6a01;if(this[_0x39b081(0xacc)]!==Window_BattleStatus)return![];if(!SceneManager[_0x39b081(0x503)]())return![];return VisuMZ[_0x39b081(0x5e5)]['Settings'][_0x39b081(0x376)][_0x39b081(0xb7d)];},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x7f5)]=function(){const _0x4302b1=_0x4c6a01;this[_0x4302b1(0xa05)]=new Sprite();const _0xc0dab4=SceneManager['_scene'],_0xad87d4=_0xc0dab4[_0x4302b1(0x217)][_0x4302b1(0x93e)](_0xc0dab4[_0x4302b1(0xd01)]);_0xc0dab4['addChildAt'](this[_0x4302b1(0xa05)],_0xad87d4),this['_borderPortraitSprite']['anchor']['x']=0.5,this[_0x4302b1(0xa05)][_0x4302b1(0x434)]['y']=0x1;const _0x3b07ae=VisuMZ[_0x4302b1(0x5e5)][_0x4302b1(0x32d)][_0x4302b1(0x376)][_0x4302b1(0xb2e)];this['_borderPortraitSprite'][_0x4302b1(0x68b)]['x']=_0x3b07ae,this['_borderPortraitSprite'][_0x4302b1(0x68b)]['y']=_0x3b07ae,this[_0x4302b1(0xa05)]['y']=this['y']+this[_0x4302b1(0xb45)],this[_0x4302b1(0x552)]=0x0;},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xa81)]=function(){const _0x168ecb=_0x4c6a01;return BattleManager[_0x168ecb(0x323)]();},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0x563)]=function(){const _0x17bf33=_0x4c6a01;this['_borderPortraitSprite'][_0x17bf33(0x22f)]=this[_0x17bf33(0xa81)]();const _0x513167=BattleManager[_0x17bf33(0x73e)](),_0xa79ce4=_0x513167?_0x513167[_0x17bf33(0xdbf)]()||'':'';if(_0x513167===this[_0x17bf33(0xa05)][_0x17bf33(0x73e)]&&_0xa79ce4===this['_borderPortraitSprite'][_0x17bf33(0x324)])return;this[_0x17bf33(0xa05)][_0x17bf33(0x73e)]=_0x513167||this[_0x17bf33(0xa05)][_0x17bf33(0x73e)],this[_0x17bf33(0xa05)]['lastFilename']=_0xa79ce4;if(!_0x513167){if(_0x17bf33(0x956)!==_0x17bf33(0x9ec))return;else this[_0x17bf33(0x299)](_0x17bf33(0x91e));}else{if(_0xa79ce4===''){this[_0x17bf33(0xa05)][_0x17bf33(0x593)]=ImageManager['_emptyBitmap'],this['_borderPortraitSprite'][_0x17bf33(0x324)]='';return;}else{if(_0x17bf33(0x4aa)===_0x17bf33(0x35f)){const _0x16104a=_0x195313['BattleCore'][_0x17bf33(0x32d)][_0x17bf33(0x376)],_0xa25dc7=_0x16104a[_0x17bf33(0x8c2)]||0xc0,_0x49ad3d=this['windowAreaHeight'](),_0x2dcf61=this[_0x17bf33(0xd83)]()?_0x546977[_0x17bf33(0xbc7)]-_0xa25dc7:0x0,_0x2febc2=_0x1c9fa9[_0x17bf33(0xc3a)]-_0x49ad3d;return new _0x4d2e63(_0x2dcf61,_0x2febc2,_0xa25dc7,_0x49ad3d);}else{const _0x4a97b6=ImageManager[_0x17bf33(0xd05)](_0xa79ce4);this[_0x17bf33(0xa05)][_0x17bf33(0x973)]=0x0,_0x4a97b6['addLoadListener'](this[_0x17bf33(0x369)][_0x17bf33(0x5e0)](this,_0x4a97b6));}}}},Window_BattleStatus['prototype'][_0x4c6a01(0x369)]=function(_0x427c35){const _0x1bc568=_0x4c6a01;this[_0x1bc568(0x552)]=0x14,this[_0x1bc568(0xa05)][_0x1bc568(0x593)]=_0x427c35;if(SceneManager[_0x1bc568(0x4c1)][_0x1bc568(0xd83)]())this[_0x1bc568(0xa05)]['x']=0x0,this['_borderPortraitTargetX']=Math[_0x1bc568(0xa32)](_0x427c35[_0x1bc568(0xe09)]/0x2);else{if(_0x1bc568(0x7f9)===_0x1bc568(0x7f9))this[_0x1bc568(0xa05)]['x']=this[_0x1bc568(0xe09)],this[_0x1bc568(0x4d4)]=this[_0x1bc568(0xe09)]*0x3/0x4;else{const _0x2b4cb1=_0x35a388[_0x1bc568(0x465)](this['_item']),_0x46fb7e=_0x45e8c7[_0x1bc568(0x586)][_0x2b4cb1];if(!_0x46fb7e)return this[_0x1bc568(0x8af)]();return _0x46fb7e['DamageDisplay']['call'](this);}}this[_0x1bc568(0xa05)][_0x1bc568(0x973)]=0x0,this[_0x1bc568(0xa05)]['y']=this['y']+this['height'];const _0x5e4ac7=BattleManager[_0x1bc568(0x73e)]();_0x5e4ac7&&(this[_0x1bc568(0x4d4)]+=_0x5e4ac7['getBattlePortraitOffsetX'](),this[_0x1bc568(0xa05)]['y']+=_0x5e4ac7['getBattlePortraitOffsetY']());},Window_BattleStatus['prototype'][_0x4c6a01(0xdcf)]=function(){const _0x515883=_0x4c6a01;if(this[_0x515883(0x552)]>0x0){if(_0x515883(0x5e3)!==_0x515883(0x5e3)){if(this[_0x515883(0x985)][_0x515883(0x801)]!==_0x3c94ef)return this[_0x515883(0x985)][_0x515883(0x801)];if(this[_0x515883(0x73e)]()[_0x515883(0x407)][_0x515883(0x996)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x515883(0x985)][_0x515883(0x801)]=!![];else this[_0x515883(0x73e)]()[_0x515883(0x407)][_0x515883(0x996)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x515883(0x985)][_0x515883(0x801)]=![]:this['_cache']['svShadow']=_0x1ec629[_0x515883(0xc58)][_0x515883(0x95d)][_0x515883(0x3a4)](this);return this[_0x515883(0x985)]['svShadow'];}else{const _0x645633=this[_0x515883(0x552)],_0x450779=this['_borderPortraitSprite'];_0x450779['x']=(_0x450779['x']*(_0x645633-0x1)+this['_borderPortraitTargetX'])/_0x645633,_0x450779[_0x515883(0x973)]=(_0x450779[_0x515883(0x973)]*(_0x645633-0x1)+0xff)/_0x645633,this['_borderPortraitDuration']--;}}},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xb9b)]=function(){const _0x6cafdb=_0x4c6a01;return;this[_0x6cafdb(0x69e)]&&(this[_0x6cafdb(0x69e)]['x']=this['x'],this[_0x6cafdb(0x69e)]['y']=this['y']),this[_0x6cafdb(0x2a2)]&&(this[_0x6cafdb(0x2a2)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x4c6a01(0xc58)]['createAttachmentSprites']=function(){const _0x594c33=_0x4c6a01,_0x38a0e3=VisuMZ['BattleCore'][_0x594c33(0x32d)]['BattleLayout'];if(_0x38a0e3[_0x594c33(0x652)]){const _0x5219c5=new Sprite();_0x5219c5[_0x594c33(0x593)]=ImageManager['loadSystem'](_0x38a0e3[_0x594c33(0x652)]),_0x5219c5['x']=_0x38a0e3[_0x594c33(0x530)]||0x0,_0x5219c5['y']=_0x38a0e3['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x594c33(0xbe0)](_0x5219c5),this[_0x594c33(0x43f)]=_0x5219c5;}if(_0x38a0e3[_0x594c33(0x440)]){if('VtNgu'===_0x594c33(0x2e3)){const _0x2a6c58=new Sprite();_0x2a6c58[_0x594c33(0x593)]=ImageManager[_0x594c33(0x9a0)](_0x38a0e3['StatusWindowAttachmentFront']),_0x2a6c58['x']=_0x38a0e3[_0x594c33(0x726)]||0x0,_0x2a6c58['y']=_0x38a0e3[_0x594c33(0x879)]||0x0,this[_0x594c33(0x279)](_0x2a6c58),this[_0x594c33(0x76d)]=_0x2a6c58;}else _0x200190['push']('clearActiveWeaponSet',_0xca965d);}},Window_BattleStatus[_0x4c6a01(0xc58)][_0x4c6a01(0xbb0)]=function(){const _0x50b833=_0x4c6a01;this[_0x50b833(0x76d)]&&(_0x50b833(0x416)==='jcyDr'?this[_0x50b833(0x279)](this[_0x50b833(0x76d)]):(_0x58a3d7[_0x50b833(0x5e5)][_0x50b833(0x967)][_0x50b833(0x3a4)](this),this[_0x50b833(0x89b)]()));if(this['_backAttachmentSprite']){if(_0x50b833(0x8e0)===_0x50b833(0x23b)){const _0x57981e=_0x5c858c[_0x50b833(0x750)]('['+_0x2ac7cc['$1']['match'](/\d+/g)+']');for(const _0x1919fc of _0x57981e){if(!_0x546ecf[_0x50b833(0x3a8)](_0x1919fc))return!![];}return![];}else this[_0x50b833(0xbe0)](this[_0x50b833(0x43f)]);}},Window_BattleActor[_0x4c6a01(0xc58)][_0x4c6a01(0x6e3)]=function(){const _0x16d9d3=_0x4c6a01;return this[_0x16d9d3(0xd60)]();},Window_BattleActor['prototype'][_0x4c6a01(0xd60)]=function(){const _0x1b9a14=_0x4c6a01,_0x2dcbed=BattleManager[_0x1b9a14(0xa08)]();if(!_0x2dcbed)return!![];if(!_0x2dcbed[_0x1b9a14(0x6a7)]())return!![];const _0x31764f=this[_0x1b9a14(0x73e)](this[_0x1b9a14(0x433)]()),_0x31ca09=_0x2dcbed[_0x1b9a14(0x6a7)]()[_0x1b9a14(0x407)];if(_0x2dcbed[_0x1b9a14(0x34d)]()){if(_0x31764f===BattleManager[_0x1b9a14(0x73e)]())return![];}if(_0x2dcbed['isForDeadFriend']()){if(_0x1b9a14(0x860)===_0x1b9a14(0x9ea)){_0xb45b09[_0x1b9a14(0xa04)]((_0x5bcea4,_0x37256c)=>_0x5bcea4[_0x1b9a14(0x5c6)]()-_0x37256c[_0x1b9a14(0x5c6)]());while(_0x8a0efc[_0x1b9a14(0x864)](this[_0x1b9a14(0xbf1)]())){const _0x50c59a=_0x37f4d9['indexOf'](this['subject']());_0x561081[_0x50c59a]=_0x15488b[_0x37f559[_0x1b9a14(0xb10)](_0x143dfb[_0x1b9a14(0x991)])];}}else{if(!_0x31764f[_0x1b9a14(0xb44)]())return![];}}if(_0x2dcbed[_0x1b9a14(0x5fd)]()){if(!_0x31764f['isAlive']())return![];}return!![];},Window_BattleActor[_0x4c6a01(0xc58)][_0x4c6a01(0xb66)]=function(_0x2164ce){const _0x3ffdb4=_0x4c6a01;this[_0x3ffdb4(0x227)]=_0x2164ce;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xb5e)]=Window_BattleActor[_0x4c6a01(0xc58)][_0x4c6a01(0x4d7)],Window_BattleActor[_0x4c6a01(0xc58)][_0x4c6a01(0x4d7)]=function(){const _0x58792f=_0x4c6a01;Window_BattleStatus['prototype'][_0x58792f(0x4d7)][_0x58792f(0x3a4)](this),this[_0x58792f(0x227)]?_0x58792f(0x464)!==_0x58792f(0x464)?_0x468d40['performCollapse']():this[_0x58792f(0xb0e)]():VisuMZ[_0x58792f(0x5e5)][_0x58792f(0xb5e)][_0x58792f(0x3a4)](this);},Window_BattleActor[_0x4c6a01(0xc58)][_0x4c6a01(0xb0e)]=function(){const _0x1bb99f=_0x4c6a01,_0x1ecefa=SceneManager[_0x1bb99f(0x4c1)][_0x1bb99f(0xb0b)];if(!_0x1ecefa)return;this[_0x1bb99f(0x34a)]=![];const _0x59bc92=this[_0x1bb99f(0x596)]();if(_0x59bc92>=0x0){if('lbTis'!==_0x1bb99f(0x5dd)){this[_0x1bb99f(0x375)](_0x59bc92);if(TouchInput[_0x1bb99f(0x8d4)]()){const _0x2e34b2=$gameParty['members']()[_0x59bc92],_0x11d33a=_0x1ecefa[_0x1bb99f(0xdc8)]['indexOf'](_0x2e34b2);if(_0x11d33a>=0x0){if(_0x1bb99f(0x90f)==='LXHln')_0x1ecefa[_0x1bb99f(0x375)](_0x11d33a),_0x1ecefa[_0x1bb99f(0x473)]();else{const _0x2ca704=_0x2736cd[_0x1bb99f(0x5e5)][_0x1bb99f(0x38e)]['call'](this);if(this[_0x1bb99f(0x34d)]())_0x2ca704[_0x1bb99f(0xbde)](this[_0x1bb99f(0xbf1)]());return _0x2ca704;}}}}else{return _0x2c11a2[_0x1bb99f(0xc58)][_0x1bb99f(0xd83)][_0x1bb99f(0x3a4)](this);;}}},Window_BattleActor['prototype']['_makeCursorAlpha']=function(){const _0x5087ce=_0x4c6a01;this[_0x5087ce(0x227)]&&(this['_animationCount']++,this[_0x5087ce(0x43a)]=!![]);const _0x523acf=Window_BattleStatus[_0x5087ce(0xc58)][_0x5087ce(0x911)][_0x5087ce(0x3a4)](this);return this['_enemyWindowMode']&&(_0x5087ce(0xa6d)===_0x5087ce(0xa6d)?this[_0x5087ce(0x43a)]=![]:_0x507cb9=(_0x5d7968+_0x3b78c4)/0x2),_0x523acf;},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xa7b)]=Window_BattleActor[_0x4c6a01(0xc58)]['show'],Window_BattleActor[_0x4c6a01(0xc58)][_0x4c6a01(0x5c8)]=function(){const _0x15e22a=_0x4c6a01;VisuMZ[_0x15e22a(0x5e5)]['Window_BattleActor_show'][_0x15e22a(0x3a4)](this);const _0x48663e=BattleManager[_0x15e22a(0xa08)]();if(_0x48663e){const _0x38742c=$gameParty['aliveMembers']();_0x48663e[_0x15e22a(0xd92)]()&&_0x38742c['length']>0x1&&(_0x15e22a(0xaec)!==_0x15e22a(0xaec)?(_0x340641['prepare'](),_0x1cd5fd[_0x15e22a(0x749)]()?(this['startAction'](),_0x51323d[_0x15e22a(0x5d3)]()):(_0x22b370[_0x15e22a(0x5d3)](),this[_0x15e22a(0xc0f)]())):this[_0x15e22a(0x952)](_0x15e22a(0x29b),this[_0x15e22a(0x579)][_0x15e22a(0x5e0)](this)));}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x41f)]=Window_BattleActor[_0x4c6a01(0xc58)]['hide'],Window_BattleActor[_0x4c6a01(0xc58)][_0x4c6a01(0xd46)]=function(){const _0x2d2fcd=_0x4c6a01;VisuMZ[_0x2d2fcd(0x5e5)][_0x2d2fcd(0x41f)][_0x2d2fcd(0x3a4)](this),delete this[_0x2d2fcd(0x57d)][_0x2d2fcd(0x527)],delete this[_0x2d2fcd(0x57d)][_0x2d2fcd(0x29b)];},Window_BattleActor[_0x4c6a01(0xc58)]['selectAllActors']=function(){const _0x360e42=_0x4c6a01,_0x4768d6=BattleManager[_0x360e42(0xa08)]();if(_0x4768d6)_0x4768d6[_0x360e42(0xc4c)](_0x360e42(0x4d8));this[_0x360e42(0x473)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xd94)]=Window_BattleEnemy['prototype'][_0x4c6a01(0x67a)],Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)]=function(_0x561dc3){const _0x362183=_0x4c6a01;this[_0x362183(0xb6f)]=null,VisuMZ[_0x362183(0x5e5)]['Window_BattleEnemy_initialize'][_0x362183(0x3a4)](this,_0x561dc3);if(Imported['VisuMZ_2_AggroControlSystem']){if(_0x362183(0x8ea)!=='naLcM'){if(VisuMZ[_0x362183(0x70f)][_0x362183(0x542)]<1.12){if(_0x362183(0xad4)===_0x362183(0xad4)){let _0x5c72c2='';_0x5c72c2+=_0x362183(0x71d),_0x5c72c2+=_0x362183(0x979),_0x5c72c2+=_0x362183(0x5eb),alert(_0x5c72c2),SceneManager[_0x362183(0x6d4)]();}else{const _0x2764c7=this[_0x362183(0x6a7)](),_0x4ab63d=_0x2764c7[_0x362183(0x6fc)][_0x362183(0x8d1)];_0x2764c7['damage'][_0x362183(0x8d1)]=this[_0x362183(0x574)];let _0x5b1ae6=_0x2dcb31[_0x362183(0x5e5)][_0x362183(0x677)][_0x362183(0x3a4)](this,_0x3c59d1);return _0x2764c7['damage'][_0x362183(0x8d1)]=_0x4ab63d,_0x5b1ae6;}}}else this['_stateSprite'][_0x362183(0x22f)]=![];}},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x37c)]=function(){const _0xddfe63=_0x4c6a01;return this[_0xddfe63(0x8b8)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x2ae)]=Window_BattleEnemy['prototype'][_0x4c6a01(0x5c8)],Window_BattleEnemy[_0x4c6a01(0xc58)]['show']=function(){const _0x42d6e0=_0x4c6a01;VisuMZ['BattleCore'][_0x42d6e0(0x2ae)][_0x42d6e0(0x3a4)](this),this['y']=Graphics['height']*0xa,this[_0x42d6e0(0xc2d)]()&&this[_0x42d6e0(0x72e)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xc93)]=Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0xd46)],Window_BattleEnemy['prototype'][_0x4c6a01(0xd46)]=function(){const _0x3fedc8=_0x4c6a01;VisuMZ['BattleCore'][_0x3fedc8(0xc93)]['call'](this),$gameParty[_0x3fedc8(0x375)](null),delete this[_0x3fedc8(0x57d)]['pageup'],delete this[_0x3fedc8(0x57d)]['pagedown'];},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0xafd)]=function(){const _0x458c9d=_0x4c6a01;let _0x1780fa=$gameTroop[_0x458c9d(0x490)]();const _0x325447=BattleManager[_0x458c9d(0xa08)]();if(_0x325447){_0x325447[_0x458c9d(0xd92)]()&&_0x1780fa[_0x458c9d(0x991)]>0x1&&(_0x458c9d(0x9d9)===_0x458c9d(0xc75)?_0xdbb01b[_0x458c9d(0x770)]([_0x1a2f33]):this[_0x458c9d(0x952)](_0x458c9d(0x527),this[_0x458c9d(0x903)][_0x458c9d(0x5e0)](this)));if(_0x325447[_0x458c9d(0x90a)]()){const _0x289d09=$gameParty[_0x458c9d(0x490)]();_0x1780fa=_0x1780fa[_0x458c9d(0x4db)](_0x289d09),_0x325447[_0x458c9d(0xd92)]()&&_0x289d09[_0x458c9d(0x991)]>0x1&&this[_0x458c9d(0x952)](_0x458c9d(0x29b),this['selectAllActors'][_0x458c9d(0x5e0)](this));}}return _0x1780fa;},Window_BattleEnemy[_0x4c6a01(0xc58)]['refresh']=function(){const _0x4f9116=_0x4c6a01;this[_0x4f9116(0xdc8)]=this[_0x4f9116(0xafd)](),this[_0x4f9116(0x92f)](),Window_Selectable[_0x4f9116(0xc58)][_0x4f9116(0xd1c)][_0x4f9116(0x3a4)](this);},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x92f)]=function(){const _0xed6afa=_0x4c6a01;this['_enemies']['sort']((_0x1a06fd,_0x308365)=>{const _0x131bf8=_0x1161;if(_0x1a06fd[_0x131bf8(0x966)]()!==_0x308365[_0x131bf8(0x966)]()){if(_0x1a06fd[_0x131bf8(0xb37)]())return-0x1;if(_0x308365[_0x131bf8(0xb37)]())return 0x1;}if(_0x1a06fd[_0x131bf8(0x966)]()&&_0x308365[_0x131bf8(0x966)]())return _0x1a06fd['index']()-_0x308365[_0x131bf8(0x433)]();if(_0x1a06fd[_0x131bf8(0x72f)]()[_0x131bf8(0x545)]===_0x308365[_0x131bf8(0x72f)]()[_0x131bf8(0x545)]){if(_0x131bf8(0x5cb)===_0x131bf8(0x717))this[_0x131bf8(0x77b)]=this[_0x131bf8(0x77b)]??0x1,this[_0x131bf8(0xade)]=this['_shadowScaleY']??0x1,this[_0x131bf8(0x230)][_0x131bf8(0x68b)]['x']=this['_distortionSprite'][_0x131bf8(0x68b)]['x']*this[_0x131bf8(0x77b)],this[_0x131bf8(0x230)][_0x131bf8(0x68b)]['y']=this['_distortionSprite'][_0x131bf8(0x68b)]['y']*this[_0x131bf8(0xade)];else return _0x1a06fd[_0x131bf8(0x72f)]()[_0x131bf8(0xcaa)]-_0x308365[_0x131bf8(0x72f)]()['_baseY'];}else return _0x1a06fd[_0x131bf8(0x72f)]()['_baseX']-_0x308365[_0x131bf8(0x72f)]()[_0x131bf8(0x545)];}),SceneManager[_0xed6afa(0x703)]()&&this['_enemies'][_0xed6afa(0x733)]();},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x9cf)]=function(){const _0x4571ab=_0x4c6a01,_0x26844e=VisuMZ[_0x4571ab(0x5e5)][_0x4571ab(0x32d)][_0x4571ab(0x82d)];_0x26844e[_0x4571ab(0x7bd)]?this[_0x4571ab(0x6bc)]():this['autoSelectPriority']();},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x6bc)]=function(){const _0x242c61=_0x4c6a01,_0x3976ee=BattleManager[_0x242c61(0xa08)]();if(_0x3976ee&&_0x3976ee[_0x242c61(0x90a)]()){if(_0x3976ee[_0x242c61(0xb38)]()){if(_0x242c61(0x7a8)!=='hYiVD')_0x3078de[_0x242c61(0x5e5)][_0x242c61(0xc93)][_0x242c61(0x3a4)](this),_0x3c46e[_0x242c61(0x375)](null),delete this[_0x242c61(0x57d)][_0x242c61(0x527)],delete this[_0x242c61(0x57d)][_0x242c61(0x29b)];else{if(this[_0x242c61(0xb2d)]&&this[_0x242c61(0xdc8)][_0x242c61(0x864)](this[_0x242c61(0xb2d)])){if('HlNew'!=='jOuyB'){const _0x37f37e=this[_0x242c61(0xdc8)]['indexOf'](this['_lastActor']);return this[_0x242c61(0x8b0)](_0x37f37e);}else return _0x5b603f['BattleCore']['Game_Interpreter_command301'][_0x242c61(0x3a4)](this,_0x229495);}else return this['autoSelectPriority']();}}}if(this['_lastEnemy']&&this[_0x242c61(0xdc8)][_0x242c61(0x864)](this[_0x242c61(0xb6f)])){const _0x5b9264=this[_0x242c61(0xdc8)][_0x242c61(0x93e)](this[_0x242c61(0xb6f)]);this['forceSelect'](_0x5b9264);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0xb9d)]=function(){const _0x23f974=_0x4c6a01,_0xc2633=BattleManager[_0x23f974(0xa08)]();if(_0xc2633&&_0xc2633[_0x23f974(0x90a)]()){const _0x4556cd=$gameParty['aliveMembers']()[0x0];let _0x4668e1=this[_0x23f974(0xdc8)][_0x23f974(0x93e)](_0x4556cd);const _0x661bb2=_0xc2633[_0x23f974(0x6a7)]()['scope'];if(_0x661bb2[_0x23f974(0x996)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){if(_0x23f974(0x30e)===_0x23f974(0x30e)){this[_0x23f974(0x8b0)](_0x4668e1);return;}else{if(!_0x5c2903['isSceneBattle']())return;const _0x5d9a7a=_0x584633[_0x23f974(0x74c)];_0x5d9a7a['popBaseLine']();}}else{if(_0x661bb2[_0x23f974(0x996)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x23f974(0x8b0)](_0x4668e1-0x1);return;}}}const _0x49e2bc=VisuMZ['BattleCore']['Settings']['Enemy'];let _0x4d62af=![];$gameSystem[_0x23f974(0x7a2)]()?_0x23f974(0x8d2)===_0x23f974(0x895)?(_0x448cb3['BattleCore'][_0x23f974(0x6a1)][_0x23f974(0x3a4)](this),this['initBattleCore']()):_0x4d62af=_0x49e2bc['SideviewSelect']:_0x4d62af=_0x49e2bc[_0x23f974(0x306)],this[_0x23f974(0x8b0)](_0x4d62af?this[_0x23f974(0x8b8)]()-0x1:0x0);},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0xaad)]=function(){const _0x1ee3ac=_0x4c6a01;Window_Selectable[_0x1ee3ac(0xc58)][_0x1ee3ac(0xaad)][_0x1ee3ac(0x3a4)](this);if(this[_0x1ee3ac(0x962)]()[_0x1ee3ac(0xb37)]())this[_0x1ee3ac(0xb6f)]=this[_0x1ee3ac(0x962)]();if(this['enemy']()['isActor']())this[_0x1ee3ac(0xb2d)]=this['enemy']();},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x375)]=function(_0xb76f2f){const _0x278cee=_0x4c6a01;Window_Selectable['prototype'][_0x278cee(0x375)]['call'](this,_0xb76f2f),$gameTroop['select'](this['enemy']()),$gameParty[_0x278cee(0x375)](this[_0x278cee(0x962)]());if(!this[_0x278cee(0x962)]())return;if(this[_0x278cee(0xc2d)]()){if(_0x278cee(0xb8e)==='obmQX')this['push'](_0x278cee(0x949)),this['displayChangedStates'](_0x20f5f8),this[_0x278cee(0xd4a)](_0x3a45cb),this[_0x278cee(0x543)]('waitForNewLine');else{const _0x3459f8=SceneManager[_0x278cee(0x4c1)]['_actorWindow'];this['enemy']()['isActor']()?_0x3459f8[_0x278cee(0x375)](this[_0x278cee(0x962)]()[_0x278cee(0x433)]()):_0x3459f8[_0x278cee(0x3c4)]();}}},Window_BattleEnemy['prototype'][_0x4c6a01(0xc2d)]=function(){const _0x32df2c=_0x4c6a01;if(!this[_0x32df2c(0x22f)])return![];if($gameSystem[_0x32df2c(0x7a2)]())return![];const _0x11f552=SceneManager[_0x32df2c(0x4c1)][_0x32df2c(0xd3a)](),_0x565783=[_0x32df2c(0xc9b),_0x32df2c(0x85a),'xp',_0x32df2c(0x3e6),_0x32df2c(0x2ab)];return _0x565783[_0x32df2c(0x864)](_0x11f552);},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x72e)]=function(){const _0x5105b3=_0x4c6a01,_0x1044cf=SceneManager[_0x5105b3(0x4c1)]['_actorWindow'];_0x1044cf['show'](),_0x1044cf['setEnemyWindowMode'](!![]),_0x1044cf[_0x5105b3(0xd1c)](),_0x1044cf[_0x5105b3(0x3c4)]();const _0x21963c=SceneManager[_0x5105b3(0x4c1)][_0x5105b3(0xd3a)](),_0x4b8736=['xp',_0x5105b3(0x3e6),_0x5105b3(0x2ab)];if(_0x4b8736[_0x5105b3(0x864)](_0x21963c)){if('ocuOo'!==_0x5105b3(0x568)){const _0x3735c8=SceneManager[_0x5105b3(0x4c1)][_0x5105b3(0x270)];_0x3735c8[_0x5105b3(0x68b)]['y']=0x0;}else return _0xab55eb(_0x4a2f58['$1'])['split'](/[\r\n]+/);}},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x388)]=function(){const _0x1c3bd5=_0x4c6a01,_0x5b6039=SceneManager[_0x1c3bd5(0x4c1)]['_actorWindow'];_0x5b6039[_0x1c3bd5(0xd46)](),_0x5b6039[_0x1c3bd5(0xb66)](![]),_0x5b6039[_0x1c3bd5(0x3c4)]();const _0x52cfc0=SceneManager['_scene'][_0x1c3bd5(0x270)];_0x52cfc0['scale']['y']=0x1;},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0x903)]=function(){const _0x229dd0=_0x4c6a01,_0x3176bf=BattleManager[_0x229dd0(0xa08)]();if(_0x3176bf)_0x3176bf[_0x229dd0(0xc4c)](_0x229dd0(0x2c9));this[_0x229dd0(0x473)]();},Window_BattleEnemy[_0x4c6a01(0xc58)]['selectAllActors']=function(){const _0xdffc2c=_0x4c6a01,_0x5d4bf7=BattleManager[_0xdffc2c(0xa08)]();if(_0x5d4bf7)_0x5d4bf7[_0xdffc2c(0xc4c)]('all\x20actors');this[_0xdffc2c(0x473)]();},Window_BattleEnemy['prototype'][_0x4c6a01(0x6e3)]=function(){const _0x457ab5=_0x4c6a01;return this[_0x457ab5(0xd60)]();},Window_BattleEnemy[_0x4c6a01(0xc58)][_0x4c6a01(0xd60)]=function(){const _0x32280a=_0x4c6a01,_0x45c95a=BattleManager[_0x32280a(0xa08)]();if(!_0x45c95a)return!![];if(!_0x45c95a['item']())return!![];const _0x1a7c40=this[_0x32280a(0x962)](),_0x388605=_0x45c95a[_0x32280a(0x6a7)]()[_0x32280a(0x407)];if(_0x45c95a[_0x32280a(0x34d)]()){if(_0x1a7c40===BattleManager[_0x32280a(0x73e)]())return![];}return!![];},Window_BattleItem['prototype']['includes']=function(_0x48f506){const _0x457b82=_0x4c6a01;if(!_0x48f506)return![];return _0x48f506[_0x457b82(0xa6c)]===0x0||_0x48f506[_0x457b82(0xa6c)]===0x1;};function Window_AutoBattleCancel(){const _0x507005=_0x4c6a01;this[_0x507005(0x67a)](...arguments);}Window_AutoBattleCancel[_0x4c6a01(0xc58)]=Object[_0x4c6a01(0xb36)](Window_Base[_0x4c6a01(0xc58)]),Window_AutoBattleCancel[_0x4c6a01(0xc58)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)]=function(_0x3312ef){const _0x4755b0=_0x4c6a01;Window_Base[_0x4755b0(0xc58)]['initialize']['call'](this,_0x3312ef),this[_0x4755b0(0xa12)](this[_0x4755b0(0x283)]()),this['refresh']();},Window_AutoBattleCancel[_0x4c6a01(0xc58)][_0x4c6a01(0x283)]=function(){const _0x3de862=_0x4c6a01;return VisuMZ['BattleCore'][_0x3de862(0x32d)][_0x3de862(0x4f8)][_0x3de862(0x999)];},Window_AutoBattleCancel[_0x4c6a01(0xc58)][_0x4c6a01(0xd1c)]=function(){const _0x305cd9=_0x4c6a01;this[_0x305cd9(0x95e)][_0x305cd9(0xd66)]();const _0x3816cb=VisuMZ['BattleCore'][_0x305cd9(0x32d)][_0x305cd9(0x4f8)][_0x305cd9(0xd31)],_0x186927=_0x3816cb[_0x305cd9(0x511)](this['okButtonText'](),this['cancelButtonText']()),_0x430038=this[_0x305cd9(0x6f2)](_0x186927)['width'],_0xad9ed7=Math[_0x305cd9(0x989)]((this[_0x305cd9(0x797)]-_0x430038)/0x2);this[_0x305cd9(0x7de)](_0x186927,_0xad9ed7,0x0,_0x430038);},Window_AutoBattleCancel['prototype'][_0x4c6a01(0x54a)]=function(){const _0x4329fc=_0x4c6a01;return Imported['VisuMZ_0_CoreEngine']?_0x4329fc(0x2da)===_0x4329fc(0x2da)?TextManager[_0x4329fc(0xccb)]('ok'):_0x5e1fce[_0x4329fc(0x5e5)][_0x4329fc(0xc85)][_0x4329fc(0x3a4)](this):VisuMZ[_0x4329fc(0x5e5)][_0x4329fc(0x32d)][_0x4329fc(0x4f8)]['AutoBattleOK'];},Window_AutoBattleCancel['prototype'][_0x4c6a01(0x86d)]=function(){const _0x4c744a=_0x4c6a01;return Imported[_0x4c744a(0xad0)]?TextManager['getInputButtonString']('cancel'):VisuMZ[_0x4c744a(0x5e5)][_0x4c744a(0x32d)][_0x4c744a(0x4f8)]['AutoBattleCancel'];},Window_AutoBattleCancel[_0x4c6a01(0xc58)]['update']=function(){const _0x169c68=_0x4c6a01;Window_Base['prototype'][_0x169c68(0x32e)][_0x169c68(0x3a4)](this),this['updateVisibility'](),this['updateCancel']();},Window_AutoBattleCancel[_0x4c6a01(0xc58)][_0x4c6a01(0x91c)]=function(){const _0x12423b=_0x4c6a01;this[_0x12423b(0x22f)]=BattleManager[_0x12423b(0x673)];},Window_AutoBattleCancel['prototype'][_0x4c6a01(0x22a)]=function(){const _0x3daff7=_0x4c6a01;if(!BattleManager[_0x3daff7(0x673)])return;(Input['isTriggered']('ok')||Input[_0x3daff7(0x5c2)]('cancel')||TouchInput[_0x3daff7(0x8d4)]()||TouchInput[_0x3daff7(0xbf4)]())&&(SoundManager['playCancel'](),BattleManager[_0x3daff7(0x673)]=![],Input[_0x3daff7(0xd66)](),TouchInput['clear']());};function Window_EnemyName(){const _0x2e08d3=_0x4c6a01;this[_0x2e08d3(0x67a)](...arguments);}Window_EnemyName[_0x4c6a01(0xc58)]=Object['create'](Window_StatusBase[_0x4c6a01(0xc58)]),Window_EnemyName['prototype'][_0x4c6a01(0xacc)]=Window_EnemyName,Window_EnemyName['prototype']['initialize']=function(_0x342683){const _0x4225f9=_0x4c6a01;this[_0x4225f9(0x5df)]=_0x342683,this['_text']='';const _0x17ada8=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x4225f9(0x833)]()*0x4);Window_StatusBase[_0x4225f9(0xc58)]['initialize']['call'](this,_0x17ada8),this[_0x4225f9(0xa12)](0x2),this[_0x4225f9(0xb01)]=0x0;},Window_EnemyName[_0x4c6a01(0xc58)]['updatePadding']=function(){this['padding']=0x0;},Window_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x962)]=function(){const _0x1161ba=_0x4c6a01;return $gameTroop['members']()[this[_0x1161ba(0x5df)]];},Window_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)]=function(){const _0x17dd51=_0x4c6a01;Window_StatusBase['prototype'][_0x17dd51(0x32e)][_0x17dd51(0x3a4)](this),this['enemy']()&&this[_0x17dd51(0x962)]()[_0x17dd51(0x2c7)]()!==this[_0x17dd51(0xc74)]&&(this[_0x17dd51(0xc74)]=this[_0x17dd51(0x962)]()[_0x17dd51(0x2c7)](),this[_0x17dd51(0xd1c)]()),this['updateOpacity'](),this[_0x17dd51(0x242)]();},Window_EnemyName['prototype'][_0x4c6a01(0x541)]=function(){const _0x13b128=_0x4c6a01;if(!this[_0x13b128(0x962)]()){if(this[_0x13b128(0xb01)]>0x0)this['contentsOpacity']-=0x10;}else{if(this[_0x13b128(0x962)]()[_0x13b128(0xb44)]()){if('zftXb'!==_0x13b128(0xa97)){if(this[_0x13b128(0xb01)]>0x0)this[_0x13b128(0xb01)]-=0x10;}else{if(!_0x2bd138['isSceneBattle']())return;const _0x49da03=_0x1fb3e2[_0x13b128(0x4c1)]['_statusWindow'];if(_0x49da03)_0x49da03['requestRefresh']();}}else{if(SceneManager['_scene'][_0x13b128(0xb0b)]&&SceneManager[_0x13b128(0x4c1)][_0x13b128(0xb0b)][_0x13b128(0x43a)]&&SceneManager[_0x13b128(0x4c1)][_0x13b128(0xb0b)][_0x13b128(0xdc8)][_0x13b128(0x864)](this[_0x13b128(0x962)]())){if(_0x13b128(0x9db)===_0x13b128(0xdf8))return this[_0x13b128(0xbd8)][_0x13b128(0x91d)]();else{if(this[_0x13b128(0xb01)]<0xff)this['contentsOpacity']+=0x10;}}else{if(this['contentsOpacity']>0x0){if('hpVdS'!==_0x13b128(0x256))this[_0x13b128(0xb01)]-=0x10;else{if(this[_0x13b128(0xcfd)]())this['processBattleCoreJS']('PreStartTurnJS');_0x5c9f5f['BattleCore']['BattleManager_startTurn'][_0x13b128(0x3a4)](this);if(this[_0x13b128(0xcfd)]())this[_0x13b128(0x486)](_0x13b128(0x6e2));}}}}}},Window_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0x242)]=function(){const _0x3acd0c=_0x4c6a01;if(!this[_0x3acd0c(0x962)]())return;if(SceneManager['isBattleFlipped']()){if(_0x3acd0c(0xb86)===_0x3acd0c(0x9a7)){if(!_0x8f6a45['VisuMZ_3_ActSeqImpact'])return;const _0x381818=_0x59d7f5[_0x3acd0c(0x4c1)][_0x3acd0c(0x666)];if(!_0x381818)return;if(_0xd53aab[_0x3acd0c(0xde8)][_0x3acd0c(0x542)]<=1.04){_0x3ef37a(_0x3acd0c(0x79d)),_0x4d34ab[_0x3acd0c(0x6d4)]();return;}_0x953f8d['ConvertParams'](_0x227437,_0x1a7e7c);const _0x27815a=_0x42e3c6['Enable'];_0x381818['setupOversaturateImpactFilter'](_0x27815a);}else this['x']=Graphics[_0x3acd0c(0xbc7)]-this['enemy']()['battler']()['_baseX'];}else this['x']=this[_0x3acd0c(0x962)]()[_0x3acd0c(0x72f)]()[_0x3acd0c(0x545)];this['x']-=Math['round'](this[_0x3acd0c(0xe09)]/0x2),this['y']=this['enemy']()[_0x3acd0c(0x72f)]()[_0x3acd0c(0xcaa)]-Math[_0x3acd0c(0x9c7)](this['lineHeight']()*1.5);const _0x11e662=VisuMZ[_0x3acd0c(0x5e5)][_0x3acd0c(0x32d)]['Enemy'];this['x']+=_0x11e662[_0x3acd0c(0x4ae)]||0x0,this['y']+=_0x11e662[_0x3acd0c(0x704)]||0x0;},Window_EnemyName[_0x4c6a01(0xc58)]['resetFontSettings']=function(){const _0x5ca4dd=_0x4c6a01;Window_Base[_0x5ca4dd(0xc58)][_0x5ca4dd(0x598)]['call'](this),this['contents'][_0x5ca4dd(0x9f9)]=VisuMZ[_0x5ca4dd(0x5e5)]['Settings'][_0x5ca4dd(0x82d)]['NameFontSize'];},Window_EnemyName[_0x4c6a01(0xc58)][_0x4c6a01(0xd1c)]=function(){const _0xc0dbf=_0x4c6a01;Window_StatusBase[_0xc0dbf(0xc58)][_0xc0dbf(0xd1c)][_0xc0dbf(0x3a4)](this),this[_0xc0dbf(0x95e)][_0xc0dbf(0xd66)]();if(!this['enemy']())return;this[_0xc0dbf(0xd6f)]();},Window_EnemyName[_0x4c6a01(0xc58)]['drawEnemyName']=function(){const _0x3bed27=_0x4c6a01;this[_0x3bed27(0xc74)]=this[_0x3bed27(0x962)]()[_0x3bed27(0x2c7)]();const _0x3e8b7f=this[_0x3bed27(0x6f2)](this[_0x3bed27(0xc74)])[_0x3bed27(0xe09)],_0x1332b5=Math[_0x3bed27(0x9c7)]((this['innerWidth']-_0x3e8b7f)/0x2);this[_0x3bed27(0x7de)](this['_text'],_0x1332b5,0x0,_0x3e8b7f+0x8);},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xa2e)]=function(){const _0x43d020=_0x4c6a01;return VisuMZ[_0x43d020(0x5e5)][_0x43d020(0x32d)][_0x43d020(0x84c)]['MaxLines'];},Window_BattleLog['prototype']['messageSpeed']=function(){const _0x190d9a=_0x4c6a01;return VisuMZ[_0x190d9a(0x5e5)][_0x190d9a(0x32d)][_0x190d9a(0x84c)][_0x190d9a(0x77c)];},Window_BattleLog['prototype'][_0x4c6a01(0xc37)]=function(){const _0x1c0fe9=_0x4c6a01;return VisuMZ[_0x1c0fe9(0x5e5)][_0x1c0fe9(0x32d)]['BattleLog'][_0x1c0fe9(0x395)];},Window_BattleLog['prototype'][_0x4c6a01(0xbb2)]=function(){return![];},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x840)]=function(_0x4ab885,_0x7f0fc8){const _0x50db17=_0x4c6a01;this[_0x50db17(0x720)](_0x50db17(0x92b)),BattleManager['invokeAction'](_0x4ab885,_0x7f0fc8),this['callNextMethod']();},Window_BattleLog[_0x4c6a01(0xc58)]['actionSplicePoint']=function(){const _0x252040=_0x4c6a01;this[_0x252040(0x89b)]();},Window_BattleLog[_0x4c6a01(0xc58)]['push']=function(_0x195a6b){const _0x37073d=_0x4c6a01,_0x30c654=Array[_0x37073d(0xc58)][_0x37073d(0x4be)][_0x37073d(0x3a4)](arguments,0x1),_0x33f883={'name':_0x195a6b,'params':_0x30c654},_0x304307=this[_0x37073d(0x327)][_0x37073d(0x39f)](_0x41cc0c=>_0x41cc0c[_0x37073d(0x2c7)])[_0x37073d(0x93e)](_0x37073d(0x92b));if(_0x304307>=0x0)this[_0x37073d(0x327)][_0x37073d(0xb34)](_0x304307,0x0,_0x33f883);else{if(_0x37073d(0x9f4)!=='LwQDl')this['_methods'][_0x37073d(0x543)](_0x33f883);else return 0x1;}},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x720)]=function(_0x2c32fc){const _0xb76da5=_0x4c6a01,_0x198f93=Array['prototype'][_0xb76da5(0x4be)][_0xb76da5(0x3a4)](arguments,0x1);this[_0xb76da5(0x327)][_0xb76da5(0x720)]({'name':_0x2c32fc,'params':_0x198f93});},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xbd1)]=function(){const _0x2e2b45=_0x4c6a01;if(!$gameTemp[_0x2e2b45(0x271)]())return;console[_0x2e2b45(0x690)](this['_methods']['map'](_0x2083b0=>_0x2083b0[_0x2e2b45(0x2c7)])[_0x2e2b45(0xc3b)]('\x0a'));},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xd29)]=Window_BattleLog[_0x4c6a01(0xc58)]['refresh'],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xd1c)]=function(){const _0x52ce16=_0x4c6a01;this[_0x52ce16(0xa79)]=!![];},VisuMZ[_0x4c6a01(0x5e5)]['Window_BattleLog_update']=Window_BattleLog['prototype'][_0x4c6a01(0x32e)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)]=function(){const _0x312a86=_0x4c6a01;VisuMZ[_0x312a86(0x5e5)][_0x312a86(0x79a)][_0x312a86(0x3a4)](this);if(this[_0x312a86(0xa79)])this['processRefresh']();},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x296)]=function(){const _0x116e35=_0x4c6a01;this['_requestRefresh']=![],VisuMZ[_0x116e35(0x5e5)][_0x116e35(0xd29)]['call'](this);},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x64e)]=function(_0x6ac975){const _0x162bb3=_0x4c6a01;let _0x3f4af5=VisuMZ[_0x162bb3(0x5e5)]['Settings'][_0x162bb3(0x84c)]['TextAlign']['toLowerCase']()['trim'](),_0x5f2607=this['_lines'][_0x6ac975];if(_0x5f2607[_0x162bb3(0x996)](/<LEFT>/i))_0x3f4af5=_0x162bb3(0xbec);else{if(_0x5f2607[_0x162bb3(0x996)](/<CENTER>/i))_0x3f4af5='center';else _0x5f2607['match'](/<RIGHT>/i)&&(_0x3f4af5=_0x162bb3(0x821));}_0x5f2607=_0x5f2607[_0x162bb3(0x6f6)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x5f2607=_0x5f2607[_0x162bb3(0x6f6)](/\\I\[0\]/gi,'');const _0xca2250=this[_0x162bb3(0x87a)](_0x6ac975);this[_0x162bb3(0x95e)][_0x162bb3(0x97d)](_0xca2250['x'],_0xca2250['y'],_0xca2250['width'],_0xca2250['height']);const _0x5067d3=this['textSizeEx'](_0x5f2607)[_0x162bb3(0xe09)];let _0x15ebde=_0xca2250['x'];if(_0x3f4af5===_0x162bb3(0x85d))_0x15ebde+=(_0xca2250[_0x162bb3(0xe09)]-_0x5067d3)/0x2;else _0x3f4af5==='right'&&(_0x15ebde+=_0xca2250[_0x162bb3(0xe09)]-_0x5067d3);this[_0x162bb3(0x7de)](_0x5f2607,_0x15ebde,_0xca2250['y'],_0x5067d3+0x8);},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x7a6)]=function(_0x1afe65){const _0x1e7d15=_0x4c6a01;this[_0x1e7d15(0x238)]['push'](_0x1afe65),this['refresh'](),this[_0x1e7d15(0x89b)]();},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xbd6)]=function(){const _0x43f2e0=_0x4c6a01;let _0x120c63=![];switch(this[_0x43f2e0(0x893)]){case _0x43f2e0(0xc3e):_0x120c63=this['_spriteset'][_0x43f2e0(0x604)]();break;case _0x43f2e0(0xce0):_0x120c63=this['_spriteset'][_0x43f2e0(0xc1a)]();break;case _0x43f2e0(0xad6):_0x120c63=this[_0x43f2e0(0x666)][_0x43f2e0(0xd12)]();break;case'float':_0x120c63=this[_0x43f2e0(0x666)][_0x43f2e0(0x1ff)]();break;case'jump':_0x120c63=this[_0x43f2e0(0x666)][_0x43f2e0(0x5f3)]();break;case _0x43f2e0(0x973):_0x120c63=this[_0x43f2e0(0x666)][_0x43f2e0(0xa9c)]();break;}return!_0x120c63&&(this[_0x43f2e0(0x893)]=''),_0x120c63;},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x2dd)]=function(){const _0x58a6c1=_0x4c6a01;this[_0x58a6c1(0x2b5)](_0x58a6c1(0xad6));},Window_BattleLog['prototype'][_0x4c6a01(0x5ca)]=function(){const _0x7d9863=_0x4c6a01;this[_0x7d9863(0x2b5)](_0x7d9863(0x8da));},Window_BattleLog['prototype'][_0x4c6a01(0x7d0)]=function(){const _0x54df39=_0x4c6a01;this[_0x54df39(0x2b5)](_0x54df39(0xd20));},Window_BattleLog[_0x4c6a01(0xc58)]['waitForOpacity']=function(){const _0x3d20a6=_0x4c6a01;this[_0x3d20a6(0x2b5)](_0x3d20a6(0x973));},Window_BattleLog['prototype'][_0x4c6a01(0x7ab)]=function(){const _0x57a6f8=_0x4c6a01,_0x3df8b6=VisuMZ[_0x57a6f8(0x5e5)][_0x57a6f8(0x32d)][_0x57a6f8(0x84c)];if(!_0x3df8b6[_0x57a6f8(0xe06)])return;this[_0x57a6f8(0x543)]('addText',_0x3df8b6[_0x57a6f8(0x38c)][_0x57a6f8(0x511)]($gameTroop['turnCount']())),this[_0x57a6f8(0x543)](_0x57a6f8(0xd78),_0x3df8b6[_0x57a6f8(0xa1c)]),this[_0x57a6f8(0x543)](_0x57a6f8(0xd66));},Window_BattleLog['prototype'][_0x4c6a01(0x5fb)]=function(_0x256b26,_0x35195c,_0x598cc6){const _0x31ca72=_0x4c6a01;this['isCustomActionSequence'](_0x35195c)?_0x31ca72(0x22d)===_0x31ca72(0x22d)?BattleManager[_0x31ca72(0x1fa)]():_0x48c795=_0xc4394d['reduce']((_0x281151,_0x4bbfb8)=>_0x281151*(0x1-_0x4bbfb8),_0x233f8b):this[_0x31ca72(0x94d)](_0x256b26,_0x35195c,_0x598cc6);},Window_BattleLog['prototype'][_0x4c6a01(0xa22)]=function(_0x48e54e){const _0x43eaa4=_0x4c6a01;if(!SceneManager[_0x43eaa4(0x503)]())return![];if(!_0x48e54e)return![];if(!_0x48e54e[_0x43eaa4(0x6a7)]())return![];if(_0x48e54e[_0x43eaa4(0x6a7)]()[_0x43eaa4(0x407)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x43eaa4(0xa2f)](_0x48e54e[_0x43eaa4(0x6a7)]()))return!![];return![];},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x94d)]=function(_0x4830e5,_0x20d64c,_0xdc56f5){const _0x467ef4=_0x4c6a01,_0x287224=_0x20d64c[_0x467ef4(0x6a7)]();this[_0x467ef4(0xa09)](_0x4830e5,_0x20d64c,_0xdc56f5),this[_0x467ef4(0x97f)](_0x4830e5,_0x20d64c,_0xdc56f5),this['finishActionSet'](_0x4830e5,_0x20d64c,_0xdc56f5);},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x284)]=function(_0x39a5ca,_0x212313){const _0x207d8e=_0x4c6a01,_0x5ae975=VisuMZ[_0x207d8e(0x5e5)][_0x207d8e(0x32d)][_0x207d8e(0x84c)];_0x5ae975[_0x207d8e(0x24c)]&&this[_0x207d8e(0x543)](_0x207d8e(0x7a6),_0x207d8e(0xbd3)['format'](DataManager[_0x207d8e(0x56b)](_0x212313)));if(DataManager['isSkill'](_0x212313)){if(_0x5ae975['ActionSkillMsg1'])this[_0x207d8e(0x1ed)](_0x212313[_0x207d8e(0x5c0)],_0x39a5ca,_0x212313);if(_0x5ae975[_0x207d8e(0x1f0)])this[_0x207d8e(0x1ed)](_0x212313[_0x207d8e(0x27d)],_0x39a5ca,_0x212313);}else{if(_0x5ae975[_0x207d8e(0x766)])this[_0x207d8e(0x1ed)](TextManager[_0x207d8e(0xca4)],_0x39a5ca,_0x212313);}},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xa09)]=function(_0x261cd4,_0x3ce624,_0x1539e8){const _0x4860bd=_0x4c6a01,_0x3156e4=_0x3ce624[_0x4860bd(0x6a7)]();this[_0x4860bd(0x284)](_0x261cd4,_0x3156e4),this[_0x4860bd(0x543)](_0x4860bd(0x2a4),_0x261cd4,_0x1539e8,!![]),this[_0x4860bd(0x543)]('performActionStart',_0x261cd4,_0x3ce624),this[_0x4860bd(0x543)](_0x4860bd(0xac6)),this[_0x4860bd(0x543)](_0x4860bd(0x656),_0x261cd4,_0x3ce624),this[_0x4860bd(0x543)](_0x4860bd(0x2dd));},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x97f)]=function(_0x2e02d7,_0x2d3421,_0x3df780){const _0x12b0be=_0x4c6a01;if(this[_0x12b0be(0x745)](_0x2d3421))this['autoMeleeSingleTargetActionSet'](_0x2e02d7,_0x2d3421,_0x3df780);else{if(this[_0x12b0be(0x916)](_0x2d3421)){if('nvrrW'!==_0x12b0be(0x623))this[_0x12b0be(0x257)](_0x2e02d7,_0x2d3421,_0x3df780);else return _0x26739c[_0x12b0be(0x490)]();}else _0x2d3421['isForRandom']()?this[_0x12b0be(0x4c8)](_0x2e02d7,_0x2d3421,_0x3df780):this[_0x12b0be(0x894)](_0x2e02d7,_0x2d3421,_0x3df780);}},Window_BattleLog[_0x4c6a01(0xc58)]['addMeleeReturnActionSet']=function(_0x2bbd43,_0x4dd459,_0x55e2ad,_0x47de96){const _0x310262=_0x4c6a01;if(_0x4dd459){if(_0x310262(0xa42)===_0x310262(0x81f)){if(this[_0x310262(0xb01)]>0x0)this[_0x310262(0xb01)]-=0x10;}else{const _0x4f5f4e=_0x2bbd43[_0x310262(0x72f)]();this[_0x310262(0x543)](_0x310262(0xd7a),[_0x2bbd43],_0x55e2ad,_0x47de96),this[_0x310262(0x543)](_0x310262(0x944),_0x2bbd43,_0x4f5f4e[_0x310262(0xb92)],_0x4f5f4e[_0x310262(0xb2f)],_0x47de96,![],_0x310262(0x883)),this[_0x310262(0x543)](_0x310262(0x94b),[_0x2bbd43],_0x310262(0xbe3)),this['push'](_0x310262(0xac6)),this[_0x310262(0x543)](_0x310262(0x94b),[_0x2bbd43],_0x310262(0x929));}}},Window_BattleLog['prototype'][_0x4c6a01(0x745)]=function(_0x63eed5){const _0x41074e=_0x4c6a01;if(!_0x63eed5[_0x41074e(0x8c7)]())return![];if(!_0x63eed5[_0x41074e(0x6ce)]())return![];if(!_0x63eed5['isForOpponent']())return![];return VisuMZ[_0x41074e(0x5e5)][_0x41074e(0x32d)]['ActionSequence'][_0x41074e(0x3c8)];},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xc62)]=function(_0x319d86,_0xa25841,_0x1c14c4){const _0x59c22f=_0x4c6a01,_0xbb2c71=_0x319d86[_0x59c22f(0x9f2)]()['type']<0x2,_0xf6ca7e=0x14,_0x101061=0x30;let _0x54bc8f=!![];_0x1c14c4[_0x59c22f(0x991)]>0x0&&_0x319d86[_0x59c22f(0x966)]()===_0x1c14c4[0x0][_0x59c22f(0x966)]()&&(_0x54bc8f=![]);if(_0xbb2c71&&_0x54bc8f){if(_0x59c22f(0x8fd)==='Dzkpo'){const _0x38d6fc=_0x4b6e85['$1'][_0x59c22f(0xcaf)](',')[_0x59c22f(0x39f)](_0x35c443=>_0x508615(_0x35c443));this[_0x59c22f(0xdf6)](),this['processExtendTroopMembers'](_0x38d6fc);}else this[_0x59c22f(0x543)](_0x59c22f(0xd7a),[_0x319d86],_0x101061,_0xf6ca7e),this[_0x59c22f(0x543)](_0x59c22f(0x3ce),_0x319d86,_0x1c14c4,_0x59c22f(0x940),_0xf6ca7e,!![],'Linear',!![]),this['push']('requestMotion',[_0x319d86],_0x59c22f(0x929)),this[_0x59c22f(0x543)](_0x59c22f(0xac6));}let _0x45cca8=_0xa25841[_0x59c22f(0xa4c)]()?this[_0x59c22f(0x5e6)](_0x319d86):0x1;for(let _0x1e75e0=0x0;_0x1e75e0<_0x45cca8;_0x1e75e0++){if(_0xa25841[_0x59c22f(0xa4c)]()&&_0x319d86[_0x59c22f(0x966)]()){if('BarMO'!==_0x59c22f(0x54e)){if(this[_0x59c22f(0x3b6)][_0x59c22f(0x4d1)]())return![];return _0x26276d[_0x59c22f(0x5e5)][_0x59c22f(0xbb9)]['call'](this,_0x28bff7);}else this['push']('setActiveWeaponSet',_0x319d86,_0x1e75e0);}_0xa25841[_0x59c22f(0x6a7)]()[_0x59c22f(0x934)]<0x0?'XByEZ'!==_0x59c22f(0x92d)?this[_0x59c22f(0x4c8)](_0x319d86,_0xa25841,_0x1c14c4):(_0x5b7b29[_0x59c22f(0x5e5)][_0x59c22f(0x4d6)][_0x59c22f(0x3a4)](this),this['initMembersBattleCore']()):this[_0x59c22f(0x894)](_0x319d86,_0xa25841,_0x1c14c4);}_0xa25841['isAttack']()&&_0x319d86[_0x59c22f(0x966)]()&&this['push'](_0x59c22f(0x522),_0x319d86),this[_0x59c22f(0x543)](_0x59c22f(0x2a4),_0x319d86,_0x1c14c4,![]),this[_0x59c22f(0xa00)](_0x319d86,_0xbb2c71,_0x101061,_0xf6ca7e);},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x916)]=function(_0x465b32){const _0x2f1114=_0x4c6a01;if(!_0x465b32[_0x2f1114(0x8c7)]())return![];if(!_0x465b32[_0x2f1114(0xa68)]())return![];if(!_0x465b32[_0x2f1114(0x7e8)]())return![];return VisuMZ[_0x2f1114(0x5e5)][_0x2f1114(0x32d)]['ActionSequence'][_0x2f1114(0x3c0)];},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x257)]=function(_0xbc0516,_0x26ff02,_0x113492){const _0x15fc2b=_0x4c6a01,_0x2f136f=_0xbc0516[_0x15fc2b(0x9f2)]()[_0x15fc2b(0xd11)]<0x2,_0x19a07d=0x14,_0x1a089a=0x30;if(_0x2f136f){if(_0x15fc2b(0x7d5)===_0x15fc2b(0x304))this[_0x15fc2b(0x285)]=!![];else{this['push']('performJump',[_0xbc0516],_0x1a089a,_0x19a07d);const _0x340410=_0x113492[_0x15fc2b(0x991)]>0x1?_0x15fc2b(0x260):_0x15fc2b(0x940);this[_0x15fc2b(0x543)](_0x15fc2b(0x3ce),_0xbc0516,_0x113492,_0x340410,_0x19a07d,!![],_0x15fc2b(0x883),!![]),this[_0x15fc2b(0x543)](_0x15fc2b(0x94b),[_0xbc0516],_0x15fc2b(0x929)),this[_0x15fc2b(0x543)]('waitForMovement');}}let _0x142622=_0x26ff02[_0x15fc2b(0xa4c)]()?this['getDualWieldTimes'](_0xbc0516):0x1;for(let _0x538239=0x0;_0x538239<_0x142622;_0x538239++){_0x26ff02[_0x15fc2b(0xa4c)]()&&_0xbc0516[_0x15fc2b(0x966)]()&&(_0x15fc2b(0xdc5)==='BPcjG'?this[_0x15fc2b(0x543)]('setActiveWeaponSet',_0xbc0516,_0x538239):this['startMotion'](_0x15fc2b(0x91a))),this[_0x15fc2b(0x894)](_0xbc0516,_0x26ff02,_0x113492);}_0x26ff02['isAttack']()&&_0xbc0516[_0x15fc2b(0x966)]()&&this[_0x15fc2b(0x543)]('clearActiveWeaponSet',_0xbc0516),this[_0x15fc2b(0x543)](_0x15fc2b(0x2a4),_0xbc0516,_0x113492,![]),this['addMeleeReturnActionSet'](_0xbc0516,_0x2f136f,_0x1a089a,_0x19a07d);},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x4c8)]=function(_0x24776a,_0x469430,_0x16e8ed){const _0x22e959=_0x4c6a01,_0x580502=_0x469430[_0x22e959(0x6a7)]();for(const _0x178008 of _0x16e8ed){if(!_0x178008)continue;this['push'](_0x22e959(0xbfe),_0x24776a,_0x469430),this[_0x22e959(0x543)](_0x22e959(0xd78),Sprite_Battler[_0x22e959(0x73a)]),this[_0x22e959(0x543)](_0x22e959(0x849),_0x24776a,[_0x178008],_0x580502[_0x22e959(0x934)]),this[_0x22e959(0x543)](_0x22e959(0xd78),0x18),this['push'](_0x22e959(0x840),_0x24776a,_0x178008);}},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x894)]=function(_0x5038f7,_0x4b083f,_0x1ac757){const _0x28050a=_0x4c6a01,_0x5b84d0=_0x4b083f['item']();let _0x6248a4=_0x4b083f[_0x28050a(0xa4c)]()?0x1+_0x5038f7[_0x28050a(0x50b)]():0x1;while(_0x6248a4--){'VdFQt'===_0x28050a(0x8f2)?(this[_0x28050a(0x44e)]=0x0,this[_0x28050a(0xd61)]=0x0):(this[_0x28050a(0x543)](_0x28050a(0xbfe),_0x5038f7,_0x4b083f),this[_0x28050a(0x543)]('waitCount',Sprite_Battler[_0x28050a(0x73a)]),this[_0x28050a(0x543)](_0x28050a(0x849),_0x5038f7,_0x1ac757[_0x28050a(0x5a6)](),_0x5b84d0[_0x28050a(0x934)]),this[_0x28050a(0x543)](_0x28050a(0x2dd)));}for(const _0x4f08b5 of _0x1ac757){if(!_0x4f08b5)continue;this['push'](_0x28050a(0x840),_0x5038f7,_0x4f08b5);}},Window_BattleLog[_0x4c6a01(0xc58)]['finishActionSet']=function(_0x4975d6,_0x88337f,_0x135f23){const _0x27a9fe=_0x4c6a01,_0x5d3974=_0x88337f[_0x27a9fe(0x6a7)]();this['push'](_0x27a9fe(0x2a4),_0x4975d6,_0x135f23,![]),this[_0x27a9fe(0x543)](_0x27a9fe(0x69c)),this[_0x27a9fe(0x543)]('waitForEffect'),this['push'](_0x27a9fe(0xd66)),this[_0x27a9fe(0x543)](_0x27a9fe(0x3b1),_0x4975d6),this[_0x27a9fe(0x543)](_0x27a9fe(0xac6));},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xc0f)]=function(_0xc8d53e){},VisuMZ[_0x4c6a01(0x5e5)]['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x2ed)],Window_BattleLog['prototype'][_0x4c6a01(0x2ed)]=function(_0x449487){const _0x5b3e32=_0x4c6a01;if(!VisuMZ[_0x5b3e32(0x5e5)][_0x5b3e32(0x32d)]['BattleLog']['ShowCurrentState'])return;VisuMZ[_0x5b3e32(0x5e5)][_0x5b3e32(0xe11)][_0x5b3e32(0x3a4)](this,_0x449487);},Window_BattleLog['prototype'][_0x4c6a01(0x3b0)]=function(_0x25a165){const _0x3dc69f=_0x4c6a01;this[_0x3dc69f(0x543)](_0x3dc69f(0x2fb),_0x25a165);VisuMZ[_0x3dc69f(0x5e5)][_0x3dc69f(0x32d)][_0x3dc69f(0x7bf)][_0x3dc69f(0x342)]&&this[_0x3dc69f(0x543)](_0x3dc69f(0x849),_0x25a165,[BattleManager[_0x3dc69f(0x49e)]],-0x1);if(!VisuMZ[_0x3dc69f(0x5e5)][_0x3dc69f(0x32d)][_0x3dc69f(0x84c)]['ShowCounter'])return;this[_0x3dc69f(0x543)](_0x3dc69f(0x7a6),TextManager[_0x3dc69f(0xb16)][_0x3dc69f(0x511)](_0x25a165[_0x3dc69f(0x2c7)]()));},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x737)]=function(_0x49e5f1){const _0x5e2676=_0x4c6a01;this[_0x5e2676(0x543)](_0x5e2676(0x79b),_0x49e5f1);if(!VisuMZ[_0x5e2676(0x5e5)][_0x5e2676(0x32d)][_0x5e2676(0x84c)][_0x5e2676(0xd17)])return;this['push'](_0x5e2676(0x7a6),TextManager[_0x5e2676(0x902)][_0x5e2676(0x511)](_0x49e5f1[_0x5e2676(0x2c7)]()));},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x6f4)]=function(_0x337fcb,_0x51076b){const _0x50afbb=_0x4c6a01;if(VisuMZ[_0x50afbb(0x5e5)]['Settings'][_0x50afbb(0x7bf)][_0x50afbb(0xc8a)]){const _0x5927ad=_0x51076b['item']();this[_0x50afbb(0x543)](_0x50afbb(0x849),_0x337fcb,[_0x337fcb],_0x5927ad[_0x50afbb(0x934)]);}},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xb06)]=function(_0x59cbe9,_0x3f1273){const _0x52e778=_0x4c6a01;this[_0x52e778(0x543)](_0x52e778(0xcc2),_0x59cbe9,_0x3f1273);if(!VisuMZ[_0x52e778(0x5e5)]['Settings'][_0x52e778(0x84c)][_0x52e778(0xc98)])return;const _0x1d3a8c=_0x59cbe9[_0x52e778(0x2c7)](),_0x53e2c=TextManager[_0x52e778(0xb20)][_0x52e778(0x511)](_0x1d3a8c,_0x3f1273[_0x52e778(0x2c7)]());this[_0x52e778(0x543)](_0x52e778(0x7a6),_0x53e2c);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xe05)]=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x614)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x614)]=function(_0x4f39a5,_0x20b620){const _0x48f5d5=_0x4c6a01;VisuMZ[_0x48f5d5(0x5e5)]['Window_BattleLog_displayActionResults'][_0x48f5d5(0x3a4)](this,_0x4f39a5,_0x20b620);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x573)]=Window_BattleLog[_0x4c6a01(0xc58)]['displayFailure'],Window_BattleLog[_0x4c6a01(0xc58)]['displayFailure']=function(_0x372749){const _0x1f0f26=_0x4c6a01;if(!VisuMZ[_0x1f0f26(0x5e5)]['Settings'][_0x1f0f26(0x84c)][_0x1f0f26(0xd8b)])return;VisuMZ[_0x1f0f26(0x5e5)][_0x1f0f26(0x573)][_0x1f0f26(0x3a4)](this,_0x372749);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xd7f)]=Window_BattleLog['prototype']['displayCritical'],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x64a)]=function(_0x58ce70){const _0xd3e391=_0x4c6a01;if(!VisuMZ['BattleCore'][_0xd3e391(0x32d)][_0xd3e391(0x84c)][_0xd3e391(0xa96)])return;VisuMZ['BattleCore'][_0xd3e391(0xd7f)]['call'](this,_0x58ce70);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x383)]=Window_BattleLog['prototype'][_0x4c6a01(0x5b1)],Window_BattleLog[_0x4c6a01(0xc58)]['displayMiss']=function(_0x9bef28){const _0x2abcee=_0x4c6a01;!VisuMZ[_0x2abcee(0x5e5)][_0x2abcee(0x32d)][_0x2abcee(0x84c)][_0x2abcee(0xbe2)]?_0x2abcee(0x7c8)!==_0x2abcee(0x7c8)?_0x4009c3['_battleCoreBattleStartEvent']?this[_0x2abcee(0x8e6)]():_0x1dcb0b[_0x2abcee(0x5e5)][_0x2abcee(0xb22)][_0x2abcee(0x3a4)](this):this[_0x2abcee(0x543)](_0x2abcee(0x6b9),_0x9bef28):VisuMZ['BattleCore'][_0x2abcee(0x383)]['call'](this,_0x9bef28);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xb79)]=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x2ec)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x2ec)]=function(_0x563b03){const _0x2e1c6c=_0x4c6a01;if(!VisuMZ[_0x2e1c6c(0x5e5)][_0x2e1c6c(0x32d)]['BattleLog'][_0x2e1c6c(0xbe2)])_0x2e1c6c(0x3c2)===_0x2e1c6c(0x3c2)?_0x563b03[_0x2e1c6c(0xbbd)]()[_0x2e1c6c(0x32a)]?this['push'](_0x2e1c6c(0x867),_0x563b03):this[_0x2e1c6c(0x543)](_0x2e1c6c(0x54b),_0x563b03):_0xffd5af[_0x2e1c6c(0x98a)]();else{if('oJLuV'===_0x2e1c6c(0x4b7))return this[_0x2e1c6c(0xb9e)](_0x5b5369);else VisuMZ['BattleCore']['Window_BattleLog_displayEvasion']['call'](this,_0x563b03);}},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x505)]=function(_0x4ecc78){const _0x495630=_0x4c6a01;_0x4ecc78[_0x495630(0xbbd)]()['hpAffected']&&(_0x4ecc78['_lastHpDamage']=0x0,_0x4ecc78[_0x495630(0xbbd)]()['hpDamage']>0x0&&!_0x4ecc78['result']()[_0x495630(0x3b9)]&&(_0x4ecc78[_0x495630(0xd68)]=_0x4ecc78[_0x495630(0xbbd)]()[_0x495630(0x3ac)],this[_0x495630(0x543)](_0x495630(0xc2f),_0x4ecc78)),_0x4ecc78[_0x495630(0xbbd)]()[_0x495630(0x3ac)]<0x0&&this['push'](_0x495630(0xb4f),_0x4ecc78),VisuMZ[_0x495630(0x5e5)][_0x495630(0x32d)][_0x495630(0x84c)][_0x495630(0x9b6)]&&this[_0x495630(0x543)]('addText',this[_0x495630(0x420)](_0x4ecc78)));},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xb24)]=Window_BattleLog[_0x4c6a01(0xc58)]['displayMpDamage'],Window_BattleLog[_0x4c6a01(0xc58)]['displayMpDamage']=function(_0x4ffe46){const _0x110b57=_0x4c6a01;if(!VisuMZ[_0x110b57(0x5e5)][_0x110b57(0x32d)][_0x110b57(0x84c)][_0x110b57(0x78a)])return;VisuMZ[_0x110b57(0x5e5)][_0x110b57(0xb24)][_0x110b57(0x3a4)](this,_0x4ffe46);},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x3ef)]=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xa7e)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xa7e)]=function(_0x1e3e7e){const _0x34a6b3=_0x4c6a01;if(!VisuMZ['BattleCore'][_0x34a6b3(0x32d)][_0x34a6b3(0x84c)][_0x34a6b3(0xdfa)])return;VisuMZ['BattleCore'][_0x34a6b3(0x3ef)]['call'](this,_0x1e3e7e);},Window_BattleLog['prototype'][_0x4c6a01(0x873)]=function(_0x57ae24){const _0x586db8=_0x4c6a01;if(_0x57ae24['result']()[_0x586db8(0x87b)]()){if(_0x586db8(0xce5)!==_0x586db8(0x5a5))this[_0x586db8(0x543)]('pushBaseLine'),this[_0x586db8(0xcc1)](_0x57ae24),this[_0x586db8(0xd4a)](_0x57ae24),this[_0x586db8(0x543)]('waitForNewLine');else{const _0x4a53b0=this['weapons']();if(_0x4a53b0[_0x586db8(0x991)]>0x0){const _0x3fdbbf=_0x4a53b0[_0xabb11f];if(_0x3fdbbf)_0x2e90d7=this[_0x586db8(0xdbe)]()['indexOf'](_0x3fdbbf);}}}},Window_BattleLog[_0x4c6a01(0xc58)]['displayAddedStates']=function(_0x166d0a){const _0x49b68a=_0x4c6a01,_0x2f1e03=_0x166d0a[_0x49b68a(0xbbd)](),_0x3192a1=_0x2f1e03[_0x49b68a(0xab5)]();for(const _0x1554f1 of _0x3192a1){const _0x208fc0=_0x166d0a[_0x49b68a(0x966)]()?_0x1554f1[_0x49b68a(0x5c0)]:_0x1554f1[_0x49b68a(0x27d)];_0x208fc0&&VisuMZ[_0x49b68a(0x5e5)]['Settings'][_0x49b68a(0x84c)][_0x49b68a(0x68a)]&&(this[_0x49b68a(0x543)](_0x49b68a(0xa13)),this[_0x49b68a(0x543)](_0x49b68a(0xe1c)),this[_0x49b68a(0x543)]('pushBaseLine'),this[_0x49b68a(0x543)](_0x49b68a(0x7a6),_0x208fc0['format'](_0x166d0a[_0x49b68a(0x2c7)]())),this[_0x49b68a(0x543)]('wait')),_0x1554f1['id']===_0x166d0a['deathStateId']()&&this[_0x49b68a(0x543)]('performCollapse',_0x166d0a);}},Window_BattleLog['prototype']['fnordAddedStates']=function(){},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x25e)]=function(_0x388a41){const _0x87e64d=_0x4c6a01;if(!VisuMZ[_0x87e64d(0x5e5)][_0x87e64d(0x32d)][_0x87e64d(0x84c)]['ShowRemovedState'])return;const _0x5f4304=_0x388a41[_0x87e64d(0xbbd)](),_0x21991b=_0x5f4304[_0x87e64d(0xba9)]();for(const _0x5425f5 of _0x21991b){_0x5425f5[_0x87e64d(0xa6b)]&&(this[_0x87e64d(0x543)](_0x87e64d(0x3e9)),this['push']('popBaseLine'),this['push'](_0x87e64d(0x949)),this['push'](_0x87e64d(0x7a6),_0x5425f5[_0x87e64d(0xa6b)][_0x87e64d(0x511)](_0x388a41[_0x87e64d(0x2c7)]())),this[_0x87e64d(0x543)]('wait'));}},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x3e9)]=function(){},Window_BattleLog[_0x4c6a01(0xc58)]['displayChangedBuffs']=function(_0x5903b7){const _0x18c30f=_0x4c6a01,_0x5361b0=VisuMZ['BattleCore'][_0x18c30f(0x32d)][_0x18c30f(0x84c)],_0x1a3dbe=_0x5903b7['result']();if(_0x5361b0[_0x18c30f(0x7e6)])this[_0x18c30f(0x2ea)](_0x5903b7,_0x1a3dbe[_0x18c30f(0xb03)],TextManager[_0x18c30f(0xc09)]);if(_0x5361b0[_0x18c30f(0x350)])this[_0x18c30f(0x2ea)](_0x5903b7,_0x1a3dbe['addedDebuffs'],TextManager[_0x18c30f(0x8a6)]);if(_0x5361b0['ShowRemovedBuff'])this[_0x18c30f(0x2ea)](_0x5903b7,_0x1a3dbe['removedBuffs'],TextManager[_0x18c30f(0x4e2)]);},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x2ea)]=function(_0x2195c4,_0xbb7b3c,_0x59c2ab){const _0xcb377f=_0x4c6a01;for(const _0x3b437e of _0xbb7b3c){if(_0xcb377f(0x4ff)==='FMkrR'){const _0x35fad3=_0x59c2ab[_0xcb377f(0x511)](_0x2195c4[_0xcb377f(0x2c7)](),TextManager[_0xcb377f(0xa5b)](_0x3b437e));this[_0xcb377f(0x543)](_0xcb377f(0xe1c)),this[_0xcb377f(0x543)](_0xcb377f(0x949)),this[_0xcb377f(0x543)](_0xcb377f(0x7a6),_0x35fad3),this[_0xcb377f(0x543)](_0xcb377f(0xcef));}else _0x221082=_0xd33b23(_0x5a5a65['$1']);}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xb67)]=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xd66)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xd66)]=function(){const _0x3f3db4=_0x4c6a01;VisuMZ[_0x3f3db4(0x5e5)][_0x3f3db4(0xb67)][_0x3f3db4(0x3a4)](this),this[_0x3f3db4(0x89b)]();},VisuMZ['BattleCore']['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x949)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x949)]=function(){const _0x6ffcd0=_0x4c6a01;VisuMZ[_0x6ffcd0(0x5e5)][_0x6ffcd0(0x967)][_0x6ffcd0(0x3a4)](this),this[_0x6ffcd0(0x89b)]();},VisuMZ[_0x4c6a01(0x5e5)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xe1c)],Window_BattleLog['prototype'][_0x4c6a01(0xe1c)]=function(){const _0x4d9930=_0x4c6a01;VisuMZ[_0x4d9930(0x5e5)][_0x4d9930(0x7f4)]['call'](this),this['processRefresh'](),this[_0x4d9930(0x89b)]();},VisuMZ['BattleCore'][_0x4c6a01(0x20b)]=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x732)],Window_BattleLog['prototype'][_0x4c6a01(0x732)]=function(_0x1f54b6){const _0x1a6bf6=_0x4c6a01;VisuMZ[_0x1a6bf6(0x5e5)][_0x1a6bf6(0x20b)]['call'](this,_0x1f54b6),this[_0x1a6bf6(0x89b)]();},Window_BattleLog['prototype'][_0x4c6a01(0x69c)]=function(){const _0x4b4117=_0x4c6a01;let _0x2342cd=0x0;this[_0x4b4117(0xcd4)]['length']>0x0&&(_0x2342cd=this[_0x4b4117(0xcd4)][this[_0x4b4117(0xcd4)][_0x4b4117(0x991)]-0x1]);if(this[_0x4b4117(0x238)][_0x4b4117(0x991)]>_0x2342cd)_0x4b4117(0x882)===_0x4b4117(0x9ac)?(this[_0x4b4117(0x513)]=_0x5a53ba,this['_forcedHomeY']=_0x169daa):this[_0x4b4117(0xcef)]();else{if('OXOxe'==='OXOxe')this[_0x4b4117(0x89b)]();else return 0x24;}},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xc78)]=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x4da)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x4da)]=function(_0x3b7b91,_0x17f0a1){const _0x51b9e6=_0x4c6a01;VisuMZ[_0x51b9e6(0x5e5)][_0x51b9e6(0xc78)][_0x51b9e6(0x3a4)](this,_0x3b7b91,_0x17f0a1),this[_0x51b9e6(0x89b)]();},VisuMZ[_0x4c6a01(0x5e5)]['Window_BattleLog_performAction']=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xbfe)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xbfe)]=function(_0x471c2f,_0x5c0a98){const _0x491f22=_0x4c6a01;VisuMZ[_0x491f22(0x5e5)][_0x491f22(0xbc1)][_0x491f22(0x3a4)](this,_0x471c2f,_0x5c0a98),this[_0x491f22(0x89b)]();},VisuMZ['BattleCore'][_0x4c6a01(0x75a)]=Window_BattleLog['prototype'][_0x4c6a01(0x3b1)],Window_BattleLog[_0x4c6a01(0xc58)]['performActionEnd']=function(_0x54f7d6){const _0x5dbaa6=_0x4c6a01;VisuMZ[_0x5dbaa6(0x5e5)]['Window_BattleLog_performActionEnd'][_0x5dbaa6(0x3a4)](this,_0x54f7d6);for(const _0x518301 of BattleManager['allBattleMembers']()){if('QjgYZ'===_0x5dbaa6(0x3f4)){if(!_0x518301)continue;if(_0x518301['isDead']())continue;_0x518301[_0x5dbaa6(0x556)]();}else this[_0x5dbaa6(0xd53)]('PreApply%1JS',_0x54482b,0x0,!![]),_0x9b4a9a[_0x5dbaa6(0x5e5)][_0x5dbaa6(0x580)][_0x5dbaa6(0x3a4)](this,_0x3f7c3b),this[_0x5dbaa6(0xd53)]('PostApply%1JS',_0x167397,this['_executedValue']||0x0,!![]),this[_0x5dbaa6(0x5bb)](_0x25f980);}this[_0x5dbaa6(0x89b)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x21d)]=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xc2f)],Window_BattleLog[_0x4c6a01(0xc58)]['performDamage']=function(_0x4d6de8){const _0x39ced4=_0x4c6a01;VisuMZ[_0x39ced4(0x5e5)][_0x39ced4(0x21d)][_0x39ced4(0x3a4)](this,_0x4d6de8),this[_0x39ced4(0x89b)]();},VisuMZ['BattleCore'][_0x4c6a01(0x90b)]=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x6b9)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x6b9)]=function(_0x51c881){const _0x536fe7=_0x4c6a01;VisuMZ['BattleCore'][_0x536fe7(0x90b)][_0x536fe7(0x3a4)](this,_0x51c881),this[_0x536fe7(0x89b)]();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0xaf1)]=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xb4f)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xb4f)]=function(_0x5a336c){const _0x488401=_0x4c6a01;VisuMZ[_0x488401(0x5e5)][_0x488401(0xaf1)]['call'](this,_0x5a336c),this[_0x488401(0x89b)]();},VisuMZ[_0x4c6a01(0x5e5)]['Window_BattleLog_performEvasion']=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x867)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x867)]=function(_0x3057b0){const _0x57741b=_0x4c6a01;VisuMZ[_0x57741b(0x5e5)][_0x57741b(0x25c)][_0x57741b(0x3a4)](this,_0x3057b0),this[_0x57741b(0x89b)]();},VisuMZ['BattleCore'][_0x4c6a01(0x224)]=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x54b)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x54b)]=function(_0x292138){const _0x4074ee=_0x4c6a01;VisuMZ[_0x4074ee(0x5e5)][_0x4074ee(0x224)][_0x4074ee(0x3a4)](this,_0x292138),this['callNextMethod']();},VisuMZ['BattleCore'][_0x4c6a01(0x53c)]=Window_BattleLog['prototype'][_0x4c6a01(0x2fb)],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x2fb)]=function(_0x1ead5d){const _0x16084d=_0x4c6a01;VisuMZ['BattleCore'][_0x16084d(0x53c)][_0x16084d(0x3a4)](this,_0x1ead5d),this[_0x16084d(0x89b)]();},VisuMZ[_0x4c6a01(0x5e5)]['Window_BattleLog_performReflection']=Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x79b)],Window_BattleLog[_0x4c6a01(0xc58)]['performReflection']=function(_0x111b7d){const _0x12850c=_0x4c6a01;VisuMZ['BattleCore'][_0x12850c(0x76f)]['call'](this,_0x111b7d),this['callNextMethod']();},VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x72a)]=Window_BattleLog[_0x4c6a01(0xc58)]['performSubstitute'],Window_BattleLog[_0x4c6a01(0xc58)]['performSubstitute']=function(_0x4fe172,_0x20ec01){const _0x350623=_0x4c6a01;VisuMZ[_0x350623(0x5e5)][_0x350623(0x72a)][_0x350623(0x3a4)](this,_0x4fe172,_0x20ec01),this['callNextMethod']();},VisuMZ[_0x4c6a01(0x5e5)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x4c6a01(0xc58)]['performCollapse'],Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x953)]=function(_0xc99b30){const _0x21c2ff=_0x4c6a01;VisuMZ[_0x21c2ff(0x5e5)]['Window_BattleLog_performCollapse'][_0x21c2ff(0x3a4)](this,_0xc99b30),this[_0x21c2ff(0x89b)]();},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x656)]=function(_0x1a09e9,_0x3ba804){const _0x4c5002=_0x4c6a01;_0x1a09e9[_0x4c5002(0x656)](_0x3ba804),this[_0x4c5002(0x89b)]();},Window_BattleLog[_0x4c6a01(0xc58)]['showEnemyAttackAnimation']=function(_0x2f8099,_0x5a8faa){const _0x29868f=_0x4c6a01,_0xd7d599=_0x2f8099['attackAnimationId1']();_0xd7d599<=0x0?_0x29868f(0x7d4)!=='eRQNX'?_0x1b88b9[_0x29868f(0x543)](_0x3557cc[_0x29868f(0x5dc)]()):SoundManager[_0x29868f(0x2b3)]():this[_0x29868f(0x55f)](_0x5a8faa,_0xd7d599);},Window_BattleLog['prototype'][_0x4c6a01(0x2a4)]=function(_0x585697,_0x47201b,_0xe80325){const _0x7eee1f=_0x4c6a01,_0x102a8b=[_0x585697][_0x7eee1f(0x4db)](_0x47201b);for(const _0x23844a of _0x102a8b){if(!_0x23844a)continue;_0x23844a[_0x7eee1f(0x547)](_0xe80325);}this[_0x7eee1f(0x89b)]();},Window_BattleLog[_0x4c6a01(0xc58)]['waitCount']=function(_0x4ee627){const _0x3905c9=_0x4c6a01;this[_0x3905c9(0x346)]=_0x4ee627;},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x94b)]=function(_0x1b461b,_0x5327e5){const _0x363d90=_0x4c6a01;for(const _0x20e08b of _0x1b461b){if(_0x363d90(0x9c4)===_0x363d90(0x9c4)){if(!_0x20e08b)continue;_0x20e08b[_0x363d90(0x94b)](_0x5327e5);}else{if(this[_0x363d90(0x219)]<=0x0)return;const _0x2e582b=this[_0x363d90(0x219)],_0x1b8dcb=this[_0x363d90(0x21f)],_0x5822e9=this[_0x363d90(0xa25)];_0x53a725[_0x363d90(0xad0)]?this[_0x363d90(0xd61)]=this[_0x363d90(0xa71)](this[_0x363d90(0xd61)],this[_0x363d90(0x44e)],_0x2e582b,_0x1b8dcb,_0x5822e9):this[_0x363d90(0xd61)]=(this['_currentAngle']*(_0x2e582b-0x1)+this[_0x363d90(0x44e)])/_0x2e582b;this[_0x363d90(0x219)]--;if(this['_angleDuration']<=0x0)this[_0x363d90(0x9e7)]();}}this[_0x363d90(0x89b)]();},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0x944)]=function(_0x4670be,_0x130ec2,_0x4e3a1e,_0x5b823e,_0x25366f,_0x35ed34){const _0x579b79=_0x4c6a01;_0x4670be[_0x579b79(0x442)](_0x130ec2,_0x4e3a1e,_0x5b823e,_0x25366f,_0x35ed34,-0x1),this['callNextMethod']();},Window_BattleLog['prototype']['performMoveToTargets']=function(_0x316bd5,_0x54cc9c,_0x2e4c3f,_0x19b5d3,_0x53af8a,_0x2aa044,_0x46e248){const _0x592f08=_0x4c6a01,_0x98ebe8=Math[_0x592f08(0x892)](..._0x54cc9c[_0x592f08(0x39f)](_0xed9e7e=>_0xed9e7e[_0x592f08(0x72f)]()[_0x592f08(0x545)]-_0xed9e7e[_0x592f08(0x72f)]()[_0x592f08(0x2e1)]()/0x2)),_0x1375b0=Math[_0x592f08(0xa5c)](..._0x54cc9c['map'](_0x48ae1f=>_0x48ae1f[_0x592f08(0x72f)]()[_0x592f08(0x545)]+_0x48ae1f[_0x592f08(0x72f)]()['mainSpriteWidth']()/0x2)),_0x577f99=Math[_0x592f08(0x892)](..._0x54cc9c['map'](_0x986fe0=>_0x986fe0['battler']()[_0x592f08(0xcaa)]-_0x986fe0[_0x592f08(0x72f)]()[_0x592f08(0x8cd)]())),_0x42f4fc=Math[_0x592f08(0xa5c)](..._0x54cc9c[_0x592f08(0x39f)](_0x4fcd7a=>_0x4fcd7a[_0x592f08(0x72f)]()[_0x592f08(0xcaa)])),_0xf3d57=_0x54cc9c[_0x592f08(0xac7)](_0x3bf1dd=>_0x3bf1dd['isActor']())[_0x592f08(0x991)],_0x1d1138=_0x54cc9c[_0x592f08(0xac7)](_0x4901e9=>_0x4901e9['isEnemy']())[_0x592f08(0x991)];let _0x1abfe6=0x0,_0x2f09c4=0x0;if(_0x2e4c3f[_0x592f08(0x996)](/front/i))_0x1abfe6=_0xf3d57>=_0x1d1138?_0x98ebe8:_0x1375b0;else{if(_0x2e4c3f['match'](/middle/i))_0x1abfe6=(_0x98ebe8+_0x1375b0)/0x2,_0x46e248=-0x1;else _0x2e4c3f['match'](/back/i)&&(_0x1abfe6=_0xf3d57>=_0x1d1138?_0x1375b0:_0x98ebe8);}if(_0x2e4c3f[_0x592f08(0x996)](/head/i))_0x592f08(0x3a6)===_0x592f08(0x987)?(this['applyFreezeMotionFrames'](),_0x5cb72[_0x592f08(0x5e5)]['Sprite_Actor_updateFrame'][_0x592f08(0x3a4)](this)):_0x2f09c4=_0x577f99;else{if(_0x2e4c3f[_0x592f08(0x996)](/center/i)){if(_0x592f08(0x98b)===_0x592f08(0x98b)){_0x2f09c4=(_0x577f99+_0x42f4fc)/0x2;if(_0x316bd5[_0x592f08(0x72f)]())_0x2f09c4+=_0x316bd5[_0x592f08(0x72f)]()['height']/0x2;}else _0x56e8a6+=_0x3bb738,_0x5de934+=_0x1e8332['isActor']()?-_0x166ced:_0x2e2a9a;}else _0x2e4c3f[_0x592f08(0x996)](/base/i)&&(_0x2f09c4=_0x42f4fc);}_0x316bd5[_0x592f08(0x442)](_0x1abfe6,_0x2f09c4,_0x19b5d3,_0x53af8a,_0x2aa044,_0x46e248),this[_0x592f08(0x89b)]();},Window_BattleLog[_0x4c6a01(0xc58)][_0x4c6a01(0xd7a)]=function(_0xfa9124,_0x3c897c,_0x358f19){const _0x150fb4=_0x4c6a01;for(const _0x4ebf3c of _0xfa9124){if('HIZze'===_0x150fb4(0x904)){if(!_0x4ebf3c)continue;_0x4ebf3c[_0x150fb4(0xc33)](_0x3c897c,_0x358f19);}else _0x38e930=_0x283c08(_0x391ae2['$1']);}this['callNextMethod']();};function Window_BattleMultiTarget(){const _0x30b524=_0x4c6a01;this[_0x30b524(0x67a)](...arguments);}Window_BattleMultiTarget[_0x4c6a01(0xc58)]=Object[_0x4c6a01(0xb36)](Window_Command['prototype']),Window_BattleMultiTarget[_0x4c6a01(0xc58)][_0x4c6a01(0xacc)]=Window_BattleMultiTarget,VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x32d)]['MultiTarget']=VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x32d)][_0x4c6a01(0xa89)]||{},Window_BattleMultiTarget[_0x4c6a01(0x489)]=VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x32d)][_0x4c6a01(0xa89)][_0x4c6a01(0x876)]??0x118,Window_BattleMultiTarget[_0x4c6a01(0xbf7)]=VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x32d)][_0x4c6a01(0xa89)][_0x4c6a01(0xe18)]??0x2,Window_BattleMultiTarget[_0x4c6a01(0xc69)]=VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x32d)]['MultiTarget'][_0x4c6a01(0xb6d)]??!![],Window_BattleMultiTarget[_0x4c6a01(0xe1b)]=VisuMZ['BattleCore'][_0x4c6a01(0x32d)]['MultiTarget'][_0x4c6a01(0x922)]??_0x4c6a01(0x9d3),Window_BattleMultiTarget[_0x4c6a01(0x2f8)]=VisuMZ['BattleCore'][_0x4c6a01(0x32d)][_0x4c6a01(0xa89)][_0x4c6a01(0xce6)]??_0x4c6a01(0x2fd),Window_BattleMultiTarget['ACTOR_OFFSET_X']=VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x32d)][_0x4c6a01(0xa89)]['ActorOffsetX']??0x0,Window_BattleMultiTarget[_0x4c6a01(0x790)]=VisuMZ[_0x4c6a01(0x5e5)]['Settings'][_0x4c6a01(0xa89)][_0x4c6a01(0xcc3)]??0x0,Window_BattleMultiTarget[_0x4c6a01(0x721)]=VisuMZ['BattleCore'][_0x4c6a01(0x32d)][_0x4c6a01(0xa89)][_0x4c6a01(0x82c)]??0x0,Window_BattleMultiTarget[_0x4c6a01(0x603)]=VisuMZ[_0x4c6a01(0x5e5)][_0x4c6a01(0x32d)][_0x4c6a01(0xa89)]['EnemyOffsetY']??0x0,Window_BattleMultiTarget[_0x4c6a01(0xc58)][_0x4c6a01(0x67a)]=function(_0xff26e4,_0x592b8a){const _0x124ecb=_0x4c6a01;this[_0x124ecb(0x259)]=_0x592b8a,Window_Command[_0x124ecb(0xc58)]['initialize'][_0x124ecb(0x3a4)](this,_0xff26e4),this[_0x124ecb(0xa12)](Window_BattleMultiTarget[_0x124ecb(0xbf7)]),this[_0x124ecb(0xc87)](),this[_0x124ecb(0xd46)](),this[_0x124ecb(0x3c4)]();},Window_BattleMultiTarget[_0x4c6a01(0xc58)]['forActor']=function(){const _0x1c989c=_0x4c6a01;return this[_0x1c989c(0x259)];},Window_BattleMultiTarget['prototype'][_0x4c6a01(0x2c2)]=function(){const _0x4ab82a=_0x4c6a01;let _0x99e660=this[_0x4ab82a(0xc02)]()?Window_BattleMultiTarget[_0x4ab82a(0xe1b)]:Window_BattleMultiTarget[_0x4ab82a(0x2f8)];if(Imported[_0x4ab82a(0xad0)]&&Window_BattleMultiTarget[_0x4ab82a(0xc69)]){this[_0x4ab82a(0x964)]=this['forActor']()?_0x4ab82a(0x29b):_0x4ab82a(0x527),this[_0x4ab82a(0x4fc)]=TextManager['getInputButtonString'](this[_0x4ab82a(0x964)]);const _0xdc5a07=VisuMZ[_0x4ab82a(0x7c5)][_0x4ab82a(0x32d)][_0x4ab82a(0xb57)][_0x4ab82a(0x461)];_0x99e660=_0xdc5a07[_0x4ab82a(0x511)](this[_0x4ab82a(0x4fc)],_0x99e660);}this[_0x4ab82a(0x39b)](_0x99e660,_0x4ab82a(0xaef));},Window_BattleMultiTarget[_0x4c6a01(0xc58)]['drawItem']=function(_0x4f3fc7){const _0xfd778d=_0x4c6a01,_0x23c313=this[_0xfd778d(0xc94)](_0x4f3fc7);this[_0xfd778d(0x6de)](),this[_0xfd778d(0x935)](this[_0xfd778d(0xa6a)](_0x4f3fc7));const _0x30bb2a=this['commandName'](_0x4f3fc7),_0x4af8db=this[_0xfd778d(0x6f2)](_0x30bb2a)['width'],_0x50ea4e=_0x23c313['x']+Math[_0xfd778d(0x989)]((_0x23c313['width']-_0x4af8db)/0x2);this['drawTextEx'](_0x30bb2a,_0x50ea4e,_0x23c313['y'],_0x23c313[_0xfd778d(0xe09)]);},Window_BattleMultiTarget[_0x4c6a01(0xc58)][_0x4c6a01(0x32e)]=function(){const _0xa4bccd=_0x4c6a01;Window_Command['prototype']['update'][_0xa4bccd(0x3a4)](this),this[_0xa4bccd(0x91c)](),this['updateKeyboardKeys']();},Window_BattleMultiTarget[_0x4c6a01(0xc58)]['updateVisibility']=function(){const _0x1e6dec=_0x4c6a01;this[_0x1e6dec(0x22f)]=this[_0x1e6dec(0x865)]();},Window_BattleMultiTarget['prototype'][_0x4c6a01(0x865)]=function(){const _0x4c6d65=_0x4c6a01,_0x5e7aff=BattleManager[_0x4c6d65(0xa08)](),_0x398097=_0x5e7aff&&_0x5e7aff[_0x4c6d65(0xd92)]();if(!_0x398097)return![];const _0xcb1d89=SceneManager[_0x4c6d65(0x4c1)];if(this[_0x4c6d65(0xc02)]()){if(_0xcb1d89['_actorWindow'][_0x4c6d65(0x43a)]&&_0xcb1d89['_actorWindow'][_0x4c6d65(0x57d)][_0x4c6d65(0x29b)])return!![];if(_0xcb1d89[_0x4c6d65(0xb0b)][_0x4c6d65(0x43a)]&&_0xcb1d89[_0x4c6d65(0xb0b)]['_handlers'][_0x4c6d65(0x29b)])return!![];}else{if(_0xcb1d89[_0x4c6d65(0xb0b)][_0x4c6d65(0x43a)]&&_0xcb1d89['_enemyWindow'][_0x4c6d65(0x57d)]['pageup'])return!![];}return![];},Window_BattleMultiTarget[_0x4c6a01(0xc58)][_0x4c6a01(0xca1)]=function(){const _0x8bf17c=_0x4c6a01;if(!Imported[_0x8bf17c(0xad0)])return;this['_buttonText']!==TextManager['getInputButtonString'](this['_buttonKey'])&&this[_0x8bf17c(0xd1c)]();},Window_BattleMultiTarget[_0x4c6a01(0xc58)][_0x4c6a01(0x4d7)]=function(){const _0x3226e1=_0x4c6a01;if(this[_0x3226e1(0x22f)]&&TouchInput[_0x3226e1(0x8d4)]()){const _0x284cea=this[_0x3226e1(0x596)]();if(_0x284cea>=0x0){if(_0x3226e1(0xaaa)===_0x3226e1(0xaaa)){const _0x37aa4b=this[_0x3226e1(0xc02)]()?_0x3226e1(0x29b):_0x3226e1(0x527);Input['virtualClick'](_0x37aa4b);}else return this[_0x3226e1(0x3e7)]();}}};