//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.71;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.71] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x579382=_0x5528;(function(_0x80b724,_0x2cbd7e){const _0x8c0eb4=_0x5528,_0x1f8bb1=_0x80b724();while(!![]){try{const _0x103726=parseInt(_0x8c0eb4(0xc21))/0x1+parseInt(_0x8c0eb4(0x30e))/0x2+-parseInt(_0x8c0eb4(0x833))/0x3*(parseInt(_0x8c0eb4(0x885))/0x4)+-parseInt(_0x8c0eb4(0x548))/0x5+parseInt(_0x8c0eb4(0xaa4))/0x6+parseInt(_0x8c0eb4(0x3e8))/0x7*(parseInt(_0x8c0eb4(0x60e))/0x8)+-parseInt(_0x8c0eb4(0x466))/0x9*(-parseInt(_0x8c0eb4(0x1c9))/0xa);if(_0x103726===_0x2cbd7e)break;else _0x1f8bb1['push'](_0x1f8bb1['shift']());}catch(_0x43e783){_0x1f8bb1['push'](_0x1f8bb1['shift']());}}}(_0x15df,0x1e87d));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x579382(0xa1c)](function(_0x38261e){const _0x40aa47=_0x579382;return _0x38261e[_0x40aa47(0x976)]&&_0x38261e['description'][_0x40aa47(0xb2b)]('['+label+']');})[0x0];VisuMZ[label]['Settings']=VisuMZ[label][_0x579382(0x27f)]||{},VisuMZ[_0x579382(0x6dc)]=function(_0x4f08fe,_0x315b47){const _0x1232c4=_0x579382;for(const _0x17e9b0 in _0x315b47){if(_0x17e9b0[_0x1232c4(0x299)](/(.*):(.*)/i)){const _0x561918=String(RegExp['$1']),_0x458554=String(RegExp['$2'])[_0x1232c4(0x2ed)]()[_0x1232c4(0x8f5)]();let _0x42a2dc,_0x43be30,_0x402721;switch(_0x458554){case _0x1232c4(0x829):_0x42a2dc=_0x315b47[_0x17e9b0]!==''?Number(_0x315b47[_0x17e9b0]):0x0;break;case'ARRAYNUM':_0x43be30=_0x315b47[_0x17e9b0]!==''?JSON[_0x1232c4(0x6d7)](_0x315b47[_0x17e9b0]):[],_0x42a2dc=_0x43be30[_0x1232c4(0xb6e)](_0x30802b=>Number(_0x30802b));break;case _0x1232c4(0x2c5):_0x42a2dc=_0x315b47[_0x17e9b0]!==''?eval(_0x315b47[_0x17e9b0]):null;break;case _0x1232c4(0xc63):_0x43be30=_0x315b47[_0x17e9b0]!==''?JSON['parse'](_0x315b47[_0x17e9b0]):[],_0x42a2dc=_0x43be30['map'](_0x174b64=>eval(_0x174b64));break;case'JSON':_0x42a2dc=_0x315b47[_0x17e9b0]!==''?JSON['parse'](_0x315b47[_0x17e9b0]):'';break;case _0x1232c4(0x965):_0x43be30=_0x315b47[_0x17e9b0]!==''?JSON['parse'](_0x315b47[_0x17e9b0]):[],_0x42a2dc=_0x43be30['map'](_0x1c59f0=>JSON[_0x1232c4(0x6d7)](_0x1c59f0));break;case'FUNC':_0x42a2dc=_0x315b47[_0x17e9b0]!==''?new Function(JSON[_0x1232c4(0x6d7)](_0x315b47[_0x17e9b0])):new Function('return\x200');break;case _0x1232c4(0x8e3):_0x43be30=_0x315b47[_0x17e9b0]!==''?JSON[_0x1232c4(0x6d7)](_0x315b47[_0x17e9b0]):[],_0x42a2dc=_0x43be30[_0x1232c4(0xb6e)](_0x12f23d=>new Function(JSON['parse'](_0x12f23d)));break;case _0x1232c4(0x713):_0x42a2dc=_0x315b47[_0x17e9b0]!==''?String(_0x315b47[_0x17e9b0]):'';break;case _0x1232c4(0x405):_0x43be30=_0x315b47[_0x17e9b0]!==''?JSON[_0x1232c4(0x6d7)](_0x315b47[_0x17e9b0]):[],_0x42a2dc=_0x43be30[_0x1232c4(0xb6e)](_0x1021ac=>String(_0x1021ac));break;case _0x1232c4(0x995):_0x402721=_0x315b47[_0x17e9b0]!==''?JSON[_0x1232c4(0x6d7)](_0x315b47[_0x17e9b0]):{},_0x4f08fe[_0x561918]={},VisuMZ[_0x1232c4(0x6dc)](_0x4f08fe[_0x561918],_0x402721);continue;case _0x1232c4(0x520):_0x43be30=_0x315b47[_0x17e9b0]!==''?JSON[_0x1232c4(0x6d7)](_0x315b47[_0x17e9b0]):[],_0x42a2dc=_0x43be30['map'](_0x5c4724=>VisuMZ[_0x1232c4(0x6dc)]({},JSON[_0x1232c4(0x6d7)](_0x5c4724)));break;default:continue;}_0x4f08fe[_0x561918]=_0x42a2dc;}}return _0x4f08fe;},(_0x375ccf=>{const _0x1b2b5b=_0x579382,_0x85f992=_0x375ccf[_0x1b2b5b(0x1d8)];for(const _0x56f5b6 of dependencies){if(_0x1b2b5b(0x6b4)===_0x1b2b5b(0xcb9))return this[_0x1b2b5b(0x366)]();else{if(!Imported[_0x56f5b6]){alert(_0x1b2b5b(0x3d4)[_0x1b2b5b(0x7e1)](_0x85f992,_0x56f5b6)),SceneManager['exit']();break;}}}const _0x41db14=_0x375ccf[_0x1b2b5b(0x1c3)];if(_0x41db14[_0x1b2b5b(0x299)](/\[Version[ ](.*?)\]/i)){if(_0x1b2b5b(0x80b)===_0x1b2b5b(0x80b)){const _0x1e8112=Number(RegExp['$1']);_0x1e8112!==VisuMZ[label][_0x1b2b5b(0x240)]&&(alert(_0x1b2b5b(0x439)['format'](_0x85f992,_0x1e8112)),SceneManager['exit']());}else this[_0x1b2b5b(0x506)]=_0x353154['loadSystem'](_0x5d81f2[_0x1b2b5b(0x45b)]);}if(_0x41db14['match'](/\[Tier[ ](\d+)\]/i)){if(_0x1b2b5b(0xa67)===_0x1b2b5b(0xa6d))_0x2a01cf[_0x1b2b5b(0x675)][_0x1b2b5b(0xa50)]['call'](this),this[_0x1b2b5b(0x39e)]();else{const _0xec1431=Number(RegExp['$1']);_0xec1431<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'['format'](_0x85f992,_0xec1431,tier)),SceneManager['exit']()):_0x1b2b5b(0x7c0)!==_0x1b2b5b(0x7a2)?tier=Math[_0x1b2b5b(0x1f1)](_0xec1431,tier):_0x24f1e8['prototype']['drawItem']['call'](this,_0x1eb9d4);}}VisuMZ[_0x1b2b5b(0x6dc)](VisuMZ[label][_0x1b2b5b(0x27f)],_0x375ccf[_0x1b2b5b(0xb89)]);})(pluginData),VisuMZ[_0x579382(0x7c1)]=function(_0x4946c6){const _0x5a4d64=_0x579382;let _0x2181a2=[];for(const _0x3359c6 of _0x4946c6){if(_0x5a4d64(0x372)==='iEglR')_0x2181a2=_0x2181a2['concat'](VisuMZ['ConvertActionSequenceTarget'](_0x3359c6));else{if(!_0x44ec19[_0x5a4d64(0x675)]['JS'][_0x14465e][_0x5a4d64(0xb95)](this,this[_0x5a4d64(0x6f5)],_0x341fcb))return![];}}return _0x2181a2[_0x5a4d64(0xa1c)](_0x4681e9=>_0x4681e9);},VisuMZ['ConvertActionSequenceTarget']=function(_0x2d72fd){const _0x55a8c5=_0x579382,_0x158d1f=BattleManager['allBattleMembers']()[_0x55a8c5(0xa1c)](_0x4882db=>_0x4882db&&_0x4882db[_0x55a8c5(0xa86)]()),_0x21dbb8=BattleManager[_0x55a8c5(0x7c7)],_0x58c38d=BattleManager['_target'],_0x1c9841=BattleManager[_0x55a8c5(0x9ab)]?BattleManager[_0x55a8c5(0x9ab)][_0x55a8c5(0x989)](0x0):_0x158d1f;_0x2d72fd=_0x2d72fd['toLowerCase']()['trim']();if(_0x2d72fd==='user')return[_0x21dbb8];else{if(_0x2d72fd==='current\x20target'){if(_0x55a8c5(0xc61)!=='zuiuu'){const _0x5d0481=_0x42401c['format'](_0xb539cd[_0x55a8c5(0x1d8)](),_0x564679['param'](_0xa18c75));this[_0x55a8c5(0x226)](_0x55a8c5(0x7b1)),this[_0x55a8c5(0x226)](_0x55a8c5(0xa21)),this[_0x55a8c5(0x226)](_0x55a8c5(0x693),_0x5d0481),this[_0x55a8c5(0x226)](_0x55a8c5(0x7c8));}else return[_0x58c38d];}else{if(_0x2d72fd===_0x55a8c5(0xa3e)){if(_0x58c38d){if('rfeSA'===_0x55a8c5(0xb38)){const _0x22bc24=this['autoBattleWindowRect']();this[_0x55a8c5(0x76f)]=new _0x4415e7(_0x22bc24),this[_0x55a8c5(0x76f)][_0x55a8c5(0x19b)](),this[_0x55a8c5(0xbb0)](this[_0x55a8c5(0x76f)]);}else{const _0x304bee=_0x1c9841['indexOf'](_0x58c38d);return _0x304bee>=0x0?[_0x1c9841[_0x304bee-0x1]||_0x58c38d]:[_0x58c38d];}}}else{if(_0x2d72fd===_0x55a8c5(0x613)){if(_0x55a8c5(0x35e)!==_0x55a8c5(0x35e)){return _0x2eed56[_0x55a8c5(0x675)][_0x55a8c5(0xc0a)][_0x55a8c5(0xb95)](this);;}else{if(_0x58c38d){const _0x253005=_0x1c9841[_0x55a8c5(0x903)](_0x58c38d);return _0x253005>=0x0?[_0x1c9841[_0x253005+0x1]||_0x58c38d]:[_0x58c38d];}}}else{if(_0x2d72fd===_0x55a8c5(0xc3e))return _0x1c9841;else{if(_0x2d72fd===_0x55a8c5(0x367))return _0x55a8c5(0x61c)!==_0x55a8c5(0x61c)?this[_0x55a8c5(0x270)]()?_0x1605fe[_0x55a8c5(0x675)][_0x55a8c5(0x65c)]['call'](this):0x0:[_0x21dbb8][_0x55a8c5(0xa96)](_0x1c9841);else{if(_0x2d72fd==='not\x20focus')return _0x158d1f[_0x55a8c5(0xa1c)](_0x175604=>_0x175604!==_0x21dbb8&&!_0x1c9841[_0x55a8c5(0xb2b)](_0x175604)&&_0x175604[_0x55a8c5(0x9f0)]());}}}}}}if(_0x21dbb8){if(_0x55a8c5(0xc3f)===_0x55a8c5(0xc3f)){if(_0x2d72fd===_0x55a8c5(0xa55)){if(_0x55a8c5(0xa17)===_0x55a8c5(0xa17))return _0x21dbb8[_0x55a8c5(0x24e)]()[_0x55a8c5(0x3a1)]();else this[_0x55a8c5(0x685)]['svAnchorY']=_0x2f8966['prototype']['svBattlerAnchorY'][_0x55a8c5(0xb95)](this);}else{if(_0x2d72fd===_0x55a8c5(0xb81)){if(_0x55a8c5(0x526)!=='kZsIw')_0x509e22[_0x3ad726]===0x1&&this[_0x55a8c5(0x996)]!==_0x597312&&(_0x2d41fb[_0x371219]=null);else return _0x21dbb8[_0x55a8c5(0x24e)]()[_0x55a8c5(0x3a1)]()[_0x55a8c5(0xa1c)](_0x3861e8=>_0x3861e8!==_0x21dbb8);}else{if(_0x2d72fd===_0x55a8c5(0x4c0))return _0x21dbb8[_0x55a8c5(0x24e)]()[_0x55a8c5(0x3a1)]()['filter'](_0x3056bf=>_0x3056bf!==_0x58c38d);else{if(_0x2d72fd===_0x55a8c5(0x32c))return _0x21dbb8[_0x55a8c5(0x24e)]()[_0x55a8c5(0xbc8)]();else{if(_0x2d72fd['match'](/FRIEND INDEX (\d+)/i)){if(_0x55a8c5(0x70f)!==_0x55a8c5(0x70f))_0xae1249=_0x490841['boxWidth']/0x2,_0x4ae626=_0x56e4eb[_0x55a8c5(0x98e)]/0x2;else{const _0xccfe5b=Number(RegExp['$1']);return[_0x21dbb8[_0x55a8c5(0x24e)]()[_0x55a8c5(0x295)]()[_0xccfe5b]];}}}}}}if(_0x2d72fd==='alive\x20opponents')return _0x21dbb8[_0x55a8c5(0x851)]()['aliveMembers']();else{if(_0x2d72fd===_0x55a8c5(0x801))return'Eetvf'===_0x55a8c5(0x412)?_0x21dbb8[_0x55a8c5(0x851)]()[_0x55a8c5(0x3a1)]()[_0x55a8c5(0xa1c)](_0x4cbe65=>_0x4cbe65!==_0x58c38d):(_0x48d57b[_0x55a8c5(0x24c)](this),_0x5a02ef[_0x55a8c5(0x675)]['Game_Interpreter_PluginCommand'][_0x55a8c5(0xb95)](this,_0x16f76c));else{if(_0x2d72fd==='dead\x20opponents')return _0x21dbb8[_0x55a8c5(0x851)]()[_0x55a8c5(0xbc8)]();else{if(_0x2d72fd['match'](/OPPONENT INDEX (\d+)/i)){const _0x5a83f8=Number(RegExp['$1']);return[_0x21dbb8[_0x55a8c5(0x851)]()['members']()[_0x5a83f8]];}}}}}else{const _0x56e3d4=this[_0x55a8c5(0x6f5)][_0x55a8c5(0x60b)]();if(_0x56e3d4){const _0x283bf3=this[_0x55a8c5(0xb5f)]('singleSkill',_0x56e3d4['id']);this[_0x55a8c5(0xa29)](_0x283bf3||0x0);}}}if(_0x2d72fd===_0x55a8c5(0x720))return _0x55a8c5(0x856)===_0x55a8c5(0x856)?$gameParty['aliveMembers']():this[_0x55a8c5(0xb9f)][_0x55a8c5(0x7b0)]();else{if(_0x2d72fd===_0x55a8c5(0x7bf))return $gameParty[_0x55a8c5(0x3a1)]()['filter'](_0x908659=>_0x908659!==_0x21dbb8);else{if(_0x2d72fd===_0x55a8c5(0x30f))return $gameParty[_0x55a8c5(0x3a1)]()[_0x55a8c5(0xa1c)](_0xbd5ae1=>_0xbd5ae1!==_0x58c38d);else{if(_0x2d72fd===_0x55a8c5(0x461))return $gameParty[_0x55a8c5(0xbc8)]();else{if(_0x2d72fd[_0x55a8c5(0x299)](/ACTOR INDEX (\d+)/i)){if('tLZeO'!==_0x55a8c5(0x983)){const _0x3ccdd5=Number(RegExp['$1']);return[$gameParty[_0x55a8c5(0x295)]()[_0x3ccdd5]];}else{if(_0xd62ae8){const _0x42da34=_0x47fbc5[_0x55a8c5(0x903)](_0x147e7e);return _0x42da34>=0x0?[_0x2b8a62[_0x42da34-0x1]||_0x573976]:[_0x4d0640];}}}else{if(_0x2d72fd['match'](/ACTOR ID (\d+)/i)){const _0x479b75=Number(RegExp['$1']);return[$gameActors[_0x55a8c5(0x6b7)](_0x479b75)];}}}}}}if(_0x2d72fd===_0x55a8c5(0x28d))return $gameTroop[_0x55a8c5(0x3a1)]();else{if(_0x2d72fd===_0x55a8c5(0x860))return $gameTroop['aliveMembers']()['filter'](_0x28b71a=>_0x28b71a!==_0x21dbb8);else{if(_0x2d72fd===_0x55a8c5(0x6cf))return $gameTroop[_0x55a8c5(0x3a1)]()[_0x55a8c5(0xa1c)](_0x1fd56a=>_0x1fd56a!==_0x58c38d);else{if(_0x2d72fd===_0x55a8c5(0xb73))return $gameTroop['deadMembers']();else{if(_0x2d72fd['match'](/ENEMY INDEX (\d+)/i)){const _0x4cbf36=Number(RegExp['$1']);return[$gameTroop[_0x55a8c5(0x295)]()[_0x4cbf36]];}else{if(_0x2d72fd[_0x55a8c5(0x299)](/ENEMY ID (\d+)/i)){const _0x1bf977=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0x55a8c5(0xa1c)](_0x153331=>_0x153331[_0x55a8c5(0x610)]()===_0x1bf977);}}}}}}if(_0x2d72fd===_0x55a8c5(0x63c))return _0x158d1f[_0x55a8c5(0xa1c)](_0x45baf3=>_0x45baf3[_0x55a8c5(0x884)]());else{if(_0x2d72fd===_0x55a8c5(0x9e9))return _0x55a8c5(0xc6a)===_0x55a8c5(0x297)?this[_0x55a8c5(0x55c)](_0x20921d):_0x158d1f[_0x55a8c5(0xa1c)](_0x20c584=>_0x20c584[_0x55a8c5(0x884)]()&&_0x20c584!==_0x21dbb8);else{if(_0x2d72fd===_0x55a8c5(0xc89))return _0x158d1f[_0x55a8c5(0xa1c)](_0x47bf20=>_0x47bf20['isAlive']()&&_0x47bf20!==_0x58c38d);else{if(_0x2d72fd===_0x55a8c5(0x455)){if('Beeiy'===_0x55a8c5(0xb52))return _0x158d1f['filter'](_0x4c9196=>_0x4c9196[_0x55a8c5(0x84b)]());else _0x281ef4['command119']([_0x1a527e]);}}}}return[];},PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0xb4f),_0x5d6aac=>{const _0x342e34=_0x579382;if(!SceneManager[_0x342e34(0xc65)]())return;VisuMZ[_0x342e34(0x6dc)](_0x5d6aac,_0x5d6aac);const _0x57bc66=$gameTemp[_0x342e34(0x6c2)](),_0x2ef4ff=BattleManager[_0x342e34(0x3ca)],_0x49420a=BattleManager[_0x342e34(0x7c7)],_0x3c8910=BattleManager['_allTargets']?BattleManager[_0x342e34(0x9ab)]['slice'](0x0):[],_0x2095c7=BattleManager[_0x342e34(0x2f7)];if(!_0x57bc66||!_0x2ef4ff||!_0x49420a)return;if(!_0x2ef4ff[_0x342e34(0x270)]())return;if(_0x5d6aac[_0x342e34(0x797)])_0x2095c7['displayAction'](_0x49420a,_0x2ef4ff[_0x342e34(0x270)]());_0x5d6aac[_0x342e34(0x467)]&&_0x2095c7['push']('applyImmortal',_0x49420a,_0x3c8910,!![]);if(_0x5d6aac[_0x342e34(0x9ad)])_0x2095c7[_0x342e34(0x226)](_0x342e34(0xa37),_0x49420a,_0x2ef4ff);if(_0x5d6aac[_0x342e34(0x7b3)])_0x2095c7[_0x342e34(0x226)](_0x342e34(0xc04));if(_0x5d6aac[_0x342e34(0x629)])_0x2095c7[_0x342e34(0x226)](_0x342e34(0x651),_0x49420a,_0x2ef4ff);if(_0x5d6aac['WaitForAnimation'])_0x2095c7[_0x342e34(0x226)](_0x342e34(0x3c6));_0x57bc66[_0x342e34(0x9c8)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x77b),_0x62a43a=>{const _0x5b3064=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5b3064(0x6dc)](_0x62a43a,_0x62a43a);const _0x107327=$gameTemp[_0x5b3064(0x6c2)](),_0x155eee=BattleManager[_0x5b3064(0x3ca)],_0x1b42c9=BattleManager[_0x5b3064(0x7c7)],_0x590048=BattleManager['_allTargets']?BattleManager[_0x5b3064(0x9ab)][_0x5b3064(0x989)](0x0):[],_0xcb89d2=BattleManager[_0x5b3064(0x2f7)],_0x2b6ce0=_0x62a43a[_0x5b3064(0x3f5)]??![];if(!_0x107327||!_0x155eee||!_0x1b42c9)return;if(!_0x155eee[_0x5b3064(0x270)]())return;let _0x54e871=_0x2b6ce0?_0xcb89d2['getDualWieldTimes'](_0x1b42c9):0x1;for(let _0x55c110=0x0;_0x55c110<_0x54e871;_0x55c110++){_0x2b6ce0&&_0x1b42c9[_0x5b3064(0xc58)]()&&(_0x5b3064(0x943)!==_0x5b3064(0x363)?_0xcb89d2[_0x5b3064(0x226)](_0x5b3064(0x6ed),_0x1b42c9,_0x55c110):(this[_0x5b3064(0x2f7)][_0x5b3064(0x226)](_0x5b3064(0x693),_0x2d5938['surprise']['format'](_0x4f1be3[_0x5b3064(0x1d8)]())),this[_0x5b3064(0x2f7)][_0x5b3064(0x226)](_0x5b3064(0x7c8))));if(_0x62a43a['PerformAction'])_0xcb89d2['push'](_0x5b3064(0xa77),_0x1b42c9,_0x155eee);if(_0x62a43a['WaitCount']>0x0)_0xcb89d2[_0x5b3064(0x226)]('waitCount',_0x62a43a[_0x5b3064(0xa57)]);if(_0x62a43a['ActionAnimation'])_0xcb89d2[_0x5b3064(0x226)](_0x5b3064(0x2cc),_0x1b42c9,_0x590048,_0x155eee[_0x5b3064(0x270)]()['animationId']);if(_0x62a43a[_0x5b3064(0x8d2)])_0xcb89d2[_0x5b3064(0x226)](_0x5b3064(0x3c6));for(const _0x4b5aa2 of _0x590048){if(!_0x4b5aa2)continue;if(_0x62a43a['ActionEffect'])_0xcb89d2['push'](_0x5b3064(0x3db),_0x1b42c9,_0x4b5aa2);}}_0x2b6ce0&&_0x1b42c9['isActor']()&&_0xcb89d2['push'](_0x5b3064(0x53f),_0x1b42c9);if(_0x62a43a[_0x5b3064(0x467)])_0xcb89d2[_0x5b3064(0x226)](_0x5b3064(0x227),_0x1b42c9,_0x590048,![]);_0x107327[_0x5b3064(0x9c8)](_0x5b3064(0x8cd));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Set_TargetActionSet',_0x117fcd=>{const _0x50a9d7=_0x579382;if(!SceneManager[_0x50a9d7(0xc65)]())return;VisuMZ[_0x50a9d7(0x6dc)](_0x117fcd,_0x117fcd);const _0x10d887=$gameTemp['getLastPluginCommandInterpreter'](),_0x4740ee=BattleManager[_0x50a9d7(0x3ca)],_0x458387=BattleManager[_0x50a9d7(0x7c7)],_0x44d6fb=BattleManager[_0x50a9d7(0x9ab)]?BattleManager[_0x50a9d7(0x9ab)][_0x50a9d7(0x989)](0x0):[],_0x10a841=BattleManager['_logWindow'],_0x1cb5ae=_0x117fcd[_0x50a9d7(0x3f5)]??![];if(!_0x10d887||!_0x4740ee||!_0x458387)return;if(!_0x4740ee[_0x50a9d7(0x270)]())return;let _0xa6aa31=_0x1cb5ae?_0x10a841[_0x50a9d7(0x4da)](_0x458387):0x1;for(let _0x257ae4=0x0;_0x257ae4<_0xa6aa31;_0x257ae4++){if(_0x50a9d7(0x740)!=='MmGXU')for(const _0x159a26 of _0x44d6fb){if('SBuIy'===_0x50a9d7(0x2a4)){if(!_0x159a26)continue;_0x1cb5ae&&_0x458387[_0x50a9d7(0xc58)]()&&_0x10a841[_0x50a9d7(0x226)](_0x50a9d7(0x6ed),_0x458387,_0x257ae4);if(_0x117fcd[_0x50a9d7(0x435)])_0x10a841[_0x50a9d7(0x226)](_0x50a9d7(0xa77),_0x458387,_0x4740ee);if(_0x117fcd[_0x50a9d7(0x6e8)]>0x0)_0x10a841[_0x50a9d7(0x226)]('waitCount',_0x117fcd[_0x50a9d7(0x6e8)]);if(_0x117fcd['ActionAnimation'])_0x10a841['push'](_0x50a9d7(0x2cc),_0x458387,[_0x159a26],_0x4740ee[_0x50a9d7(0x270)]()[_0x50a9d7(0x944)]);if(_0x117fcd['WaitCount2']>0x0)_0x10a841[_0x50a9d7(0x226)](_0x50a9d7(0x638),_0x117fcd[_0x50a9d7(0x806)]);if(_0x117fcd[_0x50a9d7(0x633)])_0x10a841['push'](_0x50a9d7(0x3db),_0x458387,_0x159a26);}else return _0x43a7bc[_0x50a9d7(0x226)](...this[_0x50a9d7(0x24e)]()[_0x50a9d7(0x3a1)]()[_0x50a9d7(0xa1c)](_0x518b3c=>_0x518b3c!==this[_0x50a9d7(0xaed)]())),this[_0x50a9d7(0x7a1)](_0x356c02);}else _0x77e253['message4']&&(this[_0x50a9d7(0x226)](_0x50a9d7(0x283)),this[_0x50a9d7(0x226)]('popBaseLine'),this[_0x50a9d7(0x226)](_0x50a9d7(0xa21)),this[_0x50a9d7(0x226)](_0x50a9d7(0x693),_0x48f8fd[_0x50a9d7(0x334)][_0x50a9d7(0x7e1)](_0x2866df['name']())),this['push'](_0x50a9d7(0x7c8)));}if(_0x1cb5ae&&_0x458387['isActor']()){if(_0x50a9d7(0x294)===_0x50a9d7(0x294))_0x10a841[_0x50a9d7(0x226)]('clearActiveWeaponSet',_0x458387);else{_0x4a350f+=_0x3058d8['x']-this[_0x50a9d7(0x783)]();const _0x51a660=_0x3461c2[_0x50a9d7(0x768)]()*0x3/0x4;_0x26f0d1=_0x21983d['y']+_0x51a660,_0x378965=_0x2e046f['min'](_0xd1ba13,_0x473710['y']+this['y']-this[_0x50a9d7(0x5ac)]+_0x51a660);}}if(_0x117fcd[_0x50a9d7(0x467)])_0x10a841[_0x50a9d7(0x226)]('applyImmortal',_0x458387,_0x44d6fb,![]);_0x10d887[_0x50a9d7(0x9c8)](_0x50a9d7(0x8cd));}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0xcc1),_0x3b59b9=>{const _0x59c61a=_0x579382;if(!SceneManager[_0x59c61a(0xc65)]())return;VisuMZ[_0x59c61a(0x6dc)](_0x3b59b9,_0x3b59b9);const _0x486e33=$gameTemp[_0x59c61a(0x6c2)](),_0x208db1=BattleManager[_0x59c61a(0x3ca)],_0x16cb81=BattleManager[_0x59c61a(0x7c7)],_0x59b779=BattleManager[_0x59c61a(0x9ab)]?BattleManager[_0x59c61a(0x9ab)][_0x59c61a(0x989)](0x0):[],_0x2fce45=BattleManager['_logWindow'];if(!_0x486e33||!_0x208db1||!_0x16cb81)return;if(!_0x208db1['item']())return;if(_0x3b59b9[_0x59c61a(0x467)])_0x2fce45[_0x59c61a(0x226)](_0x59c61a(0x227),_0x16cb81,_0x59b779,![]);if(_0x3b59b9['WaitForNewLine'])_0x2fce45[_0x59c61a(0x226)](_0x59c61a(0x262));if(_0x3b59b9[_0x59c61a(0x473)])_0x2fce45['push'](_0x59c61a(0x7fc));if(_0x3b59b9[_0x59c61a(0x674)])_0x2fce45['push'](_0x59c61a(0x3f1));if(_0x3b59b9[_0x59c61a(0x79f)])_0x2fce45[_0x59c61a(0x226)]('performActionEnd',_0x16cb81);if(_0x3b59b9[_0x59c61a(0x7b3)])_0x2fce45[_0x59c61a(0x226)]('waitForMovement');_0x486e33[_0x59c61a(0x9c8)](_0x59c61a(0x8cd));}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],'ActSeq_ChangeAngle',_0x1f08b1=>{const _0x1299fc=_0x579382;if(!SceneManager[_0x1299fc(0xc65)]())return;if(!Imported[_0x1299fc(0xb4d)])return;VisuMZ[_0x1299fc(0x6dc)](_0x1f08b1,_0x1f08b1);const _0x249e8b=$gameTemp[_0x1299fc(0x6c2)](),_0x1d29ce=_0x1f08b1[_0x1299fc(0xb87)];if(!_0x249e8b)return;$gameScreen[_0x1299fc(0x777)](_0x1f08b1['Angle'],_0x1f08b1[_0x1299fc(0xafa)],_0x1f08b1[_0x1299fc(0x3a5)]);if(_0x1d29ce)_0x249e8b[_0x1299fc(0x9c8)](_0x1299fc(0x307));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xb97),_0x2fb408=>{const _0x440291=_0x579382;if(!SceneManager[_0x440291(0xc65)]())return;if(!Imported[_0x440291(0xb4d)])return;VisuMZ['ConvertParams'](_0x2fb408,_0x2fb408);const _0x38450b=$gameTemp[_0x440291(0x6c2)](),_0x3822e9=_0x2fb408['WaitForAngle'];if(!_0x38450b)return;$gameScreen[_0x440291(0x777)](0x0,_0x2fb408[_0x440291(0xafa)],_0x2fb408[_0x440291(0x3a5)]);if(_0x3822e9)_0x38450b[_0x440291(0x9c8)](_0x440291(0x307));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Angle_WaitForAngle',_0x2e4d11=>{const _0x5dbae3=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x7f3098=$gameTemp[_0x5dbae3(0x6c2)]();if(!_0x7f3098)return;_0x7f3098['setWaitMode']('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x529),_0x7989ba=>{const _0x2a4670=_0x579382;if(!SceneManager[_0x2a4670(0xc65)]())return;VisuMZ[_0x2a4670(0x6dc)](_0x7989ba,_0x7989ba);const _0x21955a=$gameTemp[_0x2a4670(0x6c2)](),_0x2f0e61=BattleManager['_action'],_0x201b09=BattleManager[_0x2a4670(0x7c7)],_0x1308ef=VisuMZ[_0x2a4670(0x7c1)](_0x7989ba[_0x2a4670(0xbcd)]),_0xfa1eca=_0x7989ba['Mirror'],_0x3c1500=BattleManager['_logWindow'];if(!_0x21955a||!_0x2f0e61||!_0x201b09)return;if(!_0x2f0e61[_0x2a4670(0x270)]())return;let _0x59b2a4=_0x2f0e61[_0x2a4670(0x270)]()['animationId'];if(_0x59b2a4<0x0)_0x59b2a4=_0x201b09[_0x2a4670(0xb01)]();$gameTemp[_0x2a4670(0x64f)](_0x1308ef,_0x59b2a4,_0xfa1eca),_0x7989ba[_0x2a4670(0x8d2)]&&_0x21955a['setWaitMode'](_0x2a4670(0x4b1));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x8d6),_0x44090b=>{const _0x367fef=_0x579382;if(!SceneManager[_0x367fef(0xc65)]())return;VisuMZ['ConvertParams'](_0x44090b,_0x44090b);const _0x5d3a78=$gameTemp[_0x367fef(0x6c2)](),_0x5dfdb6=BattleManager[_0x367fef(0x7c7)],_0x352f70=VisuMZ[_0x367fef(0x7c1)](_0x44090b['Targets']),_0x4ee1f7=_0x44090b[_0x367fef(0x25f)],_0x1ce7d8=BattleManager['_logWindow'];if(!_0x5d3a78||!_0x5dfdb6)return;const _0x1a8729=_0x5dfdb6[_0x367fef(0xb01)]();$gameTemp['requestAnimation'](_0x352f70,_0x1a8729,_0x4ee1f7),_0x44090b[_0x367fef(0x8d2)]&&('WnMJh'===_0x367fef(0x338)?_0x5d3a78[_0x367fef(0x9c8)](_0x367fef(0x4b1)):_0x1d6590=![]);}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x26b),_0x272554=>{const _0x8f3e0b=_0x579382;if(!SceneManager[_0x8f3e0b(0xc65)]())return;VisuMZ['ConvertParams'](_0x272554,_0x272554);const _0x425c17=_0x13569a['attackAnimationIdSlot'](_0x272554['Slot']);if(_0x425c17<=0x0)return;const _0x300837=$gameTemp[_0x8f3e0b(0x6c2)](),_0x13569a=BattleManager['_subject'],_0x39bab9=VisuMZ[_0x8f3e0b(0x7c1)](_0x272554['Targets']),_0x5d1104=_0x272554['Mirror'],_0x63a91c=BattleManager[_0x8f3e0b(0x2f7)];if(!_0x300837||!_0x13569a)return;$gameTemp['requestAnimation'](_0x39bab9,_0x425c17,_0x5d1104),_0x272554[_0x8f3e0b(0x8d2)]&&_0x300837[_0x8f3e0b(0x9c8)](_0x8f3e0b(0x4b1));}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0xb63),_0x3fca03=>{const _0x1ae3db=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1ae3db(0x6dc)](_0x3fca03,_0x3fca03);const _0xa64934=$gameTemp[_0x1ae3db(0x6c2)](),_0x3c3ba1=BattleManager['_action'],_0x5d1d7f=_0x3fca03[_0x1ae3db(0x25f)],_0x1f1f3c=VisuMZ[_0x1ae3db(0x7c1)](_0x3fca03[_0x1ae3db(0xbcd)]);if(!_0xa64934||!_0x3c3ba1)return;if(!_0x3c3ba1['item']())return;for(const _0x3325ad of _0x1f1f3c){if(!_0x3325ad)continue;_0x3325ad[_0x1ae3db(0x651)](_0x3c3ba1,_0x5d1d7f);}if(_0x3fca03[_0x1ae3db(0x8d2)])_0xa64934[_0x1ae3db(0x9c8)](_0x1ae3db(0x4b1));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x306),_0xf9ebd4=>{const _0x482146=_0x579382;VisuMZ[_0x482146(0x6dc)](_0xf9ebd4,_0xf9ebd4);const _0x3e89fb=$gameTemp[_0x482146(0x6c2)](),_0x4611bb=VisuMZ[_0x482146(0x7c1)](_0xf9ebd4[_0x482146(0xbcd)]),_0x25e147=_0xf9ebd4['Filename'];if(!_0x25e147)return;for(const _0x80c68e of _0x4611bb){if(!_0x80c68e)continue;if(!_0x80c68e[_0x482146(0xc58)]())continue;_0x80c68e[_0x482146(0x681)](_0x25e147);}}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x45d),_0x1f61a8=>{const _0x1a0e48=_0x579382;if(!SceneManager[_0x1a0e48(0xbc5)])return;if(!SceneManager['_scene'][_0x1a0e48(0x748)])return;if(!Imported[_0x1a0e48(0x214)])return;VisuMZ[_0x1a0e48(0x6dc)](_0x1f61a8,_0x1f61a8);const _0x5e8fbe=$gameTemp[_0x1a0e48(0x6c2)](),_0x5065d6=Math[_0x1a0e48(0x78b)](_0x1f61a8['pointX']),_0x180c36=Math[_0x1a0e48(0x78b)](_0x1f61a8['pointY']);$gameTemp['requestPointAnimation'](_0x5065d6,_0x180c36,_0x1f61a8[_0x1a0e48(0x49e)],_0x1f61a8['Mirror'],_0x1f61a8[_0x1a0e48(0x47f)]),_0x1f61a8[_0x1a0e48(0xa2d)]&&_0x5e8fbe&&(SceneManager[_0x1a0e48(0xbc5)][_0x1a0e48(0x748)][_0x1a0e48(0x1a6)](),_0x5e8fbe[_0x1a0e48(0x9c8)]('battleAnimation'));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Animation_ShowAnimation',_0x32de65=>{const _0x5291db=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x32de65,_0x32de65);const _0x267dc1=$gameTemp[_0x5291db(0x6c2)](),_0x5c2d6f=VisuMZ[_0x5291db(0x7c1)](_0x32de65[_0x5291db(0xbcd)]),_0x1b4c16=_0x32de65['AnimationID'],_0x105303=_0x32de65['Mirror'];if(!_0x267dc1)return;$gameTemp[_0x5291db(0x64f)](_0x5c2d6f,_0x1b4c16,_0x105303);if(_0x32de65[_0x5291db(0x8d2)])_0x267dc1[_0x5291db(0x9c8)](_0x5291db(0x4b1));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x30a),_0x204f9a=>{const _0x2d7920=_0x579382;if(!SceneManager[_0x2d7920(0xc65)]())return;const _0x25716b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x25716b)return;_0x25716b[_0x2d7920(0x9c8)](_0x2d7920(0x4b1));}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x37f),_0x44ba8c=>{const _0x54daf0=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x54daf0(0x6dc)](_0x44ba8c,_0x44ba8c);const _0x5e08c5=BattleManager[_0x54daf0(0x2f7)],_0x1febb7=_0x44ba8c['CopyCombatLog']&&Imported[_0x54daf0(0x4d3)];_0x5e08c5[_0x54daf0(0x693)](_0x44ba8c['Text']),_0x1febb7&&Imported[_0x54daf0(0x4d3)]&&$gameSystem['addTextToCombatLog'](_0x44ba8c[_0x54daf0(0x471)]||'',_0x44ba8c[_0x54daf0(0xc83)]||0x0);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x9e0),_0x557bb7=>{const _0x403e0d=_0x579382;if(!SceneManager[_0x403e0d(0xc65)]())return;const _0x21fa37=BattleManager['_logWindow'];_0x21fa37[_0x403e0d(0x3f1)]();}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_BattleLog_DisplayAction',_0x251dd4=>{const _0x32f4d4=_0x579382;if(!SceneManager[_0x32f4d4(0xc65)]())return;const _0x3fe676=$gameTemp[_0x32f4d4(0x6c2)](),_0x274aad=BattleManager[_0x32f4d4(0x3ca)],_0x1dac8a=BattleManager['_subject'],_0x26158e=BattleManager['_logWindow'];if(!_0x3fe676||!_0x274aad||!_0x1dac8a)return;if(!_0x274aad[_0x32f4d4(0x270)]())return;_0x26158e['displayAction'](_0x1dac8a,_0x274aad[_0x32f4d4(0x270)]()),_0x3fe676[_0x32f4d4(0x9c8)]('battlelog');}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x639),_0x2f910f=>{const _0x1d747f=_0x579382;if(!SceneManager['isSceneBattle']())return;const _0x275e0d=BattleManager['_logWindow'];_0x275e0d[_0x1d747f(0x7b1)]();}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x2b6),_0x473189=>{const _0x56890f=_0x579382;if(!SceneManager[_0x56890f(0xc65)]())return;const _0x3a228d=BattleManager[_0x56890f(0x2f7)];_0x3a228d[_0x56890f(0xa21)]();}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x2ee),_0x539f3f=>{const _0x4afbf7=_0x579382;if(!SceneManager['isSceneBattle']())return;const _0x372eb0=BattleManager[_0x4afbf7(0x2f7)];_0x372eb0[_0x4afbf7(0x396)]();}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xa38),_0x2294a2=>{const _0x4b0352=_0x579382;if(!SceneManager[_0x4b0352(0xc65)]())return;VisuMZ['ConvertParams'](_0x2294a2,_0x2294a2),SceneManager['_scene']['setVisibleUI'](_0x2294a2[_0x4b0352(0xbe8)]);}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x1a2),_0x5d40d0=>{const _0xf11b53=_0x579382;if(!SceneManager['isSceneBattle']())return;const _0x64b4ba=$gameTemp[_0xf11b53(0x6c2)]();_0x64b4ba['setWaitMode'](_0xf11b53(0x8cd));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x77c),_0x53091a=>{const _0x5d6560=_0x579382;if(!SceneManager['isSceneBattle']())return;const _0x1c89d8=$gameTemp['getLastPluginCommandInterpreter'](),_0x4b0fd4=BattleManager['_logWindow'];_0x4b0fd4[_0x5d6560(0x262)](),_0x1c89d8[_0x5d6560(0x9c8)](_0x5d6560(0x8cd));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x58b),_0x2b1a2d=>{const _0x41a7f2=_0x579382;if(!SceneManager[_0x41a7f2(0xc65)]())return;if(!Imported[_0x41a7f2(0xb4d)])return;VisuMZ[_0x41a7f2(0x6dc)](_0x2b1a2d,_0x2b1a2d);const _0x4736e7=$gameScreen[_0x41a7f2(0x36a)]();_0x4736e7[_0x41a7f2(0x9da)]=_0x2b1a2d[_0x41a7f2(0x828)];}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x7e2),_0x214ba3=>{const _0xdf8863=_0x579382;if(!SceneManager[_0xdf8863(0xc65)]())return;if(!Imported[_0xdf8863(0xb4d)])return;VisuMZ[_0xdf8863(0x6dc)](_0x214ba3,_0x214ba3);const _0x2f44c4=$gameTemp[_0xdf8863(0x6c2)](),_0x2e84bb=_0x214ba3[_0xdf8863(0x857)];$gameScreen[_0xdf8863(0x70e)](_0x214ba3['FocusX'],_0x214ba3['FocusY'],_0x214ba3[_0xdf8863(0xafa)],_0x214ba3[_0xdf8863(0x3a5)]);if(_0x2e84bb)_0x2f44c4[_0xdf8863(0x9c8)](_0xdf8863(0xa94));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Camera_FocusTarget',_0x4a0ad5=>{const _0x2179fa=_0x579382;if(!SceneManager[_0x2179fa(0xc65)]())return;if(!Imported[_0x2179fa(0xb4d)])return;VisuMZ['ConvertParams'](_0x4a0ad5,_0x4a0ad5);const _0x5b6b7c=$gameTemp[_0x2179fa(0x6c2)](),_0x4bf6ba=VisuMZ['CreateActionSequenceTargets'](_0x4a0ad5[_0x2179fa(0xbcd)]),_0x2269f8=_0x4a0ad5['WaitForCamera'];$gameScreen[_0x2179fa(0x621)](_0x4bf6ba,_0x4a0ad5['Duration'],_0x4a0ad5['EasingType']);if(_0x2269f8)_0x5b6b7c[_0x2179fa(0x9c8)]('battleCamera');}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x209),_0x4e071d=>{const _0x5cf575=_0x579382;if(!SceneManager[_0x5cf575(0xc65)]())return;if(!Imported[_0x5cf575(0xb4d)])return;VisuMZ[_0x5cf575(0x6dc)](_0x4e071d,_0x4e071d);const _0x55e67f=$gameTemp[_0x5cf575(0x6c2)](),_0x28844a=_0x4e071d['WaitForCamera'];$gameScreen[_0x5cf575(0x7df)](_0x4e071d[_0x5cf575(0x906)],_0x4e071d[_0x5cf575(0xb3d)],_0x4e071d[_0x5cf575(0xafa)],_0x4e071d[_0x5cf575(0x3a5)]);if(_0x28844a)_0x55e67f['setWaitMode'](_0x5cf575(0xa94));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x895),_0x4b2066=>{const _0x332c21=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x332c21(0xb4d)])return;VisuMZ[_0x332c21(0x6dc)](_0x4b2066,_0x4b2066);const _0x20697b=$gameTemp[_0x332c21(0x6c2)](),_0xa2794f=_0x4b2066[_0x332c21(0xa80)],_0x40e954=_0x4b2066['ResetOffset'],_0x54bef3=_0x4b2066['WaitForCamera'];if(_0xa2794f){if(_0x332c21(0xc6c)===_0x332c21(0xa12)){const _0x3fc469=_0x319838(_0x1f7432['$1'])['split'](/[\r\n]+/)['remove']('');_0x566823['name']=_0x44f943[_0x332c21(0x9e5)](_0x3fc469);}else{const _0x42afed=Math[_0x332c21(0x78b)](Graphics[_0x332c21(0x259)]/0x2),_0x392d59=Math[_0x332c21(0x78b)](Graphics['height']/0x2);$gameScreen[_0x332c21(0x70e)](_0x42afed,_0x392d59,_0x4b2066[_0x332c21(0xafa)],_0x4b2066[_0x332c21(0x3a5)]);}}_0x40e954&&(_0x332c21(0x4b3)==='BMeKO'?$gameScreen[_0x332c21(0x7df)](0x0,0x0,_0x4b2066[_0x332c21(0xafa)],_0x4b2066[_0x332c21(0x3a5)]):(_0x58b5fb[_0x332c21(0x651)](_0x29100b),this[_0x332c21(0x861)]()));if(_0x54bef3)_0x20697b['setWaitMode'](_0x332c21(0xa94));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xad4),_0x4769de=>{const _0x415ce3=_0x579382;if(!SceneManager[_0x415ce3(0xc65)]())return;if(!Imported[_0x415ce3(0xb4d)])return;const _0x34133f=$gameTemp[_0x415ce3(0x6c2)]();if(!_0x34133f)return;_0x34133f[_0x415ce3(0x9c8)](_0x415ce3(0xa94));}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x4a5),_0x2372ec=>{const _0x36b310=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x36b310(0xac3)])return;VisuMZ[_0x36b310(0x6dc)](_0x2372ec,_0x2372ec);const _0x419af4=VisuMZ[_0x36b310(0x7c1)](_0x2372ec[_0x36b310(0xbcd)]),_0x371160=_0x2372ec[_0x36b310(0xa4b)]['toLowerCase']()[_0x36b310(0x8f5)]();for(const _0x9494fa of _0x419af4){if(!_0x9494fa)continue;_0x9494fa[_0x36b310(0x62c)](_0x371160);}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],'ActSeq_DB_DragonbonesTimeScale',_0x1299e3=>{const _0x31d358=_0x579382;if(!SceneManager[_0x31d358(0xc65)]())return;if(!Imported[_0x31d358(0xac3)])return;VisuMZ['ConvertParams'](_0x1299e3,_0x1299e3);const _0x3a4b81=VisuMZ[_0x31d358(0x7c1)](_0x1299e3[_0x31d358(0xbcd)]),_0x15db28=_0x1299e3[_0x31d358(0x9dd)];for(const _0x2bca1a of _0x3a4b81){if(!_0x2bca1a)continue;_0x2bca1a[_0x31d358(0xc9b)]()[_0x31d358(0x3b0)]=_0x15db28;}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x4fd),_0x456694=>{const _0x3d70a1=_0x579382;if(!SceneManager[_0x3d70a1(0xc65)]())return;if(!Imported[_0x3d70a1(0x35a)])return;VisuMZ[_0x3d70a1(0x6dc)](_0x456694,_0x456694);const _0x5267a6=BattleManager[_0x3d70a1(0x3ca)],_0x55f5ac=_0x456694['Elements'];if(!_0x5267a6)return;_0x5267a6['_battleCoreAddedElements']=_0x55f5ac;}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0xb78),_0x2a0b7f=>{const _0x4dbf5f=_0x579382;if(!SceneManager[_0x4dbf5f(0xc65)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x22583b=BattleManager[_0x4dbf5f(0x3ca)];if(!_0x22583b)return;_0x22583b[_0x4dbf5f(0x580)]();}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x22e),_0x2d69da=>{const _0x17db66=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x17db66(0x35a)])return;VisuMZ[_0x17db66(0x6dc)](_0x2d69da,_0x2d69da);const _0x287471=BattleManager[_0x17db66(0x3ca)],_0x23f972=_0x2d69da[_0x17db66(0x80c)];if(!_0x287471)return;_0x287471[_0x17db66(0x6df)]=_0x23f972;}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x21d),_0x3d5259=>{const _0x107b9e=_0x579382;if(!SceneManager[_0x107b9e(0xc65)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0xa103b3=BattleManager[_0x107b9e(0x3ca)];if(!_0xa103b3)return;_0xa103b3[_0x107b9e(0xaca)]=!![];}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Horror_Clear',_0x3ba975=>{const _0x5d8f63=_0x579382;if(!Imported[_0x5d8f63(0x1d6)])return;if(!SceneManager[_0x5d8f63(0xc65)]())return;VisuMZ[_0x5d8f63(0x6dc)](_0x3ba975,_0x3ba975);const _0x48ec4c=VisuMZ[_0x5d8f63(0x7c1)](_0x3ba975[_0x5d8f63(0xbcd)]);for(const _0x4de6e1 of _0x48ec4c){if(_0x5d8f63(0xb42)===_0x5d8f63(0xb42)){if(!_0x4de6e1)continue;_0x4de6e1[_0x5d8f63(0x6c0)](_0x5d8f63(0x2c0)),_0x4de6e1['removeHorrorEffect'](_0x5d8f63(0x3df)),_0x4de6e1[_0x5d8f63(0x6c0)]('tv'),_0x4de6e1[_0x5d8f63(0x979)]();}else return _0x48a1f1['filter'](_0x23730e=>_0x23730e[_0x5d8f63(0x884)]()&&_0x23730e!==_0x1ae6c3);}$gamePlayer[_0x5d8f63(0x396)]();}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x556),_0x1a02e1=>{const _0x5e55f3=_0x579382;if(!Imported[_0x5e55f3(0x1d6)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5e55f3(0x6dc)](_0x1a02e1,_0x1a02e1);const _0x1a3bed=VisuMZ[_0x5e55f3(0x7c1)](_0x1a02e1[_0x5e55f3(0xbcd)]),_0x2bf21e='glitch';_0x1a02e1[_0x5e55f3(0x822)]=Math[_0x5e55f3(0xc7c)](_0x1a02e1[_0x5e55f3(0xa7c)]/0x2),_0x1a02e1[_0x5e55f3(0x26e)]=_0x1a02e1[_0x5e55f3(0xa7c)],_0x1a02e1[_0x5e55f3(0x6e1)]=!![];for(const _0x35a71a of _0x1a3bed){if(!_0x35a71a)continue;_0x35a71a[_0x5e55f3(0x982)](_0x2bf21e,_0x1a02e1);}$gamePlayer[_0x5e55f3(0x396)]();}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xc66),_0x1fe924=>{const _0x599ee8=_0x579382;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x599ee8(0xc65)]())return;VisuMZ[_0x599ee8(0x6dc)](_0x1fe924,_0x1fe924);const _0x5308de=VisuMZ['CreateActionSequenceTargets'](_0x1fe924[_0x599ee8(0xbcd)]);for(const _0x52f073 of _0x5308de){if(!_0x52f073)continue;_0x52f073[_0x599ee8(0x6c0)](_0x599ee8(0x3df));}$gamePlayer[_0x599ee8(0x396)]();}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x3a2),_0x53558d=>{const _0x4d5600=_0x579382;if(!Imported[_0x4d5600(0x1d6)])return;if(!SceneManager[_0x4d5600(0xc65)]())return;VisuMZ[_0x4d5600(0x6dc)](_0x53558d,_0x53558d);const _0x5512ef=VisuMZ['CreateActionSequenceTargets'](_0x53558d[_0x4d5600(0xbcd)]),_0x3b51ed=_0x4d5600(0x2c0);for(const _0x1c971c of _0x5512ef){if(!_0x1c971c)continue;_0x1c971c[_0x4d5600(0x982)](_0x3b51ed,_0x53558d);}$gamePlayer[_0x4d5600(0x396)]();}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xa6b),_0x47b563=>{const _0x4db8cf=_0x579382;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x4db8cf(0xc65)]())return;VisuMZ[_0x4db8cf(0x6dc)](_0x47b563,_0x47b563);const _0x4585bf=VisuMZ[_0x4db8cf(0x7c1)](_0x47b563[_0x4db8cf(0xbcd)]);for(const _0x57e7ae of _0x4585bf){if(!_0x57e7ae)continue;_0x57e7ae[_0x4db8cf(0x6c0)]('noise');}$gamePlayer[_0x4db8cf(0x396)]();}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x1c5),_0x55fbac=>{const _0x10c897=_0x579382;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x10c897(0x6dc)](_0x55fbac,_0x55fbac);const _0x5783a4=VisuMZ['CreateActionSequenceTargets'](_0x55fbac[_0x10c897(0xbcd)]),_0x4fa358='tv';for(const _0x3a3afb of _0x5783a4){if('yRmTt'!==_0x10c897(0x775)){if(!_0x3a3afb)continue;_0x3a3afb[_0x10c897(0x982)](_0x4fa358,_0x55fbac);}else this['_angleRevertOnFinish']=!![];}$gamePlayer[_0x10c897(0x396)]();}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x49f),_0x520098=>{const _0x489eba=_0x579382;if(!Imported[_0x489eba(0x1d6)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x489eba(0x6dc)](_0x520098,_0x520098);const _0x1b80ea=VisuMZ[_0x489eba(0x7c1)](_0x520098[_0x489eba(0xbcd)]);for(const _0x91302b of _0x1b80ea){if(_0x489eba(0x816)===_0x489eba(0x5f3))_0x440d8b[_0x489eba(0xb6f)](_0x3f9a44[0x2],_0x48a7b7[0x3]),_0x51143f[_0x489eba(0xb6f)](_0x4cc6c3);else{if(!_0x91302b)continue;_0x91302b[_0x489eba(0x6c0)]('tv');}}$gamePlayer[_0x489eba(0x396)]();}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x9bf),_0x2a7a0f=>{const _0x458949=_0x579382;if(!Imported[_0x458949(0xa3d)])return;const _0x49a59a=SceneManager[_0x458949(0xbc5)][_0x458949(0x748)];if(!_0x49a59a)return;if(VisuMZ['ActSeqImpact'][_0x458949(0x240)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x458949(0x25d)]();return;}VisuMZ[_0x458949(0x6dc)](_0x2a7a0f,_0x2a7a0f);const _0x3f9d6b=_0x2a7a0f[_0x458949(0x848)];_0x49a59a['setupBlueRedInvertImpactFilter'](_0x3f9d6b);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x87f),_0x56db60=>{const _0x448938=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x448938(0xa3d)])return;const _0x27b861=SceneManager['_scene'][_0x448938(0x748)];if(!_0x27b861)return;VisuMZ[_0x448938(0x6dc)](_0x56db60,_0x56db60);const _0x5b2823=_0x56db60[_0x448938(0x8d1)]||0x1,_0x1e27c0=_0x56db60[_0x448938(0xafa)]||0x1,_0x4a211f=_0x56db60['EasingType']||_0x448938(0xc05);_0x27b861['setupRgbSplitImpactFilter'](_0x5b2823,_0x1e27c0,_0x4a211f);}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x897),_0x2a5fff=>{const _0x200b86=_0x579382;if(!Imported[_0x200b86(0xa3d)])return;const _0x572055=SceneManager[_0x200b86(0xbc5)][_0x200b86(0x748)];if(!_0x572055)return;if(VisuMZ[_0x200b86(0x5eb)]['version']<=1.04){alert(_0x200b86(0x830)),SceneManager[_0x200b86(0x25d)]();return;}VisuMZ[_0x200b86(0x6dc)](_0x2a5fff,_0x2a5fff);const _0x146a28=_0x2a5fff[_0x200b86(0x848)];_0x572055[_0x200b86(0xb83)](_0x146a28);}),PluginManager['registerCommand'](pluginData['name'],_0x579382(0x9c4),_0x514a4b=>{const _0x599ece=_0x579382;if(!SceneManager[_0x599ece(0xc65)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x48cbae=SceneManager['_scene'][_0x599ece(0x748)];if(!_0x48cbae)return;VisuMZ[_0x599ece(0x6dc)](_0x514a4b,_0x514a4b);const _0xed0c82=Number(_0x514a4b[_0x599ece(0xc0e)])||0x0,_0xed48cd=Number(_0x514a4b[_0x599ece(0x923)]),_0x13f2f0=_0x514a4b['Duration']||0x1,_0x49f9d3=_0x514a4b['EasingType']||_0x599ece(0xc05);_0x48cbae['setupMotionBlurImpactFilter'](_0xed0c82,_0xed48cd,_0x13f2f0,_0x49f9d3);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Impact_MotionBlurTarget',_0x1e3bb0=>{const _0x2091a4=_0x579382;if(!SceneManager[_0x2091a4(0xc65)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4d9fce=SceneManager[_0x2091a4(0xbc5)][_0x2091a4(0x748)];if(!_0x4d9fce)return;VisuMZ[_0x2091a4(0x6dc)](_0x1e3bb0,_0x1e3bb0);const _0x11ce02=Number(_0x1e3bb0[_0x2091a4(0xc0e)])||0x0,_0x1ccd31=Number(_0x1e3bb0['Rate']),_0x462a0b=_0x1e3bb0[_0x2091a4(0xafa)]||0x1,_0x3f7ac8=_0x1e3bb0['EasingType']||_0x2091a4(0xc05),_0x3d2629=VisuMZ[_0x2091a4(0x7c1)](_0x1e3bb0[_0x2091a4(0xbcd)]);for(const _0x3ec950 of _0x3d2629){if(!_0x3ec950)continue;if(!_0x3ec950[_0x2091a4(0x368)]())continue;_0x3ec950[_0x2091a4(0x368)]()[_0x2091a4(0xb13)](_0x11ce02,_0x1ccd31,_0x462a0b,_0x3f7ac8);}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Impact_MotionTrailCreate',_0x16e9ad=>{const _0x56e96d=_0x579382;if(!SceneManager[_0x56e96d(0xc65)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x56e96d(0x6dc)](_0x16e9ad,_0x16e9ad);const _0x327c5a={'delay':_0x16e9ad[_0x56e96d(0x5b7)],'duration':_0x16e9ad['duration'],'hue':_0x16e9ad[_0x56e96d(0xb47)],'opacityStart':_0x16e9ad[_0x56e96d(0x985)],'tone':_0x16e9ad[_0x56e96d(0x671)],'visible':!![]},_0x5edc78=VisuMZ[_0x56e96d(0x7c1)](_0x16e9ad[_0x56e96d(0xbcd)]);for(const _0x4b0b1f of _0x5edc78){if(!_0x4b0b1f)continue;_0x4b0b1f['setBattlerMotionTrailData'](_0x327c5a);}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],'ActSeq_Impact_MotionTrailRemove',_0x134f6c=>{const _0x2e10b2=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2e10b2(0xa3d)])return;VisuMZ[_0x2e10b2(0x6dc)](_0x134f6c,_0x134f6c);const _0x445329=VisuMZ[_0x2e10b2(0x7c1)](_0x134f6c[_0x2e10b2(0xbcd)]);for(const _0x5cb880 of _0x445329){if(!_0x5cb880)continue;_0x5cb880[_0x2e10b2(0x5d6)]();}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x542),_0x18859a=>{const _0xf24c5a=_0x579382;if(!Imported[_0xf24c5a(0xa3d)])return;const _0x2e63d6=SceneManager[_0xf24c5a(0xbc5)][_0xf24c5a(0x748)];if(!_0x2e63d6)return;if(VisuMZ['ActSeqImpact'][_0xf24c5a(0x240)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0xf24c5a(0x6dc)](_0x18859a,_0x18859a);const _0x13cddd=_0x18859a[_0xf24c5a(0x848)];_0x2e63d6[_0xf24c5a(0xad3)](_0x13cddd);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Impact_Oversaturate',_0x46dd9f=>{const _0x4ed6f9=_0x579382;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1308e3=SceneManager[_0x4ed6f9(0xbc5)][_0x4ed6f9(0x748)];if(!_0x1308e3)return;if(VisuMZ['ActSeqImpact'][_0x4ed6f9(0x240)]<=1.04){alert(_0x4ed6f9(0x830)),SceneManager[_0x4ed6f9(0x25d)]();return;}VisuMZ[_0x4ed6f9(0x6dc)](_0x46dd9f,_0x46dd9f);const _0x40547f=_0x46dd9f[_0x4ed6f9(0x848)];_0x1308e3[_0x4ed6f9(0x803)](_0x40547f);}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x74f),_0x40f865=>{const _0x34052b=_0x579382;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4de4f3=SceneManager[_0x34052b(0xbc5)][_0x34052b(0x748)];if(!_0x4de4f3)return;VisuMZ[_0x34052b(0x6dc)](_0x40f865,_0x40f865);const _0x46e552=_0x40f865['X']||0x0,_0x3adec1=_0x40f865['Y']||0x0,_0x105a69=_0x40f865[_0x34052b(0xcbb)]||0x0,_0x3a2293=_0x40f865[_0x34052b(0x537)]||0x0,_0x3bb613=_0x40f865[_0x34052b(0xafa)]||0x1;_0x4de4f3['setupShockwaveImpactFilter'](_0x46e552,_0x3adec1,_0x105a69,_0x3a2293,_0x3bb613);}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0xb20),_0x257a6e=>{const _0x5629e9=_0x579382;if(!SceneManager[_0x5629e9(0xc65)]())return;if(!Imported[_0x5629e9(0xa3d)])return;const _0x5a91ed=SceneManager['_scene']['_spriteset'];if(!_0x5a91ed)return;VisuMZ[_0x5629e9(0x6dc)](_0x257a6e,_0x257a6e);const _0x2bd3a4=VisuMZ[_0x5629e9(0x7c1)](_0x257a6e[_0x5629e9(0xbcd)]),_0x37c903=_0x257a6e['TargetLocation'],_0x27a117=_0x257a6e[_0x5629e9(0x906)]||0x0,_0x4a79c5=_0x257a6e[_0x5629e9(0xb3d)]||0x0,_0xc4a35d=_0x257a6e[_0x5629e9(0xcbb)]||0x0,_0xc69d19=_0x257a6e[_0x5629e9(0x537)]||0x0,_0x4f8ea8=_0x257a6e[_0x5629e9(0xafa)]||0x1;for(const _0x522ca4 of _0x2bd3a4){if(!_0x522ca4)continue;if(!_0x522ca4[_0x5629e9(0x368)]())continue;const _0x5c29b8=_0x522ca4[_0x5629e9(0x368)]();let _0xc348e2=_0x5c29b8[_0x5629e9(0xb43)],_0x13b99e=_0x5c29b8[_0x5629e9(0x339)];_0xc348e2+=(Graphics[_0x5629e9(0x259)]-Graphics[_0x5629e9(0x77e)])/0x2,_0x13b99e+=(Graphics['height']-Graphics[_0x5629e9(0x98e)])/0x2;if(_0x37c903[_0x5629e9(0x299)](/front/i))_0xc348e2+=(_0x522ca4[_0x5629e9(0xa31)]()?0x1:-0x1)*_0x5c29b8[_0x5629e9(0xbb8)]()/0x2;else _0x37c903['match'](/back/i)&&(_0x5629e9(0x669)!==_0x5629e9(0x4db)?_0xc348e2+=(_0x522ca4[_0x5629e9(0xa31)]()?-0x1:0x1)*_0x5c29b8[_0x5629e9(0xbb8)]()/0x2:this[_0x5629e9(0x37d)](_0x3635a3,_0x4e887,_0x1df285));if(_0x37c903[_0x5629e9(0x299)](/head/i))_0x13b99e-=_0x5c29b8[_0x5629e9(0x1d0)]();else{if(_0x37c903[_0x5629e9(0x299)](/center/i)){if(_0x5629e9(0x8ad)!==_0x5629e9(0x31b))_0x13b99e-=_0x5c29b8[_0x5629e9(0x1d0)]()/0x2;else{const _0x195aa6=this[_0x5629e9(0x4f2)];_0x195aa6[_0x5629e9(0x37a)](_0x5629e9(0x951),this['actorCommandEscape']['bind'](this)),_0x195aa6[_0x5629e9(0x37a)](_0x5629e9(0x67a),this[_0x5629e9(0x635)][_0x5629e9(0x9df)](this)),_0x195aa6['setHandler'](_0x5629e9(0xa45),this[_0x5629e9(0x2fc)][_0x5629e9(0x9df)](this)),_0x5202c0[_0x5629e9(0x630)]()&&(this['isPartyCommandWindowDisabled']()?delete _0x195aa6[_0x5629e9(0x2ab)]['cancel']:_0x195aa6[_0x5629e9(0x37a)]('cancel',this[_0x5629e9(0x67f)][_0x5629e9(0x9df)](this)));}}}_0xc348e2+=_0x27a117,_0x13b99e+=_0x4a79c5,_0x5a91ed[_0x5629e9(0x5e5)](_0xc348e2,_0x13b99e,_0xc4a35d,_0xc69d19,_0x4f8ea8);}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0xbf8),_0x39f98d=>{const _0xb2fdfb=_0x579382;if(!SceneManager[_0xb2fdfb(0xc65)]())return;if(!Imported[_0xb2fdfb(0xa3d)])return;const _0x2dfc7b=SceneManager['_scene']['_spriteset'];if(!_0x2dfc7b)return;VisuMZ[_0xb2fdfb(0x6dc)](_0x39f98d,_0x39f98d);const _0x45f0da=VisuMZ[_0xb2fdfb(0x7c1)](_0x39f98d[_0xb2fdfb(0xbcd)]),_0x5973b8=_0x39f98d['TargetLocation'],_0xbbb78d=_0x39f98d[_0xb2fdfb(0x906)]||0x0,_0x22d057=_0x39f98d['OffsetY']||0x0,_0x11bef2=_0x39f98d['Amp']||0x0,_0x1df313=_0x39f98d[_0xb2fdfb(0x537)]||0x0,_0xdb092e=_0x39f98d[_0xb2fdfb(0xafa)]||0x1,_0x376b19=Math[_0xb2fdfb(0xabb)](..._0x45f0da['map'](_0x16d275=>_0x16d275['battler']()[_0xb2fdfb(0xb43)]-_0x16d275[_0xb2fdfb(0x368)]()[_0xb2fdfb(0xbb8)]()/0x2)),_0x10046b=Math[_0xb2fdfb(0x1f1)](..._0x45f0da['map'](_0x16f1d3=>_0x16f1d3[_0xb2fdfb(0x368)]()['_baseX']+_0x16f1d3[_0xb2fdfb(0x368)]()[_0xb2fdfb(0xbb8)]()/0x2)),_0x88860c=Math[_0xb2fdfb(0xabb)](..._0x45f0da[_0xb2fdfb(0xb6e)](_0x55585d=>_0x55585d[_0xb2fdfb(0x368)]()[_0xb2fdfb(0x339)]-_0x55585d['battler']()[_0xb2fdfb(0x1d0)]())),_0x28cdb5=Math[_0xb2fdfb(0x1f1)](..._0x45f0da['map'](_0xfef896=>_0xfef896[_0xb2fdfb(0x368)]()[_0xb2fdfb(0x339)])),_0x4e85f6=_0x45f0da[_0xb2fdfb(0xa1c)](_0x1f4c5f=>_0x1f4c5f[_0xb2fdfb(0xc58)]())[_0xb2fdfb(0x237)],_0xe22e43=_0x45f0da[_0xb2fdfb(0xa1c)](_0x2dabf1=>_0x2dabf1[_0xb2fdfb(0xa31)]())[_0xb2fdfb(0x237)];let _0x41fb01=0x0,_0x753012=0x0;if(_0x5973b8[_0xb2fdfb(0x299)](/front/i))_0x41fb01=_0x4e85f6>=_0xe22e43?_0x376b19:_0x10046b;else{if(_0x5973b8[_0xb2fdfb(0x299)](/middle/i))_0xb2fdfb(0x821)===_0xb2fdfb(0x6d3)?(this['_actorCommandWindow'][_0xb2fdfb(0x4ff)](this[_0xb2fdfb(0x957)]),this['_partyCommandWindow'][_0xb2fdfb(0x4ff)](this[_0xb2fdfb(0x957)])):(_0x41fb01=(_0x376b19+_0x10046b)/0x2,melee=-0x1);else _0x5973b8[_0xb2fdfb(0x299)](/back/i)&&(_0x41fb01=_0x4e85f6>=_0xe22e43?_0x10046b:_0x376b19);}if(_0x5973b8[_0xb2fdfb(0x299)](/head/i))_0x753012=_0x88860c;else{if(_0x5973b8['match'](/center/i))_0xb2fdfb(0x927)===_0xb2fdfb(0xc1e)?this[_0xb2fdfb(0xa3b)][_0xb2fdfb(0x569)]():_0x753012=(_0x88860c+_0x28cdb5)/0x2;else _0x5973b8[_0xb2fdfb(0x299)](/base/i)&&(_0x753012=_0x28cdb5);}_0x41fb01+=(Graphics[_0xb2fdfb(0x259)]-Graphics[_0xb2fdfb(0x77e)])/0x2,_0x753012+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0x41fb01+=_0xbbb78d,_0x753012+=_0x22d057,_0x2dfc7b['setupShockwaveImpactFilter'](_0x41fb01,_0x753012,_0x11bef2,_0x1df313,_0xdb092e);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xc3c),_0x298764=>{const _0x125ff4=_0x579382;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x13d6e6=SceneManager['_scene'][_0x125ff4(0x748)];if(!_0x13d6e6)return;if(VisuMZ[_0x125ff4(0x5eb)]['version']<=1.04){if(_0x125ff4(0x8d7)===_0x125ff4(0x19e))this[_0x125ff4(0xa4a)]();else{alert(_0x125ff4(0x830)),SceneManager[_0x125ff4(0x25d)]();return;}}VisuMZ[_0x125ff4(0x6dc)](_0x298764,_0x298764);const _0x271177=$gameTemp[_0x125ff4(0x6c2)](),_0x47ff5b=Math[_0x125ff4(0x1f1)](0.01,_0x298764[_0x125ff4(0x544)]);$gameTemp[_0x125ff4(0xbd1)](_0x47ff5b,_0x271177);}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x917),_0x14e86b=>{const _0x501402=_0x579382;if(!Imported[_0x501402(0xa3d)])return;const _0x3ab978=SceneManager['_scene'][_0x501402(0x748)];if(!_0x3ab978)return;if(VisuMZ[_0x501402(0x5eb)][_0x501402(0x240)]<=1.04){alert(_0x501402(0x830)),SceneManager[_0x501402(0x25d)]();return;}VisuMZ['ConvertParams'](_0x14e86b,_0x14e86b);const _0x3bab9e=$gameTemp[_0x501402(0x6c2)](),_0x273e4e=_0x14e86b['ms']||0x1;VisuMZ['ActSeqImpact']['freezeTime'](_0x273e4e,_0x3bab9e);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Impact_ZoomBlurPoint',_0x7dccd2=>{const _0x240510=_0x579382;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1ed5ea=SceneManager[_0x240510(0xbc5)][_0x240510(0x748)];if(!_0x1ed5ea)return;VisuMZ[_0x240510(0x6dc)](_0x7dccd2,_0x7dccd2);const _0x5d09c7=_0x7dccd2['X']||0x0,_0x2f2701=_0x7dccd2['Y']||0x0,_0x4244e6=_0x7dccd2[_0x240510(0x4bc)]||0x0,_0x5acb2d=_0x7dccd2['Radius']||0x0,_0x131853=_0x7dccd2[_0x240510(0xafa)]||0x1,_0x32bf1f=_0x7dccd2[_0x240510(0x3a5)]||_0x240510(0xc05);_0x1ed5ea[_0x240510(0x52f)](_0x4244e6,_0x5d09c7,_0x2f2701,_0x5acb2d,_0x131853,_0x32bf1f);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xc41),_0x37b20f=>{const _0x376847=_0x579382;if(!Imported[_0x376847(0xa3d)])return;const _0x27d505=SceneManager['_scene'][_0x376847(0x748)];if(!_0x27d505)return;VisuMZ[_0x376847(0x6dc)](_0x37b20f,_0x37b20f);const _0x3fd7fb=VisuMZ['CreateActionSequenceTargets'](_0x37b20f['Targets']),_0x54c345=_0x37b20f[_0x376847(0x83a)],_0x4ec357=_0x37b20f['OffsetX']||0x0,_0x29c0ed=_0x37b20f[_0x376847(0xb3d)]||0x0,_0x314d7f=_0x37b20f[_0x376847(0x4bc)]||0x0,_0x562749=_0x37b20f['Radius']||0x0,_0x3e0d07=_0x37b20f['Duration']||0x1,_0x45046c=_0x37b20f[_0x376847(0x3a5)]||_0x376847(0xc05),_0xc04d32=Math['min'](..._0x3fd7fb[_0x376847(0xb6e)](_0x4d0246=>_0x4d0246['battler']()['_baseX']-_0x4d0246[_0x376847(0x368)]()['mainSpriteWidth']()/0x2)),_0x2d4174=Math[_0x376847(0x1f1)](..._0x3fd7fb[_0x376847(0xb6e)](_0x18e22b=>_0x18e22b[_0x376847(0x368)]()[_0x376847(0xb43)]+_0x18e22b['battler']()[_0x376847(0xbb8)]()/0x2)),_0x4f1368=Math['min'](..._0x3fd7fb[_0x376847(0xb6e)](_0x1c15f5=>_0x1c15f5[_0x376847(0x368)]()[_0x376847(0x339)]-_0x1c15f5[_0x376847(0x368)]()[_0x376847(0x1d0)]())),_0x196740=Math[_0x376847(0x1f1)](..._0x3fd7fb[_0x376847(0xb6e)](_0x58d0b5=>_0x58d0b5['battler']()[_0x376847(0x339)])),_0x5d23b9=_0x3fd7fb[_0x376847(0xa1c)](_0x2de35d=>_0x2de35d['isActor']())[_0x376847(0x237)],_0x1e9344=_0x3fd7fb[_0x376847(0xa1c)](_0x32d16b=>_0x32d16b['isEnemy']())[_0x376847(0x237)];let _0x2fc370=0x0,_0x31821d=0x0;if(_0x54c345[_0x376847(0x299)](/front/i)){if(_0x376847(0xae6)===_0x376847(0x199)){let _0x4129de=_0x1778f8['BattleCore'][_0x376847(0x75c)][_0x376847(0xb95)](this),_0x1ae737=_0x146f44[_0x376847(0x675)][_0x376847(0x27f)][_0x376847(0x547)][_0x376847(0x717)]||0x0;return _0x16240a[_0x376847(0x78b)](_0x4129de+_0x1ae737);}else _0x2fc370=_0x5d23b9>=_0x1e9344?_0xc04d32:_0x2d4174;}else{if(_0x54c345[_0x376847(0x299)](/middle/i))_0x2fc370=(_0xc04d32+_0x2d4174)/0x2,melee=-0x1;else{if(_0x54c345[_0x376847(0x299)](/back/i)){if(_0x376847(0x8f9)!==_0x376847(0x62a))_0x2fc370=_0x5d23b9>=_0x1e9344?_0x2d4174:_0xc04d32;else{if(!_0x37b3a5[_0x376847(0xc65)]())return;const _0x56d398=_0x4bfc80['_scene'][_0x376847(0xbcc)];if(_0x56d398)_0x56d398[_0x376847(0xb28)]();}}}}if(_0x54c345[_0x376847(0x299)](/head/i)){if(_0x376847(0xc77)===_0x376847(0xa0c)){if(!_0x1e0e74[_0x376847(0xc10)]())return;const _0x1f046a=this[_0x376847(0x368)]();if(!_0x1f046a)return;if(_0x233a48)this[_0x376847(0xa76)](_0x2c4eb0+_0x1f046a[_0x376847(0xb43)],_0xef0357+_0x1f046a[_0x376847(0x339)],![]);_0x1b346a+=_0x1f046a[_0x376847(0xb43)]-_0x1f046a[_0x376847(0x605)],_0x40a579+=_0x1f046a[_0x376847(0x339)]-_0x1f046a[_0x376847(0x486)],_0x1f046a['startMove'](_0x3a1845,_0x586fd0,_0x5bc2f7);if(_0xbd461d[_0x376847(0x214)])_0x1f046a['setMoveEasingType'](_0x135121||'Linear');}else _0x31821d=_0x4f1368;}else{if(_0x54c345[_0x376847(0x299)](/center/i))_0x376847(0x40a)===_0x376847(0x781)?this['startMotion'](_0x376847(0x874)):_0x31821d=(_0x4f1368+_0x196740)/0x2;else _0x54c345[_0x376847(0x299)](/base/i)&&(_0x31821d=_0x196740);}_0x2fc370+=(Graphics[_0x376847(0x259)]-Graphics['boxWidth'])/0x2,_0x31821d+=(Graphics[_0x376847(0x5ac)]-Graphics[_0x376847(0x98e)])/0x2,_0x2fc370+=_0x4ec357,_0x31821d+=_0x29c0ed,_0x27d505['setupZoomBlurImpactFilter'](_0x314d7f,_0x2fc370,_0x31821d,_0x562749,_0x3e0d07,_0x45046c);}),PluginManager['registerCommand'](pluginData['name'],_0x579382(0x1ab),_0x2cb642=>{const _0x762839=_0x579382;if(!Imported[_0x762839(0xa3d)])return;const _0x4f80c6=SceneManager[_0x762839(0xbc5)][_0x762839(0x748)];if(!_0x4f80c6)return;if(VisuMZ[_0x762839(0x5eb)][_0x762839(0x240)]<=1.05){if(_0x762839(0x8f2)===_0x762839(0x757))return this[_0x762839(0x5ac)]*this['mainSpriteScaleY']();else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x762839(0x25d)]();return;}}VisuMZ['ConvertParams'](_0x2cb642,_0x2cb642);const _0x86d996=VisuMZ[_0x762839(0x7c1)](_0x2cb642[_0x762839(0xbcd)]),_0x990a7e={'filename':_0x2cb642[_0x762839(0x215)],'horzCells':_0x2cb642[_0x762839(0x44a)]||0x1,'vertCells':_0x2cb642[_0x762839(0x890)]||0x1,'frameDelay':_0x2cb642[_0x762839(0x9a4)]||0x1,'smooth':_0x2cb642[_0x762839(0x2be)]||![],'anchorX':_0x2cb642[_0x762839(0x394)]||0x0,'anchorY':_0x2cb642[_0x762839(0x4c1)]||0x0,'offsetX':_0x2cb642[_0x762839(0x8a2)]||0x0,'offsetY':_0x2cb642[_0x762839(0x3a0)]||0x0};for(const _0x4c9687 of _0x86d996){if(!_0x4c9687)continue;if(!_0x4c9687[_0x762839(0x368)]())continue;_0x4c9687[_0x762839(0x368)]()[_0x762839(0x1b9)](_0x990a7e);}const _0x107f2f=$gameTemp[_0x762839(0x6c2)]();_0x107f2f&&_0x107f2f['setWaitMode']('battleInjectPrep');}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x468),_0x1931d0=>{const _0xf4f8ae=_0x579382;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xd50dcf=SceneManager['_scene'][_0xf4f8ae(0x748)];if(!_0xd50dcf)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){alert(_0xf4f8ae(0x830)),SceneManager['exit']();return;}VisuMZ[_0xf4f8ae(0x6dc)](_0x1931d0,_0x1931d0);const _0x396f21=VisuMZ[_0xf4f8ae(0x7c1)](_0x1931d0[_0xf4f8ae(0xbcd)]);for(const _0x49a908 of _0x396f21){if(!_0x49a908)continue;if(!_0x49a908['battler']())continue;_0x49a908[_0xf4f8ae(0x368)]()['stopInjectAnimation']();}}),PluginManager['registerCommand'](pluginData['name'],_0x579382(0x78e),_0x158a65=>{const _0x2b6688=_0x579382;if(!Imported[_0x2b6688(0xa3d)])return;const _0x57524a=SceneManager[_0x2b6688(0xbc5)][_0x2b6688(0x748)];if(!_0x57524a)return;if(VisuMZ[_0x2b6688(0x5eb)][_0x2b6688(0x240)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x158a65,_0x158a65);const _0x353dea=VisuMZ[_0x2b6688(0x7c1)](_0x158a65['Targets']),_0x232273=_0x158a65['pause'];for(const _0x98a35f of _0x353dea){if(_0x2b6688(0x827)!=='Pavio'){_0x2f5abc['BattleCore'][_0x2b6688(0x718)][_0x2b6688(0xb95)](this);if(this[_0x2b6688(0x270)]()[_0x2b6688(0x560)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x2b6688(0x270)]()[_0x2b6688(0x560)][_0x2b6688(0x299)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x369db5[_0x2b6688(0x422)]=[]),_0x314a7a[_0x2b6688(0x81f)](this[_0x2b6688(0x270)]())&&(_0x32c2cc[_0x2b6688(0x422)]=[]);}else{if(!_0x98a35f)continue;if(!_0x98a35f[_0x2b6688(0x368)]())continue;_0x98a35f['battler']()[_0x2b6688(0xa1d)](_0x232273);}}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],'ActSeq_Inject_WaitForInjectAni',_0x504b01=>{const _0x258dbf=_0x579382;if(!SceneManager[_0x258dbf(0xc65)]())return;const _0x19796c=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x19796c)return;_0x19796c[_0x258dbf(0x9c8)](_0x258dbf(0x322));}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x33e),_0x1681f9=>{const _0x3bf7c9=_0x579382;if(!SceneManager[_0x3bf7c9(0xc65)]())return;VisuMZ[_0x3bf7c9(0x6dc)](_0x1681f9,_0x1681f9);const _0x15b9a3=$gameTemp[_0x3bf7c9(0x6c2)](),_0x45a4f7=BattleManager[_0x3bf7c9(0x3ca)],_0x233187=BattleManager[_0x3bf7c9(0x7c7)],_0x2ce5f4=BattleManager['_logWindow'];if(!_0x15b9a3||!_0x45a4f7||!_0x233187)return;if(!_0x45a4f7[_0x3bf7c9(0x270)]())return;const _0x4dba42=VisuMZ[_0x3bf7c9(0x7c1)](_0x1681f9['Targets']);for(const _0x247fa4 of _0x4dba42){if(!_0x247fa4)continue;_0x2ce5f4['push']('actionEffect',_0x233187,_0x247fa4);}_0x15b9a3[_0x3bf7c9(0x9c8)](_0x3bf7c9(0x8cd));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Mechanics_ActiveChainInputDisable',_0x5d7d3f=>{const _0x4b5e05=_0x579382;if(!SceneManager[_0x4b5e05(0xc65)]())return;if(!Imported[_0x4b5e05(0xcb8)])return;$gameTemp[_0x4b5e05(0xb46)]=!![];}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x1eb),_0x4a3f5e=>{const _0x42d47f=_0x579382;if(!SceneManager[_0x42d47f(0xc65)]())return;VisuMZ[_0x42d47f(0x6dc)](_0x4a3f5e,_0x4a3f5e);const _0x4c2d50=[_0x42d47f(0x378),_0x42d47f(0x5af),'ATK',_0x42d47f(0xa56),_0x42d47f(0x61b),_0x42d47f(0xa49),_0x42d47f(0x23b),_0x42d47f(0xbcf)],_0x2e2d84=_0x4a3f5e['Buffs'],_0x3e50e7=_0x4a3f5e['Debuffs'],_0x2772e8=_0x4a3f5e[_0x42d47f(0x932)],_0x74a779=VisuMZ[_0x42d47f(0x7c1)](_0x4a3f5e[_0x42d47f(0xbcd)]);for(const _0x2d40f6 of _0x74a779){if(!_0x2d40f6)continue;for(const _0x527587 of _0x2e2d84){if('SKYlC'!==_0x42d47f(0x238))return _0x26f2a1['friendsUnit']()[_0x42d47f(0x3a1)]()[_0x42d47f(0xa1c)](_0x4acff8=>_0x4acff8!==_0x3ea8cd);else{const _0x13cbf3=_0x4c2d50[_0x42d47f(0x903)](_0x527587['toUpperCase']()[_0x42d47f(0x8f5)]());if(_0x13cbf3>=0x0&&_0x13cbf3<=0x7){if(_0x42d47f(0xb58)!==_0x42d47f(0xb41))_0x2d40f6[_0x42d47f(0x1f9)](_0x13cbf3,_0x2772e8);else{if(!(_0x36257a[_0x42d47f(0x675)][_0x42d47f(0x27f)][_0x42d47f(0x84a)][_0x42d47f(0x637)]??!![]))return;const _0x4e638d=this[_0x42d47f(0x516)](_0x24e68a);if(![_0x42d47f(0x509),_0x42d47f(0x947),_0x42d47f(0xa45)][_0x42d47f(0xb2b)](_0x4e638d))return;const _0x2672e4=this['itemLineRect'](_0x2d98ba);let _0x2bb641=null;if(_0x4e638d===_0x42d47f(0x509))_0x2bb641=_0x4eda21[this[_0x42d47f(0x6f5)][_0x42d47f(0xa60)]()];else _0x4e638d===_0x42d47f(0x947)?_0x2bb641=_0x44f1da[this['_actor'][_0x42d47f(0x49b)]()]:_0x2bb641=_0xfe9834[this[_0x42d47f(0x72f)][_0x564cbd][_0x42d47f(0x5f1)]];this[_0x42d47f(0x47b)](this[_0x42d47f(0x6f5)],_0x2bb641,_0x2672e4['x'],_0x2672e4['y'],_0x2672e4['width']);}}}}for(const _0x227f2d of _0x3e50e7){const _0x19b664=_0x4c2d50['indexOf'](_0x227f2d['toUpperCase']()[_0x42d47f(0x8f5)]());_0x19b664>=0x0&&_0x19b664<=0x7&&(_0x42d47f(0x1ac)!==_0x42d47f(0x3f6)?_0x2d40f6[_0x42d47f(0x662)](_0x19b664,_0x2772e8):_0x5e6c33=_0x34558f>=_0xd9a0fe?_0x26fcfc:_0x14c8ac);}}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],'ActSeq_Mechanics_AddState',_0x50ddbf=>{const _0x2a2f56=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x50ddbf,_0x50ddbf);const _0x3db816=_0x50ddbf['States'],_0x22cb79=VisuMZ['CreateActionSequenceTargets'](_0x50ddbf[_0x2a2f56(0xbcd)]);for(const _0x16381f of _0x22cb79){if(!_0x16381f)continue;for(const _0x79d44c of _0x3db816){_0x2a2f56(0x6d8)!==_0x2a2f56(0x8de)?_0x16381f[_0x2a2f56(0x8f7)](_0x79d44c):this[_0x2a2f56(0x305)]('thrust');}}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x519),_0x5a0a8c=>{const _0xb5a837=_0x579382;if(!SceneManager[_0xb5a837(0xc65)]())return;VisuMZ['ConvertParams'](_0x5a0a8c,_0x5a0a8c);const _0x4cbee8=BattleManager[_0xb5a837(0x3ca)],_0xd3579a={'arPenRate':_0x5a0a8c[_0xb5a837(0x5b3)],'arPenFlat':_0x5a0a8c['ArPenFlat'],'arRedRate':_0x5a0a8c[_0xb5a837(0x7ff)],'arRedFlat':_0x5a0a8c['ArRedFlat']};_0x4cbee8['_armorPenetration']=_0xd3579a;}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],'ActSeq_Mechanics_AnalyzeWeakness',_0x5ad2eb=>{const _0x48dd81=_0x579382;if(!SceneManager[_0x48dd81(0xc65)]())return;if(!Imported[_0x48dd81(0xb39)])return;VisuMZ[_0x48dd81(0x6dc)](_0x5ad2eb,_0x5ad2eb);const _0x180ea0=VisuMZ[_0x48dd81(0x7c1)](_0x5ad2eb['Targets']),_0x2e8ebe=_0x5ad2eb['Reveal']||0x1;for(const _0x234407 of _0x180ea0){if(_0x48dd81(0x811)===_0x48dd81(0x811)){if(!_0x234407)continue;if(!_0x234407['isEnemy']())continue;_0x234407[_0x48dd81(0x211)](_0x2e8ebe);}else return this['isForOpponentBattleCore']();}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x2cb),_0x3a4033=>{const _0x2f5841=_0x579382;if(!SceneManager[_0x2f5841(0xc65)]())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager['isATB']())return;VisuMZ[_0x2f5841(0x6dc)](_0x3a4033,_0x3a4033);const _0x4d3dbf=VisuMZ[_0x2f5841(0x7c1)](_0x3a4033[_0x2f5841(0xbcd)]),_0x31e268=_0x3a4033[_0x2f5841(0x98b)],_0x4cbd93=_0x3a4033['ChargeRate'],_0x4f1c25=_0x3a4033[_0x2f5841(0xc71)];for(const _0x45503a of _0x4d3dbf){if(_0x2f5841(0xb8d)!=='oyurX'){if(!_0x45503a)continue;if(_0x45503a['isAtbChargingState']()){if(_0x2f5841(0xbdc)!==_0x2f5841(0x1d1))_0x45503a[_0x2f5841(0x79b)](_0x31e268);else{if(_0x248c67[_0x2f5841(0x84d)])return;_0x44e2f2[_0x2f5841(0x675)][_0x2f5841(0x4e4)]['call'](this);}}else{if(_0x45503a[_0x2f5841(0xacf)]()){if(_0x2f5841(0x3ee)==='Rsbfp')return this[_0x2f5841(0x552)]>0x0;else{_0x45503a[_0x2f5841(0x446)](_0x4cbd93);if(_0x4f1c25)_0x45503a[_0x2f5841(0xc82)]();}}}}else{const _0x36b04f=_0x404c44(_0x3c7907['$1']);_0x49fa9c[_0x2f5841(0x584)]([this],_0x36b04f,![],![]);}}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x27b),_0x2b3705=>{const _0x56ea94=_0x579382;if(!SceneManager[_0x56ea94(0xc65)]())return;if(!Imported[_0x56ea94(0x431)])return;VisuMZ[_0x56ea94(0x6dc)](_0x2b3705,_0x2b3705);const _0x28682a=VisuMZ[_0x56ea94(0x7c1)](_0x2b3705[_0x56ea94(0xbcd)]),_0x4ceea8=_0x2b3705[_0x56ea94(0x2ff)];for(const _0x5ed005 of _0x28682a){if(_0x56ea94(0x464)===_0x56ea94(0x464)){if(!_0x5ed005)continue;_0x5ed005[_0x56ea94(0x7af)](_0x4ceea8);}else this[_0x56ea94(0x9d5)]=_0x56ea94(0x65e);}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x408),_0x30d04a=>{const _0x1de604=_0x579382;if(!SceneManager[_0x1de604(0xc65)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x1de604(0x7c7)])return;VisuMZ[_0x1de604(0x6dc)](_0x30d04a,_0x30d04a);const _0x4916c3=_0x30d04a[_0x1de604(0xa4c)];$gameVariables['setValue'](_0x4916c3,BattleManager[_0x1de604(0x7c7)][_0x1de604(0x755)]());}),PluginManager['registerCommand'](pluginData['name'],_0x579382(0x2d6),_0x2d5a97=>{const _0x375e17=_0x579382;if(!SceneManager[_0x375e17(0xc65)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ['ConvertParams'](_0x2d5a97,_0x2d5a97);const _0x498ac9=VisuMZ['CreateActionSequenceTargets'](_0x2d5a97[_0x375e17(0xbcd)]),_0x216635=_0x2d5a97['BreakShields'];for(const _0x2bf11b of _0x498ac9){if(_0x375e17(0x6a3)===_0x375e17(0xb4e))return this['isActor']&&this[_0x375e17(0xc58)]()?_0x521256['BattleCore'][_0x375e17(0x27f)]['Actor'][_0x375e17(0x276)]:_0x3e379b['BattleCore'][_0x375e17(0x27f)][_0x375e17(0x8ff)][_0x375e17(0x276)];else{if(!_0x2bf11b)continue;if(_0x2bf11b['isBreakStunned']())continue;if(!_0x2bf11b[_0x375e17(0x2d1)]())continue;_0x2bf11b['alterBreakShield'](_0x216635);}}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],'ActSeq_Mechanics_BreakShieldReset',_0x883aa9=>{const _0xd2225=_0x579382;if(!SceneManager[_0xd2225(0xc65)]())return;if(!Imported[_0xd2225(0xc27)])return;VisuMZ[_0xd2225(0x6dc)](_0x883aa9,_0x883aa9);const _0x317dfc=VisuMZ['CreateActionSequenceTargets'](_0x883aa9['Targets']);for(const _0x40a9a1 of _0x317dfc){if(_0xd2225(0x75d)!=='jHPBF')this[_0xd2225(0x3fd)]();else{if(!_0x40a9a1)continue;if(_0x40a9a1[_0xd2225(0x301)]())continue;if(!_0x40a9a1[_0xd2225(0x2d1)]())continue;_0x40a9a1[_0xd2225(0x7d7)]();}}}),PluginManager['registerCommand'](pluginData['name'],_0x579382(0xa52),_0x53bddd=>{const _0xf012ea=_0x579382;if(!SceneManager[_0xf012ea(0xc65)]())return;if(!Imported[_0xf012ea(0x7c9)])return;if(!BattleManager[_0xf012ea(0x498)]())return;VisuMZ[_0xf012ea(0x6dc)](_0x53bddd,_0x53bddd);const _0x26a614=VisuMZ[_0xf012ea(0x7c1)](_0x53bddd[_0xf012ea(0xbcd)]),_0x18cc67=_0x53bddd[_0xf012ea(0x45f)];for(const _0x4b0024 of _0x26a614){if(!_0x4b0024)continue;_0x4b0024['gainBravePoints'](_0x18cc67);}}),PluginManager[_0x579382(0x510)](pluginData['name'],'ActSeq_Mechanics_Collapse',_0x28a15c=>{const _0x46e8c5=_0x579382;if(!SceneManager[_0x46e8c5(0xc65)]())return;VisuMZ[_0x46e8c5(0x6dc)](_0x28a15c,_0x28a15c);const _0x13892e=$gameTemp[_0x46e8c5(0x6c2)](),_0x34f000=BattleManager[_0x46e8c5(0x3ca)],_0x553514=BattleManager['_subject'];if(!_0x13892e||!_0x34f000||!_0x553514)return;if(!_0x34f000['item']())return;const _0x8bc733=VisuMZ[_0x46e8c5(0x7c1)](_0x28a15c[_0x46e8c5(0xbcd)]);for(const _0x272846 of _0x8bc733){if(_0x46e8c5(0x291)!==_0x46e8c5(0x7a9)){if(!_0x272846)continue;_0x28a15c[_0x46e8c5(0xbd5)]&&(_0x272846[_0x46e8c5(0x82f)](),_0x272846[_0x46e8c5(0x8f7)](_0x272846['deathStateId']())),_0x272846[_0x46e8c5(0xa83)]()&&_0x272846[_0x46e8c5(0x97f)]();}else this[_0x46e8c5(0x9d5)]=_0xefe354;}_0x13892e['setWaitMode'](_0x46e8c5(0xb1d));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xc51),_0x3df891=>{const _0x38ca6d=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x38ca6d(0x6aa)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x38ca6d(0x6dc)](_0x3df891,_0x3df891);const _0x57ddb2=VisuMZ[_0x38ca6d(0x7c1)](_0x3df891['Targets']),_0x3a0081=_0x3df891[_0x38ca6d(0x7f8)];for(const _0x31ebf2 of _0x57ddb2){if(!_0x31ebf2)continue;_0x31ebf2[_0x38ca6d(0x6e2)](_0x3a0081);}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x97d),_0x3b7516=>{const _0x3be6a6=_0x579382;if(!SceneManager[_0x3be6a6(0xc65)]())return;if(!Imported[_0x3be6a6(0x6aa)])return;if(!BattleManager[_0x3be6a6(0x900)]())return;VisuMZ[_0x3be6a6(0x6dc)](_0x3b7516,_0x3b7516);const _0x3687dc=VisuMZ['CreateActionSequenceTargets'](_0x3b7516[_0x3be6a6(0xbcd)]),_0x1b5815=_0x3b7516['ChargeRate'],_0x3e7b0e=_0x3b7516[_0x3be6a6(0x98b)];for(const _0x165a31 of _0x3687dc){if(!_0x165a31)continue;if(_0x165a31['_tpbState']===_0x3be6a6(0x220)){if(_0x3be6a6(0x224)!==_0x3be6a6(0xb85))_0x165a31['changeCtbChargeTime'](_0x1b5815);else return _0x2c0a62[_0x3be6a6(0x675)]['Settings'][_0x3be6a6(0x547)][_0x3be6a6(0x700)][_0x3be6a6(0xb95)](this,_0xc353f5,_0x1f2c23);}else _0x165a31[_0x3be6a6(0x990)]===_0x3be6a6(0x945)&&_0x165a31['changeCtbCastTime'](_0x3e7b0e);}}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x7cf),_0x2965f2=>{const _0x25dccc=_0x579382;if(!SceneManager[_0x25dccc(0xc65)]())return;VisuMZ[_0x25dccc(0x6dc)](_0x2965f2,_0x2965f2);const _0x381c34=BattleManager['_action'];if(!_0x381c34)return;let _0x6f0be1=_0x2965f2[_0x25dccc(0x2e5)];_0x381c34[_0x25dccc(0x88e)](_0x6f0be1);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Mechanics_DamagePopup',_0x46c8ed=>{const _0x223c85=_0x579382;if(!SceneManager[_0x223c85(0xc65)]())return;VisuMZ[_0x223c85(0x6dc)](_0x46c8ed,_0x46c8ed);const _0x2c7cab=VisuMZ[_0x223c85(0x7c1)](_0x46c8ed['Targets']);for(const _0x2b53ae of _0x2c7cab){if('Saokg'===_0x223c85(0x4c6)){if(!_0x2b53ae)continue;if(_0x2b53ae[_0x223c85(0x8e1)]())_0x2b53ae[_0x223c85(0xc1c)]();}else _0x3e263b[_0x223c85(0x448)][_0x223c85(0xa77)][_0x223c85(0xb95)](this,_0x14146c),this['performActionMotions'](_0x45df45);}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0xb69),_0x4c78da=>{const _0x428a73=_0x579382;if(!SceneManager[_0x428a73(0xc65)]())return;VisuMZ['ConvertParams'](_0x4c78da,_0x4c78da);const _0x1407c5=$gameTemp[_0x428a73(0x6c2)](),_0x469e98=BattleManager['_subject'],_0x1afce7=_0x4c78da[_0x428a73(0x792)];if(!_0x1407c5)return;if(!_0x469e98)return;_0x469e98&&_0x469e98[_0x428a73(0x84b)]()&&_0x1afce7[_0x428a73(0x2ed)]()[_0x428a73(0x8f5)]()!=='UNTITLED'&&_0x1407c5[_0x428a73(0x57a)]([_0x1afce7]);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xa05),_0x3f4088=>{const _0x129824=_0x579382;if(!SceneManager[_0x129824(0xc65)]())return;VisuMZ[_0x129824(0x6dc)](_0x3f4088,_0x3f4088);const _0x4bed10=VisuMZ[_0x129824(0x7c1)](_0x3f4088[_0x129824(0xbcd)]);for(const _0x19e1fe of _0x4bed10){if(_0x129824(0x352)===_0x129824(0x352)){if(!_0x19e1fe)continue;if(!_0x19e1fe[_0x129824(0xa31)]())continue;_0x19e1fe[_0x129824(0x951)]();}else _0x5ea016[_0x129824(0x675)]['Scene_Battle_startPartyCommandSelection']['call'](this);}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Mechanics_EtbAction',_0x1083c4=>{const _0x332ef5=_0x579382;if(!SceneManager[_0x332ef5(0xc65)]())return;if(!Imported[_0x332ef5(0x967)])return;if(!BattleManager[_0x332ef5(0x6b1)]())return;VisuMZ['ConvertParams'](_0x1083c4,_0x1083c4);const _0x110cc3=_0x1083c4[_0x332ef5(0xa71)];if(BattleManager[_0x332ef5(0x7c7)]){if(_0x332ef5(0x8ed)===_0x332ef5(0x6fd)){if(this[_0x332ef5(0x9a9)]&&this[_0x332ef5(0xb0b)][_0x332ef5(0xb2b)](this[_0x332ef5(0x9a9)])){const _0x12f01b=this[_0x332ef5(0xb0b)][_0x332ef5(0x903)](this[_0x332ef5(0x9a9)]);this[_0x332ef5(0xba3)](_0x12f01b);}else this[_0x332ef5(0x905)]();}else BattleManager[_0x332ef5(0x7c7)][_0x332ef5(0x24e)]()[_0x332ef5(0x2e3)](_0x110cc3);}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x2dc),_0x45647a=>{const _0x2f694e=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2f694e(0x763)])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x2f694e(0x6dc)](_0x45647a,_0x45647a);const _0x2891e0=_0x45647a[_0x2f694e(0xa71)];BattleManager[_0x2f694e(0x7c7)]&&BattleManager['_subject'][_0x2f694e(0x24e)]()['gainCurrentActionsFTB'](_0x2891e0);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x7ec),_0x217fef=>{const _0x221ba3=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x221ba3(0x6dc)](_0x217fef,_0x217fef);const _0x5c2ea4=VisuMZ[_0x221ba3(0x7c1)](_0x217fef['Targets']),_0x44a677=_0x217fef['HP_Rate'],_0x5424d0=_0x217fef['HP_Flat'],_0x1d05c3=_0x217fef[_0x221ba3(0x50a)],_0x5c8140=_0x217fef[_0x221ba3(0x1ad)],_0x1700da=_0x217fef['TP_Rate'],_0x593d27=_0x217fef[_0x221ba3(0x4bf)],_0x4bcb32=_0x217fef['ShowPopup'];for(const _0x13681c of _0x5c2ea4){if(!_0x13681c)continue;const _0x1b1a8b=_0x13681c[_0x221ba3(0x884)](),_0x24669e=Math[_0x221ba3(0x78b)](_0x44a677*_0x13681c[_0x221ba3(0x51d)]+_0x5424d0),_0x5f82df=Math[_0x221ba3(0x78b)](_0x1d05c3*_0x13681c[_0x221ba3(0x493)]+_0x5c8140),_0x36e4a9=Math['round'](_0x1700da*_0x13681c['maxTp']()+_0x593d27);if(_0x24669e!==0x0)_0x13681c[_0x221ba3(0xa7e)](_0x24669e);if(_0x5f82df!==0x0)_0x13681c['gainMp'](_0x5f82df);if(_0x36e4a9!==0x0)_0x13681c[_0x221ba3(0x488)](_0x36e4a9);if(_0x4bcb32)_0x13681c[_0x221ba3(0xc1c)]();_0x1b1a8b&&_0x13681c['isDead']()&&_0x13681c[_0x221ba3(0x97f)]();}}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x871),_0x2c107f=>{const _0x2fbf53=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2fbf53(0x6dc)](_0x2c107f,_0x2c107f);const _0x4b57b4=VisuMZ[_0x2fbf53(0x7c1)](_0x2c107f[_0x2fbf53(0xbcd)]);for(const _0x118628 of _0x4b57b4){if(!_0x118628)continue;_0x118628['setImmortal'](_0x2c107f[_0x2fbf53(0x774)]);}}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x1d4),_0x12fa11=>{const _0x5903ba=_0x579382;if(!SceneManager[_0x5903ba(0xc65)]())return;VisuMZ['ConvertParams'](_0x12fa11,_0x12fa11);const _0x1e65b0=BattleManager['_action'],_0x2f83b9={'criticalHitRate':_0x12fa11[_0x5903ba(0x8b7)],'criticalHitFlat':_0x12fa11[_0x5903ba(0xa92)],'criticalDmgRate':_0x12fa11[_0x5903ba(0x2e2)],'criticalDmgFlat':_0x12fa11[_0x5903ba(0x4dc)],'damageRate':_0x12fa11['DamageRate'],'damageFlat':_0x12fa11[_0x5903ba(0xa97)],'hitRate':_0x12fa11['HitRate'],'hitFlat':_0x12fa11['HitFlat']};_0x1e65b0[_0x5903ba(0x7d2)]=_0x2f83b9;}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x864),_0x47d707=>{const _0x780eb0=_0x579382;if(!SceneManager[_0x780eb0(0xc65)]())return;VisuMZ[_0x780eb0(0x6dc)](_0x47d707,_0x47d707);const _0x3bcb8a=_0x47d707['CommonEventID'];SceneManager[_0x780eb0(0xbc5)][_0x780eb0(0x36e)](_0x3bcb8a);}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x349),_0x2ff323=>{const _0x516e8e=_0x579382;if(!SceneManager[_0x516e8e(0xc65)]())return;if(!Imported[_0x516e8e(0x7cb)])return;if(!BattleManager[_0x516e8e(0x892)]())return;VisuMZ[_0x516e8e(0x6dc)](_0x2ff323,_0x2ff323);const _0x5d81e4=VisuMZ[_0x516e8e(0x7c1)](_0x2ff323[_0x516e8e(0xbcd)]);for(const _0x17578a of _0x5d81e4){if(!_0x17578a)continue;let _0x463dfc=_0x2ff323['CurrentTurn'],_0x5aa10e=_0x2ff323[_0x516e8e(0x941)],_0x146147=_0x2ff323[_0x516e8e(0xb40)];BattleManager[_0x516e8e(0xaea)][_0x516e8e(0xb2b)](_0x17578a)?_0x463dfc+=_0x146147:_0x5aa10e+=_0x146147,BattleManager[_0x516e8e(0x9ba)](_0x17578a,-_0x463dfc,![]),BattleManager[_0x516e8e(0x9ba)](_0x17578a,-_0x5aa10e,!![]);}}),PluginManager[_0x579382(0x510)](pluginData['name'],'ActSeq_Mechanics_PtbAlterCost',_0x47c5d7=>{const _0x19cbfe=_0x579382;if(!SceneManager[_0x19cbfe(0xc65)]())return;if(!Imported[_0x19cbfe(0x44d)])return;if(!BattleManager[_0x19cbfe(0x88c)]())return;VisuMZ[_0x19cbfe(0x6dc)](_0x47c5d7,_0x47c5d7);const _0x3b495a=BattleManager[_0x19cbfe(0x7c7)]['friendsUnit'](),_0x47964e=_0x47c5d7[_0x19cbfe(0x9f1)],_0x4098cf=_0x47c5d7[_0x19cbfe(0x26d)]||'unchanged',_0x46ef3d=_0x47c5d7[_0x19cbfe(0xa59)]||_0x19cbfe(0x3aa),_0x55ae95=_0x47c5d7[_0x19cbfe(0x5a8)]||0x0,_0x1fbd86=_0x47c5d7[_0x19cbfe(0x849)]||0x0;(_0x3b495a['canAlterActionCostPTB']()||_0x47964e)&&(_0x47964e&&(_0x3b495a['_ptbActionCost']=_0x3b495a['_ptbActionCost']||{},_0x3b495a['_ptbActionCost']['priority']=0x0),_0x3b495a[_0x19cbfe(0x817)](_0x4098cf,_0x46ef3d,_0x55ae95,_0x1fbd86));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x399),_0x305594=>{const _0xad0bb8=_0x579382;if(!SceneManager[_0xad0bb8(0xc65)]())return;if(!Imported[_0xad0bb8(0x44d)])return;if(!BattleManager[_0xad0bb8(0x88c)]())return;VisuMZ[_0xad0bb8(0x6dc)](_0x305594,_0x305594);const _0x164d5c=BattleManager[_0xad0bb8(0x7c7)][_0xad0bb8(0x24e)]();let _0x22176c=Math[_0xad0bb8(0x1f1)](_0x305594[_0xad0bb8(0xc08)],0x0),_0x394a4a=_0x164d5c[_0xad0bb8(0x3ba)](),_0x55372e=_0x164d5c[_0xad0bb8(0x650)]();while(_0x22176c--){if(_0x394a4a<=0x0&&_0x55372e<=0x0)break;else{if(_0x394a4a>0x0){if(_0xad0bb8(0x704)!=='MLDqj')return _0x536891=_0x346783[_0xad0bb8(0x78b)](_0x59cbe7*1.2),_0x5805b8[_0xad0bb8(0x675)][_0xad0bb8(0xb24)][_0xad0bb8(0xb95)](this,_0x553632,_0x1025ba);else _0x394a4a--,_0x55372e++;}else _0x55372e--;}}_0x164d5c['setFullActionsPTB'](_0x394a4a),_0x164d5c[_0xad0bb8(0x9a1)](_0x55372e);}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x4fb),_0x494236=>{const _0x2ca7e3=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2ca7e3(0x44d)])return;if(!BattleManager[_0x2ca7e3(0x88c)]())return;VisuMZ[_0x2ca7e3(0x6dc)](_0x494236,_0x494236);const _0x34e652=BattleManager[_0x2ca7e3(0x7c7)][_0x2ca7e3(0x24e)]();let _0xfab7b9=_0x494236['FullActions'],_0x3a6bef=_0x494236[_0x2ca7e3(0x273)];_0x34e652['gainFullActionsPTB'](_0xfab7b9),_0x34e652[_0x2ca7e3(0xaf6)](_0x3a6bef);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x791),_0x3cb053=>{const _0x1b3ac7=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1b3ac7(0x6dc)](_0x3cb053,_0x3cb053);const _0x2883cf=[_0x1b3ac7(0x378),_0x1b3ac7(0x5af),_0x1b3ac7(0xa47),_0x1b3ac7(0xa56),_0x1b3ac7(0x61b),_0x1b3ac7(0xa49),_0x1b3ac7(0x23b),'LUK'],_0x28226f=_0x3cb053[_0x1b3ac7(0x2d8)],_0x3dcb14=_0x3cb053[_0x1b3ac7(0x790)],_0x1ecc49=VisuMZ['CreateActionSequenceTargets'](_0x3cb053['Targets']);for(const _0x3e3f11 of _0x1ecc49){if(_0x1b3ac7(0x33f)===_0x1b3ac7(0x33f)){if(!_0x3e3f11)continue;for(const _0x487598 of _0x28226f){const _0x5ae710=_0x2883cf[_0x1b3ac7(0x903)](_0x487598[_0x1b3ac7(0x2ed)]()[_0x1b3ac7(0x8f5)]());if(_0x5ae710>=0x0&&_0x5ae710<=0x7&&_0x3e3f11[_0x1b3ac7(0x3d8)](_0x5ae710)){if('NDMnl'===_0x1b3ac7(0x3c9))_0x3e3f11[_0x1b3ac7(0x31f)](_0x5ae710);else return _0x32991d['battler']()[_0x1b3ac7(0xb43)]-_0x34b44f[_0x1b3ac7(0x368)]()[_0x1b3ac7(0xb43)];}}for(const _0x32ee6e of _0x3dcb14){if(_0x1b3ac7(0xaa7)===_0x1b3ac7(0x616)){let _0x41d897=-0x10,_0x3868a6=this[_0x1b3ac7(0x5ac)]*0.5;const _0x52d9f4=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x175239=this[_0x1b3ac7(0x309)][_0x1b3ac7(0x2bf)]()[_0x1b3ac7(0xb6e)](_0x3e6696=>_0x3e6696&&_0x3e6696['note'][_0x1b3ac7(0x299)](_0x52d9f4)?_0x5c7ea7(_0x288fba['$1']):0x0),_0x12c0a4=this[_0x1b3ac7(0x309)][_0x1b3ac7(0x2bf)]()[_0x1b3ac7(0xb6e)](_0x5cb0e0=>_0x5cb0e0&&_0x5cb0e0[_0x1b3ac7(0x560)][_0x1b3ac7(0x299)](_0x52d9f4)?_0x44ec5e(_0x3141ef['$2']):0x0);_0x41d897=_0x175239[_0x1b3ac7(0x3ad)]((_0x30bc47,_0x15723c)=>_0x30bc47+_0x15723c,_0x41d897),_0x3868a6=_0x12c0a4[_0x1b3ac7(0x3ad)]((_0x35e4dd,_0x5ef113)=>_0x35e4dd+_0x5ef113,_0x3868a6),this['_weaponSprite']['x']=_0x41d897,this['_weaponSprite']['y']=_0x3868a6,this[_0x1b3ac7(0xbeb)][_0x1b3ac7(0x6b8)]();}else{const _0xacda76=_0x2883cf[_0x1b3ac7(0x903)](_0x32ee6e['toUpperCase']()[_0x1b3ac7(0x8f5)]());if(_0xacda76>=0x0&&_0xacda76<=0x7&&_0x3e3f11[_0x1b3ac7(0x8c9)](_0xacda76)){if(_0x1b3ac7(0x7cc)!==_0x1b3ac7(0x7cc)){const _0x4946ea=_0x379c6a[_0x1b3ac7(0x247)](_0x52810f);_0x4946ea[_0x1b3ac7(0x21e)]=![],_0x4946ea['evaded']=![],_0x4946ea['hpAffected']=![],this[_0x1b3ac7(0xb9f)][_0x1b3ac7(0x226)](_0x4946ea);}else _0x3e3f11[_0x1b3ac7(0x31f)](_0xacda76);}}}}else{const _0x31e88d=new _0x5ca26e(_0xad7437);this[_0x1b3ac7(0x9d3)][_0x1b3ac7(0xbb0)](_0x31e88d);}}}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x634),_0x216c2b=>{const _0x2b9319=_0x579382;if(!SceneManager[_0x2b9319(0xc65)]())return;VisuMZ['ConvertParams'](_0x216c2b,_0x216c2b);const _0x207e14=_0x216c2b['States'],_0x44da62=VisuMZ[_0x2b9319(0x7c1)](_0x216c2b[_0x2b9319(0xbcd)]);for(const _0x5cdd18 of _0x44da62){if(_0x2b9319(0x32e)===_0x2b9319(0x9c9)){_0x785942['BattleCore']['Window_BattleLog_update'][_0x2b9319(0xb95)](this);if(this['_requestRefresh'])this[_0x2b9319(0xcaa)]();}else{if(!_0x5cdd18)continue;for(const _0xa49f5 of _0x207e14){_0x5cdd18['removeState'](_0xa49f5);}}}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Mechanics_StbExploit',_0x786fde=>{const _0x66fade=_0x579382;if(!SceneManager[_0x66fade(0xc65)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x66fade(0xc8c)]())return;VisuMZ['ConvertParams'](_0x786fde,_0x786fde);const _0x283f55=_0x786fde[_0x66fade(0x8c1)],_0x355825=VisuMZ['CreateActionSequenceTargets'](_0x786fde[_0x66fade(0xbcd)]),_0x26ccb6=_0x786fde[_0x66fade(0xaef)],_0x4f7d1a=_0x786fde[_0x66fade(0x6ce)],_0x4b8782=_0x786fde[_0x66fade(0x708)],_0x469dd4=BattleManager[_0x66fade(0x3ca)];if(_0x283f55){if(_0x66fade(0x2af)!==_0x66fade(0x85c))for(const _0x562d4d of _0x355825){if(!_0x562d4d)continue;if(_0x562d4d===user)continue;if(_0x26ccb6)_0x562d4d['setSTBExploited'](![]);_0x562d4d[_0x66fade(0x710)](BattleManager['_subject'],_0x469dd4);}else{if(this['_defeatedEnemies']===_0x1994bc)this[_0x66fade(0x2d3)]();if(!_0x54d73d)return;if(this[_0x66fade(0x9ea)][_0x66fade(0xb2b)](_0x576966))return;this[_0x66fade(0x9ea)][_0x66fade(0x226)](_0x1640b1),this[_0x66fade(0x9ea)][_0x66fade(0x7de)]((_0x517b8f,_0x5cd2fa)=>_0x517b8f-_0x5cd2fa);}}if(_0x4f7d1a&&BattleManager[_0x66fade(0x7c7)]){if('vLYii'!==_0x66fade(0x49d))_0x5a9812[_0x66fade(0x675)][_0x66fade(0xb5a)][_0x66fade(0xb95)](this),this[_0x66fade(0x915)]=[];else{if(_0x4b8782)BattleManager[_0x66fade(0x7c7)][_0x66fade(0xb51)](![]);const _0x28d14f=_0x355825[0x0];BattleManager[_0x66fade(0xb65)](_0x28d14f,_0x469dd4);}}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x476),_0x2ff648=>{const _0x2715bd=_0x579382;if(!SceneManager[_0x2715bd(0xc65)]())return;if(!Imported[_0x2715bd(0x953)])return;if(!BattleManager[_0x2715bd(0xc8c)]())return;VisuMZ[_0x2715bd(0x6dc)](_0x2ff648,_0x2ff648);const _0x53c7d7=_0x2ff648[_0x2715bd(0x475)];BattleManager[_0x2715bd(0x7c7)]&&BattleManager[_0x2715bd(0x7c7)][_0x2715bd(0x1d3)](_0x53c7d7);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x8ae),_0xbdafb8=>{const _0x1d1b24=_0x579382;if(!SceneManager[_0x1d1b24(0xc65)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x1d1b24(0xc8c)]())return;VisuMZ[_0x1d1b24(0x6dc)](_0xbdafb8,_0xbdafb8);let _0x144036=_0xbdafb8[_0x1d1b24(0x475)];if(BattleManager[_0x1d1b24(0x7c7)]){if('uEtSI'===_0x1d1b24(0xa85)){let _0x1240ac=0x1;return _0x1240ac*=this[_0x1d1b24(0x3cc)],_0x1240ac*=this[_0x1d1b24(0xa3a)],_0x1240ac;}else{BattleManager['_subject'][_0x1d1b24(0x65b)]=BattleManager[_0x1d1b24(0x7c7)][_0x1d1b24(0x65b)]||[];while(_0x144036--){if(BattleManager['_subject']['_actions'][_0x1d1b24(0x237)]<=0x0)break;BattleManager[_0x1d1b24(0x7c7)][_0x1d1b24(0x65b)][_0x1d1b24(0x3b6)]();}}}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x714),_0x49dacb=>{const _0x4bfd55=_0x579382;if(!SceneManager[_0x4bfd55(0xc65)]())return;if(!Imported[_0x4bfd55(0x8c3)])return;VisuMZ['ConvertParams'](_0x49dacb,_0x49dacb);const _0x55204d=VisuMZ[_0x4bfd55(0x7c1)](_0x49dacb[_0x4bfd55(0xbcd)]),_0x15af32=_0x49dacb[_0x4bfd55(0xbff)];for(const _0x1c20f7 of _0x55204d){if(_0x4bfd55(0x31a)!=='ePQrY')this[_0x4bfd55(0x5ba)](_0x4bfd55(0xb2e));else{if(!_0x1c20f7)continue;if(!_0x1c20f7[_0x4bfd55(0xc58)]())continue;_0x1c20f7[_0x4bfd55(0x9ae)](_0x15af32);}}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x316),_0x12366e=>{const _0x43900b=_0x579382;if(!SceneManager[_0x43900b(0xc65)]())return;VisuMZ[_0x43900b(0x6dc)](_0x12366e,_0x12366e);const _0x18be8e=VisuMZ[_0x43900b(0x7c1)](_0x12366e['Targets']),_0xbda5b=_0x12366e[_0x43900b(0x471)],_0x164466={'textColor':ColorManager[_0x43900b(0xa6e)](_0x12366e[_0x43900b(0x4fc)]),'flashColor':_0x12366e[_0x43900b(0x733)],'flashDuration':_0x12366e[_0x43900b(0xba8)]};for(const _0x5913f1 of _0x18be8e){if(!_0x5913f1)continue;_0x5913f1[_0x43900b(0xbfa)](_0xbda5b,_0x164466);}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x3b1),_0xb77437=>{const _0x4a0c0b=_0x579382;if(!SceneManager[_0x4a0c0b(0xc65)]())return;VisuMZ[_0x4a0c0b(0x6dc)](_0xb77437,_0xb77437);const _0x2521ac=VisuMZ[_0x4a0c0b(0x7c1)](_0xb77437['Targets']);let _0x2b71ea=$gameVariables[_0x4a0c0b(0x1bc)](_0xb77437[_0x4a0c0b(0x332)]);Imported['VisuMZ_0_CoreEngine']&&_0xb77437[_0x4a0c0b(0x86e)]&&(_0x2b71ea=VisuMZ[_0x4a0c0b(0xcc2)](_0x2b71ea));const _0x369701=String(_0x2b71ea),_0x44ef02={'textColor':ColorManager[_0x4a0c0b(0xa6e)](_0xb77437['TextColor']),'flashColor':_0xb77437[_0x4a0c0b(0x733)],'flashDuration':_0xb77437['FlashDuration']};for(const _0x1ccded of _0x2521ac){if(!_0x1ccded)continue;_0x1ccded[_0x4a0c0b(0xbfa)](_0x369701,_0x44ef02);}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x3bc),_0x380bce=>{const _0x58b6ad=_0x579382;if(!SceneManager[_0x58b6ad(0xc65)]())return;const _0x1d83cb=$gameTemp[_0x58b6ad(0x6c2)]();if(!_0x1d83cb)return;_0x1d83cb[_0x58b6ad(0x9c8)](_0x58b6ad(0xb1d));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xc9d),_0xbea97d=>{const _0x3b070f=_0x579382;if(!SceneManager[_0x3b070f(0xc65)]())return;VisuMZ['ConvertParams'](_0xbea97d,_0xbea97d);const _0x463139=VisuMZ[_0x3b070f(0x7c1)](_0xbea97d[_0x3b070f(0xbcd)]);for(const _0x14742e of _0x463139){if(!_0x14742e)continue;_0x14742e['clearFreezeMotion']();}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],'ActSeq_Motion_FreezeMotionFrame',_0x224910=>{const _0x506232=_0x579382;if(!SceneManager[_0x506232(0xc65)]())return;VisuMZ[_0x506232(0x6dc)](_0x224910,_0x224910);const _0x2f9ae6=VisuMZ[_0x506232(0x7c1)](_0x224910['Targets']),_0x3b8c9=_0x224910['MotionType'][_0x506232(0x82b)]()[_0x506232(0x8f5)]();let _0x12e963=_0x224910[_0x506232(0xbd3)];const _0x70b7fd=_0x224910[_0x506232(0x9dc)];![_0x506232(0x509),'thrust',_0x506232(0x1bd),_0x506232(0x6c9)][_0x506232(0xb2b)](_0x3b8c9)&&(_0x12e963=![]);for(const _0x25d8df of _0x2f9ae6){if(_0x506232(0x5b6)===_0x506232(0x53e)){if(!_0x406deb['isPhysical']())return![];if(!_0x374b9a[_0x506232(0x2c1)]())return![];if(!_0x1e069d['isForOpponent']())return![];return _0x216b58[_0x506232(0x675)][_0x506232(0x27f)][_0x506232(0x765)][_0x506232(0x20f)];}else{if(!_0x25d8df)continue;_0x25d8df[_0x506232(0x7a8)](_0x3b8c9,_0x12e963,_0x70b7fd);}}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Motion_MotionType',_0x58d309=>{const _0x4e06d8=_0x579382;if(!SceneManager[_0x4e06d8(0xc65)]())return;VisuMZ[_0x4e06d8(0x6dc)](_0x58d309,_0x58d309);const _0x2e1409=VisuMZ[_0x4e06d8(0x7c1)](_0x58d309['Targets']),_0x14b6a8=_0x58d309[_0x4e06d8(0xcb3)][_0x4e06d8(0x82b)]()['trim'](),_0x36b46f=_0x58d309['ShowWeapon'];for(const _0x39f001 of _0x2e1409){if('HRZSJ'!==_0x4e06d8(0xbfd)){if(!_0x39f001)continue;if(_0x14b6a8[_0x4e06d8(0x299)](/ATTACK[ ](\d+)/i))_0x39f001[_0x4e06d8(0xb04)](Number(RegExp['$1']));else _0x14b6a8===_0x4e06d8(0x509)?_0x39f001[_0x4e06d8(0x43a)]():_0x39f001['requestMotion'](_0x14b6a8);if(!_0x36b46f)_0x39f001['startWeaponAnimation'](0x0);else{if(_0x36b46f&&[_0x4e06d8(0x8f6),_0x4e06d8(0x1bd),'missle'][_0x4e06d8(0xb2b)](_0x14b6a8)){}}}else _0x393131=_0x9ea80[_0x4e06d8(0xc42)](/\x1I\[(\d+)\]/gi,''),_0x5a1eaa=_0x9fda33[_0x4e06d8(0xc42)](/\\I\[(\d+)\]/gi,'');}}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x759),_0x406792=>{const _0x214188=_0x579382;if(!SceneManager[_0x214188(0xc65)]())return;VisuMZ['ConvertParams'](_0x406792,_0x406792);const _0x578539=BattleManager[_0x214188(0x3ca)];if(!_0x578539)return;if(!_0x578539[_0x214188(0x270)]())return;const _0x2a4f51=VisuMZ['CreateActionSequenceTargets'](_0x406792[_0x214188(0xbcd)]);for(const _0x5732e8 of _0x2a4f51){if(!_0x5732e8)continue;_0x5732e8[_0x214188(0xa77)](_0x578539);}}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x25e),_0x5a1429=>{const _0x5eff74=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5eff74(0x6dc)](_0x5a1429,_0x5a1429);const _0x5a062c=VisuMZ[_0x5eff74(0x7c1)](_0x5a1429[_0x5eff74(0xbcd)]);for(const _0x9fdca of _0x5a062c){if(!_0x9fdca)continue;if(!_0x9fdca[_0x5eff74(0x368)]())continue;_0x9fdca[_0x5eff74(0x368)]()[_0x5eff74(0x913)]();}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0xa13),_0x12f01e=>{const _0x46cbd8=_0x579382;if(!SceneManager[_0x46cbd8(0xc65)]())return;VisuMZ[_0x46cbd8(0x6dc)](_0x12f01e,_0x12f01e);const _0xc83217=$gameTemp[_0x46cbd8(0x6c2)](),_0x2887a8=_0x12f01e['MotionFrameWait']*Sprite_Battler[_0x46cbd8(0x3d3)];_0xc83217[_0x46cbd8(0x7c8)](_0x2887a8);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Movement_BattleStep',_0x5c7b17=>{const _0x32207c=_0x579382;if(!SceneManager[_0x32207c(0xc65)]())return;VisuMZ[_0x32207c(0x6dc)](_0x5c7b17,_0x5c7b17);const _0x3bbd50=$gameTemp[_0x32207c(0x6c2)](),_0x2628b0=BattleManager[_0x32207c(0x3ca)];if(!_0x3bbd50||!_0x2628b0)return;if(!_0x2628b0['item']())return;const _0x4edebb=VisuMZ[_0x32207c(0x7c1)](_0x5c7b17['Targets']);for(const _0x52894a of _0x4edebb){if(!_0x52894a)continue;_0x52894a['performActionStart'](_0x2628b0);}if(_0x5c7b17[_0x32207c(0x7b3)])_0x3bbd50['setWaitMode'](_0x32207c(0x1b8));}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x1c0),_0x45e7e4=>{const _0x550392=_0x579382;if(!SceneManager[_0x550392(0xc65)]())return;if(!$gameSystem[_0x550392(0xc10)]())return;VisuMZ[_0x550392(0x6dc)](_0x45e7e4,_0x45e7e4);const _0xe9cbfe=$gameTemp[_0x550392(0x6c2)](),_0x255176=VisuMZ['CreateActionSequenceTargets'](_0x45e7e4[_0x550392(0xbcd)]),_0x3c96bf=_0x45e7e4[_0x550392(0xafb)],_0x534e73=_0x45e7e4['DistanceX'],_0x76c04d=_0x45e7e4[_0x550392(0xbc2)],_0x318919=_0x45e7e4[_0x550392(0xafa)],_0x42380d=_0x45e7e4[_0x550392(0xb5b)],_0x3ded49=_0x45e7e4[_0x550392(0x3a5)],_0x155c95=_0x45e7e4['MotionType'],_0x11da81=_0x45e7e4[_0x550392(0x7b3)];if(!_0xe9cbfe)return;for(const _0xeac1dd of _0x255176){if(!_0xeac1dd)continue;let _0x1f43a5=_0x534e73,_0x10ebdd=_0x76c04d;if(_0x3c96bf[_0x550392(0x299)](/horz/i))_0x1f43a5*=_0xeac1dd[_0x550392(0xc58)]()?-0x1:0x1;if(_0x3c96bf[_0x550392(0x299)](/vert/i))_0x10ebdd*=_0xeac1dd['isActor']()?-0x1:0x1;_0xeac1dd['moveBattlerHomeDistance'](_0x1f43a5,_0x10ebdd,_0x318919,_0x42380d,_0x3ded49),_0xeac1dd['requestMotion'](_0x155c95);}if(_0x11da81)_0xe9cbfe[_0x550392(0x9c8)](_0x550392(0x1b8));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x35f),_0x24152c=>{const _0x1c610d=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1c610d(0x6dc)](_0x24152c,_0x24152c);const _0x4c7bb3=$gameTemp[_0x1c610d(0x6c2)](),_0x41963a=VisuMZ['CreateActionSequenceTargets'](_0x24152c[_0x1c610d(0xbcd)]),_0xace4b8=_0x24152c[_0x1c610d(0xa07)],_0x27e4fd=_0x24152c['OffsetAdjust'],_0x888cad=_0x24152c[_0x1c610d(0x906)],_0x3f2e82=_0x24152c['OffsetY'],_0x22b133=_0x24152c[_0x1c610d(0xafa)],_0x4ac786=_0x24152c['FaceDirection'],_0x50b1bb=_0x24152c['EasingType'],_0x277b95=_0x24152c[_0x1c610d(0xcb3)],_0x4700ce=_0x24152c[_0x1c610d(0x7b3)];if(!_0x4c7bb3)return;for(const _0x60d831 of _0x41963a){if(_0x1c610d(0x1ef)!==_0x1c610d(0x1ef))_0x3a4c8e[_0x1c610d(0x675)][_0x1c610d(0xc50)]['call'](this),this['_enemyWindow']['autoSelect'](),this[_0x1c610d(0x6cb)]();else{if(!_0x60d831)continue;let _0x1193b0=_0x60d831[_0x1c610d(0x368)]()['_baseX'],_0x229b30=_0x60d831[_0x1c610d(0x368)]()[_0x1c610d(0x339)];if(_0xace4b8[_0x1c610d(0x299)](/home/i)){if('dwGFi'!=='wFcLr')_0x1193b0=_0x60d831[_0x1c610d(0x368)]()[_0x1c610d(0x605)],_0x229b30=_0x60d831[_0x1c610d(0x368)]()[_0x1c610d(0x486)];else{this['contents'][_0x1c610d(0x3f1)]();const _0x342408=_0xaf5e6b['BattleCore'][_0x1c610d(0x27f)][_0x1c610d(0x6d6)][_0x1c610d(0x8c5)],_0x36377a=_0x342408[_0x1c610d(0x7e1)](this[_0x1c610d(0x679)](),this[_0x1c610d(0xb09)]()),_0xfb8869=this[_0x1c610d(0x694)](_0x36377a)[_0x1c610d(0x259)],_0x3a8a86=_0x3f50c5['floor']((this[_0x1c610d(0x7ea)]-_0xfb8869)/0x2);this['drawTextEx'](_0x36377a,_0x3a8a86,0x0,_0xfb8869);}}else{if(_0xace4b8[_0x1c610d(0x299)](/center/i))_0x1193b0=Graphics[_0x1c610d(0x77e)]/0x2,_0x229b30=Graphics[_0x1c610d(0x98e)]/0x2;else _0xace4b8[_0x1c610d(0x299)](/point (\d+), (\d+)/i)&&(_0x1193b0=Number(RegExp['$1']),_0x229b30=Number(RegExp['$2']));}if(_0x27e4fd[_0x1c610d(0x299)](/none/i))_0x1193b0+=_0x888cad,_0x229b30+=_0x3f2e82;else{if(_0x27e4fd['match'](/horz/i)&&_0x27e4fd[_0x1c610d(0x299)](/vert/i))_0x1c610d(0x484)!==_0x1c610d(0x644)?(_0x1193b0+=_0x60d831[_0x1c610d(0xc58)]()?-_0x888cad:_0x888cad,_0x229b30+=_0x60d831['isActor']()?-_0x3f2e82:_0x3f2e82):this[_0x1c610d(0x8c2)]=new _0x24b198(_0xfcd6f4[_0x1c610d(0x259)],_0x3b5613[_0x1c610d(0x5ac)]);else{if(_0x27e4fd[_0x1c610d(0x299)](/horz/i))_0x1c610d(0xc9f)==='FilDH'?(_0x1193b0+=_0x60d831[_0x1c610d(0xc58)]()?-_0x888cad:_0x888cad,_0x229b30+=_0x3f2e82):_0x1f20bc['_subject'][_0x1c610d(0xa4e)]();else _0x27e4fd['match'](/vert/i)&&('fXovU'!=='tIuRM'?(_0x1193b0+=_0x888cad,_0x229b30+=_0x60d831[_0x1c610d(0xc58)]()?-_0x3f2e82:_0x3f2e82):_0x409216=_0x1c65d4['FrontViewSelect']);}}_0x60d831[_0x1c610d(0xba5)](_0x1193b0,_0x229b30,_0x22b133,_0x4ac786,_0x50b1bb,-0x1),_0x60d831[_0x1c610d(0x305)](_0x277b95);}}if(_0x4700ce)_0x4c7bb3['setWaitMode'](_0x1c610d(0x1b8));}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],'ActSeq_Movement_HomeMoveToTarget',_0x4d6f97=>{const _0x235505=_0x579382;if(!SceneManager[_0x235505(0xc65)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x235505(0x6dc)](_0x4d6f97,_0x4d6f97);const _0xd6d43f=$gameTemp[_0x235505(0x6c2)](),_0x299d0e=VisuMZ[_0x235505(0x7c1)](_0x4d6f97[_0x235505(0x6f7)]),_0x5e3196=VisuMZ[_0x235505(0x7c1)](_0x4d6f97[_0x235505(0x19f)]),_0x3bef05=_0x4d6f97[_0x235505(0x83a)];let _0x3916f4=_0x4d6f97['MeleeDistance'];const _0x2f886a=_0x4d6f97[_0x235505(0x1ec)],_0x2d1f3a=_0x4d6f97[_0x235505(0x906)],_0x533947=_0x4d6f97[_0x235505(0xb3d)],_0x42f04d=_0x4d6f97[_0x235505(0xafa)],_0x693258=_0x4d6f97['FaceDirection'],_0x286dee=_0x4d6f97[_0x235505(0x3a5)],_0x26a32a=_0x4d6f97[_0x235505(0xcb3)],_0x4dac78=_0x4d6f97['WaitForMovement'],_0x1691e4=Math[_0x235505(0xabb)](..._0x5e3196[_0x235505(0xb6e)](_0x258e81=>_0x258e81[_0x235505(0x368)]()[_0x235505(0xb43)]-_0x258e81[_0x235505(0x368)]()[_0x235505(0xbb8)]()/0x2)),_0x5b97b4=Math[_0x235505(0x1f1)](..._0x5e3196[_0x235505(0xb6e)](_0x7dc1ac=>_0x7dc1ac[_0x235505(0x368)]()[_0x235505(0xb43)]+_0x7dc1ac[_0x235505(0x368)]()[_0x235505(0xbb8)]()/0x2)),_0x187056=Math[_0x235505(0xabb)](..._0x5e3196[_0x235505(0xb6e)](_0x46e0df=>_0x46e0df[_0x235505(0x368)]()[_0x235505(0x339)]-_0x46e0df['battler']()[_0x235505(0x1d0)]())),_0x1ec9cf=Math[_0x235505(0x1f1)](..._0x5e3196[_0x235505(0xb6e)](_0x56b402=>_0x56b402['battler']()['_baseY'])),_0x33f67c=_0x5e3196[_0x235505(0xa1c)](_0x24e254=>_0x24e254[_0x235505(0xc58)]())[_0x235505(0x237)],_0x30c9d2=_0x5e3196[_0x235505(0xa1c)](_0x3000e5=>_0x3000e5[_0x235505(0xa31)]())[_0x235505(0x237)];let _0x101d36=0x0,_0x420534=0x0;if(_0x3bef05[_0x235505(0x299)](/front/i))_0x101d36=_0x33f67c>=_0x30c9d2?_0x1691e4:_0x5b97b4;else{if(_0x3bef05[_0x235505(0x299)](/middle/i))'YATHy'===_0x235505(0xbfc)?(_0x101d36=(_0x1691e4+_0x5b97b4)/0x2,_0x3916f4=-0x1):this[_0x235505(0x94f)]=_0x5c4292;else _0x3bef05['match'](/back/i)&&(_0x101d36=_0x33f67c>=_0x30c9d2?_0x5b97b4:_0x1691e4);}if(_0x3bef05[_0x235505(0x299)](/head/i))_0x235505(0x95d)===_0x235505(0x2b4)?(this[_0x235505(0xa3b)][_0x235505(0x772)](),this[_0x235505(0xa3b)]['active']&&this[_0x235505(0xa3b)][_0x235505(0x569)](),this['_itemWindow'][_0x235505(0x772)](),this['_itemWindow'][_0x235505(0x6a5)]&&this['_itemWindow']['show']()):_0x420534=_0x187056;else{if(_0x3bef05[_0x235505(0x299)](/center/i))_0x235505(0x9db)!==_0x235505(0x8fe)?_0x420534=(_0x187056+_0x1ec9cf)/0x2:(this['_logWindow']['push'](_0x235505(0x7c8)),this['_logWindow'][_0x235505(0x226)](_0x235505(0x3f1)));else{if(_0x3bef05[_0x235505(0x299)](/base/i)){if(_0x235505(0x7c2)===_0x235505(0x7c2))_0x420534=_0x1ec9cf;else{const _0x6da893=this[_0x235505(0xb27)]()[_0x235505(0x7f5)]||0x0;return _0x2e0079[_0x235505(0x4a0)][_0x6da893];}}}}if(!_0xd6d43f)return;for(const _0x4cc3dc of _0x299d0e){if(!_0x4cc3dc)continue;let _0x3952bf=_0x101d36,_0x3355fe=_0x420534;if(_0x2f886a[_0x235505(0x299)](/none/i))_0x3952bf+=_0x2d1f3a,_0x3355fe+=_0x533947;else{if(_0x2f886a[_0x235505(0x299)](/horz/i)&&_0x2f886a[_0x235505(0x299)](/vert/i))_0x3952bf+=_0x4cc3dc['isActor']()?-_0x2d1f3a:_0x2d1f3a,_0x3355fe+=_0x4cc3dc[_0x235505(0xc58)]()?-_0x533947:_0x533947;else{if(_0x2f886a[_0x235505(0x299)](/horz/i)){if(_0x235505(0x29c)===_0x235505(0x3e1))return this[_0x235505(0x86a)]>0x0;else _0x3952bf+=_0x4cc3dc['isActor']()?-_0x2d1f3a:_0x2d1f3a,_0x3355fe+=_0x533947;}else _0x2f886a[_0x235505(0x299)](/vert/i)&&(_0x3952bf+=_0x2d1f3a,_0x3355fe+=_0x4cc3dc[_0x235505(0xc58)]()?-_0x533947:_0x533947);}}_0x4cc3dc[_0x235505(0xba5)](_0x3952bf,_0x3355fe,_0x42f04d,_0x693258,_0x286dee,_0x3916f4),_0x4cc3dc[_0x235505(0x305)](_0x26a32a);}if(_0x4dac78)_0xd6d43f[_0x235505(0x9c8)](_0x235505(0x1b8));}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x481),_0x4023d4=>{const _0x3b4cc8=_0x579382;if(!SceneManager[_0x3b4cc8(0xc65)]())return;if(!$gameSystem[_0x3b4cc8(0xc10)]())return;VisuMZ['ConvertParams'](_0x4023d4,_0x4023d4);const _0x481183=VisuMZ[_0x3b4cc8(0x7c1)](_0x4023d4[_0x3b4cc8(0xbcd)]);let _0xf018d1=_0x4023d4[_0x3b4cc8(0x85a)][_0x3b4cc8(0x299)](/back/i);for(const _0x3710f3 of _0x481183){if('MGMVP'===_0x3b4cc8(0xa0b))return _0xee3f6c['Formula'][_0x3b4cc8(0xb95)](this,_0x840d59);else{if(!_0x3710f3)continue;if(_0x4023d4[_0x3b4cc8(0x85a)][_0x3b4cc8(0x299)](/rand/i))_0xf018d1=Math[_0x3b4cc8(0x541)](0x2);_0x3710f3[_0x3b4cc8(0x5e7)](!!_0xf018d1);}}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x34f),_0xa91a2c=>{const _0x29d1f8=_0x579382;if(!SceneManager[_0x29d1f8(0xc65)]())return;if(!$gameSystem[_0x29d1f8(0xc10)]())return;VisuMZ['ConvertParams'](_0xa91a2c,_0xa91a2c);const _0x56d5e9=VisuMZ['CreateActionSequenceTargets'](_0xa91a2c[_0x29d1f8(0xbcd)]);let _0xa2dd71=_0xa91a2c['Point'];const _0x2873fa=_0xa91a2c['FaceAway'];for(const _0x402477 of _0x56d5e9){if('QwYxl'==='QwYxl'){if(!_0x402477)continue;let _0x1ab4fd=_0x402477['battler']()[_0x29d1f8(0xb43)],_0x57a9a2=_0x402477[_0x29d1f8(0x368)]()[_0x29d1f8(0x339)];if(_0xa2dd71['match'](/home/i))_0x1ab4fd=_0x402477[_0x29d1f8(0x368)]()[_0x29d1f8(0x605)],_0x57a9a2=_0x402477[_0x29d1f8(0x368)]()[_0x29d1f8(0x486)];else{if(_0xa2dd71[_0x29d1f8(0x299)](/center/i))_0x1ab4fd=Graphics[_0x29d1f8(0x77e)]/0x2,_0x57a9a2=Graphics[_0x29d1f8(0x98e)]/0x2;else _0xa2dd71[_0x29d1f8(0x299)](/point (\d+), (\d+)/i)&&(_0x1ab4fd=Number(RegExp['$1']),_0x57a9a2=Number(RegExp['$2']));}_0x402477[_0x29d1f8(0xa76)](Math[_0x29d1f8(0x78b)](_0x1ab4fd),Math[_0x29d1f8(0x78b)](_0x57a9a2),!!_0x2873fa);}else{const _0x4169c5=_0x551b1d[_0x29d1f8(0x51f)](_0x5352ba[_0x29d1f8(0x259)]/0x3),_0x1d5130=this[_0x29d1f8(0x63d)]()?(_0xad264b[_0x29d1f8(0x259)]+_0x1dbce4[_0x29d1f8(0x77e)])/0x2-_0x4169c5:(_0x575dc2['width']-_0x2c7943[_0x29d1f8(0x77e)])/-0x2,_0x1ca2f3=this[_0x29d1f8(0x365)](),_0x45292d=_0x1ca2f3['y']+_0x1ca2f3[_0x29d1f8(0x5ac)],_0x4e6fe2=this['statusWindowRectBorderStyle'](),_0x5381a0=_0x4e6fe2['y']-_0x45292d;return new _0x57299e(_0x1d5130,_0x45292d,_0x4169c5,_0x5381a0);}}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x2fd),_0x31eead=>{const _0xd41ac=_0x579382;if(!SceneManager[_0xd41ac(0xc65)]())return;if(!$gameSystem[_0xd41ac(0xc10)]())return;VisuMZ['ConvertParams'](_0x31eead,_0x31eead);const _0x3b3676=VisuMZ[_0xd41ac(0x7c1)](_0x31eead[_0xd41ac(0x6f7)]),_0x21ddfe=VisuMZ[_0xd41ac(0x7c1)](_0x31eead[_0xd41ac(0x19f)]),_0x12a00c=_0x21ddfe[_0xd41ac(0xb6e)](_0x4ba54b=>_0x4ba54b&&_0x4ba54b[_0xd41ac(0x368)]()?_0x4ba54b[_0xd41ac(0x368)]()[_0xd41ac(0xb43)]:0x0)/(_0x21ddfe['length']||0x1),_0x3aa7a1=_0x21ddfe[_0xd41ac(0xb6e)](_0x493501=>_0x493501&&_0x493501['battler']()?_0x493501[_0xd41ac(0x368)]()[_0xd41ac(0x339)]:0x0)/(_0x21ddfe['length']||0x1),_0x886ff8=_0x31eead[_0xd41ac(0x4d1)];for(const _0x206237 of _0x3b3676){if(_0xd41ac(0x695)===_0xd41ac(0x695)){if(!_0x206237)continue;_0x206237['setBattlerFacePoint'](Math['round'](_0x12a00c),Math['round'](_0x3aa7a1),!!_0x886ff8);}else return this[_0xd41ac(0xa7f)]&&this['_enemy'][_0xd41ac(0x611)]();}}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xa8e),_0x577df7=>{const _0x1d5e7c=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1d5e7c(0x6dc)](_0x577df7,_0x577df7);const _0x1e6a6a=$gameTemp['getLastPluginCommandInterpreter'](),_0x1c147e=VisuMZ[_0x1d5e7c(0x7c1)](_0x577df7[_0x1d5e7c(0xbcd)]),_0xe24068=_0x577df7['Height'],_0x1cac71=_0x577df7['Duration'],_0x47ac54=_0x577df7['EasingType'],_0x3aecc5=_0x577df7[_0x1d5e7c(0x52b)];if(!_0x1e6a6a)return;for(const _0x536be8 of _0x1c147e){if(!_0x536be8)continue;_0x536be8[_0x1d5e7c(0x7da)](_0xe24068,_0x1cac71,_0x47ac54);}if(_0x3aecc5)_0x1e6a6a['setWaitMode'](_0x1d5e7c(0x948));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x212),_0x4bcf67=>{const _0x475074=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x475074(0x6dc)](_0x4bcf67,_0x4bcf67);const _0x1c3330=$gameTemp[_0x475074(0x6c2)]();if(!_0x1c3330)return;const _0x553ed6=VisuMZ['CreateActionSequenceTargets'](_0x4bcf67[_0x475074(0xbcd)]);for(const _0x530c40 of _0x553ed6){if(_0x475074(0x6fe)!==_0x475074(0x75e)){if(!_0x530c40)continue;_0x530c40[_0x475074(0x74d)]();}else this[_0x475074(0x685)]['svAnchorX']=_0x3a39db[_0x475074(0x448)][_0x475074(0x836)][_0x475074(0xb95)](this);}BattleManager[_0x475074(0x7c7)]&&BattleManager[_0x475074(0x7c7)][_0x475074(0xa4e)]();if(_0x4bcf67[_0x475074(0x7b3)])_0x1c3330[_0x475074(0x9c8)]('battleMove');}),PluginManager[_0x579382(0x510)](pluginData['name'],'ActSeq_Movement_Jump',_0x477612=>{const _0x33f2aa=_0x579382;if(!SceneManager[_0x33f2aa(0xc65)]())return;VisuMZ['ConvertParams'](_0x477612,_0x477612);const _0x1afe75=$gameTemp[_0x33f2aa(0x6c2)](),_0x1a28cc=VisuMZ['CreateActionSequenceTargets'](_0x477612[_0x33f2aa(0xbcd)]),_0x33e717=_0x477612[_0x33f2aa(0x1ee)],_0x1e8588=_0x477612[_0x33f2aa(0xafa)],_0x47fd95=_0x477612['WaitForJump'];if(!_0x1afe75)return;for(const _0x13aa36 of _0x1a28cc){if(_0x33f2aa(0xb45)===_0x33f2aa(0x72b))return _0x248cfc['BattleCore'][_0x33f2aa(0x27f)][_0x33f2aa(0x84a)]['CmdStyle'];else{if(!_0x13aa36)continue;_0x13aa36[_0x33f2aa(0x7d0)](_0x33e717,_0x1e8588);}}if(_0x47fd95)_0x1afe75[_0x33f2aa(0x9c8)](_0x33f2aa(0x402));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x641),_0x12420e=>{const _0x279436=_0x579382;if(!SceneManager[_0x279436(0xc65)]())return;if(!$gameSystem[_0x279436(0xc10)]())return;VisuMZ[_0x279436(0x6dc)](_0x12420e,_0x12420e);const _0x141e05=$gameTemp[_0x279436(0x6c2)](),_0x381943=VisuMZ[_0x279436(0x7c1)](_0x12420e[_0x279436(0xbcd)]),_0x126443=_0x12420e[_0x279436(0xafb)],_0x374680=_0x12420e[_0x279436(0x53a)],_0x28851a=_0x12420e[_0x279436(0xbc2)],_0x502d8e=_0x12420e[_0x279436(0xafa)],_0x35a149=_0x12420e['FaceDirection'],_0x5006ed=_0x12420e[_0x279436(0x3a5)],_0x157a88=_0x12420e[_0x279436(0xcb3)],_0x45a13f=_0x12420e[_0x279436(0x7b3)];if(!_0x141e05)return;for(const _0x59419d of _0x381943){if(_0x279436(0x28f)===_0x279436(0x23a))this[_0x279436(0xcbd)]=0x0;else{if(!_0x59419d)continue;let _0x5ed8ec=_0x374680,_0x55680b=_0x28851a;if(_0x126443[_0x279436(0x299)](/horz/i))_0x5ed8ec*=_0x59419d[_0x279436(0xc58)]()?-0x1:0x1;if(_0x126443['match'](/vert/i))_0x55680b*=_0x59419d[_0x279436(0xc58)]()?-0x1:0x1;_0x59419d[_0x279436(0x832)](_0x5ed8ec,_0x55680b,_0x502d8e,_0x35a149,_0x5006ed),_0x59419d[_0x279436(0x305)](_0x157a88);}}if(_0x45a13f)_0x141e05[_0x279436(0x9c8)](_0x279436(0x1b8));}),PluginManager['registerCommand'](pluginData['name'],_0x579382(0x2d9),_0x4898af=>{const _0x298086=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x298086(0xc10)]())return;VisuMZ[_0x298086(0x6dc)](_0x4898af,_0x4898af);const _0xd02c0=$gameTemp['getLastPluginCommandInterpreter'](),_0x1dbc3a=VisuMZ[_0x298086(0x7c1)](_0x4898af[_0x298086(0xbcd)]),_0x270871=_0x4898af['Destination'],_0x421f46=_0x4898af[_0x298086(0x1ec)],_0x5f15b7=_0x4898af[_0x298086(0x906)],_0x696134=_0x4898af[_0x298086(0xb3d)],_0x489e47=_0x4898af[_0x298086(0xafa)],_0x137fb8=_0x4898af['FaceDirection'],_0x766e25=_0x4898af['EasingType'],_0x25fcb8=_0x4898af[_0x298086(0xcb3)],_0x1ffa1d=_0x4898af[_0x298086(0x7b3)];if(!_0xd02c0)return;for(const _0x4560da of _0x1dbc3a){if(!_0x4560da)continue;let _0x2edd38=_0x4560da[_0x298086(0x368)]()[_0x298086(0xb43)],_0x48f8a1=_0x4560da['battler']()[_0x298086(0x339)];if(_0x270871[_0x298086(0x299)](/home/i))_0x298086(0x8f8)!==_0x298086(0x8f8)?this[_0x298086(0x3d0)]():(_0x2edd38=_0x4560da['battler']()[_0x298086(0x605)],_0x48f8a1=_0x4560da[_0x298086(0x368)]()[_0x298086(0x486)]);else{if(_0x270871[_0x298086(0x299)](/center/i)){if(_0x298086(0x99d)===_0x298086(0x40b))return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this['isForFriendBattleCore']():_0x16da7a['BattleCore'][_0x298086(0x8c4)][_0x298086(0xb95)](this);else _0x2edd38=Graphics['boxWidth']/0x2,_0x48f8a1=Graphics[_0x298086(0x98e)]/0x2;}else{if(_0x270871[_0x298086(0x299)](/point (\d+), (\d+)/i)){if(_0x298086(0x395)!==_0x298086(0x395))return this['_lineHeight']=this['_lineHeight']||_0x5a918c[_0x298086(0x448)][_0x298086(0x768)]()||0x24,this[_0x298086(0x908)]*0x4;else _0x2edd38=Number(RegExp['$1']),_0x48f8a1=Number(RegExp['$2']);}}}if(_0x421f46[_0x298086(0x299)](/none/i))_0x2edd38+=_0x5f15b7,_0x48f8a1+=_0x696134;else{if(_0x421f46[_0x298086(0x299)](/horz/i)&&_0x421f46['match'](/vert/i))_0x298086(0x1c2)==='aXsMY'?(_0x5dd66e+=_0x2b46b1['Actor'][_0x298086(0x906)]||0x0,_0x39fd14+=_0x177c89[_0x298086(0x7b6)][_0x298086(0xb3d)]||0x0):(_0x2edd38+=_0x4560da[_0x298086(0xc58)]()?-_0x5f15b7:_0x5f15b7,_0x48f8a1+=_0x4560da['isActor']()?-_0x696134:_0x696134);else{if(_0x421f46['match'](/horz/i))_0x2edd38+=_0x4560da[_0x298086(0xc58)]()?-_0x5f15b7:_0x5f15b7,_0x48f8a1+=_0x696134;else _0x421f46[_0x298086(0x299)](/vert/i)&&(_0x2edd38+=_0x5f15b7,_0x48f8a1+=_0x4560da['isActor']()?-_0x696134:_0x696134);}}_0x4560da[_0x298086(0x85b)](_0x2edd38,_0x48f8a1,_0x489e47,_0x137fb8,_0x766e25,-0x1),_0x4560da[_0x298086(0x305)](_0x25fcb8);}if(_0x1ffa1d)_0xd02c0['setWaitMode'](_0x298086(0x1b8));}),PluginManager[_0x579382(0x510)](pluginData['name'],'ActSeq_Movement_MoveToTarget',_0x4861d7=>{const _0x2b430a=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x2b430a(0xc10)]())return;VisuMZ[_0x2b430a(0x6dc)](_0x4861d7,_0x4861d7);const _0x4f61d2=$gameTemp[_0x2b430a(0x6c2)](),_0x5ad315=VisuMZ[_0x2b430a(0x7c1)](_0x4861d7[_0x2b430a(0x6f7)]),_0x3f8aea=VisuMZ[_0x2b430a(0x7c1)](_0x4861d7['Targets2']),_0x1e9f1b=_0x4861d7['TargetLocation'];let _0x5e3567=_0x4861d7['MeleeDistance'];const _0x34f439=_0x4861d7[_0x2b430a(0x1ec)],_0x2119fe=_0x4861d7[_0x2b430a(0x906)],_0x416b94=_0x4861d7[_0x2b430a(0xb3d)],_0x44f1f6=_0x4861d7['Duration'],_0x20971c=_0x4861d7['FaceDirection'],_0x424a52=_0x4861d7[_0x2b430a(0x3a5)],_0x2d886f=_0x4861d7[_0x2b430a(0xcb3)],_0x5e1ceb=_0x4861d7[_0x2b430a(0x7b3)],_0x4c8f7e=Math[_0x2b430a(0xabb)](..._0x3f8aea[_0x2b430a(0xb6e)](_0x27c761=>_0x27c761[_0x2b430a(0x368)]()[_0x2b430a(0xb43)]-_0x27c761['battler']()['mainSpriteWidth']()/0x2)),_0x436d20=Math[_0x2b430a(0x1f1)](..._0x3f8aea[_0x2b430a(0xb6e)](_0x441d15=>_0x441d15['battler']()[_0x2b430a(0xb43)]+_0x441d15[_0x2b430a(0x368)]()[_0x2b430a(0xbb8)]()/0x2)),_0x3e0054=Math[_0x2b430a(0xabb)](..._0x3f8aea[_0x2b430a(0xb6e)](_0xa2ce11=>_0xa2ce11['battler']()[_0x2b430a(0x339)]-_0xa2ce11[_0x2b430a(0x368)]()[_0x2b430a(0x1d0)]())),_0xa1cd76=Math[_0x2b430a(0x1f1)](..._0x3f8aea['map'](_0x14d05c=>_0x14d05c['battler']()[_0x2b430a(0x339)])),_0x363650=_0x3f8aea[_0x2b430a(0xa1c)](_0x44ed5a=>_0x44ed5a[_0x2b430a(0xc58)]())['length'],_0x324994=_0x3f8aea[_0x2b430a(0xa1c)](_0x383eda=>_0x383eda[_0x2b430a(0xa31)]())[_0x2b430a(0x237)];let _0x20d753=0x0,_0x3cdb9a=0x0;if(_0x1e9f1b['match'](/front/i))_0x2b430a(0x9cc)!==_0x2b430a(0x9cc)?this[_0x2b430a(0x305)](_0x2b430a(0x950)):_0x20d753=_0x363650>=_0x324994?_0x4c8f7e:_0x436d20;else{if(_0x1e9f1b[_0x2b430a(0x299)](/middle/i))'iQoTQ'!==_0x2b430a(0x384)?(_0x20d753=(_0x4c8f7e+_0x436d20)/0x2,_0x5e3567=-0x1):_0x325cae['BattleCore']['Window_BattleLog_displayMiss']['call'](this,_0x1cd540);else _0x1e9f1b[_0x2b430a(0x299)](/back/i)&&(_0x2b430a(0x433)!==_0x2b430a(0x883)?_0x20d753=_0x363650>=_0x324994?_0x436d20:_0x4c8f7e:this[_0x2b430a(0x219)]=null);}if(_0x1e9f1b[_0x2b430a(0x299)](/head/i))_0x3cdb9a=_0x3e0054;else{if(_0x1e9f1b['match'](/center/i))_0x3cdb9a=(_0x3e0054+_0xa1cd76)/0x2;else _0x1e9f1b[_0x2b430a(0x299)](/base/i)&&(_0x3cdb9a=_0xa1cd76);}if(!_0x4f61d2)return;for(const _0x1f716a of _0x5ad315){if(_0x2b430a(0x9a3)===_0x2b430a(0x496))this[_0x2b430a(0x443)]=0x0;else{if(!_0x1f716a)continue;let _0x1e4f24=_0x20d753,_0x278a61=_0x3cdb9a;if(_0x34f439[_0x2b430a(0x299)](/none/i))_0x1e4f24+=_0x2119fe,_0x278a61+=_0x416b94;else{if(_0x34f439[_0x2b430a(0x299)](/horz/i)&&_0x34f439[_0x2b430a(0x299)](/vert/i))_0x1e4f24+=_0x1f716a[_0x2b430a(0xc58)]()?-_0x2119fe:_0x2119fe,_0x278a61+=_0x1f716a[_0x2b430a(0xc58)]()?-_0x416b94:_0x416b94;else{if(_0x34f439[_0x2b430a(0x299)](/horz/i))_0x1e4f24+=_0x1f716a[_0x2b430a(0xc58)]()?-_0x2119fe:_0x2119fe,_0x278a61+=_0x416b94;else _0x34f439[_0x2b430a(0x299)](/vert/i)&&(_0x1e4f24+=_0x2119fe,_0x278a61+=_0x1f716a[_0x2b430a(0xc58)]()?-_0x416b94:_0x416b94);}}_0x1f716a[_0x2b430a(0x85b)](_0x1e4f24,_0x278a61,_0x44f1f6,_0x20971c,_0x424a52,_0x5e3567),_0x1f716a[_0x2b430a(0x305)](_0x2d886f);}}if(_0x5e1ceb)_0x4f61d2[_0x2b430a(0x9c8)](_0x2b430a(0x1b8));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Movement_Opacity',_0x2680ea=>{const _0x4d4f7c=_0x579382;if(!SceneManager[_0x4d4f7c(0xc65)]())return;VisuMZ['ConvertParams'](_0x2680ea,_0x2680ea);const _0x1a3ad5=$gameTemp[_0x4d4f7c(0x6c2)](),_0x219b55=VisuMZ['CreateActionSequenceTargets'](_0x2680ea[_0x4d4f7c(0xbcd)]),_0x27ad84=_0x2680ea[_0x4d4f7c(0x340)],_0x19fd4a=_0x2680ea[_0x4d4f7c(0xafa)],_0x25872b=_0x2680ea[_0x4d4f7c(0x3a5)],_0x590085=_0x2680ea[_0x4d4f7c(0x98a)];if(!_0x1a3ad5)return;for(const _0x5d5feb of _0x219b55){if(!_0x5d5feb)continue;_0x5d5feb[_0x4d4f7c(0x9cd)](_0x27ad84,_0x19fd4a,_0x25872b);}if(_0x590085)_0x1a3ad5[_0x4d4f7c(0x9c8)]('battleOpacity');}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xb8b),_0xaef6e9=>{const _0x2ac9c4=_0x579382;if(!SceneManager[_0x2ac9c4(0xc65)]())return;VisuMZ[_0x2ac9c4(0x6dc)](_0xaef6e9,_0xaef6e9);const _0x18e9fd=$gameTemp[_0x2ac9c4(0x6c2)](),_0x1db0c7=VisuMZ[_0x2ac9c4(0x7c1)](_0xaef6e9['Targets']),_0x829f54=_0xaef6e9[_0x2ac9c4(0x960)],_0x4fad5a=_0xaef6e9['ScaleY'],_0x5d059d=_0xaef6e9[_0x2ac9c4(0xafa)],_0x227a3a=_0xaef6e9[_0x2ac9c4(0x3a5)],_0x18b119=_0xaef6e9[_0x2ac9c4(0xb2d)];if(!_0x18e9fd)return;for(const _0x613495 of _0x1db0c7){if(!_0x613495)continue;_0x613495['growBattler'](_0x829f54,_0x4fad5a,_0x5d059d,_0x227a3a);}if(_0x18b119)_0x18e9fd['setWaitMode']('battleGrow');}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x893),_0x47d604=>{const _0x243320=_0x579382;if(!SceneManager[_0x243320(0xc65)]())return;VisuMZ['ConvertParams'](_0x47d604,_0x47d604);const _0x49d6d0=$gameTemp[_0x243320(0x6c2)](),_0x53cbb7=VisuMZ[_0x243320(0x7c1)](_0x47d604[_0x243320(0xbcd)]),_0x163d87=_0x47d604['SkewX'],_0x35d9b1=_0x47d604[_0x243320(0x5a4)],_0xcfe57e=_0x47d604[_0x243320(0xafa)],_0x16b8af=_0x47d604[_0x243320(0x3a5)],_0x2db47e=_0x47d604[_0x243320(0xa7a)];if(!_0x49d6d0)return;for(const _0x59a534 of _0x53cbb7){if(!_0x59a534)continue;_0x59a534[_0x243320(0x92e)](_0x163d87,_0x35d9b1,_0xcfe57e,_0x16b8af);}if(_0x2db47e)_0x49d6d0[_0x243320(0x9c8)](_0x243320(0x21a));}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x8b2),_0x1c465d=>{const _0x2075e4=_0x579382;if(!SceneManager[_0x2075e4(0xc65)]())return;VisuMZ['ConvertParams'](_0x1c465d,_0x1c465d);const _0x428540=$gameTemp[_0x2075e4(0x6c2)](),_0x1b1150=VisuMZ['CreateActionSequenceTargets'](_0x1c465d['Targets']),_0x4f4ec4=_0x1c465d[_0x2075e4(0xc0e)],_0xb21a6d=_0x1c465d['Duration'],_0xd104ce=_0x1c465d[_0x2075e4(0x3a5)],_0x83cf54=_0x1c465d['RevertAngle'],_0x4dfe4c=_0x1c465d['WaitForSpin'];if(!_0x428540)return;for(const _0x487c6a of _0x1b1150){if(!_0x487c6a)continue;_0x487c6a[_0x2075e4(0xaae)](_0x4f4ec4,_0xb21a6d,_0xd104ce,_0x83cf54);}if(_0x4dfe4c)_0x428540[_0x2075e4(0x9c8)](_0x2075e4(0x207));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_WaitForFloat',_0x23b127=>{const _0x31f7e5=_0x579382;if(!SceneManager[_0x31f7e5(0xc65)]())return;const _0x5f7e06=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5f7e06)return;_0x5f7e06['setWaitMode'](_0x31f7e5(0x948));}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x78f),_0x4d6092=>{const _0x225d16=_0x579382;if(!SceneManager['isSceneBattle']())return;const _0x4bca7e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4bca7e)return;_0x4bca7e['setWaitMode'](_0x225d16(0x402));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Movement_WaitForMovement',_0x56ba66=>{const _0x1297f2=_0x579382;if(!SceneManager['isSceneBattle']())return;const _0x44e3a6=$gameTemp[_0x1297f2(0x6c2)]();if(!_0x44e3a6)return;_0x44e3a6[_0x1297f2(0x9c8)](_0x1297f2(0x1b8));}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x9be),_0x27b338=>{const _0x4e1185=_0x579382;if(!SceneManager['isSceneBattle']())return;const _0x51b3d7=$gameTemp[_0x4e1185(0x6c2)]();if(!_0x51b3d7)return;_0x51b3d7['setWaitMode'](_0x4e1185(0x34a));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],'ActSeq_Movement_WaitForScale',_0x5df7b7=>{const _0x22210b=_0x579382;if(!SceneManager[_0x22210b(0xc65)]())return;const _0x55e6df=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x55e6df)return;_0x55e6df[_0x22210b(0x9c8)](_0x22210b(0x8e6));}),PluginManager['registerCommand'](pluginData['name'],_0x579382(0x71e),_0x24e02=>{const _0x4d2d4f=_0x579382;if(!SceneManager[_0x4d2d4f(0xc65)]())return;const _0x43d2c4=$gameTemp[_0x4d2d4f(0x6c2)]();if(!_0x43d2c4)return;_0x43d2c4[_0x4d2d4f(0x9c8)]('battleSpriteSkew');}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],'ActSeq_Movement_WaitForSpin',_0xd61765=>{const _0x2976cb=_0x579382;if(!SceneManager[_0x2976cb(0xc65)]())return;const _0x559a83=$gameTemp[_0x2976cb(0x6c2)]();if(!_0x559a83)return;_0x559a83['setWaitMode'](_0x2976cb(0x207));}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x731),_0x34e4f0=>{const _0x26269e=_0x579382;if(!SceneManager[_0x26269e(0xc65)]())return;if(!Imported[_0x26269e(0x1d7)])return;VisuMZ[_0x26269e(0x6dc)](_0x34e4f0,_0x34e4f0);const _0x123ecd=$gameTemp[_0x26269e(0x6c2)](),_0x2223b4=_0x34e4f0[_0x26269e(0xa7b)];if(!_0x123ecd)return;const _0x6de6fe=BattleManager[_0x26269e(0x748)];if(!_0x6de6fe)return;_0x6de6fe['createActionSequenceProjectile'](_0x34e4f0);if(_0x2223b4)_0x123ecd[_0x26269e(0x9c8)](_0x26269e(0xc60));}),PluginManager[_0x579382(0x510)](pluginData['name'],'ActSeq_Projectile_Icon',_0x29afa1=>{const _0x12ee17=_0x579382;if(!SceneManager[_0x12ee17(0xc65)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ['ConvertParams'](_0x29afa1,_0x29afa1);const _0x52d727=$gameTemp[_0x12ee17(0x6c2)](),_0x1b0f5a=_0x29afa1[_0x12ee17(0xa7b)];if(!_0x52d727)return;const _0x1230e8=BattleManager['_spriteset'];if(!_0x1230e8)return;_0x1230e8['createActionSequenceProjectile'](_0x29afa1);if(_0x1b0f5a)_0x52d727[_0x12ee17(0x9c8)](_0x12ee17(0xc60));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x3f2),_0x32e433=>{const _0x2e6b5d=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2e6b5d(0x1d7)])return;VisuMZ[_0x2e6b5d(0x6dc)](_0x32e433,_0x32e433);const _0x2877dd=$gameTemp[_0x2e6b5d(0x6c2)](),_0x1884b3=_0x32e433[_0x2e6b5d(0xa7b)];if(!_0x2877dd)return;const _0x404eb1=BattleManager[_0x2e6b5d(0x748)];if(!_0x404eb1)return;_0x404eb1[_0x2e6b5d(0x624)](_0x32e433);if(_0x1884b3)_0x2877dd[_0x2e6b5d(0x9c8)](_0x2e6b5d(0xc60));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xc19),_0x3996a1=>{const _0x4e7cdf=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4e7cdf(0xb4d)])return;VisuMZ[_0x4e7cdf(0x6dc)](_0x3996a1,_0x3996a1);const _0x296af9=$gameTemp[_0x4e7cdf(0x6c2)](),_0x32994d=_0x3996a1[_0x4e7cdf(0xa7a)];if(!_0x296af9)return;$gameScreen[_0x4e7cdf(0x505)](_0x3996a1[_0x4e7cdf(0x6d4)],_0x3996a1['SkewY'],_0x3996a1[_0x4e7cdf(0xafa)],_0x3996a1['EasingType']);if(_0x32994d)_0x296af9['setWaitMode'](_0x4e7cdf(0x4a8));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x2eb),_0x233fe6=>{const _0x1d97e8=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1d97e8(0xb4d)])return;VisuMZ[_0x1d97e8(0x6dc)](_0x233fe6,_0x233fe6);const _0x222171=$gameTemp[_0x1d97e8(0x6c2)](),_0x205919=_0x233fe6[_0x1d97e8(0xa7a)];if(!_0x222171)return;$gameScreen[_0x1d97e8(0x505)](0x0,0x0,_0x233fe6[_0x1d97e8(0xafa)],_0x233fe6[_0x1d97e8(0x3a5)]);if(_0x205919)_0x222171[_0x1d97e8(0x9c8)](_0x1d97e8(0x4a8));}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0xae3),_0x271b16=>{const _0x531a75=_0x579382;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x531a75(0xb4d)])return;const _0x521b54=$gameTemp[_0x531a75(0x6c2)]();if(!_0x521b54)return;_0x521b54[_0x531a75(0x9c8)](_0x531a75(0x4a8));}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x854),_0x1b797c=>{const _0x6ec39=_0x579382;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x6ec39(0x6dc)](_0x1b797c,_0x1b797c);const _0x58d039=$gameTemp[_0x6ec39(0x6c2)](),_0x1e7249=_0x1b797c[_0x6ec39(0x6f2)],_0x480cc3=_0x1b797c[_0x6ec39(0x792)];if(!_0x58d039)return;BattleManager[_0x6ec39(0x71a)]=_0x1e7249,BattleManager[_0x6ec39(0x6ea)]=BattleManager[_0x6ec39(0x9ab)]?BattleManager[_0x6ec39(0x9ab)][BattleManager['_targetIndex']]||null:null,BattleManager[_0x6ec39(0x6ea)]&&_0x480cc3['toUpperCase']()[_0x6ec39(0x8f5)]()!==_0x6ec39(0x9e1)&&_0x58d039['command119']([_0x480cc3]);}),PluginManager['registerCommand'](pluginData['name'],_0x579382(0x5fa),_0x4284ed=>{const _0x509866=_0x579382;if(!SceneManager[_0x509866(0xc65)]())return;VisuMZ['ConvertParams'](_0x4284ed,_0x4284ed);const _0x22794b=$gameTemp[_0x509866(0x6c2)](),_0x3816f5=_0x4284ed[_0x509866(0x792)];if(!_0x22794b)return;BattleManager[_0x509866(0x71a)]++,BattleManager[_0x509866(0x6ea)]=BattleManager[_0x509866(0x9ab)][BattleManager[_0x509866(0x71a)]]||null,BattleManager[_0x509866(0x6ea)]&&_0x3816f5[_0x509866(0x2ed)]()['trim']()!==_0x509866(0x9e1)&&(_0x509866(0xc15)!=='yifTP'?(_0x253ba9+=_0x4a4267[_0x509866(0xc58)]()?-_0x145fe2:_0x71ea7d,_0x2f40ca+=_0x5a2712[_0x509866(0xc58)]()?-_0x4cac07:_0x3018c8):_0x22794b['command119']([_0x3816f5]));}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x3c5),_0x4c5024=>{const _0x390de6=_0x579382;if(!SceneManager[_0x390de6(0xc65)]())return;VisuMZ[_0x390de6(0x6dc)](_0x4c5024,_0x4c5024);const _0x274ffb=$gameTemp['getLastPluginCommandInterpreter'](),_0x40bb13=_0x4c5024['JumpToLabel'];if(!_0x274ffb)return;BattleManager['_targetIndex']--,BattleManager[_0x390de6(0x6ea)]=BattleManager[_0x390de6(0x9ab)][BattleManager[_0x390de6(0x71a)]]||null,BattleManager[_0x390de6(0x6ea)]&&_0x40bb13[_0x390de6(0x2ed)]()[_0x390de6(0x8f5)]()!==_0x390de6(0x9e1)&&_0x274ffb[_0x390de6(0x57a)]([_0x40bb13]);}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0x330),_0x5875b1=>{const _0x42fa4a=_0x579382;if(!SceneManager[_0x42fa4a(0xc65)]())return;VisuMZ[_0x42fa4a(0x6dc)](_0x5875b1,_0x5875b1);const _0x4bed3e=$gameTemp['getLastPluginCommandInterpreter'](),_0x68e48b=_0x5875b1[_0x42fa4a(0x19c)],_0x3769b4=_0x5875b1[_0x42fa4a(0x792)];if(!_0x4bed3e)return;const _0x16a238=BattleManager[_0x42fa4a(0x71a)];for(;;){if('LCcJP'!==_0x42fa4a(0x5ad)){if(this[_0x42fa4a(0x94f)]!==_0x42fa4a(0x3ac))return this[_0x42fa4a(0xcb4)](_0x49b68f);else return _0x386d4d[_0x42fa4a(0x1dc)](this[_0x42fa4a(0x270)]())===_0x42fa4a(0x4a7)?_0x4534d1[_0x42fa4a(0x675)][_0x42fa4a(0x619)][_0x42fa4a(0xb95)](this,_0x150931):this['evalDamageFormulaBattleCore'](_0x5732c4);}else{BattleManager[_0x42fa4a(0x71a)]=Math[_0x42fa4a(0x541)](BattleManager[_0x42fa4a(0x9ab)][_0x42fa4a(0x237)]);if(!_0x68e48b)break;if(BattleManager[_0x42fa4a(0x71a)]!==_0x16a238)break;if(BattleManager[_0x42fa4a(0x9ab)]['length']<=0x1){if(_0x42fa4a(0x6b6)!==_0x42fa4a(0x6b6))_0x5ea1c5['BattleCore']['Window_ActorCommand_initialize']['call'](this,_0x470723),this[_0x42fa4a(0xb79)](_0x13ca3);else{BattleManager['_targetIndex']=0x0;break;}}}}BattleManager[_0x42fa4a(0x6ea)]=BattleManager['_allTargets'][BattleManager[_0x42fa4a(0x71a)]]||null,BattleManager[_0x42fa4a(0x6ea)]&&_0x3769b4[_0x42fa4a(0x2ed)]()[_0x42fa4a(0x8f5)]()!==_0x42fa4a(0x9e1)&&_0x4bed3e['command119']([_0x3769b4]);}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x5cb),_0x58b0aa=>{const _0x51be17=_0x579382;if(!SceneManager[_0x51be17(0xc65)]())return;VisuMZ[_0x51be17(0x6dc)](_0x58b0aa,_0x58b0aa);const _0xf65e78=VisuMZ[_0x51be17(0x7c1)](_0x58b0aa[_0x51be17(0xbcd)]);for(const _0xe7e0ea of _0xf65e78){if(!_0xe7e0ea)continue;if(!_0xe7e0ea[_0x51be17(0xc58)]())continue;_0xe7e0ea[_0x51be17(0x4a6)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x579382(0x86d),_0x2bf620=>{const _0x4c1169=_0x579382;if(!SceneManager[_0x4c1169(0xc65)]())return;VisuMZ[_0x4c1169(0x6dc)](_0x2bf620,_0x2bf620);const _0x2ef58f=$gameTemp[_0x4c1169(0x6c2)]();let _0x194176=![];const _0x2730c1=_0x2bf620[_0x4c1169(0x792)],_0x4a9090=VisuMZ[_0x4c1169(0x7c1)](_0x2bf620[_0x4c1169(0xbcd)]);for(const _0x450e16 of _0x4a9090){if(_0x4c1169(0x6bb)!=='fzPoV'){if(!_0x450e16)continue;if(!_0x450e16['isActor']())continue;_0x450e16[_0x4c1169(0xab0)]();if(_0x450e16['weapons']()['length']>0x0){if('xtcnZ'!==_0x4c1169(0x739)){if(_0x51b248[_0x4c1169(0xc58)]()&&!_0x59ec61[_0x4c1169(0xc10)]())return;const _0x354a4b=_0x2afc66[_0x4c1169(0x368)]();if(_0x354a4b&&_0x389507['isActor']())this['_battlerContainer'][_0x4c1169(0xbb0)](_0x354a4b);}else _0x194176=!![];}else _0x450e16[_0x4c1169(0x4a6)]();}else this[_0x4c1169(0xbcc)]['show'](),this[_0x4c1169(0xadb)][_0x4c1169(0x19b)](),this[_0x4c1169(0x4f2)][_0x4c1169(0x478)]();}if(_0x194176&&_0x2730c1[_0x4c1169(0x2ed)]()[_0x4c1169(0x8f5)]()!==_0x4c1169(0x9e1)){if(_0x4c1169(0x2c8)!==_0x4c1169(0xc40))_0x2ef58f[_0x4c1169(0x57a)]([_0x2730c1]);else{let _0x26a77a='battleUIOffsetY';if(this[_0x4c1169(0x44c)](_0x26a77a))return this[_0x4c1169(0x685)][_0x26a77a];return this[_0x4c1169(0x685)][_0x26a77a]=this[_0x4c1169(0x4ac)](this[_0x4c1169(0x6b7)]()),this['_cache'][_0x26a77a];}}}),PluginManager['registerCommand'](pluginData[_0x579382(0x1d8)],_0x579382(0xc55),_0x1e0e09=>{const _0xff1a88=_0x579382;if(!SceneManager[_0xff1a88(0xc65)]())return;VisuMZ[_0xff1a88(0x6dc)](_0x1e0e09,_0x1e0e09);let _0x40a4a8=_0x1e0e09[_0xff1a88(0x6c3)];_0x40a4a8--,_0x40a4a8=Math[_0xff1a88(0x1f1)](_0x40a4a8,0x0);const _0x4d182f=VisuMZ[_0xff1a88(0x7c1)](_0x1e0e09['Targets']);for(const _0x2265a0 of _0x4d182f){if(!_0x2265a0)continue;if(!_0x2265a0[_0xff1a88(0xc58)]())continue;_0x2265a0[_0xff1a88(0xca6)](_0x40a4a8);}}),PluginManager[_0x579382(0x510)](pluginData['name'],'ActSeq_Zoom_Scale',_0x1883c3=>{const _0x185f02=_0x579382;if(!SceneManager[_0x185f02(0xc65)]())return;if(!Imported[_0x185f02(0xb4d)])return;VisuMZ[_0x185f02(0x6dc)](_0x1883c3,_0x1883c3);const _0x1a26a6=$gameTemp['getLastPluginCommandInterpreter'](),_0x391831=_0x1883c3[_0x185f02(0x1e4)];if(!_0x1a26a6)return;$gameScreen[_0x185f02(0x9b4)](_0x1883c3[_0x185f02(0x544)],_0x1883c3[_0x185f02(0xafa)],_0x1883c3[_0x185f02(0x3a5)]);if(_0x391831)_0x1a26a6[_0x185f02(0x9c8)](_0x185f02(0x200));}),PluginManager[_0x579382(0x510)](pluginData['name'],_0x579382(0x328),_0x39afda=>{const _0x1dc641=_0x579382;if(!SceneManager[_0x1dc641(0xc65)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1dc641(0x6dc)](_0x39afda,_0x39afda);const _0x188f6c=$gameTemp[_0x1dc641(0x6c2)](),_0x49c596=_0x39afda[_0x1dc641(0x1e4)];if(!_0x188f6c)return;$gameScreen[_0x1dc641(0x9b4)](0x1,_0x39afda['Duration'],_0x39afda[_0x1dc641(0x3a5)]);if(_0x49c596)_0x188f6c['setWaitMode']('battleZoom');}),PluginManager[_0x579382(0x510)](pluginData[_0x579382(0x1d8)],_0x579382(0x3d9),_0x5c42ba=>{const _0x25f950=_0x579382;if(!SceneManager[_0x25f950(0xc65)]())return;if(!Imported[_0x25f950(0xb4d)])return;const _0x4a23b1=$gameTemp[_0x25f950(0x6c2)]();if(!_0x4a23b1)return;_0x4a23b1[_0x25f950(0x9c8)](_0x25f950(0x200));}),VisuMZ[_0x579382(0x675)][_0x579382(0xbbf)]=Scene_Boot['prototype'][_0x579382(0x6ca)],Scene_Boot['prototype']['onDatabaseLoaded']=function(){const _0x38900d=_0x579382;this[_0x38900d(0x59d)](),this[_0x38900d(0x9c6)](),this[_0x38900d(0x3d5)](),this[_0x38900d(0x6a6)](),VisuMZ['BattleCore'][_0x38900d(0xbbf)]['call'](this),this[_0x38900d(0x401)](),this[_0x38900d(0xc8d)](),this[_0x38900d(0x887)](),this[_0x38900d(0x472)]();},Scene_Boot[_0x579382(0x448)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x22eaef=_0x579382;if(VisuMZ[_0x22eaef(0x2fa)])return;this[_0x22eaef(0xbfe)](),this[_0x22eaef(0x7a0)](),this[_0x22eaef(0x5d5)]();},Scene_Boot['prototype'][_0x579382(0x59d)]=function(){const _0x3a1886=_0x579382,_0xe05b1c=$dataSystem['weaponTypes'][_0x3a1886(0x237)];for(let _0x3be093=0x0;_0x3be093<_0xe05b1c;_0x3be093++){if(_0x3a1886(0x64c)!=='qPyku')this[_0x3a1886(0x482)][_0x3a1886(0x490)](_0x8016c2);else{const _0x39cf7e=$dataSystem[_0x3a1886(0x4a0)][_0x3be093];if(_0x39cf7e)continue;$dataSystem['attackMotions'][_0x3be093]={'type':0x1,'weaponImageId':0x1};}}},Scene_Boot[_0x579382(0x448)][_0x579382(0x9c6)]=function(){const _0x3981ca=_0x579382,_0x11fe06=VisuMZ[_0x3981ca(0x675)][_0x3981ca(0x27f)];_0x11fe06[_0x3981ca(0x547)][_0x3981ca(0x304)]===undefined&&(_0x11fe06[_0x3981ca(0x547)][_0x3981ca(0x304)]='base'),_0x11fe06[_0x3981ca(0x7b6)]['SmoothImage']===undefined&&(_0x11fe06[_0x3981ca(0x7b6)]['SmoothImage']=![]),_0x11fe06[_0x3981ca(0x8ff)][_0x3981ca(0x879)]===undefined&&(_0x11fe06['Enemy'][_0x3981ca(0x879)]=!![]),_0x11fe06[_0x3981ca(0x7b6)][_0x3981ca(0xabd)]===undefined&&(_0x11fe06[_0x3981ca(0x7b6)]['PrioritySortActive']=![]),_0x11fe06[_0x3981ca(0x7b6)]['PrioritySortActors']===undefined&&(_0x3981ca(0x88d)===_0x3981ca(0x73a)?(_0x128a18+=_0x3d9470[_0x3981ca(0xc58)]()?-_0x1a6eb9:_0x30b608,_0x820309+=_0x1b5320[_0x3981ca(0xc58)]()?-_0x165ed6:_0x1f499a):_0x11fe06[_0x3981ca(0x7b6)][_0x3981ca(0x376)]=!![]);},VisuMZ[_0x579382(0x87d)]={},Scene_Boot['prototype'][_0x579382(0x3d5)]=function(){const _0x4591d1=_0x579382;for(const _0x1e4619 of VisuMZ[_0x4591d1(0x675)]['Settings'][_0x4591d1(0x547)][_0x4591d1(0x6a7)]){if(!_0x1e4619)continue;const _0x82923f=_0x1e4619[_0x4591d1(0xc22)][_0x4591d1(0x2ed)]()[_0x4591d1(0x8f5)]();VisuMZ['DamageStyles'][_0x82923f]=_0x1e4619;}},VisuMZ['BattleCore'][_0x579382(0x43f)]={},Scene_Boot[_0x579382(0x448)][_0x579382(0x6a6)]=function(){const _0x250545=_0x579382,_0x538e59=VisuMZ[_0x250545(0x675)][_0x250545(0x43f)],_0x42548c=_0x250545(0x881),_0x472bc6=[[_0x250545(0x56d),_0x250545(0xb9d)],['Post',_0x250545(0x3e2)]],_0x12ab9d=[[_0x250545(0x683),_0x250545(0x347)],['%1Damage%2JS',_0x250545(0xb0f)]],_0x2e22f1=[['',''],[_0x250545(0x9a2),_0x250545(0x6fa)],[_0x250545(0xb17),_0x250545(0x807)]];for(const _0x21180c of _0x12ab9d){for(const _0x2d12a2 of _0x2e22f1){for(const _0x1dcadf of _0x472bc6){const _0x213e2b=_0x21180c[0x0][_0x250545(0x7e1)](_0x1dcadf[0x0],_0x2d12a2[0x0]),_0x34869d=_0x21180c[0x1][_0x250545(0x7e1)](_0x1dcadf[0x1],_0x2d12a2[0x1])[_0x250545(0x8f5)](),_0x5276b5=new RegExp(_0x42548c['format'](_0x34869d),'i');_0x538e59[_0x213e2b]=_0x5276b5;}}}const _0x1f7574=[[_0x250545(0x3bb),_0x250545(0x457)],[_0x250545(0x873),_0x250545(0x217)]];for(const _0x315cb6 of _0x1f7574){for(const _0x450c1b of _0x472bc6){if(_0x250545(0xb2a)===_0x250545(0xb60))_0x38f271=(_0x344415+_0x42c1b4)/0x2;else{const _0x11332e=_0x315cb6[0x0][_0x250545(0x7e1)](_0x450c1b[0x0]),_0x42e6dc=_0x315cb6[0x1][_0x250545(0x7e1)](_0x450c1b[0x1]),_0x5d9666=new RegExp(_0x42548c[_0x250545(0x7e1)](_0x42e6dc),'i');_0x538e59[_0x11332e]=_0x5d9666;}}}const _0xf3d2f4=[['%1StartBattleJS',_0x250545(0x984)],[_0x250545(0x386),_0x250545(0xb2c)],[_0x250545(0xaa6),_0x250545(0xa42)],['BattleDefeatJS',_0x250545(0x931)],[_0x250545(0x6d2),_0x250545(0xaf8)],[_0x250545(0x94a),_0x250545(0x57f)],['%1StartTurnJS',_0x250545(0x93c)],['%1EndTurnJS',_0x250545(0x7b8)],[_0x250545(0x313),_0x250545(0xb88)]];for(const _0x2db2bf of _0xf3d2f4){for(const _0x30e8f4 of _0x472bc6){const _0x42015f=_0x2db2bf[0x0][_0x250545(0x7e1)](_0x30e8f4[0x0]),_0x14a573=_0x2db2bf[0x1]['format'](_0x30e8f4[0x1]),_0x4b5297=new RegExp(_0x42548c[_0x250545(0x7e1)](_0x14a573),'i');_0x538e59[_0x42015f]=_0x4b5297;}}},Scene_Boot[_0x579382(0x448)][_0x579382(0xbfe)]=function(){const _0x2ef42d=_0x579382,_0x3158f3=$dataSkills[_0x2ef42d(0xa96)]($dataItems);for(const _0x487830 of _0x3158f3){if(!_0x487830)continue;VisuMZ['BattleCore'][_0x2ef42d(0x22a)](_0x487830);}},Scene_Boot[_0x579382(0x448)][_0x579382(0x7a0)]=function(){const _0x25c911=_0x579382,_0x3f18f5=$dataActors[_0x25c911(0xa96)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x3e8fac of _0x3f18f5){if(!_0x3e8fac)continue;VisuMZ[_0x25c911(0x675)][_0x25c911(0xc75)](_0x3e8fac);}},Scene_Boot['prototype'][_0x579382(0xc8d)]=function(){const _0x2190fc=_0x579382,_0x213e48=VisuMZ[_0x2190fc(0x675)]['Settings'][_0x2190fc(0x4c5)][_0x2190fc(0xb70)],_0x85a55c=[];for(const _0x20d8a8 of _0x213e48){const _0x4bb324=$dataTroops[_0x20d8a8];if(_0x4bb324)_0x85a55c['push'](JsonEx[_0x2190fc(0x247)](_0x4bb324));}for(const _0x47399d of $dataTroops){if('GobhI'===_0x2190fc(0x4c7)){if(!_0x47399d)continue;for(const _0x52ca9f of _0x85a55c){if(_0x2190fc(0x512)!=='mhIZC'){const _0x298fb2=this[_0x2190fc(0x1b1)]();if(_0x298fb2[_0x2190fc(0x21e)]||_0x298fb2[_0x2190fc(0x63a)]){const _0x1826f7=_0x3f3282[_0x2190fc(0x247)](_0x298fb2);_0x1826f7[_0x2190fc(0x52c)]=![],_0x1826f7[_0x2190fc(0x3a7)]=0x0,this[_0x2190fc(0xb9f)][_0x2190fc(0x226)](_0x1826f7);}if(_0x298fb2[_0x2190fc(0x52c)]){const _0x43ab77=_0x1b7de0[_0x2190fc(0x247)](_0x298fb2);_0x43ab77[_0x2190fc(0x21e)]=![],_0x43ab77[_0x2190fc(0x63a)]=![],_0x43ab77[_0x2190fc(0x3a7)]=0x0,this[_0x2190fc(0xb9f)][_0x2190fc(0x226)](_0x43ab77);}if(_0x298fb2[_0x2190fc(0x3a7)]!==0x0){const _0x8902b9=_0x8de5b9[_0x2190fc(0x247)](_0x298fb2);_0x8902b9[_0x2190fc(0x21e)]=![],_0x8902b9[_0x2190fc(0x63a)]=![],_0x8902b9[_0x2190fc(0x52c)]=![],this['_damagePopupArray'][_0x2190fc(0x226)](_0x8902b9);}}else{if(_0x52ca9f['id']===_0x47399d['id'])continue;_0x47399d[_0x2190fc(0x993)]=_0x47399d[_0x2190fc(0x993)][_0x2190fc(0xa96)](_0x52ca9f[_0x2190fc(0x993)]);}}}else return this[_0x2190fc(0x9e2)]()[_0x2190fc(0x354)](_0x382d06=>_0x382d06[_0x2190fc(0xc81)]());}},Scene_Boot[_0x579382(0x448)][_0x579382(0x887)]=function(){const _0x585803=_0x579382,_0x37a479=VisuMZ['BattleCore'][_0x585803(0x27f)][_0x585803(0x4c5)];if(_0x37a479[_0x585803(0xb0e)]>0x0&&$dataCommonEvents[_0x37a479[_0x585803(0xb0e)]]){const _0x43ddbb=$dataCommonEvents[_0x37a479[_0x585803(0xb0e)]],_0x4e2662=_0x43ddbb['list']['length']-0x2,_0x2128ae=_0x43ddbb[_0x585803(0xc74)][_0x4e2662];if(_0x2128ae&&_0x2128ae[_0x585803(0xb10)]!==0xe6){if('rkoQf'===_0x585803(0x1aa))_0xc7f314[_0x585803(0xc9a)]=_0x4f0cae['_ptbActionCost']||{},_0x5194b8['_ptbActionCost']['priority']=0x0;else{const _0x354027={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x115e0b=_0x43ddbb['list'][_0x585803(0x7b0)]();_0x43ddbb[_0x585803(0xc74)][_0x585803(0xa7d)](_0x354027),_0x43ddbb[_0x585803(0xc74)][_0x585803(0xa7d)](_0x115e0b);}}}},Scene_Boot[_0x579382(0x448)]['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x2fcd59=_0x579382;VisuMZ[_0x2fcd59(0x675)][_0x2fcd59(0xbb3)](),VisuMZ['BattleCore'][_0x2fcd59(0x375)]($dataSkills),VisuMZ[_0x2fcd59(0x675)][_0x2fcd59(0x375)]($dataItems);},VisuMZ[_0x579382(0x675)][_0x579382(0xbb3)]=function(){const _0x51ccd8=_0x579382;VisuMZ[_0x51ccd8(0x675)]['_commonEventKey']={};for(const _0x44ed68 of $dataCommonEvents){if(!_0x44ed68)continue;if(_0x44ed68[_0x51ccd8(0x1d8)][_0x51ccd8(0x299)](/\[(.*)\]/i)){let _0x189089=String(RegExp['$1'])[_0x51ccd8(0xc42)](/,/g,'')['toUpperCase']()[_0x51ccd8(0x8f5)]();VisuMZ[_0x51ccd8(0x675)][_0x51ccd8(0x511)][_0x189089]=_0x44ed68['id'];}}},VisuMZ[_0x579382(0x675)][_0x579382(0x375)]=function(_0xe10576){const _0x58b5ca=_0x579382;for(const _0x12f96d of _0xe10576){if(_0x58b5ca(0x699)===_0x58b5ca(0x1fa))this[_0x58b5ca(0x7be)]='',this[_0x58b5ca(0x6b7)]()&&this[_0x58b5ca(0x6b7)]()['note'][_0x58b5ca(0x299)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x58b5ca(0x7be)]=_0x46de5e(_0x3d418e['$1']));else{if(!_0x12f96d)continue;VisuMZ[_0x58b5ca(0x675)][_0x58b5ca(0x975)](_0x12f96d);}}},VisuMZ[_0x579382(0x675)][_0x579382(0x975)]=function(_0x46bec5){const _0x301376=_0x579382;if(!_0x46bec5)return;if(!_0x46bec5['effects'])return;VisuMZ[_0x301376(0x675)][_0x301376(0x511)]=VisuMZ[_0x301376(0x675)][_0x301376(0x511)]||{};const _0x38fc03=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x2ad4a7=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x5bc259=[];const _0x220d9a=_0x46bec5[_0x301376(0x560)]['match'](_0x38fc03);if(_0x220d9a){if(_0x301376(0xaa2)===_0x301376(0xaa2)){for(const _0x4e05c1 of _0x220d9a){_0x4e05c1[_0x301376(0x299)](_0x38fc03);const _0x864225=String(RegExp['$1'])[_0x301376(0x810)](',')['map'](_0x3e03be=>String(_0x3e03be)[_0x301376(0x2ed)]()[_0x301376(0x8f5)]());_0x5bc259=_0x5bc259[_0x301376(0xa96)](_0x864225);}!_0x46bec5[_0x301376(0x560)][_0x301376(0x299)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x46bec5['note']+=_0x301376(0xcab));;}else return this[_0x301376(0xb01)]();}if(_0x46bec5[_0x301376(0x560)][_0x301376(0x299)](_0x2ad4a7)){if(_0x301376(0xaa0)!=='QoDPx'){const _0xcf383b=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x301376(0xb6e)](_0xc28186=>String(_0xc28186)[_0x301376(0x2ed)]()['trim']());_0x5bc259=_0x5bc259[_0x301376(0xa96)](_0xcf383b);if(!_0x46bec5['note'][_0x301376(0x299)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x301376(0xaf5)===_0x301376(0xaf5))_0x46bec5[_0x301376(0x560)]+='<CUSTOM\x20ACTION\x20SEQUENCE>';else{const _0x5e8fb6=this[_0x301376(0x270)]()['scope'];return _0x5e8fb6[_0x301376(0x299)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);}};}else _0x2ae181['push'](_0x3caa7c['trueRandomTarget']());}for(const _0x2871a3 of _0x5bc259){if(_0x301376(0x364)==='HEfhl')return _0x44a228[_0x301376(0x675)][_0x301376(0x27f)]['PartyCmd'][_0x301376(0x776)];else{if(VisuMZ[_0x301376(0x675)][_0x301376(0x511)][_0x2871a3]){if(_0x301376(0x666)===_0x301376(0x81b))this[_0x301376(0x3e6)](_0x2c2f11)?_0x299450[_0x301376(0x3b7)]():this['usePremadeActionSequence'](_0x50ce69,_0x1e39ad,_0x325852);else{const _0x23c2ee=VisuMZ[_0x301376(0x675)]['_commonEventKey'][_0x2871a3],_0x4a4cc8={'code':0x2c,'dataId':_0x23c2ee,'value1':0x1,'value2':0x0};_0x46bec5[_0x301376(0x87e)][_0x301376(0x226)](_0x4a4cc8);}}}}},Scene_Boot[_0x579382(0x448)]['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x2dc6ba=_0x579382,_0x26a747=$dataSkills['concat']($dataItems);for(const _0x5dc73a of _0x26a747){if(_0x2dc6ba(0x9b6)===_0x2dc6ba(0x79a))_0xd0054e[_0x2dc6ba(0x448)]['performDamage'][_0x2dc6ba(0xb95)](this),this[_0x2dc6ba(0x4c9)]()&&this[_0x2dc6ba(0x611)]()&&this[_0x2dc6ba(0x305)](_0x2dc6ba(0x210)),_0x624d8a[_0x2dc6ba(0x84e)]();else{if(!_0x5dc73a)continue;VisuMZ[_0x2dc6ba(0x675)]['Parse_Notetags_Targets'](_0x5dc73a);}}},VisuMZ['BattleCore'][_0x579382(0x668)]=VisuMZ[_0x579382(0x668)],VisuMZ['ParseActorNotetags']=function(_0x14fec6){const _0x4fed3c=_0x579382;if(VisuMZ['BattleCore'][_0x4fed3c(0x668)]){if(_0x4fed3c(0x360)!==_0x4fed3c(0x360)){if(_0xfd0866[_0x4fed3c(0x630)]()){if(this[_0x4fed3c(0x40d)]()<=0x0)return;}else{if(_0x458c0f['turnCount']()<=0x0)return;}}else VisuMZ[_0x4fed3c(0x675)][_0x4fed3c(0x668)][_0x4fed3c(0xb95)](this,_0x14fec6);}VisuMZ[_0x4fed3c(0x675)][_0x4fed3c(0xc75)](_0x14fec6);},VisuMZ[_0x579382(0x675)]['ParseClassNotetags']=VisuMZ['ParseClassNotetags'],VisuMZ[_0x579382(0x1b3)]=function(_0x39ed69){const _0x48f29d=_0x579382;VisuMZ[_0x48f29d(0x675)][_0x48f29d(0x1b3)]&&VisuMZ['BattleCore'][_0x48f29d(0x1b3)][_0x48f29d(0xb95)](this,_0x39ed69),VisuMZ['BattleCore'][_0x48f29d(0xc75)](_0x39ed69);},VisuMZ['BattleCore']['ParseSkillNotetags']=VisuMZ[_0x579382(0xc86)],VisuMZ['ParseSkillNotetags']=function(_0x2e5984){const _0x2f49ed=_0x579382;VisuMZ[_0x2f49ed(0x675)]['ParseSkillNotetags']&&(_0x2f49ed(0xc30)!==_0x2f49ed(0xa09)?VisuMZ[_0x2f49ed(0x675)][_0x2f49ed(0xc86)][_0x2f49ed(0xb95)](this,_0x2e5984):(_0x49ad1a['BattleCore'][_0x2f49ed(0x1f5)]['call'](this),this[_0x2f49ed(0xbe5)]())),VisuMZ[_0x2f49ed(0x675)]['Parse_Notetags_Action'](_0x2e5984),VisuMZ['BattleCore'][_0x2f49ed(0xc45)](_0x2e5984);},VisuMZ['BattleCore']['ParseItemNotetags']=VisuMZ[_0x579382(0x559)],VisuMZ[_0x579382(0x559)]=function(_0x486ebd){const _0x3fed77=_0x579382;if(VisuMZ['BattleCore'][_0x3fed77(0x559)]){if(_0x3fed77(0x7ac)===_0x3fed77(0x928))return'#%1'[_0x3fed77(0x7e1)](_0x42a9d8(_0x50de43['$1']));else VisuMZ['BattleCore'][_0x3fed77(0x559)][_0x3fed77(0xb95)](this,_0x486ebd);}VisuMZ[_0x3fed77(0x675)][_0x3fed77(0x22a)](_0x486ebd),VisuMZ[_0x3fed77(0x675)][_0x3fed77(0xc45)](_0x486ebd);},VisuMZ[_0x579382(0x675)][_0x579382(0x598)]=VisuMZ[_0x579382(0x598)],VisuMZ[_0x579382(0x598)]=function(_0x12f48a){const _0x5ebf60=_0x579382;VisuMZ['BattleCore'][_0x5ebf60(0x598)]&&VisuMZ['BattleCore'][_0x5ebf60(0x598)][_0x5ebf60(0xb95)](this,_0x12f48a),VisuMZ[_0x5ebf60(0x675)][_0x5ebf60(0xc75)](_0x12f48a);},VisuMZ[_0x579382(0x675)][_0x579382(0x7d6)]=VisuMZ['ParseArmorNotetags'],VisuMZ['ParseArmorNotetags']=function(_0x2ca570){const _0x59f351=_0x579382;if(VisuMZ['BattleCore'][_0x59f351(0x7d6)]){if(_0x59f351(0x432)===_0x59f351(0xa9e)){let _0x32034c=_0x23d1fc[_0x59f351(0x675)][_0x59f351(0x3e9)][_0x59f351(0xb95)](this);const _0x29c320=_0x3f1075[_0x59f351(0x675)][_0x59f351(0x27f)];if(_0x29c320[_0x59f351(0x6d6)][_0x59f351(0x57d)]&&_0x29c320[_0x59f351(0x6d6)][_0x59f351(0xb12)])_0x32034c+=0x2;if(_0x29c320['HpGauge'][_0x59f351(0x57d)]&&_0x29c320['HpGauge'][_0x59f351(0xb12)])_0x32034c+=0x1;return _0x32034c;}else VisuMZ['BattleCore'][_0x59f351(0x7d6)][_0x59f351(0xb95)](this,_0x2ca570);}VisuMZ[_0x59f351(0x675)][_0x59f351(0xc75)](_0x2ca570);},VisuMZ['BattleCore'][_0x579382(0xb22)]=VisuMZ[_0x579382(0xb22)],VisuMZ['ParseEnemyNotetags']=function(_0x45bb66){const _0x12ac83=_0x579382;VisuMZ[_0x12ac83(0x675)][_0x12ac83(0xb22)]&&VisuMZ[_0x12ac83(0x675)][_0x12ac83(0xb22)]['call'](this,_0x45bb66),VisuMZ[_0x12ac83(0x675)]['Parse_Notetags_TraitObjects'](_0x45bb66);},VisuMZ['BattleCore'][_0x579382(0x2a6)]=VisuMZ[_0x579382(0x2a6)],VisuMZ[_0x579382(0x2a6)]=function(_0xab383b){const _0x30fee8=_0x579382;VisuMZ['BattleCore']['ParseStateNotetags']&&VisuMZ[_0x30fee8(0x675)]['ParseStateNotetags'][_0x30fee8(0xb95)](this,_0xab383b),VisuMZ[_0x30fee8(0x675)][_0x30fee8(0xc75)](_0xab383b);},VisuMZ[_0x579382(0x675)]['Parse_Notetags_Action']=function(_0x221fbe){const _0x523b74=_0x579382,_0x48a516=[_0x523b74(0x823),'PostApplyJS',_0x523b74(0x2ef),_0x523b74(0x6a1),_0x523b74(0x68d),_0x523b74(0x2c4),_0x523b74(0xba6),'PostEndActionJS'];for(const _0x48431c of _0x48a516){VisuMZ[_0x523b74(0x675)]['createJS'](_0x221fbe,_0x48431c);}const _0x22455f=_0x221fbe[_0x523b74(0x560)];_0x22455f[_0x523b74(0x299)](/<ALWAYS CRITICAL/i)&&('qZwOT'===_0x523b74(0xac4)?this[_0x523b74(0xbb0)](this['_uiContainer']):_0x221fbe['damage'][_0x523b74(0x8df)]=!![]),_0x22455f[_0x523b74(0x299)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x221fbe[_0x523b74(0x3cb)]=Math['max'](0x1,Number(RegExp['$1']))),_0x22455f[_0x523b74(0x299)](/<TARGET:[ ](.*)>/i)&&(_0x221fbe['scope']=String(RegExp['$1'])[_0x523b74(0x2ed)]()['trim']());},VisuMZ['BattleCore'][_0x579382(0xc75)]=function(_0x2e21e7){const _0x118201=_0x579382,_0x4429b4=[_0x118201(0x3d7),_0x118201(0x68b),_0x118201(0xa14),_0x118201(0xc64),_0x118201(0xc7d),_0x118201(0x4be),'PreDamageAsTargetJS','PostDamageAsTargetJS',_0x118201(0x68d),_0x118201(0x2c4),_0x118201(0xba6),_0x118201(0xc4d),_0x118201(0x9ec),'PostStartBattleJS',_0x118201(0xac8),'PostEndBattleJS','BattleVictoryJS',_0x118201(0x288),_0x118201(0x6d2),_0x118201(0x94a),'PreStartTurnJS',_0x118201(0x2ba),_0x118201(0x80d),_0x118201(0x1d2),_0x118201(0x4e8),_0x118201(0x7fe)];for(const _0x27a8b8 of _0x4429b4){VisuMZ[_0x118201(0x675)][_0x118201(0x1d9)](_0x2e21e7,_0x27a8b8);}},VisuMZ[_0x579382(0x675)]['Parse_Notetags_Targets']=function(_0x16150a){const _0x543ee8=_0x579382,_0x4cec79=_0x16150a[_0x543ee8(0x560)];if(_0x4cec79[_0x543ee8(0x299)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x5e5cae=String(RegExp['$1']),_0x5dc026=VisuMZ[_0x543ee8(0x675)][_0x543ee8(0x6da)](_0x16150a,_0x543ee8(0xbcd));VisuMZ['BattleCore'][_0x543ee8(0x3ef)](_0x5e5cae,_0x5dc026);}if(_0x4cec79[_0x543ee8(0x299)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x18e867=String(RegExp['$1']),_0x218bcc=VisuMZ[_0x543ee8(0x675)][_0x543ee8(0x6da)](_0x16150a,'CommandVisible');VisuMZ['BattleCore'][_0x543ee8(0x421)](_0x18e867,_0x218bcc);}},VisuMZ[_0x579382(0x675)]['JS']={},VisuMZ[_0x579382(0x675)]['createJS']=function(_0x2fb2c7,_0x5b5c22){const _0x4c21db=_0x579382,_0x1545bf=_0x2fb2c7[_0x4c21db(0x560)];if(_0x1545bf[_0x4c21db(0x299)](VisuMZ[_0x4c21db(0x675)]['RegExp'][_0x5b5c22])){const _0x3a14ed=RegExp['$1'],_0x22b7e8=_0x4c21db(0x369)['format'](_0x3a14ed),_0x1f09c7=VisuMZ[_0x4c21db(0x675)][_0x4c21db(0x6da)](_0x2fb2c7,_0x5b5c22);VisuMZ[_0x4c21db(0x675)]['JS'][_0x1f09c7]=new Function(_0x22b7e8);}},VisuMZ['BattleCore'][_0x579382(0x6da)]=function(_0x520cb1,_0x1d4cf4){const _0x39dccd=_0x579382;if(VisuMZ[_0x39dccd(0x6da)])return VisuMZ[_0x39dccd(0x6da)](_0x520cb1,_0x1d4cf4);let _0x33efef='';if($dataActors[_0x39dccd(0xb2b)](_0x520cb1))_0x33efef='Actor-%1-%2'[_0x39dccd(0x7e1)](_0x520cb1['id'],_0x1d4cf4);if($dataClasses['includes'](_0x520cb1))_0x33efef=_0x39dccd(0x8ce)[_0x39dccd(0x7e1)](_0x520cb1['id'],_0x1d4cf4);if($dataSkills['includes'](_0x520cb1))_0x33efef='Skill-%1-%2'[_0x39dccd(0x7e1)](_0x520cb1['id'],_0x1d4cf4);if($dataItems[_0x39dccd(0xb2b)](_0x520cb1))_0x33efef=_0x39dccd(0x198)[_0x39dccd(0x7e1)](_0x520cb1['id'],_0x1d4cf4);if($dataWeapons[_0x39dccd(0xb2b)](_0x520cb1))_0x33efef=_0x39dccd(0x604)['format'](_0x520cb1['id'],_0x1d4cf4);if($dataArmors[_0x39dccd(0xb2b)](_0x520cb1))_0x33efef=_0x39dccd(0x1a5)[_0x39dccd(0x7e1)](_0x520cb1['id'],_0x1d4cf4);if($dataEnemies[_0x39dccd(0xb2b)](_0x520cb1))_0x33efef='Enemy-%1-%2'[_0x39dccd(0x7e1)](_0x520cb1['id'],_0x1d4cf4);if($dataStates['includes'](_0x520cb1))_0x33efef=_0x39dccd(0x4b9)[_0x39dccd(0x7e1)](_0x520cb1['id'],_0x1d4cf4);return _0x33efef;},VisuMZ[_0x579382(0x675)][_0x579382(0x3ef)]=function(_0x39150e,_0x3e43ad){const _0x27db43=_0x579382,_0x43e840=_0x27db43(0xab1)[_0x27db43(0x7e1)](_0x39150e);VisuMZ['BattleCore']['JS'][_0x3e43ad]=new Function(_0x43e840);},VisuMZ[_0x579382(0x675)][_0x579382(0x421)]=function(_0x3892fc,_0x32b286){const _0x19c9e9=_0x579382,_0x3301f0=_0x19c9e9(0xb15)[_0x19c9e9(0x7e1)](_0x3892fc);VisuMZ[_0x19c9e9(0x675)]['JS'][_0x32b286]=new Function(_0x3301f0);},TextManager[_0x579382(0x67a)]=VisuMZ[_0x579382(0x675)][_0x579382(0x27f)]['PartyCmd'][_0x579382(0x973)],TextManager[_0x579382(0x8ee)]=VisuMZ[_0x579382(0x675)][_0x579382(0x27f)][_0x579382(0x6d6)]['StartName'],TextManager[_0x579382(0x342)]=VisuMZ['BattleCore']['Settings'][_0x579382(0x6d6)][_0x579382(0x2cf)],TextManager[_0x579382(0x7b2)]=VisuMZ[_0x579382(0x675)][_0x579382(0x27f)][_0x579382(0x3f0)]['Name'],ColorManager[_0x579382(0xa6e)]=function(_0x5a8694){const _0xec6e7=_0x579382;return _0x5a8694=String(_0x5a8694),_0x5a8694[_0xec6e7(0x299)](/#(.*)/i)?_0xec6e7(0x4de)[_0xec6e7(0x7e1)](String(RegExp['$1'])):this[_0xec6e7(0x737)](Number(_0x5a8694));},DataManager[_0x579382(0x1dc)]=function(_0x1a2da7){const _0x257adf=_0x579382;if(_0x1a2da7[_0x257adf(0x560)][_0x257adf(0x299)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x257adf(0x8c8)==='MtZPj'){const _0x3cdac2=String(RegExp['$1'])[_0x257adf(0x2ed)]()[_0x257adf(0x8f5)]();if(_0x3cdac2==='MANUAL')return _0x257adf(0x4a7);if(VisuMZ[_0x257adf(0x87d)][_0x3cdac2])return _0x3cdac2;}else return this[_0x257adf(0x1c7)](_0x43d656);}const _0x16e891=VisuMZ[_0x257adf(0x675)]['Settings'][_0x257adf(0x547)][_0x257adf(0x732)]['toUpperCase']()['trim']();if(VisuMZ[_0x257adf(0x87d)][_0x16e891])return _0x16e891;return _0x257adf(0x4a7);},DataManager['getStypeIdWithName']=function(_0x1aa7a5){const _0x9bb522=_0x579382;_0x1aa7a5=_0x1aa7a5['toUpperCase']()[_0x9bb522(0x8f5)](),this[_0x9bb522(0x8bf)]=this[_0x9bb522(0x8bf)]||{};if(this[_0x9bb522(0x8bf)][_0x1aa7a5])return this[_0x9bb522(0x8bf)][_0x1aa7a5];for(let _0x4f4d90=0x1;_0x4f4d90<0x64;_0x4f4d90++){if('WdBlt'===_0x9bb522(0x350)){if(!$dataSystem['skillTypes'][_0x4f4d90])continue;let _0x3521aa=$dataSystem[_0x9bb522(0x706)][_0x4f4d90][_0x9bb522(0x2ed)]()['trim']();_0x3521aa=_0x3521aa[_0x9bb522(0xc42)](/\x1I\[(\d+)\]/gi,''),_0x3521aa=_0x3521aa[_0x9bb522(0xc42)](/\\I\[(\d+)\]/gi,''),this[_0x9bb522(0x8bf)][_0x3521aa]=_0x4f4d90;}else this['startMotion'](_0x9bb522(0x9b1));}return this[_0x9bb522(0x8bf)][_0x1aa7a5]||0x0;},DataManager['getSkillIdWithName']=function(_0x32fcf7){const _0xc0604c=_0x579382;_0x32fcf7=_0x32fcf7[_0xc0604c(0x2ed)]()['trim'](),this[_0xc0604c(0x565)]=this[_0xc0604c(0x565)]||{};if(this['_skillIDs'][_0x32fcf7])return this[_0xc0604c(0x565)][_0x32fcf7];for(const _0x3a8b2e of $dataSkills){if(_0xc0604c(0xbac)===_0xc0604c(0x6bf))_0xc05fd2['BattleCore'][_0xc0604c(0x222)][_0xc0604c(0xb95)](this);else{if(!_0x3a8b2e)continue;this[_0xc0604c(0x565)][_0x3a8b2e[_0xc0604c(0x1d8)]['toUpperCase']()[_0xc0604c(0x8f5)]()]=_0x3a8b2e['id'];}}return this['_skillIDs'][_0x32fcf7]||0x0;},DataManager[_0x579382(0x749)]=function(_0x4bf2eb){const _0x5c1943=_0x579382;_0x4bf2eb=_0x4bf2eb[_0x5c1943(0x2ed)]()['trim'](),this['_enemyIDs']=this[_0x5c1943(0x83c)]||{};if(this[_0x5c1943(0x83c)][_0x4bf2eb])return this[_0x5c1943(0x83c)][_0x4bf2eb];for(const _0x271275 of $dataEnemies){if(_0x5c1943(0x2bc)===_0x5c1943(0x3e0))_0x49af51[_0x5c1943(0x675)]['ParseActorNotetags']&&_0x1fabb8[_0x5c1943(0x675)][_0x5c1943(0x668)]['call'](this,_0x42c406),_0x607e16[_0x5c1943(0x675)][_0x5c1943(0xc75)](_0x35e565);else{if(!_0x271275)continue;this['_enemyIDs'][_0x271275['name']['toUpperCase']()[_0x5c1943(0x8f5)]()]=_0x271275['id'];}}return this[_0x5c1943(0x83c)][_0x4bf2eb]||0x0;},DataManager[_0x579382(0x413)]=function(_0x158fb5){const _0x60387f=_0x579382;_0x158fb5=_0x158fb5[_0x60387f(0x2ed)]()['trim'](),this[_0x60387f(0x8f0)]=this['_wtypeIDs']||{};if(this[_0x60387f(0x8f0)][_0x158fb5])return this['_wtypeIDs'][_0x158fb5];for(let _0x2f9472=0x1;_0x2f9472<0x64;_0x2f9472++){if(_0x60387f(0x99e)==='NJPPC'){if(!$dataSystem[_0x60387f(0x3f7)][_0x2f9472])continue;let _0x3f498f=$dataSystem['weaponTypes'][_0x2f9472][_0x60387f(0x2ed)]()['trim']();_0x3f498f=_0x3f498f[_0x60387f(0xc42)](/\x1I\[(\d+)\]/gi,''),_0x3f498f=_0x3f498f[_0x60387f(0xc42)](/\\I\[(\d+)\]/gi,''),this[_0x60387f(0x8f0)][_0x3f498f]=_0x2f9472;}else{_0x1ef4c2['prototype'][_0x60387f(0xcb7)][_0x60387f(0xb95)](this);const _0x5899e3=this[_0x60387f(0x6f5)]['svBattlerName']();this[_0x60387f(0xc2a)]!==_0x5899e3&&(this[_0x60387f(0xc2a)]=_0x5899e3,this[_0x60387f(0xc5d)][_0x60387f(0x8c2)]=_0x49f52d['loadSvActor'](_0x5899e3)),this[_0x60387f(0xc5d)]&&this[_0x60387f(0xc5d)]['bitmap']&&this[_0x60387f(0x309)]&&(this[_0x60387f(0xc5d)][_0x60387f(0x8c2)][_0x60387f(0x2be)]!==this[_0x60387f(0x309)][_0x60387f(0x4fa)]()&&(this[_0x60387f(0xc5d)]['bitmap']['smooth']=this[_0x60387f(0x309)][_0x60387f(0x4fa)]()));}}return this['_wtypeIDs'][_0x60387f(0x453)]=0x0,this['_wtypeIDs'][_0x158fb5]||0x0;},DataManager[_0x579382(0xb6c)]=function(_0x2e9e33){const _0x5e96f4=_0x579382,_0x5f5d2a=_0x5e96f4(0xca2);let _0x4ef222=_0x2e9e33[_0x5e96f4(0x4b0)],_0x5bd79b=_0x2e9e33['name'];const _0x3eec47=_0x2e9e33[_0x5e96f4(0x560)];return _0x3eec47[_0x5e96f4(0x299)](/<DISPLAY ICON: (\d+)>/i)&&(_0x5e96f4(0xbd7)==='Elwix'?_0x4ef222=Number(RegExp['$1']):_0x1d7eb7['stepForward']()),_0x3eec47[_0x5e96f4(0x299)](/<DISPLAY TEXT: (.*)>/i)&&(_0x5bd79b=String(RegExp['$1'])),_0x5f5d2a[_0x5e96f4(0x7e1)](_0x4ef222,_0x5bd79b);},DataManager[_0x579382(0x6c7)]=function(_0x39aa1a){const _0x27da25=_0x579382;if(_0x39aa1a[_0x27da25(0x560)][_0x27da25(0x299)](/<COMMAND TEXT: (.*)>/i))return _0x27da25(0x8a0)!==_0x27da25(0x8a0)?this['isForRandomBattleCore']():String(RegExp['$1']);else{if(_0x27da25(0x1a9)===_0x27da25(0x5c0))this[_0x27da25(0xc67)]();else return _0x39aa1a['name'];}},DataManager[_0x579382(0x3b9)]=function(_0x424e19){const _0x34dace=_0x579382;if(_0x424e19[_0x34dace(0x560)][_0x34dace(0x299)](/<COMMAND ICON: (\d+)>/i))return Number(RegExp['$1']);else{if(_0x34dace(0xa23)===_0x34dace(0xace)){const _0x413356=_0x2d6f23[_0x34dace(0x610)],_0x46ea97=_0x55b0e6['x'],_0x26f399=_0x2f77c6['y'],_0x4c05ee=new _0x49dc81(_0x413356,_0x46ea97,_0x26f399);_0x50b1a6['hidden']&&_0x4c05ee['hide'](),this['_enemies'][_0x34dace(0x226)](_0x4c05ee);}else return _0x424e19[_0x34dace(0x4b0)];}},DataManager['swapEnemyIDs']=function(_0x266da7){const _0x14b9a9=_0x579382,_0x41fade=$dataEnemies[_0x266da7];if(_0x41fade){if(_0x41fade[_0x14b9a9(0x560)][_0x14b9a9(0x299)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x30d183=String(RegExp['$1'])[_0x14b9a9(0x810)](/[\r\n]+/)[_0x14b9a9(0x7f7)](''),_0x5eeee2=this[_0x14b9a9(0x9e5)](_0x30d183);_0x266da7=this[_0x14b9a9(0x749)](_0x5eeee2)||_0x266da7,_0x266da7=DataManager['swapEnemyIDs'](_0x266da7);}}return _0x266da7;},DataManager[_0x579382(0x9e5)]=function(_0x555c73){const _0x5008bb=_0x579382;let _0x15104e=0x0;const _0x475e4e={};for(const _0x42f551 of _0x555c73){if(_0x42f551[_0x5008bb(0x299)](/(.*):[ ](\d+)/i)){if('NOXcN'!==_0x5008bb(0xa79)){const _0x20d775=String(RegExp['$1'])[_0x5008bb(0x8f5)](),_0x2cc21c=Number(RegExp['$2']);_0x475e4e[_0x20d775]=_0x2cc21c,_0x15104e+=_0x2cc21c;}else _0x49b203=_0x266e61['CastPhysical'];}else{if(_0x42f551[_0x5008bb(0x299)](/(.*):[ ](\d+\.?\d+)/i)){const _0x45e815=String(RegExp['$1'])[_0x5008bb(0x8f5)](),_0x37c853=Number(RegExp['$2']);_0x475e4e[_0x45e815]=_0x37c853,_0x15104e+=_0x37c853;}else _0x42f551!==''&&(_0x475e4e[_0x42f551]=0x1,_0x15104e++);}}if(_0x15104e<=0x0)return'';let _0x40fa6a=Math[_0x5008bb(0xc4a)]()*_0x15104e;for(const _0x485e43 in _0x475e4e){_0x40fa6a-=_0x475e4e[_0x485e43];if(_0x40fa6a<=0x0)return _0x485e43;}return'';},DataManager[_0x579382(0x81f)]=function(_0x3f9a21){const _0x2335fc=_0x579382;if(!_0x3f9a21)return![];if(!VisuMZ[_0x2335fc(0x675)][_0x2335fc(0x27f)]['ActionSequence']['AutoNotetag'])return![];if(_0x3f9a21[_0x2335fc(0x560)][_0x2335fc(0x299)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x3f9a21['note'][_0x2335fc(0x299)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x118bcb of _0x3f9a21[_0x2335fc(0x87e)]){if('NHUAu'===_0x2335fc(0x96c))return!![];else{if(!_0x118bcb)continue;if(_0x118bcb[_0x2335fc(0xb10)]===Game_Action[_0x2335fc(0xad1)])return!![];}}return![];},DataManager[_0x579382(0x9a7)]=function(_0x246749){const _0x11f27d=_0x579382,_0x38c9ab=$dataTroops[_0x246749];if(!_0x38c9ab)return'';let _0x448201='';_0x448201+=_0x38c9ab[_0x11f27d(0x1d8)];for(const _0xa990a9 of _0x38c9ab[_0x11f27d(0x993)]){for(const _0x4967ce of _0xa990a9[_0x11f27d(0xc74)]){if(_0x11f27d(0x1c8)!==_0x11f27d(0x1c8))this['_colorType']=_0x58eb50[_0x11f27d(0xa1e)]>=0x0?0x0:0x1,this['createDigits'](_0x59bdf5[_0x11f27d(0xa1e)]);else{if([0x6c,0x198][_0x11f27d(0xb2b)](_0x4967ce[_0x11f27d(0xb10)])){if(_0x11f27d(0xc8f)===_0x11f27d(0x939))return _0x517b01['spriteId']-_0x2cfc5c[_0x11f27d(0x7e3)];else _0x448201+='\x0a',_0x448201+=_0x4967ce[_0x11f27d(0xb89)][0x0];}}}}return _0x448201;},ConfigManager[_0x579382(0x55b)]=ConfigManager[_0x579382(0x55b)]??![],ConfigManager[_0x579382(0xac6)]=ConfigManager[_0x579382(0xac6)]??![],ConfigManager[_0x579382(0x7b2)]=ConfigManager[_0x579382(0x7b2)]??!![],VisuMZ[_0x579382(0x675)][_0x579382(0xb64)]=ConfigManager['makeData'],ConfigManager[_0x579382(0x925)]=function(){const _0x557e4b=_0x579382,_0x5e4f38=VisuMZ[_0x557e4b(0x675)][_0x557e4b(0xb64)][_0x557e4b(0xb95)](this);return _0x5e4f38['autoBattleAtStart']=this[_0x557e4b(0x55b)],_0x5e4f38[_0x557e4b(0xac6)]=this[_0x557e4b(0xac6)],_0x5e4f38[_0x557e4b(0x7b2)]=this['visualHpGauge'],_0x5e4f38;},VisuMZ[_0x579382(0x675)]['ConfigManager_applyData']=ConfigManager[_0x579382(0x35b)],ConfigManager[_0x579382(0x35b)]=function(_0xb35c73){const _0x2ae01d=_0x579382;VisuMZ[_0x2ae01d(0x675)][_0x2ae01d(0x9cb)][_0x2ae01d(0xb95)](this,_0xb35c73);_0x2ae01d(0x55b)in _0xb35c73?_0x2ae01d(0x631)!==_0x2ae01d(0x8e5)?this[_0x2ae01d(0x55b)]=_0xb35c73[_0x2ae01d(0x55b)]:this[_0x2ae01d(0x4bb)]():this['autoBattleAtStart']=![];if(_0x2ae01d(0xac6)in _0xb35c73){if(_0x2ae01d(0x325)!==_0x2ae01d(0x8ec))this[_0x2ae01d(0xac6)]=_0xb35c73[_0x2ae01d(0xac6)];else{if(!this[_0x2ae01d(0x8e0)])return;this[_0x2ae01d(0x908)]=this['_lineHeight']||_0x12d94d[_0x2ae01d(0x448)]['lineHeight'](),this['x']=_0x48dc21[_0x2ae01d(0x78b)](this[_0x2ae01d(0x8e0)][_0x2ae01d(0xb43)]),this['y']=_0x55e540[_0x2ae01d(0x78b)](this[_0x2ae01d(0x8e0)][_0x2ae01d(0x339)]-this[_0x2ae01d(0x908)]*0.5);const _0xae8306=_0x97f7f1[_0x2ae01d(0x675)][_0x2ae01d(0x27f)][_0x2ae01d(0x8ff)];this['x']+=_0x5d8d1d['round'](_0xae8306['NameOffsetX']||0x0),this['y']+=_0x141f75[_0x2ae01d(0x78b)](_0xae8306[_0x2ae01d(0x95c)]||0x0);}}else this[_0x2ae01d(0xac6)]=![];if(_0x2ae01d(0x7b2)in _0xb35c73)this[_0x2ae01d(0x7b2)]=_0xb35c73[_0x2ae01d(0x7b2)];else{if(_0x2ae01d(0x4dd)===_0x2ae01d(0x4dd))this[_0x2ae01d(0x7b2)]=!![];else{const _0x1334b1=this[_0x2ae01d(0x54e)](_0x2b3cfa),_0x298b49=this[_0x2ae01d(0x694)](_0x2d6587)[_0x2ae01d(0x259)];return _0x298b49<=_0x1334b1[_0x2ae01d(0x259)]?'iconText':_0x2ae01d(0x877);}}},VisuMZ[_0x579382(0x675)][_0x579382(0xb5a)]=BattleManager[_0x579382(0x974)],BattleManager['initMembers']=function(){const _0x216bd9=_0x579382;VisuMZ['BattleCore'][_0x216bd9(0xb5a)][_0x216bd9(0xb95)](this),this['_forcedBattlers']=[];},BattleManager[_0x579382(0x573)]=function(){const _0x5383a8=_0x579382;if(!SceneManager[_0x5383a8(0xc65)]())return;const _0x44e7ea=SceneManager[_0x5383a8(0xbc5)]['_statusWindow'];if(_0x44e7ea)_0x44e7ea[_0x5383a8(0xb28)]();},BattleManager[_0x579382(0x5fc)]=function(){const _0x1ce66c=_0x579382;if(BattleManager[_0x1ce66c(0x630)]())return _0x1ce66c(0x656);return _0x1ce66c(0x981);},BattleManager['isBattleSys']=function(_0x46a45f){const _0x2674f5=_0x579382;return _0x46a45f=_0x46a45f['toUpperCase']()[_0x2674f5(0x8f5)](),this[_0x2674f5(0x5fc)]()===_0x46a45f;},BattleManager['isDTB']=function(){const _0x19fe57=_0x579382;return this[_0x19fe57(0x6f6)](_0x19fe57(0x981));},BattleManager[_0x579382(0xb11)]=function(){const _0x4cb12d=_0x579382;return this[_0x4cb12d(0x40e)]();},BattleManager[_0x579382(0x4b7)]=function(){const _0x7b18ac=_0x579382;return!this[_0x7b18ac(0xb11)]();},BattleManager['isTeamBased']=function(){const _0x2350d6=_0x579382;return!this[_0x2350d6(0xb11)]()&&!this[_0x2350d6(0x4b7)]();},BattleManager['processBattleCoreJS']=function(_0x214b8f){const _0x2e82ec=_0x579382;_0x214b8f===_0x2e82ec(0xaa6)&&(_0x2e82ec(0x8a4)===_0x2e82ec(0xa26)?(this[_0x2e82ec(0x504)]=_0x497d62,this['_angleRevertOnFinish']&&(this['_targetAngle']=0x0,this[_0x2e82ec(0x504)]=0x0)):this['_endingBattle']=!![]),$gameParty[_0x2e82ec(0xad8)](_0x214b8f),$gameTroop['processBattleCoreJS'](_0x214b8f);},VisuMZ['BattleCore']['BattleManager_startBattle']=BattleManager['startBattle'],BattleManager[_0x579382(0xbf7)]=function(){const _0x36550c=_0x579382;this[_0x36550c(0x33c)]=![],this[_0x36550c(0x725)]=ConfigManager[_0x36550c(0x55b)],this[_0x36550c(0xbea)]=![],this[_0x36550c(0xad8)]('PreStartBattleJS'),VisuMZ[_0x36550c(0x675)][_0x36550c(0xa70)][_0x36550c(0xb95)](this),this[_0x36550c(0xad8)](_0x36550c(0x78c));},BattleManager['processPostBattleCommonEvents']=function(_0x5e49dd){const _0x1a6173=_0x579382,_0x1f0ef6=VisuMZ[_0x1a6173(0x675)][_0x1a6173(0x27f)][_0x1a6173(0x4c5)];_0x5e49dd!==_0x1a6173(0x343)&&_0x1f0ef6[_0x1a6173(0xc5e)]&&VisuMZ[_0x1a6173(0x675)]['CheckMapBattleEventValid'](_0x1f0ef6[_0x1a6173(0xc5e)])&&$gameTemp[_0x1a6173(0xb36)](_0x1f0ef6[_0x1a6173(0xc5e)]);const _0x4fc466=_0x1a6173(0x935)['format'](_0x5e49dd);_0x1f0ef6[_0x4fc466]&&VisuMZ['BattleCore'][_0x1a6173(0x58d)](_0x1f0ef6[_0x4fc466])&&$gameTemp[_0x1a6173(0xb36)](_0x1f0ef6[_0x4fc466]);},VisuMZ[_0x579382(0x675)][_0x579382(0x846)]=BattleManager[_0x579382(0xbe6)],BattleManager[_0x579382(0xbe6)]=function(){const _0x4687a3=_0x579382;if(this[_0x4687a3(0xcb6)]===_0x4687a3(0xc18)){if(_0x4687a3(0xaf1)!=='BTFyY'){const _0x5ee2f2=_0x563026[_0x4687a3(0xc88)][_0x4687a3(0x27f)][_0x4687a3(0x513)];_0x5ee2f2&&_0x5ee2f2[_0x4687a3(0x531)]===![]&&this[_0x4687a3(0x62d)](0x1);}else{if($gameTemp[_0x4687a3(0x8d8)]())return![];}}return VisuMZ[_0x4687a3(0x675)][_0x4687a3(0x846)]['call'](this);},VisuMZ[_0x579382(0x675)]['BattleManager_processVictory']=BattleManager[_0x579382(0x789)],BattleManager[_0x579382(0x789)]=function(){const _0x11f03d=_0x579382;this['_endingBattle']=!![],this[_0x11f03d(0xad8)](_0x11f03d(0xaa6)),VisuMZ['BattleCore']['BattleManager_processVictory'][_0x11f03d(0xb95)](this),this[_0x11f03d(0xc5c)](_0x11f03d(0xb5c));},VisuMZ[_0x579382(0x675)][_0x579382(0x889)]=BattleManager[_0x579382(0x43b)],BattleManager[_0x579382(0x43b)]=function(){const _0x142c18=_0x579382;this[_0x142c18(0xbea)]=!![],VisuMZ['BattleCore'][_0x142c18(0x889)]['call'](this);},VisuMZ[_0x579382(0x675)]['BattleManager_processDefeat']=BattleManager[_0x579382(0xb3f)],BattleManager[_0x579382(0xb3f)]=function(){const _0x30bc59=_0x579382;this[_0x30bc59(0xbea)]=!![],this[_0x30bc59(0xad8)](_0x30bc59(0x288)),VisuMZ[_0x30bc59(0x675)][_0x30bc59(0x21b)][_0x30bc59(0xb95)](this),this[_0x30bc59(0xc5c)]('Defeat');},VisuMZ[_0x579382(0x675)]['BattleManager_endBattle']=BattleManager[_0x579382(0x319)],BattleManager[_0x579382(0x319)]=function(_0x5cbd75){const _0x275ea5=_0x579382;this[_0x275ea5(0x33c)]=!![],this[_0x275ea5(0x725)]=![],this[_0x275ea5(0xad8)](_0x275ea5(0xac8)),VisuMZ[_0x275ea5(0x675)][_0x275ea5(0x92f)][_0x275ea5(0xb95)](this,_0x5cbd75),this[_0x275ea5(0xad8)](_0x275ea5(0x3ea));},VisuMZ[_0x579382(0x675)][_0x579382(0xc6e)]=BattleManager[_0x579382(0x27d)],BattleManager[_0x579382(0x27d)]=function(){const _0x14fb8f=_0x579382;if(this[_0x14fb8f(0xb11)]())this[_0x14fb8f(0xad8)]('PreStartTurnJS');VisuMZ[_0x14fb8f(0x675)]['BattleManager_startTurn'][_0x14fb8f(0xb95)](this);if(this[_0x14fb8f(0xb11)]())this[_0x14fb8f(0xad8)]('PostStartTurnJS');},VisuMZ[_0x579382(0x675)][_0x579382(0x2b1)]=BattleManager['startAction'],BattleManager['startAction']=function(){const _0x3f89d4=_0x579382,_0x12cfb2=this[_0x3f89d4(0x7c7)][_0x3f89d4(0x5ee)](),_0x18f0ca=this['_subject'];_0x12cfb2&&_0x12cfb2['subject']()===_0x18f0ca&&_0x12cfb2['actionBattleCoreJS'](_0x3f89d4(0x68d)),VisuMZ[_0x3f89d4(0x675)][_0x3f89d4(0x2b1)]['call'](this),_0x12cfb2&&_0x12cfb2[_0x3f89d4(0xaed)]()===_0x18f0ca&&(_0x3f89d4(0x21f)!=='Nedsd'?_0x24e281[_0x3f89d4(0x448)][_0x3f89d4(0x47b)][_0x3f89d4(0xb95)](this,_0x2ecbef,_0x4182cc,_0x33716c,_0xf74cc3):_0x12cfb2[_0x3f89d4(0x938)](_0x3f89d4(0x2c4)));},VisuMZ[_0x579382(0x675)]['BattleManager_endAction']=BattleManager[_0x579382(0x4bb)],BattleManager['endAction']=function(){const _0x5e3659=_0x579382,_0x10d58b=this[_0x5e3659(0x3ca)],_0xddf3d1=this['_subject'];_0x10d58b&&_0x10d58b!==this[_0x5e3659(0x32d)]&&_0x10d58b[_0x5e3659(0xaed)]()===_0xddf3d1&&_0x10d58b[_0x5e3659(0x938)](_0x5e3659(0xba6)),this[_0x5e3659(0x7c7)]?VisuMZ[_0x5e3659(0x675)][_0x5e3659(0x5e8)]['call'](this):this[_0x5e3659(0xcb6)]=_0x5e3659(0xc18),_0x10d58b&&_0x10d58b!==this[_0x5e3659(0x32d)]&&_0x10d58b['subject']()===_0xddf3d1&&_0x10d58b[_0x5e3659(0x938)]('PostEndActionJS'),this[_0x5e3659(0xa54)](this[_0x5e3659(0x844)]()),this[_0x5e3659(0x32d)]=this[_0x5e3659(0x3ca)];},BattleManager[_0x579382(0xa54)]=function(_0x4e3a52){const _0x56ad02=_0x579382;for(const _0x2db242 of _0x4e3a52){if(_0x56ad02(0x454)===_0x56ad02(0x50c))this[_0x56ad02(0x4fe)]();else{if(!_0x2db242)continue;if(!_0x2db242[_0x56ad02(0x368)]())continue;_0x2db242['battler']()[_0x56ad02(0x913)]();}}},BattleManager[_0x579382(0x9ef)]=function(){const _0x32d565=_0x579382;!this[_0x32d565(0x2f7)][_0x32d565(0x880)]()&&this[_0x32d565(0x4bb)]();},Game_Battler[_0x579382(0x448)][_0x579382(0x28c)]=function(){const _0x5e545a=_0x579382;this[_0x5e545a(0xbd2)]();if(Imported[_0x5e545a(0xc59)]){if(_0x5e545a(0x87a)!=='fyYJm'){const _0x1ec22a=this[_0x5e545a(0x407)]();return _0x1ec22a?_0x1ec22a[_0x5e545a(0x2d0)]:0x0;}else{const _0x3d5e6a=VisuMZ['SkillsStatesCore'][_0x5e545a(0x27f)][_0x5e545a(0x513)];if(_0x3d5e6a&&_0x3d5e6a[_0x5e545a(0x531)]===![]){if(_0x5e545a(0x83d)!==_0x5e545a(0x83d))return this['currentAction']()&&this[_0x5e545a(0x5ee)]()[_0x5e545a(0x270)]()&&!this[_0x5e545a(0x5ee)]()['isMagical']();else this[_0x5e545a(0x62d)](0x1);}}}else{if(_0x5e545a(0x9c2)==='WuAeB'){if(!_0x3c6957[_0x5e545a(0xc10)]())return![];return![];}else this[_0x5e545a(0x62d)](0x1);}this[_0x5e545a(0xc73)]();},BattleManager[_0x579382(0xbe7)]=function(){const _0x36dc6a=_0x579382;this['_escapeRatio']=VisuMZ['BattleCore'][_0x36dc6a(0x27f)][_0x36dc6a(0x4c5)][_0x36dc6a(0x852)][_0x36dc6a(0xb95)](this);},VisuMZ[_0x579382(0x675)]['BattleManager_onEscapeSuccess']=BattleManager[_0x579382(0x346)],BattleManager[_0x579382(0x346)]=function(){const _0x755154=_0x579382;this[_0x755154(0xad8)](_0x755154(0x6d2)),BattleManager[_0x755154(0x748)][_0x755154(0x1f6)](),VisuMZ['BattleCore'][_0x755154(0x530)]['call'](this),this[_0x755154(0xc5c)](_0x755154(0x9d4));},VisuMZ[_0x579382(0x675)][_0x579382(0xa69)]=BattleManager[_0x579382(0x1c1)],BattleManager['onEscapeFailure']=function(){const _0x8f6cb2=_0x579382;this['processBattleCoreJS'](_0x8f6cb2(0x94a));const _0x3d6e5d=this['_escapeRatio'];VisuMZ[_0x8f6cb2(0x675)][_0x8f6cb2(0xa69)][_0x8f6cb2(0xb95)](this),this[_0x8f6cb2(0x4a2)]=_0x3d6e5d+VisuMZ['BattleCore'][_0x8f6cb2(0x27f)][_0x8f6cb2(0x4c5)][_0x8f6cb2(0x787)][_0x8f6cb2(0xb95)](this),this[_0x8f6cb2(0xc5c)]('EscapeFail');},BattleManager[_0x579382(0x2f4)]=function(){const _0x2e9d5a=_0x579382;let _0x524ab1=![];if(this['isDisplayEmergedEnemies']()){if(_0x2e9d5a(0x678)!==_0x2e9d5a(0x678))_0x22382c&&_0x5e6578['isActor']()&&_0x32d490[_0x2e9d5a(0xca6)](_0x584609),this[_0x2e9d5a(0x861)]();else for(const _0x24e1bf of $gameTroop[_0x2e9d5a(0x414)]()){'MaUqU'!==_0x2e9d5a(0x1a1)?(this[_0x2e9d5a(0x2f7)]['push'](_0x2e9d5a(0x693),TextManager[_0x2e9d5a(0xb98)]['format'](_0x24e1bf)),this[_0x2e9d5a(0x2f7)][_0x2e9d5a(0x226)](_0x2e9d5a(0x7c8)),_0x524ab1=!![]):(_0x55c604['BattleCore'][_0x2e9d5a(0x618)]['call'](this),this['onEncounterBattleCore']());}}if(this[_0x2e9d5a(0x8d5)])this['_logWindow']['push'](_0x2e9d5a(0x693),TextManager['preemptive']['format']($gameParty[_0x2e9d5a(0x1d8)]())),this[_0x2e9d5a(0x2f7)][_0x2e9d5a(0x226)]('wait');else this[_0x2e9d5a(0x557)]&&(this['_logWindow']['push'](_0x2e9d5a(0x693),TextManager['surprise'][_0x2e9d5a(0x7e1)]($gameParty['name']())),this['_logWindow']['push'](_0x2e9d5a(0x7c8)));if(_0x524ab1){if(_0x2e9d5a(0x449)===_0x2e9d5a(0x5f5)){if(!_0x8ecc02[_0x2e9d5a(0x675)]['Settings'][_0x2e9d5a(0x3f0)][_0x2e9d5a(0x1cc)])return;const _0x38e73f=_0x3c233c[_0x2e9d5a(0x7b2)],_0x43c9d4=_0x2e9d5a(0x7b2);this[_0x2e9d5a(0x3ff)](_0x38e73f,_0x43c9d4);}else this[_0x2e9d5a(0x2f7)][_0x2e9d5a(0x226)](_0x2e9d5a(0x7c8)),this[_0x2e9d5a(0x2f7)]['push']('clear');}if(this['isTpb']()&&this['isSkipPartyCommandWindow']()){if('muJFW'===_0x2e9d5a(0x687))return _0x2ee50c[_0x2e9d5a(0x851)]()[_0x2e9d5a(0x3a1)]();else this['_tpbNeedsPartyCommand']=![];}},BattleManager['isDisplayEmergedEnemies']=function(){const _0x4495aa=_0x579382;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x4495aa(0x675)][_0x4495aa(0x27f)]['Enemy']['EmergeText'];},VisuMZ[_0x579382(0x675)][_0x579382(0x8cb)]=BattleManager[_0x579382(0x9f4)],BattleManager[_0x579382(0x9f4)]=function(){const _0x3eff37=_0x579382;VisuMZ[_0x3eff37(0x675)][_0x3eff37(0x8cb)]['call'](this),this[_0x3eff37(0x40e)]()&&this[_0x3eff37(0x282)]()&&!this['_surprise']&&$gameParty[_0x3eff37(0x280)]()&&this['selectNextCommand']();},BattleManager[_0x579382(0x282)]=function(){const _0x1d7b83=_0x579382;return VisuMZ[_0x1d7b83(0x675)][_0x1d7b83(0x27f)][_0x1d7b83(0x2f8)]['SkipPartyCmd'];},BattleManager[_0x579382(0xc23)]=function(){this['isPartyTpbInputtable']()&&this['selectNextCommand']();},VisuMZ['BattleCore'][_0x579382(0xafc)]=Scene_Battle[_0x579382(0x448)]['startActorCommandSelection'],Scene_Battle[_0x579382(0x448)][_0x579382(0x308)]=function(){const _0x5cdec4=_0x579382;VisuMZ[_0x5cdec4(0x675)][_0x5cdec4(0xafc)][_0x5cdec4(0xb95)](this);if(BattleManager[_0x5cdec4(0x630)]()&&BattleManager[_0x5cdec4(0x62f)]){if(_0x5cdec4(0x98d)===_0x5cdec4(0x1fe))return!![];else BattleManager['_tpbNeedsPartyCommand']=![],this[_0x5cdec4(0x67f)]();}},BattleManager['invokeMagicReflection']=function(_0x383448,_0x1209e0){const _0x309c49=_0x579382;this[_0x309c49(0x3ca)][_0x309c49(0xbc3)]=_0x1209e0,this[_0x309c49(0x2f7)][_0x309c49(0x558)](_0x1209e0),this['_logWindow'][_0x309c49(0x43e)](_0x383448,this[_0x309c49(0x3ca)]),this[_0x309c49(0x3ca)]['apply'](_0x383448),this[_0x309c49(0x2f7)][_0x309c49(0xc78)](_0x383448,_0x383448);},VisuMZ[_0x579382(0x675)]['BattleManager_makeActionOrders']=BattleManager[_0x579382(0xc00)],BattleManager[_0x579382(0xc00)]=function(){const _0x502d90=_0x579382;VisuMZ[_0x502d90(0x675)]['BattleManager_makeActionOrders'][_0x502d90(0xb95)](this),this['_actionBattlers']=this['_actionBattlers'][_0x502d90(0xa1c)](_0x54252b=>_0x54252b&&_0x54252b[_0x502d90(0xa86)]());},VisuMZ[_0x579382(0x675)][_0x579382(0xa2e)]=BattleManager['updatePhase'],BattleManager['updatePhase']=function(_0x4fc985){const _0x175e4a=_0x579382;if(this['_phase']===_0x175e4a(0x535))_0x175e4a(0xc0f)!==_0x175e4a(0xc0f)?_0x3b6d97[_0x175e4a(0xbc5)][_0x175e4a(0xbcc)][_0x175e4a(0x701)](_0x358a66):this[_0x175e4a(0xc67)]();else this['_phase']===_0x175e4a(0xb6f)?this[_0x175e4a(0xb9b)]():_0x175e4a(0x5cf)!==_0x175e4a(0x5cf)?(_0x4aeb6a(_0x175e4a(0x409)[_0x175e4a(0x7e1)](_0x374c3e,_0x34c418,_0x22b4aa)),_0x29db1f[_0x175e4a(0x25d)]()):VisuMZ['BattleCore']['BattleManager_updatePhase'][_0x175e4a(0xb95)](this,_0x4fc985);},BattleManager[_0x579382(0x3b7)]=function(){const _0x5443f3=_0x579382;this['_allTargets']=this['_targets'][_0x5443f3(0x989)](0x0),this[_0x5443f3(0x71a)]=0x0,this['_target']=this[_0x5443f3(0x9ab)][0x0]||null,this[_0x5443f3(0xcb6)]=_0x5443f3(0x535);},BattleManager[_0x579382(0xc67)]=function(){const _0x24e310=_0x579382;!this[_0x24e310(0xa5d)]()&&!this[_0x24e310(0x2f7)][_0x24e310(0x880)]()&&(this['_phase']=_0x24e310(0x89e));},BattleManager[_0x579382(0xb6f)]=function(_0x39757a){const _0x381c10=_0x579382;this[_0x381c10(0xaea)][_0x381c10(0x7f7)](_0x39757a);if(_0x39757a===this[_0x381c10(0x7c7)])return;const _0x31e278=JsonEx[_0x381c10(0x247)](_0x39757a[_0x381c10(0x5ee)]());this[_0x381c10(0x915)]['push']([_0x39757a,_0x31e278]);},BattleManager[_0x579382(0x770)]=function(){},BattleManager[_0x579382(0x9eb)]=function(){const _0x40fe96=_0x579382;if(this[_0x40fe96(0x630)]())'MmCeG'!=='MmCeG'?this['x']=_0x4fad58[_0x40fe96(0x77e)]-this[_0x40fe96(0x82c)]()[_0x40fe96(0x368)]()[_0x40fe96(0xb43)]:this[_0x40fe96(0xcb6)]=_0x40fe96(0xc18);else this[_0x40fe96(0x915)][_0x40fe96(0x237)]>0x0?'QgeyY'===_0x40fe96(0x831)?this[_0x40fe96(0xcb6)]=_0x40fe96(0xc18):(this[_0x40fe96(0xb48)]=this[_0x40fe96(0xb48)]??0x1,this[_0x40fe96(0xaa5)]=this[_0x40fe96(0xaa5)]??0x1,this[_0x40fe96(0xc68)][_0x40fe96(0xb30)]['x']=this['_distortionSprite']['scale']['x']*this[_0x40fe96(0xb48)],this[_0x40fe96(0xc68)]['scale']['y']=this[_0x40fe96(0xc0c)][_0x40fe96(0xb30)]['y']*this[_0x40fe96(0xaa5)]):this['startInput']();},BattleManager['getNextSubject']=function(){const _0x1df31d=_0x579382,_0x2eb84c=this[_0x1df31d(0x7c7)];_0x2eb84c&&this[_0x1df31d(0x630)]()&&(_0x1df31d(0x404)!==_0x1df31d(0xb3b)?_0x2eb84c['setActionState'](_0x1df31d(0x2b5)):(this[_0x1df31d(0xa75)]['x']=_0x378fba[_0x1df31d(0x259)]*0xa,this[_0x1df31d(0xa75)]['y']=_0x23bccb[_0x1df31d(0x5ac)]*0xa));for(;;){if(_0x1df31d(0x525)===_0x1df31d(0x8fd))_0x19451e[_0x1df31d(0x448)][_0x1df31d(0x924)][_0x1df31d(0xb95)](this),this[_0x1df31d(0x3cf)]();else{const _0xe734fa=this[_0x1df31d(0x49a)]();if(!_0xe734fa)return null;if(_0xe734fa[_0x1df31d(0x896)]()&&_0xe734fa[_0x1df31d(0x884)]()){if('YYJXK'===_0x1df31d(0x4df))return _0xe734fa;else{if(!_0x155bd2['isSceneBattle']())return;_0x10d979[_0x1df31d(0x6dc)](_0x42ab01,_0x33bc78);const _0x582eb2=_0x2fb7a2[_0x1df31d(0x3ca)];if(!_0x582eb2)return;let _0x5cc597=_0x537a7d[_0x1df31d(0x2e5)];_0x582eb2[_0x1df31d(0x88e)](_0x5cc597);}}}}},BattleManager[_0x579382(0x49a)]=function(){const _0x103471=_0x579382;if(this['_forcedBattlers'][_0x103471(0x237)]>0x0){const _0x1e58f3=this[_0x103471(0x915)][_0x103471(0x3b6)](),_0x3ec394=_0x1e58f3[0x0];return _0x3ec394['_actions']=_0x3ec394[_0x103471(0x65b)]||[],_0x3ec394['_actions'][0x0]=_0x1e58f3[0x1],_0x3ec394;}else{if('WhtGZ'!==_0x103471(0x6de))return this[_0x103471(0xaea)][_0x103471(0x3b6)]();else{if(!this[_0x103471(0x5be)])return;if(!this[_0x103471(0x423)])return;const _0x194007=_0x424927['ANTI_TINT_UI']?this[_0x103471(0x5be)]['x']:0x0,_0x38ac63=_0x4a798e[_0x103471(0xc56)]?this[_0x103471(0x5be)]['y']:0x0,_0x2063d7=_0x5d6270[_0x103471(0xb4d)]?this[_0x103471(0x23c)]['x']:0x0,_0x679576=_0x5cc0d1[_0x103471(0xb4d)]?this[_0x103471(0x23c)]['y']:0x0;this[_0x103471(0x423)]['x']=_0x194007+_0x2063d7,this[_0x103471(0x423)]['y']=_0x38ac63+_0x679576;}}},VisuMZ[_0x579382(0x675)]['Game_Battler_forceAction']=Game_Battler['prototype'][_0x579382(0xb6f)],Game_Battler[_0x579382(0x448)][_0x579382(0xb6f)]=function(_0x794592,_0x141ef1){const _0x57ecf1=_0x579382;VisuMZ[_0x57ecf1(0x675)]['Game_Battler_forceAction'][_0x57ecf1(0xb95)](this,_0x794592,_0x141ef1),this['_actions'][this['_actions'][_0x57ecf1(0x237)]-0x1][_0x57ecf1(0x90e)]=!![];},Game_Interpreter['prototype'][_0x579382(0x32b)]=function(_0x156622){const _0x29dbb3=_0x579382;return this[_0x29dbb3(0x84f)](_0x156622[0x0],_0x156622[0x1],_0x1da898=>{const _0x4ab0b4=_0x29dbb3;_0x4ab0b4(0x4aa)==='lZpSd'?_0x3b04c8=_0x51e550>=_0x25d799?_0x2512a1:_0x28f5ce:!_0x1da898[_0x4ab0b4(0xa83)]()&&(_0x1da898[_0x4ab0b4(0xb6f)](_0x156622[0x2],_0x156622[0x3]),BattleManager[_0x4ab0b4(0xb6f)](_0x1da898));}),!![];},VisuMZ[_0x579382(0x675)][_0x579382(0x528)]=Game_Battler[_0x579382(0x448)][_0x579382(0x50f)],Game_Battler['prototype'][_0x579382(0x50f)]=function(){const _0x38b959=_0x579382;VisuMZ['BattleCore'][_0x38b959(0x528)][_0x38b959(0xb95)](this),this[_0x38b959(0x65b)][_0x38b959(0x237)]<=0x0&&(this[_0x38b959(0x66d)]=Number[_0x38b959(0x48b)]);},BattleManager[_0x579382(0x49c)]=function(){const _0x23747c=_0x579382;if(VisuMZ['BattleCore']['Settings'][_0x23747c(0x547)][_0x23747c(0xc62)]??!![])return![];return SceneManager[_0x23747c(0xc65)]()&&this[_0x23747c(0xbea)];},VisuMZ[_0x579382(0x675)][_0x579382(0x61f)]=BattleManager['selectNextCommand'],BattleManager['selectNextCommand']=function(){const _0x3f6b79=_0x579382;this[_0x3f6b79(0x630)]()?this[_0x3f6b79(0x45e)]():VisuMZ['BattleCore'][_0x3f6b79(0x61f)][_0x3f6b79(0xb95)](this);},BattleManager[_0x579382(0x45e)]=function(){const _0x3403fd=_0x579382;if(this[_0x3403fd(0x562)]){if(this[_0x3403fd(0x562)][_0x3403fd(0xaac)]())return;this[_0x3403fd(0x42a)](),this[_0x3403fd(0x1fb)](),!this['_subject']&&!this['_currentActor']&&SceneManager[_0x3403fd(0xbc5)][_0x3403fd(0x348)]();}else!this['_subject']&&this[_0x3403fd(0x2ae)]();},BattleManager[_0x579382(0x1fb)]=function(){const _0x34868e=_0x579382;if(!this[_0x34868e(0x4b8)]()||this[_0x34868e(0xa90)]()){this[_0x34868e(0x219)]&&(_0x34868e(0xa72)!==_0x34868e(0xa72)?(this[_0x34868e(0xc5d)]=new _0x445315(),this[_0x34868e(0xc5d)][_0x34868e(0x22b)]['x']=0.5,this[_0x34868e(0xc5d)][_0x34868e(0x22b)]['y']=0x1,this[_0x34868e(0xbb0)](this['_mainSprite']),this['attachSpritesToDistortionSprite']()):!$gameParty[_0x34868e(0x203)]()['includes'](this[_0x34868e(0x219)])&&('JVcye'!=='JVcye'?_0x283eb9[_0x34868e(0x226)](new _0x179af8(_0x1a27e6)):this[_0x34868e(0x219)]=null));if(!this[_0x34868e(0x219)])this[_0x34868e(0x518)](),this[_0x34868e(0x562)]=null,this[_0x34868e(0x5bb)]=![];else{if('jAVVp'!==_0x34868e(0x4cd)){if(!this[_0x34868e(0x606)]()&&_0x223993[_0x34868e(0x725)])return!![];return _0x4b40a5['prototype']['isAutoBattle']['call'](this);}else this[_0x34868e(0x3d1)]();}}},BattleManager[_0x579382(0x3d1)]=function(){const _0x16b45f=_0x579382;!$gameParty[_0x16b45f(0x203)]()['includes'](this['_tpbSceneChangeCacheActor'])&&(this[_0x16b45f(0x219)]=null),this['_tpbSceneChangeCacheActor']?(this[_0x16b45f(0x562)]=this[_0x16b45f(0x219)],this['_currentActor']['_tpbState']=_0x16b45f(0xa16),this[_0x16b45f(0x5bb)]=!![],this[_0x16b45f(0x219)]=null):_0x16b45f(0x47a)!=='sJtTE'?_0x47e6c1[_0x16b45f(0x547)]['PopupPosition']=_0x16b45f(0x34e):(this[_0x16b45f(0x518)](),this[_0x16b45f(0x562)]=null,this[_0x16b45f(0x5bb)]=![]);},VisuMZ[_0x579382(0x675)]['BattleManager_isTpbMainPhase']=BattleManager['isTpbMainPhase'],BattleManager[_0x579382(0x1ea)]=function(){const _0x5c6936=_0x579382;return this[_0x5c6936(0xcb6)]===_0x5c6936(0x535)?this[_0x5c6936(0x442)]():VisuMZ['BattleCore'][_0x5c6936(0xaa9)][_0x5c6936(0xb95)](this);},BattleManager['battleCoreTpbMainPhase']=function(){return this['isActiveTpb']();},VisuMZ[_0x579382(0x675)]['BattleManager_cancelActorInput']=BattleManager[_0x579382(0x518)],BattleManager[_0x579382(0x518)]=function(){const _0x1c9da8=_0x579382;this['isTpb']()&&this['_phase']==='battleEnd'&&(this[_0x1c9da8(0x562)]=null),VisuMZ[_0x1c9da8(0x675)][_0x1c9da8(0x388)][_0x1c9da8(0xb95)](this);},VisuMZ['BattleCore'][_0x579382(0x9b8)]=BattleManager[_0x579382(0x9bd)],BattleManager['inputtingAction']=function(){const _0x3f519c=_0x579382,_0xbc07bb=this[_0x3f519c(0x562)];if(_0xbc07bb&&!_0xbc07bb[_0x3f519c(0x9bd)]()){if(_0x3f519c(0x63b)!==_0x3f519c(0x2dd)){const _0x234d8e=_0xbc07bb['_actionInputIndex'];_0xbc07bb['_actions'][_0x234d8e]=new Game_Action(_0xbc07bb);}else _0x3fd354[_0x3f519c(0x3d1)]();}return VisuMZ[_0x3f519c(0x675)]['BattleManager_inputtingAction'][_0x3f519c(0xb95)](this);},VisuMZ[_0x579382(0x675)][_0x579382(0x9fa)]=BattleManager[_0x579382(0x958)],BattleManager['checkSubstitute']=function(_0x36f5c5){const _0x2e7d4b=_0x579382;if(this[_0x2e7d4b(0x3ca)]['isForFriend']())return![];return VisuMZ['BattleCore']['BattleManager_checkSubstitute']['call'](this,_0x36f5c5);},SceneManager[_0x579382(0xc65)]=function(){const _0x21b0d2=_0x579382;return this[_0x21b0d2(0xbc5)]&&this[_0x21b0d2(0xbc5)][_0x21b0d2(0x622)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x20e342=_0x579382;return Spriteset_Battle[_0x20e342(0x448)][_0x20e342(0x88a)]();},SceneManager[_0x579382(0x1ba)]=function(){const _0x2e3052=_0x579382;if(SceneManager[_0x2e3052(0xbee)](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0xb9d435=_0x579382;if(SceneManager[_0xb9d435(0x588)](Scene_Options))return!![];return![];},SceneManager[_0x579382(0x459)]=function(_0x462be5){const _0x1e9dd1=_0x579382;if(!SceneManager[_0x1e9dd1(0xc65)]())return!![];const _0x4b79e2=[_0x1e9dd1(0xb8f),_0x1e9dd1(0x992)];return _0x4b79e2[_0x1e9dd1(0xb2b)](_0x462be5['name']);},VisuMZ[_0x579382(0x675)][_0x579382(0x46d)]=SceneManager[_0x579382(0x226)],SceneManager['push']=function(_0x1b20f5){const _0x2de19e=_0x579382;if(!SceneManager['checkSceneBattleTransitionable'](_0x1b20f5))return this[_0x2de19e(0xca3)](_0x1b20f5);VisuMZ[_0x2de19e(0x675)][_0x2de19e(0x46d)][_0x2de19e(0xb95)](this,_0x1b20f5);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x5053ac){const _0xa06842=_0x579382;if(!$gameTemp['isPlaytest']())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0xa06842(0x1c6)]=!![];let _0x1a6e81='';_0x1a6e81+=_0xa06842(0x6e3),_0x1a6e81+=_0xa06842(0x30d)['format'](_0x5053ac[_0xa06842(0x1d8)]),alert(_0x1a6e81);},VisuMZ['BattleCore'][_0x579382(0x7d8)]=Game_Temp[_0x579382(0x448)][_0x579382(0x64f)],Game_Temp[_0x579382(0x448)][_0x579382(0x64f)]=function(_0x5080e,_0x4e2ca7,_0x3060d8){const _0x59037c=_0x579382;_0x5080e=_0x5080e[_0x59037c(0xa1c)]((_0x56ce92,_0x527181,_0x548aea)=>_0x548aea['indexOf'](_0x56ce92)===_0x527181),SceneManager[_0x59037c(0xc65)]()&&SceneManager['isBattleFlipped']()&&(_0x3060d8=!_0x3060d8),VisuMZ[_0x59037c(0x675)][_0x59037c(0x7d8)][_0x59037c(0xb95)](this,_0x5080e,_0x4e2ca7,_0x3060d8),SceneManager[_0x59037c(0xc65)]()&&(_0x59037c(0x315)==='CUNPs'?BattleManager[_0x59037c(0x748)][_0x59037c(0x6ae)]():this[_0x59037c(0x87c)](0x0,0x0,0xc));},Game_Temp['prototype'][_0x579382(0x24c)]=function(_0x336870){const _0x179445=_0x579382;this[_0x179445(0x4c8)]=_0x336870;},Game_Temp['prototype']['getLastPluginCommandInterpreter']=function(){const _0x4acecd=_0x579382;return this[_0x4acecd(0x4c8)];},Game_Temp[_0x579382(0x448)]['clearForcedGameTroopSettingsBattleCore']=function(){this['_forcedBattleLayout']=undefined;},Game_Temp['prototype'][_0x579382(0xaba)]=function(_0x1f8df7){const _0x26fd37=_0x579382;$gameMap&&$dataMap&&$dataMap[_0x26fd37(0x560)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap['note']);const _0x53154e=$dataTroops[_0x1f8df7];if(_0x53154e){let _0x3d4012=DataManager[_0x26fd37(0x9a7)](_0x53154e['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x3d4012);}},Game_Temp[_0x579382(0x448)]['parseForcedGameTroopSettingsBattleCore']=function(_0x1e200f){const _0x8e6ac5=_0x579382;if(!_0x1e200f)return;if(_0x1e200f[_0x8e6ac5(0x299)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x166662=String(RegExp['$1']);if(_0x166662[_0x8e6ac5(0x299)](/DEFAULT/i))this[_0x8e6ac5(0x9d5)]='default';else{if(_0x166662[_0x8e6ac5(0x299)](/LIST/i)){if('nsTyS'===_0x8e6ac5(0xb66))this[_0x8e6ac5(0x9d5)]=_0x8e6ac5(0xc74);else{const _0x16d447=this['svBattlerData']()['wtypeId']||0x0,_0x35480f=_0x46ba39[_0x8e6ac5(0x4a0)][_0x16d447];_0x35480f&&this[_0x8e6ac5(0x627)](_0x35480f[_0x8e6ac5(0x2d0)]);}}else{if(_0x166662[_0x8e6ac5(0x299)](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0x166662['match'](/PORTRAIT/i))this[_0x8e6ac5(0x9d5)]=_0x8e6ac5(0x745);else{if(_0x166662[_0x8e6ac5(0x299)](/BORDER/i)){if('BKOoe'===_0x8e6ac5(0x2de))this[_0x8e6ac5(0x9d5)]=_0x8e6ac5(0x5d8);else{_0x196194['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x258482=_0x5b6447(_0xc27159['$1']),_0x22ed3d=_0x1ff243(_0x3e270e['$2']),_0x58ec33=_0x22ed3d===0x1?this[_0x8e6ac5(0x5d0)]:this['_regionBattleback2'],_0x376b5b=_0x470caa(_0x4e8887['$3']);_0x58ec33[_0x258482]=_0x376b5b;}}else{if(_0x166662['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0x8e6ac5(0x997)]){if(_0x8e6ac5(0x87b)!==_0x8e6ac5(0x1a7))this[_0x8e6ac5(0x9d5)]=_0x8e6ac5(0x65e);else{const _0x243fa5=_0x4ee54f[_0x8e6ac5(0x6d7)]('['+_0x3de8b8['$1'][_0x8e6ac5(0x299)](/\d+/g)+']');for(const _0x5155e2 of _0x243fa5){if(!_0x3bee85[_0x8e6ac5(0x1bc)](_0x5155e2))return![];}return!![];}}else this[_0x8e6ac5(0x9d5)]=_0x8e6ac5(0x3ac);}else _0x166662[_0x8e6ac5(0x299)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x8e6ac5(0xae8)]?this[_0x8e6ac5(0x9d5)]=_0x8e6ac5(0x5d1):this[_0x8e6ac5(0x9d5)]=_0x8e6ac5(0x3ac));}}}}}}},VisuMZ[_0x579382(0x675)]['Game_System_initialize']=Game_System[_0x579382(0x448)][_0x579382(0x921)],Game_System[_0x579382(0x448)][_0x579382(0x921)]=function(){const _0x15d55e=_0x579382;VisuMZ[_0x15d55e(0x675)][_0x15d55e(0x30b)][_0x15d55e(0xb95)](this),this[_0x15d55e(0x2d3)]();},Game_System['prototype'][_0x579382(0x2d3)]=function(){const _0x33563b=_0x579382;this[_0x33563b(0x9ea)]=this['_defeatedEnemies']||[];},Game_System['prototype'][_0x579382(0x5d7)]=function(){if(this['_defeatedEnemies']===undefined)this['initBattleCore']();return this['_defeatedEnemies'];},Game_System[_0x579382(0x448)]['registerDefeatedEnemy']=function(_0x215b68){const _0x550b72=_0x579382;if(this[_0x550b72(0x9ea)]===undefined)this['initBattleCore']();if(!_0x215b68)return;if(this[_0x550b72(0x9ea)][_0x550b72(0xb2b)](_0x215b68))return;this[_0x550b72(0x9ea)][_0x550b72(0x226)](_0x215b68),this[_0x550b72(0x9ea)][_0x550b72(0x7de)]((_0x3ceb71,_0x547a82)=>_0x3ceb71-_0x547a82);},VisuMZ[_0x579382(0x675)]['Game_BattlerBase_addNewState']=Game_BattlerBase['prototype'][_0x579382(0x2a2)],Game_BattlerBase['prototype'][_0x579382(0x2a2)]=function(_0x8ccad4){const _0x149e33=_0x579382,_0x2b6dd3=this[_0x149e33(0x884)](),_0x56334a=this[_0x149e33(0x55f)]();VisuMZ[_0x149e33(0x675)][_0x149e33(0xbda)][_0x149e33(0xb95)](this,_0x8ccad4);if(this['isEnemy']()&&_0x2b6dd3&&this[_0x149e33(0x84b)]()){if(_0x149e33(0x808)!==_0x149e33(0x9d7))this[_0x149e33(0x6f0)]=!this[_0x149e33(0x71c)](),$gameSystem[_0x149e33(0x50b)](this[_0x149e33(0x610)]());else return _0x149e33(0xb7d);}SceneManager[_0x149e33(0xc65)]()&&_0x56334a!==this['stateMotionIndex']()&&(this[_0x149e33(0x368)]()&&this[_0x149e33(0x368)]()[_0x149e33(0x913)]());},Game_Enemy['prototype']['hasBeenDefeatedBefore']=function(){const _0x6373db=_0x579382;return $gameSystem['getDefeatedEnemies']()[_0x6373db(0xb2b)](this[_0x6373db(0x799)]);},VisuMZ[_0x579382(0x675)][_0x579382(0x81a)]=Game_BattlerBase['prototype']['eraseState'],Game_BattlerBase[_0x579382(0x448)][_0x579382(0x9f3)]=function(_0x85aecc){const _0x172922=_0x579382;VisuMZ[_0x172922(0x675)][_0x172922(0x81a)][_0x172922(0xb95)](this,_0x85aecc),this[_0x172922(0xa31)]()&&_0x85aecc===this['deathStateId']()&&this[_0x172922(0x884)]()&&(_0x172922(0x9ee)===_0x172922(0x267)?this['push']('setActiveWeaponSet',_0x1a143f,_0x31f9b4):this['_visualHpGauge_JustDied']=![]),!this['_tempActor']&&!this[_0x172922(0xc92)]&&SceneManager[_0x172922(0xc65)]()&&this[_0x172922(0x970)]();},VisuMZ[_0x579382(0x675)][_0x579382(0x793)]=Game_Action[_0x579382(0x448)][_0x579382(0x3f1)],Game_Action[_0x579382(0x448)]['clear']=function(){const _0x1522c4=_0x579382;VisuMZ[_0x1522c4(0x675)]['Game_Action_clear'][_0x1522c4(0xb95)](this),this[_0x1522c4(0x709)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x1522c4(0x7d2)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x1522c4(0x94f)]=_0x1522c4(0x3ac);},Game_Action['prototype']['makeDamageValue']=function(_0x39b7e3,_0x245b3f){const _0x30b1c9=_0x579382;return VisuMZ[_0x30b1c9(0x675)][_0x30b1c9(0x27f)][_0x30b1c9(0x547)][_0x30b1c9(0x700)][_0x30b1c9(0xb95)](this,_0x39b7e3,_0x245b3f);},Game_Action['prototype'][_0x579382(0x19a)]=function(_0xb979df,_0x16ac4a){const _0x5a7393=_0x579382;return VisuMZ[_0x5a7393(0x675)][_0x5a7393(0x27f)][_0x5a7393(0x547)][_0x5a7393(0xaa3)]['call'](this,_0xb979df,_0x16ac4a);},Game_Action[_0x579382(0x448)][_0x579382(0x6a9)]=function(_0x1bad22,_0x1fed10){const _0x3a97be=_0x579382;return VisuMZ[_0x3a97be(0x675)][_0x3a97be(0x27f)][_0x3a97be(0x547)][_0x3a97be(0x8ca)]['call'](this,_0x1bad22,_0x1fed10);},VisuMZ['BattleCore'][_0x579382(0x24f)]=Game_Action[_0x579382(0x448)][_0x579382(0x5e0)],Game_Action[_0x579382(0x448)][_0x579382(0x5e0)]=function(_0xda9b7d){const _0x3f825c=_0x579382,_0x727b69=this[_0x3f825c(0x270)]()[_0x3f825c(0x560)];if(_0x727b69[_0x3f825c(0x299)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x727b69[_0x3f825c(0x299)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if('OQgwy'===_0x3f825c(0x92c))return Number(RegExp['$1'])/0x64;else this[_0x3f825c(0x562)]=this['_tpbSceneChangeCacheActor'],this['_currentActor'][_0x3f825c(0x990)]=_0x3f825c(0xa16),this[_0x3f825c(0x5bb)]=!![],this['_tpbSceneChangeCacheActor']=null;}else{let _0x4dce9b=VisuMZ[_0x3f825c(0x675)][_0x3f825c(0x24f)][_0x3f825c(0xb95)](this,_0xda9b7d);return _0x4dce9b=this[_0x3f825c(0x7d2)][_0x3f825c(0xc5a)]*_0x4dce9b+this[_0x3f825c(0x7d2)][_0x3f825c(0x359)],_0x4dce9b;}}},Game_Action[_0x579382(0x448)]['itemCri']=function(_0x97b00){const _0x229a20=_0x579382;if(!this[_0x229a20(0x270)]()[_0x229a20(0x210)]['critical'])return 0x0;let _0x48ff6c=VisuMZ['BattleCore']['Settings'][_0x229a20(0x547)][_0x229a20(0x712)][_0x229a20(0xb95)](this,_0x97b00);return _0x48ff6c=this[_0x229a20(0x7d2)][_0x229a20(0xa08)]*_0x48ff6c+this['_multipliers'][_0x229a20(0x653)],_0x48ff6c;},Game_Action[_0x579382(0x448)][_0x579382(0x84c)]=function(_0x34d6a4){const _0x5ed2da=_0x579382;return _0x34d6a4=VisuMZ[_0x5ed2da(0x675)][_0x5ed2da(0x27f)]['Damage'][_0x5ed2da(0xabc)][_0x5ed2da(0xb95)](this,_0x34d6a4),_0x34d6a4=this[_0x5ed2da(0x7d2)][_0x5ed2da(0x809)]*_0x34d6a4+this[_0x5ed2da(0x7d2)][_0x5ed2da(0x38b)],_0x34d6a4;},VisuMZ[_0x579382(0x675)]['Game_Action_evalDamageFormula']=Game_Action['prototype'][_0x579382(0x1f8)],Game_Action[_0x579382(0x448)][_0x579382(0x1f8)]=function(_0x27e948){const _0x52d8c5=_0x579382;if(this[_0x52d8c5(0x94f)]!==_0x52d8c5(0x3ac))return this[_0x52d8c5(0xcb4)](_0x27e948);else return DataManager[_0x52d8c5(0x1dc)](this[_0x52d8c5(0x270)]())===_0x52d8c5(0x4a7)?VisuMZ[_0x52d8c5(0x675)][_0x52d8c5(0x619)]['call'](this,_0x27e948):this[_0x52d8c5(0x652)](_0x27e948);},Game_Action[_0x579382(0x448)][_0x579382(0x88e)]=function(_0x19f913){const _0x442c9c=_0x579382;this[_0x442c9c(0x94f)]=_0x19f913;},Game_Action[_0x579382(0x448)]['customDamageFormula']=function(_0x276770){const _0x415ba9=_0x579382,_0xc48d86=this[_0x415ba9(0x270)](),_0x4ed22f=_0xc48d86['damage'][_0x415ba9(0x7d5)];_0xc48d86[_0x415ba9(0x210)][_0x415ba9(0x7d5)]=this[_0x415ba9(0x94f)];let _0x542d7b=VisuMZ[_0x415ba9(0x675)][_0x415ba9(0x619)][_0x415ba9(0xb95)](this,_0x276770);return _0xc48d86['damage']['formula']=_0x4ed22f,_0x542d7b;},Game_Action[_0x579382(0x448)][_0x579382(0x1b6)]=function(){const _0xa671=_0x579382;if(this['item']()['note'][_0xa671(0x299)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0xa671(0x2d4)===_0xa671(0x96b))return _0x25adb6[_0xa671(0x675)][_0xa671(0x27f)][_0xa671(0x8ff)][_0xa671(0x879)];else{const _0x346f9e=String(RegExp['$1'])[_0xa671(0x2ed)]()[_0xa671(0x8f5)]();return _0x346f9e;}}return'MANUAL';},Game_Action[_0x579382(0x448)]['evalDamageFormulaBattleCore']=function(_0x44ec69){const _0x50373b=_0x579382,_0x2fcad7=DataManager[_0x50373b(0x1dc)](this[_0x50373b(0x270)]()),_0x52eb2a=VisuMZ[_0x50373b(0x87d)][_0x2fcad7];try{return _0x52eb2a[_0x50373b(0x2e5)][_0x50373b(0xb95)](this,_0x44ec69);}catch(_0x571da0){if(_0x50373b(0x654)==='grqUQ')return _0x5928ba[_0x50373b(0x675)][_0x50373b(0x27f)][_0x50373b(0x6d6)][_0x50373b(0x66a)];else{if($gameTemp[_0x50373b(0xbb5)]())console['log'](_0x571da0);return VisuMZ['BattleCore'][_0x50373b(0x619)][_0x50373b(0xb95)](this);}}},Game_Action[_0x579382(0x448)][_0x579382(0x34b)]=function(_0x474eae,_0x211174){const _0x174f1e=_0x579382;if(this[_0x174f1e(0xaf9)]())return _0x211174;const _0x395643=this[_0x174f1e(0xaed)](),_0x78e923=_0x474eae;let _0x522166=[],_0x1dd23e=[];_0x522166[_0x174f1e(0x226)](this['_armorPenetration'][_0x174f1e(0x73d)],this[_0x174f1e(0x709)][_0x174f1e(0x329)]),_0x1dd23e[_0x174f1e(0x226)](this['_armorPenetration'][_0x174f1e(0x4a3)],this[_0x174f1e(0x709)][_0x174f1e(0x390)]);const _0x5e4c99=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x209686=this[_0x174f1e(0xaee)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x3d0eba=this[_0x174f1e(0xaee)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x3537d1=this[_0x174f1e(0xaee)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x522166=_0x522166[_0x174f1e(0xa96)](_0x78e923[_0x174f1e(0x2bf)]()[_0x174f1e(0xb6e)](_0xecafde=>_0xecafde&&_0xecafde[_0x174f1e(0x560)][_0x174f1e(0x299)](_0x5e4c99)?Number(RegExp['$1']):0x0)),_0x1dd23e=_0x1dd23e[_0x174f1e(0xa96)](_0x78e923['traitObjects']()[_0x174f1e(0xb6e)](_0x24b54f=>_0x24b54f&&_0x24b54f[_0x174f1e(0x560)][_0x174f1e(0x299)](_0x209686)?Number(RegExp['$1'])/0x64:0x0)),_0x522166=_0x522166[_0x174f1e(0xa96)](_0x395643['traitObjects']()[_0x174f1e(0xb6e)](_0x312984=>_0x312984&&_0x312984[_0x174f1e(0x560)][_0x174f1e(0x299)](_0x3d0eba)?Number(RegExp['$1']):0x0)),_0x1dd23e=_0x1dd23e[_0x174f1e(0xa96)](_0x395643[_0x174f1e(0x2bf)]()['map'](_0x20f992=>_0x20f992&&_0x20f992[_0x174f1e(0x560)]['match'](_0x3537d1)?Number(RegExp['$1'])/0x64:0x0)),this[_0x174f1e(0x270)]()['note'][_0x174f1e(0x299)](_0x3d0eba)&&_0x522166[_0x174f1e(0x226)](Number(RegExp['$1'])),this[_0x174f1e(0x270)]()[_0x174f1e(0x560)][_0x174f1e(0x299)](_0x3537d1)&&_0x1dd23e[_0x174f1e(0x226)](Number(RegExp['$1'])),_0x211174=_0x522166[_0x174f1e(0x3ad)]((_0x2a9d44,_0x248955)=>_0x2a9d44-_0x248955,_0x211174),_0x211174>0x0&&(_0x211174=_0x1dd23e['reduce']((_0x3890fe,_0x48d581)=>_0x3890fe*(0x1-_0x48d581),_0x211174)),_0x211174;},VisuMZ[_0x579382(0x675)][_0x579382(0x54b)]=Game_Action[_0x579382(0x448)][_0x579382(0x5aa)],Game_Action[_0x579382(0x448)][_0x579382(0x5aa)]=function(_0x2f0f9a,_0x22be6a){const _0x531d18=_0x579382;_0x22be6a=_0x22be6a*this['_multipliers'][_0x531d18(0xc6d)],_0x22be6a+=this['_multipliers'][_0x531d18(0xa1a)]*(_0x22be6a>=0x0?0x1:-0x1),_0x22be6a=this['applyBattleCoreJS']('PreDamage%1JS',_0x2f0f9a,_0x22be6a,![]),_0x22be6a=this[_0x531d18(0x728)](_0x22be6a),_0x22be6a=Math[_0x531d18(0x78b)](_0x22be6a),this[_0x531d18(0x658)]=_0x22be6a,this['_totalValue']=this['_totalValue']||0x0,this[_0x531d18(0x97c)]+=_0x22be6a,VisuMZ[_0x531d18(0x675)][_0x531d18(0x54b)][_0x531d18(0xb95)](this,_0x2f0f9a,_0x22be6a),this[_0x531d18(0xbd4)](_0x531d18(0xb1e),_0x2f0f9a,_0x22be6a,!![]);},Game_Action[_0x579382(0x448)]['applyDamageCaps']=function(_0x313461){const _0x29c13d=_0x579382;if(this[_0x29c13d(0xbde)]())return _0x313461;return _0x313461=this[_0x29c13d(0x1cd)](_0x313461),_0x313461=this['applyHardDamageCap'](_0x313461),_0x313461;},Game_Action['prototype'][_0x579382(0xbde)]=function(){const _0x4fef90=_0x579382,_0x1c51d8=/<BYPASS DAMAGE CAP>/i;if(this[_0x4fef90(0x270)]()[_0x4fef90(0x560)][_0x4fef90(0x299)](_0x1c51d8))return!![];if(this['subject']()[_0x4fef90(0x2bf)]()['some'](_0x4e26dd=>_0x4e26dd&&_0x4e26dd[_0x4fef90(0x560)][_0x4fef90(0x299)](_0x1c51d8)))return!![];return!VisuMZ[_0x4fef90(0x675)]['Settings'][_0x4fef90(0x547)][_0x4fef90(0x7f3)];},Game_Action[_0x579382(0x448)]['applySoftDamageCap']=function(_0x31c99f){const _0x181601=_0x579382;if(!VisuMZ['BattleCore'][_0x181601(0x27f)][_0x181601(0x547)][_0x181601(0x922)])return _0x31c99f;const _0x1e329f=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x181601(0x270)]()[_0x181601(0x560)][_0x181601(0x299)](_0x1e329f))return _0x31c99f;if(this[_0x181601(0xaed)]()[_0x181601(0x2bf)]()[_0x181601(0x354)](_0x49db98=>_0x49db98&&_0x49db98[_0x181601(0x560)]['match'](_0x1e329f)))return _0x31c99f;const _0x53de7a=_0x31c99f<0x0?-0x1:0x1;_0x31c99f=Math[_0x181601(0x2f5)](_0x31c99f);let _0x53be70=this[_0x181601(0xaed)]()[_0x181601(0x551)]();this[_0x181601(0x270)]()[_0x181601(0x560)][_0x181601(0x299)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x53be70+=Number(RegExp['$1'])/0x64);_0x53be70=_0x53be70[_0x181601(0x8c7)](0.01,0x1);const _0x387598=this[_0x181601(0x83f)](),_0x404fe4=_0x53be70*_0x387598;if(_0x31c99f>_0x404fe4&&_0x387598>_0x404fe4){_0x31c99f-=_0x404fe4;const _0x46f2a0=VisuMZ['BattleCore'][_0x181601(0x27f)][_0x181601(0x547)][_0x181601(0x546)],_0x3c41f8=Math[_0x181601(0x1f1)](0x1-_0x31c99f/((_0x387598-_0x404fe4)*_0x46f2a0+_0x31c99f),0.01);_0x31c99f*=_0x3c41f8,_0x31c99f+=_0x404fe4;}return _0x31c99f*_0x53de7a;},Game_Action[_0x579382(0x448)][_0x579382(0x83f)]=function(){const _0x5adf3a=_0x579382;return this[_0x5adf3a(0x270)]()[_0x5adf3a(0x560)][_0x5adf3a(0x299)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this['subject']()['hardDamageCap']();},Game_Action[_0x579382(0x448)]['applyHardDamageCap']=function(_0x1f45e4){const _0x519976=_0x579382;console['log'](_0x1f45e4);let _0xa1d16a=this[_0x519976(0x83f)]();return _0x1f45e4[_0x519976(0x8c7)](-_0xa1d16a,_0xa1d16a);},VisuMZ['BattleCore'][_0x579382(0x727)]=Game_Action['prototype'][_0x579382(0x1bf)],Game_Action['prototype'][_0x579382(0x1bf)]=function(_0x39c2c7){const _0x51ddbd=_0x579382;this[_0x51ddbd(0xbd4)](_0x51ddbd(0xa1f),_0x39c2c7,0x0,!![]),VisuMZ[_0x51ddbd(0x675)]['Game_Action_apply'][_0x51ddbd(0xb95)](this,_0x39c2c7),this[_0x51ddbd(0xbd4)]('PostApply%1JS',_0x39c2c7,this[_0x51ddbd(0x658)]||0x0,!![]),this[_0x51ddbd(0xb9c)](_0x39c2c7);},Game_Action['prototype']['applyBattleCoreJS']=function(_0x560df4,_0x2f4d28,_0x5b433b,_0x597615){const _0x540a3a=_0x579382;if(this[_0x540a3a(0xc92)]||this[_0x540a3a(0x99c)])return;_0x5b433b=_0x5b433b||0x0;const _0x2bff9c=_0x5b433b,_0x52d5db=VisuMZ[_0x540a3a(0x675)]['Settings'][_0x540a3a(0x4c5)],_0x589ae9=_0x560df4[_0x540a3a(0x7e1)]('');if(_0x52d5db[_0x589ae9]){_0x5b433b=_0x52d5db[_0x589ae9]['call'](this,_0x5b433b,_0x2f4d28);if(_0x597615)_0x5b433b=_0x2bff9c;}let _0x1b8d67=VisuMZ[_0x540a3a(0x675)][_0x540a3a(0x6da)](this[_0x540a3a(0x270)](),_0x560df4[_0x540a3a(0x7e1)](''));if(VisuMZ[_0x540a3a(0x675)]['JS'][_0x1b8d67]){_0x5b433b=VisuMZ[_0x540a3a(0x675)]['JS'][_0x1b8d67][_0x540a3a(0xb95)](this,this['subject'](),_0x2f4d28,this[_0x540a3a(0x270)](),_0x5b433b);if(_0x597615)_0x5b433b=_0x2bff9c;}for(const _0x26ca52 of this[_0x540a3a(0xaed)]()['traitObjects']()){if(_0x540a3a(0x391)===_0x540a3a(0x391)){if(!_0x26ca52)continue;_0x1b8d67=VisuMZ[_0x540a3a(0x675)][_0x540a3a(0x6da)](_0x26ca52,_0x560df4[_0x540a3a(0x7e1)](_0x540a3a(0x9a2)));if(VisuMZ['BattleCore']['JS'][_0x1b8d67]){_0x5b433b=VisuMZ[_0x540a3a(0x675)]['JS'][_0x1b8d67][_0x540a3a(0xb95)](this,this[_0x540a3a(0xaed)](),_0x2f4d28,_0x26ca52,_0x5b433b);if(_0x597615)_0x5b433b=_0x2bff9c;}}else{const _0x2b21c6=_0x2617f3[_0x540a3a(0x675)]['Settings'][_0x540a3a(0x9d0)];if(_0x2b21c6&&_0x2b21c6[_0x540a3a(0x374)])return _0x2b21c6[_0x540a3a(0x374)]['call'](this);this[_0x540a3a(0x259)]=_0x419cfe[_0x540a3a(0x259)],this[_0x540a3a(0x5ac)]=_0x48e43d[_0x540a3a(0x5ac)];const _0x1de403=_0x557efd[_0x540a3a(0xabb)](0x1,this['width']/this[_0x540a3a(0x8c2)][_0x540a3a(0x259)]),_0x568d74=_0x3b00d4[_0x540a3a(0xabb)](0x1,this[_0x540a3a(0x5ac)]/this[_0x540a3a(0x8c2)]['height']),_0x55534c=_0x28b4db[_0x540a3a(0x1f1)](_0x1de403,_0x568d74);this['scale']['x']=_0x55534c,this['scale']['y']=_0x55534c,this['x']=(_0x159a66[_0x540a3a(0x259)]-this[_0x540a3a(0x259)])/0x2,this['y']=_0x3a66d1[_0x540a3a(0x5ac)]-this[_0x540a3a(0x5ac)];}}for(const _0x211bba of _0x2f4d28['traitObjects']()){if(_0x540a3a(0x1cb)===_0x540a3a(0x1cb)){if(!_0x211bba)continue;_0x1b8d67=VisuMZ[_0x540a3a(0x675)][_0x540a3a(0x6da)](_0x211bba,_0x560df4[_0x540a3a(0x7e1)](_0x540a3a(0xb17)));if(VisuMZ[_0x540a3a(0x675)]['JS'][_0x1b8d67]){_0x5b433b=VisuMZ[_0x540a3a(0x675)]['JS'][_0x1b8d67][_0x540a3a(0xb95)](this,this['subject'](),_0x2f4d28,_0x211bba,_0x5b433b);if(_0x597615)_0x5b433b=_0x2bff9c;}}else return this[_0x540a3a(0x442)]();}return _0x5b433b;},Game_Action[_0x579382(0x448)][_0x579382(0x938)]=function(_0x4ce78e){const _0x4afc28=_0x579382,_0x140381=this[_0x4afc28(0x97c)]||0x0,_0x437b45=VisuMZ['BattleCore'][_0x4afc28(0x27f)][_0x4afc28(0x4c5)],_0x1fca03=_0x4ce78e[_0x4afc28(0x7e1)]('');if(_0x437b45[_0x1fca03]){if(_0x4afc28(0x841)!=='smqNa')_0x437b45[_0x1fca03][_0x4afc28(0xb95)](this,_0x140381);else return this[_0x4afc28(0x94b)]()[_0x4afc28(0x560)][_0x4afc28(0x299)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x127268(_0x364ec7['$1'])['split'](/[\r\n]+/):_0x4ade50[_0x4afc28(0x675)]['Settings']['ActorCmd'][_0x4afc28(0x23d)];}let _0x4468db=VisuMZ[_0x4afc28(0x675)][_0x4afc28(0x6da)](this[_0x4afc28(0x270)](),_0x4ce78e);VisuMZ['BattleCore']['JS'][_0x4468db]&&(_0x4afc28(0xc79)!=='Rfavl'?this[_0x4afc28(0xac6)]=![]:VisuMZ[_0x4afc28(0x675)]['JS'][_0x4468db][_0x4afc28(0xb95)](this,this['subject'](),this[_0x4afc28(0xaed)](),this[_0x4afc28(0x270)](),_0x140381));for(const _0x249075 of this[_0x4afc28(0xaed)]()[_0x4afc28(0x2bf)]()){if('OsVlQ'!=='OsVlQ')this[_0x4afc28(0x7cd)](this['_backAttachmentSprite']);else{if(!_0x249075)continue;_0x4468db=VisuMZ[_0x4afc28(0x675)][_0x4afc28(0x6da)](_0x249075,_0x4ce78e),VisuMZ['BattleCore']['JS'][_0x4468db]&&VisuMZ[_0x4afc28(0x675)]['JS'][_0x4468db][_0x4afc28(0xb95)](this,this[_0x4afc28(0xaed)](),this[_0x4afc28(0xaed)](),_0x249075,_0x140381);}}},Game_Action['prototype'][_0x579382(0x2c9)]=function(){const _0x3c60d7=_0x579382;return VisuMZ[_0x3c60d7(0x675)][_0x3c60d7(0x27f)][_0x3c60d7(0x4c5)][_0x3c60d7(0x202)][_0x3c60d7(0xb95)](this);},Game_Action[_0x579382(0x448)]['allowRandomSpeed']=function(){const _0xa86726=_0x579382;return VisuMZ[_0xa86726(0x675)][_0xa86726(0x27f)][_0xa86726(0x4c5)]['AllowRandomSpeed'];},Game_Action[_0x579382(0x448)][_0x579382(0x392)]=function(){const _0x4dffd1=_0x579382;return this[_0x4dffd1(0x270)]()['note'][_0x4dffd1(0x299)](/<JS TARGETS>/i);},Game_Action[_0x579382(0x448)][_0x579382(0x5d4)]=function(){const _0x1295c2=_0x579382;if(!this[_0x1295c2(0xb8c)]&&this[_0x1295c2(0xaed)]()[_0x1295c2(0x606)]())return![];if(this[_0x1295c2(0x392)]())return!![];return typeof this['item']()['scope']==='string';},VisuMZ[_0x579382(0x675)]['Game_Action_isForOpponent']=Game_Action[_0x579382(0x448)][_0x579382(0x5da)],Game_Action[_0x579382(0x448)][_0x579382(0x5da)]=function(){const _0x2fc7ab=_0x579382;if(this[_0x2fc7ab(0x5d4)]()&&!this['isCustomBattleScope']()){if(_0x2fc7ab(0x31d)!=='bhrcw'){if(this[_0x2fc7ab(0x611)]()){if(this[_0x2fc7ab(0x3dc)]()>=0x1)return!![];return this[_0x2fc7ab(0xb27)]()[_0x2fc7ab(0xb44)];}else return!![];}else return this['isForOpponentBattleCore']();}else return VisuMZ[_0x2fc7ab(0x675)][_0x2fc7ab(0xa36)][_0x2fc7ab(0xb95)](this);},Game_Action[_0x579382(0x448)][_0x579382(0xbc1)]=function(){const _0x24d4fd=_0x579382,_0x1d5eb4=this['item']()[_0x24d4fd(0x6e0)];return _0x1d5eb4[_0x24d4fd(0x299)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x579382(0x675)]['Game_Action_isForFriend']=Game_Action['prototype'][_0x579382(0x5e2)],Game_Action['prototype'][_0x579382(0x5e2)]=function(){const _0x165c94=_0x579382;if(this[_0x165c94(0x5d4)]()&&!this['isCustomBattleScope']()){if(_0x165c94(0x1ae)!==_0x165c94(0x894))return this[_0x165c94(0x366)]();else{if(!_0x17422b['isSideView']())return;const _0x22fbb6=this[_0x165c94(0x368)]();if(!_0x22fbb6)return;_0x22fbb6['startGrow'](_0x4463f2,_0x4f6f6f,_0x499bac,_0x260d45);}}else return VisuMZ[_0x165c94(0x675)][_0x165c94(0x8c4)]['call'](this);},Game_Action[_0x579382(0x448)][_0x579382(0x366)]=function(){const _0x5c3510=_0x579382,_0x22977d=this['item']()[_0x5c3510(0x6e0)];return _0x22977d['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x579382(0x675)][_0x579382(0x1f7)]=Game_Action['prototype']['isForRandom'],Game_Action['prototype']['isForRandom']=function(){const _0x3c1904=_0x579382;if(this[_0x3c1904(0x5d4)]()&&!this['isCustomBattleScope']()){if('GUauu'===_0x3c1904(0x9bc))return this[_0x3c1904(0x406)]();else{const _0x256f88=_0xcc319f[_0x54d1aa[_0x3c1904(0x5f8)]];if(_0x256f88&&!_0x105ddb[_0x3c1904(0xb2b)](_0x256f88))_0x3b155b['push'](_0x256f88);}}else return VisuMZ[_0x3c1904(0x675)]['Game_Action_isForRandom'][_0x3c1904(0xb95)](this);},Game_Action[_0x579382(0x448)][_0x579382(0x406)]=function(){const _0x5bddc6=_0x579382,_0x2c4cea=this['item']()[_0x5bddc6(0x6e0)];return _0x2c4cea[_0x5bddc6(0x299)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore']['Game_Action_needsSelection']=Game_Action[_0x579382(0x448)][_0x579382(0x377)],Game_Action[_0x579382(0x448)]['needsSelection']=function(){const _0x1758c2=_0x579382;if(this[_0x1758c2(0x5d4)]()&&!this[_0x1758c2(0x392)]())return'DGBbD'!==_0x1758c2(0x934)?this[_0x1758c2(0xb0a)]():this['_immortal'];else{if(_0x1758c2(0xc36)!==_0x1758c2(0xc36))this['_pattern']++;else return VisuMZ[_0x1758c2(0x675)][_0x1758c2(0x7f6)][_0x1758c2(0xb95)](this);}},Game_Action[_0x579382(0x448)][_0x579382(0xb0a)]=function(){const _0x23bedb=_0x579382,_0x208877=this[_0x23bedb(0x270)]()[_0x23bedb(0x6e0)];if(_0x208877[_0x23bedb(0x299)](/RANDOM/i))return![];if(_0x208877['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x208877[_0x23bedb(0x299)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x23bedb(0x675)][_0x23bedb(0x7f6)][_0x23bedb(0xb95)](this);},VisuMZ['BattleCore']['Game_Action_makeTargets']=Game_Action['prototype'][_0x579382(0x470)],Game_Action['prototype'][_0x579382(0x470)]=function(){const _0x545677=_0x579382;let _0x109b03=[];return this[_0x545677(0x5d4)]()?_0x109b03=this[_0x545677(0xb54)]():_0x109b03=VisuMZ['BattleCore'][_0x545677(0x26c)][_0x545677(0xb95)](this),_0x109b03=this[_0x545677(0xb29)](_0x109b03),_0x109b03;},Game_Action[_0x579382(0x448)]['makeTargetsBattleCore']=function(){const _0x101844=_0x579382;let _0x1cf05d=[];const _0x575ccb=String(this[_0x101844(0x270)]()[_0x101844(0x6e0)]),_0x1a4cd7=VisuMZ['BattleCore'][_0x101844(0x6da)](this[_0x101844(0x270)](),'Targets');if(VisuMZ[_0x101844(0x675)]['JS'][_0x1a4cd7]){_0x1cf05d=VisuMZ[_0x101844(0x675)][_0x101844(0x26c)][_0x101844(0xb95)](this);const _0x19e3c3=VisuMZ['BattleCore']['createKeyJS'](this[_0x101844(0x270)](),'Targets');return _0x1cf05d=VisuMZ['BattleCore']['JS'][_0x19e3c3]['call'](this,this[_0x101844(0xaed)](),_0x1cf05d),this[_0x101844(0x7a1)](_0x1cf05d);}if(_0x575ccb[_0x101844(0x299)](/(\d+) RANDOM ANY/i)){if(_0x101844(0x76c)==='GMqhR')return this[_0x101844(0xb01)]();else{let _0x27f176=Number(RegExp['$1']);while(_0x27f176--){const _0x2350b4=Math[_0x101844(0x541)](0x2)===0x0?this[_0x101844(0x851)]():this[_0x101844(0x24e)]();_0x1cf05d[_0x101844(0x226)](_0x2350b4[_0x101844(0x8b5)]());}return this[_0x101844(0x7a1)](_0x1cf05d);}}if(_0x575ccb[_0x101844(0x299)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x202540=Number(RegExp['$1']);while(_0x202540--){_0x101844(0x393)!==_0x101844(0x393)?_0x283736[_0x101844(0x9a6)](this[_0x101844(0x75b)][_0x101844(0x9df)](this,_0x45940b,_0x2443e4,_0x4ad1d9,_0x3a5834)):_0x1cf05d[_0x101844(0x226)](this[_0x101844(0x851)]()[_0x101844(0x8b5)]());}return this['repeatTargets'](_0x1cf05d);}if(_0x575ccb[_0x101844(0x299)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if('ZdAPL'!==_0x101844(0x27a)){let _0x1fcf0e=Number(RegExp['$1']);while(_0x1fcf0e--){_0x1cf05d[_0x101844(0x226)](this[_0x101844(0x24e)]()[_0x101844(0x8b5)]());}return this[_0x101844(0x7a1)](_0x1cf05d);}else return _0x45c59c[_0x101844(0x560)][_0x101844(0x299)](/<COMMAND ICON: (\d+)>/i)?_0x5421d3(_0x44c2b2['$1']):_0x2c7eb9['iconIndex'];}if(_0x575ccb[_0x101844(0x299)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x101844(0x715)===_0x101844(0x5c3))_0x3ccc45[_0x101844(0x4a6)]();else return _0x1cf05d[_0x101844(0x226)](...this[_0x101844(0x24e)]()[_0x101844(0x3a1)]()[_0x101844(0xa1c)](_0x4ee517=>_0x4ee517!==this['subject']())),this[_0x101844(0x7a1)](_0x1cf05d);}return VisuMZ['BattleCore'][_0x101844(0x26c)][_0x101844(0xb95)](this);},Game_Action['prototype'][_0x579382(0xcaf)]=function(_0x4dfe3c){const _0xa64a05=_0x579382,_0x380e33=[];for(let _0xa5257f=0x0;_0xa5257f<this[_0xa64a05(0x5dc)]();_0xa5257f++){if(_0xa64a05(0x311)==='GFIss')_0x380e33[_0xa64a05(0x226)](_0x4dfe3c[_0xa64a05(0x8b5)]());else{_0x29c113(_0xa64a05(0x830)),_0x45e527[_0xa64a05(0x25d)]();return;}}return _0x380e33;},Game_Action['prototype'][_0x579382(0xb29)]=function(_0x47ef66){const _0x30363f=_0x579382;if(!this[_0x30363f(0x270)]())return _0x47ef66;const _0x142c82=this[_0x30363f(0x270)]()[_0x30363f(0x560)];return _0x142c82['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x47ef66['remove'](this[_0x30363f(0xaed)]()),_0x47ef66;},VisuMZ[_0x579382(0x675)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x579382(0x448)][_0x579382(0x1ed)],Game_Action['prototype']['itemEffectAddAttackState']=function(_0x5a39b3,_0xd6111a){const _0x176543=_0x579382;VisuMZ[_0x176543(0x675)]['Game_Action_itemEffectAddAttackState']['call'](this,_0x5a39b3,_0xd6111a);if(!_0x5a39b3['isImmortal']())return;for(const _0x576629 of this[_0x176543(0xaed)]()[_0x176543(0x356)]()){if(_0x576629===_0x5a39b3[_0x176543(0x7e5)]()){if(_0x176543(0x585)===_0x176543(0x585)){let _0x2beb0b=_0xd6111a[_0x176543(0xa5c)];_0x2beb0b*=_0x5a39b3['stateRate'](_0x576629),_0x2beb0b*=this[_0x176543(0xaed)]()[_0x176543(0xb50)](_0x576629),_0x2beb0b*=this['lukEffectRate'](_0x5a39b3),Math['random']()<_0x2beb0b&&(_0x176543(0xc8b)!==_0x176543(0x27e)?(_0x5a39b3['_deathStateApplied']=!![],this[_0x176543(0x8fc)](_0x5a39b3)):this[_0x176543(0x35c)](_0x3e6802,_0x115862));}else{const _0x4084ea=_0x2c5c22[_0x176543(0x675)][_0x176543(0x27f)][_0x176543(0xbf4)];if(_0x4084ea['StatusWindowSelectableBackHide'])return;_0x41b55d[_0x176543(0x448)][_0x176543(0x9b7)][_0x176543(0xb95)](this,_0x295e3e);}}}},VisuMZ[_0x579382(0x675)][_0x579382(0x814)]=Game_Action[_0x579382(0x448)]['itemEffectAddNormalState'],Game_Action[_0x579382(0x448)][_0x579382(0xc7f)]=function(_0x41fbe0,_0x31fed4){const _0x3d5042=_0x579382;VisuMZ[_0x3d5042(0x675)][_0x3d5042(0x814)][_0x3d5042(0xb95)](this,_0x41fbe0,_0x31fed4);if(!_0x41fbe0[_0x3d5042(0x553)]())return;if(_0x31fed4[_0x3d5042(0x458)]!==_0x41fbe0['deathStateId']())return;let _0x400145=_0x31fed4[_0x3d5042(0xa5c)];if(!this[_0x3d5042(0xaf9)]()){if(_0x3d5042(0x9f6)!==_0x3d5042(0x9f6))return _0x44136d[_0x3d5042(0x675)]['Settings'][_0x3d5042(0x6d6)][_0x3d5042(0x4bd)]['call'](this);else _0x400145*=_0x41fbe0[_0x3d5042(0xc93)](_0x31fed4['dataId']),_0x400145*=this['lukEffectRate'](_0x41fbe0);}if(Math[_0x3d5042(0xc4a)]()<_0x400145){if(_0x3d5042(0x90a)===_0x3d5042(0xbd8)){this[_0x3d5042(0x444)][_0x3d5042(0x8c2)]=_0x28d2bc[_0x3d5042(0x9b3)],this[_0x3d5042(0x444)][_0x3d5042(0x55e)]='';return;}else _0x41fbe0[_0x3d5042(0xa25)]=!![],this[_0x3d5042(0x8fc)](_0x41fbe0);}},VisuMZ[_0x579382(0x675)][_0x579382(0xbdd)]=Game_Action[_0x579382(0x448)][_0x579382(0x1ca)],Game_Action[_0x579382(0x448)][_0x579382(0x1ca)]=function(){const _0x18fa36=_0x579382;VisuMZ[_0x18fa36(0x675)][_0x18fa36(0xbdd)]['call'](this),this[_0x18fa36(0xb59)](),this['resetResultSwitches']();},Game_Action['prototype'][_0x579382(0xb59)]=function(){const _0x5f2785=_0x579382;if(!SceneManager[_0x5f2785(0xc65)]())return;const _0xe839b2=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x21ddab=this['item']()['note']['match'](_0xe839b2);if(_0x21ddab){if(_0x5f2785(0x5bc)!=='YEWel'){const _0x3bdd0a=this[_0x5f2785(0x270)]()['scope'];return _0x3bdd0a[_0x5f2785(0x299)](/(?:RAND|RANDOM)/i);}else for(const _0x589b8b of _0x21ddab){if('XTDSV'===_0x5f2785(0xab6)){const _0xf24114=this['_borderPortraitDuration'],_0x2ae46d=this[_0x5f2785(0x444)];_0x2ae46d['x']=(_0x2ae46d['x']*(_0xf24114-0x1)+this[_0x5f2785(0xb76)])/_0xf24114,_0x2ae46d['opacity']=(_0x2ae46d[_0x5f2785(0xcbd)]*(_0xf24114-0x1)+0xff)/_0xf24114,this[_0x5f2785(0x6e7)]--;}else{if(!_0x589b8b)continue;_0x589b8b['match'](_0xe839b2);const _0xb701d8=String(RegExp['$1'])[_0x5f2785(0x810)](',')[_0x5f2785(0xb6e)](_0x326668=>String(_0x326668)[_0x5f2785(0x8f5)]()),_0x1d901d=_0xb701d8[_0x5f2785(0xb6e)](_0x54f55d=>DataManager[_0x5f2785(0xb7a)](_0x54f55d));for(const _0x38549a of _0x1d901d){const _0x5600d0=$dataCommonEvents[_0x38549a];if(_0x5600d0){if(_0x5f2785(0x7f0)==='SvmSl')$gameTemp[_0x5f2785(0xb36)](_0x38549a);else{if(!_0x618dac['isSceneBattle']())return;if(!_0x378033[_0x5f2785(0xb4d)])return;const _0x3c412d=_0x7d18fa[_0x5f2785(0x6c2)]();if(!_0x3c412d)return;_0x3c412d[_0x5f2785(0x9c8)]('battleAngle');}}}}}}},DataManager[_0x579382(0xb7a)]=function(_0x47f6ce){const _0x5a62b9=_0x579382;_0x47f6ce=_0x47f6ce[_0x5a62b9(0x2ed)]()[_0x5a62b9(0x8f5)](),this[_0x5a62b9(0x3f9)]=this[_0x5a62b9(0x3f9)]||{};if(this[_0x5a62b9(0x3f9)][_0x47f6ce])return this[_0x5a62b9(0x3f9)][_0x47f6ce];for(const _0x3a236e of $dataCommonEvents){if(_0x5a62b9(0x3c3)!=='GNKYE'){if(!_0x3a236e)continue;let _0xcb774d=_0x3a236e[_0x5a62b9(0x1d8)];_0xcb774d=_0xcb774d['replace'](/\x1I\[(\d+)\]/gi,''),_0xcb774d=_0xcb774d[_0x5a62b9(0xc42)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0xcb774d[_0x5a62b9(0x2ed)]()[_0x5a62b9(0x8f5)]()]=_0x3a236e['id'];}else{if(this['isHidden']())return![];if(this[_0x5a62b9(0x884)]()&&this['isAppeared']())return!![];if(this[_0x5a62b9(0xa31)]()&&this['hasSvBattler']()){if(this[_0x5a62b9(0x84b)]()&&this[_0x5a62b9(0x6a4)]())return![];}else{if(this[_0x5a62b9(0x84b)]())return![];}return!![];}}return this['_commonEventIDs'][_0x47f6ce]||0x0;},Game_Action[_0x579382(0x448)]['resetResultSwitches']=function(){const _0x5a4e2f=_0x579382;if(!SceneManager[_0x5a4e2f(0xc65)]())return;const _0x49ef3a=VisuMZ[_0x5a4e2f(0x675)][_0x5a4e2f(0x27f)][_0x5a4e2f(0x4c5)];if(_0x49ef3a[_0x5a4e2f(0x67b)]){if(_0x5a4e2f(0x43d)===_0x5a4e2f(0x43d))$gameSwitches[_0x5a4e2f(0xc72)](_0x49ef3a[_0x5a4e2f(0x67b)],![]);else{if(_0x507611[_0x5a4e2f(0x748)][_0x5a4e2f(0xbbd)]())return!![];this[_0x5a4e2f(0x6ef)]='';}}_0x49ef3a[_0x5a4e2f(0x4f3)]&&(_0x5a4e2f(0x680)===_0x5a4e2f(0x680)?$gameSwitches[_0x5a4e2f(0xc72)](_0x49ef3a[_0x5a4e2f(0x4f3)],![]):_0x42ac3b=(_0x22dd40+_0x36cab2)/0x2);_0x49ef3a['VariableDmg']&&$gameVariables['setValue'](_0x49ef3a[_0x5a4e2f(0x7aa)],0x0);if(_0x49ef3a[_0x5a4e2f(0xc3a)]){if(_0x5a4e2f(0x6dd)==='LoAlg'){if(this['allowCollapse']())_0x579fa1['BattleCore'][_0x5a4e2f(0x36c)][_0x5a4e2f(0xb95)](this);}else $gameVariables['setValue'](_0x49ef3a[_0x5a4e2f(0xc3a)],0x0);}},Game_Action[_0x579382(0x448)]['applyResultSwitches']=function(_0x588b3c){const _0x1edc2f=_0x579382;if(!SceneManager[_0x1edc2f(0xc65)]())return;if(!_0x588b3c)return;const _0x199570=_0x588b3c[_0x1edc2f(0x1b1)](),_0xf65c5a=VisuMZ['BattleCore'][_0x1edc2f(0x27f)][_0x1edc2f(0x4c5)];_0xf65c5a['SwitchCritical']&&_0x199570[_0x1edc2f(0x8df)]&&$gameSwitches[_0x1edc2f(0xc72)](_0xf65c5a[_0x1edc2f(0x67b)],!![]);if(_0xf65c5a['SwitchMissEvade']&&(_0x199570[_0x1edc2f(0x21e)]||_0x199570[_0x1edc2f(0x63a)])){if(_0x1edc2f(0xc6b)==='Fjong'){let _0x4294b5=_0x1edc2f(0x589);if(this[_0x1edc2f(0x44c)](_0x4294b5))return this[_0x1edc2f(0x685)][_0x4294b5];return this[_0x1edc2f(0x685)][_0x4294b5]=this[_0x1edc2f(0x9a0)](this[_0x1edc2f(0x6b7)]()),this[_0x1edc2f(0x685)][_0x4294b5];}else $gameSwitches[_0x1edc2f(0xc72)](_0xf65c5a['SwitchMissEvade'],!![]);}if(_0xf65c5a[_0x1edc2f(0x7aa)]){let _0x4280fb=$gameVariables['value'](_0xf65c5a['VariableDmg']);_0x199570[_0x1edc2f(0xa1e)]>0x0&&(_0x4280fb+=Math[_0x1edc2f(0x2f5)](_0x199570['hpDamage'])),$gameVariables['setValue'](_0xf65c5a[_0x1edc2f(0x7aa)],_0x4280fb);}if(_0xf65c5a['VariableHeal']){let _0x21be86=$gameVariables['value'](_0xf65c5a[_0x1edc2f(0xc3a)]);_0x199570[_0x1edc2f(0xa1e)]<0x0&&(_0x1edc2f(0xa68)==='NsJDy'?_0x21be86+=Math[_0x1edc2f(0x2f5)](_0x199570['hpDamage']):this[_0x1edc2f(0x3f1)]()),$gameVariables['setValue'](_0xf65c5a[_0x1edc2f(0xc3a)],_0x21be86);}},VisuMZ['BattleCore'][_0x579382(0x840)]=Game_BattlerBase['prototype'][_0x579382(0x974)],Game_BattlerBase['prototype']['initMembers']=function(){const _0x4ef415=_0x579382;VisuMZ[_0x4ef415(0x675)][_0x4ef415(0x840)][_0x4ef415(0xb95)](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x579382(0x448)][_0x579382(0x625)]=function(){const _0x5c9f0e=_0x579382;this[_0x5c9f0e(0x4e7)]=![];},VisuMZ[_0x579382(0x675)][_0x579382(0xbfb)]=Game_BattlerBase[_0x579382(0x448)]['refresh'],Game_BattlerBase[_0x579382(0x448)][_0x579382(0x396)]=function(){const _0x4c9f08=_0x579382;this[_0x4c9f08(0x685)]={},VisuMZ[_0x4c9f08(0x675)][_0x4c9f08(0xbfb)][_0x4c9f08(0xb95)](this);},Game_BattlerBase[_0x579382(0x448)]['checkCacheKey']=function(_0x2f9563){const _0x667ba0=_0x579382;return this[_0x667ba0(0x685)]=this['_cache']||{},this['_cache'][_0x2f9563]!==undefined;},Game_BattlerBase[_0x579382(0x448)][_0x579382(0x31e)]=function(){const _0x72590=_0x579382;if(this[_0x72590(0x685)][_0x72590(0x31e)]!==undefined)return this[_0x72590(0x685)][_0x72590(0x31e)];const _0x49ca49=/<DAMAGE CAP:[ ](\d+)>/i,_0x591c0b=this['traitObjects']()['map'](_0x3c434d=>_0x3c434d&&_0x3c434d[_0x72590(0x560)][_0x72590(0x299)](_0x49ca49)?Number(RegExp['$1']):0x0);let _0x4fb738=_0x591c0b[_0x72590(0x237)]>0x0?Math['max'](..._0x591c0b):0x0;if(_0x4fb738<=0x0)_0x4fb738=VisuMZ[_0x72590(0x675)][_0x72590(0x27f)][_0x72590(0x547)][_0x72590(0xc24)];return this[_0x72590(0x685)][_0x72590(0x31e)]=_0x4fb738,this[_0x72590(0x685)][_0x72590(0x31e)];},Game_BattlerBase[_0x579382(0x448)]['softDamageCapRate']=function(){const _0x377b82=_0x579382;if(this[_0x377b82(0x685)]['softDamageCap']!==undefined)return this[_0x377b82(0x685)]['softDamageCap'];let _0x3a997f=VisuMZ['BattleCore'][_0x377b82(0x27f)]['Damage'][_0x377b82(0x260)];const _0x459a34=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x46fb30=this[_0x377b82(0x2bf)]()[_0x377b82(0xb6e)](_0x133235=>_0x133235&&_0x133235[_0x377b82(0x560)][_0x377b82(0x299)](_0x459a34)?Number(RegExp['$1'])/0x64:0x0);return _0x3a997f=_0x46fb30[_0x377b82(0x3ad)]((_0x415e60,_0x3ad075)=>_0x415e60+_0x3ad075,_0x3a997f),this[_0x377b82(0x685)]['softDamageCap']=_0x3a997f,this['_cache']['softDamageCap'][_0x377b82(0x8c7)](0.01,0x1);},VisuMZ[_0x579382(0x675)]['Game_BattlerBase_die']=Game_BattlerBase[_0x579382(0x448)]['die'],Game_BattlerBase[_0x579382(0x448)][_0x579382(0x335)]=function(){const _0x3753ea=_0x579382;VisuMZ[_0x3753ea(0x675)][_0x3753ea(0x1b2)]['call'](this),SceneManager['isSceneBattle']()&&this[_0x3753ea(0x305)]('dead');},Game_BattlerBase[_0x579382(0x448)][_0x579382(0x368)]=function(){const _0x60a5ae=_0x579382;if(!SceneManager[_0x60a5ae(0xc65)]())return null;if(!SceneManager[_0x60a5ae(0xbc5)][_0x60a5ae(0x748)])return null;return SceneManager[_0x60a5ae(0xbc5)][_0x60a5ae(0x748)][_0x60a5ae(0x527)](this);},Game_BattlerBase[_0x579382(0x448)][_0x579382(0x836)]=function(){const _0x4ae491=_0x579382;return VisuMZ['BattleCore'][_0x4ae491(0x27f)][_0x4ae491(0x7b6)]['AnchorX'];},Game_BattlerBase['prototype'][_0x579382(0x9b0)]=function(){const _0x22cfec=_0x579382;return VisuMZ[_0x22cfec(0x675)]['Settings'][_0x22cfec(0x7b6)][_0x22cfec(0x296)];},Game_BattlerBase[_0x579382(0x448)]['svBattlerShadowVisible']=function(){const _0x58eb4f=_0x579382;return this[_0x58eb4f(0xc58)]&&this[_0x58eb4f(0xc58)]()?VisuMZ['BattleCore'][_0x58eb4f(0x27f)][_0x58eb4f(0x7b6)][_0x58eb4f(0x276)]:VisuMZ['BattleCore'][_0x58eb4f(0x27f)][_0x58eb4f(0x8ff)][_0x58eb4f(0x276)];},Game_BattlerBase[_0x579382(0x448)][_0x579382(0x4fa)]=function(){return!![];},Game_BattlerBase['prototype']['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x579382(0x448)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x579382(0x9a0)]=function(_0x488800){const _0x3a2430=_0x579382;if(!_0x488800)return 0x0;let _0x8c5067=0x0;const _0x5f0272=_0x488800[_0x3a2430(0x560)];if(_0x5f0272[_0x3a2430(0x299)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x3a2430(0x838)!==_0x3a2430(0x5b0))_0x8c5067+=Number(RegExp['$1']);else{this[_0x3a2430(0x81e)]=_0x37579b['MOTIONS'][_0x3a2430(0xb2e)];return;}}return _0x5f0272[_0x3a2430(0x299)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x8c5067+=Number(RegExp['$1'])),_0x8c5067;},Game_BattlerBase[_0x579382(0x448)][_0x579382(0x4ac)]=function(_0xe5f86a){const _0x576724=_0x579382;if(!_0xe5f86a)return 0x0;let _0x4188c7=0x0;const _0x2ed97f=_0xe5f86a[_0x576724(0x560)];_0x2ed97f[_0x576724(0x299)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x4188c7+=Number(RegExp['$1']));if(_0x2ed97f[_0x576724(0x299)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x576724(0x24b)!=='pIdnk')return this[_0x576724(0x9e2)]()['some'](_0x29ad46=>_0x29ad46[_0x576724(0x362)]());else _0x4188c7+=Number(RegExp['$2']);}return _0x4188c7;},VisuMZ[_0x579382(0x675)][_0x579382(0xb99)]=Game_BattlerBase[_0x579382(0x448)][_0x579382(0x561)],Game_BattlerBase[_0x579382(0x448)]['isStateResist']=function(_0x5b8e88){const _0x26af28=_0x579382;if(_0x5b8e88===this['deathStateId']()&&this[_0x26af28(0x553)]())return!![];return VisuMZ[_0x26af28(0x675)][_0x26af28(0xb99)]['call'](this,_0x5b8e88);},Game_BattlerBase[_0x579382(0x448)][_0x579382(0x553)]=function(){const _0x35845f=_0x579382;return this[_0x35845f(0x4e7)];},Game_BattlerBase[_0x579382(0x448)][_0x579382(0xa8b)]=function(_0x29dbf7){const _0x2d50bb=_0x579382;_0x29dbf7?this[_0x2d50bb(0x1a0)]():this[_0x2d50bb(0x82f)]();},Game_BattlerBase['prototype'][_0x579382(0x1a0)]=function(){const _0x268b90=_0x579382;if(this[_0x268b90(0x84b)]())return;this['_immortal']=!![],this[_0x268b90(0xa25)]=![];},Game_BattlerBase['prototype'][_0x579382(0x82f)]=function(){const _0x5d095f=_0x579382,_0x44be84=this['isAlive']();this['_immortal']=![];if(_0x44be84&&this[_0x5d095f(0xa25)]){if('JlPKQ'===_0x5d095f(0xa74))return this[_0x5d095f(0x611)]()?this[_0x5d095f(0xa7f)][_0x5d095f(0x6a4)]():!![];else this[_0x5d095f(0x335)]();}this[_0x5d095f(0xa25)]=![],this[_0x5d095f(0x396)]();if(this['isDead']()&&_0x44be84){if('FJDOt'!=='MhbLM')this['performCollapse'](),this[_0x5d095f(0x970)]();else{if(!_0x1d346f[_0x5d095f(0xc65)]())return;_0x154066[_0x5d095f(0x6dc)](_0x3a03fa,_0xddbe4b);const _0x32f233=_0x1328f4[_0x5d095f(0x6c2)](),_0x1868f1=_0xea1906[_0x5d095f(0x3ca)],_0x3a2dc8=_0x1c59c3['_subject'],_0x23e72b=_0x53e989[_0x5d095f(0x9ab)]?_0xcb282e[_0x5d095f(0x9ab)][_0x5d095f(0x989)](0x0):[],_0x47e4fc=_0x8a18a9['_logWindow'];if(!_0x32f233||!_0x1868f1||!_0x3a2dc8)return;if(!_0x1868f1[_0x5d095f(0x270)]())return;if(_0x2067c3['DisplayAction'])_0x47e4fc[_0x5d095f(0x40c)](_0x3a2dc8,_0x1868f1['item']());_0x2b02d2[_0x5d095f(0x467)]&&_0x47e4fc[_0x5d095f(0x226)](_0x5d095f(0x227),_0x3a2dc8,_0x23e72b,!![]);if(_0x240331[_0x5d095f(0x9ad)])_0x47e4fc[_0x5d095f(0x226)]('performActionStart',_0x3a2dc8,_0x1868f1);if(_0xda7fdf['WaitForMovement'])_0x47e4fc[_0x5d095f(0x226)](_0x5d095f(0xc04));if(_0x4f0d40['CastAnimation'])_0x47e4fc[_0x5d095f(0x226)]('performCastAnimation',_0x3a2dc8,_0x1868f1);if(_0xc7473b[_0x5d095f(0x8d2)])_0x47e4fc[_0x5d095f(0x226)](_0x5d095f(0x3c6));_0x32f233[_0x5d095f(0x9c8)](_0x5d095f(0x8cd));}}},VisuMZ[_0x579382(0x675)]['Game_Action_numRepeats']=Game_Action[_0x579382(0x448)][_0x579382(0x686)],Game_Action[_0x579382(0x448)]['numRepeats']=function(){const _0x486919=_0x579382;if(this[_0x486919(0x270)]())return VisuMZ[_0x486919(0x675)]['Game_Action_numRepeats']['call'](this);else{if(_0x486919(0x46e)===_0x486919(0x3eb))this[_0x486919(0x518)](),this[_0x486919(0x562)]=null,this[_0x486919(0x5bb)]=![];else return 0x0;}},VisuMZ[_0x579382(0x675)][_0x579382(0xbd9)]=Game_Action['prototype'][_0x579382(0xc03)],Game_Action['prototype'][_0x579382(0xc03)]=function(){const _0x251e5f=_0x579382;this[_0x251e5f(0xaed)]()&&this[_0x251e5f(0xaed)]()['canAttack']()?VisuMZ[_0x251e5f(0x675)][_0x251e5f(0xbd9)]['call'](this):this[_0x251e5f(0x3f1)]();},VisuMZ[_0x579382(0x675)][_0x579382(0xa33)]=Game_BattlerBase[_0x579382(0x448)]['canAttack'],Game_BattlerBase[_0x579382(0x448)]['canAttack']=function(){const _0x4f173a=_0x579382;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x4f173a(0x675)][_0x4f173a(0xa33)][_0x4f173a(0xb95)](this);},Game_BattlerBase[_0x579382(0x448)]['canAttackBattleCore']=function(){const _0x38e392=_0x579382;for(const _0x4ce8d1 of this[_0x38e392(0x2bf)]()){if(!_0x4ce8d1)continue;if(_0x4ce8d1[_0x38e392(0x560)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x579382(0x675)][_0x579382(0x222)]=Game_Action['prototype'][_0x579382(0x1b4)],Game_Action[_0x579382(0x448)][_0x579382(0x1b4)]=function(){const _0x157995=_0x579382;this[_0x157995(0xaed)]()[_0x157995(0xaa8)]()&&('crFxE'===_0x157995(0x802)?VisuMZ['BattleCore'][_0x157995(0x222)]['call'](this):(this['_forcedHomeX']=_0x5b922e,this[_0x157995(0x959)]=_0x30509a));},VisuMZ[_0x579382(0x675)][_0x579382(0x7ab)]=Game_BattlerBase[_0x579382(0x448)][_0x579382(0xaa8)],Game_BattlerBase['prototype'][_0x579382(0xaa8)]=function(){const _0xff2aae=_0x579382;if(!this[_0xff2aae(0xc38)]())return![];return VisuMZ[_0xff2aae(0x675)]['Game_BattlerBase_canGuard'][_0xff2aae(0xb95)](this);},Game_BattlerBase['prototype'][_0x579382(0xc38)]=function(){const _0x1cf44d=_0x579382;for(const _0x4aac2f of this['traitObjects']()){if(!_0x4aac2f)continue;if(_0x4aac2f[_0x1cf44d(0x560)][_0x1cf44d(0x299)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x579382(0x448)][_0x579382(0x6ec)]=function(){const _0x15fcfc=_0x579382;for(const _0x1e1bfe of this[_0x15fcfc(0x2bf)]()){if(_0x15fcfc(0x835)==='NOQal'){if(!_0x1e1bfe)continue;if(_0x1e1bfe[_0x15fcfc(0x560)][_0x15fcfc(0x299)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}else return![];}return!![];},Game_Battler[_0x579382(0x448)][_0x579382(0x872)]=function(){const _0x4e4960=_0x579382;return VisuMZ[_0x4e4960(0x675)][_0x4e4960(0x27f)]['Mechanics'][_0x4e4960(0x3d2)];},VisuMZ[_0x579382(0x675)][_0x579382(0xa63)]=Game_Battler[_0x579382(0x448)][_0x579382(0xa04)],Game_Battler[_0x579382(0x448)][_0x579382(0xa04)]=function(){const _0x3afeb9=_0x579382;if(SceneManager[_0x3afeb9(0xc65)]()){if(BattleManager['isTpb']()){if(this[_0x3afeb9(0x40d)]()<=0x0)return;}else{if($gameTroop[_0x3afeb9(0x40d)]()<=0x0){if('aZxIu'!==_0x3afeb9(0xab3))return;else this[_0x3afeb9(0xb0b)][_0x3afeb9(0x6f3)]();}}}if(SceneManager[_0x3afeb9(0xc65)]()&&BattleManager[_0x3afeb9(0x630)]()&&this[_0x3afeb9(0x780)]===Graphics['frameCount']){if('hjKzO'!==_0x3afeb9(0x501))return;else this[_0x3afeb9(0x305)](_0x3afeb9(0x947));}this[_0x3afeb9(0x780)]=Graphics[_0x3afeb9(0x73c)],SceneManager['isSceneBattle']()&&this[_0x3afeb9(0xad8)]('PreRegenerateJS'),VisuMZ[_0x3afeb9(0x675)][_0x3afeb9(0xa63)]['call'](this),SceneManager['isSceneBattle']()&&(this[_0x3afeb9(0x2c7)](),this[_0x3afeb9(0xad8)](_0x3afeb9(0x7fe)));},Game_Battler['prototype'][_0x579382(0x2c7)]=function(){const _0x3a0678=_0x579382;if(SceneManager[_0x3a0678(0xc65)]())for(const _0xc67d02 of this[_0x3a0678(0x2bf)]()){if(!_0xc67d02)continue;this[_0x3a0678(0x4e5)](_0xc67d02);}},Game_Battler[_0x579382(0x448)][_0x579382(0x4e5)]=function(_0x250a1d){const _0x5d988f=_0x579382;if(!Imported[_0x5d988f(0x214)])return;if(!SceneManager[_0x5d988f(0xc65)]())return;if(this[_0x5d988f(0x84b)]())return;if(this['isHidden']())return;if(_0x250a1d[_0x5d988f(0x560)][_0x5d988f(0x299)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x5d988f(0x76e)===_0x5d988f(0x76e)){const _0x3a2ac1=Number(RegExp['$1']);$gameTemp[_0x5d988f(0x584)]([this],_0x3a2ac1,![],![]);}else for(const _0x967ebc of _0x42ee0b){for(const _0x29bfdd of _0x18835c){const _0x1552ba=_0xec56ef[0x0][_0x5d988f(0x7e1)](_0x29bfdd[0x0],_0x967ebc[0x0]),_0x24db6c=_0xdccbc3[0x1][_0x5d988f(0x7e1)](_0x29bfdd[0x1],_0x967ebc[0x1])[_0x5d988f(0x8f5)](),_0x31ef6c=new _0x14bc36(_0x4c91e6[_0x5d988f(0x7e1)](_0x24db6c),'i');_0x1957e5[_0x1552ba]=_0x31ef6c;}}}},VisuMZ[_0x579382(0x675)][_0x579382(0xbba)]=Game_Battler[_0x579382(0x448)][_0x579382(0xb08)],Game_Battler['prototype'][_0x579382(0xb08)]=function(){const _0x57a9d8=_0x579382;this[_0x57a9d8(0xad8)]('PreStartTurnJS'),VisuMZ[_0x57a9d8(0x675)][_0x57a9d8(0xbba)][_0x57a9d8(0xb95)](this),this[_0x57a9d8(0xad8)](_0x57a9d8(0x2ba));},VisuMZ['BattleCore'][_0x579382(0x587)]=Game_Battler['prototype'][_0x579382(0x5ed)],Game_Battler[_0x579382(0x448)][_0x579382(0x5ed)]=function(){const _0x4fe644=_0x579382;this[_0x4fe644(0xad8)](_0x4fe644(0x80d)),VisuMZ[_0x4fe644(0x675)][_0x4fe644(0x587)]['call'](this),this[_0x4fe644(0xad8)](_0x4fe644(0x1d2));},Game_Battler[_0x579382(0x448)][_0x579382(0xad8)]=function(_0x600d1e){const _0x4dc2b2=_0x579382;if(this[_0x4dc2b2(0xc92)]||this[_0x4dc2b2(0x99c)])return;const _0xa8ea3c=VisuMZ[_0x4dc2b2(0x675)][_0x4dc2b2(0x27f)]['Mechanics'];if(_0xa8ea3c[_0x600d1e])_0xa8ea3c[_0x600d1e][_0x4dc2b2(0xb95)](this);for(const _0x4def6e of this[_0x4dc2b2(0x2bf)]()){if(_0x4dc2b2(0xc37)!=='FMacd')_0x482151+=_0x331eac(_0x89cfda['$1']);else{if(!_0x4def6e)continue;key=VisuMZ[_0x4dc2b2(0x675)][_0x4dc2b2(0x6da)](_0x4def6e,_0x600d1e),VisuMZ[_0x4dc2b2(0x675)]['JS'][key]&&VisuMZ[_0x4dc2b2(0x675)]['JS'][key]['call'](this,this,this,_0x4def6e,0x0);}}},Game_Battler['prototype'][_0x579382(0x583)]=function(){const _0x432a0b=_0x579382;return VisuMZ[_0x432a0b(0x675)][_0x432a0b(0x27f)]['Actor']['ChantStyle']||![];},Game_Battler['prototype']['isChanting']=function(){const _0x2727c7=_0x579382;if(this[_0x2727c7(0xada)]()){if(this[_0x2727c7(0x583)]()){if(this[_0x2727c7(0x65b)]['some'](_0x520899=>_0x520899[_0x2727c7(0x270)]()&&_0x520899['isMagical']()))return!![];}else{if(_0x2727c7(0x96e)===_0x2727c7(0x96e)){if(this['_actions']['some'](_0x39d7fd=>_0x39d7fd[_0x2727c7(0x270)]()&&_0x39d7fd[_0x2727c7(0xc47)]())){if(_0x2727c7(0x69d)!=='XVFyD')_0x45e716[_0x2727c7(0xb49)]=!![];else return!![];}}else this[_0x2727c7(0x921)](...arguments);}}if(BattleManager[_0x2727c7(0x630)]()&&this['_tpbState']===_0x2727c7(0x945)){if(this['chantStyle']())return this[_0x2727c7(0x5ee)]()&&this['currentAction']()[_0x2727c7(0x270)]()&&this['currentAction']()[_0x2727c7(0x95b)]();else{if(_0x2727c7(0xc11)===_0x2727c7(0xc11))return this[_0x2727c7(0x5ee)]()&&this[_0x2727c7(0x5ee)]()[_0x2727c7(0x270)]()&&this[_0x2727c7(0x5ee)]()[_0x2727c7(0xc47)]();else _0x5db116[_0x2727c7(0x675)][_0x2727c7(0x2a6)]&&_0x378805[_0x2727c7(0x675)][_0x2727c7(0x2a6)][_0x2727c7(0xb95)](this,_0x94c904),_0x545e18[_0x2727c7(0x675)][_0x2727c7(0xc75)](_0x5c30a0);}}return![];},Game_Battler['prototype'][_0x579382(0x920)]=function(){const _0xd76f8=_0x579382;if(BattleManager[_0xd76f8(0x630)]()&&this[_0xd76f8(0x990)]===_0xd76f8(0x945))return this[_0xd76f8(0x583)]()?this[_0xd76f8(0x5ee)]()&&this[_0xd76f8(0x5ee)]()[_0xd76f8(0x270)]()&&!this['currentAction']()['isMagical']():this[_0xd76f8(0x5ee)]()&&this[_0xd76f8(0x5ee)]()[_0xd76f8(0x270)]()&&!this[_0xd76f8(0x5ee)]()['isMagicSkill']();return![];},VisuMZ[_0x579382(0x675)][_0x579382(0x5d2)]=Game_Battler[_0x579382(0x448)][_0x579382(0x2b2)],Game_Battler['prototype'][_0x579382(0x2b2)]=function(){const _0x470ed8=_0x579382;VisuMZ['BattleCore'][_0x470ed8(0x5d2)][_0x470ed8(0xb95)](this),this['_damagePopupArray']=[];},Game_Battler['prototype'][_0x579382(0xa91)]=function(){const _0x36912a=_0x579382;if(!this[_0x36912a(0xb9f)])this[_0x36912a(0x2b2)]();return this['_damagePopupArray']['length']>0x0;},Game_Battler['prototype'][_0x579382(0xc1c)]=function(){const _0xb48e1e=_0x579382;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0xb48e1e(0x49c)]())return;if(!this[_0xb48e1e(0xb9f)])this[_0xb48e1e(0x2b2)]();this[_0xb48e1e(0x744)]();const _0x296655=this[_0xb48e1e(0x368)]();if(_0x296655)_0x296655['setupDamagePopup']();},Game_Battler[_0x579382(0x448)]['createSeparateDamagePopups']=function(){const _0x51a280=_0x579382,_0x50cf00=this[_0x51a280(0x1b1)]();if(_0x50cf00[_0x51a280(0x21e)]||_0x50cf00['evaded']){if('VCIZd'!==_0x51a280(0x2a1)){const _0x5751f8=JsonEx[_0x51a280(0x247)](_0x50cf00);_0x5751f8['hpAffected']=![],_0x5751f8['mpDamage']=0x0,this[_0x51a280(0xb9f)][_0x51a280(0x226)](_0x5751f8);}else{if(!_0x3af76e[_0x51a280(0xc65)]())return;_0x477ed6[_0x51a280(0x6dc)](_0x5c1a0f,_0x487284);const _0x32f839=_0x37c497['getLastPluginCommandInterpreter'](),_0x38a13e=_0x7e65fc[_0x51a280(0x792)];if(!_0x32f839)return;_0x27e7e7[_0x51a280(0x71a)]--,_0x4bd1b6['_target']=_0x26af62[_0x51a280(0x9ab)][_0x31118c[_0x51a280(0x71a)]]||null,_0x409049[_0x51a280(0x6ea)]&&_0x38a13e[_0x51a280(0x2ed)]()[_0x51a280(0x8f5)]()!==_0x51a280(0x9e1)&&_0x32f839[_0x51a280(0x57a)]([_0x38a13e]);}}if(_0x50cf00[_0x51a280(0x52c)]){const _0x899ead=JsonEx[_0x51a280(0x247)](_0x50cf00);_0x899ead[_0x51a280(0x21e)]=![],_0x899ead[_0x51a280(0x63a)]=![],_0x899ead[_0x51a280(0x3a7)]=0x0,this['_damagePopupArray']['push'](_0x899ead);}if(_0x50cf00[_0x51a280(0x3a7)]!==0x0){const _0x11100d=JsonEx[_0x51a280(0x247)](_0x50cf00);_0x11100d[_0x51a280(0x21e)]=![],_0x11100d[_0x51a280(0x63a)]=![],_0x11100d['hpAffected']=![],this[_0x51a280(0xb9f)][_0x51a280(0x226)](_0x11100d);}},Game_Battler[_0x579382(0x448)][_0x579382(0x534)]=function(){const _0x36b6e1=_0x579382;if(!this[_0x36b6e1(0xb9f)])this[_0x36b6e1(0x2b2)]();if(VisuMZ[_0x36b6e1(0x675)][_0x36b6e1(0x27f)][_0x36b6e1(0x547)][_0x36b6e1(0xb67)])return this[_0x36b6e1(0xb9f)][_0x36b6e1(0x3b6)]();else{if(_0x36b6e1(0x9af)===_0x36b6e1(0x9af))return this[_0x36b6e1(0xb9f)][_0x36b6e1(0x7b0)]();else for(const _0x232497 of _0x58375f){_0x232497[_0x36b6e1(0x299)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x209d17=_0xe08e24(_0x5a25e5['$1']),_0x7e5469=_0x5637e8(_0x4ad888['$2']),_0x4757a=_0x7e5469===0x1?this[_0x36b6e1(0x5d0)]:this['_regionBattleback2'],_0xc3e238=_0x250989(_0x1e4032['$3']);_0x4757a[_0x209d17]=_0xc3e238;}}},Game_Battler[_0x579382(0x448)]['setupTextPopup']=function(_0x3dc27f,_0x19aed3){const _0x2354fa=_0x579382;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x2354fa(0x368)]())return;if(_0x3dc27f[_0x2354fa(0x237)]<=0x0)return;_0x19aed3=_0x19aed3||{},_0x19aed3[_0x2354fa(0x737)]=_0x19aed3['textColor']||'#ffffff',_0x19aed3[_0x2354fa(0x2d2)]=_0x19aed3['flashColor']||[0x0,0x0,0x0,0x0],_0x19aed3[_0x2354fa(0xac2)]=_0x19aed3[_0x2354fa(0xac2)]||0x0,this[_0x2354fa(0x368)]()[_0x2354fa(0xbfa)](_0x3dc27f,_0x19aed3);},Game_Battler['prototype'][_0x579382(0xc9e)]=function(_0xac3858,_0x3f86c0,_0x15de5f){const _0x5ab84f=_0x579382;if(!SceneManager[_0x5ab84f(0xc65)]())return;if(BattleManager[_0x5ab84f(0x49c)]())return;if(!this[_0x5ab84f(0x368)]())return;if(_0x3f86c0['length']<=0x0)return;_0x15de5f=_0x15de5f||{},_0x15de5f[_0x5ab84f(0x737)]=_0x15de5f[_0x5ab84f(0x737)]||_0x5ab84f(0x286),_0x15de5f[_0x5ab84f(0x2d2)]=_0x15de5f[_0x5ab84f(0x2d2)]||[0x0,0x0,0x0,0x0],_0x15de5f['flashDuration']=_0x15de5f[_0x5ab84f(0xac2)]||0x0,this['battler']()[_0x5ab84f(0xc9e)](_0xac3858,_0x3f86c0,_0x15de5f);},Game_Battler['prototype'][_0x579382(0x9f0)]=function(){const _0x2e52f0=_0x579382;if(this[_0x2e52f0(0x42d)]())return![];if(this[_0x2e52f0(0x884)]()&&this['isAppeared']())return!![];if(this[_0x2e52f0(0xa31)]()&&this[_0x2e52f0(0x611)]()){if(_0x2e52f0(0x452)!==_0x2e52f0(0x452))return _0x420c00[_0x2e52f0(0x675)][_0x2e52f0(0x27f)][_0x2e52f0(0xbf4)][_0x2e52f0(0x760)];else{if(this[_0x2e52f0(0x84b)]()&&this[_0x2e52f0(0x6a4)]())return![];}}else{if(this[_0x2e52f0(0x84b)]()){if(_0x2e52f0(0x310)===_0x2e52f0(0x4ce))_0x1606a5+=_0x3d4c36,_0x2e0605+=_0x17d5eb;else return![];}}return!![];},VisuMZ[_0x579382(0x675)]['Game_Battler_clearMotion']=Game_Battler['prototype'][_0x579382(0x7d1)],Game_Battler[_0x579382(0x448)][_0x579382(0x7d1)]=function(){const _0x389b3b=_0x579382;VisuMZ[_0x389b3b(0x675)][_0x389b3b(0xbef)][_0x389b3b(0xb95)](this),this[_0x389b3b(0xbaa)]();},Game_Battler[_0x579382(0x448)][_0x579382(0x29e)]=function(){return!![];},Game_Battler['prototype']['isBattlerGrounded']=function(){return![];},VisuMZ[_0x579382(0x675)]['Game_Battler_onBattleStart']=Game_Battler[_0x579382(0x448)]['onBattleStart'],Game_Battler[_0x579382(0x448)]['onBattleStart']=function(_0x46b2aa){const _0x7c06c7=_0x579382;VisuMZ['BattleCore']['Game_Battler_onBattleStart'][_0x7c06c7(0xb95)](this,_0x46b2aa),this[_0x7c06c7(0x51a)](_0x46b2aa),this['clearDamagePopup']();},Game_Battler[_0x579382(0x448)]['onBattleStartBattleCore']=function(_0x3138d1){const _0x34c398=_0x579382;this['setBattlerFlip'](![]),this[_0x34c398(0xad5)]=undefined,this[_0x34c398(0x959)]=undefined;},VisuMZ[_0x579382(0x675)]['Game_Battler_onBattleEnd']=Game_Battler['prototype'][_0x579382(0x46b)],Game_Battler[_0x579382(0x448)][_0x579382(0x46b)]=function(){const _0x274ec2=_0x579382;VisuMZ[_0x274ec2(0x675)][_0x274ec2(0x4ae)]['call'](this),this[_0x274ec2(0xc34)]();},Game_Battler[_0x579382(0x448)][_0x579382(0xc34)]=function(){const _0x115672=_0x579382;this['_forcedHomeX']=undefined,this[_0x115672(0x959)]=undefined;},VisuMZ[_0x579382(0x675)][_0x579382(0xa4f)]=Game_Battler[_0x579382(0x448)][_0x579382(0xa37)],Game_Battler[_0x579382(0x448)][_0x579382(0xa37)]=function(_0x448f8e){const _0x41de9c=_0x579382;VisuMZ['BattleCore'][_0x41de9c(0xa4f)][_0x41de9c(0xb95)](this,_0x448f8e);if(!_0x448f8e[_0x41de9c(0x4d7)]()){const _0x3b5005=this[_0x41de9c(0x368)]();_0x3b5005&&_0x3b5005[_0x41de9c(0xc48)]();}this[_0x41de9c(0x5e7)](![]);},Game_Battler[_0x579382(0x448)][_0x579382(0x74d)]=function(){const _0x33673e=_0x579382,_0x1fbade=this[_0x33673e(0x236)];this[_0x33673e(0x236)]=![];if(BattleManager[_0x33673e(0x373)]()&&this[_0x33673e(0xa5b)]()){const _0x55a3c6=this[_0x33673e(0x368)]();if(_0x55a3c6&&_0x1fbade)_0x55a3c6[_0x33673e(0xc48)]();return;}const _0x1a1d1d=this['battler']();if(_0x1a1d1d)_0x1a1d1d[_0x33673e(0x44f)]();this[_0x33673e(0x5e7)](![]),this[_0x33673e(0x970)]();},Game_Battler['prototype'][_0x579382(0x5f9)]=function(_0x589799){const _0x5a9471=_0x579382;if(_0x589799[_0x5a9471(0x89f)]()){if(_0x5a9471(0x4f6)===_0x5a9471(0x647)){if(!_0x5766eb[_0x5a9471(0xa3d)])return;const _0x2ccf0c=_0x3a9049[_0x5a9471(0xbc5)][_0x5a9471(0x748)];if(!_0x2ccf0c)return;if(_0x4b4f06[_0x5a9471(0x5eb)]['version']<=1.04){_0x70984(_0x5a9471(0x830)),_0x58aeff[_0x5a9471(0x25d)]();return;}_0x474495[_0x5a9471(0x6dc)](_0x638d36,_0x288d0e);const _0x182047=_0x8b8cc7[_0x5a9471(0x848)];_0x2ccf0c['setupBlueRedInvertImpactFilter'](_0x182047);}else this[_0x5a9471(0x43a)]();}else{if(_0x589799[_0x5a9471(0x4d7)]())this[_0x5a9471(0x305)]('guard');else{if(_0x589799['isMagical']())_0x5a9471(0xcbe)!==_0x5a9471(0x71b)?this['requestMotion'](_0x5a9471(0x950)):_0x22dd94['remove'](this[_0x5a9471(0xaed)]());else{if(_0x589799[_0x5a9471(0x5ae)]())'UNBXR'!=='pRASE'?[0x1,0x2,0x5,0x6][_0x5a9471(0xb2b)](_0x589799[_0x5a9471(0x270)]()['damage'][_0x5a9471(0x3e4)])?this[_0x5a9471(0x43a)]():this[_0x5a9471(0x305)](_0x5a9471(0x4cb)):this['opacity']=0x0;else{if(_0x589799[_0x5a9471(0x8d4)]()){if(_0x5a9471(0x655)!==_0x5a9471(0x90b))this[_0x5a9471(0x305)](_0x5a9471(0x270));else return this[_0x5a9471(0x5f7)]?this[_0x5a9471(0x5f7)][_0x5a9471(0x54a)]===0x0&&this['parent'][_0x5a9471(0x65f)]===0x0:!![];}}}}}},Game_Battler[_0x579382(0x448)][_0x579382(0x407)]=function(){const _0x3d3c3e=_0x579382;return $dataSystem[_0x3d3c3e(0x4a0)][0x0];},Game_Battler[_0x579382(0x448)][_0x579382(0xa84)]=function(){const _0x24b541=_0x579382,_0x55efa3=this[_0x24b541(0x407)]();return _0x55efa3?_0x55efa3[_0x24b541(0x2d0)]:0x0;},Game_Battler[_0x579382(0x448)][_0x579382(0x52d)]=function(_0x32bd3d){const _0x2e811e=_0x579382;if(!$gameSystem['isSideView']())return;const _0x27936d=this[_0x2e811e(0x368)](),_0x526525=_0x32bd3d[_0x2e811e(0x368)]();if(!_0x27936d||!_0x526525)return;const _0x1637cc=_0x526525['_baseX'],_0x3da156=_0x526525[_0x2e811e(0x339)];this[_0x2e811e(0x85b)](_0x1637cc,_0x3da156,0x0,![],_0x2e811e(0xc05),-0x1),_0x27936d['updatePosition']();const _0x3a5a8c=VisuMZ[_0x2e811e(0x675)][_0x2e811e(0x27f)]['ActionSequence'];let _0x18d091=(_0x526525['width']+_0x27936d[_0x2e811e(0x259)])/0x2;_0x18d091*=this[_0x2e811e(0xc58)]()?0x1:-0x1;let _0x1798be=_0x3a5a8c[_0x2e811e(0x555)]*(this[_0x2e811e(0xc58)]()?0x1:-0x1);_0x32bd3d['moveBattlerDistance'](_0x18d091,_0x1798be,0x0,![],_0x2e811e(0xc05)),_0x526525[_0x2e811e(0x345)]();},Game_Battler[_0x579382(0x448)][_0x579382(0x305)]=function(_0x53d1f7){const _0x43c044=_0x579382;if(SceneManager[_0x43c044(0xc65)]()){const _0x3e3cdf=this[_0x43c044(0x368)]();if(_0x3e3cdf){if(_0x43c044(0x7bc)==='EzZXs'){if(!_0x5b7707['VisuMZ_3_ActSeqImpact'])return;const _0x17ee00=_0x1d0572['_scene'][_0x43c044(0x748)];if(!_0x17ee00)return;if(_0x40321e['ActSeqImpact']['version']<=1.04){_0x17aed5(_0x43c044(0x830)),_0x27a664[_0x43c044(0x25d)]();return;}_0x443bb7[_0x43c044(0x6dc)](_0x2e32e8,_0x113d5c);const _0x12e6f5=_0x22e1a8[_0x43c044(0x848)];_0x17ee00[_0x43c044(0xad3)](_0x12e6f5);}else _0x3e3cdf['forceMotion'](_0x53d1f7),[_0x43c044(0x1bd),_0x43c044(0x8f6),'missile']['includes'](_0x53d1f7)&&this['performWeaponAnimation']();}}this[_0x43c044(0xbaa)]();},Game_Battler['prototype'][_0x579382(0xb1b)]=function(){},Game_Battler[_0x579382(0x448)][_0x579382(0x627)]=function(_0x459f2f){const _0x237bfa=_0x579382;if(SceneManager['isSceneBattle']()){const _0x9c526e=this[_0x237bfa(0x368)]();if(_0x9c526e)_0x9c526e[_0x237bfa(0x7ba)](_0x459f2f);}},Game_Battler['prototype']['startAttackWeaponAnimation']=function(){const _0x233caa=_0x579382;if(SceneManager[_0x233caa(0xc65)]()){const _0x197ee0=this[_0x233caa(0xa84)]();this[_0x233caa(0x627)](_0x197ee0);}},Game_Battler['prototype']['performCastAnimation']=function(_0x2c5fa3,_0x59498f){const _0x4287b8=_0x579382;if(!_0x2c5fa3)return;if(!_0x2c5fa3[_0x4287b8(0x270)]())return;if(_0x2c5fa3[_0x4287b8(0x89f)]())return;if(_0x2c5fa3[_0x4287b8(0x4d7)]())return;if(_0x2c5fa3['isItem']())return;let _0x16e66e=0x0;const _0x5f35da=VisuMZ[_0x4287b8(0x675)][_0x4287b8(0x27f)]['ActionSequence'],_0x527d27=_0x2c5fa3[_0x4287b8(0x270)]()[_0x4287b8(0x560)];if(_0x527d27[_0x4287b8(0x299)](/<CAST ANIMATION: (\d+)>/i))_0x16e66e=Number(RegExp['$1']);else{if(_0x527d27[_0x4287b8(0x299)](/<NO CAST ANIMATION>/i)){if(_0x4287b8(0x6ee)===_0x4287b8(0x6ee))return;else return _0x4cd729['BattleCore'][_0x4287b8(0x27f)][_0x4287b8(0x2f8)][_0x4287b8(0x8ab)];}else{if(_0x2c5fa3['isCertainHit']())_0x4287b8(0x3b8)===_0x4287b8(0x4ed)?_0x3fbcfd[_0x4287b8(0x226)](_0x4287b8(0x6ed),_0x5ed7d4,_0x1833a3):_0x16e66e=_0x5f35da['CastCertain'];else{if(_0x2c5fa3[_0x4287b8(0xaee)]()){if(_0x4287b8(0xa15)===_0x4287b8(0xa15))_0x16e66e=_0x5f35da[_0x4287b8(0x4d9)];else{const _0x3bfaf6=_0x170019[_0x3bbc25['BattleStartEvent']],_0x50c6f6=_0x3bfaf6[_0x4287b8(0xc74)][_0x4287b8(0x237)]-0x2,_0xafa0b7=_0x3bfaf6[_0x4287b8(0xc74)][_0x50c6f6];if(_0xafa0b7&&_0xafa0b7[_0x4287b8(0xb10)]!==0xe6){const _0x5160d1={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3c1207=_0x3bfaf6[_0x4287b8(0xc74)][_0x4287b8(0x7b0)]();_0x3bfaf6[_0x4287b8(0xc74)][_0x4287b8(0xa7d)](_0x5160d1),_0x3bfaf6['list'][_0x4287b8(0xa7d)](_0x3c1207);}}}else _0x2c5fa3['isMagical']()&&(_0x16e66e=_0x5f35da[_0x4287b8(0xc01)]);}}}_0x16e66e>0x0&&$gameTemp[_0x4287b8(0x64f)]([this],_0x16e66e,!!_0x59498f);},Game_Battler[_0x579382(0x448)]['performReflection']=function(){const _0x443779=_0x579382;SoundManager[_0x443779(0x445)]();let _0x45ee63=VisuMZ[_0x443779(0x675)]['Settings'][_0x443779(0x765)][_0x443779(0x41e)];if(_0x45ee63>0x0){if(_0x443779(0x998)!=='EWuEa'){if(Imported[_0x443779(0x214)]){if('KlmrL'!==_0x443779(0x41d))$gameTemp[_0x443779(0x584)]([this],_0x45ee63);else return _0x36a229['BattleCore'][_0x443779(0x27f)][_0x443779(0xbf4)][_0x443779(0x5e4)];}else _0x443779(0x4d5)!==_0x443779(0x4d5)?(this[_0x443779(0xa7d)](_0x443779(0x7e7)),_0x56f744['invokeAction'](_0x5a7486,_0x437c77),this['callNextMethod']()):$gameTemp[_0x443779(0x64f)]([this],_0x45ee63);}else{if(!_0x56e9a4[_0x443779(0xc65)]())return;_0x31083f['ConvertParams'](_0x4a2dc4,_0x589120);const _0x40c2c3=_0x2f0ce0['_action'],_0x5830a5={'arPenRate':_0x56c5c9[_0x443779(0x5b3)],'arPenFlat':_0x6624c9[_0x443779(0x8da)],'arRedRate':_0x57be85[_0x443779(0x7ff)],'arRedFlat':_0x26836d[_0x443779(0xafe)]};_0x40c2c3[_0x443779(0x709)]=_0x5830a5;}}},VisuMZ['BattleCore'][_0x579382(0x994)]=Game_Battler[_0x579382(0x448)][_0x579382(0x2c3)],Game_Battler[_0x579382(0x448)][_0x579382(0x2c3)]=function(){const _0x410422=_0x579382;VisuMZ[_0x410422(0x675)]['Game_Battler_performDamage']['call'](this),this['performFlinch']();},VisuMZ['BattleCore']['Game_Battler_performMiss']=Game_Battler['prototype'][_0x579382(0x1dd)],Game_Battler['prototype'][_0x579382(0x1dd)]=function(){const _0x16bc90=_0x579382;VisuMZ['BattleCore'][_0x16bc90(0x855)][_0x16bc90(0xb95)](this),this[_0x16bc90(0x93f)]();},VisuMZ[_0x579382(0x675)]['Game_Battler_performEvasion']=Game_Battler[_0x579382(0x448)]['performEvasion'],Game_Battler[_0x579382(0x448)]['performEvasion']=function(){const _0x50d147=_0x579382;VisuMZ[_0x50d147(0x675)][_0x50d147(0x499)][_0x50d147(0xb95)](this),this[_0x50d147(0x93f)]();},Game_Battler[_0x579382(0x448)][_0x579382(0x93f)]=function(){const _0x39116a=_0x579382;if(!$gameSystem[_0x39116a(0xc10)]())return;if(this[_0x39116a(0x236)])return;this[_0x39116a(0x236)]=!![];const _0x11922a=this[_0x39116a(0x368)]();if(_0x11922a)_0x11922a[_0x39116a(0xb92)]();},Game_Battler[_0x579382(0x448)][_0x579382(0x970)]=function(){const _0x2e09a9=_0x579382;if(this[_0x2e09a9(0x84b)]()&&this[_0x2e09a9(0xbce)]!==_0x2e09a9(0xb2e)){if(_0x2e09a9(0x474)!==_0x2e09a9(0x929)){this[_0x2e09a9(0x305)]('dead');return;}else _0x9df332[_0x2e09a9(0x675)]['Window_BattleStatus_initialize']['call'](this,_0x2758ca),this[_0x2e09a9(0x2d3)](),this[_0x2e09a9(0x1bb)]();}if(this[_0x2e09a9(0x84b)]()&&this[_0x2e09a9(0xbce)]===_0x2e09a9(0xb2e))return;if(!!this['_freezeMotionData'])return;if(this[_0x2e09a9(0xa31)]()){if(!this[_0x2e09a9(0xab8)]()&&this!==BattleManager[_0x2e09a9(0x7c7)]){if(this[_0x2e09a9(0x368)]())this[_0x2e09a9(0x368)]()['refreshMotion']();}this[_0x2e09a9(0xbaa)]();return;}if(this['_motionType']===_0x2e09a9(0x258))return;if(this[_0x2e09a9(0xbce)]===_0x2e09a9(0x951)&&!BattleManager['isInputting']())return;if(this[_0x2e09a9(0xbce)]===_0x2e09a9(0x947)&&!BattleManager[_0x2e09a9(0xa5b)]())return;this[_0x2e09a9(0x7d1)]();if(this[_0x2e09a9(0x368)]()&&BattleManager['isInputting']()){this[_0x2e09a9(0x368)]()[_0x2e09a9(0x913)](),this['clearFreezeMotion']();return;}},Game_Enemy[_0x579382(0x448)][_0x579382(0xab8)]=function(){const _0x3fdbeb=_0x579382;if(!this[_0x3fdbeb(0x611)]())return![];const _0x59154d=this[_0x3fdbeb(0x368)]();if(!_0x59154d)return![];const _0x1fe683=_0x59154d[_0x3fdbeb(0x2c6)];if(!_0x1fe683)return![];const _0x431155=_0x1fe683[_0x3fdbeb(0x81e)];return _0x431155&&!_0x431155[_0x3fdbeb(0x2e6)];},Game_Battler[_0x579382(0x448)]['isBattlerFlipped']=function(){const _0x6e99e7=_0x579382;return this[_0x6e99e7(0x743)];},Game_Battler['prototype'][_0x579382(0x5e7)]=function(_0x3bdd07){const _0x14463a=_0x579382;if(!$gameSystem['isSideView']())return;this['_isBattlerFlipped']=_0x3bdd07;const _0x4102f9=this['battler']();if(_0x4102f9)_0x4102f9[_0x14463a(0x795)]();},Game_Battler[_0x579382(0x448)][_0x579382(0xa76)]=function(_0x1a4431,_0x6fd9ee,_0x34f13a){const _0x2fccce=_0x579382;if(!$gameSystem[_0x2fccce(0xc10)]())return;const _0x104cd1=this[_0x2fccce(0x368)]();if(!_0x104cd1)return;if(_0x1a4431===_0x104cd1[_0x2fccce(0xb43)])return;let _0x53037c=![];if(this[_0x2fccce(0xc58)]()){if(_0x1a4431>_0x104cd1[_0x2fccce(0xb43)])_0x53037c=!![];if(_0x1a4431<_0x104cd1[_0x2fccce(0xb43)])_0x53037c=![];}else{if(this[_0x2fccce(0xa31)]()){if(_0x1a4431>_0x104cd1[_0x2fccce(0xb43)])_0x53037c=![];if(_0x1a4431<_0x104cd1[_0x2fccce(0xb43)])_0x53037c=!![];}};this[_0x2fccce(0x5e7)](_0x34f13a?!_0x53037c:_0x53037c),_0x104cd1[_0x2fccce(0x795)]();},Game_Battler[_0x579382(0x448)][_0x579382(0x832)]=function(_0x46ed0e,_0x549faa,_0x48ed36,_0x1c60e5,_0xaf46d9){const _0x19da72=_0x579382;if(!$gameSystem[_0x19da72(0xc10)]())return;const _0x36ecdf=this[_0x19da72(0x368)]();if(!_0x36ecdf)return;if(_0x1c60e5)this[_0x19da72(0xa76)](_0x46ed0e+_0x36ecdf[_0x19da72(0xb43)],_0x549faa+_0x36ecdf[_0x19da72(0x339)],![]);_0x46ed0e+=_0x36ecdf[_0x19da72(0xb43)]-_0x36ecdf[_0x19da72(0x605)],_0x549faa+=_0x36ecdf[_0x19da72(0x339)]-_0x36ecdf[_0x19da72(0x486)],_0x36ecdf[_0x19da72(0x87c)](_0x46ed0e,_0x549faa,_0x48ed36);if(Imported[_0x19da72(0x214)])_0x36ecdf[_0x19da72(0x90c)](_0xaf46d9||_0x19da72(0xc05));},Game_Battler[_0x579382(0x448)][_0x579382(0x85b)]=function(_0x1d81e8,_0x51da2f,_0x555ee1,_0x46e1ad,_0x490174,_0x3f04ef){const _0x50d24d=_0x579382;if(!$gameSystem[_0x50d24d(0xc10)]())return;const _0x429d9e=this[_0x50d24d(0x368)]();if(!_0x429d9e)return;if(_0x1d81e8===Infinity||_0x51da2f===Infinity)return;if(isNaN(_0x1d81e8)||isNaN(_0x51da2f))return;_0x3f04ef=_0x3f04ef||0x0;if(_0x3f04ef>0x0){if(_0x429d9e[_0x50d24d(0xb43)]>_0x1d81e8)_0x1d81e8+=_0x429d9e['width']/0x2+_0x3f04ef;if(_0x429d9e[_0x50d24d(0xb43)]<_0x1d81e8)_0x1d81e8-=_0x429d9e[_0x50d24d(0x259)]/0x2+_0x3f04ef;}if(_0x46e1ad)this[_0x50d24d(0xa76)](_0x1d81e8,_0x51da2f,![]);_0x1d81e8-=_0x429d9e[_0x50d24d(0x605)],_0x51da2f-=_0x429d9e['_homeY'],_0x429d9e[_0x50d24d(0x87c)](_0x1d81e8,_0x51da2f,_0x555ee1);if(Imported[_0x50d24d(0x214)])_0x429d9e[_0x50d24d(0x90c)](_0x490174||_0x50d24d(0xc05));},Game_Battler[_0x579382(0x448)][_0x579382(0xbb9)]=function(_0x1e4cb1,_0x1e31f6,_0x4834b5,_0x4ade45,_0x456ab7){const _0x167016=_0x579382;if(!$gameSystem[_0x167016(0xc10)]())return;const _0x15e47d=this[_0x167016(0x368)]();if(!_0x15e47d)return;if(_0x4ade45)this[_0x167016(0xa76)](_0x1e4cb1+_0x15e47d[_0x167016(0xb43)],_0x1e31f6+_0x15e47d[_0x167016(0x339)],![]);_0x1e4cb1+=_0x15e47d['_homeX'],_0x1e31f6+=_0x15e47d[_0x167016(0x486)],_0x15e47d[_0x167016(0x6f8)](_0x1e4cb1,_0x1e31f6,_0x4834b5,_0x456ab7),this[_0x167016(0xad5)]=_0x1e4cb1,this[_0x167016(0x959)]=_0x1e31f6;},Game_Battler[_0x579382(0x448)][_0x579382(0xba5)]=function(_0x21ee61,_0x4d310f,_0x1be9ac,_0x461b00,_0x18115b,_0x3625b4){const _0x143d7e=_0x579382;if(!$gameSystem['isSideView']())return;const _0x21fac8=this[_0x143d7e(0x368)]();if(!_0x21fac8)return;_0x3625b4=_0x3625b4||0x0;if(_0x3625b4>0x0){if(_0x143d7e(0xb02)!==_0x143d7e(0x231)){if(_0x21fac8[_0x143d7e(0xb43)]>_0x21ee61)_0x21ee61+=_0x21fac8['width']/0x2+_0x3625b4;if(_0x21fac8['_baseX']<_0x21ee61)_0x21ee61-=_0x21fac8[_0x143d7e(0x259)]/0x2+_0x3625b4;}else{if(!_0x1ea11d[_0x143d7e(0xc65)]())return;if(!_0x2061a5[_0x143d7e(0xb4d)])return;_0x500403[_0x143d7e(0x6dc)](_0x3cd4d9,_0x294305);const _0x386c3a=_0x3fa66e['getLastPluginCommandInterpreter'](),_0x5aec88=_0x431815[_0x143d7e(0x857)];_0x3cb2ed[_0x143d7e(0x70e)](_0x36177a[_0x143d7e(0x480)],_0x241ed1[_0x143d7e(0xc33)],_0x23bffc[_0x143d7e(0xafa)],_0x2cfe45['EasingType']);if(_0x5aec88)_0x386c3a[_0x143d7e(0x9c8)]('battleCamera');}}if(_0x461b00)this[_0x143d7e(0xa76)](_0x21ee61,_0x4d310f,![]);_0x21fac8[_0x143d7e(0x6f8)](_0x21ee61,_0x4d310f,_0x1be9ac,_0x18115b),this[_0x143d7e(0xad5)]=_0x21ee61,this[_0x143d7e(0x959)]=_0x4d310f;},Game_Battler[_0x579382(0x448)][_0x579382(0x7da)]=function(_0x266183,_0xff7447,_0xca2a78){const _0x3bc383=_0x579382;if(!$gameSystem[_0x3bc383(0xc10)]())return;const _0x55cfe5=this[_0x3bc383(0x368)]();if(!_0x55cfe5)return;_0x55cfe5[_0x3bc383(0x5c1)](_0x266183,_0xff7447,_0xca2a78);},Game_Battler['prototype']['jumpBattler']=function(_0x1bad91,_0x22050d){const _0x918e93=_0x579382;if(!$gameSystem['isSideView']())return;const _0x25b4ed=this[_0x918e93(0x368)]();if(!_0x25b4ed)return;_0x25b4ed[_0x918e93(0x75f)](_0x1bad91,_0x22050d);},Game_Battler[_0x579382(0x448)][_0x579382(0xaae)]=function(_0x381379,_0x4fd10c,_0x3e0b4b,_0x1008a5){const _0x308c53=_0x579382;if(!$gameSystem[_0x308c53(0xc10)]())return;const _0x498513=this[_0x308c53(0x368)]();if(!_0x498513)return;_0x498513[_0x308c53(0x82a)](_0x381379,_0x4fd10c,_0x3e0b4b,_0x1008a5);},Game_Battler[_0x579382(0x448)][_0x579382(0x92e)]=function(_0x5cb7bd,_0x5e71bb,_0x272c4f,_0x5dee07){const _0x35e1ae=_0x579382;if(!$gameSystem[_0x35e1ae(0xc10)]())return;const _0x54e297=this['battler']();if(!_0x54e297)return;this[_0x35e1ae(0xc58)]()&&(_0x5cb7bd*=-0x1,_0x5e71bb*=-0x1),_0x54e297[_0x35e1ae(0xadd)](_0x5cb7bd,_0x5e71bb,_0x272c4f,_0x5dee07);},Game_Battler[_0x579382(0x448)][_0x579382(0x1a4)]=function(_0x1d5794,_0x126b2c,_0x4b52dd,_0x1bcdcf){const _0x2324a3=_0x579382;if(!$gameSystem[_0x2324a3(0xc10)]())return;const _0x67cfa4=this[_0x2324a3(0x368)]();if(!_0x67cfa4)return;_0x67cfa4['startGrow'](_0x1d5794,_0x126b2c,_0x4b52dd,_0x1bcdcf);},Game_Battler[_0x579382(0x448)][_0x579382(0x9cd)]=function(_0x4777e3,_0x3fac4f,_0x5b6592){const _0x3a832d=_0x579382;if(!$gameSystem[_0x3a832d(0xc10)]())return;const _0x57bf5e=this[_0x3a832d(0x368)]();if(!_0x57bf5e)return;_0x57bf5e['startOpacity'](_0x4777e3,_0x3fac4f,_0x5b6592);},Game_Battler['prototype'][_0x579382(0xbaa)]=function(){const _0x522de0=_0x579382,_0x57edf3=!!this[_0x522de0(0x664)];this['_freezeMotionData']=undefined,_0x57edf3&&(this['requestMotionRefresh'](),this[_0x522de0(0x3af)]());},Game_Battler[_0x579382(0x448)][_0x579382(0x3af)]=function(){const _0x46fab6=_0x579382;if(!SceneManager['isSceneBattle']())return;const _0x35a751=this[_0x46fab6(0x368)]();if(!_0x35a751)return;let _0x4495e6=this[_0x46fab6(0xc58)]()?_0x35a751[_0x46fab6(0xbeb)]:_0x35a751[_0x46fab6(0x2c6)][_0x46fab6(0xbeb)];if(_0x4495e6){if('CgJRO'==='Nzioo'){if(this[_0x46fab6(0xa3c)]()!=='')return this[_0x46fab6(0xa3c)]();else{if(_0x2ef644[_0x46fab6(0x503)]&&this[_0x46fab6(0xc7e)]()!=='')return this[_0x46fab6(0xc7e)]();}return'';}else _0x4495e6[_0x46fab6(0x60d)](0x0);}},Game_Battler['prototype'][_0x579382(0x7a8)]=function(_0x465ce3,_0x29310a,_0x5a51f4){const _0x28eaa9=_0x579382;if(this[_0x28eaa9(0xa31)]()&&!this['hasSvBattler']())return;let _0x153eb3=0x0,_0x3f670b=0x0;_0x465ce3[_0x28eaa9(0x299)](/ATTACK[ ](\d+)/i)&&(_0x3f670b=Number(RegExp['$1']),_0x3f670b--);if(this[_0x28eaa9(0xc58)]()){if(_0x28eaa9(0x8dc)!=='GjBKR'){const _0x22ecc9=this[_0x28eaa9(0x7b7)]();_0x153eb3=_0x22ecc9[_0x3f670b]?_0x22ecc9[_0x3f670b]['wtypeId']:0x0;}else this['x']=this[_0x28eaa9(0x82c)]()[_0x28eaa9(0x368)]()[_0x28eaa9(0xb43)];}else this['isEnemy']()&&(_0x28eaa9(0x28a)===_0x28eaa9(0x287)?this[_0x28eaa9(0xaed)]()['canGuard']()&&_0x2545f8[_0x28eaa9(0x675)][_0x28eaa9(0x222)][_0x28eaa9(0xb95)](this):_0x153eb3=this[_0x28eaa9(0xb27)]()[_0x28eaa9(0x7f5)]||0x0);const _0x184be=$dataSystem['attackMotions'][_0x153eb3];_0x465ce3[_0x28eaa9(0x299)](/attack/i)&&(_0x28eaa9(0xa18)!==_0x28eaa9(0xc4b)?_0x465ce3=[_0x28eaa9(0x8f6),_0x28eaa9(0x1bd),_0x28eaa9(0x6c9)][_0x184be[_0x28eaa9(0x3e4)]]||'swing':_0x4957b1[_0x28eaa9(0x8c2)]=new _0x1fc578(this[_0x28eaa9(0x259)],this[_0x28eaa9(0x5ac)])),this[_0x28eaa9(0x664)]={'motionType':_0x465ce3,'weaponImageId':_0x29310a?_0x184be[_0x28eaa9(0x2d0)]:0x0,'pattern':_0x5a51f4};},Game_Battler[_0x579382(0x448)]['isFriendly']=function(_0x1fa4a0){const _0x40b5c5=_0x579382;if(!_0x1fa4a0)return![];return _0x1fa4a0[_0x40b5c5(0x24e)]()===this[_0x40b5c5(0x24e)]();},Game_Battler['prototype'][_0x579382(0x571)]=function(_0x2bbf02){const _0x2d5928=_0x579382;if(!_0x2bbf02)return![];return _0x2bbf02[_0x2d5928(0x851)]()===this[_0x2d5928(0x24e)]();},Game_Battler['prototype'][_0x579382(0x6bc)]=function(){return![];},Game_Actor[_0x579382(0x448)][_0x579382(0x6bc)]=function(){const _0x3fa789=_0x579382;return this[_0x3fa789(0x3b3)]()[_0x3fa789(0x299)](/\$/i);},Game_Enemy[_0x579382(0x448)]['hasStaticSvBattler']=function(){const _0x132373=_0x579382;return this[_0x132373(0x611)]()&&this['svBattlerName']()[_0x132373(0x299)](/\$/i);},VisuMZ[_0x579382(0x675)][_0x579382(0x612)]=Game_Actor['prototype'][_0x579382(0x60d)],Game_Actor['prototype'][_0x579382(0x60d)]=function(_0x311e8f){const _0x5c5938=_0x579382;VisuMZ['BattleCore'][_0x5c5938(0x612)][_0x5c5938(0xb95)](this,_0x311e8f),this['initBattlePortrait']();},Game_Actor[_0x579382(0x448)][_0x579382(0x6fb)]=function(){const _0x50fb71=_0x579382;this[_0x50fb71(0x7be)]='',this[_0x50fb71(0x6b7)]()&&this[_0x50fb71(0x6b7)]()['note'][_0x50fb71(0x299)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x579382(0x448)]['getBattlePortraitFilename']=function(){const _0x552800=_0x579382;if(this['getBattlePortrait']()!=='')return this[_0x552800(0xa3c)]();else{if(Imported[_0x552800(0x503)]&&this['getMenuImage']()!==''){if('iLPWy'==='mtDxA'){const _0x3a7b8c=_0x225465[_0x552800(0x675)][_0x552800(0x27f)][_0x552800(0x4c5)];if(_0x3a7b8c[_0x552800(0xb0e)]>0x0&&_0x2d8b68[_0x3a7b8c[_0x552800(0xb0e)]]){const _0x25f803=_0x448d03[_0x3a7b8c['BattleStartEvent']],_0x324549=_0x25f803['list'][_0x552800(0x237)]-0x2,_0x50211a=_0x25f803[_0x552800(0xc74)][_0x324549];if(_0x50211a&&_0x50211a[_0x552800(0xb10)]!==0xe6){const _0x19a2eb={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x508946=_0x25f803['list'][_0x552800(0x7b0)]();_0x25f803[_0x552800(0xc74)][_0x552800(0xa7d)](_0x19a2eb),_0x25f803['list'][_0x552800(0xa7d)](_0x508946);}}}else return this[_0x552800(0xc7e)]();}}return'';},Game_Actor[_0x579382(0x448)][_0x579382(0xa3c)]=function(){const _0x30b04c=_0x579382;if(this['_battlePortrait']===undefined)this[_0x30b04c(0x6fb)]();return this[_0x30b04c(0x7be)];},Game_Actor[_0x579382(0x448)][_0x579382(0x681)]=function(_0x2d3a95){const _0x43cec4=_0x579382;if(this[_0x43cec4(0x7be)]===undefined)this['initBattlePortrait']();this[_0x43cec4(0x7be)]=_0x2d3a95;if(SceneManager[_0x43cec4(0xc65)]()&&$gameParty[_0x43cec4(0x203)]()['includes'](this)){const _0x16babb=SceneManager[_0x43cec4(0xbc5)]['_statusWindow'];_0x16babb&&('uBzmq'===_0x43cec4(0xa93)?this[_0x43cec4(0x6b2)]():_0x16babb['refreshActorPortrait'](this));}},Game_Actor['prototype'][_0x579382(0x4c9)]=function(){return!![];},Game_Actor['prototype'][_0x579382(0x707)]=function(){const _0x4f73a4=_0x579382;if(!this['isConfused']()&&BattleManager[_0x4f73a4(0x725)])return!![];return Game_Battler[_0x4f73a4(0x448)][_0x4f73a4(0x707)][_0x4f73a4(0xb95)](this);},VisuMZ[_0x579382(0x675)][_0x579382(0xc0a)]=Game_Actor[_0x579382(0x448)][_0x579382(0x25c)],Game_Actor[_0x579382(0x448)]['makeActionList']=function(){const _0x46bf76=_0x579382;if(BattleManager[_0x46bf76(0x725)]&&!ConfigManager[_0x46bf76(0xac6)]){if(_0x46bf76(0xc52)!==_0x46bf76(0x437))return this[_0x46bf76(0x600)]();else _0x40b4ed[_0x46bf76(0x675)][_0x46bf76(0x97b)][_0x46bf76(0xb95)](this),this[_0x46bf76(0x632)]&&(this[_0x46bf76(0x632)]=_0x2944cb,_0x102d53['_scene']['battleCoreResumeLaunchBattle']());}else{if(_0x46bf76(0xc2e)!=='xvgSu')this[_0x46bf76(0x3c2)][this[_0x46bf76(0x9c7)]]=_0x1c26d2;else{return VisuMZ['BattleCore']['Game_Actor_makeActionList'][_0x46bf76(0xb95)](this);;}}},Game_Actor['prototype'][_0x579382(0x600)]=function(){const _0x3c2f93=_0x579382,_0x133ebd=[],_0x1921ca=new Game_Action(this);return _0x1921ca[_0x3c2f93(0xc03)](),_0x133ebd[_0x3c2f93(0x226)](_0x1921ca),_0x133ebd;},Game_Actor[_0x579382(0x448)][_0x579382(0x465)]=function(){const _0x18a0a9=_0x579382;return this[_0x18a0a9(0x94b)]()[_0x18a0a9(0x560)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x18a0a9(0x810)](/[\r\n]+/):VisuMZ[_0x18a0a9(0x675)][_0x18a0a9(0x27f)][_0x18a0a9(0x84a)][_0x18a0a9(0x23d)];},Game_Actor[_0x579382(0x448)][_0x579382(0x836)]=function(){const _0x3f59b9=_0x579382;if(this[_0x3f59b9(0x685)]['svAnchorX']!==undefined)return this[_0x3f59b9(0x685)][_0x3f59b9(0xc98)];if(this[_0x3f59b9(0x6b7)]()[_0x3f59b9(0x560)][_0x3f59b9(0x299)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0x3f59b9(0x685)][_0x3f59b9(0xc98)]=eval(RegExp['$1']),this[_0x3f59b9(0x685)][_0x3f59b9(0x73e)]=eval(RegExp['$2']);else{if(_0x3f59b9(0xb5e)!==_0x3f59b9(0x8a3))this[_0x3f59b9(0x685)]['svAnchorX']=Game_Battler[_0x3f59b9(0x448)][_0x3f59b9(0x836)][_0x3f59b9(0xb95)](this);else{const _0x3db145=_0x1eb3e2[_0x3f59b9(0x247)](_0x3c505b);_0x3db145[_0x3f59b9(0x21e)]=![],_0x3db145[_0x3f59b9(0x63a)]=![],_0x3db145[_0x3f59b9(0x3a7)]=0x0,this[_0x3f59b9(0xb9f)][_0x3f59b9(0x226)](_0x3db145);}}return this[_0x3f59b9(0x685)][_0x3f59b9(0xc98)];},Game_Actor[_0x579382(0x448)][_0x579382(0x9b0)]=function(){const _0x2d5fdb=_0x579382;if(this[_0x2d5fdb(0x685)][_0x2d5fdb(0x73e)]!==undefined)return this['_cache'][_0x2d5fdb(0x73e)];return this[_0x2d5fdb(0x6b7)]()[_0x2d5fdb(0x560)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?_0x2d5fdb(0xa22)!==_0x2d5fdb(0xa22)?this['bitmap']['smooth']=_0x400c1d[_0x2d5fdb(0x675)][_0x2d5fdb(0x27f)][_0x2d5fdb(0x7b6)][_0x2d5fdb(0x879)]:(this[_0x2d5fdb(0x685)][_0x2d5fdb(0xc98)]=eval(RegExp['$1']),this[_0x2d5fdb(0x685)][_0x2d5fdb(0x73e)]=eval(RegExp['$2'])):'QWNKE'===_0x2d5fdb(0x2d7)?(_0x567e39[_0x2d5fdb(0x675)][_0x2d5fdb(0x2bb)][_0x2d5fdb(0xb95)](this),_0x35de5b[_0x2d5fdb(0x42b)]&&(this[_0x2d5fdb(0x8fb)]=!![],_0x420c1d['_battleCoreBattleResumeAfter']=_0x21062a)):this[_0x2d5fdb(0x685)][_0x2d5fdb(0x73e)]=Game_Battler[_0x2d5fdb(0x448)][_0x2d5fdb(0x9b0)]['call'](this),this[_0x2d5fdb(0x685)][_0x2d5fdb(0x73e)];},Game_Actor[_0x579382(0x448)]['svBattlerShadowVisible']=function(){const _0x4d87a6=_0x579382;if(this[_0x4d87a6(0x685)]['svShadow']!==undefined)return this[_0x4d87a6(0x685)][_0x4d87a6(0x522)];if(this[_0x4d87a6(0x6b7)]()[_0x4d87a6(0x560)][_0x4d87a6(0x299)](/<SIDEVIEW SHOW SHADOW>/i))'RcdfD'!==_0x4d87a6(0x8cc)?this[_0x4d87a6(0x685)][_0x4d87a6(0x522)]=!![]:this[_0x4d87a6(0x4b6)]=this[_0x4d87a6(0x24d)];else this['actor']()['note']['match'](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache'][_0x4d87a6(0x522)]=![]:this[_0x4d87a6(0x685)]['svShadow']=Game_Battler[_0x4d87a6(0x448)][_0x4d87a6(0x7ad)][_0x4d87a6(0xb95)](this);return this[_0x4d87a6(0x685)][_0x4d87a6(0x522)];},Game_Actor['prototype']['battlerSmoothImage']=function(){const _0x454fb5=_0x579382;return VisuMZ[_0x454fb5(0x675)]['Settings'][_0x454fb5(0x7b6)]['SmoothImage'];},Game_Actor[_0x579382(0x448)][_0x579382(0xb1b)]=function(){const _0x447be2=_0x579382,_0x262dc1=this[_0x447be2(0x7b7)](),_0x4cb7b8=_0x262dc1[0x0]?_0x262dc1[0x0][_0x447be2(0x7f5)]:0x0,_0x409933=$dataSystem[_0x447be2(0x4a0)][_0x4cb7b8];_0x409933&&this['startWeaponAnimation'](_0x409933[_0x447be2(0x2d0)]);},Game_Actor[_0x579382(0x448)][_0x579382(0xa77)]=function(_0x3abf63){const _0xb2e7d1=_0x579382;Game_Battler[_0xb2e7d1(0x448)][_0xb2e7d1(0xa77)][_0xb2e7d1(0xb95)](this,_0x3abf63),this['performActionMotions'](_0x3abf63);},Game_Actor[_0x579382(0x448)][_0x579382(0x407)]=function(){const _0x4d84e5=_0x579382,_0x37aa45=this[_0x4d84e5(0x7b7)](),_0x5a6e8a=_0x37aa45[0x0]?_0x37aa45[0x0][_0x4d84e5(0x7f5)]:0x0;return $dataSystem[_0x4d84e5(0x4a0)][_0x5a6e8a];},Game_Actor[_0x579382(0x448)][_0x579382(0xbb2)]=function(_0x3b7a40){const _0x521503=_0x579382;_0x3b7a40=_0x3b7a40||0x1,_0x3b7a40--;const _0x20df19=this[_0x521503(0x7b7)]();return _0x20df19[_0x3b7a40]?_0x20df19[_0x3b7a40][_0x521503(0x944)]:0x0;},Game_Actor['prototype']['getAttackMotionSlot']=function(_0x2ca66b){const _0x59c7d3=_0x579382;_0x2ca66b=_0x2ca66b||0x1,_0x2ca66b--;const _0x2f560e=this[_0x59c7d3(0x7b7)](),_0x414459=_0x2f560e[_0x2ca66b]?_0x2f560e[_0x2ca66b]['wtypeId']:0x0;return $dataSystem['attackMotions'][_0x414459];},Game_Actor['prototype'][_0x579382(0xb04)]=function(_0x1e30b6){const _0x2c6c9a=_0x579382;_0x1e30b6=_0x1e30b6||0x1,_0x1e30b6--;const _0x234c67=this[_0x2c6c9a(0x7b7)](),_0x5d81d6=_0x234c67[_0x1e30b6]?_0x234c67[_0x1e30b6]['wtypeId']:0x0,_0x2d20b0=$dataSystem[_0x2c6c9a(0x4a0)][_0x5d81d6];if(_0x2d20b0){if(_0x2d20b0[_0x2c6c9a(0x3e4)]===0x0){if(_0x2c6c9a(0xbc0)!==_0x2c6c9a(0xbc0)){_0xb4cb26[_0x2c6c9a(0x214)]&&this['coreEngineRepositionEnemies']()&&this[_0x2c6c9a(0x914)]();const _0x3cff68=_0x46fe55[_0x2c6c9a(0x295)](),_0x8a9f37=[];for(const _0x4c7d66 of _0x3cff68){_0x8a9f37[_0x2c6c9a(0x226)](new _0x3f3dd2(_0x4c7d66));}_0x8a9f37['sort'](this['compareEnemySprite'][_0x2c6c9a(0x9df)](this));for(const _0x566e4d of _0x8a9f37){this[_0x2c6c9a(0x254)][_0x2c6c9a(0xbb0)](_0x566e4d);}this[_0x2c6c9a(0x5a9)]=_0x8a9f37;}else this[_0x2c6c9a(0x305)](_0x2c6c9a(0x8f6));}else{if(_0x2d20b0['type']===0x1)this['requestMotion']('swing');else _0x2d20b0[_0x2c6c9a(0x3e4)]===0x2&&this[_0x2c6c9a(0x305)]('missile');}this['startWeaponAnimation'](_0x2d20b0[_0x2c6c9a(0x2d0)]);}},Game_Battler[_0x579382(0x448)]['setActiveWeaponSlot']=function(_0xeab87b){const _0x8febcb=_0x579382;this['_activeWeaponSlot']=_0xeab87b||0x0,this[_0x8febcb(0x685)]={};},Game_Battler[_0x579382(0x448)][_0x579382(0xab0)]=function(){const _0x307ce2=_0x579382;this[_0x307ce2(0x996)]=this['_activeWeaponSlot']||0x0,this[_0x307ce2(0x996)]++,this[_0x307ce2(0x685)]={};},Game_Battler['prototype'][_0x579382(0x4a6)]=function(){const _0x1e5385=_0x579382;this[_0x1e5385(0x996)]=undefined,this['_cache']={};},VisuMZ['BattleCore'][_0x579382(0x249)]=Game_Actor[_0x579382(0x448)]['equips'],Game_Actor[_0x579382(0x448)][_0x579382(0x804)]=function(){const _0x36a1ec=_0x579382;let _0x28eaed=VisuMZ[_0x36a1ec(0x675)]['Game_Actor_equips'][_0x36a1ec(0xb95)](this);if(this['_tempEquipCheck'])return _0x28eaed;if(this['_activeWeaponSlot']!==undefined){if(_0x36a1ec(0x239)===_0x36a1ec(0x477))this[_0x36a1ec(0xad8)](_0x36a1ec(0x80d)),_0x5567c9['BattleCore'][_0x36a1ec(0x587)][_0x36a1ec(0xb95)](this),this[_0x36a1ec(0xad8)]('PostEndTurnJS');else{this['_tempEquipCheck']=!![];const _0x490ed9=this['equipSlots']();for(let _0x6cb47b=0x0;_0x6cb47b<_0x490ed9[_0x36a1ec(0x237)];_0x6cb47b++){_0x490ed9[_0x6cb47b]===0x1&&this['_activeWeaponSlot']!==_0x6cb47b&&(_0x28eaed[_0x6cb47b]=null);}this['_tempEquipCheck']=undefined;}}return _0x28eaed;},Window_BattleLog[_0x579382(0x448)]['getDualWieldTimes']=function(_0x3f2b74){const _0x256040=_0x579382;return _0x3f2b74[_0x256040(0xc58)]()?'jSetp'===_0x256040(0x9d1)?_0x55d44f[_0x256040(0x79d)][_0x256040(0xb95)](this):_0x3f2b74['weapons']()[_0x256040(0x237)]||0x1:0x1;},Window_BattleLog['prototype'][_0x579382(0x6ed)]=function(_0x29ef03,_0x2dd896){const _0x31df3a=_0x579382;_0x29ef03&&_0x29ef03[_0x31df3a(0xc58)]()&&_0x29ef03[_0x31df3a(0xca6)](_0x2dd896),this[_0x31df3a(0x861)]();},Window_BattleLog['prototype'][_0x579382(0x53f)]=function(_0x21769f){const _0xc886c1=_0x579382;_0x21769f&&_0x21769f[_0xc886c1(0xc58)]()&&_0x21769f[_0xc886c1(0x4a6)](),this[_0xc886c1(0x861)]();},Game_Actor[_0x579382(0x448)][_0x579382(0x589)]=function(){const _0x3e4011=_0x579382;let _0x37ea96=_0x3e4011(0x589);if(this[_0x3e4011(0x44c)](_0x37ea96))return this['_cache'][_0x37ea96];return this[_0x3e4011(0x685)][_0x37ea96]=this[_0x3e4011(0x9a0)](this[_0x3e4011(0x6b7)]()),this['_cache'][_0x37ea96];},Game_Actor[_0x579382(0x448)][_0x579382(0x44b)]=function(){const _0x509793=_0x579382;let _0xc27f81=_0x509793(0x44b);if(this[_0x509793(0x44c)](_0xc27f81))return this[_0x509793(0x685)][_0xc27f81];return this['_cache'][_0xc27f81]=this['createBattleUIOffsetY'](this[_0x509793(0x6b7)]()),this[_0x509793(0x685)][_0xc27f81];},VisuMZ['BattleCore'][_0x579382(0x5cc)]=Game_Enemy['prototype'][_0x579382(0x60d)],Game_Enemy[_0x579382(0x448)][_0x579382(0x60d)]=function(_0x19197c,_0x28feff,_0xc11503){const _0x1ecf3c=_0x579382;_0x19197c=DataManager[_0x1ecf3c(0x1a8)](_0x19197c),VisuMZ[_0x1ecf3c(0x675)]['Game_Enemy_setup'][_0x1ecf3c(0xb95)](this,_0x19197c,_0x28feff,_0xc11503),Imported[_0x1ecf3c(0x35a)]&&this[_0x1ecf3c(0x72e)](),this[_0x1ecf3c(0x41a)](),this[_0x1ecf3c(0xb6a)](),Imported[_0x1ecf3c(0x35a)]&&this[_0x1ecf3c(0x4e6)]();},Game_Enemy['prototype'][_0x579382(0x41a)]=function(){const _0x408cf2=_0x579382,_0x1da6d2=VisuMZ[_0x408cf2(0x675)][_0x408cf2(0x27f)][_0x408cf2(0x8ff)];this[_0x408cf2(0x21c)]=_0x1da6d2['AttackAnimation'],this[_0x408cf2(0x786)]={};},Game_Enemy['prototype']['setupBattleCoreData']=function(){const _0x185cbf=_0x579382,_0x26bb76=VisuMZ[_0x185cbf(0x675)]['Settings']['Enemy'],_0x53631f=this[_0x185cbf(0x82c)]()[_0x185cbf(0x560)];this[_0x185cbf(0x786)]={'name':'','wtypeId':_0x26bb76[_0x185cbf(0x523)],'collapse':_0x26bb76[_0x185cbf(0x243)],'motionIdle':_0x26bb76[_0x185cbf(0x2b7)],'width':_0x26bb76[_0x185cbf(0x77d)]||0x40,'height':_0x26bb76[_0x185cbf(0x1ee)]||0x40,'anchorX':_0x26bb76[_0x185cbf(0x46a)]||0x0,'anchorY':_0x26bb76['AnchorY']||0x0,'shadow':_0x26bb76['Shadow']};_0x53631f[_0x185cbf(0x299)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x185cbf(0x21c)]=Number(RegExp['$1']));const _0x25c1c2=this[_0x185cbf(0x786)];if(_0x53631f['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x25c1c2[_0x185cbf(0x1d8)]=String(RegExp['$1']);else{if(_0x53631f[_0x185cbf(0x299)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x3cc52b=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x185cbf(0x7f7)]('');_0x25c1c2[_0x185cbf(0x1d8)]=DataManager['processRandomizedData'](_0x3cc52b);}}if(_0x53631f[_0x185cbf(0x299)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if('lorFl'===_0x185cbf(0x8f1))return this[_0x185cbf(0xc87)]();else _0x25c1c2[_0x185cbf(0x394)]=eval(RegExp['$1']),_0x25c1c2[_0x185cbf(0x4c1)]=eval(RegExp['$2']);}if(_0x53631f[_0x185cbf(0x299)](/<SIDEVIEW COLLAPSE>/i))_0x25c1c2[_0x185cbf(0xb44)]=!![];else{if(_0x53631f[_0x185cbf(0x299)](/<SIDEVIEW NO COLLAPSE>/i)){if('RexWO'===_0x185cbf(0x428))_0x25c1c2['collapse']=![];else{if(_0x17bdcc[_0x185cbf(0xa78)][_0x185cbf(0x66e)]===0x3)return![];}}}if(_0x53631f['match'](/<SIDEVIEW SHOW SHADOW>/i)){if('lWDjm'==='lWDjm')_0x25c1c2['shadow']=!![];else{if(this[_0x185cbf(0x796)]()!==_0x185cbf(0x745))return;this['drawItemImagePortraitStyle'](_0x1fe32e[_0x185cbf(0x7ca)]());}}else{if(_0x53631f[_0x185cbf(0x299)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x185cbf(0x42f)===_0x185cbf(0x773))return _0x207ccf(_0x1c8520['$1']);else _0x25c1c2[_0x185cbf(0xb49)]=![];}}if(_0x53631f[_0x185cbf(0x299)](/<SIDEVIEW IDLE MOTION: (.*)>/i)){if(_0x185cbf(0xa5e)===_0x185cbf(0xa5e))_0x25c1c2[_0x185cbf(0xbe3)]=String(RegExp['$1'])[_0x185cbf(0x82b)]()['trim']();else{const _0x235e54=this[_0x185cbf(0x1b0)][_0x185cbf(0x379)]['apply'](new _0x9fa41(0x0,0x0)),_0x79259c=this[_0x185cbf(0x1b0)][_0x185cbf(0xa0d)];_0x79259c['x']=_0x235e54['x']+this[_0x185cbf(0x1f2)]['x'],_0x79259c['y']=_0x235e54['y']+this[_0x185cbf(0x1f2)]['y'],_0x79259c[_0x185cbf(0x259)]=this['innerWidth'],_0x79259c[_0x185cbf(0x5ac)]=this[_0x185cbf(0x51c)];}}else{if(_0x53631f[_0x185cbf(0x299)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x418372=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x185cbf(0x7f7)]('');_0x25c1c2[_0x185cbf(0xbe3)]=DataManager['processRandomizedData'](_0x418372);}}_0x53631f[_0x185cbf(0x299)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x25c1c2[_0x185cbf(0x259)]=Number(RegExp['$1']),_0x25c1c2['height']=Number(RegExp['$2']));if(_0x53631f[_0x185cbf(0x299)](/<SIDEVIEW WEAPON: (.*)>/i))_0x185cbf(0xa2b)===_0x185cbf(0xa2b)?_0x25c1c2[_0x185cbf(0x7f5)]=DataManager['getWtypeIdWithName'](RegExp['$1']):_0x2fce09=_0x119e66[_0x185cbf(0x1f1)](_0x4efc3d,_0x440087);else{if(_0x53631f[_0x185cbf(0x299)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x185cbf(0x1e2)!==_0x185cbf(0x1e2))this[_0x185cbf(0xbea)]=!![],this[_0x185cbf(0xad8)]('BattleVictoryJS'),_0xb7e6a0['BattleCore'][_0x185cbf(0x53d)]['call'](this),this[_0x185cbf(0xc5c)](_0x185cbf(0xb5c));else{const _0xed7795=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0x2dfd30=DataManager['processRandomizedData'](_0xed7795);_0x25c1c2[_0x185cbf(0x7f5)]=DataManager['getWtypeIdWithName'](_0x2dfd30);}}}if(Imported['VisuMZ_1_ElementStatusCore']){if(_0x185cbf(0x722)!=='IvieO'){const _0x3bfdea=_0x114c6b[_0x185cbf(0x78b)](_0xd8aa7b['width']/0x2),_0x426e57=_0x1862d3[_0x185cbf(0x78b)](_0x29e209[_0x185cbf(0x5ac)]/0x2);_0x20ef27['setBattleCameraPoint'](_0x3bfdea,_0x426e57,_0x4e17bb[_0x185cbf(0xafa)],_0x37cb5d[_0x185cbf(0x3a5)]);}else{const _0x53f907=this['getTraitSetKeys']();for(const _0x3eb09f of _0x53f907){if(_0x185cbf(0x4c3)!==_0x185cbf(0x4c3)){const _0x2de095=this['commandStyle'](),_0x2a2a06=_0xd21b68[_0x185cbf(0x675)]['Settings'][_0x185cbf(0x2f8)][_0x185cbf(0xaff)],_0x2cde67=_0x2de095===_0x185cbf(0x721)?_0x55cc6f[_0x185cbf(0x951)]:'\x5cI[%1]%2'[_0x185cbf(0x7e1)](_0x2a2a06,_0x3ff525[_0x185cbf(0x951)]),_0x45dbb6=this[_0x185cbf(0x4d4)]();this[_0x185cbf(0x3ff)](_0x2cde67,'escape',_0x45dbb6);}else{const _0x5a7c22=this[_0x185cbf(0xbf6)](_0x3eb09f)[_0x185cbf(0xc22)]['toUpperCase']()[_0x185cbf(0x8f5)](),_0x7e401b=_0x3eb09f[_0x185cbf(0x2ed)]()[_0x185cbf(0x8f5)]();if(_0x53631f[_0x185cbf(0x299)](VisuMZ['ElementStatusCore'][_0x185cbf(0x43f)][_0x185cbf(0xa43)[_0x185cbf(0x7e1)](_0x7e401b,_0x5a7c22)])){if(_0x185cbf(0x28b)===_0x185cbf(0x57e)){const _0x435cb2=_0x1498bf[_0x2aec86];_0x435cb2?this[_0x185cbf(0x60d)](_0x435cb2['list'],0x0):this[_0x185cbf(0x3d0)]();}else _0x25c1c2[_0x185cbf(0x1d8)]=String(RegExp['$1']);}else{if(_0x53631f['match'](VisuMZ[_0x185cbf(0x85e)][_0x185cbf(0x43f)][_0x185cbf(0xcac)[_0x185cbf(0x7e1)](_0x7e401b,_0x5a7c22)])){const _0x734162=String(RegExp['$1'])[_0x185cbf(0x810)](/[\r\n]+/)['remove']('');_0x25c1c2['name']=DataManager[_0x185cbf(0x9e5)](_0x734162);}}if(_0x53631f[_0x185cbf(0x299)](VisuMZ[_0x185cbf(0x85e)]['RegExp'][_0x185cbf(0xc14)[_0x185cbf(0x7e1)](_0x7e401b,_0x5a7c22)])){if(_0x185cbf(0x6e5)==='EvteM'){if(!this['_actor'])return;const _0x1057d3=this[_0x185cbf(0x6f5)][_0x185cbf(0x465)]();for(const _0x266da6 of _0x1057d3){this[_0x185cbf(0x9f7)](_0x266da6[_0x185cbf(0x2ed)]()[_0x185cbf(0x8f5)]());}}else _0x25c1c2['wtypeId']=DataManager[_0x185cbf(0x413)](RegExp['$1']);}else{if(_0x53631f[_0x185cbf(0x299)](VisuMZ[_0x185cbf(0x85e)][_0x185cbf(0x43f)][_0x185cbf(0x798)['format'](_0x7e401b,_0x5a7c22)])){const _0x1a8646=String(RegExp['$1'])[_0x185cbf(0x810)](/[\r\n]+/)[_0x185cbf(0x7f7)](''),_0x23e397=DataManager[_0x185cbf(0x9e5)](_0x1a8646);_0x25c1c2[_0x185cbf(0x7f5)]=DataManager[_0x185cbf(0x413)](_0x23e397);}}if(_0x53631f[_0x185cbf(0x299)](VisuMZ[_0x185cbf(0x85e)]['RegExp'][_0x185cbf(0xa46)['format'](_0x7e401b,_0x5a7c22)]))_0x25c1c2[_0x185cbf(0xbe3)]=String(RegExp['$1'])['toLowerCase']()[_0x185cbf(0x8f5)]();else{if(_0x53631f[_0x185cbf(0x299)](VisuMZ[_0x185cbf(0x85e)][_0x185cbf(0x43f)][_0x185cbf(0x926)[_0x185cbf(0x7e1)](_0x7e401b,_0x5a7c22)])){const _0x2abb16=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x185cbf(0x7f7)]('');_0x25c1c2[_0x185cbf(0xbe3)]=DataManager[_0x185cbf(0x9e5)](_0x2abb16);}}}}}}},Game_Enemy['prototype'][_0x579382(0xb01)]=function(){const _0x23f8b8=_0x579382;return this[_0x23f8b8(0x21c)]||0x0;},Game_Enemy[_0x579382(0x448)][_0x579382(0xb80)]=function(){return this['attackAnimationId1']();},Game_Enemy[_0x579382(0x448)][_0x579382(0xbb2)]=function(_0x4727e5){const _0x2ed2b3=_0x579382;return this[_0x2ed2b3(0xb01)]();},Game_Enemy[_0x579382(0x448)][_0x579382(0x29e)]=function(){const _0x19aee5=_0x579382;if(this['enemy']()[_0x19aee5(0x560)][_0x19aee5(0x299)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x19aee5(0x448)][_0x19aee5(0x29e)][_0x19aee5(0xb95)](this);},Game_Enemy[_0x579382(0x448)][_0x579382(0x327)]=function(){const _0x2987eb=_0x579382;if(this[_0x2987eb(0x82c)]()[_0x2987eb(0x560)][_0x2987eb(0x299)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x579382(0x448)]['skills']=function(){const _0x3c9889=_0x579382,_0x3e6a7e=[];for(const _0x2d78c6 of this['enemy']()['actions']){const _0x25e605=$dataSkills[_0x2d78c6[_0x3c9889(0x5f8)]];if(_0x25e605&&!_0x3e6a7e[_0x3c9889(0xb2b)](_0x25e605))_0x3e6a7e[_0x3c9889(0x226)](_0x25e605);}return _0x3e6a7e;},Game_Enemy[_0x579382(0x448)][_0x579382(0x589)]=function(){const _0x50c20b=_0x579382;let _0x3c6ab4=_0x50c20b(0x589);if(this['checkCacheKey'](_0x3c6ab4))return this['_cache'][_0x3c6ab4];return this[_0x50c20b(0x685)][_0x3c6ab4]=this[_0x50c20b(0x9a0)](this[_0x50c20b(0x82c)]()),this['_cache'][_0x3c6ab4];},Game_Enemy[_0x579382(0x448)][_0x579382(0x44b)]=function(){const _0x1f3cc7=_0x579382;let _0x3d82b3='battleUIOffsetY';if(this['checkCacheKey'](_0x3d82b3))return this[_0x1f3cc7(0x685)][_0x3d82b3];return this[_0x1f3cc7(0x685)][_0x3d82b3]=this[_0x1f3cc7(0x4ac)](this[_0x1f3cc7(0x82c)]()),this[_0x1f3cc7(0x685)][_0x3d82b3];},Game_Enemy[_0x579382(0x448)][_0x579382(0xb27)]=function(){const _0x2a1303=_0x579382;if(this[_0x2a1303(0x786)]!==undefined)return this[_0x2a1303(0x786)];return this[_0x2a1303(0xb6a)](),this[_0x2a1303(0x786)];},Game_Enemy['prototype'][_0x579382(0x611)]=function(){return this['svBattlerData']()['name']!=='';},Game_Enemy['prototype'][_0x579382(0x820)]=function(){const _0x11fd89=_0x579382;return this[_0x11fd89(0xb27)]()[_0x11fd89(0x1d8)];},Game_Enemy['prototype']['battlerSmoothImage']=function(){const _0x4fae28=_0x579382;return this['hasSvBattler']()?_0x4fae28(0x95a)==='OwYEd'?VisuMZ[_0x4fae28(0x675)][_0x4fae28(0x27f)][_0x4fae28(0x7b6)][_0x4fae28(0x879)]:!![]:VisuMZ['BattleCore']['Settings'][_0x4fae28(0x8ff)][_0x4fae28(0x879)];},Game_Enemy['prototype'][_0x579382(0xa77)]=function(_0x134ee0){const _0x37a464=_0x579382;Game_Battler[_0x37a464(0x448)][_0x37a464(0xa77)][_0x37a464(0xb95)](this,_0x134ee0);if(this[_0x37a464(0x611)]())this[_0x37a464(0x5f9)](_0x134ee0);},Game_Enemy['prototype'][_0x579382(0x43a)]=function(){const _0x263be2=_0x579382,_0x5ef1fa=this[_0x263be2(0xb27)]()[_0x263be2(0x7f5)]||0x0,_0x6d065d=$dataSystem['attackMotions'][_0x5ef1fa];if(_0x6d065d){if(_0x263be2(0x7db)!==_0x263be2(0x7db))return _0x34b80e(_0x15ee89['$1'])/0x64;else{if(_0x6d065d[_0x263be2(0x3e4)]===0x0)_0x263be2(0x999)===_0x263be2(0x999)?this['requestMotion'](_0x263be2(0x8f6)):(this[_0x263be2(0x226)](_0x263be2(0x617),[_0x980fa1],_0x36dee6,_0x2507ad),this[_0x263be2(0x226)]('performMoveToTargets',_0x558f9b,_0x20b91f,_0x263be2(0x9d2),_0x167a86,!![],_0x263be2(0xc05),!![]),this[_0x263be2(0x226)](_0x263be2(0x305),[_0x418e20],_0x263be2(0x615)),this['push'](_0x263be2(0xc04)));else{if(_0x6d065d[_0x263be2(0x3e4)]===0x1){if(_0x263be2(0xb21)!==_0x263be2(0x735))this[_0x263be2(0x305)](_0x263be2(0x1bd));else return 0x0;}else _0x6d065d[_0x263be2(0x3e4)]===0x2&&this[_0x263be2(0x305)](_0x263be2(0x6c9));}}}},Game_Enemy[_0x579382(0x448)][_0x579382(0xb1b)]=function(){const _0x4d3c39=_0x579382,_0x45de44=this['svBattlerData']()[_0x4d3c39(0x7f5)]||0x0,_0x4de8f0=$dataSystem[_0x4d3c39(0x4a0)][_0x45de44];_0x4de8f0&&this['startWeaponAnimation'](_0x4de8f0[_0x4d3c39(0x2d0)]);},Game_Enemy[_0x579382(0x448)]['getAttackMotion']=function(){const _0x5427b3=_0x579382,_0x48f4a8=this[_0x5427b3(0xb27)]()[_0x5427b3(0x7f5)]||0x0;return $dataSystem[_0x5427b3(0x4a0)][_0x48f4a8];},Game_Enemy[_0x579382(0x448)]['getAttackMotionSlot']=function(_0x3d3556){const _0x27a789=_0x579382;return this[_0x27a789(0x407)]();},Game_Enemy[_0x579382(0x448)][_0x579382(0x2c3)]=function(){const _0x18abeb=_0x579382;Game_Battler[_0x18abeb(0x448)][_0x18abeb(0x2c3)][_0x18abeb(0xb95)](this),this[_0x18abeb(0x4c9)]()&&this['hasSvBattler']()&&this['requestMotion'](_0x18abeb(0x210)),SoundManager[_0x18abeb(0x84e)]();},Game_Enemy[_0x579382(0x448)][_0x579382(0xab9)]=function(){const _0x23fdd7=_0x579382;Game_Battler[_0x23fdd7(0x448)][_0x23fdd7(0xab9)][_0x23fdd7(0xb95)](this),this[_0x23fdd7(0x305)](_0x23fdd7(0x4e9));},Game_Enemy[_0x579382(0x448)][_0x579382(0x6eb)]=function(){const _0x1f015d=_0x579382;Game_Battler[_0x1f015d(0x448)]['performMagicEvasion'][_0x1f015d(0xb95)](this),this[_0x1f015d(0x305)](_0x1f015d(0x4e9));},Game_Enemy['prototype'][_0x579382(0x7ae)]=function(){const _0x465876=_0x579382;Game_Battler[_0x465876(0x448)][_0x465876(0x7ae)][_0x465876(0xb95)](this),this['performAttack']();},Game_Enemy[_0x579382(0x448)][_0x579382(0x6a4)]=function(){const _0x18a7bd=_0x579382;if(this[_0x18a7bd(0x611)]()){if('vVfJf'!==_0x18a7bd(0x867)){let _0x366cea=_0x489685(_0x4d815e['$1']);while(_0x366cea--){const _0x2e4ba2=_0x1e2f65[_0x18a7bd(0x541)](0x2)===0x0?this['opponentsUnit']():this['friendsUnit']();_0x4515a3[_0x18a7bd(0x226)](_0x2e4ba2[_0x18a7bd(0x8b5)]());}return this[_0x18a7bd(0x7a1)](_0x159d31);}else{if(this[_0x18a7bd(0x3dc)]()>=0x1)return!![];return this[_0x18a7bd(0xb27)]()[_0x18a7bd(0xb44)];}}else return!![];},Game_Enemy[_0x579382(0x448)]['svBattlerAnchorX']=function(){const _0x3d7f09=_0x579382;return this[_0x3d7f09(0xb27)]()[_0x3d7f09(0x394)];},Game_Enemy[_0x579382(0x448)][_0x579382(0x9b0)]=function(){const _0x4791ac=_0x579382;return this[_0x4791ac(0xb27)]()['anchorY'];},Game_Enemy[_0x579382(0x448)][_0x579382(0x7ad)]=function(){const _0x2ae9e0=_0x579382;return this[_0x2ae9e0(0xb27)]()[_0x2ae9e0(0xb49)];},VisuMZ[_0x579382(0x675)][_0x579382(0x539)]=Game_Enemy[_0x579382(0x448)]['transform'],Game_Enemy['prototype']['transform']=function(_0x384add){const _0xdd7976=_0x579382;VisuMZ[_0xdd7976(0x675)][_0xdd7976(0x539)][_0xdd7976(0xb95)](this,_0x384add),this[_0xdd7976(0x41a)](),this['setupBattleCoreData']();const _0x403e48=this[_0xdd7976(0x368)]();if(_0x403e48)_0x403e48[_0xdd7976(0xa48)](this);},Game_Unit[_0x579382(0x448)][_0x579382(0xad8)]=function(_0x4f7f47){const _0x9a6d8d=_0x579382;for(const _0x576f8f of this[_0x9a6d8d(0x295)]()){if(_0x9a6d8d(0xb68)==='LXjrD'){if(_0x576f8f)_0x576f8f[_0x9a6d8d(0xad8)](_0x4f7f47);}else _0x168e4e[_0x9a6d8d(0x675)]['Sprite_StateIcon_updateFrame']['call'](this),this['opacity']=this[_0x9a6d8d(0x8db)]>0x0?0xff:0x0;}},Game_Unit[_0x579382(0x448)]['trueRandomTarget']=function(){const _0x4b4e4b=_0x579382,_0x531d88=this[_0x4b4e4b(0x3a1)]();return _0x531d88[Math[_0x4b4e4b(0x541)](_0x531d88[_0x4b4e4b(0x237)])];},VisuMZ['BattleCore'][_0x579382(0xbb6)]=Game_Party[_0x579382(0x448)]['addActor'],Game_Party[_0x579382(0x448)]['addActor']=function(_0x55d80e){const _0x41744a=_0x579382;VisuMZ[_0x41744a(0x675)][_0x41744a(0xbb6)][_0x41744a(0xb95)](this,_0x55d80e),BattleManager['refreshStatusWindow']();},VisuMZ[_0x579382(0x675)][_0x579382(0xa95)]=Game_Party[_0x579382(0x448)][_0x579382(0xb75)],Game_Party[_0x579382(0x448)][_0x579382(0xb75)]=function(_0x39dab5){const _0x2ad4e3=_0x579382;VisuMZ['BattleCore'][_0x2ad4e3(0xa95)][_0x2ad4e3(0xb95)](this,_0x39dab5),BattleManager[_0x2ad4e3(0x573)]();},VisuMZ['BattleCore']['Game_Troop_setup']=Game_Troop[_0x579382(0x448)][_0x579382(0x60d)],Game_Troop[_0x579382(0x448)][_0x579382(0x60d)]=function(_0x5a8dab){const _0xc19f59=_0x579382;$gameTemp[_0xc19f59(0xbaf)](),$gameTemp[_0xc19f59(0xaba)](_0x5a8dab),VisuMZ[_0xc19f59(0x675)]['Game_Troop_setup'][_0xc19f59(0xb95)](this,_0x5a8dab),this[_0xc19f59(0x8a9)]();},VisuMZ['BattleCore'][_0x579382(0x594)]=Game_Troop[_0x579382(0x448)][_0x579382(0x724)],Game_Troop[_0x579382(0x448)][_0x579382(0x724)]=function(){const _0x4c4724=_0x579382;let _0x51d2da=VisuMZ['BattleCore'][_0x4c4724(0x594)][_0x4c4724(0xb95)](this);return this[_0x4c4724(0x23e)]&&(_0x4c4724(0x6c5)===_0x4c4724(0x6c5)?_0x51d2da*=this[_0x4c4724(0x23e)]():(_0x5d8015[_0x4c4724(0x675)]['Spriteset_Battle_updateActors']['call'](this),this[_0x4c4724(0x3dd)]())),Math[_0x4c4724(0xc7c)](_0x51d2da);},Game_Troop[_0x579382(0x448)][_0x579382(0x23e)]=function(){return 0x1;},Game_Troop['prototype'][_0x579382(0x8a9)]=function(){const _0x18b37e=_0x579382,_0x410f1a=this['troop']()['name']||'';if(_0x410f1a['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x541b38=RegExp['$1'][_0x18b37e(0x810)](',')[_0x18b37e(0xb6e)](_0xb2d131=>Number(_0xb2d131));this[_0x18b37e(0xb19)](),this[_0x18b37e(0x333)](_0x541b38);}},Game_Troop[_0x579382(0x448)]['checkExtendTroopCompatibility']=function(){const _0x24af51=_0x579382;let _0x18db57=_0x24af51(0xca7)+'\x0a';_0x18db57+=_0x24af51(0xa88);if(Imported[_0x24af51(0x7c9)]){if(_0x24af51(0x82d)!==_0x24af51(0x82d)){if(!_0x46818a[_0x24af51(0x448)]['checkShowHideBattleNotetags']['call'](this,_0x63977c))return!![];if(!_0x43ca99[_0x24af51(0x448)][_0x24af51(0x6f4)][_0x24af51(0xb95)](this,_0x55c369))return!![];if(!_0x233d3e[_0x24af51(0x448)][_0x24af51(0x47d)][_0x24af51(0xb95)](this,_0x541b1d))return!![];}else VisuMZ['BattleSystemBTB']['version']<1.11&&(alert(_0x18db57[_0x24af51(0x7e1)](_0x24af51(0x425))),SceneManager[_0x24af51(0x25d)]());}Imported['VisuMZ_2_BattleSystemCTB']&&(_0x24af51(0x7ef)===_0x24af51(0x5dd)?(this[_0x24af51(0xbd4)](_0x24af51(0xa1f),_0x45adc1,0x0,!![]),_0x590aab[_0x24af51(0x675)]['Game_Action_apply'][_0x24af51(0xb95)](this,_0x4c09d1),this['applyBattleCoreJS'](_0x24af51(0x1e1),_0x13571f,this[_0x24af51(0x658)]||0x0,!![]),this['applyResultSwitches'](_0x41ecff)):VisuMZ['BattleSystemCTB'][_0x24af51(0x240)]<1.19&&(_0x24af51(0xcb0)===_0x24af51(0x933)?_0x587af3[_0x24af51(0x7d4)]()?_0x10501e['prototype']['stop'][_0x24af51(0xb95)](this):_0x49b2f9[_0x24af51(0x675)]['Scene_Battle_stop'][_0x24af51(0xb95)](this):(alert(_0x18db57[_0x24af51(0x7e1)](_0x24af51(0x7e0))),SceneManager[_0x24af51(0x25d)]()))),Imported[_0x24af51(0x953)]&&(VisuMZ[_0x24af51(0x946)][_0x24af51(0x240)]<1.15&&(alert(_0x18db57[_0x24af51(0x7e1)](_0x24af51(0x6be))),SceneManager[_0x24af51(0x25d)]()));},Game_Troop[_0x579382(0x448)][_0x579382(0x333)]=function(_0x11bca4){const _0x1bd04b=_0x579382;this[_0x1bd04b(0x4e3)]={};for(const _0xb26b93 of this[_0x1bd04b(0x295)]()){if(_0x1bd04b(0x361)!==_0x1bd04b(0x361))_0x129a20=this[_0x1bd04b(0x9ca)][this[_0x1bd04b(0x9ca)][_0x1bd04b(0x237)]-0x1];else{if(!_0xb26b93)continue;_0xb26b93[_0x1bd04b(0x462)]('');}}for(const _0x255530 of _0x11bca4){if(_0x1bd04b(0xa4d)!==_0x1bd04b(0xa4d)){let _0x2aabd8='battleUIOffsetX';if(this['checkCacheKey'](_0x2aabd8))return this[_0x1bd04b(0x685)][_0x2aabd8];return this[_0x1bd04b(0x685)][_0x2aabd8]=this[_0x1bd04b(0x9a0)](this['enemy']()),this[_0x1bd04b(0x685)][_0x2aabd8];}else{const _0x7af982=$dataTroops[_0x255530];if(_0x7af982)this[_0x1bd04b(0x43c)](_0x7af982);}}this['makeUniqueNames']();},Game_Troop[_0x579382(0x448)]['addExtendedTroopMembers']=function(_0x5ca995){const _0x5227ca=_0x579382;for(const _0x4ff3c3 of _0x5ca995[_0x5227ca(0x295)]){if(_0x5227ca(0xc5b)!==_0x5227ca(0xc5b)){const _0x36db84=this[_0x5227ca(0x33a)]();if(_0x36db84&&this['opacity']<0xff)this[_0x5227ca(0xcbd)]+=0x10;else!_0x36db84&&this[_0x5227ca(0xcbd)]>0x0&&(this[_0x5227ca(0xcbd)]-=0x10);}else{if($dataEnemies[_0x4ff3c3[_0x5227ca(0x610)]]){const _0x5a671c=_0x4ff3c3[_0x5227ca(0x610)],_0x3a4ad5=_0x4ff3c3['x'],_0xaa6413=_0x4ff3c3['y'],_0x31ade9=new Game_Enemy(_0x5a671c,_0x3a4ad5,_0xaa6413);_0x4ff3c3['hidden']&&_0x31ade9[_0x5227ca(0x19b)](),this['_enemies'][_0x5227ca(0x226)](_0x31ade9);}}}},VisuMZ[_0x579382(0x675)][_0x579382(0x564)]=Game_Map[_0x579382(0x448)][_0x579382(0x7f1)],Game_Map[_0x579382(0x448)][_0x579382(0x7f1)]=function(){const _0x1c916b=_0x579382;VisuMZ[_0x1c916b(0x675)][_0x1c916b(0x564)]['call'](this),this[_0x1c916b(0xbcb)]();},Game_Map[_0x579382(0x448)][_0x579382(0xbcb)]=function(){const _0x38f600=_0x579382;this[_0x38f600(0x5d0)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x1af196=$dataMap[_0x38f600(0x560)];if(!_0x1af196)return;const _0x55d674=_0x1af196['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x55d674){if('ZcyHK'==='ZcyHK')for(const _0xc6144e of _0x55d674){if('ntPFn'===_0x38f600(0x5c2)){_0xc6144e[_0x38f600(0x299)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x4fc6b7=Number(RegExp['$1']),_0x102d79=Number(RegExp['$2']),_0x35044b=_0x102d79===0x1?this[_0x38f600(0x5d0)]:this[_0x38f600(0x1e3)],_0x3e4b42=String(RegExp['$3']);_0x35044b[_0x4fc6b7]=_0x3e4b42;}else{if(_0x4a0dab[_0x38f600(0x2fa)])return;this[_0x38f600(0xbfe)](),this[_0x38f600(0x7a0)](),this[_0x38f600(0x5d5)]();}}else _0x4a5ea4[_0x38f600(0x675)]['Sprite_Actor_setBattler'][_0x38f600(0xb95)](this,_0x379570),this[_0x38f600(0xb55)](_0x2d1f90);}},VisuMZ[_0x579382(0x675)]['Game_Map_battleback1Name']=Game_Map[_0x579382(0x448)][_0x579382(0x4b4)],Game_Map[_0x579382(0x448)]['battleback1Name']=function(){const _0x2c008c=_0x579382;if(!BattleManager[_0x2c008c(0x1e8)]()){const _0x563da3=$gamePlayer[_0x2c008c(0x8a5)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x2c008c(0x5d0)]&&this[_0x2c008c(0x5d0)][_0x563da3]){if(_0x2c008c(0x32f)!==_0x2c008c(0x32f)){if(_0xd53bab[_0x2c008c(0xc65)]()){const _0x4e69d4=this[_0x2c008c(0xa84)]();this[_0x2c008c(0x627)](_0x4e69d4);}}else return this[_0x2c008c(0x5d0)][_0x563da3];}}return VisuMZ[_0x2c008c(0x675)][_0x2c008c(0x961)][_0x2c008c(0xb95)](this);},VisuMZ[_0x579382(0x675)][_0x579382(0xc44)]=Game_Map[_0x579382(0x448)]['battleback2Name'],Game_Map[_0x579382(0x448)]['battleback2Name']=function(){const _0x426878=_0x579382;if(!BattleManager[_0x426878(0x1e8)]()){const _0x51cdc1=$gamePlayer[_0x426878(0x8a5)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x426878(0x5d0)]&&this['_regionBattleback2'][_0x51cdc1]){if('SCSjQ'===_0x426878(0x99b))return this[_0x426878(0x1e3)][_0x51cdc1];else this[_0x426878(0x309)]['isSpriteVisible']()&&this[_0x426878(0x32a)]();}}return VisuMZ[_0x426878(0x675)][_0x426878(0xc44)][_0x426878(0xb95)](this);},VisuMZ[_0x579382(0x675)]['Game_Map_encounterList']=Game_Map[_0x579382(0x448)][_0x579382(0x314)],Game_Map['prototype'][_0x579382(0x314)]=function(){const _0x311108=_0x579382;let _0x5333e7=JsonEx[_0x311108(0x247)](VisuMZ[_0x311108(0x675)][_0x311108(0x937)]['call'](this));return VisuMZ[_0x311108(0x675)][_0x311108(0x9fc)](_0x5333e7);},VisuMZ[_0x579382(0x675)]['ShuffleArray']=function(_0x4dc5bf){const _0x2d3185=_0x579382;var _0x32885c,_0x2d2420,_0x4263be;for(_0x4263be=_0x4dc5bf[_0x2d3185(0x237)]-0x1;_0x4263be>0x0;_0x4263be--){if(_0x2d3185(0x1cf)===_0x2d3185(0x39b))return this[_0x2d3185(0xb27)]()[_0x2d3185(0x1d8)]!=='';else _0x32885c=Math[_0x2d3185(0x51f)](Math[_0x2d3185(0xc4a)]()*(_0x4263be+0x1)),_0x2d2420=_0x4dc5bf[_0x4263be],_0x4dc5bf[_0x4263be]=_0x4dc5bf[_0x32885c],_0x4dc5bf[_0x32885c]=_0x2d2420;}return _0x4dc5bf;},VisuMZ[_0x579382(0x675)]['Game_Interpreter_PluginCommand']=Game_Interpreter[_0x579382(0x448)]['command357'],Game_Interpreter[_0x579382(0x448)][_0x579382(0x98f)]=function(_0x277d1d){const _0x4023ba=_0x579382;return $gameTemp[_0x4023ba(0x24c)](this),VisuMZ[_0x4023ba(0x675)][_0x4023ba(0x3fc)]['call'](this,_0x277d1d);},VisuMZ[_0x579382(0x675)]['Game_Interpreter_updateWaitMode']=Game_Interpreter['prototype'][_0x579382(0xc3b)],Game_Interpreter[_0x579382(0x448)]['updateWaitMode']=function(){const _0x31e147=_0x579382;if(SceneManager[_0x31e147(0xc65)]())switch(this[_0x31e147(0x6ef)]){case'battleAngle':if(Imported[_0x31e147(0xb4d)]){if($gameScreen[_0x31e147(0x36a)]()[_0x31e147(0x55d)]>0x0)return!![];this['_waitMode']='';}break;case _0x31e147(0x4b1):if(BattleManager[_0x31e147(0x748)][_0x31e147(0x344)]())return!![];this[_0x31e147(0x6ef)]='';break;case _0x31e147(0xa94):if(Imported[_0x31e147(0xb4d)]){if($gameScreen[_0x31e147(0x36a)]()[_0x31e147(0x4d0)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x31e147(0x93d)]>0x0)return!![];this[_0x31e147(0x6ef)]='';}break;case'battleEffect':if(BattleManager[_0x31e147(0x748)][_0x31e147(0x460)]())return!![];this[_0x31e147(0x6ef)]='';break;case _0x31e147(0x948):if(BattleManager[_0x31e147(0x748)][_0x31e147(0x3d6)]())return!![];this['_waitMode']='';break;case'battleJump':if(BattleManager['_spriteset'][_0x31e147(0x7a5)]())return!![];this[_0x31e147(0x6ef)]='';break;case _0x31e147(0x8cd):if(BattleManager['_logWindow']['isBusy']())return!![];this['_waitMode']='';break;case'battleMove':if(BattleManager['_spriteset'][_0x31e147(0x275)]())return!![];this['_waitMode']='';break;case _0x31e147(0x34a):if(BattleManager[_0x31e147(0x748)]['isAnyoneChangingOpacity']())return!![];this['_waitMode']='';break;case _0x31e147(0x8e6):if(BattleManager['_spriteset'][_0x31e147(0xb86)]())return!![];this[_0x31e147(0x6ef)]='';break;case _0x31e147(0x21a):if(BattleManager[_0x31e147(0x748)][_0x31e147(0x3fb)]())return!![];this[_0x31e147(0x6ef)]='';break;case _0x31e147(0xc60):if(Imported[_0x31e147(0x1d7)]){if(BattleManager['_spriteset'][_0x31e147(0x716)]())return!![];this[_0x31e147(0x6ef)]='';}break;case _0x31e147(0x4a8):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x31e147(0x36a)]()[_0x31e147(0xa11)]>0x0)return!![];this['_waitMode']='';}break;case _0x31e147(0x207):if(BattleManager[_0x31e147(0x748)][_0x31e147(0xb18)]())return!![];this['_waitMode']='';break;case'battleZoom':if(Imported[_0x31e147(0xb4d)]){if($gameScreen[_0x31e147(0x36a)]()['zoomDuration']>0x0)return!![];this['_waitMode']='';}break;case _0x31e147(0x3c4):if(Imported[_0x31e147(0xa3d)]){if(_0x31e147(0x34d)==='bcbgf'){if(BattleManager['_spriteset'][_0x31e147(0xae2)]){if(BattleManager[_0x31e147(0x748)][_0x31e147(0xae2)]())return!![];this['_waitMode']=_0x31e147(0x322);}else this[_0x31e147(0x6ef)]='';break;}else{const _0x43a011=_0x35e2ac[_0x31e147(0xbc5)]['_statusWindow'];if(_0x43a011)_0x43a011[_0x31e147(0x6e9)](_0x38828c,this['_battler']);}}break;case _0x31e147(0x322):if(Imported[_0x31e147(0xa3d)]){if(BattleManager[_0x31e147(0x748)][_0x31e147(0xbbd)]())return!![];this[_0x31e147(0x6ef)]='';}break;}return VisuMZ[_0x31e147(0x675)][_0x31e147(0x228)]['call'](this);},VisuMZ[_0x579382(0x675)][_0x579382(0x5ff)]=Game_Interpreter['prototype'][_0x579382(0x44e)],Game_Interpreter[_0x579382(0x448)][_0x579382(0x44e)]=function(_0x1db0ab){const _0x134925=_0x579382;if(!$gameParty[_0x134925(0x2c2)]())return this[_0x134925(0x1c7)](_0x1db0ab);else{if(_0x134925(0x866)!=='SdweC')this[_0x134925(0x9a9)]=null,_0x4d5f7e[_0x134925(0x675)]['Window_BattleEnemy_initialize']['call'](this,_0x53fbdf);else return VisuMZ[_0x134925(0x675)][_0x134925(0x5ff)][_0x134925(0xb95)](this,_0x1db0ab);}},Game_Interpreter['prototype'][_0x579382(0x5ce)]=function(_0x19b508){const _0x261e39=_0x579382;return VisuMZ[_0x261e39(0x675)][_0x261e39(0x5ff)][_0x261e39(0xb95)](this,_0x19b508),BattleManager['setEventCallback'](_0xf57f9d=>{const _0x22418d=_0x261e39;this['_branch'][this[_0x22418d(0x9c7)]]=_0xf57f9d;}),!![];},VisuMZ['BattleCore'][_0x579382(0x58d)]=function(_0x28b0c3){const _0x538847=_0x579382,_0x5ac1b4=$dataCommonEvents[_0x28b0c3];if(!_0x5ac1b4)return![];if(_0x5ac1b4[_0x538847(0xc74)]['length']<=0x1)return![];return!![];},Game_Interpreter[_0x579382(0x448)]['command301_PreBattleEvent']=function(_0x53c95d){const _0x31148f=_0x579382,_0xa1b967=VisuMZ[_0x31148f(0x675)]['Settings'][_0x31148f(0x4c5)],_0x4a40b4=_0xa1b967[_0x31148f(0xb0e)],_0xefbefe=$dataCommonEvents[_0x4a40b4];if(_0xefbefe&&VisuMZ['BattleCore'][_0x31148f(0x58d)](_0x4a40b4)){if(_0x31148f(0x9f8)==='Wqoin'){const _0x1720c2=this['isOnCurrentMap']()?this['_eventId']:0x0,_0x91c460=_0xefbefe[_0x31148f(0xc74)];this['setupChild'](_0x91c460,_0x1720c2),this[_0x31148f(0x72f)]=JsonEx[_0x31148f(0x247)](this[_0x31148f(0x72f)]);const _0x43c5e2={'code':0xbc3,'indent':this[_0x31148f(0x9c7)],'parameters':JsonEx[_0x31148f(0x247)](_0x53c95d)};return this[_0x31148f(0x72f)][_0x31148f(0x1da)](this[_0x31148f(0x5c8)]+0x1,0x0,_0x43c5e2),!![];}else _0x3176b4+=_0x106ff1,_0x11ab99+=_0x5d4fa5;}else return VisuMZ[_0x31148f(0x675)][_0x31148f(0x5ff)][_0x31148f(0xb95)](this,_0x53c95d);},VisuMZ['BattleCore']['BattleManager_onEncounter']=BattleManager[_0x579382(0x277)],BattleManager[_0x579382(0x277)]=function(){const _0x149ed9=_0x579382;VisuMZ[_0x149ed9(0x675)][_0x149ed9(0x618)]['call'](this),this[_0x149ed9(0x205)]();},BattleManager[_0x579382(0x205)]=function(){const _0x6295a2=_0x579382,_0x4fbd39=VisuMZ[_0x6295a2(0x675)][_0x6295a2(0x27f)][_0x6295a2(0x4c5)],_0x96431=_0x4fbd39[_0x6295a2(0xb0e)];_0x96431&&VisuMZ[_0x6295a2(0x675)][_0x6295a2(0x58d)](_0x96431)&&(_0x6295a2(0x609)!==_0x6295a2(0x609)?_0x4df7d4[_0x6295a2(0x6b8)]():(this[_0x6295a2(0x84d)]=!![],$gameTemp[_0x6295a2(0xb36)](_0x4fbd39[_0x6295a2(0xb0e)]),$gameMap[_0x6295a2(0x59f)](),$gameMap['_interpreter'][_0x6295a2(0x632)]=!![])),_0x4fbd39[_0x6295a2(0x4ba)]>0x0&&(this[_0x6295a2(0x96d)]=!![]);},VisuMZ[_0x579382(0x675)][_0x579382(0x4e4)]=Scene_Map['prototype'][_0x579382(0xa65)],Scene_Map['prototype']['updateCallMenu']=function(){const _0x4ea0d6=_0x579382;if(BattleManager[_0x4ea0d6(0x84d)])return;VisuMZ[_0x4ea0d6(0x675)][_0x4ea0d6(0x4e4)]['call'](this);},VisuMZ[_0x579382(0x675)]['Scene_Map_launchBattle']=Scene_Map[_0x579382(0x448)][_0x579382(0x6a0)],Scene_Map[_0x579382(0x448)][_0x579382(0x6a0)]=function(){const _0x4bb5c3=_0x579382;if(BattleManager[_0x4bb5c3(0x84d)])this[_0x4bb5c3(0x8fa)]();else{if(_0x4bb5c3(0xbf9)!==_0x4bb5c3(0xbf9)){this['clearResult']();if(_0x461bf6[_0x4bb5c3(0xc59)]){const _0x2285fb=_0x37f496[_0x4bb5c3(0xc88)][_0x4bb5c3(0x27f)]['States'];_0x2285fb&&_0x2285fb[_0x4bb5c3(0x531)]===![]&&this[_0x4bb5c3(0x62d)](0x1);}else this['removeStatesAuto'](0x1);this[_0x4bb5c3(0xc73)]();}else VisuMZ['BattleCore']['Scene_Map_launchBattle']['call'](this);}},Scene_Map[_0x579382(0x448)][_0x579382(0x8fa)]=function(){const _0xb7a5fa=_0x579382;this[_0xb7a5fa(0x8fb)]=!![];},VisuMZ['BattleCore'][_0x579382(0x614)]=SceneManager['isSceneChanging'],SceneManager['isSceneChanging']=function(){const _0xba2939=_0x579382;if(BattleManager[_0xba2939(0x84d)])return![];return VisuMZ['BattleCore'][_0xba2939(0x614)][_0xba2939(0xb95)](this);},VisuMZ['BattleCore']['Game_Interpreter_terminate']=Game_Interpreter['prototype'][_0x579382(0x3d0)],Game_Interpreter[_0x579382(0x448)][_0x579382(0x3d0)]=function(){const _0x41370f=_0x579382;VisuMZ[_0x41370f(0x675)][_0x41370f(0x97b)][_0x41370f(0xb95)](this),this['_preBattleCommonEvent']&&(this[_0x41370f(0x632)]=undefined,SceneManager['_scene']['battleCoreResumeLaunchBattle']());},Scene_Map[_0x579382(0x448)][_0x579382(0x6fc)]=function(){const _0x315ee4=_0x579382;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x315ee4(0xae9)]();},VisuMZ[_0x579382(0x675)][_0x579382(0x2bb)]=Scene_Map[_0x579382(0x448)][_0x579382(0x921)],Scene_Map['prototype'][_0x579382(0x921)]=function(){const _0x4e8593=_0x579382;VisuMZ[_0x4e8593(0x675)][_0x4e8593(0x2bb)][_0x4e8593(0xb95)](this);if(BattleManager[_0x4e8593(0x42b)]){if(_0x4e8593(0x5b9)!==_0x4e8593(0x5b9)){const _0x29a50d=this[_0x4e8593(0x577)](_0x2970cd),_0x2e07b4=new(_0x29a50d?_0x121010:_0x297c82)(),_0x514566=this[_0x4e8593(0x300)](_0x25dace);this['animationShouldMirror'](_0x36f276[0x0])&&(_0x13c727=!_0x2dec92),_0x2e07b4[_0x4e8593(0xa1b)]=_0x4ee955,_0x2e07b4['setup'](_0x514566,_0x33c226,_0x4b1c29,_0x619bed),this[_0x4e8593(0xbca)](_0x2e07b4);}else this[_0x4e8593(0x8fb)]=!![],BattleManager[_0x4e8593(0x42b)]=undefined;}},VisuMZ[_0x579382(0x675)][_0x579382(0x689)]=Scene_Map['prototype'][_0x579382(0x921)],Scene_Map['prototype'][_0x579382(0x921)]=function(){const _0x305c46=_0x579382;VisuMZ[_0x305c46(0x675)][_0x305c46(0x689)]['call'](this),$gameTemp[_0x305c46(0xbaf)]();},VisuMZ['BattleCore'][_0x579382(0x718)]=Scene_ItemBase[_0x579382(0x448)][_0x579382(0xb4b)],Scene_ItemBase[_0x579382(0x448)][_0x579382(0xb4b)]=function(){const _0x1dbecc=_0x579382;VisuMZ['BattleCore']['Scene_ItemBase_applyItem'][_0x1dbecc(0xb95)](this);if(this[_0x1dbecc(0x270)]()[_0x1dbecc(0x560)][_0x1dbecc(0x299)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x1dbecc(0x754)===_0x1dbecc(0x734))return this['_phase']===_0x1dbecc(0x535)?this['battleCoreTpbMainPhase']():_0xc81759['BattleCore']['BattleManager_isTpbMainPhase'][_0x1dbecc(0xb95)](this);else return;}this[_0x1dbecc(0x270)]()[_0x1dbecc(0x560)][_0x1dbecc(0x299)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp['_commonEventQueue']=[]),DataManager[_0x1dbecc(0x81f)](this['item']())&&($gameTemp[_0x1dbecc(0x422)]=[]);},VisuMZ[_0x579382(0x675)][_0x579382(0x3e9)]=Scene_Options[_0x579382(0x448)]['maxCommands'],Scene_Options['prototype'][_0x579382(0x35d)]=function(){const _0x5e80eb=_0x579382;let _0x40a6ed=VisuMZ[_0x5e80eb(0x675)][_0x5e80eb(0x3e9)][_0x5e80eb(0xb95)](this);const _0x4bcfec=VisuMZ[_0x5e80eb(0x675)][_0x5e80eb(0x27f)];if(_0x4bcfec['AutoBattle'][_0x5e80eb(0x57d)]&&_0x4bcfec[_0x5e80eb(0x6d6)][_0x5e80eb(0xb12)])_0x40a6ed+=0x2;if(_0x4bcfec[_0x5e80eb(0x3f0)][_0x5e80eb(0x57d)]&&_0x4bcfec[_0x5e80eb(0x3f0)][_0x5e80eb(0xb12)])_0x40a6ed+=0x1;return _0x40a6ed;},VisuMZ[_0x579382(0x675)][_0x579382(0x697)]=Scene_Battle['prototype']['initialize'],Scene_Battle[_0x579382(0x448)][_0x579382(0x921)]=function(){const _0x16549f=_0x579382;VisuMZ[_0x16549f(0x675)][_0x16549f(0x697)][_0x16549f(0xb95)](this),this[_0x16549f(0x4f8)]();},VisuMZ[_0x579382(0x675)][_0x579382(0xbb1)]=Scene_Battle[_0x579382(0x448)][_0x579382(0x971)],Scene_Battle['prototype'][_0x579382(0x971)]=function(){const _0x5028b8=_0x579382;if(SceneManager[_0x5028b8(0x1ba)]()){Scene_Message[_0x5028b8(0x448)][_0x5028b8(0x971)][_0x5028b8(0xb95)](this);if(this[_0x5028b8(0x748)]){if(_0x5028b8(0x5cd)===_0x5028b8(0x538))return _0x490b23[_0x5028b8(0x675)][_0x5028b8(0x27f)][_0x5028b8(0x4c5)][_0x5028b8(0x3d2)];else this['_spriteset'][_0x5028b8(0x6b8)]();}BattleManager[_0x5028b8(0x219)]&&BattleManager['revertTpbCachedActor']();}else'zqnSJ'===_0x5028b8(0x298)?(VisuMZ[_0x5028b8(0x675)][_0x5028b8(0xbb1)][_0x5028b8(0xb95)](this),$gameTroop[_0x5028b8(0xc1b)]()):this['requestMotion']('missile');},VisuMZ['BattleCore'][_0x579382(0x4d6)]=Scene_Battle[_0x579382(0x448)]['stop'],Scene_Battle[_0x579382(0x448)]['stop']=function(){const _0x3ed1ca=_0x579382;SceneManager[_0x3ed1ca(0x7d4)]()?_0x3ed1ca(0x8f4)===_0x3ed1ca(0x8aa)?_0x19fc96['prototype']['loadWindowskin'][_0x3ed1ca(0xb95)](this):Scene_Message['prototype']['stop'][_0x3ed1ca(0xb95)](this):VisuMZ[_0x3ed1ca(0x675)][_0x3ed1ca(0x4d6)][_0x3ed1ca(0xb95)](this);},VisuMZ['BattleCore'][_0x579382(0xcb2)]=Scene_Battle[_0x579382(0x448)][_0x579382(0x3d0)],Scene_Battle['prototype'][_0x579382(0x3d0)]=function(){const _0x2261f3=_0x579382;SceneManager[_0x2261f3(0x7d4)]()?Scene_Message[_0x2261f3(0x448)]['terminate'][_0x2261f3(0xb95)](this):VisuMZ[_0x2261f3(0x675)][_0x2261f3(0xcb2)][_0x2261f3(0xb95)](this),this['clearOnceParallelInterpreters']();},Scene_Battle['prototype'][_0x579382(0x63d)]=function(){const _0x45e02b=_0x579382;if(ConfigManager[_0x45e02b(0x9e6)]&&ConfigManager[_0x45e02b(0xc12)]!==undefined){if('heUCk'===_0x45e02b(0x29d))return ConfigManager[_0x45e02b(0xc12)];else this['_weaponImageId']=_0x14bd40,this['_animationCount']=-0x1,this['_pattern']=0x0,this[_0x45e02b(0xb61)](),this['updateFrame']();}else{if(this['battleLayoutStyle']()==='border')return![];else{if('xqtPb'==='xqtPb'){return Scene_Message[_0x45e02b(0x448)]['isRightInputMode'][_0x45e02b(0xb95)](this);;}else this[_0x45e02b(0xc5d)][_0x45e02b(0x8c2)]['smooth']!==this[_0x45e02b(0x309)][_0x45e02b(0x4fa)]()&&(this[_0x45e02b(0xc5d)][_0x45e02b(0x8c2)][_0x45e02b(0x2be)]=this[_0x45e02b(0x309)][_0x45e02b(0x4fa)]());}}},VisuMZ[_0x579382(0x675)][_0x579382(0x63f)]=Scene_Battle[_0x579382(0x448)][_0x579382(0xb35)],Scene_Battle['prototype'][_0x579382(0xb35)]=function(){const _0x5769e5=_0x579382;this[_0x5769e5(0xc09)](),VisuMZ[_0x5769e5(0x675)][_0x5769e5(0x63f)][_0x5769e5(0xb95)](this),this[_0x5769e5(0x5fe)]();},VisuMZ[_0x579382(0x675)][_0x579382(0x261)]=Scene_Battle[_0x579382(0x448)][_0x579382(0xa2a)],Scene_Battle['prototype'][_0x579382(0xa2a)]=function(){const _0x75d084=_0x579382;VisuMZ[_0x75d084(0x675)][_0x75d084(0x261)][_0x75d084(0xb95)](this),this[_0x75d084(0x796)]()===_0x75d084(0x5d8)&&this[_0x75d084(0x4fe)]();},Scene_Battle['prototype'][_0x579382(0xb84)]=function(_0x1cddfe){const _0x2bf571=_0x579382;_0x1cddfe?(this[_0x2bf571(0xa75)]['x']=(Graphics[_0x2bf571(0x259)]-Graphics[_0x2bf571(0x77e)])/0x2,this[_0x2bf571(0xa75)]['y']=(Graphics['height']-Graphics['boxHeight'])/0x2):(this[_0x2bf571(0xa75)]['x']=Graphics[_0x2bf571(0x259)]*0xa,this[_0x2bf571(0xa75)]['y']=Graphics[_0x2bf571(0x5ac)]*0xa);},VisuMZ[_0x579382(0x675)][_0x579382(0xa6c)]=Scene_Battle[_0x579382(0x448)][_0x579382(0xaac)],Scene_Battle[_0x579382(0x448)][_0x579382(0xaac)]=function(){const _0x412ffa=_0x579382,_0x4cc34e=BattleManager['actor']();VisuMZ[_0x412ffa(0x675)]['Scene_Battle_selectNextCommand'][_0x412ffa(0xb95)](this);if(_0x4cc34e){if(_0x412ffa(0x9e4)!==_0x412ffa(0x9e4))this[_0x412ffa(0x5c5)]['x']=-this[_0x412ffa(0x5c5)][_0x412ffa(0x259)]-0x4;else{if(_0x4cc34e===BattleManager['actor']())return;if(_0x4cc34e===BattleManager[_0x412ffa(0x7c7)])return;if(_0x4cc34e[_0x412ffa(0x368)]())_0x4cc34e[_0x412ffa(0x368)]()['stepBack']();}}},VisuMZ[_0x579382(0x675)][_0x579382(0xc69)]=Scene_Battle['prototype'][_0x579382(0x815)],Scene_Battle[_0x579382(0x448)]['selectPreviousCommand']=function(){const _0x217cd2=_0x579382,_0x2fe91d=BattleManager[_0x217cd2(0x6b7)]();if(_0x2fe91d&&_0x2fe91d[_0x217cd2(0x368)])_0x2fe91d['battler']()[_0x217cd2(0x44f)]();VisuMZ[_0x217cd2(0x675)][_0x217cd2(0xc69)]['call'](this);},VisuMZ[_0x579382(0x675)]['Scene_Battle_logWindowRect']=Scene_Battle[_0x579382(0x448)][_0x579382(0xc8e)],Scene_Battle[_0x579382(0x448)][_0x579382(0xc8e)]=function(){const _0x5abb92=_0x579382;if(VisuMZ[_0x5abb92(0x675)][_0x5abb92(0x27f)][_0x5abb92(0xaf0)][_0x5abb92(0x7c4)]){if('LtNFY'!==_0x5abb92(0x7f2))return VisuMZ[_0x5abb92(0x675)][_0x5abb92(0x27f)][_0x5abb92(0xaf0)][_0x5abb92(0x7c4)][_0x5abb92(0xb95)](this);else{if(_0x144cd9===_0x316a40[_0x5abb92(0x6b7)]())return;if(_0x504ae8===_0x2ecfdf[_0x5abb92(0x7c7)])return;if(_0x8a901d[_0x5abb92(0x368)]())_0x39c297[_0x5abb92(0x368)]()[_0x5abb92(0x44f)]();}}return VisuMZ['BattleCore'][_0x5abb92(0xc4f)][_0x5abb92(0xb95)](this);},VisuMZ[_0x579382(0x675)][_0x579382(0xa50)]=Scene_Battle[_0x579382(0x448)][_0x579382(0x7fb)],Scene_Battle[_0x579382(0x448)]['createPartyCommandWindow']=function(){const _0x2483da=_0x579382;VisuMZ[_0x2483da(0x675)][_0x2483da(0xa50)]['call'](this),this[_0x2483da(0x39e)]();},Scene_Battle['prototype'][_0x579382(0x39e)]=function(){const _0x421802=_0x579382,_0x455552=this['_partyCommandWindow'];_0x455552[_0x421802(0x37a)]('autoBattle',this['commandAutoBattle'][_0x421802(0x9df)](this)),_0x455552[_0x421802(0x37a)](_0x421802(0xaad),this[_0x421802(0x93e)]['bind'](this));const _0x4078bc=this['battleLayoutStyle']();switch(_0x4078bc){case'xp':case _0x421802(0x745):return this['_partyCommandWindow'][_0x421802(0x38a)](0x1);break;}},Scene_Battle[_0x579382(0x448)][_0x579382(0xa19)]=function(){const _0xcc0f0e=_0x579382;BattleManager[_0xcc0f0e(0x725)]=!![],$gameParty[_0xcc0f0e(0x318)](),this['selectNextCommand'](),BattleManager[_0xcc0f0e(0x630)]()&&(BattleManager[_0xcc0f0e(0x5bb)]=![]);},Scene_Battle['prototype'][_0x579382(0x93e)]=function(){const _0x151b5d=_0x579382;this['isQueueOptionsMenu']()?(this['_callSceneOptions']=!![],this['_logWindow']['push'](_0x151b5d(0x693),VisuMZ[_0x151b5d(0x675)][_0x151b5d(0x27f)][_0x151b5d(0x2f8)][_0x151b5d(0xcc0)])):this['callOptions']();},Scene_Battle[_0x579382(0x448)][_0x579382(0x9f5)]=function(){const _0x21e719=_0x579382;return BattleManager[_0x21e719(0x373)]();},Scene_Battle[_0x579382(0x448)][_0x579382(0x397)]=function(){const _0x35de8f=_0x579382;this[_0x35de8f(0x878)]=![],this[_0x35de8f(0x748)]['update'](),this[_0x35de8f(0xa75)]['visible']=![];if(BattleManager[_0x35de8f(0x1e8)]())($dataSystem['battleback1Name']||$dataSystem[_0x35de8f(0xc8a)])&&SceneManager[_0x35de8f(0x77f)]();else($gameMap['battleback1Name']()||$gameMap['battleback2Name']())&&SceneManager[_0x35de8f(0x77f)]();SceneManager[_0x35de8f(0x226)](Scene_Options),BattleManager[_0x35de8f(0x630)]()&&(BattleManager[_0x35de8f(0x219)]=BattleManager[_0x35de8f(0x6b7)]());},VisuMZ[_0x579382(0x675)][_0x579382(0x767)]=Scene_Battle[_0x579382(0x448)][_0x579382(0x348)],Scene_Battle['prototype'][_0x579382(0x348)]=function(){const _0x1dc5ec=_0x579382;VisuMZ[_0x1dc5ec(0x675)][_0x1dc5ec(0x767)]['call'](this);if(this[_0x1dc5ec(0x878)]&&!BattleManager['_subject'])this['callOptions']();},VisuMZ['BattleCore']['Scene_Battle_update']=Scene_Battle[_0x579382(0x448)][_0x579382(0x6b8)],Scene_Battle[_0x579382(0x448)][_0x579382(0x6b8)]=function(){const _0x531c4c=_0x579382;VisuMZ[_0x531c4c(0x675)][_0x531c4c(0x575)]['call'](this),this[_0x531c4c(0xaf3)]();},Scene_Battle[_0x579382(0x448)][_0x579382(0x5fe)]=function(){const _0x3dc55a=_0x579382,_0x3be3b5=this[_0x3dc55a(0xa81)]();this[_0x3dc55a(0x76f)]=new Window_AutoBattleCancel(_0x3be3b5),this[_0x3dc55a(0x76f)][_0x3dc55a(0x19b)](),this[_0x3dc55a(0xbb0)](this[_0x3dc55a(0x76f)]);},Scene_Battle[_0x579382(0x448)][_0x579382(0xa81)]=function(){const _0x10d9e1=_0x579382;return VisuMZ[_0x10d9e1(0x675)]['Settings'][_0x10d9e1(0x6d6)][_0x10d9e1(0x4bd)]['call'](this);},Scene_Battle[_0x579382(0x448)]['clearOnceParallelInterpreters']=function(){const _0x28d248=_0x579382;this[_0x28d248(0xa00)]=[];},Scene_Battle['prototype'][_0x579382(0xaf3)]=function(){const _0x18bb1c=_0x579382;if(!this[_0x18bb1c(0xa00)])return;for(const _0x15da9b of this[_0x18bb1c(0xa00)]){_0x15da9b&&_0x15da9b['update']();}},Scene_Battle[_0x579382(0x448)]['playOnceParallelInterpreter']=function(_0x2cb6b5){const _0x14fa3d=_0x579382,_0x417c05=$dataCommonEvents[_0x2cb6b5];if(!_0x417c05)return;const _0x4b233f=new Game_BattleOnceParallelInterpreter();this[_0x14fa3d(0x8b4)](_0x4b233f),_0x4b233f[_0x14fa3d(0x6c6)](_0x2cb6b5);},Scene_Battle[_0x579382(0x448)][_0x579382(0x8b4)]=function(_0x1c2de0){const _0x4070f1=_0x579382;this[_0x4070f1(0xa00)]=this[_0x4070f1(0xa00)]||[],this[_0x4070f1(0xa00)][_0x4070f1(0x226)](_0x1c2de0);},Scene_Battle[_0x579382(0x448)][_0x579382(0x6b5)]=function(_0xa7852c){const _0x12d216=_0x579382;this[_0x12d216(0xa00)]=this['_onceParallelInterpreters']||[],this[_0x12d216(0xa00)]['remove'](_0xa7852c);},Game_Troop[_0x579382(0x448)][_0x579382(0xc1b)]=function(){const _0x57d9df=_0x579382;for(const _0x355ae1 of this[_0x57d9df(0x8a1)]()['pages']){if(!this[_0x57d9df(0xab2)](_0x355ae1))continue;SceneManager[_0x57d9df(0xbc5)][_0x57d9df(0xc3d)](_0x355ae1);}},Game_Troop['prototype'][_0x579382(0xab2)]=function(_0x4b677b){const _0x1cc94f=_0x579382;if(!_0x4b677b)return;for(const _0x6eb087 of _0x4b677b[_0x1cc94f(0xc74)]){if([0x6c,0x198][_0x1cc94f(0xb2b)](_0x6eb087[_0x1cc94f(0xb10)])){if('XsfAy'===_0x1cc94f(0xbf3)){const _0x10d110=_0x6eb087[_0x1cc94f(0xb89)][0x0];if(_0x10d110['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}else _0x1eadbe[_0x1cc94f(0x9c8)]('battleAnimation');}}return![];},Scene_Battle[_0x579382(0x448)][_0x579382(0xc3d)]=function(_0x3a02f5){const _0x543346=_0x579382;if(!_0x3a02f5)return;const _0x559886=new Game_BattleOnceParallelInterpreter();this[_0x543346(0x8b4)](_0x559886),_0x559886['setTroopPage'](_0x3a02f5);};function Game_BattleOnceParallelInterpreter(){const _0x43eb0b=_0x579382;this[_0x43eb0b(0x921)](...arguments);}Game_BattleOnceParallelInterpreter[_0x579382(0x448)]=Object[_0x579382(0x766)](Game_Interpreter[_0x579382(0x448)]),Game_BattleOnceParallelInterpreter[_0x579382(0x448)][_0x579382(0x622)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x579382(0x6c6)]=function(_0x2a26d9){const _0x52d680=_0x579382,_0x13a3c1=$dataCommonEvents[_0x2a26d9];_0x13a3c1?this['setup'](_0x13a3c1[_0x52d680(0xc74)],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter[_0x579382(0x448)][_0x579382(0x3d0)]=function(){const _0x14d617=_0x579382;if(!SceneManager[_0x14d617(0xc65)]())return;SceneManager['_scene'][_0x14d617(0x6b5)](this),Game_Interpreter[_0x14d617(0x448)][_0x14d617(0x3d0)][_0x14d617(0xb95)](this);},Game_BattleOnceParallelInterpreter['prototype']['setTroopPage']=function(_0x46f244){const _0x442ec2=_0x579382;_0x46f244?this['setup'](_0x46f244[_0x442ec2(0xc74)],0x0):_0x442ec2(0xc4e)!==_0x442ec2(0x61e)?this['terminate']():this[_0x442ec2(0x5ba)](_0x442ec2(0x615));},Scene_Battle[_0x579382(0x448)][_0x579382(0x3e3)]=function(){const _0xb99643=_0x579382;return VisuMZ[_0xb99643(0x675)]['Settings'][_0xb99643(0x2f8)][_0xb99643(0x776)];},VisuMZ[_0x579382(0x675)]['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x579382(0x448)][_0x579382(0x255)],Scene_Battle[_0x579382(0x448)][_0x579382(0x255)]=function(){const _0x4413f1=_0x579382;this[_0x4413f1(0x3e3)]()?this[_0x4413f1(0x91a)]():VisuMZ[_0x4413f1(0x675)][_0x4413f1(0x2e1)][_0x4413f1(0xb95)](this);},Scene_Battle[_0x579382(0x448)][_0x579382(0x91a)]=function(){const _0x248ec9=_0x579382;if(BattleManager[_0x248ec9(0x40e)]())this['selectNextCommand']();else{if(BattleManager[_0x248ec9(0x630)]()){if(_0x248ec9(0x383)==='ISAJg'){const _0x4a99cb=_0x3cb3cc(_0x1992c2['$1'])['split'](/[\r\n]+/)[_0x248ec9(0x7f7)]('');_0x362d28[_0x248ec9(0xbe3)]=_0x42ea76[_0x248ec9(0x9e5)](_0x4a99cb);}else VisuMZ[_0x248ec9(0x675)][_0x248ec9(0x2e1)][_0x248ec9(0xb95)](this);}}},VisuMZ['BattleCore'][_0x579382(0x93b)]=Scene_Battle[_0x579382(0x448)][_0x579382(0xcba)],Scene_Battle['prototype']['commandFight']=function(){const _0x6192f3=_0x579382;if(BattleManager[_0x6192f3(0x630)]()){if(_0x6192f3(0x39c)!==_0x6192f3(0x39c)){for(const _0xe75308 of _0x3d6426){_0xe75308['match'](_0x52834f);const _0x19f13f=_0x2b8947(_0x49e346['$1'])[_0x6192f3(0x810)](',')['map'](_0x70676=>_0x2fb41d(_0x70676)[_0x6192f3(0x2ed)]()[_0x6192f3(0x8f5)]());_0x13fbc7=_0xcaf2f6[_0x6192f3(0xa96)](_0x19f13f);}!_0x263b33[_0x6192f3(0x560)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x140f56[_0x6192f3(0x560)]+=_0x6192f3(0xcab));;}else this[_0x6192f3(0x47e)](),this[_0x6192f3(0x308)]();}else VisuMZ['BattleCore'][_0x6192f3(0x93b)][_0x6192f3(0xb95)](this);},Scene_Battle['prototype']['tpbCommandFight']=function(){const _0x4d544c=_0x579382;if(!VisuMZ[_0x4d544c(0x675)][_0x4d544c(0x6ad)])return;if(Imported[_0x4d544c(0x6aa)]&&BattleManager['isCTB']())return;const _0x24f870=$gameParty[_0x4d544c(0x3a1)]()[_0x4d544c(0xa1c)](_0x158b37=>_0x158b37['isTpbCharged']()&&_0x158b37['canInput']());BattleManager[_0x4d544c(0x562)]=_0x24f870[0x0]||null,BattleManager[_0x4d544c(0x562)]&&BattleManager[_0x4d544c(0x562)][_0x4d544c(0x593)](_0x4d544c(0x1f3));},VisuMZ['BattleCore'][_0x579382(0x57b)]=Scene_Battle[_0x579382(0x448)][_0x579382(0x590)],Scene_Battle[_0x579382(0x448)][_0x579382(0x590)]=function(){const _0x1e17ce=_0x579382;VisuMZ[_0x1e17ce(0x675)][_0x1e17ce(0x57b)][_0x1e17ce(0xb95)](this),this[_0x1e17ce(0x2f6)]();},Scene_Battle[_0x579382(0x448)]['createActorCommandWindowBattleCore']=function(){const _0x59b6ba=_0x579382,_0x29008d=this[_0x59b6ba(0x4f2)];_0x29008d[_0x59b6ba(0x37a)](_0x59b6ba(0x951),this[_0x59b6ba(0x5f2)][_0x59b6ba(0x9df)](this)),_0x29008d[_0x59b6ba(0x37a)](_0x59b6ba(0x67a),this[_0x59b6ba(0x635)][_0x59b6ba(0x9df)](this)),_0x29008d[_0x59b6ba(0x37a)]('singleSkill',this[_0x59b6ba(0x2fc)][_0x59b6ba(0x9df)](this));if(BattleManager['isTpb']()){if(this[_0x59b6ba(0x3e3)]()){if(_0x59b6ba(0x45c)!==_0x59b6ba(0x45c)){if(this[_0x59b6ba(0x622)]===_0x33ba56)return;this[_0x59b6ba(0x59a)](),this[_0x59b6ba(0xb34)]();}else delete _0x29008d[_0x59b6ba(0x2ab)][_0x59b6ba(0x581)];}else _0x29008d[_0x59b6ba(0x37a)](_0x59b6ba(0x581),this[_0x59b6ba(0x67f)][_0x59b6ba(0x9df)](this));}},Scene_Battle[_0x579382(0x448)][_0x579382(0x5f2)]=function(){const _0x33f54a=_0x579382;this[_0x33f54a(0x73b)]();},Scene_Battle[_0x579382(0x448)][_0x579382(0x635)]=function(){const _0x5bc2a3=_0x579382;BattleManager['actor']()[_0x5bc2a3(0xb93)](),BattleManager[_0x5bc2a3(0x42a)](),BattleManager[_0x5bc2a3(0x2ae)](),this[_0x5bc2a3(0x3cd)]();},Scene_Battle[_0x579382(0x448)][_0x579382(0x2fc)]=function(){const _0x5d2e73=_0x579382,_0x381a1f=BattleManager[_0x5d2e73(0x9bd)](),_0x2d536f=this[_0x5d2e73(0x4f2)][_0x5d2e73(0x218)]();_0x381a1f['setSkill'](_0x2d536f),BattleManager[_0x5d2e73(0x6b7)]()[_0x5d2e73(0x59b)]($dataSkills[_0x2d536f]),this[_0x5d2e73(0xcb1)]();},Scene_Battle['prototype'][_0x579382(0x67f)]=function(){const _0x4318d7=_0x579382;this[_0x4318d7(0x2e4)]()?this[_0x4318d7(0x20b)]():_0x4318d7(0x574)===_0x4318d7(0x574)?this[_0x4318d7(0x576)]():_0x1d1041[_0x4318d7(0x5bb)]=![];},VisuMZ['BattleCore'][_0x579382(0x6ad)]=![],Scene_Battle[_0x579382(0x448)]['tpbActorSwitchConditionsMet']=function(){const _0x3fa118=_0x579382;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x3fa118(0x900)]())return![];else{if(!VisuMZ[_0x3fa118(0x675)][_0x3fa118(0x6ad)])return![];const _0x56c654=$gameParty[_0x3fa118(0x3a1)]()[_0x3fa118(0xa1c)](_0x8c0fd9=>_0x8c0fd9[_0x3fa118(0x96f)]()&&_0x8c0fd9[_0x3fa118(0x280)]());return _0x56c654['length']>0x0&&BattleManager[_0x3fa118(0x6b7)]()!==_0x56c654[_0x56c654[_0x3fa118(0x237)]-0x1];}},Scene_Battle[_0x579382(0x448)][_0x579382(0x20b)]=function(){const _0x133bf0=_0x579382,_0x4a5ccd=BattleManager[_0x133bf0(0x6b7)](),_0x514d24=_0x4a5ccd[_0x133bf0(0x368)]();if(_0x514d24)_0x514d24[_0x133bf0(0x44f)]();const _0x1766c5=$gameParty[_0x133bf0(0x3a1)]()[_0x133bf0(0xa1c)](_0x19f27e=>_0x19f27e['isTpbCharged']()&&_0x19f27e['canInput']()),_0x194d97=_0x1766c5[_0x133bf0(0x903)](_0x4a5ccd),_0x1041fe=_0x1766c5[_0x194d97+0x1];BattleManager['_currentActor']=_0x1041fe||null;if(_0x1041fe)_0x1041fe[_0x133bf0(0x593)](_0x133bf0(0x1f3));_0x4a5ccd[_0x133bf0(0x593)]('undecided'),this['changeInputWindow']();},Scene_Battle['prototype'][_0x579382(0x576)]=function(){const _0x4abd3a=_0x579382;this['_partyCommandWindow']['setup'](),this['_actorCommandWindow'][_0x4abd3a(0x2bd)]();if(!VisuMZ[_0x4abd3a(0x675)][_0x4abd3a(0x6ad)])return;if(Imported[_0x4abd3a(0x6aa)]&&BattleManager[_0x4abd3a(0x900)]())return;if(BattleManager[_0x4abd3a(0x562)]){BattleManager[_0x4abd3a(0x562)][_0x4abd3a(0x593)]('undecided');const _0x116020=BattleManager[_0x4abd3a(0x562)]['battler']();if(_0x116020)_0x116020[_0x4abd3a(0x44f)]();}BattleManager['_currentActor']=null;},VisuMZ[_0x579382(0x675)][_0x579382(0x3f4)]=Scene_Battle[_0x579382(0x448)][_0x579382(0xc95)],Scene_Battle['prototype'][_0x579382(0xc95)]=function(){const _0x4f2f05=_0x579382;VisuMZ['BattleCore'][_0x4f2f05(0x3f4)][_0x4f2f05(0xb95)](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x579382(0x448)][_0x579382(0xb07)]=function(){const _0x5bdf8f=_0x579382;this[_0x5bdf8f(0x4f2)][_0x5bdf8f(0x4ff)](this['_helpWindow']),this['_partyCommandWindow'][_0x5bdf8f(0x4ff)](this[_0x5bdf8f(0x957)]);},Scene_Battle[_0x579382(0x448)]['battleLayoutStyle']=function(){const _0x48f028=_0x579382;if($gameTemp['_forcedBattleLayout']!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x48f028(0x60a)]){if(_0x48f028(0x1c4)===_0x48f028(0x1c4))return this[_0x48f028(0x60a)];else{if(!this[_0x48f028(0x270)]()['damage'][_0x48f028(0x8df)])return 0x0;let _0x14ff6f=_0x3dedab[_0x48f028(0x675)]['Settings'][_0x48f028(0x547)][_0x48f028(0x712)][_0x48f028(0xb95)](this,_0x4bc331);return _0x14ff6f=this[_0x48f028(0x7d2)][_0x48f028(0xa08)]*_0x14ff6f+this[_0x48f028(0x7d2)][_0x48f028(0x653)],_0x14ff6f;}}this['_battleLayoutStyle']=VisuMZ[_0x48f028(0x675)][_0x48f028(0x27f)][_0x48f028(0xbf4)][_0x48f028(0x837)][_0x48f028(0x82b)]()[_0x48f028(0x8f5)]();this[_0x48f028(0x60a)]===_0x48f028(0x65e)&&!Imported[_0x48f028(0x997)]&&(this[_0x48f028(0x60a)]=_0x48f028(0x3ac));if(this[_0x48f028(0x60a)]===_0x48f028(0x5d1)&&!Imported['VisuMZ_3_FrontviewBattleUI']){if('eEJSa'!=='goQvX')this['_battleLayoutStyle']=_0x48f028(0x3ac);else{if(!this['_forcing']&&this[_0x48f028(0xaed)]()[_0x48f028(0x606)]())return![];if(this[_0x48f028(0x392)]())return!![];return typeof this['item']()[_0x48f028(0x6e0)]==='string';}}return this[_0x48f028(0x60a)];},VisuMZ[_0x579382(0x675)]['Scene_Battle_windowAreaHeight']=Scene_Battle[_0x579382(0x448)][_0x579382(0xc1d)],Scene_Battle[_0x579382(0x448)][_0x579382(0xc1d)]=function(){const _0x842886=_0x579382,_0x583c31=this['battleLayoutStyle']();switch(_0x583c31){case _0x842886(0xc74):return this['calcWindowHeight'](Math[_0x842886(0x1f1)](0x1,$gameParty[_0x842886(0xb74)]()),!![]);break;default:return VisuMZ[_0x842886(0x675)][_0x842886(0xcae)][_0x842886(0xb95)](this);break;}},VisuMZ[_0x579382(0x675)][_0x579382(0xba1)]=Scene_Battle['prototype']['helpWindowRect'],Scene_Battle[_0x579382(0x448)][_0x579382(0x977)]=function(){const _0x3f624d=_0x579382,_0x22920d=this[_0x3f624d(0x796)]();switch(_0x22920d){case _0x3f624d(0x5d8):return this['helpWindowRectBorderStyle']();break;case _0x3f624d(0x3ac):case _0x3f624d(0xc74):case'xp':case _0x3f624d(0x745):default:return VisuMZ[_0x3f624d(0x675)][_0x3f624d(0xba1)][_0x3f624d(0xb95)](this);break;}},Scene_Battle[_0x579382(0x448)][_0x579382(0xb1c)]=function(){const _0x5dba99=_0x579382,_0x27f950=this['battleLayoutStyle']();switch(_0x27f950){case'xp':case _0x5dba99(0x745):return this[_0x5dba99(0x4f1)]();break;case'border':return this['statusWindowRectBorderStyle']();break;case'default':case _0x5dba99(0xc74):default:return this[_0x5dba99(0x206)]();break;}},VisuMZ[_0x579382(0x675)][_0x579382(0x6c1)]=Scene_Battle[_0x579382(0x448)][_0x579382(0xbc4)],Scene_Battle['prototype'][_0x579382(0xbc4)]=function(){const _0x1f10ef=_0x579382,_0x39a6b3=this['battleLayoutStyle']();switch(_0x39a6b3){case'xp':case _0x1f10ef(0x745):return this[_0x1f10ef(0xc06)]();break;case _0x1f10ef(0x5d8):return this['partyCommandWindowRectBorderStyle']();case _0x1f10ef(0x3ac):case _0x1f10ef(0xc74):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x579382(0x448)][_0x579382(0xad2)]=function(){const _0x147bbb=_0x579382,_0x32176a=VisuMZ['BattleCore']['Settings'][_0x147bbb(0xbf4)],_0x95d60c=_0x32176a['CommandWidth']||0xc0,_0x2b1522=this[_0x147bbb(0xc1d)](),_0x207561=this['isRightInputMode']()?Graphics[_0x147bbb(0x77e)]-_0x95d60c:0x0,_0x3c2c5c=Graphics['boxHeight']-_0x2b1522;return new Rectangle(_0x207561,_0x3c2c5c,_0x95d60c,_0x2b1522);},Scene_Battle[_0x579382(0x448)]['actorCommandWindowRect']=function(){const _0x53ca8c=_0x579382;return this[_0x53ca8c(0xbc4)]();},VisuMZ[_0x579382(0x675)]['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x579382(0x448)][_0x579382(0x54f)],Scene_Battle[_0x579382(0x448)]['updateStatusWindowPosition']=function(){const _0x19a5a2=_0x579382,_0x4c567d=this[_0x19a5a2(0x796)]();switch(_0x4c567d){case'xp':case'portrait':case _0x19a5a2(0x5d8):break;case _0x19a5a2(0x3ac):case _0x19a5a2(0xc74):default:VisuMZ['BattleCore'][_0x19a5a2(0x85d)][_0x19a5a2(0xb95)](this);break;}},VisuMZ[_0x579382(0x675)][_0x579382(0x543)]=Scene_Battle['prototype'][_0x579382(0x966)],Scene_Battle[_0x579382(0x448)]['startActorSelection']=function(){const _0x194688=_0x579382;VisuMZ[_0x194688(0x675)][_0x194688(0x543)]['call'](this),this[_0x194688(0x6cb)]();},VisuMZ['BattleCore']['Scene_Battle_startEnemySelection']=Scene_Battle['prototype'][_0x579382(0x9de)],Scene_Battle[_0x579382(0x448)][_0x579382(0x9de)]=function(){const _0x38577b=_0x579382;VisuMZ[_0x38577b(0x675)][_0x38577b(0xc50)][_0x38577b(0xb95)](this),this[_0x38577b(0xadb)][_0x38577b(0x416)](),this[_0x38577b(0x6cb)]();},Scene_Battle[_0x579382(0x448)]['makeTargetSelectionMoreVisible']=function(){const _0x376a2e=_0x579382,_0x225c3f=this[_0x376a2e(0x796)]();['xp',_0x376a2e(0x745),'border'][_0x376a2e(0xb2b)](_0x225c3f)&&this[_0x376a2e(0x4f2)][_0x376a2e(0x2bd)]();if(_0x225c3f==='border'||this[_0x376a2e(0x673)]()){if(_0x376a2e(0x99a)===_0x376a2e(0x99a))this[_0x376a2e(0xa3b)][_0x376a2e(0x2bd)](),this[_0x376a2e(0x37c)][_0x376a2e(0x2bd)]();else return _0x4f06a5;}},VisuMZ[_0x579382(0x675)][_0x579382(0x940)]=Scene_Battle['prototype'][_0x579382(0x824)],Scene_Battle[_0x579382(0x448)]['onActorOk']=function(){const _0x419ed9=_0x579382;VisuMZ[_0x419ed9(0x675)]['Scene_Battle_onActorOk'][_0x419ed9(0xb95)](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x579382(0x448)]['isNonSubmenuCancel']=function(){const _0x40e1f8=_0x579382;return[_0x40e1f8(0x509),_0x40e1f8(0x947),'singleSkill'][_0x40e1f8(0xb2b)](this[_0x40e1f8(0x4f2)][_0x40e1f8(0x911)]());},VisuMZ[_0x579382(0x675)]['Scene_Battle_onActorCancel']=Scene_Battle[_0x579382(0x448)][_0x579382(0x9ac)],Scene_Battle[_0x579382(0x448)][_0x579382(0x9ac)]=function(){const _0x257c29=_0x579382;this[_0x257c29(0x60c)]()?(this[_0x257c29(0xbcc)][_0x257c29(0x569)](),this[_0x257c29(0x382)][_0x257c29(0x19b)](),this[_0x257c29(0x4f2)]['activate']()):VisuMZ[_0x257c29(0x675)][_0x257c29(0x726)]['call'](this),this[_0x257c29(0x1f0)]();},VisuMZ['BattleCore']['Scene_Battle_onEnemyOk']=Scene_Battle[_0x579382(0x448)][_0x579382(0xaaa)],Scene_Battle[_0x579382(0x448)]['onEnemyOk']=function(){const _0x3cf15b=_0x579382;VisuMZ[_0x3cf15b(0x675)]['Scene_Battle_onEnemyOk']['call'](this),this[_0x3cf15b(0xab4)]();},VisuMZ[_0x579382(0x675)]['Scene_Battle_onEnemyCancel']=Scene_Battle['prototype']['onEnemyCancel'],Scene_Battle[_0x579382(0x448)][_0x579382(0xa8d)]=function(){const _0x457e46=_0x579382;this['isNonSubmenuCancel']()?(this[_0x457e46(0xbcc)][_0x457e46(0x569)](),this[_0x457e46(0xadb)][_0x457e46(0x19b)](),this[_0x457e46(0x4f2)][_0x457e46(0x478)]()):_0x457e46(0xb56)!==_0x457e46(0xb56)?(_0xa4f123&&_0x1555a1['isActor']()&&_0x47a508['clearActiveWeaponSlot'](),this['callNextMethod']()):VisuMZ['BattleCore'][_0x457e46(0x81d)][_0x457e46(0xb95)](this),this['cancelTargetSelectionVisibility']();},Scene_Battle[_0x579382(0x448)][_0x579382(0xab4)]=function(){const _0x27f4bb=_0x579382,_0x93221=this['battleLayoutStyle']();(_0x93221===_0x27f4bb(0x5d8)||this[_0x27f4bb(0x673)]())&&(this[_0x27f4bb(0xa3b)][_0x27f4bb(0x772)](),this['_skillWindow'][_0x27f4bb(0x6a5)]&&this[_0x27f4bb(0xa3b)]['show'](),this[_0x27f4bb(0x37c)][_0x27f4bb(0x772)](),this[_0x27f4bb(0x37c)][_0x27f4bb(0x6a5)]&&(_0x27f4bb(0x358)===_0x27f4bb(0x5db)?(_0x10617b[_0x27f4bb(0x448)][_0x27f4bb(0x6b8)][_0x27f4bb(0xb95)](this),this[_0x27f4bb(0x8bd)](),this[_0x27f4bb(0x8a8)]()):this[_0x27f4bb(0x37c)][_0x27f4bb(0x569)]()));},Scene_Battle[_0x579382(0x448)][_0x579382(0x1f0)]=function(){const _0x30e9c9=_0x579382,_0x4776f1=this['battleLayoutStyle']();if(['xp',_0x30e9c9(0x745),_0x30e9c9(0x5d8)][_0x30e9c9(0xb2b)](_0x4776f1)){if(_0x30e9c9(0x578)===_0x30e9c9(0x578))this[_0x30e9c9(0x4f2)]['open']();else{if(!_0x1605a4[_0x30e9c9(0xc65)]())return;if(!_0x3b18a4[_0x30e9c9(0x1d7)])return;_0x2f347c[_0x30e9c9(0x6dc)](_0x12adeb,_0x5e2d80);const _0x49652e=_0x3c5554[_0x30e9c9(0x6c2)](),_0x5ba02a=_0x317505[_0x30e9c9(0xa7b)];if(!_0x49652e)return;const _0x5b149b=_0x32b416[_0x30e9c9(0x748)];if(!_0x5b149b)return;_0x5b149b[_0x30e9c9(0x624)](_0x4a8bc2);if(_0x5ba02a)_0x49652e[_0x30e9c9(0x9c8)](_0x30e9c9(0xc60));}}this[_0x30e9c9(0xab4)]();},Scene_Battle['prototype'][_0x579382(0x206)]=function(){const _0x14839a=_0x579382,_0x39eb24=VisuMZ[_0x14839a(0x675)][_0x14839a(0x27f)][_0x14839a(0xbf4)],_0x498d63=Window_BattleStatus[_0x14839a(0x448)]['extraHeight'](),_0x18fb31=Graphics[_0x14839a(0x77e)]-(_0x39eb24[_0x14839a(0xc76)]||0xc0),_0x247df1=this[_0x14839a(0xc1d)]()+_0x498d63,_0x5106ce=this[_0x14839a(0x63d)]()?0x0:Graphics['boxWidth']-_0x18fb31,_0x19dcb0=Graphics[_0x14839a(0x98e)]-_0x247df1+_0x498d63;return new Rectangle(_0x5106ce,_0x19dcb0,_0x18fb31,_0x247df1);},Scene_Battle[_0x579382(0x448)]['statusWindowRectXPStyle']=function(){const _0x1b83ee=_0x579382,_0x3ee19e=Window_BattleStatus[_0x1b83ee(0x448)][_0x1b83ee(0x6c4)](),_0x414fa6=Graphics[_0x1b83ee(0x77e)],_0x1dfbe2=this[_0x1b83ee(0xc1d)]()+_0x3ee19e,_0x216ca1=0x0,_0x313b02=Graphics[_0x1b83ee(0x98e)]-_0x1dfbe2+_0x3ee19e;return new Rectangle(_0x216ca1,_0x313b02,_0x414fa6,_0x1dfbe2);},Scene_Battle['prototype'][_0x579382(0xc06)]=function(){const _0x237d8a=_0x579382,_0x3c6d1e=Graphics['boxWidth']/0x2,_0x2c2f4d=this[_0x237d8a(0x64d)](VisuMZ[_0x237d8a(0x675)]['Settings'][_0x237d8a(0xbf4)][_0x237d8a(0x19d)],!![]),_0x997e90=Math['round']((Graphics['boxWidth']-_0x3c6d1e)/0x2),_0x594ad0=Graphics[_0x237d8a(0x98e)]-_0x2c2f4d-this['statusWindowRectXPStyle']()[_0x237d8a(0x5ac)];return new Rectangle(_0x997e90,_0x594ad0,_0x3c6d1e,_0x2c2f4d);},Scene_Battle[_0x579382(0x448)][_0x579382(0x365)]=function(){const _0x1b1534=_0x579382,_0x44f6d8=Graphics[_0x1b1534(0x259)],_0x349f6a=Math[_0x1b1534(0x78b)]((Graphics[_0x1b1534(0x77e)]-_0x44f6d8)/0x2),_0x5c1600=this['helpAreaHeight'](),_0x1aa3c4=(Graphics[_0x1b1534(0x5ac)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x349f6a,_0x1aa3c4,_0x44f6d8,_0x5c1600);},Scene_Battle['prototype'][_0x579382(0x3fe)]=function(){const _0x17163e=_0x579382,_0x156564=Graphics[_0x17163e(0x259)],_0x50e1b4=Math[_0x17163e(0x78b)]((Graphics[_0x17163e(0x77e)]-_0x156564)/0x2),_0x246436=this[_0x17163e(0x64d)](0x4,!![]),_0xacb0a8=Graphics[_0x17163e(0x98e)]-_0x246436+(Graphics[_0x17163e(0x5ac)]-Graphics['boxHeight'])/0x2;return new Rectangle(_0x50e1b4,_0xacb0a8,_0x156564,_0x246436);},Scene_Battle['prototype'][_0x579382(0x7a3)]=function(){const _0x5889bc=_0x579382,_0x57a892=Math[_0x5889bc(0x51f)](Graphics[_0x5889bc(0x259)]/0x3),_0x4a723a=this[_0x5889bc(0x63d)]()?(Graphics[_0x5889bc(0x259)]+Graphics['boxWidth'])/0x2-_0x57a892:(Graphics[_0x5889bc(0x259)]-Graphics[_0x5889bc(0x77e)])/-0x2,_0x1adb31=this[_0x5889bc(0x365)](),_0x2d4cc1=_0x1adb31['y']+_0x1adb31[_0x5889bc(0x5ac)],_0x2a79d5=this[_0x5889bc(0x3fe)](),_0x54d0b8=_0x2a79d5['y']-_0x2d4cc1;return new Rectangle(_0x4a723a,_0x2d4cc1,_0x57a892,_0x54d0b8);},Scene_Battle[_0x579382(0x448)][_0x579382(0x370)]=function(){const _0xee6340=_0x579382,_0x4e9dc1=Math[_0xee6340(0xc7c)](Graphics[_0xee6340(0x259)]/0x3),_0x1a7176=Math[_0xee6340(0x78b)]((Graphics[_0xee6340(0x77e)]-_0x4e9dc1)/0x2),_0x532e52=this[_0xee6340(0x7a3)](),_0x3b2d5c=_0x532e52['y'],_0x3b6776=_0x532e52['height'];return new Rectangle(_0x1a7176,_0x3b2d5c,_0x4e9dc1,_0x3b6776);},Scene_Battle[_0x579382(0x448)][_0x579382(0x4fe)]=function(){const _0x133ebb=_0x579382;this[_0x133ebb(0x5c5)]['y']=this[_0x133ebb(0x957)]['y']+this[_0x133ebb(0x957)][_0x133ebb(0x5ac)];if(this[_0x133ebb(0x63d)]()){if(this[_0x133ebb(0x796)]()==='border')this[_0x133ebb(0x5c5)]['x']=0x8;else{if(_0x133ebb(0x703)===_0x133ebb(0xb9a)){const _0x15b027=_0x5b52fa[_0x133ebb(0x903)](_0x447a8b);return _0x15b027>=0x0?[_0x6d89cf[_0x15b027-0x1]||_0x3d8785]:[_0xf42b25];}else this[_0x133ebb(0x5c5)]['x']=-this[_0x133ebb(0x5c5)][_0x133ebb(0x259)]-0x4;}}else this[_0x133ebb(0x5c5)]['x']=Graphics[_0x133ebb(0x259)]-(Graphics[_0x133ebb(0x259)]-Graphics['boxWidth'])/0x2-this[_0x133ebb(0x5c5)][_0x133ebb(0x259)]-0x4;},VisuMZ['BattleCore']['Scene_Battle_skillWindowRect']=Scene_Battle[_0x579382(0x448)][_0x579382(0x3a9)],Scene_Battle[_0x579382(0x448)][_0x579382(0x3a9)]=function(){const _0x4e5d6e=_0x579382;if(this[_0x4e5d6e(0x796)]()===_0x4e5d6e(0x5d8))return this[_0x4e5d6e(0x370)]();else return this[_0x4e5d6e(0x673)]()?this[_0x4e5d6e(0x730)]():'SXWAk'===_0x4e5d6e(0x48e)?VisuMZ[_0x4e5d6e(0x675)][_0x4e5d6e(0x429)][_0x4e5d6e(0xb95)](this):!![];},VisuMZ[_0x579382(0x675)][_0x579382(0x3c7)]=Scene_Battle['prototype'][_0x579382(0x80f)],Scene_Battle['prototype'][_0x579382(0x80f)]=function(){const _0xcdee2a=_0x579382;if(this['battleLayoutStyle']()===_0xcdee2a(0x5d8))return this[_0xcdee2a(0x370)]();else{if(this[_0xcdee2a(0x673)]()){if(_0xcdee2a(0x1be)!=='GofEl')return this[_0xcdee2a(0x730)]();else{const _0xd0a696=this[_0xcdee2a(0x796)]();if(['xp'][_0xcdee2a(0xb2b)](_0xd0a696)&&!_0x2ecfdb['isSideView']()){this[_0xcdee2a(0x4ab)](0x0,0x0,0x0,0x0);return;}_0x5e6fd1['prototype'][_0xcdee2a(0x497)][_0xcdee2a(0xb95)](this);}}else return VisuMZ[_0xcdee2a(0x675)][_0xcdee2a(0x3c7)]['call'](this);}},Scene_Battle['prototype'][_0x579382(0x673)]=function(){const _0x5bc034=_0x579382;return VisuMZ[_0x5bc034(0x675)][_0x5bc034(0x27f)][_0x5bc034(0xbf4)][_0x5bc034(0x41f)];},Scene_Battle['prototype'][_0x579382(0x730)]=function(){const _0x5051a8=_0x579382,_0x191523=Sprite_Button[_0x5051a8(0x448)][_0x5051a8(0xa8f)]()*0x2+0x4;let _0x301f52=Graphics[_0x5051a8(0x77e)]-_0x191523;if(Imported[_0x5051a8(0x214)]&&SceneManager[_0x5051a8(0x859)]()){if(_0x5051a8(0x213)!==_0x5051a8(0x882))_0x301f52+=_0x191523;else{const _0x2dc3ea=_0x30a3bd(_0x214944['$1']);this[_0x5051a8(0x596)](_0x2dc3ea);}}const _0xa69eb2=this[_0x5051a8(0x6e6)](),_0x344562=Graphics['boxHeight']-_0xa69eb2-this[_0x5051a8(0xb1c)]()[_0x5051a8(0x5ac)]+Window_BattleStatus[_0x5051a8(0x448)][_0x5051a8(0x6c4)](),_0x5ca4c1=0x0;return new Rectangle(_0x5ca4c1,_0xa69eb2,_0x301f52,_0x344562);},Scene_Battle[_0x579382(0x448)][_0x579382(0xc09)]=function(){const _0x31ae7f=_0x579382;if(!VisuMZ[_0x31ae7f(0x675)][_0x31ae7f(0x27f)][_0x31ae7f(0x8ff)][_0x31ae7f(0xa8a)])return;this['_enemyNameContainer']=new Sprite(),this[_0x31ae7f(0x9d3)]['x']=this[_0x31ae7f(0xa75)]['x'],this[_0x31ae7f(0x9d3)]['y']=this[_0x31ae7f(0xa75)]['y'];const _0x4aa427=this[_0x31ae7f(0x5a2)][_0x31ae7f(0x903)](this[_0x31ae7f(0xa75)]);this['addChildAt'](this[_0x31ae7f(0x9d3)],_0x4aa427);for(let _0x378005=0x0;_0x378005<0x8;_0x378005++){const _0x7fecd6=new Window_EnemyName(_0x378005);this[_0x31ae7f(0x9d3)][_0x31ae7f(0xbb0)](_0x7fecd6);}},Sprite_Battler['_motionSpeed']=VisuMZ[_0x579382(0x675)][_0x579382(0x27f)][_0x579382(0x7b6)]['MotionSpeed'],VisuMZ[_0x579382(0x675)][_0x579382(0x91f)]=Sprite_Battler[_0x579382(0x448)][_0x579382(0x974)],Sprite_Battler[_0x579382(0x448)][_0x579382(0x974)]=function(){const _0x5b94d8=_0x579382;VisuMZ['BattleCore'][_0x5b94d8(0x91f)][_0x5b94d8(0xb95)](this),this[_0x5b94d8(0x625)]();if(this[_0x5b94d8(0x622)]===Sprite_Enemy)this['createShadowSprite']();this[_0x5b94d8(0x839)]();},Sprite_Battler['prototype'][_0x579382(0x625)]=function(){const _0x4a88c6=_0x579382;this['_baseX']=0x0,this[_0x4a88c6(0x339)]=0x0,this[_0x4a88c6(0x4b6)]=0x0,this[_0x4a88c6(0x24d)]=0x0,this['_floatDuration']=0x0,this[_0x4a88c6(0xb6d)]=0x0,this['_floatEasing']=_0x4a88c6(0xc05),this['_jumpHeight']=0x0,this['_jumpMaxHeight']=0x0,this[_0x4a88c6(0x86a)]=0x0,this['_jumpWholeDuration']=0x0,this[_0x4a88c6(0xa9a)]=0xff,this[_0x4a88c6(0x784)]=0x0,this[_0x4a88c6(0x753)]=0x0,this[_0x4a88c6(0xc39)]=_0x4a88c6(0xc05),this[_0x4a88c6(0x504)]=0x0,this[_0x4a88c6(0x521)]=0x0,this['_angleDuration']=0x0,this['_angleWholeDuration']=0x0,this[_0x4a88c6(0x3c0)]='Linear',this['_angleRevertOnFinish']=!![],this[_0x4a88c6(0x972)]=0x0,this[_0x4a88c6(0x46c)]=0x0,this[_0x4a88c6(0x756)]=0x0,this['_targetSkewY']=0x0,this[_0x4a88c6(0x552)]=0x0,this[_0x4a88c6(0x5c7)]=0x0,this[_0x4a88c6(0xa62)]=_0x4a88c6(0xc05),this[_0x4a88c6(0xa3a)]=0x1,this[_0x4a88c6(0x6f9)]=0x1,this[_0x4a88c6(0x5c6)]=0x1,this[_0x4a88c6(0x2f3)]=0x1,this['_growDuration']=0x0,this['_growWholeDuration']=0x0,this[_0x4a88c6(0x711)]='Linear',this[_0x4a88c6(0x3cc)]=0x1,this['_targetHomeX']=0x0,this[_0x4a88c6(0x6bd)]=0x0,this[_0x4a88c6(0x5b5)]=0x0,this[_0x4a88c6(0x6b3)]=0x0,this[_0x4a88c6(0x39a)]='Linear';},Sprite_Battler['prototype'][_0x579382(0x2f2)]=function(){const _0x1ee3d6=_0x579382;this[_0x1ee3d6(0xc68)]=new Sprite(),this[_0x1ee3d6(0xc68)][_0x1ee3d6(0x8c2)]=ImageManager['loadSystem'](_0x1ee3d6(0x912)),this['_shadowSprite']['bitmap'][_0x1ee3d6(0x2be)]=VisuMZ[_0x1ee3d6(0x675)]['Settings'][_0x1ee3d6(0x7b6)][_0x1ee3d6(0x879)],this[_0x1ee3d6(0xc68)]['anchor']['x']=0.5,this['_shadowSprite'][_0x1ee3d6(0x22b)]['y']=0.5,this[_0x1ee3d6(0xc68)]['y']=-0x2,this[_0x1ee3d6(0xc68)][_0x1ee3d6(0xcbc)]=![],this[_0x1ee3d6(0xbb0)](this[_0x1ee3d6(0xc68)]);},Sprite_Battler[_0x579382(0x448)]['createDistortionSprite']=function(){const _0x12fa32=_0x579382;this[_0x12fa32(0xc0c)]=new Sprite(),this[_0x12fa32(0xc0c)][_0x12fa32(0x22b)]['x']=0.5,this[_0x12fa32(0xc0c)][_0x12fa32(0x22b)]['y']=0.5,this[_0x12fa32(0xbb0)](this['_distortionSprite']);},Sprite_Battler['prototype'][_0x579382(0xbe5)]=function(){const _0xe6a9d8=_0x579382;if(!this['_distortionSprite'])return;if(this[_0xe6a9d8(0xc68)]){if('bCVxh'===_0xe6a9d8(0x8d0)){const _0x3f2a10=this[_0xe6a9d8(0xafd)](this[_0xe6a9d8(0xc0c)]);this[_0xe6a9d8(0x779)](this[_0xe6a9d8(0xc68)],_0x3f2a10),this[_0xe6a9d8(0xad7)]();}else{this[_0xe6a9d8(0x6e7)]=0x14,this['_borderPortraitSprite'][_0xe6a9d8(0x8c2)]=_0x35b7d7;_0x4c6ac3['_scene'][_0xe6a9d8(0x63d)]()?(this['_borderPortraitSprite']['x']=0x0,this[_0xe6a9d8(0xb76)]=_0x10fe50[_0xe6a9d8(0xc7c)](_0x44f164['width']/0x2)):(this[_0xe6a9d8(0x444)]['x']=this[_0xe6a9d8(0x259)],this[_0xe6a9d8(0xb76)]=this[_0xe6a9d8(0x259)]*0x3/0x4);this['_borderPortraitSprite']['opacity']=0x0,this[_0xe6a9d8(0x444)]['y']=this['y']+this[_0xe6a9d8(0x5ac)];const _0x4a0ad7=_0x2c8761['actor']();_0x4a0ad7&&(this[_0xe6a9d8(0xb76)]+=_0x4a0ad7[_0xe6a9d8(0x4d2)](),this['_borderPortraitSprite']['y']+=_0x4a0ad7['getBattlePortraitOffsetY']());}}this[_0xe6a9d8(0x2c6)]&&this[_0xe6a9d8(0xc0c)]['addChild'](this[_0xe6a9d8(0x2c6)]);this[_0xe6a9d8(0xbeb)]&&this[_0xe6a9d8(0xc0c)]['addChild'](this[_0xe6a9d8(0xbeb)]);this[_0xe6a9d8(0xc5d)]&&this[_0xe6a9d8(0xc0c)]['addChild'](this[_0xe6a9d8(0xc5d)]);if(this[_0xe6a9d8(0x303)]){if(_0xe6a9d8(0x6d1)===_0xe6a9d8(0x6d1))this[_0xe6a9d8(0xc0c)][_0xe6a9d8(0xbb0)](this['_injectAnimationSprite']);else{const _0x323b00=_0x1c094f[_0xe6a9d8(0xb89)][0x0];if(_0x323b00[_0xe6a9d8(0x299)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}this[_0xe6a9d8(0xa8c)]&&this['_distortionSprite'][_0xe6a9d8(0xbb0)](this[_0xe6a9d8(0xa8c)]);},Sprite_Battler['prototype'][_0x579382(0xad7)]=function(){const _0x5dbba7=_0x579382;if(!this[_0x5dbba7(0xc68)])return;if(this[_0x5dbba7(0x309)]&&this[_0x5dbba7(0x309)][_0x5dbba7(0x7ad)]()){const _0x4df162=this[_0x5dbba7(0xc68)]['bitmap'];this[_0x5dbba7(0xc68)][_0x5dbba7(0xc57)](0x0,0x0,_0x4df162[_0x5dbba7(0x259)],_0x4df162[_0x5dbba7(0x5ac)]);}else{if('VsJcv'===_0x5dbba7(0x723))this[_0x5dbba7(0xc68)][_0x5dbba7(0xc57)](0x0,0x0,0x0,0x0);else return 0x24;}},Sprite_Battler[_0x579382(0x448)][_0x579382(0x8a7)]=function(){const _0x581d24=_0x579382;if(SceneManager[_0x581d24(0xc65)]()){if(_0x581d24(0xbe9)===_0x581d24(0xbe9))return SceneManager['_scene']['_spriteset'][_0x581d24(0x5be)];else{const _0x52ed1c=_0x44a986['indexOf'](_0x352407['toUpperCase']()[_0x581d24(0x8f5)]());_0x52ed1c>=0x0&&_0x52ed1c<=0x7&&_0xba5861[_0x581d24(0x662)](_0x52ed1c,_0x4c9d33);}}else{if('TWinJ'!==_0x581d24(0x9c1)){const _0x283de3=this[_0x581d24(0xacc)];_0x283de3[_0x581d24(0x8ac)](_0xe59a7c,0x0,_0x4b6414['y'],_0x283de3['innerWidth'],_0x581d24(0xc13));}else return this[_0x581d24(0x5f7)];}},Sprite_Battler['prototype']['setupTextPopup']=function(_0x3ac2bd,_0x52067a){const _0x5c8d20=_0x579382;if(!this[_0x5c8d20(0x309)][_0x5c8d20(0x4c9)]())return;if(BattleManager[_0x5c8d20(0x49c)]())return;const _0x29a31f=VisuMZ[_0x5c8d20(0x675)]['Settings'][_0x5c8d20(0x547)],_0xd1c5ab=new Sprite_Damage();_0xd1c5ab[_0x5c8d20(0x4cf)]=_0x29a31f[_0x5c8d20(0x7fd)],this[_0x5c8d20(0x3b5)](_0xd1c5ab),_0xd1c5ab[_0x5c8d20(0xbfa)](_0x3ac2bd,_0x52067a),this[_0x5c8d20(0x6e9)](_0xd1c5ab);},Sprite_Battler[_0x579382(0x448)][_0x579382(0xc9e)]=function(_0x2e91a9,_0x4bcf39,_0x20c728){const _0x49c603=_0x579382;if(!this['_battler'][_0x49c603(0x4c9)]())return;if(BattleManager[_0x49c603(0x49c)]())return;const _0x9b6471=VisuMZ[_0x49c603(0x675)]['Settings'][_0x49c603(0x547)],_0x1c4a7b=new Sprite_Damage();_0x1c4a7b[_0x49c603(0x4cf)]=_0x9b6471[_0x49c603(0x7fd)],this[_0x49c603(0x3b5)](_0x1c4a7b),_0x1c4a7b['setupIconTextPopup'](_0x2e91a9,_0x4bcf39,_0x20c728),this[_0x49c603(0x6e9)](_0x1c4a7b);},Sprite_Battler[_0x579382(0x448)][_0x579382(0xc5f)]=function(){const _0x219bb0=_0x579382;if(!this[_0x219bb0(0x309)][_0x219bb0(0xa91)]())return;while(this['_battler'][_0x219bb0(0xa91)]()){if(this[_0x219bb0(0x309)][_0x219bb0(0x4c9)]()){if('Ctuxj'!=='stRpF')this[_0x219bb0(0x32a)]();else return!![];}}this[_0x219bb0(0x309)]['clearDamagePopup'](),this[_0x219bb0(0x309)][_0x219bb0(0xbd2)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0x32a)]=function(){const _0xdb52f5=_0x579382;if(BattleManager[_0xdb52f5(0x49c)]())return;const _0x387f05=VisuMZ[_0xdb52f5(0x675)][_0xdb52f5(0x27f)][_0xdb52f5(0x547)],_0x16b5e6=new Sprite_Damage();_0x16b5e6[_0xdb52f5(0x4cf)]=_0x387f05[_0xdb52f5(0x7fd)],this['sortDamageSprites'](_0x16b5e6),_0x16b5e6['setup'](this[_0xdb52f5(0x309)]),_0x16b5e6[_0xdb52f5(0xc49)](this[_0xdb52f5(0x309)]),this[_0xdb52f5(0x6e9)](_0x16b5e6);},Sprite_Battler['prototype'][_0x579382(0x6e9)]=function(_0x48fbc5){const _0x338848=_0x579382;this[_0x338848(0x865)][_0x338848(0x226)](_0x48fbc5);if(this[_0x338848(0xca9)]()){const _0x5a4e29=SceneManager[_0x338848(0xbc5)][_0x338848(0xbcc)];if(_0x5a4e29)_0x5a4e29[_0x338848(0x6e9)](_0x48fbc5,this[_0x338848(0x309)]);}else{this['damageContainer']()[_0x338848(0xbb0)](_0x48fbc5);if(SceneManager['isBattleFlipped']())_0x48fbc5[_0x338848(0xb30)]['x']=-0x1;}},Sprite_Battler[_0x579382(0x448)][_0x579382(0xca9)]=function(){const _0x52b3bb=_0x579382;return!$gameSystem[_0x52b3bb(0xc10)]()&&this['_battler']&&this[_0x52b3bb(0x309)][_0x52b3bb(0xc58)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0x3b5)]=function(_0x528174){const _0x26524f=_0x579382;this[_0x26524f(0x9f2)](_0x528174,!![]);const _0x5780eb=VisuMZ[_0x26524f(0x675)]['Settings'][_0x26524f(0x547)],_0x22be8f=SceneManager[_0x26524f(0x692)]()?-0x1:0x1;if(_0x5780eb[_0x26524f(0xb67)])for(const _0x3d251a of this[_0x26524f(0x865)]){if(_0x26524f(0x670)===_0x26524f(0x670))_0x3d251a['x']+=_0x5780eb[_0x26524f(0xbdf)]*_0x22be8f,_0x3d251a['y']+=_0x5780eb[_0x26524f(0x274)];else{const _0x18ab17=_0x18b220[_0x26524f(0x8a5)](_0x5cb9a4['x'],_0x501df3['y']);if(this['_regionBattleback1']&&this[_0x26524f(0x5d0)][_0x18ab17])return this['_regionBattleback1'][_0x18ab17];}}else{const _0x24e4c9=this['_damages'][this[_0x26524f(0x865)]['length']-0x1];_0x24e4c9&&(_0x528174['x']=_0x24e4c9['x']+_0x5780eb[_0x26524f(0xbdf)]*_0x22be8f,_0x528174['y']=_0x24e4c9['y']+_0x5780eb[_0x26524f(0x274)]);}},Sprite_Battler[_0x579382(0x448)][_0x579382(0x9f2)]=function(_0x176a27,_0x38b5f1){const _0x48f2b7=_0x579382,_0x4d9579=SceneManager[_0x48f2b7(0x692)]()?-0x1:0x1;let _0x576314=this[_0x48f2b7(0xb43)];_0x576314+=this[_0x48f2b7(0x978)]();let _0x3c4bdc=this[_0x48f2b7(0x339)];const _0x44185a=this[_0x48f2b7(0xc0c)][_0x48f2b7(0xb30)]['y'];_0x3c4bdc+=this[_0x48f2b7(0x61d)]();const _0x2bad9d=SceneManager[_0x48f2b7(0xbc5)][_0x48f2b7(0xbcc)];if(_0x2bad9d&&this[_0x48f2b7(0x5f7)]===_0x2bad9d){_0x576314+=_0x2bad9d['x']-this['damageOffsetX']();const _0x53a241=_0x2bad9d[_0x48f2b7(0x768)]()*0x3/0x4;_0x3c4bdc=_0x2bad9d['y']+_0x53a241,_0x3c4bdc=Math[_0x48f2b7(0xabb)](_0x3c4bdc,_0x2bad9d['y']+this['y']-this[_0x48f2b7(0x5ac)]+_0x53a241);}_0x176a27['x']=Math['round'](_0x576314+this[_0x48f2b7(0x783)]()*_0x4d9579),_0x176a27['y']=Math['round'](_0x3c4bdc+this[_0x48f2b7(0x1ff)]());},VisuMZ[_0x579382(0x675)][_0x579382(0x75c)]=Sprite_Battler[_0x579382(0x448)][_0x579382(0x783)],Sprite_Battler[_0x579382(0x448)]['damageOffsetX']=function(){const _0x3c7014=_0x579382;let _0x367b6b=VisuMZ[_0x3c7014(0x675)]['Sprite_Battler_damageOffsetX'][_0x3c7014(0xb95)](this),_0x515f62=VisuMZ[_0x3c7014(0x675)]['Settings'][_0x3c7014(0x547)][_0x3c7014(0x717)]||0x0;return Math[_0x3c7014(0x78b)](_0x367b6b+_0x515f62);},VisuMZ['BattleCore'][_0x579382(0x4f9)]=Sprite_Battler[_0x579382(0x448)]['damageOffsetY'],Sprite_Battler[_0x579382(0x448)][_0x579382(0x1ff)]=function(){const _0x4a3626=_0x579382;let _0x5b6084=VisuMZ[_0x4a3626(0x675)][_0x4a3626(0x4f9)][_0x4a3626(0xb95)](this);switch(VisuMZ['BattleCore'][_0x4a3626(0x27f)][_0x4a3626(0x547)][_0x4a3626(0x304)]){case _0x4a3626(0x507):_0x5b6084-=this[_0x4a3626(0x5ac)]*this[_0x4a3626(0xb30)]['y'];break;case _0x4a3626(0xc13):_0x5b6084-=this[_0x4a3626(0x5ac)]*this[_0x4a3626(0xb30)]['y']*0.5;break;}let _0x390e60=VisuMZ[_0x4a3626(0x675)][_0x4a3626(0x27f)]['Damage'][_0x4a3626(0xa9f)]||0x0;return Math['round'](_0x5b6084+_0x390e60);},Sprite_Actor[_0x579382(0x448)][_0x579382(0x783)]=function(){return Sprite_Battler['prototype']['damageOffsetX']['call'](this);},Sprite_Actor[_0x579382(0x448)][_0x579382(0x1ff)]=function(){const _0x337a1e=_0x579382;return Sprite_Battler[_0x337a1e(0x448)][_0x337a1e(0x1ff)][_0x337a1e(0xb95)](this);},Sprite_Battler[_0x579382(0x448)]['destroyDamageSprite']=function(_0x1dd0d4){const _0x599c0b=_0x579382;this[_0x599c0b(0xca9)]()?SceneManager[_0x599c0b(0xbc5)][_0x599c0b(0xbcc)][_0x599c0b(0x701)](_0x1dd0d4):(this[_0x599c0b(0x8a7)]()[_0x599c0b(0x490)](_0x1dd0d4),this['_damages'][_0x599c0b(0x7f7)](_0x1dd0d4),_0x1dd0d4[_0x599c0b(0x80a)]());},VisuMZ[_0x579382(0x675)]['Sprite_Battler_setHome']=Sprite_Battler['prototype'][_0x579382(0x5e1)],Sprite_Battler['prototype'][_0x579382(0x5e1)]=function(_0x1f6a35,_0x4e40e7){const _0x3bbae5=_0x579382,_0x18a35d=VisuMZ[_0x3bbae5(0x675)]['Settings'];if(this[_0x3bbae5(0x622)]===Sprite_Actor)_0x1f6a35+=_0x18a35d[_0x3bbae5(0x7b6)][_0x3bbae5(0x906)]||0x0,_0x4e40e7+=_0x18a35d[_0x3bbae5(0x7b6)][_0x3bbae5(0xb3d)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x1f6a35+=_0x18a35d['Enemy'][_0x3bbae5(0x906)]||0x0,_0x4e40e7+=_0x18a35d['Enemy'][_0x3bbae5(0xb3d)]||0x0);this[_0x3bbae5(0x309)]&&('FltBX'!==_0x3bbae5(0xaf4)?(_0x1f6a35=this[_0x3bbae5(0x309)][_0x3bbae5(0xad5)]??_0x1f6a35,_0x4e40e7=this[_0x3bbae5(0x309)][_0x3bbae5(0x959)]??_0x4e40e7):(this['_homeX']=this['_targetHomeX'],this['_homeY']=this[_0x3bbae5(0x6bd)])),VisuMZ[_0x3bbae5(0x675)][_0x3bbae5(0x9d6)]['call'](this,_0x1f6a35,_0x4e40e7),this['_targetHomeX']=this[_0x3bbae5(0x605)],this['_targetHomeY']=this[_0x3bbae5(0x486)],this[_0x3bbae5(0x5b5)]=0x0,this[_0x3bbae5(0x6b3)]=0x0,this[_0x3bbae5(0x39a)]=_0x3bbae5(0xc05);},VisuMZ[_0x579382(0x675)]['Sprite_Battler_update']=Sprite_Battler[_0x579382(0x448)][_0x579382(0x6b8)],Sprite_Battler[_0x579382(0x448)][_0x579382(0x6b8)]=function(){const _0x5208ba=_0x579382;VisuMZ[_0x5208ba(0x675)]['Sprite_Battler_update'][_0x5208ba(0xb95)](this),!this[_0x5208ba(0x309)]&&this[_0x5208ba(0x95e)]&&(this[_0x5208ba(0x95e)][_0x5208ba(0xcbc)]=![]);},VisuMZ[_0x579382(0x675)][_0x579382(0xa0a)]=Sprite_Battler['prototype'][_0x579382(0xa58)],Sprite_Battler['prototype']['updateMain']=function(){const _0x3d9b9f=_0x579382;this[_0x3d9b9f(0x7e9)](),this[_0x3d9b9f(0x302)](),this[_0x3d9b9f(0x954)](),this[_0x3d9b9f(0x795)](),VisuMZ[_0x3d9b9f(0x675)][_0x3d9b9f(0xa0a)][_0x3d9b9f(0xb95)](this),this[_0x3d9b9f(0xb9e)]();if(this[_0x3d9b9f(0x622)]===Sprite_Enemy)this[_0x3d9b9f(0x3e7)]();},VisuMZ[_0x579382(0x675)][_0x579382(0x46f)]=Sprite_Battler['prototype'][_0x579382(0x345)],Sprite_Battler['prototype'][_0x579382(0x345)]=function(){const _0x159e46=_0x579382;this[_0x159e46(0x688)](),VisuMZ[_0x159e46(0x675)]['Sprite_Battler_updatePosition'][_0x159e46(0xb95)](this),this[_0x159e46(0xaf2)](),this[_0x159e46(0x746)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0x6f8)]=function(_0x5f06b3,_0x5d5d8c,_0x25befe,_0x2346eb){const _0x1bae96=_0x579382;(this[_0x1bae96(0x8ef)]!==_0x5f06b3||this['_targetHomeY']!==_0x5d5d8c)&&(this[_0x1bae96(0x8ef)]=_0x5f06b3,this[_0x1bae96(0x6bd)]=_0x5d5d8c,this[_0x1bae96(0x5b5)]=_0x25befe,this['_homeWholeDuration']=_0x25befe,this[_0x1bae96(0x39a)]=_0x2346eb,_0x25befe<=0x0&&this[_0x1bae96(0x826)]());},Sprite_Battler[_0x579382(0x448)][_0x579382(0x688)]=function(){const _0x1abe44=_0x579382;if(this['_homeDuration']<=0x0)return;const _0x1d3546=this['_homeDuration'],_0x1d909f=this['_homeWholeDuration'],_0x3e3ca3=this[_0x1abe44(0x39a)];if(Imported[_0x1abe44(0x214)])_0x1abe44(0x29f)!=='HNktv'?(this[_0x1abe44(0x605)]=this[_0x1abe44(0x29a)](this[_0x1abe44(0x605)],this['_targetHomeX'],_0x1d3546,_0x1d909f,_0x3e3ca3),this[_0x1abe44(0x486)]=this['applyEasing'](this[_0x1abe44(0x486)],this[_0x1abe44(0x6bd)],_0x1d3546,_0x1d909f,_0x3e3ca3)):(_0x145c11[_0x1abe44(0x675)][_0x1abe44(0x4ae)]['call'](this),this['onBattleEndBattleCore']());else{if('obguE'===_0x1abe44(0xc2c))this['_homeX']=(this['_homeX']*(_0x1d3546-0x1)+this[_0x1abe44(0x8ef)])/_0x1d3546,this['_homeY']=(this['_homeY']*(_0x1d3546-0x1)+this['_targetHomeY'])/_0x1d3546;else{if(_0x3b72b7[_0x1abe44(0x36a)]()[_0x1abe44(0x4d0)]>0x0)return!![];if(_0x306f38[_0x1abe44(0x36a)]()[_0x1abe44(0x93d)]>0x0)return!![];this[_0x1abe44(0x6ef)]='';}}this[_0x1abe44(0x5b5)]--;if(this['_homeDuration']<=0x0)this[_0x1abe44(0x826)]();},Sprite_Battler['prototype']['onHomeMoveEnd']=function(){const _0x4ce85c=_0x579382;this[_0x4ce85c(0x605)]=this[_0x4ce85c(0x8ef)],this[_0x4ce85c(0x486)]=this[_0x4ce85c(0x6bd)];},Sprite_Battler[_0x579382(0x448)][_0x579382(0xaf2)]=function(){const _0x15ea82=_0x579382;this[_0x15ea82(0xb43)]=this['x'],this[_0x15ea82(0x339)]=this['y'],this[_0x15ea82(0x33b)](),this[_0x15ea82(0x955)](),this['x']+=this['extraPositionX'](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x15ea82(0x36b)](),this['x']=Math[_0x15ea82(0x51f)](this['x']),this['y']=Math[_0x15ea82(0x51f)](this['y']);},Sprite_Battler['prototype'][_0x579382(0x978)]=function(){let _0x1b780e=0x0;return _0x1b780e;},Sprite_Battler['prototype'][_0x579382(0x61d)]=function(){const _0x52b52e=_0x579382;let _0x3eda33=0x0;return this['_battler']&&!this[_0x52b52e(0x309)]['isBattlerGrounded']()&&(_0x3eda33-=this[_0x52b52e(0x4b6)],_0x3eda33-=this['_jumpHeight']),_0x3eda33;},Sprite_Battler[_0x579382(0x448)][_0x579382(0x36b)]=function(){const _0x3827be=_0x579382;let _0x15b0b6=0x0;if(this['_distortionSprite']&&this['constructor']!==Sprite_SvEnemy){const _0x216849=this['_distortionSprite'][_0x3827be(0xb30)]['y'];_0x15b0b6-=(_0x216849-0x1)*this[_0x3827be(0x5ac)];}return _0x15b0b6;},Sprite_Battler[_0x579382(0x448)][_0x579382(0x795)]=function(){const _0x24d6be=_0x579382,_0x4015a2=this[_0x24d6be(0x309)]&&this['_battler'][_0x24d6be(0x94c)]();this[_0x24d6be(0x3cc)]=(_0x4015a2?-0x1:0x1)*Math['abs'](this['scale']['x']);},Sprite_Battler[_0x579382(0x448)]['startFloat']=function(_0x4a4850,_0x3c3700,_0x12311e){const _0x345d6e=_0x579382;if(!this[_0x345d6e(0x268)]())return;if(this['_targetFloatHeight']===_0x4a4850)return;this['_targetFloatHeight']=_0x4a4850,this['_floatDuration']=_0x3c3700,this[_0x345d6e(0xb6d)]=_0x3c3700,this['_floatEasing']=_0x12311e||_0x345d6e(0xc05);if(_0x3c3700<=0x0)this[_0x345d6e(0x4b6)]=_0x4a4850;},Sprite_Battler[_0x579382(0x448)]['updateFloat']=function(){const _0x114115=_0x579382;if(this[_0x114115(0x698)]<=0x0)return;const _0x2b869b=this['_floatDuration'],_0x5c51fd=this[_0x114115(0xb6d)],_0x3c5f40=this['_floatEasing'];if(Imported[_0x114115(0x214)]){if('hyRwT'!==_0x114115(0xb8a)){if(!_0x5d06f8[_0x114115(0xc65)]())return;const _0x4acedb=_0x50e811[_0x114115(0x6c2)]();if(!_0x4acedb)return;_0x4acedb[_0x114115(0x9c8)](_0x114115(0x402));}else this['_floatHeight']=this[_0x114115(0x29a)](this[_0x114115(0x4b6)],this[_0x114115(0x24d)],_0x2b869b,_0x5c51fd,_0x3c5f40);}else{if('NGYsh'!==_0x114115(0x8e4)){if(!_0x5c3258[_0x114115(0xc10)]())return;const _0x4ca34b=this[_0x114115(0x368)]();if(!_0x4ca34b)return;this[_0x114115(0xc58)]()&&(_0x352359*=-0x1,_0x50a717*=-0x1),_0x4ca34b[_0x114115(0xadd)](_0x2ee2d6,_0x3b03fc,_0x610136,_0x1d8d0);}else this['_floatHeight']=(this[_0x114115(0x4b6)]*(_0x2b869b-0x1)+this[_0x114115(0x24d)])/_0x2b869b;}this[_0x114115(0x698)]--;if(this['_floatDuration']<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x579382(0x448)][_0x579382(0xba0)]=function(){const _0x484494=_0x579382;this['_floatHeight']=this[_0x484494(0x24d)];},Sprite_Battler['prototype'][_0x579382(0x5f6)]=function(){const _0x27af41=_0x579382;return this[_0x27af41(0x698)]>0x0;},Sprite_Battler[_0x579382(0x448)][_0x579382(0x75f)]=function(_0x2aeafe,_0x5e87df){const _0x43d14e=_0x579382;if(!this[_0x43d14e(0x268)]())return;if(_0x5e87df<=0x0)return;this[_0x43d14e(0x96a)]=_0x2aeafe,this['_jumpDuration']=_0x5e87df,this[_0x43d14e(0x825)]=_0x5e87df;},Sprite_Battler[_0x579382(0x448)]['updateJump']=function(){const _0x1e9761=_0x579382;if(this[_0x1e9761(0x86a)]<=0x0)return;const _0x488c52=this[_0x1e9761(0x825)]-this[_0x1e9761(0x86a)],_0x2f93a1=this[_0x1e9761(0x825)]/0x2,_0x4fff7c=this['_jumpMaxHeight'],_0x42710d=-_0x4fff7c/Math[_0x1e9761(0x263)](_0x2f93a1,0x2);this[_0x1e9761(0x764)]=_0x42710d*Math[_0x1e9761(0x263)](_0x488c52-_0x2f93a1,0x2)+_0x4fff7c,this['_jumpDuration']--;if(this[_0x1e9761(0x86a)]<=0x0)return this[_0x1e9761(0x1e0)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0x1e0)]=function(){const _0x154a6c=_0x579382;this[_0x154a6c(0x764)]=0x0;},Sprite_Battler[_0x579382(0x448)]['isJumping']=function(){const _0x3375b5=_0x579382;return this[_0x3375b5(0x86a)]>0x0;},Sprite_Battler[_0x579382(0x448)][_0x579382(0x278)]=function(_0x401450,_0x2a983d,_0x3cf423){const _0x107932=_0x579382;if(this[_0x107932(0xa9a)]===_0x401450)return;this[_0x107932(0xa9a)]=_0x401450,this[_0x107932(0x784)]=_0x2a983d,this[_0x107932(0x753)]=_0x2a983d,this[_0x107932(0xc39)]=_0x3cf423||'Linear';if(_0x2a983d<=0x0)this[_0x107932(0xcbd)]=_0x401450;},Sprite_Battler['prototype'][_0x579382(0x746)]=function(){const _0x2dad2e=_0x579382;if(this['constructor']['name']===_0x2dad2e(0xa0e))return;if(this[_0x2dad2e(0x784)]<=0x0)return;const _0x439098=this[_0x2dad2e(0x784)],_0x1e2fa0=this[_0x2dad2e(0x753)],_0x369dda=this['_opacityEasing'];Imported[_0x2dad2e(0x214)]?this[_0x2dad2e(0xcbd)]=this[_0x2dad2e(0x29a)](this[_0x2dad2e(0xcbd)],this[_0x2dad2e(0xa9a)],_0x439098,_0x1e2fa0,_0x369dda):this[_0x2dad2e(0xcbd)]=(this[_0x2dad2e(0xcbd)]*(_0x439098-0x1)+this[_0x2dad2e(0xa9a)])/_0x439098;this[_0x2dad2e(0x784)]--;if(this[_0x2dad2e(0x784)]<=0x0)this[_0x2dad2e(0x8f3)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0x8f3)]=function(){const _0x307dfc=_0x579382;this[_0x307dfc(0xcbd)]=this[_0x307dfc(0xa9a)];},Sprite_Battler[_0x579382(0x448)][_0x579382(0xc81)]=function(){return this['_opacityDuration']>0x0;},Sprite_Battler['prototype'][_0x579382(0x3e7)]=function(){const _0x234d41=_0x579382;this['_shadowSprite'][_0x234d41(0xcbc)]=this[_0x234d41(0x309)][_0x234d41(0x611)](),this[_0x234d41(0x216)]();},Sprite_Battler[_0x579382(0x448)]['updateShadowPosition']=function(){const _0xaebb3=_0x579382;if(!this[_0xaebb3(0xc68)])return;this[_0xaebb3(0xc68)]['y']=this[_0xaebb3(0x339)]-this['y']-0x2;},Sprite_Battler[_0x579382(0x448)][_0x579382(0x5c9)]=function(){const _0x449b8c=_0x579382;if(!this[_0x449b8c(0x309)])return;this[_0x449b8c(0xb48)]=this[_0x449b8c(0x309)][_0x449b8c(0x92a)](),this[_0x449b8c(0xaa5)]=this['_battler'][_0x449b8c(0xab5)]();},Game_BattlerBase[_0x579382(0x448)][_0x579382(0x92a)]=function(){const _0x51923b=_0x579382,_0x262f89=this[_0x51923b(0xc58)]()?this[_0x51923b(0x6b7)]():this[_0x51923b(0x82c)]();if(_0x262f89){if('QNYoM'===_0x51923b(0xa5a)){const _0x155706=_0x262f89['note'];if(_0x155706[_0x51923b(0x299)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x155706[_0x51923b(0x299)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if(_0x51923b(0x8eb)===_0x51923b(0xb8e)){if(!_0x5356c5[_0x51923b(0xaee)]())return![];if(!_0x132ee7[_0x51923b(0xa87)]())return![];if(!_0x42d2ad['isForOpponent']())return![];return _0x4cd0b7[_0x51923b(0x675)]['Settings']['ActionSequence'][_0x51923b(0x225)];}else return Number(RegExp['$1'])||0x0;}}}else _0x2d8b2e[_0x51923b(0x8c2)]=_0x442b24[_0x51923b(0x285)](_0xde0d60);}return 0x1;},Game_BattlerBase[_0x579382(0x448)][_0x579382(0xab5)]=function(){const _0x3ca9be=_0x579382,_0x49ac7e=this[_0x3ca9be(0xc58)]()?this[_0x3ca9be(0x6b7)]():this[_0x3ca9be(0x82c)]();if(_0x49ac7e){const _0x27e300=_0x49ac7e[_0x3ca9be(0x560)];if(_0x27e300[_0x3ca9be(0x299)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x27e300[_0x3ca9be(0x299)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x579382(0x448)][_0x579382(0x7e9)]=function(){const _0x45ef79=_0x579382;if(this[_0x45ef79(0x622)]===Sprite_SvEnemy)return;this[_0x45ef79(0x59a)](),this['finalizeScale']();},Sprite_Battler[_0x579382(0x448)][_0x579382(0xb34)]=function(){const _0x13db7d=_0x579382,_0x22695a=this[_0x13db7d(0xc0c)];if(_0x22695a){if(_0x13db7d(0x788)===_0x13db7d(0x788))_0x22695a[_0x13db7d(0xb30)]['x']=this[_0x13db7d(0x620)](),_0x22695a[_0x13db7d(0xb30)]['y']=this[_0x13db7d(0x956)]();else return _0x11085e[_0x13db7d(0xa1c)](_0x39d1b2=>_0x39d1b2[_0x13db7d(0x884)]()&&_0x39d1b2!==_0x385764);}},Sprite_Battler[_0x579382(0x448)][_0x579382(0x620)]=function(){const _0xb84b47=_0x579382;let _0x51ad6a=0x1;return _0x51ad6a*=this[_0xb84b47(0x3cc)],_0x51ad6a*=this['_growX'],_0x51ad6a;},Sprite_Battler[_0x579382(0x448)]['mainSpriteScaleY']=function(){const _0x55e9ad=_0x579382;return 0x1*this[_0x55e9ad(0x6f9)];},Sprite_Battler[_0x579382(0x448)][_0x579382(0xbb8)]=function(){const _0x3012e6=_0x579382;return this[_0x3012e6(0x259)]*this[_0x3012e6(0x620)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0x1d0)]=function(){const _0x3e243c=_0x579382;return this[_0x3e243c(0x5ac)]*this[_0x3e243c(0x956)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0xa02)]=function(_0x177394,_0x173559,_0x5dbb0a,_0x57e524){const _0xea85a2=_0x579382;if(!this[_0xea85a2(0x268)]())return;if(!this[_0xea85a2(0xc0c)])return;if(this[_0xea85a2(0x5c6)]===_0x177394&&this[_0xea85a2(0x2f3)]===_0x173559)return;this['_targetGrowX']=_0x177394,this[_0xea85a2(0x2f3)]=_0x173559,this['_growDuration']=_0x5dbb0a,this[_0xea85a2(0xc80)]=_0x5dbb0a,this[_0xea85a2(0x711)]=_0x57e524||_0xea85a2(0xc05),_0x5dbb0a<=0x0&&(this[_0xea85a2(0xa3a)]=this[_0xea85a2(0x5c6)],this['_growY']=this[_0xea85a2(0x2f3)]);},Sprite_Battler[_0x579382(0x448)]['updateGrow']=function(){const _0x82a919=_0x579382;if(this[_0x82a919(0x738)]<=0x0)return;if(!this[_0x82a919(0xc0c)])return;const _0x4f4894=this[_0x82a919(0x738)],_0x324583=this[_0x82a919(0xc80)],_0x3a0eb6=this['_growEasing'];if(Imported[_0x82a919(0x214)])this[_0x82a919(0xa3a)]=this[_0x82a919(0x29a)](this['_growX'],this['_targetGrowX'],_0x4f4894,_0x324583,_0x3a0eb6),this[_0x82a919(0x6f9)]=this[_0x82a919(0x29a)](this[_0x82a919(0x6f9)],this[_0x82a919(0x2f3)],_0x4f4894,_0x324583,_0x3a0eb6);else{if(_0x82a919(0x524)!==_0x82a919(0x524))for(const _0x482c3c of _0x2044f2[_0x82a919(0x414)]()){this[_0x82a919(0x2f7)][_0x82a919(0x226)](_0x82a919(0x693),_0x43837[_0x82a919(0xb98)]['format'](_0x482c3c)),this[_0x82a919(0x2f7)]['push'](_0x82a919(0x7c8)),_0xb939a2=!![];}else this[_0x82a919(0xa3a)]=(this['_growX']*(_0x4f4894-0x1)+this['_targetGrowX'])/_0x4f4894,this[_0x82a919(0x6f9)]=(this[_0x82a919(0x6f9)]*(_0x4f4894-0x1)+this[_0x82a919(0x2f3)])/_0x4f4894;}this[_0x82a919(0x738)]--;if(this['_growDuration']<=0x0)this[_0x82a919(0xb14)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0xb14)]=function(){const _0x38096b=_0x579382;this[_0x38096b(0xa3a)]=this[_0x38096b(0x5c6)],this[_0x38096b(0x6f9)]=this[_0x38096b(0x2f3)];},Sprite_Battler['prototype']['isGrowing']=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x579382(0x448)]['startSkew']=function(_0x20e5e0,_0x666118,_0x4aa1e3,_0x3efa62){const _0x325a20=_0x579382;if(!this['canMove']())return;if(!this[_0x325a20(0xc0c)])return;if(this[_0x325a20(0x756)]===_0x20e5e0&&this[_0x325a20(0x71f)]===_0x666118)return;this[_0x325a20(0x756)]=_0x20e5e0,this[_0x325a20(0x71f)]=_0x666118,this[_0x325a20(0x552)]=_0x4aa1e3,this[_0x325a20(0x5c7)]=_0x4aa1e3,this['_skewEasing']=_0x3efa62||'Linear',_0x4aa1e3<=0x0&&(this[_0x325a20(0xc0c)][_0x325a20(0x293)]['x']=this[_0x325a20(0x756)],this[_0x325a20(0xc0c)]['skew']['y']=this['_targetSkewY']);},Sprite_Battler['prototype'][_0x579382(0x302)]=function(){const _0x4be1bf=_0x579382;if(this[_0x4be1bf(0x552)]<=0x0)return;if(!this[_0x4be1bf(0xc0c)])return;const _0x16a47e=this[_0x4be1bf(0x552)],_0x4022ee=this['_skewWholeDuration'],_0x4cb8cf=this[_0x4be1bf(0xa62)],_0x484268=this[_0x4be1bf(0xc0c)];Imported[_0x4be1bf(0x214)]?(_0x484268[_0x4be1bf(0x293)]['x']=this[_0x4be1bf(0x29a)](_0x484268[_0x4be1bf(0x293)]['x'],this[_0x4be1bf(0x756)],_0x16a47e,_0x4022ee,_0x4cb8cf),_0x484268['skew']['y']=this[_0x4be1bf(0x29a)](_0x484268[_0x4be1bf(0x293)]['y'],this['_targetSkewY'],_0x16a47e,_0x4022ee,_0x4cb8cf)):(_0x484268[_0x4be1bf(0x293)]['x']=(_0x484268['skew']['x']*(_0x16a47e-0x1)+this[_0x4be1bf(0x756)])/_0x16a47e,_0x484268[_0x4be1bf(0x293)]['y']=(_0x484268[_0x4be1bf(0x293)]['y']*(_0x16a47e-0x1)+this[_0x4be1bf(0x71f)])/_0x16a47e);this[_0x4be1bf(0x552)]--;if(this['_skewDuration']<=0x0)this[_0x4be1bf(0xa6f)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0xa6f)]=function(){const _0x14f573=_0x579382;this[_0x14f573(0xc0c)][_0x14f573(0x293)]['x']=this[_0x14f573(0x756)],this[_0x14f573(0xc0c)][_0x14f573(0x293)]['y']=this[_0x14f573(0x71f)];},Sprite_Battler[_0x579382(0x448)][_0x579382(0x362)]=function(){const _0x3d3be9=_0x579382;return this[_0x3d3be9(0x552)]>0x0;},Sprite_Battler[_0x579382(0x448)]['startSpin']=function(_0xddd499,_0x394709,_0x2380d0,_0x5551df){const _0x29bccf=_0x579382;if(!this[_0x29bccf(0x268)]())return;if(!this[_0x29bccf(0xc0c)])return;if(this[_0x29bccf(0x521)]===_0xddd499)return;this['_targetAngle']=_0xddd499,this['_angleDuration']=_0x394709,this[_0x29bccf(0x1e5)]=_0x394709,this['_angleEasing']=_0x2380d0||_0x29bccf(0xc05),this[_0x29bccf(0x426)]=_0x5551df;this[_0x29bccf(0x426)]===undefined&&(_0x29bccf(0x4f5)===_0x29bccf(0x8e8)?this['processActorCommandCancelTPB']():this['_angleRevertOnFinish']=!![]);if(_0x394709<=0x0){if(_0x29bccf(0x3ec)!=='UXySS'){this['_currentAngle']=_0xddd499;if(this[_0x29bccf(0x426)]){if(_0x29bccf(0xc90)!==_0x29bccf(0x56b))this[_0x29bccf(0x521)]=0x0,this[_0x29bccf(0x504)]=0x0;else return _0x17dddd[_0x29bccf(0x675)][_0x29bccf(0xb37)][_0x29bccf(0xb95)](this);}}else return this[_0x29bccf(0x407)]();}},Sprite_Battler[_0x579382(0x448)][_0x579382(0x954)]=function(){const _0x4399dc=_0x579382;this[_0x4399dc(0x48c)](),this[_0x4399dc(0x636)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0x48c)]=function(){const _0x2e1847=_0x579382;if(this[_0x2e1847(0xbe4)]<=0x0)return;const _0x5e0696=this[_0x2e1847(0xbe4)],_0x254fb8=this[_0x2e1847(0x1e5)],_0x2fb539=this[_0x2e1847(0x3c0)];Imported[_0x2e1847(0x214)]?'kEvJe'!=='kEvJe'?(_0x4e5006=_0x52c49a['swapEnemyIDs'](_0x4758f8),_0x102a74['BattleCore'][_0x2e1847(0x5cc)][_0x2e1847(0xb95)](this,_0x192753,_0x3a13d2,_0x5d1022),_0x2bf01c[_0x2e1847(0x35a)]&&this[_0x2e1847(0x72e)](),this[_0x2e1847(0x41a)](),this['setupBattleCoreData'](),_0x11a9c1['VisuMZ_1_ElementStatusCore']&&this[_0x2e1847(0x4e6)]()):this[_0x2e1847(0x504)]=this[_0x2e1847(0x29a)](this['_currentAngle'],this['_targetAngle'],_0x5e0696,_0x254fb8,_0x2fb539):this[_0x2e1847(0x504)]=(this['_currentAngle']*(_0x5e0696-0x1)+this['_targetAngle'])/_0x5e0696;this[_0x2e1847(0xbe4)]--;if(this[_0x2e1847(0xbe4)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x579382(0x448)][_0x579382(0x7d3)]=function(){const _0x44d995=_0x579382;this[_0x44d995(0x504)]=this[_0x44d995(0x521)];if(this[_0x44d995(0x426)]){if(_0x44d995(0x494)===_0x44d995(0x494))this[_0x44d995(0x521)]=0x0,this['_currentAngle']=0x0;else return _0x55f6ce[_0x44d995(0x675)][_0x44d995(0x1f7)]['call'](this);}},Sprite_Battler[_0x579382(0x448)][_0x579382(0x500)]=function(){const _0x221463=_0x579382;return this[_0x221463(0xbe4)]>0x0;},Sprite_Battler['prototype']['applyAngleChange']=function(){const _0x33cbeb=_0x579382;if(!this[_0x33cbeb(0xc0c)])return;const _0x563f79=this[_0x33cbeb(0x504)],_0x516f97=this[_0x33cbeb(0xb30)]['x'],_0x8a00a=this[_0x33cbeb(0x309)][_0x33cbeb(0xc58)]()?-0x1:0x1;this[_0x33cbeb(0xc0c)]['angle']=_0x563f79*_0x516f97*_0x8a00a;const _0xfe237e=this[_0x33cbeb(0xc0c)][_0x33cbeb(0xb30)]['y'];this[_0x33cbeb(0xc0c)]['y']=this[_0x33cbeb(0x5ac)]*-0.5*(0x2-_0xfe237e),this[_0x33cbeb(0xc0c)]['y']=Math[_0x33cbeb(0xc7c)](this[_0x33cbeb(0xc0c)]['y']);const _0x817a81=[this['_mainSprite'],this[_0x33cbeb(0x2c6)],this[_0x33cbeb(0xa8c)]];for(const _0x3a335a of _0x817a81){if(!_0x3a335a)continue;_0x3a335a['y']=this[_0x33cbeb(0x5ac)]*0.5;}this[_0x33cbeb(0xc68)]&&('LbWtK'!=='LbWtK'?(this[_0x33cbeb(0x8ef)]=_0x4c1e14,this[_0x33cbeb(0x6bd)]=_0x40c582,this[_0x33cbeb(0x5b5)]=_0x11f689,this[_0x33cbeb(0x6b3)]=_0x4fa191,this[_0x33cbeb(0x39a)]=_0x2d4992,_0x2412c1<=0x0&&this[_0x33cbeb(0x826)]()):(this['_shadowScaleX']=this[_0x33cbeb(0xb48)]??0x1,this[_0x33cbeb(0xaa5)]=this['_shadowScaleY']??0x1,this[_0x33cbeb(0xc68)]['scale']['x']=this[_0x33cbeb(0xc0c)]['scale']['x']*this[_0x33cbeb(0xb48)],this['_shadowSprite'][_0x33cbeb(0xb30)]['y']=this[_0x33cbeb(0xc0c)][_0x33cbeb(0xb30)]['y']*this[_0x33cbeb(0xaa5)]));},VisuMZ[_0x579382(0x675)][_0x579382(0x3da)]=Sprite_Actor[_0x579382(0x448)][_0x579382(0x320)],Sprite_Actor[_0x579382(0x448)][_0x579382(0x320)]=function(){const _0x82aa28=_0x579382;VisuMZ[_0x82aa28(0x675)]['Sprite_Actor_createStateSprite'][_0x82aa28(0xb95)](this),VisuMZ['BattleCore'][_0x82aa28(0x27f)][_0x82aa28(0x3f0)][_0x82aa28(0x5a5)]&&this['createHpGaugeSprite']();},VisuMZ['BattleCore']['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x579382(0x448)]['createStateIconSprite'],Sprite_Enemy[_0x579382(0x448)]['createStateIconSprite']=function(){const _0x43e088=_0x579382;VisuMZ[_0x43e088(0x675)][_0x43e088(0x27f)]['HpGauge'][_0x43e088(0xadc)]&&(_0x43e088(0x53c)!=='OnynU'?this[_0x43e088(0x91a)]():this[_0x43e088(0x1e9)]()),VisuMZ['BattleCore'][_0x43e088(0x868)][_0x43e088(0xb95)](this);},Sprite_Battler[_0x579382(0x448)][_0x579382(0x1e9)]=function(){const _0x12eeca=_0x579382;if(!ConfigManager['visualHpGauge'])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x4fed5b=VisuMZ[_0x12eeca(0x675)][_0x12eeca(0x27f)]['HpGauge'],_0x287924=new Sprite_HpGauge();_0x287924[_0x12eeca(0x22b)]['x']=_0x4fed5b[_0x12eeca(0x46a)],_0x287924[_0x12eeca(0x22b)]['y']=_0x4fed5b[_0x12eeca(0x296)],_0x287924[_0x12eeca(0xb30)]['x']=_0x287924[_0x12eeca(0xb30)]['y']=_0x4fed5b[_0x12eeca(0x544)],this[_0x12eeca(0x95e)]=_0x287924,this['addChild'](this['_hpGaugeSprite']),Spriteset_Battle[_0x12eeca(0xc56)]&&BattleManager[_0x12eeca(0x901)](this[_0x12eeca(0x95e)]);},VisuMZ['BattleCore'][_0x579382(0x8b0)]=Sprite_Battler['prototype'][_0x579382(0xa48)],Sprite_Battler[_0x579382(0x448)]['setBattler']=function(_0x363b31){const _0x3cad6e=_0x579382,_0x9e58c3=this['_battler'];VisuMZ[_0x3cad6e(0x675)][_0x3cad6e(0x8b0)]['call'](this,_0x363b31),this[_0x3cad6e(0x2b0)](_0x363b31);if(_0x9e58c3!==_0x363b31)this['updateShadowScale']();},Sprite_Battler[_0x579382(0x448)][_0x579382(0x2b0)]=function(_0x589d75){const _0x4ad3a3=_0x579382;if(!_0x589d75)return;if(!this[_0x4ad3a3(0x95e)])return;if(_0x589d75[_0x4ad3a3(0xc58)]()){}else{if(_0x589d75[_0x4ad3a3(0xa31)]()){if('BQnYf'===_0x4ad3a3(0x4eb))this[_0x4ad3a3(0x4b8)]()&&this[_0x4ad3a3(0xaac)]();else{if(this[_0x4ad3a3(0x622)]===Sprite_SvEnemy&&!_0x589d75[_0x4ad3a3(0x611)]())return;}}}this[_0x4ad3a3(0x95e)][_0x4ad3a3(0x60d)](_0x589d75,'hp');},Sprite_Battler['prototype']['hasStaticSvBattler']=function(){const _0xcf56f7=_0x579382;return this[_0xcf56f7(0x309)]&&this[_0xcf56f7(0x309)][_0xcf56f7(0x6bc)]();},Sprite_Battler[_0x579382(0x448)][_0x579382(0x4b2)]=function(){const _0x18209e=_0x579382,_0x38223c=this['_mainSprite'][_0x18209e(0x8c2)];if(!_0x38223c)return;const _0x4b91e1=_0x38223c[_0x18209e(0x259)];let _0x86b668=_0x38223c[_0x18209e(0x5ac)];if(this[_0x18209e(0x309)]['isDead']()){if(_0x18209e(0xaaf)!==_0x18209e(0xaaf))this[_0x18209e(0xc5d)][_0x18209e(0x8c2)][_0x18209e(0x2be)]!==this['_battler'][_0x18209e(0x4fa)]()&&(this['_mainSprite'][_0x18209e(0x8c2)][_0x18209e(0x2be)]=this[_0x18209e(0x309)][_0x18209e(0x4fa)]());else{if(this[_0x18209e(0xa99)])_0x86b668=Math['max'](0x0,this['_frame']['height']-0x4);}}this[_0x18209e(0xc5d)][_0x18209e(0xc57)](0x0,0x0,_0x4b91e1,_0x86b668),this[_0x18209e(0xc57)](0x0,0x0,_0x4b91e1,_0x86b668);},Sprite_Battler['prototype'][_0x579382(0xb9e)]=function(){const _0x5ef0f7=_0x579382;if(!this[_0x5ef0f7(0x309)])return;if(!this[_0x5ef0f7(0x95e)])return;const _0x321d6f=VisuMZ[_0x5ef0f7(0x675)][_0x5ef0f7(0x27f)]['HpGauge'],_0x78827=this[_0x5ef0f7(0x95e)];_0x78827[_0x5ef0f7(0xcbc)]=this[_0x5ef0f7(0x77a)]();const _0x594dc9=_0x321d6f[_0x5ef0f7(0x906)],_0x1e9861=_0x321d6f[_0x5ef0f7(0xb3d)];_0x78827['x']=_0x594dc9,_0x78827['x']+=this[_0x5ef0f7(0x309)][_0x5ef0f7(0x589)](),_0x78827['y']=-this[_0x5ef0f7(0x5ac)]+_0x1e9861,_0x78827['y']+=this[_0x5ef0f7(0x309)][_0x5ef0f7(0x44b)](),Spriteset_Battle[_0x5ef0f7(0xc56)]&&SceneManager['_scene'][_0x5ef0f7(0x748)]&&(_0x78827['x']+=this['x'],_0x78827['y']+=this['y']);},Sprite_Battler[_0x579382(0x448)]['isVisualHpGaugeDisplayed']=function(){const _0x262211=_0x579382;if(!this[_0x262211(0x309)])return![];if(this[_0x262211(0x309)]['isActor']())return!![];if(this[_0x262211(0x309)]['isHidden']())return![];if(this[_0x262211(0xcbd)]<=0x0)return![];const _0x46675d=this[_0x262211(0x309)]['enemy']()['note'];if(_0x46675d[_0x262211(0x299)](/<SHOW HP GAUGE>/i))return!![];if(_0x46675d['match'](/<HIDE HP GAUGE>/i))return![];const _0x51d388=VisuMZ[_0x262211(0x675)]['Settings'][_0x262211(0x3f0)];if(_0x51d388[_0x262211(0x6b9)]){if(_0x262211(0x4d8)==='YAhBt'){if(_0x51d388[_0x262211(0xb0c)]&&BattleManager[_0x262211(0x1e8)]())return!![];if(this['_battler'][_0x262211(0x6f0)])return![];return this['_battler'][_0x262211(0x71c)]();}else this[_0x262211(0xcbd)]=this['_targetOpacity'];}return!![];},VisuMZ[_0x579382(0x675)]['Sprite_Battler_isMoving']=Sprite_Battler['prototype'][_0x579382(0x3ab)],Sprite_Battler['prototype'][_0x579382(0x3ab)]=function(){const _0x169e72=_0x579382;if(!this['_battler'])return![];if(this[_0x169e72(0x5b5)]>0x0)return!![];return VisuMZ[_0x169e72(0x675)]['Sprite_Battler_isMoving'][_0x169e72(0xb95)](this);},VisuMZ[_0x579382(0x675)][_0x579382(0x246)]=Sprite_Battler['prototype'][_0x579382(0x87c)],Sprite_Battler[_0x579382(0x448)][_0x579382(0x87c)]=function(_0x448b6d,_0x1e7c80,_0x3476d7){const _0x4cf9b0=_0x579382;this[_0x4cf9b0(0x268)]()&&(_0x4cf9b0(0xa20)===_0x4cf9b0(0x312)?!this[_0x4cf9b0(0x2f7)][_0x4cf9b0(0x880)]()&&this['endAction']():VisuMZ['BattleCore'][_0x4cf9b0(0x246)][_0x4cf9b0(0xb95)](this,_0x448b6d,_0x1e7c80,_0x3476d7));},Sprite_Battler[_0x579382(0x448)][_0x579382(0x268)]=function(){const _0x13b791=_0x579382;if(this[_0x13b791(0x309)]&&this[_0x13b791(0x309)][_0x13b791(0x84b)]())return![];if(this[_0x13b791(0x309)]&&!this[_0x13b791(0x309)][_0x13b791(0x29e)]())return![];return $gameSystem[_0x13b791(0xc10)]();},Sprite_Battler[_0x579382(0x448)]['stepForward']=function(){},Sprite_Battler[_0x579382(0x448)][_0x579382(0x44f)]=function(){const _0x4e8233=_0x579382;this[_0x4e8233(0x87c)](0x0,0x0,0xc);},Sprite_Battler[_0x579382(0x448)][_0x579382(0xc46)]=function(){},Sprite_Battler[_0x579382(0x448)]['stepFlinch']=function(){const _0x405a5a=_0x579382,_0x4259d1=VisuMZ['BattleCore'][_0x405a5a(0x27f)]['Actor'],_0x32b072=this['_battler']&&this[_0x405a5a(0x309)][_0x405a5a(0xc58)]()?0x1:-0x1,_0x852b1c=this[_0x405a5a(0xb43)]-this[_0x405a5a(0x605)]+_0x32b072*_0x4259d1[_0x405a5a(0x3ce)],_0x1fdf27=this[_0x405a5a(0x339)]-this[_0x405a5a(0x486)]+_0x32b072*_0x4259d1[_0x405a5a(0x9b9)],_0x25a904=_0x4259d1[_0x405a5a(0x9b5)];this[_0x405a5a(0x87c)](_0x852b1c,_0x1fdf27,_0x25a904);},VisuMZ['BattleCore'][_0x579382(0x1f5)]=Sprite_Actor['prototype'][_0x579382(0x974)],Sprite_Actor[_0x579382(0x448)]['initMembers']=function(){const _0x512018=_0x579382;VisuMZ[_0x512018(0x675)][_0x512018(0x1f5)]['call'](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x579382(0x448)][_0x579382(0x602)]=function(){const _0x35d156=_0x579382;return this[_0x35d156(0xc0c)]||this['_mainSprite']||this;},VisuMZ[_0x579382(0x675)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x579382(0x448)]['moveToStartPosition'],Sprite_Actor[_0x579382(0x448)][_0x579382(0x70b)]=function(){},Sprite_Actor[_0x579382(0x448)]['moveToStartPositionBattleCore']=function(_0x3b9bc2){const _0x50cff2=_0x579382;if(SceneManager[_0x50cff2(0x1ba)]())return;if(!_0x3b9bc2)return;if(!_0x3b9bc2[_0x50cff2(0x268)]())return;VisuMZ[_0x50cff2(0x675)][_0x50cff2(0x58e)][_0x50cff2(0xb95)](this);},VisuMZ['BattleCore'][_0x579382(0x5e9)]=Sprite_Actor['prototype'][_0x579382(0x540)],Sprite_Actor['prototype'][_0x579382(0x540)]=function(_0x597ac7){const _0x549270=_0x579382;VisuMZ['BattleCore'][_0x549270(0x27f)][_0x549270(0x7b6)][_0x549270(0xc16)]?VisuMZ[_0x549270(0x675)][_0x549270(0x27f)][_0x549270(0x7b6)]['HomePosJS'][_0x549270(0xb95)](this,_0x597ac7):VisuMZ[_0x549270(0x675)][_0x549270(0x5e9)]['call'](this,_0x597ac7);},VisuMZ[_0x579382(0x675)][_0x579382(0xc31)]=Sprite_Actor[_0x579382(0x448)][_0x579382(0xa48)],Sprite_Actor[_0x579382(0x448)][_0x579382(0xa48)]=function(_0x361aa2){const _0x4f7a7f=_0x579382;VisuMZ['BattleCore'][_0x4f7a7f(0xc31)][_0x4f7a7f(0xb95)](this,_0x361aa2),this['setBattlerBattleCore'](_0x361aa2);},Sprite_Actor[_0x579382(0x448)]['setBattlerBattleCore']=function(_0x13dd7f){const _0x6f26ff=_0x579382;if(!_0x13dd7f)return;if(!this[_0x6f26ff(0xc5d)])return;this[_0x6f26ff(0xc5d)]['anchor']['x']=this[_0x6f26ff(0x6f5)]['svBattlerAnchorX'](),this[_0x6f26ff(0xc5d)][_0x6f26ff(0x22b)]['y']=this[_0x6f26ff(0x6f5)][_0x6f26ff(0x9b0)](),this[_0x6f26ff(0xad7)]();},VisuMZ[_0x579382(0x675)][_0x579382(0xa6a)]=Sprite_Actor[_0x579382(0x448)][_0x579382(0x6b8)],Sprite_Actor[_0x579382(0x448)]['update']=function(){const _0x1ee064=_0x579382;VisuMZ['BattleCore'][_0x1ee064(0xa6a)][_0x1ee064(0xb95)](this),this[_0x1ee064(0x6f5)]&&(this[_0x1ee064(0x60f)](),this[_0x1ee064(0x2ad)]());},VisuMZ[_0x579382(0x675)][_0x579382(0x2a7)]=Sprite_Actor[_0x579382(0x448)][_0x579382(0xcb7)],Sprite_Actor[_0x579382(0x448)][_0x579382(0xcb7)]=function(){const _0x594c43=_0x579382;VisuMZ[_0x594c43(0x675)][_0x594c43(0x2a7)][_0x594c43(0xb95)](this);if(this['_mainSprite']&&this[_0x594c43(0xc5d)][_0x594c43(0x8c2)]&&this[_0x594c43(0x309)]){if(_0x594c43(0x862)===_0x594c43(0x9b2))return _0x5be5ed['jsOneForOne'][_0x594c43(0xb95)](this);else{if(this[_0x594c43(0xc5d)][_0x594c43(0x8c2)][_0x594c43(0x2be)]!==this[_0x594c43(0x309)][_0x594c43(0x4fa)]()){if(_0x594c43(0x8e7)===_0x594c43(0x8e7))this[_0x594c43(0xc5d)]['bitmap'][_0x594c43(0x2be)]=this[_0x594c43(0x309)][_0x594c43(0x4fa)]();else{if(!_0x567da5)return![];return _0x4ab224[_0x594c43(0x24e)]()===this['friendsUnit']();}}}}},VisuMZ[_0x579382(0x675)][_0x579382(0x79c)]=Sprite_Actor[_0x579382(0x448)]['updateShadow'],Sprite_Actor[_0x579382(0x448)]['updateShadow']=function(){const _0xb507fb=_0x579382;VisuMZ[_0xb507fb(0x675)]['Sprite_Actor_updateShadow']['call'](this),this['updateShadowBattleCore']();},Sprite_Actor[_0x579382(0x448)]['updateShadowBattleCore']=function(){const _0x3f4723=_0x579382;if(!this[_0x3f4723(0xc5d)])return;if(!this['_shadowSprite'])return;this[_0x3f4723(0xad7)](),this[_0x3f4723(0x216)]();},Sprite_Actor[_0x579382(0x448)][_0x579382(0x60f)]=function(){const _0x4cdd7d=_0x579382;this[_0x4cdd7d(0x785)][_0x4cdd7d(0xb30)]['x']=0x1/(this[_0x4cdd7d(0xb30)]['x']||0.001),this[_0x4cdd7d(0x785)][_0x4cdd7d(0xb30)]['y']=0x1/(this[_0x4cdd7d(0xb30)]['y']||0.001);},Sprite_Actor[_0x579382(0x448)]['updateStyleOpacity']=function(){const _0xdf2fef=_0x579382;if(!$gameSystem['isSideView']()&&this[_0xdf2fef(0x622)]===Sprite_Actor){if(_0xdf2fef(0x7bb)!==_0xdf2fef(0x7bb)){if(!_0x35ec64[_0xdf2fef(0xc65)]())return;_0x522349[_0xdf2fef(0x6dc)](_0x56956b,_0x1d8e0b);const _0x2ea0c7=_0xa61880[_0xdf2fef(0x6c2)](),_0x530a99=_0x4d6746['CreateActionSequenceTargets'](_0x4d74d2[_0xdf2fef(0xbcd)]),_0x20a26c=_0x4e4600[_0xdf2fef(0x49e)],_0x577ce1=_0x24c7f2[_0xdf2fef(0x25f)];if(!_0x2ea0c7)return;_0x5d7cca[_0xdf2fef(0x64f)](_0x530a99,_0x20a26c,_0x577ce1);if(_0x558a03[_0xdf2fef(0x8d2)])_0x2ea0c7[_0xdf2fef(0x9c8)](_0xdf2fef(0x4b1));}else{const _0x2256e0=Scene_Battle[_0xdf2fef(0x448)][_0xdf2fef(0x796)]();if(['default','list',_0xdf2fef(0x745),_0xdf2fef(0x5d8)][_0xdf2fef(0xb2b)](_0x2256e0)){if(_0xdf2fef(0x3a4)===_0xdf2fef(0x74c)){if(!this[_0xdf2fef(0xab8)]()&&this!==_0x247de0[_0xdf2fef(0x7c7)]){if(this[_0xdf2fef(0x368)]())this[_0xdf2fef(0x368)]()[_0xdf2fef(0x913)]();}this[_0xdf2fef(0xbaa)]();return;}else this['opacity']=0x0;}}}},Sprite_Actor[_0x579382(0x448)]['refreshMotion']=function(){const _0xcdb94e=_0x579382,_0x5b8d82=this['_actor'];if(_0x5b8d82){if(_0xcdb94e(0x50d)!==_0xcdb94e(0x50d)){if(!_0x538d9e[_0xcdb94e(0xc65)]())return;if(!_0x59b7e7['VisuMZ_3_ActSeqCamera'])return;_0x52a011['ConvertParams'](_0x3e0d5e,_0x5539c4);const _0x393500=_0x430e2d[_0xcdb94e(0x6c2)](),_0x13fe96=_0x1edc85[_0xcdb94e(0x1e4)];if(!_0x393500)return;_0x3814d9['setBattleZoom'](0x1,_0x365a66[_0xcdb94e(0xafa)],_0x1ad2d['EasingType']);if(_0x13fe96)_0x393500[_0xcdb94e(0x9c8)]('battleZoom');}else{const _0x2c4871=_0x5b8d82[_0xcdb94e(0x55f)]();if(_0x5b8d82[_0xcdb94e(0xa5b)]()||_0x5b8d82[_0xcdb94e(0x2fb)]()){if(_0xcdb94e(0x58c)==='FoFAR')this[_0xcdb94e(0x5ba)](_0xcdb94e(0x615));else{const _0x1e33e2=this[_0xcdb94e(0x7b7)](),_0x5ba8e0=_0x1e33e2[0x0]?_0x1e33e2[0x0][_0xcdb94e(0x7f5)]:0x0;return _0x2b7fe3['attackMotions'][_0x5ba8e0];}}else{if(_0x2c4871===0x3)this['startMotion'](_0xcdb94e(0xb2e));else{if(_0x2c4871===0x2)_0xcdb94e(0xa35)!=='VNqlL'?this['startMotion'](_0xcdb94e(0x9b1)):this[_0xcdb94e(0x226)](_0xcdb94e(0x1dd),_0x32e858);else{if(this['forceEscapeSprite'])this[_0xcdb94e(0x5ba)](_0xcdb94e(0x951));else{if(_0x5b8d82['isCharging']())this[_0xcdb94e(0x5ba)](_0xcdb94e(0x7c8));else{if(_0x5b8d82[_0xcdb94e(0x69b)]())_0xcdb94e(0x6b0)===_0xcdb94e(0x6b0)?this[_0xcdb94e(0x5ba)](_0xcdb94e(0x566)):this['_lastPluginCommandInterpreter']=_0x394e94;else{if(_0x5b8d82[_0xcdb94e(0x4d7)]()||_0x5b8d82[_0xcdb94e(0xbed)]())_0xcdb94e(0x888)!==_0xcdb94e(0x888)?(_0xeb92f5[_0xcdb94e(0x448)][_0xcdb94e(0x1f4)][_0xcdb94e(0xb95)](this),this[_0xcdb94e(0x9a9)]=this[_0xcdb94e(0x82c)]()):this[_0xcdb94e(0x5ba)](_0xcdb94e(0x947));else{if(_0x2c4871===0x1)this[_0xcdb94e(0x5ba)](_0xcdb94e(0x874));else{if(_0x5b8d82[_0xcdb94e(0x597)]())this['startMotion']('dying');else{if(_0x5b8d82[_0xcdb94e(0x8be)]())'oaNCC'==='oaNCC'?this['startMotion'](_0xcdb94e(0x615)):(this[_0xcdb94e(0x97f)](),this['requestMotionRefresh']());else{if(_0x5b8d82[_0xcdb94e(0x5ee)]()){if(_0xcdb94e(0x2a8)==='hbPHY'){const _0x10e098=this[_0xcdb94e(0x2f0)]()?this[_0xcdb94e(0x3ed)]:0x0,_0x2465a3=_0x18e8cd[_0xcdb94e(0xc74)];this[_0xcdb94e(0xa28)](_0x2465a3,_0x10e098),this['_list']=_0x2fa3c3[_0xcdb94e(0x247)](this[_0xcdb94e(0x72f)]);const _0x5977d4={'code':0xbc3,'indent':this[_0xcdb94e(0x9c7)],'parameters':_0x4da0c9[_0xcdb94e(0x247)](_0x199e4f)};return this[_0xcdb94e(0x72f)][_0xcdb94e(0x1da)](this[_0xcdb94e(0x5c8)]+0x1,0x0,_0x5977d4),!![];}else this['startMotion']('wait');}else _0xcdb94e(0x702)!==_0xcdb94e(0x702)?_0x5bf8ef+=_0x4d5567/0x2:this['startMotion'](_0xcdb94e(0x615));}}}}}}}}}}}}},Sprite_Actor[_0x579382(0x448)][_0x579382(0xc46)]=function(){const _0x208835=_0x579382,_0x2681c6=0xa,_0x1aa28d=0x12c*_0x2681c6,_0x156bdc=0x1e*_0x2681c6;this[_0x208835(0x87c)](_0x1aa28d,0x0,_0x156bdc);},Sprite_Actor[_0x579382(0x448)][_0x579382(0x79e)]=function(){const _0x331425=_0x579382;Sprite_Battler[_0x331425(0x448)][_0x331425(0x79e)]['call'](this);},Sprite_Actor[_0x579382(0x448)][_0x579382(0x677)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x579382(0x448)][_0x579382(0x91c)]=function(){const _0x1e90ef=_0x579382;return Sprite_Battler[_0x1e90ef(0x3d3)];},Sprite_Actor[_0x579382(0x448)]['setupMotion']=function(){},Sprite_Actor['prototype'][_0x579382(0x582)]=function(){},Sprite_Actor[_0x579382(0x448)][_0x579382(0x1e6)]=function(){const _0x16f202=_0x579382;if(this['_motion']&&++this[_0x16f202(0x1b7)]>=this[_0x16f202(0x677)]()){if(_0x16f202(0xc94)!==_0x16f202(0xc94))_0xfbd33d[_0x16f202(0x62f)]=![],this[_0x16f202(0x67f)]();else{if(this[_0x16f202(0x81e)]['loop'])this[_0x16f202(0xad0)]=(this[_0x16f202(0xad0)]+0x1)%0x4;else this[_0x16f202(0xad0)]<0x2?_0x16f202(0x37e)==='hDrAp'?(_0x380dd2[_0x16f202(0x675)][_0x16f202(0x241)][_0x16f202(0xb95)](this,_0x562d0a),this['callNextMethod']()):this[_0x16f202(0xad0)]++:this['refreshMotion']();this[_0x16f202(0x1b7)]=0x0;}}},Sprite_Actor[_0x579382(0x448)]['forceMotion']=function(_0x4940a9){const _0x56f10a=_0x579382;if(_0x4940a9===_0x56f10a(0x258))this[_0x56f10a(0xac9)]=!![];if(this['_battler']&&this[_0x56f10a(0x309)]['isDead']()){if(_0x56f10a(0x492)==='OxMui')_0x852b8c[_0x56f10a(0x630)]()?(this[_0x56f10a(0x47e)](),this[_0x56f10a(0x308)]()):_0x5b0999['BattleCore'][_0x56f10a(0x93b)]['call'](this);else{this['_motion']=Sprite_Actor[_0x56f10a(0x266)][_0x56f10a(0xb2e)];return;}}const _0xbce5cd=Sprite_Actor[_0x56f10a(0x266)][_0x4940a9];this[_0x56f10a(0x81e)]=_0xbce5cd,this['_motionCount']=0x0,this[_0x56f10a(0xad0)]=0x0;},Sprite_Actor[_0x579382(0x448)][_0x579382(0x7ba)]=function(_0x1f70f8){const _0x277fe0=_0x579382;if(this[_0x277fe0(0x6bc)]())return;this['adjustWeaponSpriteOffset'](),this['_weaponSprite']['setup'](_0x1f70f8),this[_0x277fe0(0x6f5)][_0x277fe0(0xbc7)]();},Sprite_Actor[_0x579382(0x448)][_0x579382(0x660)]=function(){const _0x428dd7=_0x579382;let _0x3eacdd=-0x10,_0x57dcff=this[_0x428dd7(0x5ac)]*0.5;const _0x37aaaf=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x4891e5=this[_0x428dd7(0x309)]['traitObjects']()[_0x428dd7(0xb6e)](_0x146a56=>_0x146a56&&_0x146a56['note'][_0x428dd7(0x299)](_0x37aaaf)?Number(RegExp['$1']):0x0),_0x2eed76=this[_0x428dd7(0x309)][_0x428dd7(0x2bf)]()[_0x428dd7(0xb6e)](_0x554e41=>_0x554e41&&_0x554e41[_0x428dd7(0x560)]['match'](_0x37aaaf)?Number(RegExp['$2']):0x0);_0x3eacdd=_0x4891e5[_0x428dd7(0x3ad)]((_0x525a18,_0x6b6f8)=>_0x525a18+_0x6b6f8,_0x3eacdd),_0x57dcff=_0x2eed76[_0x428dd7(0x3ad)]((_0x51cc88,_0x2c8637)=>_0x51cc88+_0x2c8637,_0x57dcff),this[_0x428dd7(0xbeb)]['x']=_0x3eacdd,this[_0x428dd7(0xbeb)]['y']=_0x57dcff,this[_0x428dd7(0xbeb)][_0x428dd7(0x6b8)]();},Sprite_Weapon[_0x579382(0x448)]['setup']=function(_0x7f3275){const _0x4586da=_0x579382;this[_0x4586da(0x26a)]=_0x7f3275,this['_animationCount']=-0x1,this[_0x4586da(0xad0)]=0x0,this[_0x4586da(0xb61)](),this['updateFrame']();},Sprite_Actor[_0x579382(0x448)]['updateTargetPosition']=function(){},Sprite_Actor[_0x579382(0x448)][_0x579382(0xc48)]=function(){const _0x1dd3a9=_0x579382,_0x4c6ee3=VisuMZ[_0x1dd3a9(0x675)]['Settings'][_0x1dd3a9(0x765)],_0xf43887=_0x4c6ee3['StepDistanceX'],_0x228dfe=_0x4c6ee3[_0x1dd3a9(0x555)],_0xafc303=_0x4c6ee3['StepDuration'];this[_0x1dd3a9(0x87c)](-_0xf43887,-_0x228dfe,_0xafc303);},VisuMZ[_0x579382(0x675)][_0x579382(0x7f9)]=Sprite_Actor['prototype'][_0x579382(0x661)],Sprite_Actor[_0x579382(0x448)][_0x579382(0x661)]=function(){const _0x53d022=_0x579382;this[_0x53d022(0x6bc)]()?this[_0x53d022(0x4b2)]():(this[_0x53d022(0xb4c)](),VisuMZ[_0x53d022(0x675)][_0x53d022(0x7f9)][_0x53d022(0xb95)](this));},Sprite_Actor['prototype'][_0x579382(0xb4c)]=function(){const _0x395b63=_0x579382;if(this[_0x395b63(0x309)]&&this[_0x395b63(0x309)][_0x395b63(0x664)]){const _0x8c2df3=this[_0x395b63(0x309)][_0x395b63(0x664)];this[_0x395b63(0x81e)]=Sprite_Actor[_0x395b63(0x266)][_0x8c2df3[_0x395b63(0x272)]],this[_0x395b63(0xad0)]=_0x8c2df3[_0x395b63(0xb7b)];const _0x34a173=this[_0x395b63(0xbeb)];_0x34a173[_0x395b63(0x603)](_0x8c2df3[_0x395b63(0x2d0)],_0x8c2df3[_0x395b63(0xb7b)]),this[_0x395b63(0x660)]();}},Sprite_Weapon[_0x579382(0x448)]['freezeFrame']=function(_0x1e5f69,_0x256f91){const _0x570486=_0x579382;this[_0x570486(0x26a)]=_0x1e5f69,this['_animationCount']=-Infinity,this[_0x570486(0xad0)]=_0x256f91,this[_0x570486(0xb61)](),this[_0x570486(0x661)]();},Sprite_Enemy[_0x579382(0x448)][_0x579382(0x974)]=function(){const _0x587d3b=_0x579382;Sprite_Battler[_0x587d3b(0x448)][_0x587d3b(0x974)][_0x587d3b(0xb95)](this),this['_enemy']=null,this['_appeared']=![],this[_0x587d3b(0xc2a)]='',this[_0x587d3b(0x5d3)]=0x0,this[_0x587d3b(0x430)]=null,this[_0x587d3b(0x601)]=0x0,this[_0x587d3b(0x6d5)]=0x0,this[_0x587d3b(0xa27)](),this[_0x587d3b(0x357)]();},VisuMZ[_0x579382(0x675)][_0x579382(0xa03)]=Sprite_Enemy[_0x579382(0x448)][_0x579382(0x6b8)],Sprite_Enemy[_0x579382(0x448)][_0x579382(0x6b8)]=function(){const _0x1c5c6f=_0x579382;VisuMZ[_0x1c5c6f(0x675)][_0x1c5c6f(0xa03)][_0x1c5c6f(0xb95)](this),this[_0x1c5c6f(0xad7)]();},Sprite_Enemy[_0x579382(0x448)][_0x579382(0xa27)]=function(){const _0x49c484=_0x579382;this[_0x49c484(0xc5d)]=new Sprite(),this[_0x49c484(0xc5d)][_0x49c484(0x22b)]['x']=0.5,this[_0x49c484(0xc5d)][_0x49c484(0x22b)]['y']=0x1,this[_0x49c484(0xbb0)](this[_0x49c484(0xc5d)]),this[_0x49c484(0xbe5)]();},Sprite_Enemy[_0x579382(0x448)][_0x579382(0x602)]=function(){const _0x32dc74=_0x579382;return this['_distortionSprite']||this[_0x32dc74(0xc5d)]||this;},Sprite_Enemy['prototype'][_0x579382(0xb61)]=function(_0x50a5ea){const _0x40ade1=_0x579382;this[_0x40ade1(0x8c2)]=new Bitmap(0x1,0x1);if(this[_0x40ade1(0x611)]()){const _0x2d35f7=this[_0x40ade1(0xa7f)]['svBattlerData']();this[_0x40ade1(0x8c2)]=new Bitmap(_0x2d35f7[_0x40ade1(0x259)],_0x2d35f7[_0x40ade1(0x5ac)]),this['_mainSprite'][_0x40ade1(0x8c2)]=new Bitmap(0x1,0x1);}else $gameSystem['isSideView']()?(this['_mainSprite']['bitmap']=ImageManager[_0x40ade1(0xa89)](_0x50a5ea),this[_0x40ade1(0xc5d)]['bitmap'][_0x40ade1(0x9a6)](this['createEmptyBitmap'][_0x40ade1(0x9df)](this))):_0x40ade1(0x853)!==_0x40ade1(0x853)?(this[_0x40ade1(0x8ef)]!==_0x188d4c||this[_0x40ade1(0x6bd)]!==_0x41614d)&&(this['_targetHomeX']=_0x3ca547,this[_0x40ade1(0x6bd)]=_0x365b94,this[_0x40ade1(0x5b5)]=_0x3b14d3,this['_homeWholeDuration']=_0x2a7ed8,this[_0x40ade1(0x39a)]=_0x2807cf,_0x4be761<=0x0&&this[_0x40ade1(0x826)]()):(this[_0x40ade1(0xc5d)][_0x40ade1(0x8c2)]=ImageManager['loadEnemy'](_0x50a5ea),this['_mainSprite'][_0x40ade1(0x8c2)][_0x40ade1(0x9a6)](this['createEmptyBitmap'][_0x40ade1(0x9df)](this)));},Sprite_Enemy['prototype'][_0x579382(0x2aa)]=function(){const _0x2177ea=_0x579382,_0x39adfe=this[_0x2177ea(0xc5d)][_0x2177ea(0x8c2)];if(_0x39adfe){if(_0x2177ea(0x74e)===_0x2177ea(0xba7)){if(!_0x488329[_0x2177ea(0x675)]['TpbActiveChangeEnabled'])return![];const _0x359f0a=_0x5d85bd['aliveMembers']()[_0x2177ea(0xa1c)](_0x333a7c=>_0x333a7c['isTpbCharged']()&&_0x333a7c[_0x2177ea(0x280)]());return _0x359f0a[_0x2177ea(0x237)]>0x0&&_0x3ad293[_0x2177ea(0x6b7)]()!==_0x359f0a[_0x359f0a['length']-0x1];}else this[_0x2177ea(0x8c2)]=new Bitmap(_0x39adfe[_0x2177ea(0x259)],_0x39adfe['height']);}},VisuMZ['BattleCore'][_0x579382(0x4ee)]=Sprite_Enemy[_0x579382(0x448)][_0x579382(0xb7c)],Sprite_Enemy[_0x579382(0x448)][_0x579382(0xb7c)]=function(_0x1a0f9f){const _0x28f28a=_0x579382;this[_0x28f28a(0xc5d)]&&('nuiqS'==='nuiqS'?this[_0x28f28a(0xc5d)][_0x28f28a(0xb7c)](_0x1a0f9f):(this[_0x28f28a(0xc0c)][_0x28f28a(0x293)]['x']=this[_0x28f28a(0x756)],this['_distortionSprite'][_0x28f28a(0x293)]['y']=this[_0x28f28a(0x71f)]));},VisuMZ[_0x579382(0x675)][_0x579382(0x6c8)]=Sprite_Enemy[_0x579382(0x448)][_0x579382(0x818)],Sprite_Enemy[_0x579382(0x448)][_0x579382(0x818)]=function(){const _0x4deb38=_0x579382;this['allowCollapse']()?VisuMZ[_0x4deb38(0x675)][_0x4deb38(0x6c8)][_0x4deb38(0xb95)](this):'mVBhP'!=='NglEj'?(this[_0x4deb38(0x2e7)]=!this[_0x4deb38(0xa7f)][_0x4deb38(0x42d)](),!this[_0x4deb38(0x2e7)]&&(this[_0x4deb38(0xcbd)]=0x0)):(_0x1d970c+=_0x1bc516[_0x4deb38(0xc58)]()?-_0xa9c349:_0x1b9cb5,_0x50c7bc+=_0x27cc7a);},VisuMZ[_0x579382(0x675)][_0x579382(0x323)]=Sprite_Enemy[_0x579382(0x448)][_0x579382(0x56a)],Sprite_Enemy['prototype']['updateCollapse']=function(){const _0x3bc84a=_0x579382;if(this['allowCollapse']())VisuMZ['BattleCore'][_0x3bc84a(0x323)][_0x3bc84a(0xb95)](this);},Sprite_Enemy[_0x579382(0x448)]['updateFrame']=function(){const _0x2a9ad8=_0x579382;Sprite_Battler[_0x2a9ad8(0x448)]['updateFrame'][_0x2a9ad8(0xb95)](this);const _0x34bc29=this[_0x2a9ad8(0x602)]()||this;if(!_0x34bc29)return;if(!_0x34bc29['bitmap']){if('JbIir'!=='JbIir'){const _0xfc7262=this['_forcedBattlers'][_0x2a9ad8(0x3b6)](),_0x384dd0=_0xfc7262[0x0];return _0x384dd0[_0x2a9ad8(0x65b)]=_0x384dd0['_actions']||[],_0x384dd0[_0x2a9ad8(0x65b)][0x0]=_0xfc7262[0x1],_0x384dd0;}else _0x34bc29['bitmap']=new Bitmap(this[_0x2a9ad8(0x259)],this[_0x2a9ad8(0x5ac)]);}if(this[_0x2a9ad8(0x430)]===_0x2a9ad8(0xca5))_0x2a9ad8(0x7a6)!==_0x2a9ad8(0xaec)?this[_0x2a9ad8(0xc5d)][_0x2a9ad8(0xc57)](0x0,0x0,this[_0x2a9ad8(0xc5d)]['width'],this['_effectDuration']):this[_0x2a9ad8(0xcbd)]=this[_0x2a9ad8(0x29a)](this[_0x2a9ad8(0xcbd)],this[_0x2a9ad8(0xa9a)],_0x3f9e06,_0x1d66ca,_0x3ceafe);else{if(_0x2a9ad8(0x942)===_0x2a9ad8(0xbe2)){if(!_0x3d0316[_0x2a9ad8(0xc10)]())return;const _0x77e08a=this[_0x2a9ad8(0x368)]();if(!_0x77e08a)return;_0x77e08a[_0x2a9ad8(0x5c1)](_0xc13589,_0x31d0b8,_0x32a55e);}else _0x34bc29['setFrame'](0x0,0x0,_0x34bc29[_0x2a9ad8(0x8c2)][_0x2a9ad8(0x259)],this[_0x2a9ad8(0x8c2)][_0x2a9ad8(0x5ac)]);}},VisuMZ[_0x579382(0x675)][_0x579382(0x36c)]=Sprite_Enemy[_0x579382(0x448)][_0x579382(0x626)],Sprite_Enemy[_0x579382(0x448)][_0x579382(0x626)]=function(){const _0x59ff23=_0x579382;if(this[_0x59ff23(0x6a4)]())VisuMZ['BattleCore'][_0x59ff23(0x36c)]['call'](this);},Sprite_Enemy[_0x579382(0x448)][_0x579382(0x3ab)]=function(){const _0x242b18=_0x579382;return Sprite_Battler[_0x242b18(0x448)][_0x242b18(0x3ab)][_0x242b18(0xb95)](this);},VisuMZ[_0x579382(0x675)][_0x579382(0x1fc)]=Sprite_Enemy[_0x579382(0x448)][_0x579382(0x60f)],Sprite_Enemy[_0x579382(0x448)][_0x579382(0x60f)]=function(){const _0x14ed07=_0x579382;VisuMZ[_0x14ed07(0x675)][_0x14ed07(0x1fc)]['call'](this),this[_0x14ed07(0x56e)]();},Sprite_Enemy[_0x579382(0x448)][_0x579382(0x56e)]=function(){const _0x17d361=_0x579382,_0x44ac37=VisuMZ[_0x17d361(0x675)]['Settings'][_0x17d361(0x8ff)];if(_0x44ac37[_0x17d361(0xad6)]&&!_0x44ac37[_0x17d361(0xa8a)]){if(_0x17d361(0x440)===_0x17d361(0x440)){this[_0x17d361(0x898)][_0x17d361(0xcbd)]=0x0;return;}else _0x32d499['addChildToUiContainer'](this[_0x17d361(0x95e)]);}this[_0x17d361(0x898)]['x']=0x0,this[_0x17d361(0x898)]['x']+=this[_0x17d361(0x309)][_0x17d361(0x589)](),this[_0x17d361(0x898)]['y']=-this['bitmap']['height']-this[_0x17d361(0x898)][_0x17d361(0x5ac)]-0x4,this[_0x17d361(0x898)]['y']+=this[_0x17d361(0x309)][_0x17d361(0x44b)](),this[_0x17d361(0x898)][_0x17d361(0xb30)]['x']=0x1/(this[_0x17d361(0xb30)]['x']||0.001),this[_0x17d361(0x898)][_0x17d361(0xb30)]['y']=0x1/(this[_0x17d361(0xb30)]['y']||0.001),this['hasSvBattler']()&&(this[_0x17d361(0x2c6)][_0x17d361(0x785)][_0x17d361(0xb30)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x17d361(0x2c6)]['_stateSprite'][_0x17d361(0xb30)]['y']=0x1/(this[_0x17d361(0xb30)]['y']||0.001));},VisuMZ[_0x579382(0x675)][_0x579382(0x1a3)]=Sprite_Enemy[_0x579382(0x448)][_0x579382(0xa48)],Sprite_Enemy[_0x579382(0x448)]['setBattler']=function(_0x23cf41){const _0x513430=_0x579382;VisuMZ[_0x513430(0x675)][_0x513430(0x1a3)][_0x513430(0xb95)](this,_0x23cf41),this['setSvBattlerSprite'](_0x23cf41);},Sprite_Enemy[_0x579382(0x448)][_0x579382(0x29b)]=function(_0x1eed84){const _0x51dfe0=_0x579382;if(!this['_svBattlerSprite']){if('zeIXC'==='IjDXi'){if(!_0x3e7175[_0x51dfe0(0x675)]['TpbActiveChangeEnabled'])return;if(_0x50cc58[_0x51dfe0(0x6aa)]&&_0xfdff8f[_0x51dfe0(0x900)]())return;const _0x39b7be=_0x226a59[_0x51dfe0(0x3a1)]()[_0x51dfe0(0xa1c)](_0x3db13d=>_0x3db13d['isTpbCharged']()&&_0x3db13d[_0x51dfe0(0x280)]());_0x5ba8d0[_0x51dfe0(0x562)]=_0x39b7be[0x0]||null,_0x24bbd0[_0x51dfe0(0x562)]&&_0x2acee4[_0x51dfe0(0x562)]['setActionState'](_0x51dfe0(0x1f3));}else this[_0x51dfe0(0x2c6)]=new Sprite_SvEnemy(_0x1eed84),this[_0x51dfe0(0xbe5)]();}this[_0x51dfe0(0x2c6)][_0x51dfe0(0xa48)](_0x1eed84);},Sprite_Enemy[_0x579382(0x448)][_0x579382(0x611)]=function(){const _0x309e0e=_0x579382;return this[_0x309e0e(0xa7f)]&&this[_0x309e0e(0xa7f)]['hasSvBattler']();},Sprite_Enemy[_0x579382(0x448)][_0x579382(0x6a4)]=function(){const _0x41a426=_0x579382;if(this['hasSvBattler']())return this[_0x41a426(0xa7f)]['allowCollapse']();else{if('gBtvI'===_0x41a426(0x659)){const _0x4775b7=this[_0x41a426(0x4b5)](_0xf96480);if(_0x4775b7===_0x41a426(0xb7d))this['drawItemStyleIconText'](_0x3df237);else _0x4775b7===_0x41a426(0x877)?this[_0x41a426(0x8d3)](_0x4a14fc):_0x3e5f87[_0x41a426(0x448)][_0x41a426(0x4ea)][_0x41a426(0xb95)](this,_0x25ff2e);this['drawSingleSkillCost'](_0x5496ec);}else return!![];}},Sprite_Enemy[_0x579382(0x448)][_0x579382(0x913)]=function(){const _0x3afb17=_0x579382;if(this[_0x3afb17(0x611)]()){if('Pqvol'!==_0x3afb17(0x769)){const _0x3c3d32=_0xa49b27[_0x3afb17(0x342)],_0x3977f0=_0x3afb17(0xac6);this[_0x3afb17(0x3ff)](_0x3c3d32,_0x3977f0);}else this[_0x3afb17(0x2c6)][_0x3afb17(0x913)]();}},Sprite_Enemy[_0x579382(0x448)][_0x579382(0x1d5)]=function(_0x4212b1){const _0x1882b4=_0x579382;if(this[_0x1882b4(0x611)]())this[_0x1882b4(0x2c6)][_0x1882b4(0x1d5)](_0x4212b1);},Sprite_Enemy['prototype'][_0x579382(0x7ba)]=function(_0x5964f4){const _0x33da15=_0x579382;if(this[_0x33da15(0x611)]())this[_0x33da15(0x2c6)][_0x33da15(0x7ba)](_0x5964f4);},Sprite_Enemy['prototype']['stepForward']=function(){const _0x3b8381=_0x579382,_0x300748=VisuMZ[_0x3b8381(0x675)][_0x3b8381(0x27f)][_0x3b8381(0x765)],_0x455a57=_0x300748[_0x3b8381(0xc6f)],_0x38c288=_0x300748['StepDistanceY'],_0x1a159f=_0x300748[_0x3b8381(0x628)];this[_0x3b8381(0x87c)](_0x455a57,_0x38c288,_0x1a159f);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x579382(0x766)](Sprite_Actor[_0x579382(0x448)]),Sprite_SvEnemy[_0x579382(0x448)][_0x579382(0x622)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x579382(0x448)][_0x579382(0x921)]=function(_0x4014ac){const _0x1ec026=_0x579382;Sprite_Actor['prototype'][_0x1ec026(0x921)]['call'](this,_0x4014ac),this[_0x1ec026(0xb30)]['x']=-0x1,this[_0x1ec026(0x785)]['scale']['x']=-0x1;},Sprite_SvEnemy[_0x579382(0x448)][_0x579382(0x2f2)]=function(){},Sprite_SvEnemy['prototype']['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x579382(0x448)][_0x579382(0x540)]=function(_0x107dc8){},Sprite_SvEnemy[_0x579382(0x448)]['updateShadow']=function(){},Sprite_SvEnemy[_0x579382(0x448)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x579382(0x448)][_0x579382(0x60f)]=function(){const _0x31f227=_0x579382;this['_stateSprite'][_0x31f227(0xcbc)]=![];},Sprite_SvEnemy[_0x579382(0x448)]['updateBitmap']=function(){const _0x109601=_0x579382;Sprite_Battler['prototype'][_0x109601(0xcb7)][_0x109601(0xb95)](this);const _0x40dc2b=this['_actor'][_0x109601(0x820)]();this['_battlerName']!==_0x40dc2b&&(this[_0x109601(0xc2a)]=_0x40dc2b,this[_0x109601(0xc5d)]['bitmap']=ImageManager[_0x109601(0x599)](_0x40dc2b));if(this[_0x109601(0xc5d)]&&this[_0x109601(0xc5d)]['bitmap']&&this['_battler']){if(_0x109601(0x4ad)!==_0x109601(0xc35)){if(this[_0x109601(0xc5d)][_0x109601(0x8c2)][_0x109601(0x2be)]!==this[_0x109601(0x309)][_0x109601(0x4fa)]()){if('dctHB'===_0x109601(0x8b3))this['_mainSprite'][_0x109601(0x8c2)][_0x109601(0x2be)]=this['_battler'][_0x109601(0x4fa)]();else return this[_0x109601(0xaed)]()[_0x109601(0x31e)]();}}else this[_0x109601(0x226)](_0x109601(0x693),'<CENTER>%1'[_0x109601(0x7e1)](_0x15bc72[_0x109601(0xb6c)](_0x11871a)));}},Sprite_SvEnemy[_0x579382(0x448)][_0x579382(0xc46)]=function(){},Sprite_SvEnemy['prototype']['startMove']=function(_0x21b791,_0x5e472c,_0x40316c){if(this['parent'])this['parent']['startMove'](_0x21b791,_0x5e472c,_0x40316c);},Sprite_SvEnemy[_0x579382(0x448)][_0x579382(0x913)]=function(){const _0x2bfc3d=_0x579382,_0x3a83bf=this[_0x2bfc3d(0x6f5)];if(_0x3a83bf){if(_0x2bfc3d(0x533)===_0x2bfc3d(0x665)){if(this[_0x2bfc3d(0x915)][_0x2bfc3d(0x237)]>0x0){const _0x2ab263=this[_0x2bfc3d(0x915)][_0x2bfc3d(0x3b6)](),_0x2b80f3=_0x2ab263[0x0];return _0x2b80f3['_actions']=_0x2b80f3[_0x2bfc3d(0x65b)]||[],_0x2b80f3[_0x2bfc3d(0x65b)][0x0]=_0x2ab263[0x1],_0x2b80f3;}else return this['_actionBattlers'][_0x2bfc3d(0x3b6)]();}else{const _0x59b60d=_0x3a83bf['stateMotionIndex']();if(_0x3a83bf[_0x2bfc3d(0xa5b)]()||_0x3a83bf[_0x2bfc3d(0x2fb)]())this[_0x2bfc3d(0x5ba)](_0x2bfc3d(0x615));else{if(_0x59b60d===0x3)_0x2bfc3d(0xc02)===_0x2bfc3d(0x36f)?(_0x9df624[_0x2bfc3d(0x448)][_0x2bfc3d(0x921)]['call'](this),this[_0x2bfc3d(0x963)]()):this['startMotion']('dead');else{if(_0x59b60d===0x2){if('hvrWe'!==_0x2bfc3d(0x59e)){if(!_0x4d80cd[_0x2bfc3d(0xc65)]())return;if(!_0x206c51[_0x2bfc3d(0x763)])return;if(!_0x4fe7d2['isFTB']())return;_0x318a1c[_0x2bfc3d(0x6dc)](_0x52569f,_0x2ff0a4);const _0x38a0be=_0x2dfb5e[_0x2bfc3d(0xa71)];_0x273303[_0x2bfc3d(0x7c7)]&&_0x16e2eb['_subject'][_0x2bfc3d(0x24e)]()['gainCurrentActionsFTB'](_0x38a0be);}else this['startMotion'](_0x2bfc3d(0x9b1));}else{if(_0x3a83bf['isChanting']())_0x2bfc3d(0x805)==='moQTn'?this['startMotion']('chant'):_0x1e9946[_0x2bfc3d(0x226)](_0x2bfc3d(0x227),_0x13e359,_0x1ef815,!![]);else{if(_0x3a83bf[_0x2bfc3d(0x4d7)]()||_0x3a83bf[_0x2bfc3d(0xbed)]())this[_0x2bfc3d(0x5ba)](_0x2bfc3d(0x947));else{if(_0x59b60d===0x1){if(_0x2bfc3d(0x515)===_0x2bfc3d(0x76b)){if(!_0x1ff718[_0x2bfc3d(0xc65)]())return;if(!_0x3bdb36[_0x2bfc3d(0x953)])return;if(!_0x5681b9[_0x2bfc3d(0xc8c)]())return;_0x1fd1dc[_0x2bfc3d(0x6dc)](_0x27a4d3,_0x20abe2);const _0xe31623=_0x26165a[_0x2bfc3d(0x475)];_0x3cba01[_0x2bfc3d(0x7c7)]&&_0x23a683[_0x2bfc3d(0x7c7)][_0x2bfc3d(0x1d3)](_0xe31623);}else this[_0x2bfc3d(0x5ba)](_0x2bfc3d(0x874));}else{if(_0x3a83bf[_0x2bfc3d(0x597)]())this[_0x2bfc3d(0x5ba)](_0x2bfc3d(0x9ff));else _0x3a83bf[_0x2bfc3d(0x8be)]()?_0x2bfc3d(0xc9c)!==_0x2bfc3d(0x875)?this['startMotion'](_0x2bfc3d(0x615)):this[_0x2bfc3d(0xbb0)](this['_animationContainer']):this[_0x2bfc3d(0x5ba)](_0x3a83bf[_0x2bfc3d(0xb27)]()['motionIdle']||_0x2bfc3d(0x615));}}}}}}}}},Sprite_SvEnemy['prototype'][_0x579382(0x97a)]=function(){const _0x4c6da9=_0x579382;if(this[_0x4c6da9(0x5f7)]){if(_0x4c6da9(0x438)!==_0x4c6da9(0x22c))return this[_0x4c6da9(0x5f7)][_0x4c6da9(0x54a)]===0x0&&this[_0x4c6da9(0x5f7)][_0x4c6da9(0x65f)]===0x0;else _0x40fc67[_0x4c6da9(0x448)]['initMembers'][_0x4c6da9(0xb95)](this),this[_0x4c6da9(0xcbd)]=0x0,this[_0x4c6da9(0x8e0)]=null,this[_0x4c6da9(0x22b)]['x']=0.5,this[_0x4c6da9(0x22b)]['y']=0x0;}else{if(_0x4c6da9(0x83e)!=='CbzIX')return!![];else this['selectNextCommandTpb']();}},Sprite_SvEnemy['prototype']['updateFlip']=function(){},VisuMZ[_0x579382(0x675)][_0x579382(0x563)]=Sprite_Animation[_0x579382(0x448)][_0x579382(0xc32)],Sprite_Animation[_0x579382(0x448)][_0x579382(0xc32)]=function(_0x3c0084){const _0x27d917=_0x579382;return _0x3c0084[_0x27d917(0xc0c)]?this[_0x27d917(0x55c)](_0x3c0084):VisuMZ['BattleCore']['Sprite_Animation_targetSpritePosition'][_0x27d917(0xb95)](this,_0x3c0084);},Sprite_Animation[_0x579382(0x448)][_0x579382(0x55c)]=function(_0x146038){const _0x778d36=_0x579382;let _0x4cfeb0=_0x146038['x'],_0x4eeb7a=_0x146038['y'],_0x5759a8=_0x146038[_0x778d36(0x5ac)],_0x3010f9=_0x146038[_0x778d36(0xc0c)][_0x778d36(0xb30)]['y'];_0x146038['x']=_0x146038[_0x778d36(0xb43)]+_0x146038[_0x778d36(0x978)](),_0x146038['y']=_0x146038[_0x778d36(0x339)]+_0x146038[_0x778d36(0x61d)](),_0x146038[_0x778d36(0x5ac)]*=_0x3010f9;let _0x1992e9=VisuMZ[_0x778d36(0x675)][_0x778d36(0x563)]['call'](this,_0x146038);return _0x146038['x']=_0x4cfeb0,_0x146038['y']=_0x4eeb7a,_0x146038['height']=_0x5759a8,_0x1992e9;},VisuMZ[_0x579382(0x675)][_0x579382(0x6ab)]=Sprite_AnimationMV[_0x579382(0x448)][_0x579382(0x345)],Sprite_AnimationMV[_0x579382(0x448)]['updatePosition']=function(){const _0x774894=_0x579382;VisuMZ[_0x774894(0x675)][_0x774894(0x6ab)][_0x774894(0xb95)](this);if(this['_animation'][_0x774894(0x66e)]===0x3){if('wqptU'!==_0x774894(0xca8))_0xbab66c['BattleCore'][_0x774894(0xa51)]['call'](this,_0x1b59b0);else{if(this['x']===0x0)this['x']=Math[_0x774894(0x78b)](Graphics[_0x774894(0x259)]/0x2);if(this['y']===0x0)this['y']=Math[_0x774894(0x78b)](Graphics[_0x774894(0x5ac)]/0x2);}}else{if(this['battleStatusSprite'])return;const _0x28c2e0=(Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x774894(0x536)][_0x774894(0x27f)]['UI']['BoxMargin']:0x4)*0x2,_0x15e538=(Graphics['width']-(Graphics[_0x774894(0x77e)]+_0x28c2e0))/0x2;if(_0x15e538!==0x0)this['x']+=_0x15e538;}},Sprite_Damage[_0x579382(0x448)]['setupBattleCore']=function(_0x1702fd){const _0x1319b5=_0x579382,_0x261802=_0x1702fd[_0x1319b5(0x534)]()||_0x1702fd[_0x1319b5(0x1b1)]();if(_0x261802[_0x1319b5(0x21e)]||_0x261802[_0x1319b5(0x63a)])this[_0x1319b5(0xb31)]=0x0,this[_0x1319b5(0xb90)]();else{if(_0x261802[_0x1319b5(0x52c)])this['_colorType']=_0x261802['hpDamage']>=0x0?0x0:0x1,this['createDigits'](_0x261802[_0x1319b5(0xa1e)]);else _0x1702fd[_0x1319b5(0x884)]()&&_0x261802[_0x1319b5(0x3a7)]!==0x0&&(this[_0x1319b5(0xb31)]=_0x261802[_0x1319b5(0x3a7)]>=0x0?0x2:0x3,this['createDigits'](_0x261802[_0x1319b5(0x3a7)]));}if(_0x261802['critical']){if('kjfBZ'==='OEgOx')return _0x16a019(_0x5e43ff['$1']);else this[_0x1319b5(0xa4a)]();}},Sprite_Damage[_0x579382(0x448)][_0x579382(0x60d)]=function(_0x1d7b56){},Sprite_Damage[_0x579382(0x448)][_0x579382(0x22d)]=function(_0x30ee67){const _0x3ff5cb=_0x579382;let _0x5d383f=this[_0x3ff5cb(0x234)](_0x30ee67);const _0x19b0c0=this[_0x3ff5cb(0x4cc)](),_0x38ec21=Math[_0x3ff5cb(0x51f)](_0x19b0c0*0.75);for(let _0x320ee3=0x0;_0x320ee3<_0x5d383f[_0x3ff5cb(0x237)];_0x320ee3++){const _0x2e3f5a=this[_0x3ff5cb(0x5de)](_0x38ec21,_0x19b0c0);_0x2e3f5a[_0x3ff5cb(0x8c2)]['drawText'](_0x5d383f[_0x320ee3],0x0,0x0,_0x38ec21,_0x19b0c0,_0x3ff5cb(0xc13)),_0x2e3f5a['x']=(_0x320ee3-(_0x5d383f[_0x3ff5cb(0x237)]-0x1)/0x2)*_0x38ec21,_0x2e3f5a['dy']=-_0x320ee3;}},Sprite_Damage['prototype'][_0x579382(0x234)]=function(_0x127eca){const _0x2a89e5=_0x579382;let _0x281a58=Math[_0x2a89e5(0x2f5)](_0x127eca)[_0x2a89e5(0x2ca)]();this[_0x2a89e5(0xa98)]()&&(_0x2a89e5(0x71d)!=='HJOtw'?_0x281a58=VisuMZ[_0x2a89e5(0xcc2)](_0x281a58):this[_0x2a89e5(0x491)][_0x2a89e5(0xbb0)](new _0x126bdf()));const _0x20a70c=VisuMZ[_0x2a89e5(0x675)]['Settings'][_0x2a89e5(0x547)];let _0x1ec2c='',_0x342c27='';switch(this[_0x2a89e5(0xb31)]){case 0x0:_0x1ec2c=_0x20a70c['hpDamageFmt']||_0x2a89e5(0x2ce),_0x342c27=TextManager['hp'];if(_0x127eca===0x0)_0x1ec2c='%1';break;case 0x1:_0x1ec2c=_0x20a70c[_0x2a89e5(0x751)]||_0x2a89e5(0x252),_0x342c27=TextManager['hp'];break;case 0x2:_0x1ec2c=_0x20a70c[_0x2a89e5(0x9e7)]||_0x2a89e5(0x27c),_0x342c27=TextManager['mp'];break;case 0x3:_0x1ec2c=_0x20a70c['mpHealingFmt']||_0x2a89e5(0x586),_0x342c27=TextManager['mp'];break;}return _0x1ec2c[_0x2a89e5(0x7e1)](_0x281a58,_0x342c27)[_0x2a89e5(0x8f5)]();},Sprite_Damage['prototype'][_0x579382(0xa98)]=function(){const _0x44737f=_0x579382;if(Imported[_0x44737f(0x214)]){if('ZNxwM'!==_0x44737f(0x532))this['_cache'][_0x44737f(0xc98)]=_0x4fab75(_0x28eabc['$1']),this[_0x44737f(0x685)][_0x44737f(0x73e)]=_0x54c896(_0x441a0a['$2']);else return VisuMZ[_0x44737f(0x536)][_0x44737f(0x27f)][_0x44737f(0xb05)][_0x44737f(0xa2f)];}else return'srvRE'===_0x44737f(0x7ce)?_0x28457e(_0x5a3258['$2']):![];},Sprite_Damage[_0x579382(0x448)][_0x579382(0xa4a)]=function(){const _0x42fa88=_0x579382,_0x421093=VisuMZ[_0x42fa88(0x675)]['Settings'][_0x42fa88(0x547)];this[_0x42fa88(0x424)]=_0x421093[_0x42fa88(0x76d)][_0x42fa88(0x989)](0x0),this['_flashDuration']=_0x421093[_0x42fa88(0x3f3)];},Sprite_Damage['prototype']['setupTextPopup']=function(_0x381ba3,_0x5e5ce2){const _0x4ae998=_0x579382;this[_0x4ae998(0x424)]=_0x5e5ce2[_0x4ae998(0x2d2)]||[0x0,0x0,0x0,0x0],this[_0x4ae998(0x424)]=JsonEx[_0x4ae998(0x247)](this[_0x4ae998(0x424)]),this[_0x4ae998(0x411)]=_0x5e5ce2['flashDuration']||0x0;const _0x165c1c=this[_0x4ae998(0x4cc)](),_0x289c83=Math[_0x4ae998(0x51f)](_0x165c1c*0x1e),_0x16ca77=this[_0x4ae998(0x5de)](_0x289c83,_0x165c1c);_0x16ca77[_0x4ae998(0x8c2)]['textColor']=ColorManager['getColor'](_0x5e5ce2['textColor']),_0x16ca77['bitmap'][_0x4ae998(0x8ac)](_0x381ba3,0x0,0x0,_0x289c83,_0x165c1c,'center'),_0x16ca77['dy']=0x0;},Sprite_Damage[_0x579382(0x448)]['setupIconTextPopup']=function(_0x139469,_0x37b858,_0x22646f){const _0x385d27=_0x579382,_0x5c83b3=Math[_0x385d27(0x1f1)](this['fontSize'](),ImageManager['iconHeight']),_0x42d7d4=Math[_0x385d27(0x51f)](_0x5c83b3*0x1e),_0x16b3f6=this['createChildSprite'](_0x42d7d4,_0x5c83b3),_0x4b505e=ImageManager[_0x385d27(0x858)]/0x2,_0x2ba1ca=_0x16b3f6[_0x385d27(0x8c2)][_0x385d27(0xa9c)](_0x37b858+'\x20');_0x16b3f6[_0x385d27(0x8c2)][_0x385d27(0x737)]=ColorManager[_0x385d27(0xa6e)](_0x22646f[_0x385d27(0x737)]),_0x16b3f6['bitmap']['drawText'](_0x37b858,_0x4b505e,0x0,_0x42d7d4-_0x4b505e,_0x5c83b3,_0x385d27(0xc13));const _0x4c88a7=Math[_0x385d27(0x78b)]((_0x5c83b3-ImageManager['iconHeight'])/0x2),_0x3be83d=_0x42d7d4/0x2-ImageManager['iconWidth']-_0x2ba1ca/0x2+_0x4b505e/0x2,_0x32a4db=ImageManager[_0x385d27(0x1ce)](_0x385d27(0x39d)),_0x4c53d8=ImageManager['iconWidth'],_0x55c9f7=ImageManager['iconHeight'],_0x1af665=_0x139469%0x10*_0x4c53d8,_0x12875e=Math[_0x385d27(0x51f)](_0x139469/0x10)*_0x55c9f7;_0x16b3f6[_0x385d27(0x8c2)][_0x385d27(0x436)](_0x32a4db,_0x1af665,_0x12875e,_0x4c53d8,_0x55c9f7,_0x3be83d,_0x4c88a7),this[_0x385d27(0x424)]=_0x22646f['flashColor']||[0x0,0x0,0x0,0x0],this[_0x385d27(0x424)]=JsonEx[_0x385d27(0x247)](this[_0x385d27(0x424)]),this[_0x385d27(0x411)]=_0x22646f[_0x385d27(0xac2)]||0x0,_0x16b3f6['dy']=0x0;},VisuMZ[_0x579382(0x675)][_0x579382(0xb24)]=Sprite_Damage['prototype'][_0x579382(0x5de)],Sprite_Damage['prototype'][_0x579382(0x5de)]=function(_0x1cbb01,_0x26b1a9){const _0x3b0a46=_0x579382;return _0x26b1a9=Math[_0x3b0a46(0x78b)](_0x26b1a9*1.2),VisuMZ[_0x3b0a46(0x675)][_0x3b0a46(0xb24)][_0x3b0a46(0xb95)](this,_0x1cbb01,_0x26b1a9);},VisuMZ[_0x579382(0x675)][_0x579382(0x441)]=Sprite_StateIcon[_0x579382(0x448)][_0x579382(0x661)],Sprite_StateIcon[_0x579382(0x448)][_0x579382(0x661)]=function(){const _0x31637f=_0x579382;VisuMZ[_0x31637f(0x675)][_0x31637f(0x441)][_0x31637f(0xb95)](this),this[_0x31637f(0xcbd)]=this[_0x31637f(0x8db)]>0x0?0xff:0x0;},VisuMZ[_0x579382(0x675)][_0x579382(0x38e)]=Sprite_Weapon[_0x579382(0x448)][_0x579382(0xb61)],Sprite_Weapon[_0x579382(0x448)][_0x579382(0xb61)]=function(){const _0x20b6d7=_0x579382;VisuMZ[_0x20b6d7(0x675)][_0x20b6d7(0x38e)][_0x20b6d7(0xb95)](this),this['bitmap']&&(this['bitmap'][_0x20b6d7(0x2be)]=VisuMZ[_0x20b6d7(0x675)][_0x20b6d7(0x27f)][_0x20b6d7(0x7b6)][_0x20b6d7(0x879)]);};function Sprite_HpGauge(){const _0x47c462=_0x579382;this[_0x47c462(0x921)](...arguments);}Sprite_HpGauge['prototype']=Object[_0x579382(0x766)](Sprite_Gauge[_0x579382(0x448)]),Sprite_HpGauge[_0x579382(0x448)][_0x579382(0x622)]=Sprite_HpGauge,Sprite_HpGauge[_0x579382(0x448)][_0x579382(0x921)]=function(){const _0x3432ba=_0x579382;Sprite_Gauge[_0x3432ba(0x448)][_0x3432ba(0x921)][_0x3432ba(0xb95)](this);},Sprite_HpGauge['prototype']['gaugeX']=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x579382(0x9c0)]=function(){const _0x24889a=_0x579382;this[_0x24889a(0x8c2)][_0x24889a(0x3f1)]();const _0x5d72e1=this[_0x24889a(0x66f)]();!isNaN(_0x5d72e1)&&this[_0x24889a(0x3fd)]();};function _0x5528(_0xb0c4cc,_0x119c6b){const _0x15df54=_0x15df();return _0x5528=function(_0x55285b,_0x2a55f9){_0x55285b=_0x55285b-0x198;let _0x348778=_0x15df54[_0x55285b];return _0x348778;},_0x5528(_0xb0c4cc,_0x119c6b);}function Sprite_EnemyName(){const _0xacfb15=_0x579382;this[_0xacfb15(0x921)](...arguments);}Sprite_EnemyName['prototype']=Object[_0x579382(0x766)](Sprite_Name[_0x579382(0x448)]),Sprite_EnemyName[_0x579382(0x448)][_0x579382(0x622)]=Sprite_EnemyName,Sprite_EnemyName['prototype'][_0x579382(0x921)]=function(){const _0x1b0294=_0x579382;Sprite_Name[_0x1b0294(0x448)]['initialize'][_0x1b0294(0xb95)](this),this[_0x1b0294(0x963)]();},Sprite_EnemyName['prototype'][_0x579382(0x974)]=function(){const _0xa8fbb5=_0x579382;Sprite_Name[_0xa8fbb5(0x448)][_0xa8fbb5(0x974)][_0xa8fbb5(0xb95)](this),this[_0xa8fbb5(0xcbd)]=0x0,this[_0xa8fbb5(0x8e0)]=null,this[_0xa8fbb5(0x22b)]['x']=0.5,this[_0xa8fbb5(0x22b)]['y']=0x0;},Sprite_EnemyName[_0x579382(0x448)]['createAttachedSprites']=function(){const _0x47e924=_0x579382;VisuMZ[_0x47e924(0x675)][_0x47e924(0x27f)][_0x47e924(0x8ff)]['NameAttachStateIcon']&&(this[_0x47e924(0x898)]=new Sprite_StateIcon(),this[_0x47e924(0xbb0)](this['_stateIconSprite']));},Sprite_EnemyName[_0x579382(0x448)]['bitmapWidth']=function(){const _0x2aa227=_0x579382;return Graphics[_0x2aa227(0x77e)];},Sprite_EnemyName[_0x579382(0x448)]['bitmapHeight']=function(){const _0x2accc8=_0x579382;return this[_0x2accc8(0x908)]=this[_0x2accc8(0x908)]||Window_Base[_0x2accc8(0x448)]['lineHeight']()||0x24,this[_0x2accc8(0x908)]*0x4;},Sprite_EnemyName[_0x579382(0x448)]['fontSize']=function(){const _0x2bab78=_0x579382;return VisuMZ[_0x2bab78(0x675)][_0x2bab78(0x27f)]['Enemy'][_0x2bab78(0x48f)]||$gameSystem['mainFontSize']();},Sprite_EnemyName[_0x579382(0x448)][_0x579382(0x64a)]=function(_0x5bef15){this['_linkedSprite']=_0x5bef15;},Sprite_EnemyName[_0x579382(0x448)][_0x579382(0x6b8)]=function(){const _0x2e4455=_0x579382;Sprite_Name['prototype']['update'][_0x2e4455(0xb95)](this),this[_0x2e4455(0x31c)](),this['updatePosition'](),this[_0x2e4455(0xcad)](),this[_0x2e4455(0x746)]();},Sprite_EnemyName[_0x579382(0x448)][_0x579382(0x9c0)]=function(){const _0x26ffd2=_0x579382;this['_cacheTextWidth']=undefined;const _0xc45283=this['name'](),_0x35cab3=this[_0x26ffd2(0x47c)](),_0x455214=Window_Base[_0x26ffd2(0x448)][_0x26ffd2(0x768)]();this['setupFont'](),this[_0x26ffd2(0x8c2)]['clear'](),this[_0x26ffd2(0x8c2)][_0x26ffd2(0x8ac)](_0xc45283,0x0,0x0,_0x35cab3,_0x455214,_0x26ffd2(0xc13));},Sprite_EnemyName['prototype'][_0x579382(0x31c)]=function(){const _0x5b500d=_0x579382;if(!this[_0x5b500d(0x8e0)])return;this[_0x5b500d(0x309)]!==this[_0x5b500d(0x8e0)][_0x5b500d(0x309)]&&this['setup'](this['_linkedSprite'][_0x5b500d(0x309)]);},Sprite_EnemyName[_0x579382(0x448)][_0x579382(0x345)]=function(){const _0x3fa94c=_0x579382;if(!this[_0x3fa94c(0x8e0)])return;this[_0x3fa94c(0x908)]=this[_0x3fa94c(0x908)]||Window_Base[_0x3fa94c(0x448)]['lineHeight'](),this['x']=Math[_0x3fa94c(0x78b)](this[_0x3fa94c(0x8e0)]['_baseX']),this['y']=Math[_0x3fa94c(0x78b)](this[_0x3fa94c(0x8e0)][_0x3fa94c(0x339)]-this[_0x3fa94c(0x908)]*0.5);const _0x390556=VisuMZ['BattleCore'][_0x3fa94c(0x27f)][_0x3fa94c(0x8ff)];this['x']+=Math[_0x3fa94c(0x78b)](_0x390556[_0x3fa94c(0x72a)]||0x0),this['y']+=Math['round'](_0x390556[_0x3fa94c(0x95c)]||0x0);},Sprite_EnemyName[_0x579382(0x448)][_0x579382(0xcad)]=function(){const _0x15b74d=_0x579382;this[_0x15b74d(0x6b2)]();},Sprite_EnemyName[_0x579382(0x448)][_0x579382(0x6b2)]=function(){const _0x4c0647=_0x579382;if(!this[_0x4c0647(0x898)])return;this[_0x4c0647(0x309)]!==this[_0x4c0647(0x898)][_0x4c0647(0x309)]&&this[_0x4c0647(0x898)][_0x4c0647(0x60d)](this['_battler']);const _0x1a64b6=this['textWidth']();this[_0x4c0647(0x908)]=this[_0x4c0647(0x908)]||Window_Base[_0x4c0647(0x448)][_0x4c0647(0x768)](),this[_0x4c0647(0x898)]['x']=Math[_0x4c0647(0x78b)]((_0x1a64b6+ImageManager[_0x4c0647(0x858)])/0x2)+0x8,this[_0x4c0647(0x898)]['y']=this['_lineHeight']/0x2;const _0x32adca=VisuMZ[_0x4c0647(0x675)][_0x4c0647(0x27f)][_0x4c0647(0x8ff)];this[_0x4c0647(0x898)]['x']+=_0x32adca[_0x4c0647(0xb25)]||0x0,this[_0x4c0647(0x898)]['y']+=_0x32adca['AttachStateOffsetY']||0x0;},Sprite_EnemyName['prototype']['updateOpacity']=function(){const _0x56a714=_0x579382,_0x2a8812=this[_0x56a714(0x33a)]();if(_0x2a8812&&this[_0x56a714(0xcbd)]<0xff)this[_0x56a714(0xcbd)]+=0x10;else{if(!_0x2a8812&&this[_0x56a714(0xcbd)]>0x0){if(_0x56a714(0x842)===_0x56a714(0x289)){const _0x56bf0a=_0x3848ce['regionId'](_0x5484bf['x'],_0x1fa987['y']);if(this[_0x56a714(0x5d0)]&&this[_0x56a714(0x1e3)][_0x56bf0a])return this[_0x56a714(0x1e3)][_0x56bf0a];}else this[_0x56a714(0xcbd)]-=0x10;}}},Sprite_EnemyName[_0x579382(0x448)]['visibilityState']=function(){const _0x264482=_0x579382;if(this[_0x264482(0x67c)]())return![];else{if(!this[_0x264482(0x309)]){if(_0x264482(0xb71)!=='ustaB'){this[_0x264482(0x368)]()[_0x264482(0x913)](),this[_0x264482(0xbaa)]();return;}else return![];}else{if(this[_0x264482(0x309)][_0x264482(0x84b)]()){if('OMPfh'==='OMPfh')return![];else{if(!_0x9298ab[_0x264482(0xc65)]())return;if(!_0x34308a[_0x264482(0x35a)])return;_0x30e44b[_0x264482(0x6dc)](_0x4ab6e2,_0x1dda6f);const _0x299318=_0x279621['_action'],_0x52b699=_0x243eb2[_0x264482(0x80c)];if(!_0x299318)return;_0x299318[_0x264482(0x6df)]=_0x52b699;}}else{if(!this[_0x264482(0x309)]['isAppeared']())return![];else{if(this[_0x264482(0xb03)]()){if(_0x264482(0x676)!==_0x264482(0x676)){if(!_0xd30137)return;for(const _0x47637f of _0x582697[_0x264482(0xc74)]){if([0x6c,0x198][_0x264482(0xb2b)](_0x47637f[_0x264482(0xb10)])){const _0x2ac4d4=_0x47637f[_0x264482(0xb89)][0x0];if(_0x2ac4d4[_0x264482(0x299)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];}else return!![];}else{if(this['isAlwaysVisible']())return!![];else{if(this[_0x264482(0xb1f)]())return _0x264482(0x1e7)!==_0x264482(0x8af)?!![]:(_0x2afdc0=_0x195e64(_0x129b11),_0x41b677[_0x264482(0x299)](/#(.*)/i)?_0x264482(0x4de)[_0x264482(0x7e1)](_0x334e30(_0x2618fd['$1'])):this['textColor'](_0x2ffa19(_0x5eae39)));else{if(this[_0x264482(0xcbd)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x579382(0x448)]['isAlwaysHidden']=function(){const _0x61694d=_0x579382;return VisuMZ[_0x61694d(0x675)]['Settings'][_0x61694d(0x8ff)][_0x61694d(0x7dc)];},Sprite_EnemyName['prototype']['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x579382(0x448)][_0x579382(0x381)]=function(){const _0x1a88a8=_0x579382;return VisuMZ['BattleCore'][_0x1a88a8(0x27f)][_0x1a88a8(0x8ff)]['NameAlwaysVisible'];},Sprite_EnemyName[_0x579382(0x448)][_0x579382(0xb1f)]=function(){const _0x501c7b=_0x579382;if(VisuMZ[_0x501c7b(0x675)][_0x501c7b(0x27f)]['Enemy']['NameAlwaysSelectOnly']){if('duuEy'===_0x501c7b(0x579)){if(!_0x56ef2b[_0x501c7b(0xbc5)])return null;if(!_0x3877d7['_scene'][_0x501c7b(0xbcc)])return null;if(!_0x15237c['_scene']['_statusWindow'][_0x501c7b(0x2da)])return null;return _0x3dce82[_0x501c7b(0xbc5)][_0x501c7b(0xbcc)][_0x501c7b(0x2da)];}else return this['_battler'][_0x501c7b(0xc0b)]();}else return SceneManager[_0x501c7b(0xbc5)][_0x501c7b(0xadb)]&&SceneManager[_0x501c7b(0xbc5)][_0x501c7b(0xadb)][_0x501c7b(0x6a5)]&&SceneManager[_0x501c7b(0xbc5)]['_enemyWindow'][_0x501c7b(0xb0b)][_0x501c7b(0xb2b)](this[_0x501c7b(0x309)]);},Sprite_EnemyName[_0x579382(0x448)]['textWidth']=function(){const _0x21a645=_0x579382;if(!this[_0x21a645(0x309)])return 0x0;if(this[_0x21a645(0x410)])return this[_0x21a645(0x410)];const _0x47e6a1=this['name']();return this[_0x21a645(0x3f8)](),this[_0x21a645(0x410)]=this[_0x21a645(0x8c2)][_0x21a645(0xa9c)](_0x47e6a1)||0x1,this[_0x21a645(0x410)];},VisuMZ[_0x579382(0x675)][_0x579382(0x33d)]=Sprite_Battleback[_0x579382(0x448)][_0x579382(0x39f)],Sprite_Battleback['prototype'][_0x579382(0x39f)]=function(){const _0x42dfc0=_0x579382,_0x3531ab=VisuMZ[_0x42dfc0(0x675)][_0x42dfc0(0x27f)][_0x42dfc0(0x9d0)];if(!_0x3531ab)return VisuMZ[_0x42dfc0(0x675)][_0x42dfc0(0x33d)][_0x42dfc0(0xb95)](this);const _0x2a5dd8=String(_0x3531ab[_0x42dfc0(0xa39)])||'MZ';switch(_0x2a5dd8){case'MZ':VisuMZ[_0x42dfc0(0x675)][_0x42dfc0(0x33d)][_0x42dfc0(0xb95)](this);break;case'1:1':this[_0x42dfc0(0xb3c)]();break;case _0x42dfc0(0xac5):this[_0x42dfc0(0x980)]();break;case _0x42dfc0(0x5ca):this['adjustPosition_ScaleDown']();break;case'ScaleUp':this[_0x42dfc0(0xc43)]();break;}},Sprite_Battleback[_0x579382(0x448)]['adjustPosition_1for1']=function(){const _0x4e7103=_0x579382,_0x5af6c8=VisuMZ[_0x4e7103(0x675)][_0x4e7103(0x27f)][_0x4e7103(0x9d0)];if(_0x5af6c8&&_0x5af6c8[_0x4e7103(0xc07)])return _0x5af6c8[_0x4e7103(0xc07)][_0x4e7103(0xb95)](this);this['width']=Graphics[_0x4e7103(0x259)],this['height']=Graphics[_0x4e7103(0x5ac)];const _0x52fd97=0x1;this[_0x4e7103(0xb30)]['x']=_0x52fd97,this[_0x4e7103(0xb30)]['y']=_0x52fd97,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x579382(0x980)]=function(){const _0x2a73d1=_0x579382,_0x2b81ad=VisuMZ[_0x2a73d1(0x675)][_0x2a73d1(0x27f)][_0x2a73d1(0x9d0)];if(_0x2b81ad&&_0x2b81ad[_0x2a73d1(0x79d)])return _0x2a73d1(0x1fd)!==_0x2a73d1(0x8bc)?_0x2b81ad[_0x2a73d1(0x79d)][_0x2a73d1(0xb95)](this):this[_0x2a73d1(0x9e2)]()[_0x2a73d1(0x354)](_0x435451=>_0x435451[_0x2a73d1(0x5e6)]());this[_0x2a73d1(0x259)]=Graphics[_0x2a73d1(0x259)],this[_0x2a73d1(0x5ac)]=Graphics[_0x2a73d1(0x5ac)];const _0x4802d2=this[_0x2a73d1(0x259)]/this[_0x2a73d1(0x8c2)]['width'],_0x1c4dc0=this[_0x2a73d1(0x5ac)]/this['bitmap'][_0x2a73d1(0x5ac)],_0x26ea15=Math[_0x2a73d1(0x1f1)](_0x4802d2,_0x1c4dc0);this['scale']['x']=_0x26ea15,this[_0x2a73d1(0xb30)]['y']=_0x26ea15,this['x']=(Graphics[_0x2a73d1(0x259)]-this['width'])/0x2,this['y']=Graphics[_0x2a73d1(0x5ac)]-this[_0x2a73d1(0x5ac)];},Sprite_Battleback['prototype']['adjustPosition_ScaleDown']=function(){const _0xb6a7b=_0x579382,_0x632548=VisuMZ[_0xb6a7b(0x675)][_0xb6a7b(0x27f)][_0xb6a7b(0x9d0)];if(_0x632548&&_0x632548[_0xb6a7b(0x374)])return _0x632548[_0xb6a7b(0x374)][_0xb6a7b(0xb95)](this);this['width']=Graphics[_0xb6a7b(0x259)],this[_0xb6a7b(0x5ac)]=Graphics['height'];const _0x16c9e6=Math[_0xb6a7b(0xabb)](0x1,this[_0xb6a7b(0x259)]/this[_0xb6a7b(0x8c2)][_0xb6a7b(0x259)]),_0x461769=Math[_0xb6a7b(0xabb)](0x1,this[_0xb6a7b(0x5ac)]/this[_0xb6a7b(0x8c2)]['height']),_0x1cacab=Math['max'](_0x16c9e6,_0x461769);this[_0xb6a7b(0xb30)]['x']=_0x1cacab,this[_0xb6a7b(0xb30)]['y']=_0x1cacab,this['x']=(Graphics[_0xb6a7b(0x259)]-this[_0xb6a7b(0x259)])/0x2,this['y']=Graphics['height']-this[_0xb6a7b(0x5ac)];},Sprite_Battleback[_0x579382(0x448)]['adjustPosition_ScaleUp']=function(){const _0x24b82f=_0x579382,_0x27f762=VisuMZ[_0x24b82f(0x675)][_0x24b82f(0x27f)]['BattlebackScale'];if(_0x27f762&&_0x27f762[_0x24b82f(0xca4)])return _0x27f762[_0x24b82f(0xca4)][_0x24b82f(0xb95)](this);this['width']=Graphics[_0x24b82f(0x259)],this['height']=Graphics[_0x24b82f(0x5ac)];const _0x1eb3ec=Math[_0x24b82f(0x1f1)](0x1,this[_0x24b82f(0x259)]/this[_0x24b82f(0x8c2)][_0x24b82f(0x259)]),_0x23dd44=Math[_0x24b82f(0x1f1)](0x1,this[_0x24b82f(0x5ac)]/this['bitmap'][_0x24b82f(0x5ac)]),_0x2195ba=Math['max'](_0x1eb3ec,_0x23dd44);this[_0x24b82f(0xb30)]['x']=_0x2195ba,this[_0x24b82f(0xb30)]['y']=_0x2195ba,this['x']=(Graphics[_0x24b82f(0x259)]-this['width'])/0x2,this['y']=Graphics[_0x24b82f(0x5ac)]-this['height'];},Spriteset_Battle[_0x579382(0xc56)]=VisuMZ['BattleCore'][_0x579382(0x27f)][_0x579382(0xbf4)][_0x579382(0x6a8)]??!![],Spriteset_Battle['prototype']['isFlipped']=function(){const _0x207cc5=_0x579382;if(!$gameSystem[_0x207cc5(0xc10)]())return![];return![];},Spriteset_Battle[_0x579382(0x448)][_0x579382(0x5d9)]=function(){return 0x0;},Spriteset_Battle['prototype'][_0x579382(0x9cf)]=function(){return 0x0;},VisuMZ[_0x579382(0x675)][_0x579382(0xb00)]=Spriteset_Battle['prototype'][_0x579382(0x508)],Spriteset_Battle[_0x579382(0x448)][_0x579382(0x508)]=function(){const _0x18de89=_0x579382;VisuMZ[_0x18de89(0x675)]['Spriteset_Battle_createLowerLayer'][_0x18de89(0xb95)](this),this['createWeather'](),this[_0x18de89(0xc7b)]();},VisuMZ['BattleCore'][_0x579382(0x8ea)]=Spriteset_Battle[_0x579382(0x448)][_0x579382(0x6b8)],Spriteset_Battle['prototype']['update']=function(){const _0x46fc3f=_0x579382;VisuMZ[_0x46fc3f(0x675)][_0x46fc3f(0x8ea)][_0x46fc3f(0xb95)](this),this[_0x46fc3f(0x7fa)](),this[_0x46fc3f(0x5f0)]();},Spriteset_Battle['prototype'][_0x579382(0x663)]=function(){const _0x41573e=_0x579382;this[_0x41573e(0x90d)]=new Weather(),this[_0x41573e(0x23c)]['addChild'](this[_0x41573e(0x90d)]);},Spriteset_Battle[_0x579382(0x448)]['updateWeather']=function(){const _0x2da5a3=_0x579382;this['_weather'][_0x2da5a3(0x3e4)]=$gameScreen[_0x2da5a3(0x80e)](),this[_0x2da5a3(0x90d)][_0x2da5a3(0xc1f)]=$gameScreen['weatherPower']();},Game_Interpreter[_0x579382(0x448)]['command236']=function(_0x19d9d5){const _0x383231=_0x579382;$gameScreen['changeWeather'](_0x19d9d5[0x0],_0x19d9d5[0x1],_0x19d9d5[0x2]);if(_0x19d9d5[0x3])this[_0x383231(0x7c8)](_0x19d9d5[0x2]);return!![];},VisuMZ[_0x579382(0x675)][_0x579382(0x794)]=Game_Interpreter[_0x579382(0x448)][_0x579382(0x23f)],Game_Interpreter['prototype'][_0x579382(0x23f)]=function(_0x905ed2){const _0x29408a=_0x579382;return SceneManager[_0x29408a(0xc65)]()?(SceneManager[_0x29408a(0xbc5)][_0x29408a(0x748)][_0x29408a(0xc54)](_0x905ed2[0x0],_0x905ed2[0x1]),!![]):VisuMZ[_0x29408a(0x675)][_0x29408a(0x794)][_0x29408a(0xb95)](this,_0x905ed2);},Spriteset_Battle[_0x579382(0x448)][_0x579382(0x269)]=function(_0x345b44,_0x2a2f2c){const _0x5dfe36=_0x579382;_0x345b44[_0x5dfe36(0x8c2)]=_0x2a2f2c;},Spriteset_Battle[_0x579382(0x448)][_0x579382(0xc54)]=function(_0x466f04,_0x323a75){const _0x1c2a63=_0x579382;_0x466f04=_0x466f04||'',_0x323a75=_0x323a75||'';_0x466f04===''&&_0x323a75===''&&(_0x466f04=this[_0x1c2a63(0x67e)][_0x1c2a63(0x4b4)](),_0x323a75=this[_0x1c2a63(0x223)][_0x1c2a63(0xc8a)]());const _0xd8c53=ImageManager[_0x1c2a63(0x70c)](_0x466f04),_0x4a92ad=ImageManager[_0x1c2a63(0x251)](_0x323a75);_0xd8c53[_0x1c2a63(0x9a6)](this[_0x1c2a63(0x86f)][_0x1c2a63(0x9df)](this,this[_0x1c2a63(0x67e)],this['_back2Sprite'],_0xd8c53,_0x4a92ad));},Spriteset_Battle[_0x579382(0x448)]['updateBattlebackBitmap1']=function(_0x106bea,_0x18d818,_0x505726,_0x2c4fe6){const _0x5bd2b1=_0x579382;_0x2c4fe6[_0x5bd2b1(0x9a6)](this[_0x5bd2b1(0x75b)][_0x5bd2b1(0x9df)](this,_0x106bea,_0x18d818,_0x505726,_0x2c4fe6));},Spriteset_Battle[_0x579382(0x448)]['updateBattlebackBitmap2']=function(_0x2a7695,_0x13d115,_0x2d3d5b,_0x546e8c){const _0x49718a=_0x579382;_0x2a7695['bitmap']=_0x2d3d5b,_0x13d115[_0x49718a(0x8c2)]=_0x546e8c,_0x2a7695[_0x49718a(0x39f)](),_0x13d115[_0x49718a(0x39f)]();},VisuMZ[_0x579382(0x675)]['Spriteset_Battle_createBattleField']=Spriteset_Battle['prototype']['createBattleField'],Spriteset_Battle[_0x579382(0x448)][_0x579382(0x72d)]=function(){const _0x3c2f8a=_0x579382;VisuMZ[_0x3c2f8a(0x675)][_0x3c2f8a(0x623)][_0x3c2f8a(0xb95)](this),this[_0x3c2f8a(0xbe1)]();},Spriteset_Battle[_0x579382(0x448)][_0x579382(0xbe1)]=function(){const _0x317599=_0x579382;this['createBattleFieldContainer'](),this['createUIContainer'](),this[_0x317599(0x64e)](),this[_0x317599(0xc4c)](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x579382(0x448)]['createBattleFieldContainer']=function(){const _0x4fa1e9=_0x579382;this['_battlerContainer']=new Sprite(),this[_0x4fa1e9(0x23c)][_0x4fa1e9(0xbb0)](this[_0x4fa1e9(0x254)]);},Spriteset_Battle[_0x579382(0x448)][_0x579382(0x64e)]=function(){const _0x487d5d=_0x579382;this[_0x487d5d(0x482)]=new Sprite(),Spriteset_Battle[_0x487d5d(0xc56)]?this[_0x487d5d(0xbb0)](this[_0x487d5d(0x482)]):this['_battleField'][_0x487d5d(0xbb0)](this[_0x487d5d(0x482)]);},Spriteset_Battle[_0x579382(0x448)]['createDamageContainer']=function(){const _0x3b6279=_0x579382;this[_0x3b6279(0x5be)]=new Sprite(),this[_0x3b6279(0x5be)]['x']=this['_battleField']['x'],this['_damageContainer']['y']=this[_0x3b6279(0x23c)]['y'],this[_0x3b6279(0xbb0)](this['_damageContainer']);},Spriteset_Battle['prototype'][_0x579382(0x502)]=function(){const _0xeafb46=_0x579382;if(!this[_0xeafb46(0x88a)]())return;this[_0xeafb46(0x254)][_0xeafb46(0xb30)]['x']=-0x1,this[_0xeafb46(0x254)]['x']=this[_0xeafb46(0x23c)][_0xeafb46(0x259)],this[_0xeafb46(0x423)][_0xeafb46(0xb30)]['x']=-0x1,this['_uiContainer']['x']=this[_0xeafb46(0x23c)]['width'],this[_0xeafb46(0x482)][_0xeafb46(0xb30)]['x']=-0x1,this[_0xeafb46(0x482)]['x']=this[_0xeafb46(0x23c)]['width'],this[_0xeafb46(0x5be)][_0xeafb46(0xb30)]['x']=-0x1,this['_damageContainer']['x']=this['_battleField']['x']+this['_battleField']['width'];},Spriteset_Battle['prototype'][_0x579382(0xa34)]=function(){const _0xda6ffa=_0x579382;Imported[_0xda6ffa(0x214)]&&this[_0xda6ffa(0x5b1)]()&&this[_0xda6ffa(0x914)]();const _0x4c1951=$gameTroop[_0xda6ffa(0x295)](),_0x3ad060=[];for(const _0x2a98ec of _0x4c1951){_0x3ad060[_0xda6ffa(0x226)](new Sprite_Enemy(_0x2a98ec));}_0x3ad060['sort'](this[_0xda6ffa(0x968)][_0xda6ffa(0x9df)](this));for(const _0x654fd1 of _0x3ad060){_0xda6ffa(0x863)===_0xda6ffa(0x919)?_0x5b8719+=_0x5657b6['width']-_0x384c24:this[_0xda6ffa(0x254)][_0xda6ffa(0xbb0)](_0x654fd1);}this['_enemySprites']=_0x3ad060;},Spriteset_Battle[_0x579382(0x448)]['createActors']=function(){const _0x26ebba=_0x579382;this[_0x26ebba(0x1df)]=[];for(let _0x1ab571=0x0;_0x1ab571<$gameParty[_0x26ebba(0xb74)]();_0x1ab571++){const _0x5b36a0=$gameParty[_0x26ebba(0x203)]()[_0x1ab571],_0x575414=new Sprite_Actor();_0x575414[_0x26ebba(0x991)](_0x5b36a0),_0x575414[_0x26ebba(0xa48)](_0x5b36a0),_0x575414[_0x26ebba(0x6b8)](),this[_0x26ebba(0x1df)][_0x26ebba(0x226)](_0x575414),this[_0x26ebba(0x254)]['addChild'](_0x575414);}},Spriteset_Battle[_0x579382(0x448)][_0x579382(0x916)]=function(_0x39eec6,_0x2a20d2,_0x2bd880,_0x28e67c){const _0xc362d1=_0x579382,_0x514587=this[_0xc362d1(0x577)](_0x2a20d2),_0x326e5f=new(_0x514587?Sprite_AnimationMV:Sprite_Animation)(),_0x2b52ce=this[_0xc362d1(0x300)](_0x39eec6);if(this[_0xc362d1(0x736)](_0x39eec6[0x0])){if(_0xc362d1(0xbbe)===_0xc362d1(0xbbe))_0x2bd880=!_0x2bd880;else return _0x284ddf[_0xc362d1(0xa1c)](_0x2946bd=>_0x2946bd['isAlive']());}_0x326e5f[_0xc362d1(0xa1b)]=_0x39eec6,_0x326e5f[_0xc362d1(0x60d)](_0x2b52ce,_0x2a20d2,_0x2bd880,_0x28e67c),this[_0xc362d1(0xbca)](_0x326e5f);},Spriteset_Battle['prototype'][_0x579382(0xbca)]=function(_0x22a93a){const _0x167215=_0x579382;this[_0x167215(0x7b5)](_0x22a93a)?(this[_0x167215(0x26f)]()[_0x167215(0xbb0)](_0x22a93a),_0x22a93a[_0x167215(0x3fa)]=!![]):this['_animationContainer'][_0x167215(0xbb0)](_0x22a93a),this[_0x167215(0xa0f)][_0x167215(0x226)](_0x22a93a);},Spriteset_Battle[_0x579382(0x448)][_0x579382(0x7b5)]=function(_0x2e9e42){const _0x31e51f=_0x579382;if(!_0x2e9e42)return![];if(!_0x2e9e42[_0x31e51f(0xa78)])return![];if(!_0x2e9e42['targetObjects'][0x0])return![];if(_0x2e9e42[_0x31e51f(0xa1b)][0x0]['isActor']&&!_0x2e9e42['targetObjects'][0x0][_0x31e51f(0xc58)]())return![];if($gameSystem[_0x31e51f(0xc10)]())return![];if(!this[_0x31e51f(0x26f)]())return![];if(_0x2e9e42[_0x31e51f(0x622)]===Sprite_Animation){if(_0x2e9e42[_0x31e51f(0xa78)][_0x31e51f(0xb77)]!==0x0)return![];}else{if(_0x2e9e42['constructor']===Sprite_AnimationMV){if('kMIOg'===_0x31e51f(0x2e0)){const _0x4edc50=this['commandName'](_0x3daa7e);if(_0x4edc50[_0x31e51f(0x299)](/\\I\[(\d+)\]/i)){const _0xee320=this[_0x31e51f(0x54e)](_0x74037e),_0x39f55e=this[_0x31e51f(0x694)](_0x4edc50)['width'];return _0x39f55e<=_0xee320[_0x31e51f(0x259)]?_0x31e51f(0xb7d):_0x31e51f(0x877);}}else{if(_0x2e9e42[_0x31e51f(0xa78)]['position']===0x3)return![];}}}return!![];const _0x21a104=Window_BattleStatus[_0x31e51f(0x448)][_0x31e51f(0x796)]();return['xp',_0x31e51f(0x745)][_0x31e51f(0x253)](_0x21a104);},Spriteset_Battle[_0x579382(0x448)][_0x579382(0x26f)]=function(){const _0x1153df=_0x579382;if(!SceneManager[_0x1153df(0xbc5)])return null;if(!SceneManager[_0x1153df(0xbc5)]['_statusWindow'])return null;if(!SceneManager[_0x1153df(0xbc5)]['_statusWindow']['_effectsContainer'])return null;return SceneManager['_scene']['_statusWindow'][_0x1153df(0x2da)];},Spriteset_Battle['prototype'][_0x579382(0xbb4)]=function(_0x545336){const _0x39592b=_0x579382;this[_0x39592b(0x8dd)](_0x545336);for(const _0x36daab of _0x545336[_0x39592b(0xa1b)]){_0x36daab[_0x39592b(0xb96)]&&_0x36daab['endAnimation']();}_0x545336[_0x39592b(0x80a)]();},Spriteset_Battle[_0x579382(0x448)]['removeAnimationFromContainer']=function(_0x51e1ca){const _0x55332f=_0x579382;this[_0x55332f(0x7b5)](_0x51e1ca)?this[_0x55332f(0x26f)]()[_0x55332f(0x490)](_0x51e1ca):this[_0x55332f(0x482)][_0x55332f(0x490)](_0x51e1ca);this[_0x55332f(0x2da)][_0x55332f(0x490)](_0x51e1ca),this[_0x55332f(0x482)][_0x55332f(0x490)](_0x51e1ca),this[_0x55332f(0xa0f)][_0x55332f(0x7f7)](_0x51e1ca);if(this[_0x55332f(0x1b5)])this['_fauxAnimationSprites'][_0x55332f(0x7f7)](_0x51e1ca);},VisuMZ[_0x579382(0x675)][_0x579382(0xac0)]=Spriteset_Battle[_0x579382(0x448)][_0x579382(0x89a)],Spriteset_Battle[_0x579382(0x448)][_0x579382(0x89a)]=function(){const _0x3baf9e=_0x579382;VisuMZ[_0x3baf9e(0x675)][_0x3baf9e(0xac0)][_0x3baf9e(0xb95)](this),this[_0x3baf9e(0x3dd)]();},Spriteset_Battle[_0x579382(0x448)][_0x579382(0x3dd)]=function(){const _0x21263f=_0x579382;this['_battlerContainer']['children']['sort'](this[_0x21263f(0x83b)]['bind'](this)),this[_0x21263f(0xbd0)]();},Spriteset_Battle[_0x579382(0x448)][_0x579382(0x83b)]=function(_0x2fc51a,_0x5149f2){const _0x1ac0f2=_0x579382;if(VisuMZ[_0x1ac0f2(0x675)][_0x1ac0f2(0x27f)][_0x1ac0f2(0x7b6)][_0x1ac0f2(0x376)]){if(_0x2fc51a[_0x1ac0f2(0x309)]&&_0x5149f2[_0x1ac0f2(0x309)]){if(_0x1ac0f2(0xcb5)===_0x1ac0f2(0xcb5)){if(_0x2fc51a[_0x1ac0f2(0x309)][_0x1ac0f2(0xc58)]()&&_0x5149f2[_0x1ac0f2(0x309)][_0x1ac0f2(0xa31)]())return 0x1;else{if(_0x5149f2['_battler'][_0x1ac0f2(0xc58)]()&&_0x2fc51a[_0x1ac0f2(0x309)][_0x1ac0f2(0xa31)]())return-0x1;}}else{if(_0x5a95b4===_0x1ac0f2(0x258))this[_0x1ac0f2(0xac9)]=!![];if(this[_0x1ac0f2(0x309)]&&this['_battler'][_0x1ac0f2(0x84b)]()){this[_0x1ac0f2(0x81e)]=_0x1f03f5[_0x1ac0f2(0x266)][_0x1ac0f2(0xb2e)];return;}const _0x565114=_0x1211c1['MOTIONS'][_0x156ea8];this[_0x1ac0f2(0x81e)]=_0x565114,this[_0x1ac0f2(0x1b7)]=0x0,this[_0x1ac0f2(0xad0)]=0x0;}}}if(_0x2fc51a[_0x1ac0f2(0x339)]!==_0x5149f2[_0x1ac0f2(0x339)]){if('xvtep'!=='VxmKr')return _0x2fc51a[_0x1ac0f2(0x339)]-_0x5149f2[_0x1ac0f2(0x339)];else this[_0x1ac0f2(0x898)]=new _0x54822f(),this[_0x1ac0f2(0xbb0)](this[_0x1ac0f2(0x898)]);}else return _0x5149f2[_0x1ac0f2(0x7e3)]-_0x2fc51a[_0x1ac0f2(0x7e3)];},Spriteset_Battle[_0x579382(0x448)][_0x579382(0xbd0)]=function(){const _0x56d33a=_0x579382;if(!VisuMZ[_0x56d33a(0x675)][_0x56d33a(0x27f)]['Actor'][_0x56d33a(0xabd)])return;const _0x5b7bad=BattleManager[_0x56d33a(0x7c7)];if(_0x5b7bad){if(_0x5b7bad['isActor']()&&!$gameSystem[_0x56d33a(0xc10)]())return;const _0x387e84=_0x5b7bad[_0x56d33a(0x368)]();if(_0x387e84&&_0x5b7bad[_0x56d33a(0xc58)]())this[_0x56d33a(0x254)][_0x56d33a(0xbb0)](_0x387e84);}},Spriteset_Battle[_0x579382(0x448)]['processEscape']=function(){const _0x14a612=_0x579382;for(const _0x1998e5 of $gameParty[_0x14a612(0x3a1)]()){if(_0x14a612(0x371)!=='CQXre'){if(!_0x1998e5)continue;if(!_0x1998e5['battler']())continue;_0x1998e5['battler']()[_0x14a612(0x9fb)]=!![],_0x1998e5[_0x14a612(0x368)]()['retreat']();}else{_0x48f43e[_0x14a612(0x675)][_0x14a612(0x539)]['call'](this,_0x21371f),this[_0x14a612(0x41a)](),this[_0x14a612(0xb6a)]();const _0x4a31b3=this[_0x14a612(0x368)]();if(_0x4a31b3)_0x4a31b3[_0x14a612(0xa48)](this);}}},Spriteset_Battle[_0x579382(0x448)][_0x579382(0x642)]=function(){const _0x4738fc=_0x579382;this[_0x4738fc(0x423)]=new Sprite();if(Spriteset_Battle['ANTI_TINT_UI']){if(_0x4738fc(0xa41)===_0x4738fc(0xa41))this['addChild'](this['_uiContainer']);else{if(this['isCertainHit']())return _0x13b978;const _0x18dc2d=this[_0x4738fc(0xaed)](),_0x4991d1=_0xa78e39;let _0x435642=[],_0x274c18=[];_0x435642['push'](this[_0x4738fc(0x709)][_0x4738fc(0x73d)],this[_0x4738fc(0x709)]['arRedFlat']),_0x274c18[_0x4738fc(0x226)](this[_0x4738fc(0x709)][_0x4738fc(0x4a3)],this[_0x4738fc(0x709)][_0x4738fc(0x390)]);const _0xf33b70=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3b7650=this[_0x4738fc(0xaee)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x118edc=this[_0x4738fc(0xaee)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x348d26=this[_0x4738fc(0xaee)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x435642=_0x435642[_0x4738fc(0xa96)](_0x4991d1['traitObjects']()[_0x4738fc(0xb6e)](_0x5db284=>_0x5db284&&_0x5db284[_0x4738fc(0x560)][_0x4738fc(0x299)](_0xf33b70)?_0x40bc0b(_0xbac241['$1']):0x0)),_0x274c18=_0x274c18[_0x4738fc(0xa96)](_0x4991d1[_0x4738fc(0x2bf)]()['map'](_0x13f596=>_0x13f596&&_0x13f596[_0x4738fc(0x560)]['match'](_0x3b7650)?_0x3d2ac2(_0x4a3c10['$1'])/0x64:0x0)),_0x435642=_0x435642[_0x4738fc(0xa96)](_0x18dc2d['traitObjects']()[_0x4738fc(0xb6e)](_0x22218c=>_0x22218c&&_0x22218c[_0x4738fc(0x560)][_0x4738fc(0x299)](_0x118edc)?_0x423c37(_0x1d35e7['$1']):0x0)),_0x274c18=_0x274c18['concat'](_0x18dc2d[_0x4738fc(0x2bf)]()[_0x4738fc(0xb6e)](_0x19daf8=>_0x19daf8&&_0x19daf8[_0x4738fc(0x560)][_0x4738fc(0x299)](_0x348d26)?_0x42320f(_0x499a2d['$1'])/0x64:0x0)),this[_0x4738fc(0x270)]()[_0x4738fc(0x560)][_0x4738fc(0x299)](_0x118edc)&&_0x435642[_0x4738fc(0x226)](_0x1adcb9(_0x5f776a['$1'])),this[_0x4738fc(0x270)]()[_0x4738fc(0x560)]['match'](_0x348d26)&&_0x274c18['push'](_0x3d0365(_0x3d2ca4['$1'])),_0x179384=_0x435642['reduce']((_0x28abb5,_0x11bb25)=>_0x28abb5-_0x11bb25,_0x117a47),_0x3943a9>0x0&&(_0x183be7=_0x274c18[_0x4738fc(0x3ad)]((_0x557452,_0x283f84)=>_0x557452*(0x1-_0x283f84),_0x2b834d)),_0x114970;}}else this[_0x4738fc(0x23c)][_0x4738fc(0xbb0)](this[_0x4738fc(0x423)]);SceneManager['_scene']['_uiContainer']=this[_0x4738fc(0x423)];},Spriteset_Battle['prototype']['createEnemyNames']=function(){const _0x3e633f=_0x579382;if(VisuMZ['BattleCore']['Settings'][_0x3e633f(0x8ff)][_0x3e633f(0xa8a)])return;this[_0x3e633f(0x9d3)]=new Sprite(),BattleManager[_0x3e633f(0x901)](this[_0x3e633f(0x9d3)]);for(const _0x27d958 of this[_0x3e633f(0x5a9)]){const _0x309af4=new Sprite_EnemyName();this['_enemyNameContainer'][_0x3e633f(0xbb0)](_0x309af4),_0x309af4[_0x3e633f(0x64a)](_0x27d958);}},Spriteset_Battle[_0x579382(0x448)]['updateUiContainerPosition']=function(){const _0x444901=_0x579382;if(!this[_0x444901(0x5be)])return;if(!this[_0x444901(0x423)])return;const _0x107e01=Spriteset_Battle[_0x444901(0xc56)]?this[_0x444901(0x5be)]['x']:0x0,_0x50a19f=Spriteset_Battle['ANTI_TINT_UI']?this[_0x444901(0x5be)]['y']:0x0,_0x58b95b=Imported['VisuMZ_3_ActSeqCamera']?this[_0x444901(0x23c)]['x']:0x0,_0x2d2833=Imported['VisuMZ_3_ActSeqCamera']?this['_battleField']['y']:0x0;this[_0x444901(0x423)]['x']=_0x107e01+_0x58b95b,this[_0x444901(0x423)]['y']=_0x50a19f+_0x2d2833;},BattleManager[_0x579382(0x901)]=function(_0x2eac95){const _0x2fbe25=_0x579382;if(!SceneManager[_0x2fbe25(0xbc5)]['_uiContainer'])return;SceneManager[_0x2fbe25(0xbc5)]['_uiContainer'][_0x2fbe25(0xbb0)](_0x2eac95);},Spriteset_Battle['prototype'][_0x579382(0x880)]=function(){return![];},Spriteset_Battle[_0x579382(0x448)]['isAnyoneFloating']=function(){const _0x597a7e=_0x579382;return this['battlerSprites']()['some'](_0x26f668=>_0x26f668[_0x597a7e(0x5f6)]());},Spriteset_Battle[_0x579382(0x448)]['isAnyoneJumping']=function(){const _0x3dd541=_0x579382;return this[_0x3dd541(0x9e2)]()[_0x3dd541(0x354)](_0x75c22e=>_0x75c22e['isJumping']());},Spriteset_Battle['prototype'][_0x579382(0xb86)]=function(){const _0x16bb43=_0x579382;return this[_0x16bb43(0x9e2)]()['some'](_0x41921c=>_0x41921c['isGrowing']());},Spriteset_Battle[_0x579382(0x448)][_0x579382(0x3fb)]=function(){const _0x3fd597=_0x579382;return this[_0x3fd597(0x9e2)]()[_0x3fd597(0x354)](_0x482ad0=>_0x482ad0[_0x3fd597(0x362)]());},Spriteset_Battle[_0x579382(0x448)]['isAnyoneSpinning']=function(){const _0x2d157b=_0x579382;return this[_0x2d157b(0x9e2)]()['some'](_0x830ce0=>_0x830ce0['isSpinning']());},Spriteset_Battle['prototype'][_0x579382(0x1de)]=function(){const _0x34962b=_0x579382;return this[_0x34962b(0x9e2)]()[_0x34962b(0x354)](_0x3ecee5=>_0x3ecee5[_0x34962b(0xc81)]());},VisuMZ[_0x579382(0x675)][_0x579382(0xb37)]=Window_ItemList[_0x579382(0x448)]['maxCols'],Window_ItemList['prototype'][_0x579382(0xb32)]=function(){const _0x39a8db=_0x579382;if(SceneManager['isSceneBattle']())return SceneManager['_scene'][_0x39a8db(0x796)]()===_0x39a8db(0x5d8)?VisuMZ[_0x39a8db(0x675)][_0x39a8db(0x27f)]['BattleLayout'][_0x39a8db(0x5e4)]:VisuMZ[_0x39a8db(0x675)]['Settings']['BattleLayout'][_0x39a8db(0x760)];else{if(_0x39a8db(0x469)!==_0x39a8db(0x876))return VisuMZ[_0x39a8db(0x675)][_0x39a8db(0xb37)][_0x39a8db(0xb95)](this);else{const _0x58af84=_0x39a8db(0x705)[_0x39a8db(0x7e1)](_0x338f25['actorId']()),_0x48d14f=this[_0x39a8db(0x591)](_0x58af84,_0xac8efe),_0x4a21bb=_0x1bf591[_0x39a8db(0x321)]();_0x4a21bb!==''?_0x48d14f[_0x39a8db(0x8c2)]=_0x321549[_0x39a8db(0x285)](_0x4a21bb):_0x48d14f[_0x39a8db(0x8c2)]=_0x1f4c57[_0x39a8db(0x9b3)];const _0x40a294=this[_0x39a8db(0xbbc)](_0x1d38ff);_0x48d14f['anchor']['x']=0.5,_0x48d14f[_0x39a8db(0x22b)]['y']=0x1;let _0x48f530=_0x178c76['round'](_0x40a294['x']+_0x40a294[_0x39a8db(0x259)]/0x2)+this[_0x39a8db(0x443)];_0x48f530+=_0x23f8da[_0x39a8db(0x4d2)]();let _0x2cf907=_0x5ae06d[_0x39a8db(0x78b)](this['height']);_0x2cf907+=_0x4f5636['getBattlePortraitOffsetY'](),_0x48d14f[_0x39a8db(0x487)](_0x48f530,_0x2cf907);const _0x410e16=_0x5e6030['BattleCore'][_0x39a8db(0x27f)][_0x39a8db(0xbf4)]['PortraitScale'];_0x48d14f[_0x39a8db(0xb30)]['x']=_0x410e16,_0x48d14f['scale']['y']=_0x410e16,_0x48d14f[_0x39a8db(0x569)]();}}},VisuMZ['BattleCore']['Window_SkillList_maxCols']=Window_SkillList[_0x579382(0x448)]['maxCols'],Window_SkillList[_0x579382(0x448)][_0x579382(0xb32)]=function(){const _0x309489=_0x579382;if(SceneManager[_0x309489(0xc65)]()){if(_0x309489(0x20e)!==_0x309489(0x248))return SceneManager[_0x309489(0xbc5)][_0x309489(0x796)]()===_0x309489(0x5d8)?VisuMZ[_0x309489(0x675)][_0x309489(0x27f)][_0x309489(0xbf4)][_0x309489(0x5e4)]:VisuMZ[_0x309489(0x675)][_0x309489(0x27f)]['BattleLayout']['SkillItemStandardCols'];else{if(!_0x423698[_0x309489(0xc10)]())return;const _0x5f1d91=this[_0x309489(0x368)]();if(!_0x5f1d91)return;if(_0x3e9812===_0x5f1d91[_0x309489(0xb43)])return;let _0x187b07=![];if(this[_0x309489(0xc58)]()){if(_0x469cb4>_0x5f1d91[_0x309489(0xb43)])_0x187b07=!![];if(_0x3cccea<_0x5f1d91['_baseX'])_0x187b07=![];}else{if(this[_0x309489(0xa31)]()){if(_0x343e2c>_0x5f1d91[_0x309489(0xb43)])_0x187b07=![];if(_0x1fe424<_0x5f1d91[_0x309489(0xb43)])_0x187b07=!![];}};this[_0x309489(0x5e7)](_0x390243?!_0x187b07:_0x187b07),_0x5f1d91['updateFlip']();}}else return _0x309489(0xc2f)===_0x309489(0xc2f)?VisuMZ[_0x309489(0x675)]['Window_SkillList_maxCols']['call'](this):_0x50d1d9[_0x309489(0xca4)][_0x309489(0xb95)](this);},VisuMZ[_0x579382(0x675)][_0x579382(0x91e)]=Window_Options['prototype'][_0x579382(0xb1a)],Window_Options[_0x579382(0x448)][_0x579382(0xb1a)]=function(){const _0x35a42d=_0x579382;VisuMZ[_0x35a42d(0x675)][_0x35a42d(0x91e)][_0x35a42d(0xb95)](this),this['addAutoBattleCommands'](),this[_0x35a42d(0x902)]();},Window_Options['prototype'][_0x579382(0x987)]=function(){const _0x575fef=_0x579382;VisuMZ[_0x575fef(0x675)][_0x575fef(0x27f)][_0x575fef(0x6d6)]['AddOption']&&(this[_0x575fef(0x292)](),this[_0x575fef(0x8c6)]());},Window_Options[_0x579382(0x448)]['addShowHpGaugeCommand']=function(){const _0x1aa7fd=_0x579382;if(!VisuMZ[_0x1aa7fd(0x675)][_0x1aa7fd(0x27f)][_0x1aa7fd(0x3f0)][_0x1aa7fd(0x1cc)])return;const _0x4c2c98=TextManager['visualHpGauge'],_0x327e95='visualHpGauge';this[_0x1aa7fd(0x3ff)](_0x4c2c98,_0x327e95);},Window_Options[_0x579382(0x448)][_0x579382(0x292)]=function(){const _0x2239a9=_0x579382,_0x2a7128=TextManager[_0x2239a9(0x8ee)],_0x3d5a44='autoBattleAtStart';this['addCommand'](_0x2a7128,_0x3d5a44);},Window_Options[_0x579382(0x448)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0xf66c1=_0x579382,_0x5aaf8d=TextManager[_0xf66c1(0x342)],_0x6b05cc='autoBattleUseSkills';this[_0xf66c1(0x3ff)](_0x5aaf8d,_0x6b05cc);},VisuMZ[_0x579382(0x675)][_0x579382(0x3ae)]=Window_Options['prototype']['statusText'],Window_Options[_0x579382(0x448)][_0x579382(0x69a)]=function(_0x4e3452){const _0x2d9945=_0x579382,_0x3bd8b8=this[_0x2d9945(0x516)](_0x4e3452);if(_0x3bd8b8===_0x2d9945(0xac6))return this['statusTextAutoBattleStyle']();else{if(_0x2d9945(0x729)!==_0x2d9945(0x97e))return VisuMZ[_0x2d9945(0x675)][_0x2d9945(0x3ae)]['call'](this,_0x4e3452);else{if(this[_0x2d9945(0x309)]&&this[_0x2d9945(0x309)][_0x2d9945(0x84b)]())return![];if(this[_0x2d9945(0x309)]&&!this[_0x2d9945(0x309)]['canBattlerMove']())return![];return _0x9c1fed['isSideView']();}}},Window_Options[_0x579382(0x448)][_0x579382(0xabe)]=function(){const _0x35427d=_0x579382,_0x11eede=VisuMZ[_0x35427d(0x675)][_0x35427d(0x27f)]['AutoBattle'],_0x4e5d37=this['getConfigValue'](_0x35427d(0xac6));return _0x4e5d37?_0x11eede[_0x35427d(0x640)]:_0x11eede['StyleOFF'];},Window_ShopStatus[_0x579382(0x448)][_0x579382(0xbe0)]=function(){const _0x338930=_0x579382,_0x3fef05=DataManager[_0x338930(0x1dc)](this[_0x338930(0x4f0)]),_0x38ef50=VisuMZ['DamageStyles'][_0x3fef05];if(!_0x38ef50)return this[_0x338930(0x949)]();const _0x2327a0='DamageType%1'[_0x338930(0x7e1)](this[_0x338930(0x4f0)][_0x338930(0x210)][_0x338930(0x3e4)]),_0x46d6ec=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item']['damage'][_0x338930(0x3e4)]];return _0x38ef50[_0x2327a0][_0x338930(0x7e1)](_0x46d6ec);},Window_ShopStatus[_0x579382(0x448)][_0x579382(0xabf)]=function(){const _0x57de05=_0x579382,_0x808d6d=DataManager[_0x57de05(0x1dc)](this[_0x57de05(0x4f0)]),_0x2bbcf8=VisuMZ[_0x57de05(0x87d)][_0x808d6d];if(!_0x2bbcf8)return this[_0x57de05(0x30c)]();return _0x2bbcf8[_0x57de05(0x2e8)][_0x57de05(0xb95)](this);},VisuMZ['BattleCore'][_0x579382(0x750)]=Window_PartyCommand[_0x579382(0x448)]['initialize'],Window_PartyCommand[_0x579382(0x448)][_0x579382(0x921)]=function(_0x5da80a){const _0x3abe71=_0x579382;VisuMZ['BattleCore']['Window_PartyCommand_initialize'][_0x3abe71(0xb95)](this,_0x5da80a),this[_0x3abe71(0xb79)](_0x5da80a);},Window_PartyCommand[_0x579382(0x448)][_0x579382(0xb79)]=function(_0x1f19f8){const _0x1392ef=_0x579382,_0x3ea63f=new Rectangle(0x0,0x0,_0x1f19f8[_0x1392ef(0x259)],_0x1f19f8[_0x1392ef(0x5ac)]);this[_0x1392ef(0xacc)]=new Window_Base(_0x3ea63f),this['_commandNameWindow']['opacity']=0x0,this[_0x1392ef(0xbb0)](this['_commandNameWindow']),this['updateCommandNameWindow']();},Window_PartyCommand['prototype'][_0x579382(0x2ea)]=function(){const _0x42358e=_0x579382;Window_Command[_0x42358e(0x448)][_0x42358e(0x2ea)]['call'](this);if(this[_0x42358e(0xacc)])this[_0x42358e(0x483)]();},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x483)]=function(){const _0x4c1aeb=_0x579382,_0x4f123b=this['_commandNameWindow'];_0x4f123b['contents'][_0x4c1aeb(0x3f1)]();const _0xec39fc=this['commandStyleCheck'](this[_0x4c1aeb(0x7ca)]());if(_0xec39fc==='icon'&&this['maxItems']()>0x0){const _0x69b385=this['itemLineRect'](this[_0x4c1aeb(0x7ca)]());let _0x2eb4a3=this[_0x4c1aeb(0x55a)](this[_0x4c1aeb(0x7ca)]());_0x2eb4a3=_0x2eb4a3[_0x4c1aeb(0xc42)](/\\I\[(\d+)\]/gi,''),_0x4f123b[_0x4c1aeb(0x3a3)](),this[_0x4c1aeb(0x592)](_0x2eb4a3,_0x69b385),this[_0x4c1aeb(0x221)](_0x2eb4a3,_0x69b385),this['commandNameWindowCenter'](_0x2eb4a3,_0x69b385);}},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x592)]=function(_0x1038bb,_0x48a73a){},Window_PartyCommand['prototype'][_0x579382(0x221)]=function(_0x58f756,_0x4e0126){const _0x1d9f7d=_0x579382,_0x1c5653=this[_0x1d9f7d(0xacc)];_0x1c5653['drawText'](_0x58f756,0x0,_0x4e0126['y'],_0x1c5653[_0x1d9f7d(0x7ea)],_0x1d9f7d(0xc13));},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x4ec)]=function(_0x58abf8,_0x37e839){const _0x492409=_0x579382,_0x47e491=this[_0x492409(0xacc)],_0x4d4403=$gameSystem[_0x492409(0x290)](),_0x5b3b14=_0x37e839['x']+Math['floor'](_0x37e839['width']/0x2)+_0x4d4403;_0x47e491['x']=_0x47e491[_0x492409(0x259)]/-0x2+_0x5b3b14,_0x47e491['y']=Math[_0x492409(0x51f)](_0x37e839['height']/0x2);},Window_PartyCommand['prototype'][_0x579382(0x94d)]=function(){const _0x24fe40=_0x579382;this['addFightCommand'](),this[_0x24fe40(0x279)](),this[_0x24fe40(0x9e3)](),this[_0x24fe40(0x479)](),this[_0x24fe40(0x385)]();},Window_PartyCommand[_0x579382(0x448)]['addFightCommand']=function(){const _0x41d653=_0x579382,_0x3da2d6=this[_0x41d653(0xaeb)](),_0x210bd5=VisuMZ[_0x41d653(0x675)][_0x41d653(0x27f)][_0x41d653(0x2f8)][_0x41d653(0x3bd)],_0x282ecd=_0x3da2d6==='text'?TextManager['fight']:_0x41d653(0xca2)[_0x41d653(0x7e1)](_0x210bd5,TextManager[_0x41d653(0x719)]),_0x5c4060=this['isFightCommandEnabled']();this[_0x41d653(0x3ff)](_0x282ecd,'fight',_0x5c4060);},Window_PartyCommand['prototype']['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x579382(0x448)]['addAutoBattleCommand']=function(){const _0x5e72ef=_0x579382;if(!this['isAutoBattleCommandAdded']())return;const _0x83e9cb=this[_0x5e72ef(0xaeb)](),_0x76051c=VisuMZ['BattleCore']['Settings'][_0x5e72ef(0x2f8)][_0x5e72ef(0x899)],_0x4e610b=_0x83e9cb===_0x5e72ef(0x721)?TextManager['autoBattle']:_0x5e72ef(0xca2)[_0x5e72ef(0x7e1)](_0x76051c,TextManager[_0x5e72ef(0x67a)]),_0xe1e49=this[_0x5e72ef(0x91d)]();this[_0x5e72ef(0x3ff)](_0x4e610b,_0x5e72ef(0x67a),_0xe1e49);},Window_PartyCommand['prototype'][_0x579382(0x9bb)]=function(){const _0xfcdd1d=_0x579382;return VisuMZ[_0xfcdd1d(0x675)][_0xfcdd1d(0x27f)][_0xfcdd1d(0x2f8)][_0xfcdd1d(0x56c)];},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x91d)]=function(){return!![];},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x9e3)]=function(){},Window_PartyCommand['prototype'][_0x579382(0x479)]=function(){const _0x43ff54=_0x579382;if(!this[_0x43ff54(0x3a6)]())return;const _0x5e95e2=this['commandStyle'](),_0x1a3a11=VisuMZ[_0x43ff54(0x675)][_0x43ff54(0x27f)][_0x43ff54(0x2f8)][_0x43ff54(0x6a2)],_0x33c6d1=_0x5e95e2===_0x43ff54(0x721)?TextManager[_0x43ff54(0xaad)]:_0x43ff54(0xca2)[_0x43ff54(0x7e1)](_0x1a3a11,TextManager[_0x43ff54(0xaad)]),_0x114b6f=this['isOptionsCommandEnabled']();this[_0x43ff54(0x3ff)](_0x33c6d1,_0x43ff54(0xaad),_0x114b6f);},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x3a6)]=function(){const _0x1ea715=_0x579382;return VisuMZ[_0x1ea715(0x675)][_0x1ea715(0x27f)][_0x1ea715(0x2f8)]['CommandAddOptions'];},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x351)]=function(){return!![];},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x385)]=function(){const _0x12e9b9=_0x579382,_0x23f049=this['commandStyle'](),_0x11e2c9=VisuMZ[_0x12e9b9(0x675)]['Settings']['PartyCmd'][_0x12e9b9(0xaff)],_0x63bb9e=_0x23f049===_0x12e9b9(0x721)?TextManager[_0x12e9b9(0x951)]:_0x12e9b9(0xca2)[_0x12e9b9(0x7e1)](_0x11e2c9,TextManager['escape']),_0x444884=this[_0x12e9b9(0x4d4)]();this['addCommand'](_0x63bb9e,'escape',_0x444884);},Window_PartyCommand[_0x579382(0x448)]['isEscapeCommandEnabled']=function(){const _0x1f666d=_0x579382;return BattleManager[_0x1f666d(0x419)]();},Window_PartyCommand['prototype'][_0x579382(0x7f4)]=function(){const _0x55a819=_0x579382;return VisuMZ['BattleCore'][_0x55a819(0x27f)][_0x55a819(0x2f8)]['CmdTextAlign'];},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x4ea)]=function(_0x172a73){const _0x5bdb77=_0x579382,_0xb2447a=this[_0x5bdb77(0x4b5)](_0x172a73);if(_0xb2447a===_0x5bdb77(0xb7d))this[_0x5bdb77(0x4ca)](_0x172a73);else _0xb2447a==='icon'?_0x5bdb77(0xa2c)===_0x5bdb77(0xb82)?_0x4ec8c6=_0x576d31['CastCertain']:this['drawItemStyleIcon'](_0x172a73):Window_Command[_0x5bdb77(0x448)]['drawItem'][_0x5bdb77(0xb95)](this,_0x172a73);},Window_PartyCommand['prototype'][_0x579382(0xaeb)]=function(){const _0x45d0f6=_0x579382;return VisuMZ[_0x45d0f6(0x675)][_0x45d0f6(0x27f)]['PartyCmd'][_0x45d0f6(0x42c)];},Window_PartyCommand['prototype']['commandStyleCheck']=function(_0x39c748){const _0x5507bc=_0x579382;if(_0x39c748<0x0)return _0x5507bc(0x721);const _0x53e233=this[_0x5507bc(0xaeb)]();if(_0x53e233!==_0x5507bc(0xc53))return _0x53e233;else{if(this[_0x5507bc(0xc87)]()>0x0){if('Lmmmj'===_0x5507bc(0x568)){const _0x496106=this[_0x5507bc(0x55a)](_0x39c748);if(_0x496106[_0x5507bc(0x299)](/\\I\[(\d+)\]/i)){if(_0x5507bc(0xb4a)==='yvqAU'){if(!_0x4fe137[_0x5507bc(0x1e8)]()){const _0x5d6783=_0x2045e4['regionId'](_0x133d57['x'],_0x258bad['y']);if(this['_regionBattleback1']&&this[_0x5507bc(0x5d0)][_0x5d6783])return this['_regionBattleback1'][_0x5d6783];}return _0x50bdb9['BattleCore'][_0x5507bc(0x961)][_0x5507bc(0xb95)](this);}else{const _0x2f5b3b=this[_0x5507bc(0x54e)](_0x39c748),_0x2be9c2=this[_0x5507bc(0x694)](_0x496106)[_0x5507bc(0x259)];if(_0x2be9c2<=_0x2f5b3b[_0x5507bc(0x259)]){if(_0x5507bc(0xbab)===_0x5507bc(0xbb7)){const _0x14c5bb=_0x28cb5b[_0x5507bc(0x270)]();this[_0x5507bc(0x226)](_0x5507bc(0x2cc),_0x45a3f8,[_0x4e87e4],_0x14c5bb[_0x5507bc(0x944)]);}else return _0x5507bc(0xb7d);}else return _0x5507bc(0x877);}}}else{const _0x46917a=_0x25cd0a['VisuMZ_1_SkillsStatesCore']?_0x5b17e5[_0x5507bc(0xc88)][_0x5507bc(0x27f)][_0x5507bc(0x645)]:_0x560c91[_0x5507bc(0x675)][_0x5507bc(0x27f)]['ActorCmd'],_0x3d05c2=_0x392b33[_0x5507bc(0xc85)][_0x5507bc(0xb2b)](_0x2cc069),_0x4b43f6=_0x3d05c2?_0x46917a[_0x5507bc(0x7eb)]:_0x46917a['IconStypeNorm'];_0xce58ba=_0x5507bc(0xca2)[_0x5507bc(0x7e1)](_0x4b43f6,_0x16c3a8);}}}return _0x5507bc(0x721);},Window_PartyCommand['prototype'][_0x579382(0x4ca)]=function(_0x3abd67){const _0x54b9e9=_0x579382,_0x5255d1=this[_0x54b9e9(0x54e)](_0x3abd67),_0x1e95fe=this['commandName'](_0x3abd67),_0x3de0e9=this[_0x54b9e9(0x694)](_0x1e95fe)['width'];this[_0x54b9e9(0x904)](this[_0x54b9e9(0x2a9)](_0x3abd67));const _0x4e3c7d=this[_0x54b9e9(0x7f4)]();if(_0x4e3c7d===_0x54b9e9(0x2d5))this[_0x54b9e9(0xadf)](_0x1e95fe,_0x5255d1['x']+_0x5255d1[_0x54b9e9(0x259)]-_0x3de0e9,_0x5255d1['y'],_0x3de0e9);else{if(_0x4e3c7d===_0x54b9e9(0xc13)){const _0x56a784=_0x5255d1['x']+Math['floor']((_0x5255d1[_0x54b9e9(0x259)]-_0x3de0e9)/0x2);this['drawTextEx'](_0x1e95fe,_0x56a784,_0x5255d1['y'],_0x3de0e9);}else this['drawTextEx'](_0x1e95fe,_0x5255d1['x'],_0x5255d1['y'],_0x3de0e9);}},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x8d3)]=function(_0x15290b){const _0x2a82d5=_0x579382;this[_0x2a82d5(0x55a)](_0x15290b)['match'](/\\I\[(\d+)\]/i);const _0x55a36b=Number(RegExp['$1'])||0x0,_0x285cbc=this['itemLineRect'](_0x15290b),_0x50b1aa=_0x285cbc['x']+Math[_0x2a82d5(0x51f)]((_0x285cbc[_0x2a82d5(0x259)]-ImageManager[_0x2a82d5(0x858)])/0x2),_0x3445c2=_0x285cbc['y']+(_0x285cbc[_0x2a82d5(0x5ac)]-ImageManager[_0x2a82d5(0xb62)])/0x2;this[_0x2a82d5(0x78d)](_0x55a36b,_0x50b1aa,_0x3445c2);},Window_PartyCommand[_0x579382(0x448)]['hide']=function(){},Window_PartyCommand['prototype'][_0x579382(0x478)]=function(){const _0x527d96=_0x579382;Window_Command[_0x527d96(0x448)][_0x527d96(0x478)][_0x527d96(0xb95)](this);const _0x8e98ed=this[_0x527d96(0x796)]();_0x8e98ed===_0x527d96(0x5d8)&&this[_0x527d96(0x94e)]();},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x796)]=function(){const _0x34c076=_0x579382;if(this[_0x34c076(0x60a)])return this[_0x34c076(0x60a)];return this[_0x34c076(0x60a)]=SceneManager['_scene']['battleLayoutStyle'](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x579382(0x448)][_0x579382(0x9d8)]=function(){const _0x4d9f67=_0x579382,_0x4e9d64=VisuMZ[_0x4d9f67(0x675)][_0x4d9f67(0x27f)][_0x4d9f67(0x2f8)],_0x51d195=this[_0x4d9f67(0x911)]();switch(_0x51d195){case'fight':this['_helpWindow'][_0x4d9f67(0x73f)](_0x4e9d64['HelpFight']);break;case'autoBattle':this[_0x4d9f67(0x957)][_0x4d9f67(0x73f)](_0x4e9d64[_0x4d9f67(0x8b8)]);break;case _0x4d9f67(0xaad):this[_0x4d9f67(0x957)][_0x4d9f67(0x73f)](_0x4e9d64[_0x4d9f67(0x62e)]);break;case'escape':this[_0x4d9f67(0x957)][_0x4d9f67(0x73f)](_0x4e9d64[_0x4d9f67(0x595)]);break;default:this['_helpWindow']['setText']('');break;}},VisuMZ[_0x579382(0x675)][_0x579382(0x4a1)]=Window_ActorCommand['prototype'][_0x579382(0x921)],Window_ActorCommand['prototype'][_0x579382(0x921)]=function(_0x3fd276){const _0x28c752=_0x579382;VisuMZ['BattleCore']['Window_ActorCommand_initialize'][_0x28c752(0xb95)](this,_0x3fd276),this['createCommandNameWindow'](_0x3fd276);},Window_ActorCommand['prototype'][_0x579382(0xb79)]=function(_0x4b823a){const _0x5f50f9=_0x579382,_0x207783=new Rectangle(0x0,0x0,_0x4b823a[_0x5f50f9(0x259)],_0x4b823a[_0x5f50f9(0x5ac)]);this[_0x5f50f9(0xacc)]=new Window_Base(_0x207783),this[_0x5f50f9(0xacc)][_0x5f50f9(0xcbd)]=0x0,this[_0x5f50f9(0xbb0)](this[_0x5f50f9(0xacc)]),this['updateCommandNameWindow']();},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x2ea)]=function(){const _0x41fdee=_0x579382;Window_Command[_0x41fdee(0x448)][_0x41fdee(0x2ea)][_0x41fdee(0xb95)](this);if(this[_0x41fdee(0xacc)])this[_0x41fdee(0x483)]();},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x483)]=function(){const _0x1d8097=_0x579382,_0x250157=this[_0x1d8097(0xacc)];_0x250157['contents'][_0x1d8097(0x3f1)]();const _0x3deecb=this[_0x1d8097(0x4b5)](this[_0x1d8097(0x7ca)]());if(_0x3deecb===_0x1d8097(0x877)&&this[_0x1d8097(0xc87)]()>0x0){if(_0x1d8097(0xb57)!==_0x1d8097(0xb57)){if(this['_cache'][_0x1d8097(0x648)]!==_0x57bbaf)return this[_0x1d8097(0x685)][_0x1d8097(0x648)];let _0x32e25b=_0x1e5b6b[_0x1d8097(0x675)][_0x1d8097(0x27f)]['Damage'][_0x1d8097(0x260)];const _0x394023=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0xa8771a=this[_0x1d8097(0x2bf)]()[_0x1d8097(0xb6e)](_0x197ca5=>_0x197ca5&&_0x197ca5[_0x1d8097(0x560)][_0x1d8097(0x299)](_0x394023)?_0x5cc2ec(_0x260689['$1'])/0x64:0x0);return _0x32e25b=_0xa8771a[_0x1d8097(0x3ad)]((_0x2aba97,_0x5f17f5)=>_0x2aba97+_0x5f17f5,_0x32e25b),this[_0x1d8097(0x685)][_0x1d8097(0x648)]=_0x32e25b,this['_cache']['softDamageCap']['clamp'](0.01,0x1);}else{const _0x2fbf0c=this[_0x1d8097(0x54e)](this['index']());let _0x342894=this[_0x1d8097(0x55a)](this[_0x1d8097(0x7ca)]());_0x342894=_0x342894[_0x1d8097(0xc42)](/\\I\[(\d+)\]/gi,''),_0x250157[_0x1d8097(0x3a3)](),this['commandNameWindowDrawBackground'](_0x342894,_0x2fbf0c),this[_0x1d8097(0x221)](_0x342894,_0x2fbf0c),this[_0x1d8097(0x4ec)](_0x342894,_0x2fbf0c);}}},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x592)]=function(_0x574e16,_0x59aedf){},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x221)]=function(_0x1e3cef,_0x3042d6){const _0xdab16e=_0x579382,_0x38601c=this[_0xdab16e(0xacc)];_0x38601c[_0xdab16e(0x8ac)](_0x1e3cef,0x0,_0x3042d6['y'],_0x38601c['innerWidth'],_0xdab16e(0xc13));},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x4ec)]=function(_0x3241b2,_0x11dd02){const _0x2c74a1=_0x579382,_0x4ab28a=this['_commandNameWindow'],_0x3a0a39=$gameSystem[_0x2c74a1(0x290)](),_0x4306d4=_0x11dd02['x']+Math['floor'](_0x11dd02[_0x2c74a1(0x259)]/0x2)+_0x3a0a39;_0x4ab28a['x']=_0x4ab28a[_0x2c74a1(0x259)]/-0x2+_0x4306d4,_0x4ab28a['y']=Math[_0x2c74a1(0x51f)](_0x11dd02[_0x2c74a1(0x5ac)]/0x2);},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x94d)]=function(){const _0x4dd551=_0x579382;if(!this[_0x4dd551(0x6f5)])return;const _0x5a2926=this[_0x4dd551(0x6f5)][_0x4dd551(0x465)]();for(const _0xc9cc8a of _0x5a2926){if(_0x4dd551(0x99f)==='dnjnL')this[_0x4dd551(0x9f7)](_0xc9cc8a['toUpperCase']()[_0x4dd551(0x8f5)]());else return _0xc3edd8['friendsUnit']()['aliveMembers']();}},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x9f7)]=function(_0x3a1310){const _0x2dd8e3=_0x579382;_0x3a1310===_0x2dd8e3(0x572)&&this[_0x2dd8e3(0xab7)]();[_0x2dd8e3(0x40f),_0x2dd8e3(0x2a3)][_0x2dd8e3(0xb2b)](_0x3a1310)&&this[_0x2dd8e3(0x420)]();if(_0x3a1310===_0x2dd8e3(0x89c)){if(_0x2dd8e3(0x986)===_0x2dd8e3(0x986))this[_0x2dd8e3(0x38f)]();else{const _0x3f863e=_0xb07677['BattleCore'][_0x2dd8e3(0x27f)];if(this[_0x2dd8e3(0x622)]===_0x2ad156)_0x1b82b2+=_0x3f863e[_0x2dd8e3(0x7b6)][_0x2dd8e3(0x906)]||0x0,_0x4a75c2+=_0x3f863e[_0x2dd8e3(0x7b6)][_0x2dd8e3(0xb3d)]||0x0;else this[_0x2dd8e3(0x622)]===_0x54f4c7&&(_0x1201d3+=_0x3f863e[_0x2dd8e3(0x8ff)]['OffsetX']||0x0,_0x303d43+=_0x3f863e['Enemy'][_0x2dd8e3(0xb3d)]||0x0);this[_0x2dd8e3(0x309)]&&(_0x4740ef=this[_0x2dd8e3(0x309)][_0x2dd8e3(0xad5)]??_0x54011b,_0x4562e1=this[_0x2dd8e3(0x309)][_0x2dd8e3(0x959)]??_0x4f48d5),_0xa207ec[_0x2dd8e3(0x675)][_0x2dd8e3(0x9d6)][_0x2dd8e3(0xb95)](this,_0x23c311,_0x24afcf),this[_0x2dd8e3(0x8ef)]=this[_0x2dd8e3(0x605)],this[_0x2dd8e3(0x6bd)]=this[_0x2dd8e3(0x486)],this[_0x2dd8e3(0x5b5)]=0x0,this[_0x2dd8e3(0x6b3)]=0x0,this[_0x2dd8e3(0x39a)]=_0x2dd8e3(0xc05);}}if(_0x3a1310===_0x2dd8e3(0xb7e)){if('YlVdH'!==_0x2dd8e3(0x70d))this[_0x2dd8e3(0xbdb)]();else{if(!this['_damageContainer'])return;if(!_0x453889)return;if(!_0x399586)return;const _0x3cca65=this[_0x2dd8e3(0xbbc)](_0x573079[_0x2dd8e3(0x7ca)]());_0x3cca65['x']+=_0x3cca65[_0x2dd8e3(0x259)]/0x2+this[_0x2dd8e3(0x443)],_0x3ef65b['x']=_0x3cca65['x'],_0x481d08['y']=_0x3cca65['y'],this[_0x2dd8e3(0x5be)][_0x2dd8e3(0xbb0)](_0xc7be70);}}_0x3a1310===_0x2dd8e3(0x649)&&(_0x2dd8e3(0x9aa)==='VAzYO'?this[_0x2dd8e3(0x549)]():this[_0x2dd8e3(0x385)]());_0x3a1310===_0x2dd8e3(0x69e)&&this['addAutoBattleCommand']();if(_0x3a1310[_0x2dd8e3(0x299)](/STYPE: (\d+)/i)){const _0x19dc7d=Number(RegExp['$1']);this[_0x2dd8e3(0x596)](_0x19dc7d);}else{if(_0x3a1310[_0x2dd8e3(0x299)](/STYPE: (.*)/i)){if(_0x2dd8e3(0xa9b)!==_0x2dd8e3(0xa9b))_0x3d7450[_0x2dd8e3(0x7b6)][_0x2dd8e3(0xabd)]=![];else{const _0x2009fa=DataManager[_0x2dd8e3(0x403)](RegExp['$1']);this['addSkillTypeCommand'](_0x2009fa);}}}_0x3a1310==='ALL\x20SKILLS'&&this[_0x2dd8e3(0x549)]();if(_0x3a1310['match'](/SKILL: (\d+)/i)){if(_0x2dd8e3(0x819)!==_0x2dd8e3(0x819))_0x2c8dd3[_0x2dd8e3(0x1d5)](_0x1dcb1a),[_0x2dd8e3(0x1bd),_0x2dd8e3(0x8f6),'missile']['includes'](_0x1b7317)&&this[_0x2dd8e3(0xb1b)]();else{const _0x40b45f=Number(RegExp['$1']);this[_0x2dd8e3(0xa73)]($dataSkills[_0x40b45f]);}}else{if(_0x3a1310[_0x2dd8e3(0x299)](/SKILL: (.*)/i)){if(_0x2dd8e3(0x8a6)!=='lCxsq')_0xe7c613+=_0x11b76e(_0x49815e['$2']);else{const _0x334218=DataManager[_0x2dd8e3(0x782)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x334218]);}}}_0x3a1310===_0x2dd8e3(0x7bd)&&Imported[_0x2dd8e3(0x5e3)]&&this[_0x2dd8e3(0x64b)](),['COMBATLOG',_0x2dd8e3(0xc99)][_0x2dd8e3(0xb2b)](_0x3a1310)&&Imported[_0x2dd8e3(0x4d3)]&&this[_0x2dd8e3(0xa66)](),_0x3a1310===_0x2dd8e3(0x281)&&Imported[_0x2dd8e3(0x8c3)]&&this[_0x2dd8e3(0x891)](!![]);},Window_ActorCommand[_0x579382(0x448)]['addAttackCommand']=function(){const _0x3a8d80=_0x579382,_0x3b46d1=$dataSkills[this[_0x3a8d80(0x6f5)][_0x3a8d80(0xa60)]()];if(!_0x3b46d1)return;if(!this[_0x3a8d80(0xaa1)](_0x3b46d1))return;const _0x8a0655=this[_0x3a8d80(0xaeb)](),_0x53f3c0=DataManager['battleCommandName'](_0x3b46d1),_0x17d831=DataManager[_0x3a8d80(0x3b9)](_0x3b46d1),_0x18e3a3=_0x8a0655==='text'?_0x53f3c0:'\x5cI[%1]%2'['format'](_0x17d831,_0x53f3c0);this[_0x3a8d80(0x3ff)](_0x18e3a3,'attack',this[_0x3a8d80(0x6f5)][_0x3a8d80(0x201)]());},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x38f)]=function(){const _0x1d31b5=_0x579382,_0x399228=$dataSkills[this[_0x1d31b5(0x6f5)][_0x1d31b5(0x49b)]()];if(!_0x399228)return;if(!this[_0x1d31b5(0xaa1)](_0x399228))return;const _0xdfb9e6=this[_0x1d31b5(0xaeb)](),_0x1f6afd=DataManager[_0x1d31b5(0x6c7)](_0x399228),_0x2dd2ca=DataManager['battleCommandIcon'](_0x399228),_0x357af0=_0xdfb9e6==='text'?_0x1f6afd:_0x1d31b5(0xca2)[_0x1d31b5(0x7e1)](_0x2dd2ca,_0x1f6afd);this[_0x1d31b5(0x3ff)](_0x357af0,_0x1d31b5(0x947),this[_0x1d31b5(0x6f5)][_0x1d31b5(0xaa8)]());},Window_ActorCommand['prototype'][_0x579382(0xbdb)]=function(){const _0x111fe0=_0x579382,_0x2d9bf3=this[_0x111fe0(0xaeb)](),_0x3e544d=VisuMZ[_0x111fe0(0x675)][_0x111fe0(0x27f)]['ActorCmd']['CmdIconItem'],_0xe9365=_0x2d9bf3===_0x111fe0(0x721)?TextManager['item']:_0x111fe0(0xca2)['format'](_0x3e544d,TextManager[_0x111fe0(0x270)]),_0x661b2=this[_0x111fe0(0x41b)]();this[_0x111fe0(0x3ff)](_0xe9365,'item',_0x661b2);},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x41b)]=function(){const _0x273fcc=_0x579382;return this[_0x273fcc(0x6f5)]&&this[_0x273fcc(0x6f5)][_0x273fcc(0x6ec)]();},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x420)]=function(){const _0x296e1c=_0x579382,_0x181911=this[_0x296e1c(0x6f5)][_0x296e1c(0x706)]();for(const _0x271662 of _0x181911){this[_0x296e1c(0x596)](_0x271662);}},Window_ActorCommand['prototype'][_0x579382(0x596)]=function(_0xec72b7){const _0x3f4831=_0x579382;let _0xc5fe55=$dataSystem[_0x3f4831(0x706)][_0xec72b7];if(!_0xc5fe55)return;let _0x4a0f8c=_0xc5fe55;const _0x7bb486=this[_0x3f4831(0xaeb)]();if(_0x7bb486===_0x3f4831(0x721))_0x3f4831(0x58a)===_0x3f4831(0x58a)?(_0x4a0f8c=_0x4a0f8c['replace'](/\x1I\[(\d+)\]/gi,''),_0x4a0f8c=_0x4a0f8c[_0x3f4831(0xc42)](/\\I\[(\d+)\]/gi,'')):this['addChild'](this[_0x3f4831(0x2da)]);else{if(!_0xc5fe55[_0x3f4831(0x299)](/\\I\[(\d+)\]/i)){const _0x2c528e=Imported[_0x3f4831(0xc59)]?VisuMZ[_0x3f4831(0xc88)][_0x3f4831(0x27f)][_0x3f4831(0x645)]:VisuMZ[_0x3f4831(0x675)][_0x3f4831(0x27f)]['ActorCmd'],_0x122df9=$dataSystem[_0x3f4831(0xc85)][_0x3f4831(0xb2b)](_0xec72b7),_0x20807=_0x122df9?_0x2c528e[_0x3f4831(0x7eb)]:_0x2c528e[_0x3f4831(0x400)];_0x4a0f8c=_0x3f4831(0xca2)[_0x3f4831(0x7e1)](_0x20807,_0xc5fe55);}}this[_0x3f4831(0x3ff)](_0x4a0f8c,'skill',!![],_0xec72b7);},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x549)]=function(){const _0x326968=_0x579382,_0x5b8827=this['_actor'][_0x326968(0x706)](),_0xaf5683=this[_0x326968(0x6f5)][_0x326968(0x8e9)]();for(const _0x4705f4 of _0xaf5683){if(!_0x4705f4)continue;if(Imported[_0x326968(0xc59)]){if(_0x326968(0x331)!==_0x326968(0x25a)){if(this[_0x326968(0x2fe)](_0x4705f4))continue;if(this['isHiddenSkill'](_0x4705f4))continue;}else this[_0x326968(0x5e7)](![]),this[_0x326968(0xad5)]=_0x539e0d,this[_0x326968(0x959)]=_0x5533c9;}else{if(!_0x5b8827[_0x326968(0xb2b)](_0x4705f4['stypeId']))continue;}this['addSingleSkillCommand'](_0x4705f4);}},Window_ActorCommand['prototype']['noSimilarSTypes']=function(_0x294c18){const _0x3f013f=_0x579382,_0x10b36c=this[_0x3f013f(0x6f5)][_0x3f013f(0x706)](),_0x228bd2=_0x10b36c[_0x3f013f(0xa1c)](_0x3264a6=>DataManager[_0x3f013f(0x6af)](_0x294c18)[_0x3f013f(0xb2b)](_0x3264a6));return _0x228bd2['length']<=0x0;},Window_ActorCommand[_0x579382(0x448)][_0x579382(0xa53)]=function(_0x4dedff){const _0x36dcec=_0x579382;if(Imported[_0x36dcec(0xc59)]){if(VisuMZ[_0x36dcec(0xc88)][_0x36dcec(0x240)]>=1.24){if(this['_actor']){if(!VisuMZ[_0x36dcec(0xc88)][_0x36dcec(0x988)](this[_0x36dcec(0x6f5)],_0x4dedff))return!![];if(!VisuMZ[_0x36dcec(0xc88)][_0x36dcec(0x28e)](this[_0x36dcec(0x6f5)],_0x4dedff))return!![];if(!VisuMZ['SkillsStatesCore'][_0x36dcec(0x317)](this['_actor'],_0x4dedff))return!![];}}else{if(!Window_SkillList[_0x36dcec(0x448)][_0x36dcec(0x643)]['call'](this,_0x4dedff))return!![];if(!Window_SkillList[_0x36dcec(0x448)][_0x36dcec(0x6f4)][_0x36dcec(0xb95)](this,_0x4dedff))return!![];if(!Window_SkillList[_0x36dcec(0x448)]['checkShowHideSkillNotetags'][_0x36dcec(0xb95)](this,_0x4dedff))return!![];}}return![];},Window_ActorCommand[_0x579382(0x448)][_0x579382(0xa73)]=function(_0x2f5dfd){const _0x2ea946=_0x579382;if(!_0x2f5dfd)return;if(!this[_0x2ea946(0xaa1)](_0x2f5dfd))return;const _0x3af972=this[_0x2ea946(0xaeb)](),_0x1ee5d7=DataManager[_0x2ea946(0x6c7)](_0x2f5dfd),_0x527b16=DataManager[_0x2ea946(0x3b9)](_0x2f5dfd),_0x3ca2bc=_0x3af972==='text'?_0x1ee5d7:_0x2ea946(0xca2)['format'](_0x527b16,_0x1ee5d7),_0x3b0618=this['_actor'][_0x2ea946(0x9ce)](_0x2f5dfd);this['addCommand'](_0x3ca2bc,_0x2ea946(0xa45),_0x3b0618,_0x2f5dfd['id']);},Window_ActorCommand[_0x579382(0x448)][_0x579382(0xaa1)]=function(_0x5dc2f1){const _0x56a2db=_0x579382,_0x20a10b=_0x5dc2f1[_0x56a2db(0x560)];if(_0x20a10b[_0x56a2db(0x299)](/<COMMAND REQUIRE LEARN>/i)){if(_0x56a2db(0x34c)===_0x56a2db(0x54d))for(const _0x14590e of _0x3560bb){const _0xac3359=_0x5e6312[0x0][_0x56a2db(0x7e1)](_0x14590e[0x0]),_0x21aecd=_0x185e4e[0x1][_0x56a2db(0x7e1)](_0x14590e[0x1]),_0x22308a=new _0x5ab81e(_0x38627a[_0x56a2db(0x7e1)](_0x21aecd),'i');_0x1e1e83[_0xac3359]=_0x22308a;}else{if(!this['_actor'][_0x56a2db(0x930)](_0x5dc2f1['id']))return![];}}if(_0x20a10b[_0x56a2db(0x299)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x56a2db(0x6f5)]['hasSkill'](_0x5dc2f1['id']))return![];}const _0x323188=VisuMZ[_0x56a2db(0x675)][_0x56a2db(0x6da)](_0x5dc2f1,_0x56a2db(0xac1));if(VisuMZ[_0x56a2db(0x675)]['JS'][_0x323188]){if(_0x56a2db(0x6db)===_0x56a2db(0xb06))_0x5a503d[_0x56a2db(0x560)]+=_0x56a2db(0xcab);else{if(!VisuMZ['BattleCore']['JS'][_0x323188][_0x56a2db(0xb95)](this,this[_0x56a2db(0x6f5)],_0x5dc2f1))return![];}}return VisuMZ[_0x56a2db(0x675)][_0x56a2db(0x2b8)](_0x5dc2f1);},VisuMZ[_0x579382(0x675)][_0x579382(0x2b8)]=function(_0x11a162){const _0x20e1be=_0x579382,_0x4c6eae=_0x11a162[_0x20e1be(0x560)];if(_0x4c6eae['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x43cb22=JSON[_0x20e1be(0x6d7)]('['+RegExp['$1'][_0x20e1be(0x299)](/\d+/g)+']');for(const _0x84c9e1 of _0x43cb22){if('qQfbl'===_0x20e1be(0x4f7)){if(!$gameSwitches[_0x20e1be(0x1bc)](_0x84c9e1))return![];}else _0x1c1f5d[_0x20e1be(0x226)](_0x4c96b5(_0x4794f7['$1']));}return!![];}if(_0x4c6eae[_0x20e1be(0x299)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x557800=JSON[_0x20e1be(0x6d7)]('['+RegExp['$1'][_0x20e1be(0x299)](/\d+/g)+']');for(const _0x5b0144 of _0x557800){if(_0x20e1be(0x66b)===_0x20e1be(0x485))_0x3a4601=_0x20e1be(0x2d5);else{if(!$gameSwitches['value'](_0x5b0144))return![];}}return!![];}if(_0x4c6eae[_0x20e1be(0x299)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('dilrC'!==_0x20e1be(0x4a4))this['_onceParallelInterpreters']=[];else{const _0x12c066=JSON['parse']('['+RegExp['$1'][_0x20e1be(0x299)](/\d+/g)+']');for(const _0x29c873 of _0x12c066){if($gameSwitches[_0x20e1be(0x1bc)](_0x29c873))return!![];}return![];}}if(_0x4c6eae[_0x20e1be(0x299)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x9adb90=JSON[_0x20e1be(0x6d7)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x57fd5a of _0x9adb90){if(_0x20e1be(0xbd6)===_0x20e1be(0xad9)){if(this[_0x20e1be(0x611)]())this[_0x20e1be(0x2c6)][_0x20e1be(0x7ba)](_0x548eb4);}else{if(!$gameSwitches[_0x20e1be(0x1bc)](_0x57fd5a))return!![];}}return![];}if(_0x4c6eae['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x517cd7=JSON[_0x20e1be(0x6d7)]('['+RegExp['$1'][_0x20e1be(0x299)](/\d+/g)+']');for(const _0x1a5b36 of _0x517cd7){if(_0x20e1be(0x962)===_0x20e1be(0xb0d)){if(this[_0x20e1be(0x7be)]===_0x25195f)this[_0x20e1be(0x6fb)]();return this[_0x20e1be(0x7be)];}else{if(!$gameSwitches[_0x20e1be(0x1bc)](_0x1a5b36))return!![];}}return![];}if(_0x4c6eae[_0x20e1be(0x299)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x217135=JSON['parse']('['+RegExp['$1'][_0x20e1be(0x299)](/\d+/g)+']');for(const _0xdd8bac of _0x217135){if($gameSwitches[_0x20e1be(0x1bc)](_0xdd8bac))return![];}return!![];}return!![];},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x385)]=function(){const _0x5f11fd=_0x579382,_0x3f4d53=this[_0x5f11fd(0xaeb)](),_0x384d03=VisuMZ[_0x5f11fd(0x675)][_0x5f11fd(0x27f)][_0x5f11fd(0x2f8)][_0x5f11fd(0xaff)],_0x39a349=_0x3f4d53===_0x5f11fd(0x721)?TextManager[_0x5f11fd(0x951)]:_0x5f11fd(0xca2)[_0x5f11fd(0x7e1)](_0x384d03,TextManager['escape']),_0xc2be89=this['isEscapeCommandEnabled']();this['addCommand'](_0x39a349,_0x5f11fd(0x951),_0xc2be89);},Window_ActorCommand[_0x579382(0x448)]['isEscapeCommandEnabled']=function(){const _0x342147=_0x579382;return BattleManager[_0x342147(0x419)]();},Window_ActorCommand['prototype'][_0x579382(0x279)]=function(){const _0x93dd62=_0x579382,_0x65fbb7=this['commandStyle'](),_0x4e590a=VisuMZ[_0x93dd62(0x675)][_0x93dd62(0x27f)][_0x93dd62(0x2f8)][_0x93dd62(0x899)],_0xa122a8=_0x65fbb7===_0x93dd62(0x721)?TextManager['autoBattle']:_0x93dd62(0xca2)[_0x93dd62(0x7e1)](_0x4e590a,TextManager['autoBattle']),_0x157829=this[_0x93dd62(0x91d)]();this[_0x93dd62(0x3ff)](_0xa122a8,_0x93dd62(0x67a),_0x157829);},Window_ActorCommand[_0x579382(0x448)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x579382(0x448)]['itemTextAlign']=function(){const _0x3f4b8=_0x579382;return VisuMZ[_0x3f4b8(0x675)]['Settings'][_0x3f4b8(0x84a)][_0x3f4b8(0x9c3)];},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x4ea)]=function(_0x150958){const _0xc9686a=_0x579382,_0x25c081=this[_0xc9686a(0x4b5)](_0x150958);if(_0x25c081===_0xc9686a(0xb7d)){if('KmgBP'==='QIWnL'){const _0x34bc33=this[_0xc9686a(0x516)](_0x5d667a);return _0x34bc33==='autoBattleUseSkills'?this[_0xc9686a(0xabe)]():_0x5683ae[_0xc9686a(0x675)]['Window_Options_statusText'][_0xc9686a(0xb95)](this,_0x28825f);}else this[_0xc9686a(0x4ca)](_0x150958);}else{if(_0x25c081==='icon')this['drawItemStyleIcon'](_0x150958);else{if('zOOim'!==_0xc9686a(0x86c)){const _0x3cfff9=_0x43d39b[_0xc9686a(0x903)](_0x3e943d[_0xc9686a(0x2ed)]()['trim']());_0x3cfff9>=0x0&&_0x3cfff9<=0x7&&_0x60168b[_0xc9686a(0x1f9)](_0x3cfff9,_0x56dee6);}else Window_Command[_0xc9686a(0x448)]['drawItem'][_0xc9686a(0xb95)](this,_0x150958);}}this[_0xc9686a(0x6cd)](_0x150958);},Window_ActorCommand[_0x579382(0x448)][_0x579382(0xaeb)]=function(){const _0x3b6265=_0x579382;return VisuMZ[_0x3b6265(0x675)][_0x3b6265(0x27f)][_0x3b6265(0x84a)][_0x3b6265(0x42c)];},Window_ActorCommand['prototype'][_0x579382(0x4b5)]=function(_0x5b5f61){const _0x2db055=_0x579382;if(_0x5b5f61<0x0)return _0x2db055(0x721);const _0x19c7a8=this['commandStyle']();if(_0x19c7a8!==_0x2db055(0xc53)){if('eIVPo'==='eIVPo')return _0x19c7a8;else _0x455311[_0x2db055(0x675)]['Game_Party_addActor'][_0x2db055(0xb95)](this,_0x35f7f6),_0x3baeb0[_0x2db055(0x573)]();}else{if(this[_0x2db055(0xc87)]()>0x0){if(_0x2db055(0x72c)!==_0x2db055(0xbec)){const _0x17a3f5=this[_0x2db055(0x55a)](_0x5b5f61);if(_0x17a3f5[_0x2db055(0x299)](/\\I\[(\d+)\]/i)){const _0x4d1d6d=this['itemLineRect'](_0x5b5f61),_0x580922=this['textSizeEx'](_0x17a3f5)[_0x2db055(0x259)];return _0x580922<=_0x4d1d6d['width']?_0x2db055(0xb7d):_0x2db055(0x877);}}else _0x5e3c32[_0x2db055(0x8f7)](_0x44b079);}}return _0x2db055(0x721);},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x4ca)]=function(_0xd21ba1){const _0x2e6f17=_0x579382,_0xe8a5db=this['itemLineRect'](_0xd21ba1),_0x33f4e2=this[_0x2e6f17(0x55a)](_0xd21ba1),_0x66dbc4=this[_0x2e6f17(0x694)](_0x33f4e2)[_0x2e6f17(0x259)];this[_0x2e6f17(0x904)](this[_0x2e6f17(0x2a9)](_0xd21ba1));const _0x74e147=this[_0x2e6f17(0x7f4)]();if(_0x74e147===_0x2e6f17(0x2d5))_0x2e6f17(0xb26)!==_0x2e6f17(0xb26)?this[_0x2e6f17(0x8e0)]=_0x4ebd44:this['drawTextEx'](_0x33f4e2,_0xe8a5db['x']+_0xe8a5db[_0x2e6f17(0x259)]-_0x66dbc4,_0xe8a5db['y'],_0x66dbc4);else{if(_0x74e147===_0x2e6f17(0xc13)){const _0x5d3007=_0xe8a5db['x']+Math['floor']((_0xe8a5db[_0x2e6f17(0x259)]-_0x66dbc4)/0x2);this['drawTextEx'](_0x33f4e2,_0x5d3007,_0xe8a5db['y'],_0x66dbc4);}else this['drawTextEx'](_0x33f4e2,_0xe8a5db['x'],_0xe8a5db['y'],_0x66dbc4);}},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x8d3)]=function(_0x4acc1e){const _0x20406e=_0x579382;this[_0x20406e(0x55a)](_0x4acc1e)[_0x20406e(0x299)](/\\I\[(\d+)\]/i);const _0x215997=Number(RegExp['$1'])||0x0,_0xd71228=this[_0x20406e(0x54e)](_0x4acc1e),_0x2fbda6=_0xd71228['x']+Math[_0x20406e(0x51f)]((_0xd71228[_0x20406e(0x259)]-ImageManager[_0x20406e(0x858)])/0x2),_0x5065c7=_0xd71228['y']+(_0xd71228[_0x20406e(0x5ac)]-ImageManager[_0x20406e(0xb62)])/0x2;this[_0x20406e(0x78d)](_0x215997,_0x2fbda6,_0x5065c7);},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x6cd)]=function(_0xf4e0b7){const _0x34d3c5=_0x579382;if(!(VisuMZ['BattleCore'][_0x34d3c5(0x27f)]['ActorCmd'][_0x34d3c5(0x637)]??!![]))return;const _0xfda0ac=this[_0x34d3c5(0x516)](_0xf4e0b7);if(!['attack',_0x34d3c5(0x947),'singleSkill'][_0x34d3c5(0xb2b)](_0xfda0ac))return;const _0x5b43d6=this[_0x34d3c5(0x54e)](_0xf4e0b7);let _0x571480=null;if(_0xfda0ac===_0x34d3c5(0x509))_0x571480=$dataSkills[this[_0x34d3c5(0x6f5)][_0x34d3c5(0xa60)]()];else _0xfda0ac===_0x34d3c5(0x947)?_0x571480=$dataSkills[this[_0x34d3c5(0x6f5)][_0x34d3c5(0x49b)]()]:_0x571480=$dataSkills[this[_0x34d3c5(0x72f)][_0xf4e0b7][_0x34d3c5(0x5f1)]];this['drawSkillCost'](this['_actor'],_0x571480,_0x5b43d6['x'],_0x5b43d6['y'],_0x5b43d6[_0x34d3c5(0x259)]);},Window_ActorCommand['prototype']['drawSkillCost']=function(_0x514130,_0x54ee7a,_0x40b933,_0x2909c2,_0x2ee388){const _0x212c38=_0x579382;if(!_0x54ee7a)return;Imported[_0x212c38(0xc59)]?'Pxfcl'===_0x212c38(0xb2f)?(this[_0x212c38(0x226)]('pushBaseLine'),this[_0x212c38(0x265)](_0x3530ac),this[_0x212c38(0x936)](_0x3127ff),this[_0x212c38(0x226)](_0x212c38(0x262))):Window_Command[_0x212c38(0x448)][_0x212c38(0x47b)][_0x212c38(0xb95)](this,_0x514130,_0x54ee7a,_0x40b933,_0x2909c2,_0x2ee388):Window_SkillList[_0x212c38(0x448)][_0x212c38(0x47b)]['call'](this,_0x54ee7a,_0x40b933,_0x2909c2,_0x2ee388);},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x19b)]=function(){},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x478)]=function(){const _0x2905ac=_0x579382;Window_Command[_0x2905ac(0x448)][_0x2905ac(0x478)][_0x2905ac(0xb95)](this);const _0xf16d84=this['battleLayoutStyle']();_0xf16d84==='border'&&this[_0x2905ac(0x94e)]();},Window_ActorCommand[_0x579382(0x448)]['battleLayoutStyle']=function(){const _0x2e6d1d=_0x579382;if(this[_0x2e6d1d(0x60a)])return this[_0x2e6d1d(0x60a)];return this[_0x2e6d1d(0x60a)]=SceneManager['_scene'][_0x2e6d1d(0x796)](),this[_0x2e6d1d(0x60a)];},VisuMZ[_0x579382(0x675)][_0x579382(0x58f)]=Window_ActorCommand['prototype'][_0x579382(0x60d)],Window_ActorCommand[_0x579382(0x448)][_0x579382(0x60d)]=function(_0x40f18a){const _0x2d0e69=_0x579382,_0x1bc7e3=this[_0x2d0e69(0x796)]();if(_0x40f18a&&['xp','portrait'][_0x2d0e69(0xb2b)](_0x1bc7e3))this[_0x2d0e69(0x5ec)](_0x40f18a);else _0x40f18a&&[_0x2d0e69(0x5d8)][_0x2d0e69(0xb2b)](_0x1bc7e3)&&(this['resizeWindowBorderStyle'](_0x40f18a),this[_0x2d0e69(0x94e)]());VisuMZ[_0x2d0e69(0x675)]['Window_ActorCommand_setup'][_0x2d0e69(0xb95)](this,_0x40f18a),_0x40f18a&&$gameTroop[_0x2d0e69(0x3a1)]()['length']>0x0&&_0x40f18a[_0x2d0e69(0x368)]()&&_0x40f18a[_0x2d0e69(0x368)]()['stepForward']();},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x5ec)]=function(_0x41230c){const _0x55452a=_0x579382,_0x4bcc2a=Math[_0x55452a(0x78b)](Graphics[_0x55452a(0x77e)]/0x3),_0x40dff5=Math[_0x55452a(0x78b)](Graphics['boxWidth']/$gameParty[_0x55452a(0x203)]()['length']),_0x4b4482=Math[_0x55452a(0xabb)](_0x4bcc2a,_0x40dff5),_0x349a81=this['fittingHeight'](VisuMZ['BattleCore'][_0x55452a(0x27f)]['BattleLayout'][_0x55452a(0x19d)]),_0x5bcb09=Math[_0x55452a(0x78b)](_0x40dff5*_0x41230c['index']())+Math[_0x55452a(0x78b)]((_0x40dff5-_0x4b4482)/0x2),_0x4ad772=Math[_0x55452a(0x78b)](SceneManager['_scene'][_0x55452a(0xbcc)]['y']-_0x349a81);this['move'](_0x5bcb09,_0x4ad772,_0x4b4482,_0x349a81),this[_0x55452a(0x771)](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x256)]=function(_0x42dca0){const _0xb0daca=_0x579382,_0x4444aa=SceneManager[_0xb0daca(0xbc5)][_0xb0daca(0x7a3)]();this['move'](_0x4444aa['x'],_0x4444aa['y'],_0x4444aa[_0xb0daca(0x259)],_0x4444aa[_0xb0daca(0x5ac)]),this[_0xb0daca(0x771)](),this[_0xb0daca(0x38a)](0x0);},Window_ActorCommand[_0x579382(0x448)]['refreshDimmerBitmap']=function(){const _0x51ffd1=_0x579382;if(this['_dimmerSprite']){if(_0x51ffd1(0x545)!==_0x51ffd1(0x545)){if(!_0x1ba7c2[_0x51ffd1(0x1bc)](_0x3179af))return!![];}else{const _0x380e14=this[_0x51ffd1(0x85f)][_0x51ffd1(0x8c2)],_0xa91e2a=this[_0x51ffd1(0x259)]-0x8,_0x301291=this[_0x51ffd1(0x5ac)],_0x3af9a0=this['padding'],_0x901354=ColorManager[_0x51ffd1(0x8c0)](),_0x67540=ColorManager['dimColor2']();this[_0x51ffd1(0x85f)]['x']=0x4,_0x380e14[_0x51ffd1(0x869)](_0xa91e2a,_0x301291),_0x380e14[_0x51ffd1(0x6ff)](0x0,0x0,_0xa91e2a,_0x3af9a0,_0x67540,_0x901354,!![]),_0x380e14[_0x51ffd1(0x25b)](0x0,_0x3af9a0,_0xa91e2a,_0x301291-_0x3af9a0*0x2,_0x901354),_0x380e14[_0x51ffd1(0x6ff)](0x0,_0x301291-_0x3af9a0,_0xa91e2a,_0x3af9a0,_0x901354,_0x67540,!![]),this['_dimmerSprite'][_0x51ffd1(0xc57)](0x0,0x0,_0xa91e2a,_0x301291);}}},Window_ActorCommand[_0x579382(0x448)][_0x579382(0x9d8)]=function(){const _0x5c013f=_0x579382;if(!this[_0x5c013f(0x6f5)])return;const _0x1e7134=VisuMZ[_0x5c013f(0x675)]['Settings'][_0x5c013f(0x84a)],_0x36873d=this['currentSymbol']();switch(_0x36873d){case _0x5c013f(0x509):this[_0x5c013f(0x2df)]($dataSkills[this[_0x5c013f(0x6f5)][_0x5c013f(0xa60)]()]);break;case _0x5c013f(0x947):this[_0x5c013f(0x2df)]($dataSkills[this['_actor'][_0x5c013f(0x49b)]()]);break;case _0x5c013f(0x4cb):const _0x5dcc86=_0x1e7134[_0x5c013f(0xa3f)],_0x5aa677=_0x5dcc86[_0x5c013f(0x7e1)]($dataSystem[_0x5c013f(0x706)][this[_0x5c013f(0x218)]()]);this[_0x5c013f(0x957)][_0x5c013f(0x73f)](_0x5aa677);break;case _0x5c013f(0xa45):this['setHelpWindowItem']($dataSkills[this['currentExt']()]);break;case _0x5c013f(0x270):this[_0x5c013f(0x957)][_0x5c013f(0x73f)](_0x1e7134['HelpItem']);break;case'escape':this[_0x5c013f(0x957)]['setText'](_0x1e7134[_0x5c013f(0x595)]);break;case _0x5c013f(0x67a):this[_0x5c013f(0x957)][_0x5c013f(0x73f)](_0x1e7134['HelpAutoBattle']);break;default:this[_0x5c013f(0x957)][_0x5c013f(0x73f)]('');break;}},Window_ActorCommand[_0x579382(0x448)][_0x579382(0xa01)]=function(){const _0x1a206d=_0x579382;this[_0x1a206d(0xba3)](0x0);if(this[_0x1a206d(0x6f5)]&&ConfigManager[_0x1a206d(0x5ab)]){const _0x1116a5=this[_0x1a206d(0x6f5)][_0x1a206d(0x812)]();this['selectSymbol'](_0x1116a5);if(_0x1116a5===_0x1a206d(0x4cb)){const _0x2670f6=this[_0x1a206d(0x6f5)][_0x1a206d(0x60b)]();if(_0x2670f6){if(_0x1a206d(0xb94)===_0x1a206d(0xae7)){if(this[_0x1a206d(0x622)]!==_0x2eb420)return![];if(!_0x544790['isSceneBattle']())return![];return _0x130033[_0x1a206d(0x675)]['Settings'][_0x1a206d(0xbf4)][_0x1a206d(0x88f)];}else{const _0x57c7c2=this[_0x1a206d(0xb5f)](_0x1a206d(0x4cb),_0x2670f6[_0x1a206d(0x4a9)]);this[_0x1a206d(0xa29)](_0x57c7c2||0x0);}}}else{if(_0x1116a5===_0x1a206d(0xa45)){if(_0x1a206d(0x813)===_0x1a206d(0x341))return _0x19dbd7;else{const _0x2abfce=this[_0x1a206d(0x6f5)][_0x1a206d(0x60b)]();if(_0x2abfce){const _0x19ce46=this[_0x1a206d(0xb5f)](_0x1a206d(0xa45),_0x2abfce['id']);this[_0x1a206d(0xa29)](_0x19ce46||0x0);}}}}}},Window_ActorCommand[_0x579382(0x448)][_0x579382(0xb5f)]=function(_0x578f65,_0x8bcfc6){const _0x2b160a=_0x579382;return this['_list'][_0x2b160a(0x42e)](_0xc0113=>_0xc0113['symbol']===_0x578f65&&_0xc0113[_0x2b160a(0x5f1)]===_0x8bcfc6);},VisuMZ['BattleCore'][_0x579382(0xb53)]=Window_BattleStatus[_0x579382(0x448)][_0x579382(0x921)],Window_BattleStatus['prototype'][_0x579382(0x921)]=function(_0x35bd31){const _0xde2061=_0x579382;VisuMZ[_0xde2061(0x675)][_0xde2061(0xb53)][_0xde2061(0xb95)](this,_0x35bd31),this[_0xde2061(0x2d3)](),this[_0xde2061(0x1bb)]();},Window_BattleStatus[_0x579382(0x448)]['battleLayoutStyle']=function(){const _0x1c9ebd=_0x579382;if(this[_0x1c9ebd(0x60a)])return this[_0x1c9ebd(0x60a)];return this['_battleLayoutStyle']=SceneManager[_0x1c9ebd(0xbc5)]['battleLayoutStyle'](),this[_0x1c9ebd(0x60a)];},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x2d3)]=function(){const _0x333c6f=_0x579382;this[_0x333c6f(0x5b2)]=this['isFrameVisible']();const _0x4aa578=VisuMZ[_0x333c6f(0x675)][_0x333c6f(0x27f)][_0x333c6f(0xbf4)];_0x4aa578[_0x333c6f(0x6e4)]&&(_0x333c6f(0xa61)===_0x333c6f(0x7ed)?_0x339ffa['BattleCore'][_0x333c6f(0x2a6)][_0x333c6f(0xb95)](this,_0x11b11d):this['opacity']=0x0);},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x8b6)]=function(){const _0x1b65e0=_0x579382,_0x4513d5=VisuMZ[_0x1b65e0(0x675)][_0x1b65e0(0x27f)]['BattleLayout'];if(_0x4513d5[_0x1b65e0(0x45b)])return'wzBjj'!==_0x1b65e0(0x52e)?!![]:!this[_0x1b65e0(0xb11)]();const _0x65623b=this[_0x1b65e0(0x796)]();switch(_0x65623b){case _0x1b65e0(0xc74):case _0x1b65e0(0x5d8):return!![];break;case'default':case'xp':case _0x1b65e0(0x745):default:return![];break;}},Window_BattleStatus['prototype'][_0x579382(0x6c4)]=function(){return this['isFrameVisible']()?0x0:0xa;},Window_BattleStatus[_0x579382(0x448)]['maxCols']=function(){const _0xc76983=_0x579382,_0x203aad=this[_0xc76983(0x796)]();switch(_0x203aad){case _0xc76983(0xc74):return 0x1;break;case'xp':case _0xc76983(0x745):return $gameParty[_0xc76983(0x203)]()['length'];break;case _0xc76983(0x3ac):default:return $gameParty[_0xc76983(0xb74)]();break;}},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x8b1)]=function(){const _0x56af29=_0x579382,_0xabe168=this[_0x56af29(0x796)]();switch(_0xabe168){case'list':return Window_StatusBase['prototype'][_0x56af29(0x8b1)][_0x56af29(0xb95)](this);break;case _0x56af29(0x3ac):case'xp':case _0x56af29(0x745):default:return this[_0x56af29(0x51c)];break;}},Window_BattleStatus['prototype'][_0x579382(0x2b9)]=function(){const _0x18aae8=_0x579382,_0x471b2b=this['battleLayoutStyle']();switch(_0x471b2b){case _0x18aae8(0xc74):return Window_StatusBase['prototype'][_0x18aae8(0x2b9)][_0x18aae8(0xb95)](this);break;case _0x18aae8(0x3ac):case'xp':case _0x18aae8(0x745):default:return 0x0;break;}},Window_BattleStatus[_0x579382(0x448)]['updatePadding']=function(){const _0x3383e1=_0x579382;this['isFrameVisible']()?Window_StatusBase[_0x3383e1(0x448)][_0x3383e1(0xc0d)][_0x3383e1(0xb95)](this):this['padding']=0x8;},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x398)]=function(){const _0x39e24d=_0x579382,_0x5498fe=VisuMZ[_0x39e24d(0x675)][_0x39e24d(0x27f)][_0x39e24d(0xbf4)];_0x5498fe[_0x39e24d(0x45b)]?'euUXO'===_0x39e24d(0x667)?this[_0x39e24d(0x796)]()===_0x39e24d(0x5d8)?this[_0x39e24d(0x5c5)]['x']=0x8:this['_cancelButton']['x']=-this[_0x39e24d(0x5c5)][_0x39e24d(0x259)]-0x4:this[_0x39e24d(0x506)]=ImageManager[_0x39e24d(0x1ce)](_0x5498fe[_0x39e24d(0x45b)]):Window_StatusBase[_0x39e24d(0x448)]['loadWindowskin'][_0x39e24d(0xb95)](this);},Window_BattleStatus[_0x579382(0x448)]['drawItemBackground']=function(_0x54e3a8){const _0x268046=_0x579382,_0x1c175e=VisuMZ[_0x268046(0x675)]['Settings'][_0x268046(0xbf4)];if(_0x1c175e[_0x268046(0x4f4)])return;Window_StatusBase[_0x268046(0x448)][_0x268046(0x9b7)][_0x268046(0xb95)](this,_0x54e3a8);},Window_BattleStatus[_0x579382(0x448)][_0x579382(0xb28)]=function(){const _0x462cf3=_0x579382;this[_0x462cf3(0x20d)]=!![];},Window_BattleStatus['prototype'][_0x579382(0x6b8)]=function(){const _0x437285=_0x579382;Window_StatusBase[_0x437285(0x448)]['update']['call'](this),this[_0x437285(0xc1a)](),this[_0x437285(0x4e1)]();if(this[_0x437285(0x796)]()==='border')this[_0x437285(0x834)]();},Window_BattleStatus[_0x579382(0x448)]['updateRefresh']=function(){const _0x35cbc6=_0x579382;if($gameTemp['isBattleRefreshRequested']()){if(_0x35cbc6(0xc2b)!==_0x35cbc6(0xc2b)){_0x446bc9(_0x35cbc6(0x830)),_0x33f44c['exit']();return;}else this[_0x35cbc6(0x752)](),this['_requestRefresh']=![],$gameTemp[_0x35cbc6(0xb7f)]();}else this[_0x35cbc6(0x20d)]&&(this[_0x35cbc6(0x20d)]=![],this[_0x35cbc6(0x396)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x569)]=function(){const _0x23298f=_0x579382;Window_StatusBase['prototype'][_0x23298f(0x569)][_0x23298f(0xb95)](this);if(!$gameSystem[_0x23298f(0xc10)]())this[_0x23298f(0x396)]();},Window_BattleStatus[_0x579382(0x448)]['hide']=function(){const _0x7e04a6=_0x579382;if(this['constructor']===Window_BattleStatus)return;Window_StatusBase['prototype']['hide'][_0x7e04a6(0xb95)](this);},Window_BattleStatus[_0x579382(0x448)][_0x579382(0xb3e)]=function(_0x580df1){const _0x28ff18=_0x579382,_0x418226=this[_0x28ff18(0x796)]();switch(_0x418226){case'xp':case _0x28ff18(0x745):break;case _0x28ff18(0x3ac):case _0x28ff18(0xc74):case'border':default:return Window_StatusBase['prototype'][_0x28ff18(0xb3e)][_0x28ff18(0xb95)](this,_0x580df1);break;}},VisuMZ[_0x579382(0x675)][_0x579382(0x78a)]=Window_BattleStatus[_0x579382(0x448)][_0x579382(0xbf0)],Window_BattleStatus[_0x579382(0x448)][_0x579382(0xbf0)]=function(_0xbc84f4){const _0x54cc59=_0x579382,_0x4cf029=this['battleLayoutStyle']();switch(_0x4cf029){case _0x54cc59(0xc74):this[_0x54cc59(0x271)](_0xbc84f4);break;case'xp':this[_0x54cc59(0x5bf)](_0xbc84f4);break;case _0x54cc59(0x745):this[_0x54cc59(0xae4)](_0xbc84f4);break;case _0x54cc59(0x3ac):case _0x54cc59(0x5d8):default:VisuMZ['BattleCore'][_0x54cc59(0x78a)]['call'](this,_0xbc84f4);break;}},Window_BattleStatus['prototype']['drawItemStatus']=function(_0x593538){const _0x456ddc=_0x579382,_0x37a456=this[_0x456ddc(0x796)]();if(!$gameSystem[_0x456ddc(0xc10)]())this['centerFrontViewSprite'](_0x593538);switch(_0x37a456){case _0x456ddc(0xc74):this['drawItemStatusListStyle'](_0x593538);break;case'xp':case _0x456ddc(0x745):case'default':case _0x456ddc(0x5d8):default:this[_0x456ddc(0x65a)](_0x593538);break;}},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x497)]=function(){const _0x4b7db1=_0x579382,_0x4c8555=this[_0x4b7db1(0x796)]();if(['xp'][_0x4b7db1(0xb2b)](_0x4c8555)&&!$gameSystem[_0x4b7db1(0xc10)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x4b7db1(0x448)]['refreshCursor']['call'](this);},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x2cd)]=function(_0x8cef89){const _0x1f71cb=_0x579382,_0x4775f0=this[_0x1f71cb(0x6b7)](_0x8cef89)['battler']();if(!_0x4775f0)return;const _0x16bbd5=this[_0x1f71cb(0x796)](),_0x46ee3a=this[_0x1f71cb(0xbbc)](_0x8cef89);let _0x10c072=Math[_0x1f71cb(0x78b)](_0x46ee3a['x']+_0x46ee3a[_0x1f71cb(0x259)]/0x2)+this[_0x1f71cb(0x443)];if([_0x1f71cb(0xc74)][_0x1f71cb(0xb2b)](_0x16bbd5)){if('KiaoS'===_0x1f71cb(0xc7a))_0x10c072=_0x46ee3a[_0x1f71cb(0x259)]/$gameParty[_0x1f71cb(0x203)]()[_0x1f71cb(0x237)],_0x10c072*=_0x8cef89,_0x10c072+=_0x46ee3a[_0x1f71cb(0x259)]/$gameParty[_0x1f71cb(0x203)]()['length']/0x2;else{if(this[_0x1f71cb(0xbe4)]<=0x0)return;const _0x3c2e3=this['_angleDuration'],_0x371b03=this[_0x1f71cb(0x1e5)],_0x462f77=this[_0x1f71cb(0x3c0)];_0x2f4fd3[_0x1f71cb(0x214)]?this[_0x1f71cb(0x504)]=this['applyEasing'](this['_currentAngle'],this[_0x1f71cb(0x521)],_0x3c2e3,_0x371b03,_0x462f77):this['_currentAngle']=(this[_0x1f71cb(0x504)]*(_0x3c2e3-0x1)+this[_0x1f71cb(0x521)])/_0x3c2e3;this['_angleDuration']--;if(this[_0x1f71cb(0xbe4)]<=0x0)this[_0x1f71cb(0x7d3)]();}}let _0x23bd7e=Math[_0x1f71cb(0x78b)](this[_0x1f71cb(0x95f)](_0x8cef89,_0x4775f0,_0x46ee3a));_0x4775f0['setHome'](_0x10c072,_0x23bd7e),this[_0x1f71cb(0x779)](_0x4775f0,0x1),_0x4775f0[_0x1f71cb(0x569)](),this[_0x1f71cb(0x82e)](),this[_0x1f71cb(0x75a)]();},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x95f)]=function(_0x2bc6b8,_0x4321e2,_0x2b5832){const _0x3bc419=_0x579382,_0x391b3d=VisuMZ['BattleCore']['Settings'][_0x3bc419(0xbf4)],_0x574b37=this[_0x3bc419(0x796)]();if(_0x574b37==='xp'){if(_0x3bc419(0x9f9)!=='ATmPS'){const _0x437c2d=_0x391b3d[_0x3bc419(0x326)];switch(_0x437c2d[_0x3bc419(0x82b)]()[_0x3bc419(0x8f5)]()){case _0x3bc419(0xcbf):return _0x2b5832[_0x3bc419(0x5ac)]-_0x4321e2[_0x3bc419(0xc68)][_0x3bc419(0x5ac)]/0x4;break;case _0x3bc419(0xc13):const _0x494ded=_0x391b3d[_0x3bc419(0x20c)];return(_0x2b5832[_0x3bc419(0x5ac)]+(_0x4321e2[_0x3bc419(0x5ac)]||_0x494ded))/0x2;break;case _0x3bc419(0x51e):return 0x0;case _0x3bc419(0x1d8):default:return this[_0x3bc419(0x20a)](_0x2b5832);break;}}else{if(_0x3c8a96[_0x3bc419(0x725)]&&!_0x4929e7['autoBattleUseSkills'])return this['makeActionListAutoAttack']();else{return _0x1091f3[_0x3bc419(0x675)][_0x3bc419(0xc0a)][_0x3bc419(0xb95)](this);;}}}else{if(_0x574b37==='portrait'){}}return _0x4321e2[_0x3bc419(0x5ac)];},Sprite_Name[_0x579382(0x448)][_0x579382(0x4c4)]=function(){return 0x24;},Sprite_Name[_0x579382(0x448)][_0x579382(0x9c0)]=function(){const _0x28e037=_0x579382,_0x10cb8f=this[_0x28e037(0x1d8)](),_0x282e28=this[_0x28e037(0x47c)](),_0x1c92c2=this[_0x28e037(0x4c4)]();this[_0x28e037(0x3f8)](),this[_0x28e037(0x8c2)][_0x28e037(0x3f1)](),this[_0x28e037(0x8c2)]['drawTextTopAligned'](_0x10cb8f,0x4,0x0,_0x282e28,_0x1c92c2,'left');},Bitmap[_0x579382(0x448)][_0x579382(0x66c)]=function(_0x235c4c,_0x4451f3,_0x1c9c4e,_0x175c2f,_0x3bdcd3,_0x28a4f0){const _0x3ba0df=_0x579382,_0x291473=this[_0x3ba0df(0x3bf)],_0x145b65=_0x291473[_0x3ba0df(0x74b)];_0x175c2f=_0x175c2f||0xffffffff;let _0x4fadfb=_0x4451f3,_0x1fe47c=Math[_0x3ba0df(0x78b)](_0x1c9c4e+0x18/0x2+this[_0x3ba0df(0x4cc)]*0.35);_0x28a4f0===_0x3ba0df(0xc13)&&(_0x4fadfb+=_0x175c2f/0x2),_0x28a4f0===_0x3ba0df(0x2d5)&&(_0x4fadfb+=_0x175c2f),_0x291473[_0x3ba0df(0xac7)](),_0x291473[_0x3ba0df(0xa10)]=this['_makeFontNameText'](),_0x291473[_0x3ba0df(0x1af)]=_0x28a4f0,_0x291473[_0x3ba0df(0x284)]='alphabetic',_0x291473[_0x3ba0df(0x74b)]=0x1,this[_0x3ba0df(0x742)](_0x235c4c,_0x4fadfb,_0x1fe47c,_0x175c2f),_0x291473[_0x3ba0df(0x74b)]=_0x145b65,this[_0x3ba0df(0x91b)](_0x235c4c,_0x4fadfb,_0x1fe47c,_0x175c2f),_0x291473['restore'](),this[_0x3ba0df(0x7d9)][_0x3ba0df(0x6b8)]();},Window_BattleStatus['prototype'][_0x579382(0x20a)]=function(_0x5a06e9){const _0x3f1df2=_0x579382;return this[_0x3f1df2(0xaf7)](_0x5a06e9)-this[_0x3f1df2(0x4ef)]();},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x271)]=function(_0x3a6684){const _0x169050=_0x579382;if(!VisuMZ['BattleCore'][_0x169050(0x27f)][_0x169050(0xbf4)]['ShowFacesListStyle'])return;const _0x47245e=this[_0x169050(0x6b7)](_0x3a6684),_0x3263bb=this[_0x169050(0xbbc)](_0x3a6684);_0x3263bb[_0x169050(0x259)]=ImageManager[_0x169050(0x355)],_0x3263bb[_0x169050(0x5ac)]-=0x2,this[_0x169050(0xbad)](_0x47245e,_0x3263bb['x']+0x1,_0x3263bb['y']+0x1,_0x3263bb[_0x169050(0x259)],_0x3263bb['height']);},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x6ba)]=function(_0x23d172){const _0x206e4f=_0x579382,_0xdfad48=VisuMZ['BattleCore'][_0x206e4f(0x27f)][_0x206e4f(0xbf4)],_0xebbeef=$dataSystem[_0x206e4f(0xa64)]?0x4:0x3,_0x530fcb=_0xebbeef*0x80+(_0xebbeef-0x1)*0x8+0x4,_0x503320=this[_0x206e4f(0x6b7)](_0x23d172),_0x1d9ed5=this['itemRect'](_0x23d172);let _0x934fab=_0x1d9ed5['x']+this[_0x206e4f(0x443)];_0xdfad48[_0x206e4f(0x8b9)]?_0x934fab=_0x1d9ed5['x']+ImageManager['faceWidth']+0x8:_0x934fab+=ImageManager['iconWidth'];const _0x4fff4c=Math['round'](Math[_0x206e4f(0xabb)](_0x1d9ed5['x']+_0x1d9ed5[_0x206e4f(0x259)]-_0x530fcb,_0x934fab)),_0x4c29d7=Math[_0x206e4f(0x78b)](_0x1d9ed5['y']+(_0x1d9ed5[_0x206e4f(0x5ac)]-Sprite_Name['prototype'][_0x206e4f(0x4c4)]())/0x2),_0x1df75b=Math[_0x206e4f(0x78b)](_0x4fff4c-ImageManager[_0x206e4f(0x858)]/0x2-0x4),_0x486443=Math[_0x206e4f(0x78b)](_0x1d9ed5['y']+(_0x1d9ed5['height']-ImageManager[_0x206e4f(0xb62)])/0x2+ImageManager[_0x206e4f(0xb62)]/0x2);let _0x297883=_0x4fff4c+0x88;const _0x353602=_0x4c29d7;this[_0x206e4f(0x5fd)](_0x503320,_0x4fff4c-0x4+(_0xdfad48[_0x206e4f(0x684)]||0x0),_0x4c29d7+(_0xdfad48[_0x206e4f(0x463)]||0x0)),this[_0x206e4f(0x800)](_0x503320,_0x4fff4c+(_0xdfad48['NameOffsetX']||0x0),_0x4c29d7+(_0xdfad48[_0x206e4f(0x95c)]||0x0)),this['placeStateIcon'](_0x503320,_0x1df75b+(_0xdfad48[_0x206e4f(0x8bb)]||0x0),_0x486443+(_0xdfad48[_0x206e4f(0xba4)]||0x0)),this['placeGauge'](_0x503320,'hp',_0x297883+0x88*0x0+(_0xdfad48['HpGaugeOffsetX']||0x0),_0x353602+(_0xdfad48[_0x206e4f(0xbc9)]||0x0)),this['placeGauge'](_0x503320,'mp',_0x297883+0x88*0x1+(_0xdfad48[_0x206e4f(0x4e0)]||0x0),_0x353602+(_0xdfad48[_0x206e4f(0x2f9)]||0x0)),$dataSystem[_0x206e4f(0xa64)]&&this[_0x206e4f(0xb5d)](_0x503320,'tp',_0x297883+0x88*0x2+(_0xdfad48[_0x206e4f(0x389)]||0x0),_0x353602+(_0xdfad48[_0x206e4f(0xbf2)]||0x0));},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x5bf)]=function(_0x4bdc3b){const _0xbfbd4d=_0x579382;if(!$gameSystem[_0xbfbd4d(0xc10)]())return;VisuMZ[_0xbfbd4d(0x675)][_0xbfbd4d(0x78a)][_0xbfbd4d(0xb95)](this,_0x4bdc3b);},Window_BattleStatus[_0x579382(0x448)]['drawItemStatusXPStyle']=function(_0x24d39d){const _0x363b81=_0x579382,_0x226885=VisuMZ[_0x363b81(0x675)]['Settings'][_0x363b81(0xbf4)],_0x274728=this[_0x363b81(0x6b7)](_0x24d39d),_0x344b1c=this[_0x363b81(0xbbc)](_0x24d39d),_0x34cb09=Math[_0x363b81(0x78b)](_0x344b1c['x']+(_0x344b1c['width']-0x80)/0x2),_0x43aef=this[_0x363b81(0x20a)](_0x344b1c);let _0x5b07ff=_0x34cb09-ImageManager['iconWidth']/0x2-0x4,_0x4ba3c1=_0x43aef+ImageManager[_0x363b81(0xb62)]/0x2;_0x5b07ff-ImageManager[_0x363b81(0x858)]/0x2<_0x344b1c['x']&&(_0x363b81(0xa24)==='pwbHw'?(_0x5b07ff=_0x34cb09+ImageManager[_0x363b81(0x858)]/0x2-0x4,_0x4ba3c1=_0x43aef-ImageManager[_0x363b81(0xb62)]/0x2):(_0x19a3ec[_0x363b81(0x675)][_0x363b81(0xc86)]&&_0x316bf6[_0x363b81(0x675)][_0x363b81(0xc86)]['call'](this,_0x7d7cc5),_0x32c9e1[_0x363b81(0x675)][_0x363b81(0x22a)](_0x1d5a57),_0x7eb83c[_0x363b81(0x675)][_0x363b81(0xc45)](_0x55194c)));const _0x45761e=_0x34cb09,_0x4e1f3a=this[_0x363b81(0xaf7)](_0x344b1c);this[_0x363b81(0x5fd)](_0x274728,_0x34cb09+(_0x226885[_0x363b81(0x684)]||0x0),_0x43aef+(_0x226885['TpbGaugeOffsetY']||0x0)),this[_0x363b81(0x800)](_0x274728,_0x34cb09+(_0x226885['NameOffsetX']||0x0),_0x43aef+(_0x226885['NameOffsetY']||0x0)),this[_0x363b81(0x456)](_0x274728,_0x5b07ff+(_0x226885['StateIconOffsetX']||0x0),_0x4ba3c1+(_0x226885[_0x363b81(0xba4)]||0x0)),this[_0x363b81(0xb5d)](_0x274728,'hp',_0x45761e+(_0x226885['HpGaugeOffsetX']||0x0),_0x4e1f3a+(_0x226885[_0x363b81(0xbc9)]||0x0)),this[_0x363b81(0xb5d)](_0x274728,'mp',_0x45761e+(_0x226885[_0x363b81(0x4e0)]||0x0),_0x4e1f3a+this[_0x363b81(0x4ef)]()+(_0x226885['MpGaugeOffsetY']||0x0)),$dataSystem[_0x363b81(0xa64)]&&this[_0x363b81(0xb5d)](_0x274728,'tp',_0x45761e+(_0x226885['TpGaugeOffsetX']||0x0),_0x4e1f3a+this[_0x363b81(0x4ef)]()*0x2+(_0x226885[_0x363b81(0xbf2)]||0x0));},Window_BattleStatus['prototype'][_0x579382(0xbf1)]=function(_0x1eaab6){const _0x38ab86=_0x579382;if(!VisuMZ[_0x38ab86(0x675)]['Settings'][_0x38ab86(0xbf4)][_0x38ab86(0x7c5)])return![];if(_0x1eaab6[_0x38ab86(0xa3c)]())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x1eaab6[_0x38ab86(0xc7e)]();},Game_Actor[_0x579382(0x448)]['getBattlePortraitOffsetX']=function(){const _0x114b29=_0x579382;if(this['actor']()[_0x114b29(0x560)][_0x114b29(0x299)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x114b29(0x560)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x579382(0x448)][_0x579382(0xb3a)]=function(){const _0x5b8a0d=_0x579382;if(this[_0x5b8a0d(0x6b7)]()[_0x5b8a0d(0x560)][_0x5b8a0d(0x299)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x5b8a0d(0x41c)===_0x5b8a0d(0x41c))return Number(RegExp['$1']);else this[_0x5b8a0d(0x970)](),this[_0x5b8a0d(0x3af)]();}else{if(this[_0x5b8a0d(0x6b7)]()[_0x5b8a0d(0x560)][_0x5b8a0d(0x299)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x5b8a0d(0x3c8)===_0x5b8a0d(0x3c8))return Number(RegExp['$2']);else this[_0x5b8a0d(0xbea)]=!![],_0x26a915[_0x5b8a0d(0x675)][_0x5b8a0d(0x889)][_0x5b8a0d(0xb95)](this);}}return 0x0;},Window_BattleStatus[_0x579382(0x448)]['drawItemImagePortraitStyle']=function(_0x3bdab7){const _0x2842fa=_0x579382,_0x2e974c=this[_0x2842fa(0x6b7)](_0x3bdab7);if(this['showPortraits'](_0x2e974c)){const _0x33aa91=_0x2842fa(0x705)[_0x2842fa(0x7e1)](_0x2e974c['actorId']()),_0xe953a8=this['createInnerPortrait'](_0x33aa91,Sprite),_0x480b7d=_0x2e974c[_0x2842fa(0x321)]();_0x480b7d!==''?_0xe953a8[_0x2842fa(0x8c2)]=ImageManager[_0x2842fa(0x285)](_0x480b7d):_0xe953a8[_0x2842fa(0x8c2)]=ImageManager[_0x2842fa(0x9b3)];const _0x466a9a=this['itemRect'](_0x3bdab7);_0xe953a8[_0x2842fa(0x22b)]['x']=0.5,_0xe953a8[_0x2842fa(0x22b)]['y']=0x1;let _0x1f4e80=Math['round'](_0x466a9a['x']+_0x466a9a['width']/0x2)+this[_0x2842fa(0x443)];_0x1f4e80+=_0x2e974c[_0x2842fa(0x4d2)]();let _0x35410a=Math[_0x2842fa(0x78b)](this[_0x2842fa(0x5ac)]);_0x35410a+=_0x2e974c[_0x2842fa(0xb3a)](),_0xe953a8[_0x2842fa(0x487)](_0x1f4e80,_0x35410a);const _0x1d401b=VisuMZ[_0x2842fa(0x675)][_0x2842fa(0x27f)][_0x2842fa(0xbf4)][_0x2842fa(0x69c)];_0xe953a8[_0x2842fa(0xb30)]['x']=_0x1d401b,_0xe953a8[_0x2842fa(0xb30)]['y']=_0x1d401b,_0xe953a8[_0x2842fa(0x569)]();}else{if(_0x2842fa(0xaab)===_0x2842fa(0x7e6))_0x24ca95[_0x2842fa(0x675)][_0x2842fa(0x27f)][_0x2842fa(0x3f0)]['ShowEnemyGauge']&&this[_0x2842fa(0x1e9)](),_0x1ae538[_0x2842fa(0x675)][_0x2842fa(0x868)][_0x2842fa(0xb95)](this);else{const _0x20c968=this[_0x2842fa(0x6f1)](_0x3bdab7);this['drawActorFace'](_0x2e974c,_0x20c968['x'],_0x20c968['y'],_0x20c968[_0x2842fa(0x259)],_0x20c968['height']);}}},Window_BattleStatus['prototype'][_0x579382(0x591)]=function(_0x3347bf,_0x55e4af){const _0x4f2670=_0x579382,_0x7be659=this['_additionalSprites'];if(_0x7be659[_0x3347bf])return _0x7be659[_0x3347bf];else{const _0x4f329a=new _0x55e4af();return _0x7be659[_0x3347bf]=_0x4f329a,this[_0x4f2670(0x7cd)](_0x4f329a),this[_0x4f2670(0x7cd)](this['_cursorArea']),_0x4f329a;}},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x3c1)]=function(){const _0xab20e5=_0x579382;this['_createCursorArea'](),this[_0xab20e5(0xa82)](),Window_StatusBase[_0xab20e5(0x448)][_0xab20e5(0x3c1)][_0xab20e5(0xb95)](this),this[_0xab20e5(0x61a)]();},Window_BattleStatus[_0x579382(0x448)]['_createCursorArea']=function(){const _0x294e37=_0x579382;this['_cursorArea']=new Sprite(),this['_cursorArea'][_0x294e37(0xc29)]=[new PIXI['filters']['AlphaFilter']()],this[_0x294e37(0x1b0)][_0x294e37(0xa0d)]=new Rectangle(),this[_0x294e37(0x1b0)]['move'](this[_0x294e37(0xc25)],this[_0x294e37(0xc25)]),this[_0x294e37(0xbb0)](this[_0x294e37(0x1b0)]);},Window_BattleStatus[_0x579382(0x448)][_0x579382(0xa82)]=function(){const _0x43253f=_0x579382;this[_0x43253f(0x2da)]=new Sprite(),this[_0x43253f(0xbb0)](this[_0x43253f(0x2da)]);},Window_BattleStatus['prototype'][_0x579382(0x82e)]=function(){const _0xfba0f7=_0x579382;this[_0xfba0f7(0x2da)]&&this[_0xfba0f7(0xbb0)](this['_effectsContainer']);},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x61a)]=function(){const _0x2bf230=_0x579382;this[_0x2bf230(0x5be)]=new Sprite(),this[_0x2bf230(0xbb0)](this[_0x2bf230(0x5be)]);},Window_BattleStatus['prototype'][_0x579382(0x86b)]=function(){const _0x3f327d=_0x579382;this[_0x3f327d(0x491)]=new Sprite();for(let _0x2bae63=0x0;_0x2bae63<0x9;_0x2bae63++){this[_0x3f327d(0x491)][_0x3f327d(0xbb0)](new Sprite());}this['_cursorArea'][_0x3f327d(0xbb0)](this[_0x3f327d(0x491)]);},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x924)]=function(){const _0x176eab=_0x579382;Window_StatusBase[_0x176eab(0x448)][_0x176eab(0x924)][_0x176eab(0xb95)](this),this[_0x176eab(0x3cf)]();},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x3cf)]=function(){const _0x2611b5=_0x579382,_0x273eb7=this['_padding'];this['_cursorArea']['move'](_0x273eb7,_0x273eb7),this[_0x2611b5(0x1b0)]['x']=_0x273eb7-this['origin']['x'],this[_0x2611b5(0x1b0)]['y']=_0x273eb7-this[_0x2611b5(0x1f2)]['y'];if(this[_0x2611b5(0x7ea)]>0x0&&this[_0x2611b5(0x51c)]>0x0){if(_0x2611b5(0x2a5)==='cdXAO')this[_0x2611b5(0x1b0)][_0x2611b5(0xcbc)]=this[_0x2611b5(0x9a8)]();else return!![];}else'TpDvt'===_0x2611b5(0x264)?this[_0x2611b5(0xcb6)]=_0x2611b5(0xc18):this[_0x2611b5(0x1b0)][_0x2611b5(0xcbc)]=![];},Window_BattleStatus['prototype'][_0x579382(0xacd)]=function(){const _0x312ac6=_0x579382;Window_StatusBase[_0x312ac6(0x448)][_0x312ac6(0xacd)][_0x312ac6(0xb95)](this),this[_0x312ac6(0x24a)]();},Window_BattleStatus['prototype']['_updateCursorFilterArea']=function(){const _0x149539=_0x579382,_0x5a4f34=this[_0x149539(0x1b0)][_0x149539(0x379)]['apply'](new Point(0x0,0x0)),_0x40f15e=this[_0x149539(0x1b0)][_0x149539(0xa0d)];_0x40f15e['x']=_0x5a4f34['x']+this[_0x149539(0x1f2)]['x'],_0x40f15e['y']=_0x5a4f34['y']+this[_0x149539(0x1f2)]['y'],_0x40f15e[_0x149539(0x259)]=this[_0x149539(0x7ea)],_0x40f15e['height']=this[_0x149539(0x51c)];},Window_BattleStatus[_0x579382(0x448)]['refreshActorPortrait']=function(_0x5c7830){const _0x25177a=_0x579382;if(this[_0x25177a(0x796)]()!=='portrait')return;this['drawItemImagePortraitStyle'](_0x5c7830['index']());},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x6e9)]=function(_0x13d726,_0xc36ebc){const _0x2c4b78=_0x579382;if(!this[_0x2c4b78(0x5be)])return;if(!_0x13d726)return;if(!_0xc36ebc)return;const _0x238a67=this[_0x2c4b78(0xbbc)](_0xc36ebc[_0x2c4b78(0x7ca)]());_0x238a67['x']+=_0x238a67['width']/0x2+this[_0x2c4b78(0x443)],_0x13d726['x']=_0x238a67['x'],_0x13d726['y']=_0x238a67['y'],this[_0x2c4b78(0x5be)][_0x2c4b78(0xbb0)](_0x13d726);},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x701)]=function(_0x2cdd01){const _0x1b2209=_0x579382;if(!this[_0x1b2209(0x5be)])return;if(!_0x2cdd01)return;this[_0x1b2209(0x5be)][_0x1b2209(0x490)](_0x2cdd01);},Window_BattleStatus['prototype'][_0x579382(0x834)]=function(){const _0x510f8e=_0x579382;if(!this[_0x510f8e(0x57c)]())return;if(!this[_0x510f8e(0x444)])this[_0x510f8e(0x907)]();this[_0x510f8e(0x336)](),this['updateBorderSprite']();},Window_BattleStatus['prototype'][_0x579382(0x57c)]=function(){const _0x4d14c5=_0x579382;if(this[_0x4d14c5(0x622)]!==Window_BattleStatus)return![];if(!SceneManager[_0x4d14c5(0xc65)]())return![];return VisuMZ[_0x4d14c5(0x675)]['Settings']['BattleLayout'][_0x4d14c5(0x88f)];},Window_BattleStatus['prototype'][_0x579382(0x907)]=function(){const _0xc3493b=_0x579382;this[_0xc3493b(0x444)]=new Sprite();const _0x5907fb=SceneManager[_0xc3493b(0xbc5)],_0xde963c=_0x5907fb['children'][_0xc3493b(0x903)](_0x5907fb[_0xc3493b(0xa75)]);_0x5907fb[_0xc3493b(0x779)](this[_0xc3493b(0x444)],_0xde963c),this['_borderPortraitSprite'][_0xc3493b(0x22b)]['x']=0.5,this[_0xc3493b(0x444)][_0xc3493b(0x22b)]['y']=0x1;const _0x3f7c39=VisuMZ[_0xc3493b(0x675)][_0xc3493b(0x27f)]['BattleLayout'][_0xc3493b(0x608)];this[_0xc3493b(0x444)][_0xc3493b(0xb30)]['x']=_0x3f7c39,this[_0xc3493b(0x444)][_0xc3493b(0xb30)]['y']=_0x3f7c39,this[_0xc3493b(0x444)]['y']=this['y']+this[_0xc3493b(0x5ac)],this[_0xc3493b(0x6e7)]=0x0;},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x336)]=function(){const _0x476f7d=_0x579382;this[_0x476f7d(0x444)][_0x476f7d(0xcbc)]=BattleManager[_0x476f7d(0xa5b)]();const _0x467956=BattleManager[_0x476f7d(0x6b7)](),_0x18e4d1=_0x467956?_0x467956[_0x476f7d(0x321)]()||'':'';if(_0x467956===this[_0x476f7d(0x444)][_0x476f7d(0x6b7)]&&_0x18e4d1===this['_borderPortraitSprite'][_0x476f7d(0x55e)])return;this['_borderPortraitSprite']['actor']=_0x467956||this[_0x476f7d(0x444)]['actor'],this[_0x476f7d(0x444)][_0x476f7d(0x55e)]=_0x18e4d1;if(!_0x467956){if('GtBQk'!==_0x476f7d(0x3a8))this[_0x476f7d(0x59d)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x476f7d(0x3d5)](),this[_0x476f7d(0x6a6)](),_0x10fc15[_0x476f7d(0x675)][_0x476f7d(0xbbf)][_0x476f7d(0xb95)](this),this[_0x476f7d(0x401)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x476f7d(0x887)](),this[_0x476f7d(0x472)]();else return;}else{if(_0x18e4d1===''){this[_0x476f7d(0x444)][_0x476f7d(0x8c2)]=ImageManager[_0x476f7d(0x9b3)],this['_borderPortraitSprite'][_0x476f7d(0x55e)]='';return;}else{if(_0x476f7d(0xae5)===_0x476f7d(0x235))this['autoBattleUseSkills']=_0x58f9c7[_0x476f7d(0xac6)];else{const _0xfe1159=ImageManager[_0x476f7d(0x285)](_0x18e4d1);this[_0x476f7d(0x444)]['opacity']=0x0,_0xfe1159[_0x476f7d(0x9a6)](this['processBorderActor']['bind'](this,_0xfe1159));}}}},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x4c2)]=function(_0x52fa1c){const _0x126bcd=_0x579382;this[_0x126bcd(0x6e7)]=0x14,this[_0x126bcd(0x444)][_0x126bcd(0x8c2)]=_0x52fa1c;if(SceneManager['_scene'][_0x126bcd(0x63d)]()){if('lwxJT'!==_0x126bcd(0x5f4))this[_0x126bcd(0x444)]['x']=0x0,this[_0x126bcd(0xb76)]=Math['ceil'](_0x52fa1c['width']/0x2);else return this[_0x126bcd(0xcb4)](_0x19b437);}else{if(_0x126bcd(0x7a4)===_0x126bcd(0x7a4))this[_0x126bcd(0x444)]['x']=this[_0x126bcd(0x259)],this[_0x126bcd(0xb76)]=this[_0x126bcd(0x259)]*0x3/0x4;else{if(!_0x7ae8e7['isSceneBattle']())return;const _0xb1bbe4=_0x27cfa1['_logWindow'];_0xb1bbe4[_0x126bcd(0xa21)]();}}this[_0x126bcd(0x444)][_0x126bcd(0xcbd)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x126bcd(0x5ac)];const _0x3d02a9=BattleManager[_0x126bcd(0x6b7)]();if(_0x3d02a9){if(_0x126bcd(0x1db)===_0x126bcd(0x242)){let _0x540723=_0x44734a[_0x126bcd(0xa5c)];_0x540723*=_0x3d7ea6['stateRate'](_0x57dc45),_0x540723*=this['subject']()[_0x126bcd(0xb50)](_0x401b1a),_0x540723*=this[_0x126bcd(0x250)](_0x3aafb5),_0x37f9a9['random']()<_0x540723&&(_0x12c8fa[_0x126bcd(0xa25)]=!![],this[_0x126bcd(0x8fc)](_0x55258f));}else this[_0x126bcd(0xb76)]+=_0x3d02a9[_0x126bcd(0x4d2)](),this[_0x126bcd(0x444)]['y']+=_0x3d02a9['getBattlePortraitOffsetY']();}},Window_BattleStatus[_0x579382(0x448)]['updateBorderSprite']=function(){const _0x446a1d=_0x579382;if(this[_0x446a1d(0x6e7)]>0x0){if(_0x446a1d(0x68e)!==_0x446a1d(0x68e))this[_0x446a1d(0x60a)]=_0x446a1d(0x3ac);else{const _0x532462=this[_0x446a1d(0x6e7)],_0x597f0b=this[_0x446a1d(0x444)];_0x597f0b['x']=(_0x597f0b['x']*(_0x532462-0x1)+this['_borderPortraitTargetX'])/_0x532462,_0x597f0b[_0x446a1d(0xcbd)]=(_0x597f0b[_0x446a1d(0xcbd)]*(_0x532462-0x1)+0xff)/_0x532462,this[_0x446a1d(0x6e7)]--;}}},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x4e1)]=function(){const _0x41edf7=_0x579382;return;this['_effectsContainer']&&(this[_0x41edf7(0x2da)]['x']=this['x'],this[_0x41edf7(0x2da)]['y']=this['y']),this[_0x41edf7(0x5be)]&&(this[_0x41edf7(0x5be)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x1bb)]=function(){const _0x57b2a5=_0x579382,_0x4de52b=VisuMZ['BattleCore'][_0x57b2a5(0x27f)][_0x57b2a5(0xbf4)];if(_0x4de52b[_0x57b2a5(0x5ea)]){const _0x5e47b0=new Sprite();_0x5e47b0[_0x57b2a5(0x8c2)]=ImageManager[_0x57b2a5(0x1ce)](_0x4de52b[_0x57b2a5(0x5ea)]),_0x5e47b0['x']=_0x4de52b['StatusWindowAttachmentBackOffsetX']||0x0,_0x5e47b0['y']=_0x4de52b[_0x57b2a5(0x67d)]||0x0,this[_0x57b2a5(0x7cd)](_0x5e47b0),this[_0x57b2a5(0xb33)]=_0x5e47b0;}if(_0x4de52b[_0x57b2a5(0x952)]){const _0x31677f=new Sprite();_0x31677f[_0x57b2a5(0x8c2)]=ImageManager[_0x57b2a5(0x1ce)](_0x4de52b['StatusWindowAttachmentFront']),_0x31677f['x']=_0x4de52b['StatusWindowAttachmentFrontOffsetX']||0x0,_0x31677f['y']=_0x4de52b[_0x57b2a5(0xc28)]||0x0,this[_0x57b2a5(0xbb0)](_0x31677f),this[_0x57b2a5(0x3de)]=_0x31677f;}},Window_BattleStatus[_0x579382(0x448)][_0x579382(0x75a)]=function(){const _0x148412=_0x579382;if(this[_0x148412(0x3de)]){if('RzkIb'!=='EJZXv')this[_0x148412(0xbb0)](this[_0x148412(0x3de)]);else return _0xe37401[_0x148412(0x675)]['Game_Action_numRepeats'][_0x148412(0xb95)](this);}this[_0x148412(0xb33)]&&this[_0x148412(0x7cd)](this[_0x148412(0xb33)]);},Window_BattleActor['prototype'][_0x579382(0x747)]=function(){const _0x396434=_0x579382;return Window_BattleStatus['prototype'][_0x396434(0x747)][_0x396434(0xb95)](this)&&this[_0x396434(0x81c)]();},Window_BattleActor[_0x579382(0x448)]['isActionSelectionValid']=function(){const _0x215957=_0x579382,_0x3c6e81=BattleManager[_0x215957(0x9bd)](),_0x15ddea=this['actor'](this[_0x215957(0x7ca)]());if(!_0x3c6e81)return!![];if(!_0x3c6e81[_0x215957(0x270)]())return!![];const _0x395b70=_0x3c6e81[_0x215957(0x270)]()['note'];if(_0x395b70[_0x215957(0x299)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x215957(0x45a)!==_0x215957(0x45a))return!![];else{if(_0x15ddea===BattleManager[_0x215957(0x6b7)]())return![];}}return!![];},VisuMZ[_0x579382(0x675)][_0x579382(0x324)]=Window_BattleEnemy[_0x579382(0x448)]['initialize'],Window_BattleEnemy[_0x579382(0x448)][_0x579382(0x921)]=function(_0x1a7358){const _0x385ea8=_0x579382;this[_0x385ea8(0x9a9)]=null,VisuMZ[_0x385ea8(0x675)]['Window_BattleEnemy_initialize'][_0x385ea8(0xb95)](this,_0x1a7358);},Window_BattleEnemy[_0x579382(0x448)][_0x579382(0xb32)]=function(){return this['maxItems']();},VisuMZ[_0x579382(0x675)][_0x579382(0x69f)]=Window_BattleEnemy['prototype'][_0x579382(0x569)],Window_BattleEnemy[_0x579382(0x448)]['show']=function(){const _0x53c731=_0x579382;VisuMZ['BattleCore']['Window_BattleEnemy_show']['call'](this),this['y']=Graphics[_0x53c731(0x5ac)]*0xa;},Window_BattleEnemy['prototype']['validTargets']=function(){const _0x4836a8=_0x579382;return $gameTroop[_0x4836a8(0x3a1)]()[_0x4836a8(0x989)](0x0);},Window_BattleEnemy['prototype'][_0x579382(0x396)]=function(){const _0x58f620=_0x579382;this[_0x58f620(0xb0b)]=this[_0x58f620(0x5b8)](),this['sortEnemies'](),Window_Selectable[_0x58f620(0x448)]['refresh'][_0x58f620(0xb95)](this);},Window_BattleEnemy[_0x579382(0x448)][_0x579382(0x93a)]=function(){const _0x2e69f7=_0x579382;this['_enemies'][_0x2e69f7(0x7de)]((_0x3225f8,_0x25efb1)=>{const _0x4e7040=_0x2e69f7;if(_0x3225f8[_0x4e7040(0x368)]()[_0x4e7040(0xb43)]===_0x25efb1['battler']()['_baseX']){if(_0x4e7040(0x38d)!==_0x4e7040(0x7a7))return _0x3225f8[_0x4e7040(0x368)]()['_baseY']-_0x25efb1[_0x4e7040(0x368)]()[_0x4e7040(0x339)];else this['subject']()&&this[_0x4e7040(0xaed)]()[_0x4e7040(0x201)]()?_0x31154f[_0x4e7040(0x675)][_0x4e7040(0xbd9)][_0x4e7040(0xb95)](this):this['clear']();}else return _0x3225f8[_0x4e7040(0x368)]()['_baseX']-_0x25efb1[_0x4e7040(0x368)]()[_0x4e7040(0xb43)];}),SceneManager['isBattleFlipped']()&&this['_enemies'][_0x2e69f7(0x6f3)]();},Window_BattleEnemy[_0x579382(0x448)]['autoSelect']=function(){const _0x54ea3c=_0x579382,_0x43f8c2=VisuMZ[_0x54ea3c(0x675)][_0x54ea3c(0x27f)][_0x54ea3c(0x8ff)];if(_0x43f8c2['LastSelected'])this[_0x54ea3c(0x53b)]();else{if(_0x54ea3c(0x7b4)===_0x54ea3c(0x3b4))return _0x20dc56[_0x54ea3c(0x675)][_0x54ea3c(0x27f)][_0x54ea3c(0x2f8)]['SkipPartyCmd'];else this[_0x54ea3c(0x905)]();}},Window_BattleEnemy[_0x579382(0x448)][_0x579382(0x53b)]=function(){const _0x72d1dd=_0x579382;if(this['_lastEnemy']&&this[_0x72d1dd(0xb0b)]['includes'](this[_0x72d1dd(0x9a9)])){if(_0x72d1dd(0x450)===_0x72d1dd(0x450)){const _0x5c3a39=this['_enemies']['indexOf'](this[_0x72d1dd(0x9a9)]);this['forceSelect'](_0x5c3a39);}else return 0x0;}else _0x72d1dd(0x657)===_0x72d1dd(0x657)?this[_0x72d1dd(0x905)]():this[_0x72d1dd(0x4e7)]=![];},Window_BattleEnemy[_0x579382(0x448)][_0x579382(0x905)]=function(){const _0x4a890d=_0x579382,_0x34f902=VisuMZ['BattleCore'][_0x4a890d(0x27f)][_0x4a890d(0x8ff)];let _0x19419e=![];$gameSystem['isSideView']()?_0x4a890d(0x48d)===_0x4a890d(0x4af)?_0x1e4f58+=(_0x4d1a5d['isEnemy']()?0x1:-0x1)*_0xbf11d9[_0x4a890d(0xbb8)]()/0x2:_0x19419e=_0x34f902[_0x4a890d(0x2a0)]:_0x19419e=_0x34f902['FrontViewSelect'],this[_0x4a890d(0xba3)](_0x19419e?this[_0x4a890d(0xc87)]()-0x1:0x0);},Window_BattleEnemy[_0x579382(0x448)][_0x579382(0x1f4)]=function(){const _0x1d780e=_0x579382;Window_Selectable[_0x1d780e(0x448)][_0x1d780e(0x1f4)][_0x1d780e(0xb95)](this),this[_0x1d780e(0x9a9)]=this[_0x1d780e(0x82c)]();},Window_BattleItem[_0x579382(0x448)][_0x579382(0xb2b)]=function(_0x59abe8){if(!_0x59abe8)return![];return _0x59abe8['occasion']===0x0||_0x59abe8['occasion']===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x579382(0x448)]=Object['create'](Window_Base[_0x579382(0x448)]),Window_AutoBattleCancel[_0x579382(0x448)][_0x579382(0x622)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x579382(0x448)][_0x579382(0x921)]=function(_0x222e99){const _0x910da1=_0x579382;Window_Base[_0x910da1(0x448)]['initialize'][_0x910da1(0xb95)](this,_0x222e99),this[_0x910da1(0x38a)](this[_0x910da1(0x9ed)]()),this['refresh']();},Window_AutoBattleCancel[_0x579382(0x448)]['bgType']=function(){const _0x20297a=_0x579382;return VisuMZ[_0x20297a(0x675)][_0x20297a(0x27f)][_0x20297a(0x6d6)][_0x20297a(0x427)];},Window_AutoBattleCancel['prototype'][_0x579382(0x396)]=function(){const _0x1f0fe8=_0x579382;this[_0x1f0fe8(0x68f)][_0x1f0fe8(0x3f1)]();const _0x2f1b05=VisuMZ[_0x1f0fe8(0x675)][_0x1f0fe8(0x27f)]['AutoBattle'][_0x1f0fe8(0x8c5)],_0x46beb8=_0x2f1b05[_0x1f0fe8(0x7e1)](this[_0x1f0fe8(0x679)](),this[_0x1f0fe8(0xb09)]()),_0x185297=this['textSizeEx'](_0x46beb8)[_0x1f0fe8(0x259)],_0x2e5e3c=Math['floor']((this['innerWidth']-_0x185297)/0x2);this[_0x1f0fe8(0xadf)](_0x46beb8,_0x2e5e3c,0x0,_0x185297);},Window_AutoBattleCancel[_0x579382(0x448)][_0x579382(0x679)]=function(){const _0x5c61b5=_0x579382;return Imported[_0x5c61b5(0x214)]?TextManager[_0x5c61b5(0x9e8)]('ok'):VisuMZ[_0x5c61b5(0x675)][_0x5c61b5(0x27f)]['AutoBattle'][_0x5c61b5(0x66a)];},Window_AutoBattleCancel[_0x579382(0x448)][_0x579382(0xb09)]=function(){const _0x96408d=_0x579382;return Imported[_0x96408d(0x214)]?TextManager[_0x96408d(0x9e8)](_0x96408d(0x581)):VisuMZ['BattleCore'][_0x96408d(0x27f)][_0x96408d(0x6d6)][_0x96408d(0x92b)];},Window_AutoBattleCancel[_0x579382(0x448)][_0x579382(0x6b8)]=function(){const _0x1022e5=_0x579382;Window_Base[_0x1022e5(0x448)]['update']['call'](this),this[_0x1022e5(0x8bd)](),this[_0x1022e5(0x8a8)]();},Window_AutoBattleCancel[_0x579382(0x448)][_0x579382(0x8bd)]=function(){const _0x3b98bc=_0x579382;this[_0x3b98bc(0xcbc)]=BattleManager[_0x3b98bc(0x725)];},Window_AutoBattleCancel[_0x579382(0x448)][_0x579382(0x8a8)]=function(){const _0x3346c0=_0x579382;if(!BattleManager['_autoBattle'])return;(Input['isTriggered']('ok')||Input['isTriggered']('cancel')||TouchInput[_0x3346c0(0x3be)]()||TouchInput[_0x3346c0(0x758)]())&&(SoundManager[_0x3346c0(0x778)](),BattleManager[_0x3346c0(0x725)]=![],Input['clear'](),TouchInput[_0x3346c0(0x3f1)]());};function Window_EnemyName(){const _0x1ce613=_0x579382;this[_0x1ce613(0x921)](...arguments);}Window_EnemyName['prototype']=Object[_0x579382(0x766)](Window_StatusBase[_0x579382(0x448)]),Window_EnemyName[_0x579382(0x448)][_0x579382(0x622)]=Window_EnemyName,Window_EnemyName['prototype'][_0x579382(0x921)]=function(_0x1bf14e){const _0x29375b=_0x579382;this[_0x29375b(0x208)]=_0x1bf14e,this[_0x29375b(0x89d)]='';const _0x2ebd09=new Rectangle(0x0,0x0,Graphics[_0x29375b(0x77e)],this[_0x29375b(0x768)]()*0x4);Window_StatusBase['prototype'][_0x29375b(0x921)][_0x29375b(0xb95)](this,_0x2ebd09),this[_0x29375b(0x38a)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName['prototype'][_0x579382(0xc0d)]=function(){this['padding']=0x0;},Window_EnemyName[_0x579382(0x448)][_0x579382(0x82c)]=function(){const _0x455cf7=_0x579382;return $gameTroop[_0x455cf7(0x295)]()[this['_enemyID']];},Window_EnemyName[_0x579382(0x448)]['update']=function(){const _0x428efa=_0x579382;Window_StatusBase[_0x428efa(0x448)]['update']['call'](this),this[_0x428efa(0x82c)]()&&this[_0x428efa(0x82c)]()[_0x428efa(0x1d8)]()!==this['_text']&&(this[_0x428efa(0x89d)]=this[_0x428efa(0x82c)]()[_0x428efa(0x1d8)](),this[_0x428efa(0x396)]()),this['updateOpacity'](),this[_0x428efa(0x345)]();},Window_EnemyName[_0x579382(0x448)][_0x579382(0x746)]=function(){const _0x4fb54d=_0x579382;if(!this['enemy']()){if(_0x4fb54d(0x9fd)===_0x4fb54d(0x9d9)){const _0x41487d=this[_0x4fb54d(0x270)](),_0x4fa136=_0x41487d['damage'][_0x4fb54d(0x7d5)];_0x41487d[_0x4fb54d(0x210)][_0x4fb54d(0x7d5)]=this[_0x4fb54d(0x94f)];let _0x3a3b2b=_0x553e50[_0x4fb54d(0x675)]['Game_Action_evalDamageFormula'][_0x4fb54d(0xb95)](this,_0x8221e4);return _0x41487d[_0x4fb54d(0x210)][_0x4fb54d(0x7d5)]=_0x4fa136,_0x3a3b2b;}else{if(this[_0x4fb54d(0xacb)]>0x0)this[_0x4fb54d(0xacb)]-=0x10;}}else{if(this[_0x4fb54d(0x82c)]()[_0x4fb54d(0x84b)]()){if(_0x4fb54d(0x6d0)!=='kjgFh')this[_0x4fb54d(0x504)]=this[_0x4fb54d(0x521)],this[_0x4fb54d(0x426)]&&(this[_0x4fb54d(0x521)]=0x0,this[_0x4fb54d(0x504)]=0x0);else{if(this[_0x4fb54d(0xacb)]>0x0)this['contentsOpacity']-=0x10;}}else{if(SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x4fb54d(0xbc5)][_0x4fb54d(0xadb)][_0x4fb54d(0x6a5)]&&SceneManager[_0x4fb54d(0xbc5)][_0x4fb54d(0xadb)][_0x4fb54d(0xb0b)]['includes'](this['enemy']())){if(this[_0x4fb54d(0xacb)]<0xff)this[_0x4fb54d(0xacb)]+=0x10;}else this[_0x4fb54d(0xacb)]>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName[_0x579382(0x448)]['updatePosition']=function(){const _0x48afb2=_0x579382;if(!this[_0x48afb2(0x82c)]())return;SceneManager[_0x48afb2(0x692)]()?this['x']=Graphics[_0x48afb2(0x77e)]-this[_0x48afb2(0x82c)]()['battler']()['_baseX']:this['x']=this[_0x48afb2(0x82c)]()['battler']()[_0x48afb2(0xb43)];this['x']-=Math[_0x48afb2(0x78b)](this['width']/0x2),this['y']=this['enemy']()['battler']()['_baseY']-Math[_0x48afb2(0x78b)](this[_0x48afb2(0x768)]()*1.5);const _0x1d247c=VisuMZ[_0x48afb2(0x675)][_0x48afb2(0x27f)]['Enemy'];this['x']+=_0x1d247c[_0x48afb2(0x72a)]||0x0,this['y']+=_0x1d247c[_0x48afb2(0x95c)]||0x0;},Window_EnemyName[_0x579382(0x448)][_0x579382(0x3a3)]=function(){const _0x5e9bfd=_0x579382;Window_Base[_0x5e9bfd(0x448)][_0x5e9bfd(0x3a3)]['call'](this),this[_0x5e9bfd(0x68f)][_0x5e9bfd(0x4cc)]=VisuMZ['BattleCore'][_0x5e9bfd(0x27f)][_0x5e9bfd(0x8ff)][_0x5e9bfd(0x48f)];},Window_EnemyName[_0x579382(0x448)][_0x579382(0x396)]=function(){const _0x5db5c3=_0x579382;Window_StatusBase['prototype'][_0x5db5c3(0x396)][_0x5db5c3(0xb95)](this),this[_0x5db5c3(0x68f)][_0x5db5c3(0x3f1)]();if(!this['enemy']())return;this[_0x5db5c3(0xc91)]();},Window_EnemyName['prototype']['drawEnemyName']=function(){const _0x2ad332=_0x579382;this[_0x2ad332(0x89d)]=this[_0x2ad332(0x82c)]()[_0x2ad332(0x1d8)]();const _0x4ea482=this[_0x2ad332(0x694)](this[_0x2ad332(0x89d)])[_0x2ad332(0x259)],_0x55b50a=Math[_0x2ad332(0x78b)]((this[_0x2ad332(0x7ea)]-_0x4ea482)/0x2);this['drawTextEx'](this[_0x2ad332(0x89d)],_0x55b50a,0x0,_0x4ea482+0x8);},Window_BattleLog[_0x579382(0x448)][_0x579382(0xc26)]=function(){const _0x2ffd72=_0x579382;return VisuMZ[_0x2ffd72(0x675)][_0x2ffd72(0x27f)][_0x2ffd72(0xaf0)][_0x2ffd72(0xae1)];},Window_BattleLog[_0x579382(0x448)]['messageSpeed']=function(){const _0x3d20ed=_0x579382;return VisuMZ[_0x3d20ed(0x675)]['Settings'][_0x3d20ed(0xaf0)][_0x3d20ed(0x434)];},Window_BattleLog['prototype'][_0x579382(0x59c)]=function(){const _0xfcbdd3=_0x579382;return VisuMZ[_0xfcbdd3(0x675)][_0xfcbdd3(0x27f)][_0xfcbdd3(0xaf0)][_0xfcbdd3(0x7c3)];},Window_BattleLog['prototype']['isFastForward']=function(){return![];},Window_BattleLog[_0x579382(0x448)][_0x579382(0x3db)]=function(_0x3ecebe,_0x58497c){const _0x5c557a=_0x579382;this[_0x5c557a(0xa7d)](_0x5c557a(0x7e7)),BattleManager[_0x5c557a(0x3b2)](_0x3ecebe,_0x58497c),this[_0x5c557a(0x861)]();},Window_BattleLog[_0x579382(0x448)][_0x579382(0x7e7)]=function(){const _0x371e83=_0x579382;this[_0x371e83(0x861)]();},Window_BattleLog[_0x579382(0x448)]['push']=function(_0x1cb8c8){const _0x2a85e0=_0x579382,_0x894bc=Array[_0x2a85e0(0x448)][_0x2a85e0(0x989)]['call'](arguments,0x1),_0x3980ec={'name':_0x1cb8c8,'params':_0x894bc},_0x2e3467=this[_0x2a85e0(0x2ec)][_0x2a85e0(0xb6e)](_0x5a84fa=>_0x5a84fa['name'])[_0x2a85e0(0x903)]('actionSplicePoint');_0x2e3467>=0x0?_0x2a85e0(0x8d9)!==_0x2a85e0(0x8cf)?this[_0x2a85e0(0x2ec)][_0x2a85e0(0x1da)](_0x2e3467,0x0,_0x3980ec):(_0x2b69fb['BattleCore'][_0x2a85e0(0xbb1)][_0x2a85e0(0xb95)](this),_0x36a07c[_0x2a85e0(0xc1b)]()):this[_0x2a85e0(0x2ec)][_0x2a85e0(0x226)](_0x3980ec);},Window_BattleLog['prototype']['unshift']=function(_0x27e459){const _0x5ef820=_0x579382,_0x26e866=Array[_0x5ef820(0x448)][_0x5ef820(0x989)][_0x5ef820(0xb95)](arguments,0x1);this[_0x5ef820(0x2ec)][_0x5ef820(0xa7d)]({'name':_0x27e459,'params':_0x26e866});},Window_BattleLog[_0x579382(0x448)]['logActionList']=function(){const _0x2d7efd=_0x579382;if(!$gameTemp[_0x2d7efd(0xbb5)]())return;console[_0x2d7efd(0xa32)](this[_0x2d7efd(0x2ec)][_0x2d7efd(0xb6e)](_0x4d9947=>_0x4d9947[_0x2d7efd(0x1d8)])['join']('\x0a'));},VisuMZ['BattleCore'][_0x579382(0x52a)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0x396)],Window_BattleLog[_0x579382(0x448)][_0x579382(0x396)]=function(){const _0x1a1d18=_0x579382;this[_0x1a1d18(0x20d)]=!![];},VisuMZ['BattleCore'][_0x579382(0x65d)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0x6b8)],Window_BattleLog['prototype']['update']=function(){const _0x4e41ce=_0x579382;VisuMZ['BattleCore']['Window_BattleLog_update'][_0x4e41ce(0xb95)](this);if(this['_requestRefresh'])this[_0x4e41ce(0xcaa)]();},Window_BattleLog[_0x579382(0x448)][_0x579382(0xcaa)]=function(){const _0x367f08=_0x579382;this[_0x367f08(0x20d)]=![],VisuMZ[_0x367f08(0x675)][_0x367f08(0x52a)][_0x367f08(0xb95)](this);},Window_BattleLog[_0x579382(0x448)][_0x579382(0x89b)]=function(_0x46dd3d){const _0x586334=_0x579382;let _0x5969e9=VisuMZ[_0x586334(0x675)]['Settings'][_0x586334(0xaf0)][_0x586334(0x68c)][_0x586334(0x82b)]()['trim'](),_0x31f276=this[_0x586334(0x233)][_0x46dd3d];if(_0x31f276[_0x586334(0x299)](/<LEFT>/i))_0x5969e9=_0x586334(0xba9);else{if(_0x31f276['match'](/<CENTER>/i))_0x5969e9=_0x586334(0xc13);else _0x31f276[_0x586334(0x299)](/<RIGHT>/i)&&(_0x586334(0x8ba)!==_0x586334(0x8ba)?(this[_0x586334(0x6f0)]=!this['hasBeenDefeatedBefore'](),_0x54068e['registerDefeatedEnemy'](this[_0x586334(0x610)]())):_0x5969e9=_0x586334(0x2d5));}_0x31f276=_0x31f276[_0x586334(0xc42)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x31f276=_0x31f276['replace'](/\\I\[0\]/gi,'');const _0x2a4509=this['lineRect'](_0x46dd3d);this['contents'][_0x586334(0x50e)](_0x2a4509['x'],_0x2a4509['y'],_0x2a4509[_0x586334(0x259)],_0x2a4509[_0x586334(0x5ac)]);const _0x350e23=this[_0x586334(0x694)](_0x31f276)['width'];let _0x59a16a=_0x2a4509['x'];if(_0x5969e9==='center')_0x586334(0x229)===_0x586334(0x230)?this[_0x586334(0x43a)]():_0x59a16a+=(_0x2a4509[_0x586334(0x259)]-_0x350e23)/0x2;else{if(_0x5969e9==='right'){if('JbVsp'===_0x586334(0x9a5))_0x59a16a+=_0x2a4509[_0x586334(0x259)]-_0x350e23;else{let _0x3fcded=_0x19f468(_0x513bcb['$1']);while(_0x3fcded--){_0xffbc16['push'](this[_0x586334(0x24e)]()['trueRandomTarget']());}return this[_0x586334(0x7a1)](_0x3cf6ef);}}}this[_0x586334(0xadf)](_0x31f276,_0x59a16a,_0x2a4509['y'],_0x350e23+0x8);},Window_BattleLog[_0x579382(0x448)]['addText']=function(_0x14f7fe){const _0x48f47c=_0x579382;this[_0x48f47c(0x233)][_0x48f47c(0x226)](_0x14f7fe),this[_0x48f47c(0x396)](),this['callNextMethod']();},Window_BattleLog[_0x579382(0x448)][_0x579382(0xc3b)]=function(){const _0x2d06c5=_0x579382;let _0x144f73=![];switch(this['_waitMode']){case _0x2d06c5(0x514):_0x144f73=this[_0x2d06c5(0x748)][_0x2d06c5(0x460)]();break;case'movement':_0x144f73=this[_0x2d06c5(0x748)][_0x2d06c5(0x275)]();break;case'animation':_0x144f73=this[_0x2d06c5(0x748)][_0x2d06c5(0x344)]();break;case _0x2d06c5(0xb23):_0x144f73=this[_0x2d06c5(0x748)][_0x2d06c5(0x3d6)]();break;case _0x2d06c5(0xc84):_0x144f73=this['_spriteset'][_0x2d06c5(0x7a5)]();break;case _0x2d06c5(0xcbd):_0x144f73=this[_0x2d06c5(0x748)][_0x2d06c5(0x1de)]();break;}if(!_0x144f73){if('TMQpD'!==_0x2d06c5(0xade)){if(!_0x5be035[_0x2d06c5(0xc65)]())return;_0x47c1f8['ConvertParams'](_0x3e98b4,_0x20db7b);const _0x283ebd=_0x2808cf['CommonEventID'];_0x14bb7d[_0x2d06c5(0xbc5)][_0x2d06c5(0x36e)](_0x283ebd);}else this[_0x2d06c5(0x6ef)]='';}return _0x144f73;},Window_BattleLog[_0x579382(0x448)][_0x579382(0x3c6)]=function(){const _0x2568cc=_0x579382;this[_0x2568cc(0x9c8)]('animation');},Window_BattleLog[_0x579382(0x448)][_0x579382(0x204)]=function(){const _0x2f4289=_0x579382;this[_0x2f4289(0x9c8)](_0x2f4289(0xb23));},Window_BattleLog['prototype']['waitForJump']=function(){const _0x29e077=_0x579382;this['setWaitMode'](_0x29e077(0xc84));},Window_BattleLog['prototype']['waitForOpacity']=function(){const _0x34762d=_0x579382;this[_0x34762d(0x9c8)](_0x34762d(0xcbd));},Window_BattleLog[_0x579382(0x448)][_0x579382(0x27d)]=function(){const _0x513363=_0x579382,_0x592e1f=VisuMZ[_0x513363(0x675)][_0x513363(0x27f)][_0x513363(0xaf0)];if(!_0x592e1f[_0x513363(0x68a)])return;this[_0x513363(0x226)](_0x513363(0x693),_0x592e1f[_0x513363(0x847)][_0x513363(0x7e1)]($gameTroop[_0x513363(0x40d)]())),this['push'](_0x513363(0x638),_0x592e1f[_0x513363(0x245)]),this['push'](_0x513363(0x3f1));},Window_BattleLog['prototype'][_0x579382(0x54c)]=function(_0xf897aa,_0x3fa03d,_0x4c5601){const _0x3b6904=_0x579382;if(this['isCustomActionSequence'](_0x3fa03d)){if(_0x3b6904(0x7e4)===_0x3b6904(0x7e4))BattleManager[_0x3b6904(0x3b7)]();else{const _0x469620=_0x173b6a(_0x4f4de6['$1']);return[_0x46cb14[_0x3b6904(0x295)]()[_0x469620]];}}else this['usePremadeActionSequence'](_0xf897aa,_0x3fa03d,_0x4c5601);},Window_BattleLog[_0x579382(0x448)][_0x579382(0x3e6)]=function(_0x1f7eea){const _0x5e8996=_0x579382;if(!SceneManager[_0x5e8996(0xc65)]())return![];if(!_0x1f7eea)return![];if(!_0x1f7eea[_0x5e8996(0x270)]())return![];if(_0x1f7eea[_0x5e8996(0x270)]()[_0x5e8996(0x560)][_0x5e8996(0x299)](/<CUSTOM ACTION SEQUENCE>/i)){if('Hkesn'===_0x5e8996(0x2f1))_0x27729d+=_0x344db3;else return!![];}if(DataManager[_0x5e8996(0x81f)](_0x1f7eea[_0x5e8996(0x270)]()))return!![];return![];},Window_BattleLog[_0x579382(0x448)]['usePremadeActionSequence']=function(_0x25a4da,_0x38fcc2,_0x21365d){const _0x5b7587=_0x579382,_0xb540ab=_0x38fcc2['item']();this['setupActionSet'](_0x25a4da,_0x38fcc2,_0x21365d),this[_0x5b7587(0x850)](_0x25a4da,_0x38fcc2,_0x21365d),this[_0x5b7587(0x886)](_0x25a4da,_0x38fcc2,_0x21365d);},Window_BattleLog[_0x579382(0x448)][_0x579382(0x40c)]=function(_0x228b43,_0x524531){const _0x15cf99=_0x579382,_0x444ffa=VisuMZ[_0x15cf99(0x675)][_0x15cf99(0x27f)]['BattleLog'];if(_0x444ffa['ActionCenteredName']){if(_0x15cf99(0xb91)===_0x15cf99(0x380)){const _0x503265=_0x15bb5d['getDamageStyle'](this[_0x15cf99(0x4f0)]),_0x1df922=_0x56776e['DamageStyles'][_0x503265];if(!_0x1df922)return this['getItemDamageAmountLabelOriginal']();const _0x3e1d07=_0x15cf99(0x5ef)[_0x15cf99(0x7e1)](this[_0x15cf99(0x4f0)]['damage'][_0x15cf99(0x3e4)]),_0x3d9841=[null,_0x5c8029['hp'],_0x3543c0['mp'],_0xe34628['hp'],_0x329899['mp'],_0xacb059['hp'],_0x209a9a['mp']][this[_0x15cf99(0x4f0)][_0x15cf99(0x210)]['type']];return _0x1df922[_0x3e1d07][_0x15cf99(0x7e1)](_0x3d9841);}else this[_0x15cf99(0x226)](_0x15cf99(0x693),'<CENTER>%1'[_0x15cf99(0x7e1)](DataManager[_0x15cf99(0xb6c)](_0x524531)));}if(DataManager[_0x15cf99(0x5ae)](_0x524531)){if(_0x444ffa['ActionSkillMsg1'])this['displayItemMessage'](_0x524531[_0x15cf99(0xa30)],_0x228b43,_0x524531);if(_0x444ffa[_0x15cf99(0x5a0)])this['displayItemMessage'](_0x524531[_0x15cf99(0x554)],_0x228b43,_0x524531);}else{if(_0x444ffa[_0x15cf99(0xc2d)])this['displayItemMessage'](TextManager[_0x15cf99(0x2ac)],_0x228b43,_0x524531);}},Window_BattleLog['prototype'][_0x579382(0xa5f)]=function(_0x33e433,_0x287418,_0x16392e){const _0x18e00d=_0x579382,_0x5a0be7=_0x287418[_0x18e00d(0x270)]();this[_0x18e00d(0x40c)](_0x33e433,_0x5a0be7),this[_0x18e00d(0x226)](_0x18e00d(0x227),_0x33e433,_0x16392e,!![]),this['push']('performActionStart',_0x33e433,_0x287418),this['push'](_0x18e00d(0xc04)),this['push'](_0x18e00d(0x651),_0x33e433,_0x287418),this[_0x18e00d(0x226)](_0x18e00d(0x3c6));},Window_BattleLog['prototype'][_0x579382(0x850)]=function(_0x2223dd,_0x54fa3d,_0x24b59c){const _0x4d095c=_0x579382;if(this[_0x4d095c(0x567)](_0x54fa3d))this['autoMeleeSingleTargetActionSet'](_0x2223dd,_0x54fa3d,_0x24b59c);else{if(this['isMeleeMultiTargetAction'](_0x54fa3d))'VUNYn'!==_0x4d095c(0x5a7)?_0x46f1b1['repeats']=_0x40a85a['max'](0x1,_0x51ec60(_0x10cc63['$1'])):this[_0x4d095c(0xc70)](_0x2223dd,_0x54fa3d,_0x24b59c);else{if(_0x54fa3d[_0x4d095c(0x337)]()){if(_0x4d095c(0xb16)!==_0x4d095c(0x845))this[_0x4d095c(0x37d)](_0x2223dd,_0x54fa3d,_0x24b59c);else{const _0x5f1d5e=_0xbcb9b5[_0x4d095c(0x6b7)]();_0x3539c6[_0x4d095c(0x675)][_0x4d095c(0xa6c)][_0x4d095c(0xb95)](this);if(_0x5f1d5e){if(_0x5f1d5e===_0x517458[_0x4d095c(0x6b7)]())return;if(_0x5f1d5e===_0x34d61b[_0x4d095c(0x7c7)])return;if(_0x5f1d5e['battler']())_0x5f1d5e[_0x4d095c(0x368)]()[_0x4d095c(0x44f)]();}}}else _0x4d095c(0x909)===_0x4d095c(0x909)?this['wholeActionSet'](_0x2223dd,_0x54fa3d,_0x24b59c):(_0x4ba856+=_0x26c858,_0x661aa0+=_0x32d3d1['isActor']()?-_0x35b65c:_0xb09446);}}},Window_BattleLog['prototype'][_0x579382(0x7b9)]=function(_0x520269,_0x31c29e,_0x1254b3,_0x257567){const _0x6a1c15=_0x579382;if(_0x31c29e){const _0x748032=_0x520269['battler']();this[_0x6a1c15(0x226)](_0x6a1c15(0x617),[_0x520269],_0x1254b3,_0x257567),this[_0x6a1c15(0x226)](_0x6a1c15(0x7c6),_0x520269,_0x748032[_0x6a1c15(0x605)],_0x748032[_0x6a1c15(0x486)],_0x257567,![],_0x6a1c15(0xc05)),this['push']('requestMotion',[_0x520269],_0x6a1c15(0x4e9)),this[_0x6a1c15(0x226)]('waitForMovement'),this[_0x6a1c15(0x226)](_0x6a1c15(0x305),[_0x520269],_0x6a1c15(0x615));}},Window_BattleLog[_0x579382(0x448)][_0x579382(0x567)]=function(_0x246392){const _0x4d9279=_0x579382;if(!_0x246392[_0x4d9279(0xaee)]())return![];if(!_0x246392[_0x4d9279(0x2c1)]())return![];if(!_0x246392[_0x4d9279(0x5da)]())return![];return VisuMZ[_0x4d9279(0x675)][_0x4d9279(0x27f)][_0x4d9279(0x765)][_0x4d9279(0x20f)];},Window_BattleLog[_0x579382(0x448)]['autoMeleeSingleTargetActionSet']=function(_0x6b582c,_0x4518f9,_0x117b5c){const _0x44980f=_0x579382,_0x2e86b5=_0x6b582c[_0x44980f(0x407)]()['type']<0x2,_0x31e875=0x14,_0x56e2d8=0x30;_0x2e86b5&&(this[_0x44980f(0x226)](_0x44980f(0x617),[_0x6b582c],_0x56e2d8,_0x31e875),this[_0x44980f(0x226)](_0x44980f(0x7dd),_0x6b582c,_0x117b5c,_0x44980f(0x9d2),_0x31e875,!![],'Linear',!![]),this[_0x44980f(0x226)](_0x44980f(0x305),[_0x6b582c],'walk'),this[_0x44980f(0x226)](_0x44980f(0xc04)));let _0x5c1154=_0x4518f9[_0x44980f(0x89f)]()?this[_0x44980f(0x4da)](_0x6b582c):0x1;for(let _0x40a04e=0x0;_0x40a04e<_0x5c1154;_0x40a04e++){_0x44980f(0x63e)===_0x44980f(0x63e)?(_0x4518f9[_0x44980f(0x89f)]()&&_0x6b582c[_0x44980f(0xc58)]()&&this[_0x44980f(0x226)]('setActiveWeaponSet',_0x6b582c,_0x40a04e),_0x4518f9[_0x44980f(0x270)]()[_0x44980f(0x944)]<0x0?this[_0x44980f(0x37d)](_0x6b582c,_0x4518f9,_0x117b5c):this[_0x44980f(0x6cc)](_0x6b582c,_0x4518f9,_0x117b5c)):this[_0x44980f(0x9d5)]=_0x44980f(0xc74);}_0x4518f9[_0x44980f(0x89f)]()&&_0x6b582c['isActor']()&&this[_0x44980f(0x226)]('clearActiveWeaponSet',_0x6b582c),this[_0x44980f(0x226)]('applyImmortal',_0x6b582c,_0x117b5c,![]),this[_0x44980f(0x7b9)](_0x6b582c,_0x2e86b5,_0x56e2d8,_0x31e875);},Window_BattleLog[_0x579382(0x448)][_0x579382(0x22f)]=function(_0x528c29){const _0xc33d28=_0x579382;if(!_0x528c29[_0xc33d28(0xaee)]())return![];if(!_0x528c29[_0xc33d28(0xa87)]())return![];if(!_0x528c29[_0xc33d28(0x5da)]())return![];return VisuMZ[_0xc33d28(0x675)]['Settings'][_0xc33d28(0x765)]['AutoMeleeAoE'];},Window_BattleLog[_0x579382(0x448)][_0x579382(0xc70)]=function(_0x417c2a,_0x2a3f8e,_0x14dbed){const _0x392285=_0x579382,_0x28a85e=_0x417c2a[_0x392285(0x407)]()[_0x392285(0x3e4)]<0x2,_0x5bf857=0x14,_0x45526c=0x30;_0x28a85e&&(this[_0x392285(0x226)](_0x392285(0x617),[_0x417c2a],_0x45526c,_0x5bf857),this[_0x392285(0x226)](_0x392285(0x7dd),_0x417c2a,_0x14dbed,_0x392285(0x7ee),_0x5bf857,!![],_0x392285(0xc05),!![]),this[_0x392285(0x226)]('requestMotion',[_0x417c2a],_0x392285(0x615)),this[_0x392285(0x226)](_0x392285(0xc04)));let _0x3e1f33=_0x2a3f8e[_0x392285(0x89f)]()?this[_0x392285(0x4da)](_0x417c2a):0x1;for(let _0x336119=0x0;_0x336119<_0x3e1f33;_0x336119++){_0x2a3f8e[_0x392285(0x89f)]()&&_0x417c2a[_0x392285(0xc58)]()&&(_0x392285(0xca1)===_0x392285(0xca1)?this[_0x392285(0x226)](_0x392285(0x6ed),_0x417c2a,_0x336119):(_0x477255[_0x392285(0x675)][_0x392285(0x81a)][_0x392285(0xb95)](this,_0xc7512b),this[_0x392285(0xa31)]()&&_0x39b0e0===this[_0x392285(0x7e5)]()&&this[_0x392285(0x884)]()&&(this[_0x392285(0x6f0)]=![]),!this['_tempActor']&&!this[_0x392285(0xc92)]&&_0xc2412e['isSceneBattle']()&&this[_0x392285(0x970)]())),this[_0x392285(0x6cc)](_0x417c2a,_0x2a3f8e,_0x14dbed);}_0x2a3f8e[_0x392285(0x89f)]()&&_0x417c2a[_0x392285(0xc58)]()&&('QYnAg'===_0x392285(0x5a3)?_0x5a1f57[_0x392285(0xc72)](_0x218931[_0x392285(0x4f3)],!![]):this[_0x392285(0x226)](_0x392285(0x53f),_0x417c2a)),this[_0x392285(0x226)](_0x392285(0x227),_0x417c2a,_0x14dbed,![]),this['addMeleeReturnActionSet'](_0x417c2a,_0x28a85e,_0x45526c,_0x5bf857);},Window_BattleLog[_0x579382(0x448)][_0x579382(0x37d)]=function(_0x437695,_0x50e6cf,_0x1d15d1){const _0x3e31f3=_0x579382,_0x1e009c=_0x50e6cf[_0x3e31f3(0x270)]();for(const _0x54af8b of _0x1d15d1){if(!_0x54af8b)continue;this[_0x3e31f3(0x226)](_0x3e31f3(0xa77),_0x437695,_0x50e6cf),this[_0x3e31f3(0x226)](_0x3e31f3(0x638),Sprite_Battler[_0x3e31f3(0x3d3)]),this[_0x3e31f3(0x226)](_0x3e31f3(0x2cc),_0x437695,[_0x54af8b],_0x1e009c[_0x3e31f3(0x944)]),this['push'](_0x3e31f3(0x638),0x18),this[_0x3e31f3(0x226)](_0x3e31f3(0x3db),_0x437695,_0x54af8b);}},Window_BattleLog[_0x579382(0x448)][_0x579382(0x6cc)]=function(_0x34052c,_0x234ea4,_0x14a982){const _0x5a9057=_0x579382,_0x475b81=_0x234ea4[_0x5a9057(0x270)]();this[_0x5a9057(0x226)]('performAction',_0x34052c,_0x234ea4),this['push']('waitCount',Sprite_Battler['_motionSpeed']),this[_0x5a9057(0x226)](_0x5a9057(0x2cc),_0x34052c,_0x14a982[_0x5a9057(0x495)](),_0x475b81[_0x5a9057(0x944)]),this[_0x5a9057(0x226)](_0x5a9057(0x3c6));for(const _0x440ed1 of _0x14a982){if('rwSwT'===_0x5a9057(0x696))_0x7691a4=_0x4a9c07['x']+_0x536532[_0x5a9057(0x355)]+0x8;else{if(!_0x440ed1)continue;this[_0x5a9057(0x226)](_0x5a9057(0x3db),_0x34052c,_0x440ed1);}}},Window_BattleLog[_0x579382(0x448)][_0x579382(0x886)]=function(_0x4e264e,_0x288a21,_0x290ee5){const _0x1f1de5=_0x579382,_0x4a14cb=_0x288a21[_0x1f1de5(0x270)]();this['push'](_0x1f1de5(0x227),_0x4e264e,_0x290ee5,![]),this[_0x1f1de5(0x226)]('waitForNewLine'),this[_0x1f1de5(0x226)](_0x1f1de5(0x7fc)),this[_0x1f1de5(0x226)]('clear'),this[_0x1f1de5(0x226)]('performActionEnd',_0x4e264e),this[_0x1f1de5(0x226)]('waitForMovement');},Window_BattleLog[_0x579382(0x448)]['endAction']=function(_0x3bfda5){},VisuMZ[_0x579382(0x675)][_0x579382(0x244)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0x56f)],Window_BattleLog[_0x579382(0x448)]['displayCurrentState']=function(_0x3fe5aa){const _0x7b093c=_0x579382;if(!VisuMZ['BattleCore'][_0x7b093c(0x27f)][_0x7b093c(0xaf0)][_0x7b093c(0x964)])return;VisuMZ[_0x7b093c(0x675)][_0x7b093c(0x244)]['call'](this,_0x3fe5aa);},Window_BattleLog['prototype'][_0x579382(0xa9d)]=function(_0x2ab716){const _0x59ba14=_0x579382;this[_0x59ba14(0x226)](_0x59ba14(0x7ae),_0x2ab716);VisuMZ[_0x59ba14(0x675)]['Settings'][_0x59ba14(0x765)]['CounterPlayback']&&this['push'](_0x59ba14(0x2cc),_0x2ab716,[BattleManager['_subject']],-0x1);if(!VisuMZ[_0x59ba14(0x675)][_0x59ba14(0x27f)]['BattleLog']['ShowCounter'])return;this['push'](_0x59ba14(0x693),TextManager[_0x59ba14(0x910)][_0x59ba14(0x7e1)](_0x2ab716[_0x59ba14(0x1d8)]()));},Window_BattleLog[_0x579382(0x448)][_0x579382(0x558)]=function(_0x48ecac){const _0x55b991=_0x579382;this[_0x55b991(0x226)]('performReflection',_0x48ecac);if(!VisuMZ[_0x55b991(0x675)]['Settings'][_0x55b991(0xaf0)]['ShowReflect'])return;this['push']('addText',TextManager['magicReflection'][_0x55b991(0x7e1)](_0x48ecac[_0x55b991(0x1d8)]()));},Window_BattleLog[_0x579382(0x448)]['displayReflectionPlayBack']=function(_0x3ac8c8,_0x350dbc){const _0x4c0d62=_0x579382;if(VisuMZ[_0x4c0d62(0x675)][_0x4c0d62(0x27f)]['ActionSequence'][_0x4c0d62(0x682)]){const _0x586094=_0x350dbc[_0x4c0d62(0x270)]();this[_0x4c0d62(0x226)](_0x4c0d62(0x2cc),_0x3ac8c8,[_0x3ac8c8],_0x586094[_0x4c0d62(0x944)]);}},Window_BattleLog[_0x579382(0x448)][_0x579382(0xc96)]=function(_0x5f155e,_0x4ae585){const _0x1a8408=_0x579382;this[_0x1a8408(0x226)](_0x1a8408(0x52d),_0x5f155e,_0x4ae585);if(!VisuMZ[_0x1a8408(0x675)][_0x1a8408(0x27f)][_0x1a8408(0xaf0)]['ShowSubstitute'])return;const _0x4f4844=_0x5f155e[_0x1a8408(0x1d8)](),_0x5c3859=TextManager['substitute'][_0x1a8408(0x7e1)](_0x4f4844,_0x4ae585[_0x1a8408(0x1d8)]());this['push'](_0x1a8408(0x693),_0x5c3859);},VisuMZ[_0x579382(0x675)][_0x579382(0x489)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0xc78)],Window_BattleLog[_0x579382(0x448)][_0x579382(0xc78)]=function(_0x1ba7df,_0x15876a){const _0x5c39ad=_0x579382;VisuMZ[_0x5c39ad(0x675)]['Window_BattleLog_displayActionResults'][_0x5c39ad(0xb95)](this,_0x1ba7df,_0x15876a);},VisuMZ[_0x579382(0x675)][_0x579382(0xbc6)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0xc17)],Window_BattleLog[_0x579382(0x448)][_0x579382(0xc17)]=function(_0x51b3dc){const _0x485223=_0x579382;if(!VisuMZ[_0x485223(0x675)][_0x485223(0x27f)][_0x485223(0xaf0)][_0x485223(0x76a)])return;VisuMZ['BattleCore']['Window_BattleLog_displayFailure'][_0x485223(0xb95)](this,_0x51b3dc);},VisuMZ[_0x579382(0x675)][_0x579382(0x74a)]=Window_BattleLog[_0x579382(0x448)]['displayCritical'],Window_BattleLog[_0x579382(0x448)]['displayCritical']=function(_0x358227){const _0x2f92bd=_0x579382;if(!VisuMZ[_0x2f92bd(0x675)][_0x2f92bd(0x27f)][_0x2f92bd(0xaf0)][_0x2f92bd(0xa40)])return;VisuMZ[_0x2f92bd(0x675)][_0x2f92bd(0x74a)]['call'](this,_0x358227);},VisuMZ[_0x579382(0x675)][_0x579382(0xb72)]=Window_BattleLog['prototype'][_0x579382(0x7e8)],Window_BattleLog[_0x579382(0x448)]['displayMiss']=function(_0x493ef0){const _0x346b2d=_0x579382;if(!VisuMZ[_0x346b2d(0x675)][_0x346b2d(0x27f)]['BattleLog'][_0x346b2d(0xbae)])this[_0x346b2d(0x226)](_0x346b2d(0x1dd),_0x493ef0);else{if(_0x346b2d(0xb6b)===_0x346b2d(0xb6b))VisuMZ['BattleCore']['Window_BattleLog_displayMiss'][_0x346b2d(0xb95)](this,_0x493ef0);else return 0x1*this['_growY'];}},VisuMZ['BattleCore'][_0x579382(0xa51)]=Window_BattleLog[_0x579382(0x448)]['displayEvasion'],Window_BattleLog[_0x579382(0x448)][_0x579382(0x4e2)]=function(_0xa8d2b8){const _0x2059ad=_0x579382;if(!VisuMZ[_0x2059ad(0x675)][_0x2059ad(0x27f)][_0x2059ad(0xaf0)][_0x2059ad(0xbae)]){if(_0x2059ad(0x70a)!==_0x2059ad(0x70a)){_0x56ee33['prototype'][_0x2059ad(0x396)][_0x2059ad(0xb95)](this),this['contents'][_0x2059ad(0x3f1)]();if(!this[_0x2059ad(0x82c)]())return;this['drawEnemyName']();}else _0xa8d2b8[_0x2059ad(0x1b1)]()[_0x2059ad(0x517)]?this[_0x2059ad(0x226)](_0x2059ad(0xab9),_0xa8d2b8):this[_0x2059ad(0x226)](_0x2059ad(0x6eb),_0xa8d2b8);}else _0x2059ad(0x918)!==_0x2059ad(0xbbb)?VisuMZ[_0x2059ad(0x675)][_0x2059ad(0xa51)][_0x2059ad(0xb95)](this,_0xa8d2b8):_0x86ed1d[_0x2059ad(0x7c7)][_0x2059ad(0x1d3)](_0x381c4c);},Window_BattleLog[_0x579382(0x448)]['displayHpDamage']=function(_0x57d97f){const _0xff1bcc=_0x579382;_0x57d97f[_0xff1bcc(0x1b1)]()[_0xff1bcc(0x52c)]&&(_0x57d97f[_0xff1bcc(0x1b1)]()[_0xff1bcc(0xa1e)]>0x0&&!_0x57d97f[_0xff1bcc(0x1b1)]()[_0xff1bcc(0x5b4)]&&this[_0xff1bcc(0x226)](_0xff1bcc(0x2c3),_0x57d97f),_0x57d97f[_0xff1bcc(0x1b1)]()[_0xff1bcc(0xa1e)]<0x0&&this[_0xff1bcc(0x226)]('performRecovery',_0x57d97f),VisuMZ['BattleCore']['Settings']['BattleLog'][_0xff1bcc(0x646)]&&this[_0xff1bcc(0x226)](_0xff1bcc(0x693),this[_0xff1bcc(0x5bd)](_0x57d97f)));},VisuMZ[_0x579382(0x675)][_0x579382(0x90f)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0x92d)],Window_BattleLog[_0x579382(0x448)]['displayMpDamage']=function(_0x462691){const _0xba182a=_0x579382;if(!VisuMZ[_0xba182a(0x675)][_0xba182a(0x27f)][_0xba182a(0xaf0)]['ShowMpDmg'])return;VisuMZ[_0xba182a(0x675)][_0xba182a(0x90f)][_0xba182a(0xb95)](this,_0x462691);},VisuMZ[_0x579382(0x675)][_0x579382(0x2db)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0x5c4)],Window_BattleLog['prototype'][_0x579382(0x5c4)]=function(_0x27a845){const _0x50166e=_0x579382;if(!VisuMZ[_0x50166e(0x675)][_0x50166e(0x27f)][_0x50166e(0xaf0)][_0x50166e(0x451)])return;VisuMZ[_0x50166e(0x675)]['Window_BattleLog_displayTpDamage']['call'](this,_0x27a845);},Window_BattleLog[_0x579382(0x448)][_0x579382(0x570)]=function(_0x506fc4){const _0x388bc5=_0x579382;_0x506fc4['result']()[_0x388bc5(0xca0)]()&&(this[_0x388bc5(0x226)]('pushBaseLine'),this[_0x388bc5(0x265)](_0x506fc4),this[_0x388bc5(0x936)](_0x506fc4),this['push'](_0x388bc5(0x262)));},Window_BattleLog[_0x579382(0x448)][_0x579382(0x88b)]=function(_0x2525f6){const _0x2b4a5d=_0x579382,_0x308534=_0x2525f6[_0x2b4a5d(0x1b1)](),_0x17d3d8=_0x308534['addedStateObjects']();for(const _0x54574c of _0x17d3d8){if(_0x2b4a5d(0x5a6)!==_0x2b4a5d(0x5a6)){if(!_0x15325b[_0x2b4a5d(0x459)](_0x4720c7))return this[_0x2b4a5d(0xca3)](_0x3ec7ce);_0x3ad0c4['BattleCore'][_0x2b4a5d(0x46d)]['call'](this,_0x5d02c8);}else{const _0x128cc7=_0x2525f6[_0x2b4a5d(0xc58)]()?_0x54574c['message1']:_0x54574c[_0x2b4a5d(0x554)];_0x128cc7&&VisuMZ[_0x2b4a5d(0x675)][_0x2b4a5d(0x27f)][_0x2b4a5d(0xaf0)]['ShowAddedState']&&(this[_0x2b4a5d(0x226)](_0x2b4a5d(0x3e5)),this[_0x2b4a5d(0x226)]('popBaseLine'),this[_0x2b4a5d(0x226)](_0x2b4a5d(0xa21)),this[_0x2b4a5d(0x226)]('addText',_0x128cc7['format'](_0x2525f6['name']())),this[_0x2b4a5d(0x226)](_0x2b4a5d(0x7c8))),_0x54574c['id']===_0x2525f6[_0x2b4a5d(0x7e5)]()&&this[_0x2b4a5d(0x226)](_0x2b4a5d(0x97f),_0x2525f6);}}},Window_BattleLog[_0x579382(0x448)][_0x579382(0x3e5)]=function(){},Window_BattleLog[_0x579382(0x448)][_0x579382(0x418)]=function(_0x5316c0){const _0x4bc9b7=_0x579382;if(!VisuMZ[_0x4bc9b7(0x675)][_0x4bc9b7(0x27f)][_0x4bc9b7(0xaf0)][_0x4bc9b7(0x550)])return;const _0x3d4103=_0x5316c0[_0x4bc9b7(0x1b1)](),_0x3ee154=_0x3d4103[_0x4bc9b7(0xba2)]();for(const _0x2e97e6 of _0x3ee154){_0x4bc9b7(0xc97)!==_0x4bc9b7(0xc97)?_0x4866ec+=_0x1a84c9[_0x4bc9b7(0x2f5)](_0x33bb0b[_0x4bc9b7(0xa1e)]):_0x2e97e6['message4']&&(this[_0x4bc9b7(0x226)]('fnordRemovedStates'),this['push'](_0x4bc9b7(0x7b1)),this[_0x4bc9b7(0x226)](_0x4bc9b7(0xa21)),this['push'](_0x4bc9b7(0x693),_0x2e97e6[_0x4bc9b7(0x334)][_0x4bc9b7(0x7e1)](_0x5316c0[_0x4bc9b7(0x1d8)]())),this[_0x4bc9b7(0x226)](_0x4bc9b7(0x7c8)));}},Window_BattleLog[_0x579382(0x448)][_0x579382(0x283)]=function(){},Window_BattleLog[_0x579382(0x448)][_0x579382(0x936)]=function(_0x4fe1fe){const _0xdac23f=_0x579382,_0x1750b3=VisuMZ['BattleCore'][_0xdac23f(0x27f)]['BattleLog'],_0x52e237=_0x4fe1fe[_0xdac23f(0x1b1)]();if(_0x1750b3[_0xdac23f(0x843)])this[_0xdac23f(0x6ac)](_0x4fe1fe,_0x52e237['addedBuffs'],TextManager['buffAdd']);if(_0x1750b3['ShowAddedDebuff'])this[_0xdac23f(0x6ac)](_0x4fe1fe,_0x52e237[_0xdac23f(0xc20)],TextManager[_0xdac23f(0x672)]);if(_0x1750b3[_0xdac23f(0x447)])this[_0xdac23f(0x6ac)](_0x4fe1fe,_0x52e237[_0xdac23f(0x415)],TextManager[_0xdac23f(0x387)]);},Window_BattleLog[_0x579382(0x448)]['displayBuffs']=function(_0x134df9,_0x4edf68,_0x47e96f){const _0x4aaeeb=_0x579382;for(const _0x2c5041 of _0x4edf68){const _0x41dc26=_0x47e96f[_0x4aaeeb(0x7e1)](_0x134df9[_0x4aaeeb(0x1d8)](),TextManager['param'](_0x2c5041));this[_0x4aaeeb(0x226)](_0x4aaeeb(0x7b1)),this[_0x4aaeeb(0x226)](_0x4aaeeb(0xa21)),this['push'](_0x4aaeeb(0x693),_0x41dc26),this[_0x4aaeeb(0x226)](_0x4aaeeb(0x7c8));}},VisuMZ[_0x579382(0x675)][_0x579382(0xae0)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0x3f1)],Window_BattleLog['prototype'][_0x579382(0x3f1)]=function(){const _0x454b91=_0x579382;VisuMZ[_0x454b91(0x675)][_0x454b91(0xae0)]['call'](this),this[_0x454b91(0x861)]();},VisuMZ[_0x579382(0x675)][_0x579382(0x5a1)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0xa21)],Window_BattleLog[_0x579382(0x448)]['pushBaseLine']=function(){const _0x127187=_0x579382;VisuMZ[_0x127187(0x675)][_0x127187(0x5a1)][_0x127187(0xb95)](this),this[_0x127187(0x861)]();},VisuMZ['BattleCore'][_0x579382(0x232)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0x7b1)],Window_BattleLog[_0x579382(0x448)][_0x579382(0x7b1)]=function(){const _0x2c8892=_0x579382;VisuMZ[_0x2c8892(0x675)][_0x2c8892(0x232)][_0x2c8892(0xb95)](this),this[_0x2c8892(0xcaa)](),this[_0x2c8892(0x861)]();},VisuMZ['BattleCore']['Window_BattleLog_popupDamage']=Window_BattleLog['prototype'][_0x579382(0x62b)],Window_BattleLog[_0x579382(0x448)]['popupDamage']=function(_0x2d9c23){const _0x37cfaa=_0x579382;VisuMZ[_0x37cfaa(0x675)]['Window_BattleLog_popupDamage'][_0x37cfaa(0xb95)](this,_0x2d9c23),this[_0x37cfaa(0x861)]();},Window_BattleLog[_0x579382(0x448)][_0x579382(0x262)]=function(){const _0x1eefe8=_0x579382;let _0x3f54a4=0x0;this[_0x1eefe8(0x9ca)][_0x1eefe8(0x237)]>0x0&&(_0x3f54a4=this[_0x1eefe8(0x9ca)][this[_0x1eefe8(0x9ca)]['length']-0x1]);if(this[_0x1eefe8(0x233)][_0x1eefe8(0x237)]>_0x3f54a4){if(_0x1eefe8(0x2e9)!==_0x1eefe8(0x2e9))return this[_0x1eefe8(0xbc4)]();else this[_0x1eefe8(0x7c8)]();}else'uVipd'===_0x1eefe8(0x9c5)?(_0x14fdf1[_0x1eefe8(0x448)]['performMagicEvasion'][_0x1eefe8(0xb95)](this),this[_0x1eefe8(0x305)]('evade')):this[_0x1eefe8(0x861)]();},VisuMZ['BattleCore'][_0x579382(0x691)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0xa37)],Window_BattleLog[_0x579382(0x448)]['performActionStart']=function(_0x52dbb4,_0x27c0f1){const _0x6afeb=_0x579382;VisuMZ[_0x6afeb(0x675)][_0x6afeb(0x691)][_0x6afeb(0xb95)](this,_0x52dbb4,_0x27c0f1),this[_0x6afeb(0x861)]();},VisuMZ[_0x579382(0x675)][_0x579382(0x762)]=Window_BattleLog['prototype']['performAction'],Window_BattleLog[_0x579382(0x448)]['performAction']=function(_0x4f247e,_0xff20a0){const _0x2d3221=_0x579382;VisuMZ[_0x2d3221(0x675)]['Window_BattleLog_performAction'][_0x2d3221(0xb95)](this,_0x4f247e,_0xff20a0),this[_0x2d3221(0x861)]();},VisuMZ[_0x579382(0x675)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x579382(0x448)][_0x579382(0xa4e)],Window_BattleLog['prototype']['performActionEnd']=function(_0x1f1b8c){const _0x5105d1=_0x579382;VisuMZ[_0x5105d1(0x675)][_0x5105d1(0x98c)][_0x5105d1(0xb95)](this,_0x1f1b8c);for(const _0x2f0d92 of BattleManager[_0x5105d1(0x844)]()){if(_0x5105d1(0x690)!==_0x5105d1(0x761)){if(!_0x2f0d92)continue;if(_0x2f0d92[_0x5105d1(0x84b)]())continue;_0x2f0d92[_0x5105d1(0x74d)]();}else{const _0x27f04a={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x358b47=_0x2a4ac5['list']['pop']();_0x7fd638['list']['unshift'](_0x27f04a),_0x2a6702['list']['unshift'](_0x358b47);}}this[_0x5105d1(0x861)]();},VisuMZ['BattleCore'][_0x579382(0x48a)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0x2c3)],Window_BattleLog[_0x579382(0x448)][_0x579382(0x2c3)]=function(_0x301eeb){const _0x2087bc=_0x579382;VisuMZ[_0x2087bc(0x675)]['Window_BattleLog_performDamage'][_0x2087bc(0xb95)](this,_0x301eeb),this['callNextMethod']();},VisuMZ[_0x579382(0x675)][_0x579382(0x5df)]=Window_BattleLog[_0x579382(0x448)]['performMiss'],Window_BattleLog[_0x579382(0x448)]['performMiss']=function(_0x2ff99f){const _0x498043=_0x579382;VisuMZ[_0x498043(0x675)][_0x498043(0x5df)][_0x498043(0xb95)](this,_0x2ff99f),this[_0x498043(0x861)]();},VisuMZ[_0x579382(0x675)][_0x579382(0x241)]=Window_BattleLog[_0x579382(0x448)]['performRecovery'],Window_BattleLog[_0x579382(0x448)][_0x579382(0x2b3)]=function(_0x321a59){const _0x4fa5c2=_0x579382;VisuMZ[_0x4fa5c2(0x675)]['Window_BattleLog_performRecovery'][_0x4fa5c2(0xb95)](this,_0x321a59),this['callNextMethod']();},VisuMZ[_0x579382(0x675)][_0x579382(0x5fb)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0xab9)],Window_BattleLog[_0x579382(0x448)][_0x579382(0xab9)]=function(_0xc13251){const _0x259847=_0x579382;VisuMZ[_0x259847(0x675)][_0x259847(0x5fb)][_0x259847(0xb95)](this,_0xc13251),this[_0x259847(0x861)]();},VisuMZ[_0x579382(0x675)][_0x579382(0xa44)]=Window_BattleLog[_0x579382(0x448)][_0x579382(0x6eb)],Window_BattleLog[_0x579382(0x448)]['performMagicEvasion']=function(_0x33f84a){const _0x16b63c=_0x579382;VisuMZ['BattleCore'][_0x16b63c(0xa44)][_0x16b63c(0xb95)](this,_0x33f84a),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performCounter']=Window_BattleLog['prototype'][_0x579382(0x7ae)],Window_BattleLog['prototype'][_0x579382(0x7ae)]=function(_0x3525a4){const _0x3b544c=_0x579382;VisuMZ[_0x3b544c(0x675)][_0x3b544c(0xbf5)][_0x3b544c(0xb95)](this,_0x3525a4),this[_0x3b544c(0x861)]();},VisuMZ[_0x579382(0x675)][_0x579382(0x607)]=Window_BattleLog['prototype'][_0x579382(0x257)],Window_BattleLog[_0x579382(0x448)][_0x579382(0x257)]=function(_0x2b18e4){const _0x1dd1b6=_0x579382;VisuMZ['BattleCore'][_0x1dd1b6(0x607)][_0x1dd1b6(0xb95)](this,_0x2b18e4),this[_0x1dd1b6(0x861)]();},VisuMZ[_0x579382(0x675)][_0x579382(0x51b)]=Window_BattleLog[_0x579382(0x448)]['performSubstitute'],Window_BattleLog[_0x579382(0x448)][_0x579382(0x52d)]=function(_0x46fe37,_0x4ae9ce){const _0x2eb917=_0x579382;VisuMZ[_0x2eb917(0x675)][_0x2eb917(0x51b)]['call'](this,_0x46fe37,_0x4ae9ce),this[_0x2eb917(0x861)]();},VisuMZ[_0x579382(0x675)][_0x579382(0x741)]=Window_BattleLog[_0x579382(0x448)]['performCollapse'],Window_BattleLog[_0x579382(0x448)]['performCollapse']=function(_0xed9d39){const _0x260d74=_0x579382;VisuMZ['BattleCore'][_0x260d74(0x741)][_0x260d74(0xb95)](this,_0xed9d39),this[_0x260d74(0x861)]();},Window_BattleLog['prototype'][_0x579382(0x651)]=function(_0x4fcb73,_0x2a0bda){const _0x334f2e=_0x579382;_0x4fcb73[_0x334f2e(0x651)](_0x2a0bda),this['callNextMethod']();},Window_BattleLog[_0x579382(0x448)]['showEnemyAttackAnimation']=function(_0x490cd9,_0xedc670){const _0x54e5e0=_0x579382,_0x38a09b=_0x490cd9[_0x54e5e0(0xb01)]();if(_0x38a09b<=0x0)SoundManager['playEnemyAttack']();else{if('DjEjg'!==_0x54e5e0(0x417))this[_0x54e5e0(0x35c)](_0xedc670,_0x38a09b);else{if(!this[_0x54e5e0(0x9bb)]())return;const _0x21c557=this[_0x54e5e0(0xaeb)](),_0x22e2b8=_0x483dc1[_0x54e5e0(0x675)][_0x54e5e0(0x27f)][_0x54e5e0(0x2f8)][_0x54e5e0(0x899)],_0x106429=_0x21c557===_0x54e5e0(0x721)?_0x207197[_0x54e5e0(0x67a)]:'\x5cI[%1]%2'[_0x54e5e0(0x7e1)](_0x22e2b8,_0x183226['autoBattle']),_0x1d49d1=this[_0x54e5e0(0x91d)]();this['addCommand'](_0x106429,_0x54e5e0(0x67a),_0x1d49d1);}}},Window_BattleLog['prototype'][_0x579382(0x227)]=function(_0x319d08,_0x5d64e3,_0x103489){const _0x134269=_0x579382,_0x4087f6=[_0x319d08][_0x134269(0xa96)](_0x5d64e3);for(const _0x57bdbf of _0x4087f6){if(_0x134269(0x37b)!==_0x134269(0x37b))_0x5a7906[_0x134269(0xbc5)][_0x134269(0x748)]['updatePointAnimations'](),_0x503056['setWaitMode'](_0x134269(0x4b1));else{if(!_0x57bdbf)continue;_0x57bdbf['setImmortal'](_0x103489);}}this[_0x134269(0x861)]();},Window_BattleLog[_0x579382(0x448)][_0x579382(0x638)]=function(_0x3d7d53){const _0x4c1840=_0x579382;this[_0x4c1840(0x969)]=_0x3d7d53;},Window_BattleLog[_0x579382(0x448)][_0x579382(0x305)]=function(_0x3d20ff,_0x30a489){const _0x5b6257=_0x579382;for(const _0x149ea3 of _0x3d20ff){if(_0x5b6257(0x38c)!==_0x5b6257(0x36d)){if(!_0x149ea3)continue;_0x149ea3[_0x5b6257(0x305)](_0x30a489);}else return _0x5d1b84[_0x5b6257(0xc58)]()?_0x2d13ef[_0x5b6257(0x7b7)]()[_0x5b6257(0x237)]||0x1:0x1;}this[_0x5b6257(0x861)]();},Window_BattleLog[_0x579382(0x448)][_0x579382(0x7c6)]=function(_0x1bca9d,_0x1bc78b,_0x59a554,_0x34cdba,_0x445647,_0xb95df6){const _0x125e5b=_0x579382;_0x1bca9d[_0x125e5b(0x85b)](_0x1bc78b,_0x59a554,_0x34cdba,_0x445647,_0xb95df6,-0x1),this[_0x125e5b(0x861)]();},Window_BattleLog[_0x579382(0x448)][_0x579382(0x7dd)]=function(_0x483f14,_0x36a00b,_0x216b65,_0xb2a2e8,_0x530ebe,_0x5588ca,_0xac5969){const _0x4e7fce=_0x579382,_0x895621=Math[_0x4e7fce(0xabb)](..._0x36a00b[_0x4e7fce(0xb6e)](_0x564642=>_0x564642[_0x4e7fce(0x368)]()[_0x4e7fce(0xb43)]-_0x564642['battler']()[_0x4e7fce(0xbb8)]()/0x2)),_0x23d7bf=Math['max'](..._0x36a00b[_0x4e7fce(0xb6e)](_0x5db2b3=>_0x5db2b3[_0x4e7fce(0x368)]()[_0x4e7fce(0xb43)]+_0x5db2b3[_0x4e7fce(0x368)]()[_0x4e7fce(0xbb8)]()/0x2)),_0x35a27d=Math[_0x4e7fce(0xabb)](..._0x36a00b[_0x4e7fce(0xb6e)](_0x3a0849=>_0x3a0849[_0x4e7fce(0x368)]()['_baseY']-_0x3a0849[_0x4e7fce(0x368)]()[_0x4e7fce(0x1d0)]())),_0x82a450=Math[_0x4e7fce(0x1f1)](..._0x36a00b[_0x4e7fce(0xb6e)](_0x26735d=>_0x26735d[_0x4e7fce(0x368)]()[_0x4e7fce(0x339)])),_0x495bd4=_0x36a00b[_0x4e7fce(0xa1c)](_0x5306ad=>_0x5306ad[_0x4e7fce(0xc58)]())[_0x4e7fce(0x237)],_0x2425dd=_0x36a00b[_0x4e7fce(0xa1c)](_0x530a0b=>_0x530a0b[_0x4e7fce(0xa31)]())[_0x4e7fce(0x237)];let _0xd28dbb=0x0,_0x6b0f8=0x0;if(_0x216b65['match'](/front/i))_0xd28dbb=_0x495bd4>=_0x2425dd?_0x895621:_0x23d7bf;else{if(_0x216b65['match'](/middle/i))_0xd28dbb=(_0x895621+_0x23d7bf)/0x2,_0xac5969=-0x1;else{if(_0x216b65[_0x4e7fce(0x299)](/back/i)){if(_0x4e7fce(0x9fe)!==_0x4e7fce(0x870))_0xd28dbb=_0x495bd4>=_0x2425dd?_0x23d7bf:_0x895621;else{if(_0x4efdaf[_0x4e7fce(0x560)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x319529=_0x415c41(_0x3fee04['$1'])['split'](/[\r\n]+/)[_0x4e7fce(0x7f7)](''),_0x4d0ccd=this[_0x4e7fce(0x9e5)](_0x319529);_0x15f8a9=this[_0x4e7fce(0x749)](_0x4d0ccd)||_0xd993e7,_0x181efe=_0x30adc2[_0x4e7fce(0x1a8)](_0x36c5c2);}}}}}if(_0x216b65[_0x4e7fce(0x299)](/head/i)){if(_0x4e7fce(0x353)!==_0x4e7fce(0x8e2))_0x6b0f8=_0x35a27d;else return _0x4dd389[_0x4e7fce(0x675)][_0x4e7fce(0x27f)][_0x4e7fce(0x547)][_0x4e7fce(0x8ca)]['call'](this,_0x23a53f,_0x2b2582);}else{if(_0x216b65[_0x4e7fce(0x299)](/center/i)){if(_0x4e7fce(0xa06)!=='pdLLD'){if(!_0x47f0a9[_0x4e7fce(0x675)][_0x4e7fce(0x27f)][_0x4e7fce(0xaf0)][_0x4e7fce(0x964)])return;_0x12ed8f[_0x4e7fce(0x675)][_0x4e7fce(0x244)]['call'](this,_0x2de22f);}else _0x6b0f8=(_0x35a27d+_0x82a450)/0x2;}else{if(_0x216b65[_0x4e7fce(0x299)](/base/i)){if(_0x4e7fce(0x6d9)===_0x4e7fce(0x6d9))_0x6b0f8=_0x82a450;else{_0x44d532(_0x4e7fce(0x830)),_0x1b3122[_0x4e7fce(0x25d)]();return;}}}}_0x483f14[_0x4e7fce(0x85b)](_0xd28dbb,_0x6b0f8,_0xb2a2e8,_0x530ebe,_0x5588ca,_0xac5969),this[_0x4e7fce(0x861)]();},Window_BattleLog[_0x579382(0x448)][_0x579382(0x617)]=function(_0x329472,_0x46ceb2,_0x105972){const _0x293ac4=_0x579382;for(const _0x302816 of _0x329472){if(!_0x302816)continue;_0x302816[_0x293ac4(0x7d0)](_0x46ceb2,_0x105972);}this[_0x293ac4(0x861)]();};function _0x15df(){const _0x531324=['hue','_shadowScaleX','shadow','dwhCT','applyItem','applyFreezeMotionFrames','VisuMZ_3_ActSeqCamera','aAVJK','ActSeq_Set_SetupAction','attackStatesRate','setSTBExploited','Beeiy','Window_BattleStatus_initialize','makeTargetsBattleCore','setBattlerBattleCore','WZuDQ','peXCU','RbbqG','applyGlobalCommonEventNotetags','BattleManager_initMembers','FaceDirection','Victory','placeGauge','dqSzE','findSymbolExt','BkYof','loadBitmap','iconHeight','ActSeq_Animation_CastAnimation','ConfigManager_makeData','performSTBExploiter','nsTyS','NewPopupBottom','LXjrD','ActSeq_Mechanics_DeathBreak','setupBattleCoreData','jqljH','battleDisplayText','_floatWholeDuration','map','forceAction','BaseTroopIDs','ustaB','Window_BattleLog_displayMiss','dead\x20enemies','maxBattleMembers','removeActor','_borderPortraitTargetX','displayType','ActSeq_Element_Clear','createCommandNameWindow','getCommonEventIdWithName','pattern','setHue','iconText','ITEM','clearBattleRefreshRequest','attackAnimationId2','alive\x20friends\x20not\x20user','NlMhi','setupDesaturateImpactFilter','setVisibleUI','mEEXK','isAnyoneGrowing','WaitForAngle','JS\x20%1REGENERATE','parameters','hyRwT','ActSeq_Movement_Scale','_forcing','kgDFM','KKcvF','Scene_Options','createMiss','uwGFz','stepFlinch','makeAutoBattleActions','nIzhg','call','endAnimation','ActSeq_Angle_Reset','emerge','Game_BattlerBase_isStateResist','BPywa','updateForceAction','applyResultSwitches','PRE-','updateHpGaugePosition','_damagePopupArray','onFloatEnd','Scene_Battle_helpWindowRect','removedStateObjects','forceSelect','StateIconOffsetY','moveBattlerHomeToPoint','PreEndActionJS','NsfDi','FlashDuration','left','clearFreezeMotion','vhrLO','zcnoJ','drawActorFace','ShowMissEvasion','clearForcedGameTroopSettingsBattleCore','addChild','Scene_Battle_start','attackAnimationIdSlot','CreateCommonEventKeys','removeAnimation','isPlaytest','Game_Party_addActor','HJoLn','mainSpriteWidth','moveBattlerHomeDistance','Game_Battler_startTpbTurn','MqDjH','itemRect','isAnyoneInjectAnimating','Emkye','Scene_Boot_onDatabaseLoaded','eGrbc','isForOpponentBattleCore','DistanceY','_reflectionTarget','partyCommandWindowRect','_scene','Window_BattleLog_displayFailure','clearWeaponAnimation','deadMembers','HpGaugeOffsetY','addAnimationSpriteToContainer','setupBattlebackBattleCore','_statusWindow','Targets','_motionType','LUK','putActiveBattlerOnTop','setBattleImpactTimeScale','clearResult','ShowWeapon','applyBattleCoreJS','ForceDeath','dCadG','Elwix','wmCzg','Game_Action_setAttack','Game_BattlerBase_addNewState','addItemCommand','vjgmD','Game_Action_applyGlobal','isBypassDamageCap','PopupShiftX','getItemDamageAmountLabelBattleCore','createBattleFieldBattleCore','AgUPV','motionIdle','_angleDuration','attachSpritesToDistortionSprite','checkBattleEnd','makeEscapeRatio','ShowHide','MQCYI','_endingBattle','_weaponSprite','MRnJa','isGuardWaiting','isPreviousScene','Game_Battler_clearMotion','drawItemImage','showPortraits','TpGaugeOffsetY','XsfAy','BattleLayout','Window_BattleLog_performCounter','traitSet','startBattle','ActSeq_Impact_ShockwaveCenterTargets','bpkRF','setupTextPopup','Game_BattlerBase_refresh','YATHy','gvTac','process_VisuMZ_BattleCore_Action_Notetags','WeaponTypeID','makeActionOrders','CastMagical','EZJIE','setAttack','waitForMovement','Linear','partyCommandWindowRectXPStyle','jsOneForOne','ConvertCount','createEnemyNameContainer','Game_Actor_makeActionList','isSelected','_distortionSprite','updatePadding','Angle','uhkoI','isSideView','aexOw','uiInputPosition','center','SvWeaponSolo-%1-%2','yifTP','HomePosJS','displayFailure','turn','ActSeq_ChangeSkew','updateRefresh','onBattleStartOnceParallels','startDamagePopup','windowAreaHeight','wHnua','power','addedDebuffs','6238VWouPF','Name','checkTpbInputOpen','DefaultHardCap','_padding','maxLines','VisuMZ_4_BreakShields','StatusWindowAttachmentFrontOffsetY','filters','_battlerName','FJGsU','obguE','ActionItemMsg','xvgSu','ZoEKk','jkvii','Sprite_Actor_setBattler','targetSpritePosition','FocusY','onBattleEndBattleCore','HbMeH','XuHFg','FMacd','canGuardBattleCore','_opacityEasing','VariableHeal','updateWaitMode','ActSeq_Impact_TimeScale','playOnceParallelTroopPage','all\x20targets','CXeZp','LJBai','ActSeq_Impact_ZoomBlurTargetCenter','replace','adjustPosition_ScaleUp','Game_Map_battleback2Name','Parse_Notetags_Targets','retreat','isMagicSkill','stepForward','setupBattleCore','random','wssUa','createDamageContainer','PostEndActionJS','AopPm','Scene_Battle_logWindowRect','Scene_Battle_startEnemySelection','ActSeq_Mechanics_CtbOrder','tednw','auto','changeBattlebacks','ActSeq_Weapon_SetActiveWeapon','ANTI_TINT_UI','setFrame','isActor','VisuMZ_1_SkillsStatesCore','hitRate','oaOJn','processPostBattleCommonEvents','_mainSprite','BattleEndEvent','setupDamagePopup','battleProjectiles','zuiuu','EndBattlePopups','ARRAYEVAL','PostDamageAsUserJS','isSceneBattle','ActSeq_Horror_GlitchRemove','updateCustomActionSequence','_shadowSprite','Scene_Battle_selectPreviousCommand','mFemv','UQcjS','zTVVB','damageRate','BattleManager_startTurn','StepDistanceX','autoMeleeMultiTargetActionSet','Interrupt','setValue','removeBuffsAuto','list','Parse_Notetags_TraitObjects','CommandWidth','cGkkx','displayActionResults','Rfavl','KiaoS','createEnemyNames','ceil','PreApplyAsTargetJS','getMenuImage','itemEffectAddNormalState','_growWholeDuration','isChangingOpacity','atbInterrupt','CombatLogIcon','jump','magicSkills','ParseSkillNotetags','maxItems','SkillsStatesCore','alive\x20battlers\x20not\x20target','battleback2Name','ZaUKW','isSTB','process_VisuMZ_BattleCore_BaseTroops','logWindowRect','vIghR','LFrZr','drawEnemyName','_tempBattler','stateRate','LBhaM','createHelpWindow','displaySubstitute','YXqwT','svAnchorX','COMBAT\x20LOG','_ptbActionCost','dragonbonesData','eddBL','ActSeq_Motion_ClearFreezeFrame','setupIconTextPopup','FilDH','isStatusAffected','tOLoA','\x5cI[%1]%2','displayBattleCoreTransitionErrorMsg','jsScaleUp','bossCollapse','setActiveWeaponSlot','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','wqptU','isShownOnBattlePortrait','processRefresh','<CUSTOM\x20ACTION\x20SEQUENCE>','SvBattlerMass-%1-%2','updateAttachedSprites','Scene_Battle_windowAreaHeight','randomTargets','kihXF','onSelectAction','Scene_Battle_terminate','MotionType','customDamageFormula','aqnEM','_phase','updateBitmap','VisuMZ_3_ActiveChainSkills','zLmkp','commandFight','Amp','visible','opacity','Gzall','bottom','ActiveTpbOptionsMessage','ActSeq_Set_FinishAction','GroupDigits','Item-%1-%2','ZrmEL','applyVariance','hide','ForceRandom','XPActorCommandLines','mRYsm','Targets2','addImmortal','oqBZZ','ActSeq_BattleLog_WaitForBattleLog','Sprite_Enemy_setBattler','growBattler','Armor-%1-%2','updatePointAnimations','ZDKfq','swapEnemyIDs','rKcGJ','JSDCI','ActSeq_Inject_AnimationStart','CflGV','MP_Flat','lERZO','textAlign','_cursorArea','result','Game_BattlerBase_die','ParseClassNotetags','setGuard','_fauxAnimationSprites','damageStyle','_motionCount','battleMove','startInjectAnimation','isPreviousSceneBattleTransitionable','createAttachmentSprites','value','swing','QGDwq','apply','ActSeq_Movement_HomeMoveBy','onEscapeFailure','oUlnZ','description','rWwnq','ActSeq_Horror_TVCreate','_displayBattleCoreTransitionErrorMsg','command301_PreBattleEvent','DzsFD','10KkNhEo','applyGlobal','zWPJx','AddHpGaugeOption','applySoftDamageCap','loadSystem','frhLO','mainSpriteHeight','FSLzS','PostEndTurnJS','stbGainInstant','ActSeq_Mechanics_Multipliers','forceMotion','VisuMZ_2_HorrorEffects','VisuMZ_3_ActSeqProjectiles','name','createJS','splice','BhyuS','getDamageStyle','performMiss','isAnyoneChangingOpacity','_actorSprites','onJumpEnd','PostApply%1JS','AJnKF','_regionBattleback2','WaitForZoom','_angleWholeDuration','updateMotionCount','YIbKQ','isBattleTest','createHpGaugeSprite','isTpbMainPhase','ActSeq_Mechanics_AddBuffDebuff','OffsetAdjust','itemEffectAddAttackState','Height','WqkTh','cancelTargetSelectionVisibility','max','origin','inputting','callOkHandler','Sprite_Actor_initMembers','processEscape','Game_Action_isForRandom','evalDamageFormula','addBuff','CFiFW','checkTpbInputClose','Sprite_Enemy_updateStateSprite','sqeiV','IYeeU','damageOffsetY','battleZoom','canAttack','CalcActionSpeedJS','battleMembers','waitForFloat','onEncounterBattleCore','statusWindowRectDefaultStyle','battleSpin','_enemyID','ActSeq_Camera_Offset','nameY','performTpbActiveCheckSwitch','XPActorDefaultHeight','_requestRefresh','Qoufv','AutoMeleeSolo','damage','revealNewWeaknesses','ActSeq_Movement_HomeReset','xLVmS','VisuMZ_0_CoreEngine','Filename','updateShadowPosition','JS\x20%1END\x20ACTION','currentExt','_tpbSceneChangeCacheActor','battleSpriteSkew','BattleManager_processDefeat','_attackAnimationId','ActSeq_Element_NullElements','missed','Nedsd','charging','commandNameWindowDrawText','Game_Action_setGuard','_back2Sprite','zNOkz','AutoMeleeAoE','push','applyImmortal','Game_Interpreter_updateWaitMode','kqpee','Parse_Notetags_Action','anchor','faERG','createDigits','ActSeq_Element_ForceElements','isMeleeMultiTargetAction','EkldW','XYdhM','Window_BattleLog_popBaseLine','_lines','createString','JAxmt','_flinched','length','SKYlC','cgvOr','PuWXp','AGI','_battleField','BattleCmdList','expRate','command283','version','Window_BattleLog_performRecovery','aiABT','AllowCollapse','Window_BattleLog_displayCurrentState','StartTurnWait','Sprite_Battler_startMove','makeDeepCopy','HyxoX','Game_Actor_equips','_updateCursorFilterArea','pIdnk','setLastPluginCommandInterpreter','_targetFloatHeight','friendsUnit','Game_Action_itemHit','lukEffectRate','loadBattleback2','+%1','contains','_battlerContainer','startPartyCommandSelection','resizeWindowBorderStyle','performReflection','victory','width','rcZxq','fillRect','makeActionList','exit','ActSeq_Motion_RefreshMotion','Mirror','DefaultSoftCap','Scene_Battle_createCancelButton','waitForNewLine','pow','ZpQQB','displayChangedStates','MOTIONS','nzDOs','canMove','updateBattlebackBitmap','_weaponImageId','ActSeq_Animation_AttackAnimation2','Game_Action_makeTargets','alterChange','sliceMax','battleStatusWindowAnimationContainer','item','drawItemImageListStyle','motionType','HalfActions','PopupShiftY','isAnyoneMoving','Shadow','onEncounter','startOpacity','addAutoBattleCommand','Hocna','ActSeq_Mechanics_BoostPointsChange','-%1\x20MP','startTurn','svZXA','Settings','canInput','WEAPON\x20SWAP','isSkipPartyCommandWindow','fnordRemovedStates','textBaseline','loadPicture','#ffffff','VMCQP','BattleDefeatJS','LLWOB','nYIsj','bYiQI','onAllActionsEnd','alive\x20enemies','CheckVisibleSwitchNotetags','DKpKu','windowPadding','nKyUr','addBattleCoreAutoBattleStartupCommand','skew','DdvNC','members','AnchorY','KSkWx','zqnSJ','match','applyEasing','setSvBattlerSprite','wKGLG','heUCk','canBattlerMove','jmNmT','SideviewSelect','swZhq','addNewState','SKILLS','SBuIy','cdXAO','ParseStateNotetags','Sprite_Actor_updateBitmap','pArkZ','isCommandEnabled','createEmptyBitmap','_handlers','useItem','updateStyleOpacity','selectNextActor','jlVzU','setupHpGaugeSprite','BattleManager_startAction','clearDamagePopup','performRecovery','XuEdW','undecided','ActSeq_BattleLog_PushBaseLine','MotionIdle','CheckSkillCommandShowSwitches','rowSpacing','PostStartTurnJS','Scene_Map_initializeAfter','ygDKH','close','smooth','traitObjects','noise','isForOne','inBattle','performDamage','PostStartActionJS','EVAL','_svBattlerSprite','regenerateAllBattleCore','PNrJK','speed','toString','ActSeq_Mechanics_AtbGauge','showAnimation','centerFrontViewSprite','-%1','StyleName','weaponImageId','isAffectedByBreakShield','flashColor','initBattleCore','yXjbs','right','ActSeq_Mechanics_BreakShieldChange','ozKuE','Buffs','ActSeq_Movement_MoveToPoint','_effectsContainer','Window_BattleLog_displayTpDamage','ActSeq_Mechanics_FtbAction','jgOcj','BKOoe','setHelpWindowItem','YMagx','Scene_Battle_startPartyCommandSelection','CriticalDmgRate','gainCurrentActionsETB','tpbActorSwitchConditionsMet','Formula','loop','_appeared','DamageDisplay','ndZoA','callUpdateHelp','ActSeq_Skew_Reset','_methods','toUpperCase','ActSeq_BattleLog_Refresh','PreDamageJS','isOnCurrentMap','VKqfs','createShadowSprite','_targetGrowY','displayStartMessages','abs','createActorCommandWindowBattleCore','_logWindow','PartyCmd','MpGaugeOffsetY','ParseAllNotetags','isActing','actorCommandSingleSkill','ActSeq_Movement_FaceTarget','noSimilarSTypes','BoostPoints','makeTargetSprites','isBreakStunned','updateSkew','_injectAnimationSprite','PopupPosition','requestMotion','ActSeq_Animation_ChangeBattlePortrait','battleAngle','startActorCommandSelection','_battler','ActSeq_Animation_WaitForAnimation','Game_System_initialize','getItemDamageAmountTextOriginal','\x20to\x20%1\x20midbattle.','233396yPcUTQ','alive\x20actors\x20not\x20target','RnFCu','GFIss','BxANT','%1RegenerateJS','encounterList','CUNPs','ActSeq_Mechanics_TextPopup','CheckVisibleSkillNotetags','makeActions','endBattle','ePQrY','OcCiT','updateLink','bhrcw','hardDamageCap','removeBuff','createStateSprite','getBattlePortraitFilename','battleInjectAni','Sprite_Enemy_updateCollapse','Window_BattleEnemy_initialize','YlmGP','XPSpriteYLocation','isBattlerGrounded','ActSeq_Zoom_Reset','arRedFlat','createDamageSprite','command339','dead\x20friends','_lastAction','Owldk','nRHQm','ActSeq_Target_RandTarget','YUVxc','Variable','processExtendTroopMembers','message4','die','prepareBorderActor','isForRandom','WnMJh','_baseY','visibilityState','updateFloat','_endBattle','Sprite_Battleback_adjustPosition','ActSeq_Mechanics_ActionEffect','ONOLR','Opacity','eeNOY','autoBattleStyle','EscapeFail','isAnimationPlaying','updatePosition','onEscapeSuccess','JS\x20%1APPLY\x20%2','updateBattleProcess','ActSeq_Mechanics_OtbOrder','battleOpacity','applyArmorModifiers','mcoSl','bcbgf','base','ActSeq_Movement_FacePoint','WdBlt','isOptionsCommandEnabled','qLDng','QizNU','some','faceWidth','attackStates','createStateIconSprite','LXvyc','hitFlat','VisuMZ_1_ElementStatusCore','applyData','showNormalAnimation','maxCommands','NLOsD','ActSeq_Movement_HomeMoveToPoint','abrZl','yRXgG','isSkewing','krdtB','hfvPH','helpWindowRectBorderStyle','isForFriendBattleCore','focus','battler','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','battleCameraData','extraPositionScaledY','Sprite_Enemy_updateBossCollapse','CkQmh','playOnceParallelInterpreter','GDEni','skillItemWindowRectBorderStyle','gLJNQ','iEglR','isActiveTpb','jsScaleDown','BindCommonEventKeysForGroup','PrioritySortActors','needsSelection','MAXHP','worldTransform','setHandler','iABOJ','_itemWindow','targetActionSet','Rmkyn','ActSeq_BattleLog_AddText','SToet','isAlwaysVisible','_actorWindow','gBmXo','CWRxE','addEscapeCommand','%1EndBattleJS','buffRemove','BattleManager_cancelActorInput','TpGaugeOffsetX','setBackgroundType','criticalDmgFlat','ONUbC','Cimry','Sprite_Weapon_loadBitmap','addGuardCommand','arRedRate','zXPdU','isCustomBattleScope','IzhuA','anchorX','MKaHA','refresh','callOptions','loadWindowskin','ActSeq_Mechanics_PtbConvert','_homeEasing','dtZuF','GTcJf','IconSet','createPartyCommandWindowBattleCore','adjustPosition','offsetY','aliveMembers','ActSeq_Horror_NoiseCreate','resetFontSettings','eVFuY','EasingType','isOptionsCommandAdded','mpDamage','GtBQk','skillWindowRect','unchanged','isMoving','default','reduce','Window_Options_statusText','clearFreezeMotionForWeapons','timeScale','ActSeq_Mechanics_VariablePopup','invokeAction','battlerName','SXbaS','sortDamageSprites','shift','prepareCustomActionSequence','ZtQsQ','battleCommandIcon','getFullActionsPTB','%1StartActionJS','ActSeq_Mechanics_WaitForEffect','CmdIconFight','isClicked','context','_angleEasing','_createClientArea','_branch','fIvdr','battleInjectPrep','ActSeq_Target_PrevTarget','waitForAnimation','Scene_Battle_itemWindowRect','usMnJ','NDMnl','_action','repeats','_flipScaleX','changeInputWindow','FlinchDistanceX','_updateCursorArea','terminate','revertTpbCachedActor','AllowRandomSpeed','_motionSpeed','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','process_VisuMZ_BattleCore_DamageStyles','isAnyoneFloating','PreApplyAsUserJS','isBuffAffected','ActSeq_Zoom_WaitForZoom','Sprite_Actor_createStateSprite','actionEffect','collapseType','updateBattlerContainer','_frontAttachmentSprite','glitch','mvwGh','pMIQo','POST-','isPartyCommandWindowDisabled','type','fnordAddedStates','isCustomActionSequence','updateShadow','68033pTWlVk','Scene_Options_maxCommands','PostEndBattleJS','KvMeO','kzXnv','_eventId','cByAC','createTargetsJS','HpGauge','clear','ActSeq_Projectile_Picture','CriticalDuration','Scene_Battle_createHelpWindow','DualWield','XhzxI','weaponTypes','setupFont','_commonEventIDs','battleStatusSprite','isAnyoneSkewing','Game_Interpreter_PluginCommand','drawGauge','statusWindowRectBorderStyle','addCommand','IconStypeNorm','process_VisuMZ_BattleCore_Notetags','battleJump','getStypeIdWithName','hFVSU','ARRAYSTR','isForRandomBattleCore','getAttackMotion','ActSeq_Mechanics_BoostPointsStoreData','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','NoUBA','TacdK','displayAction','turnCount','isDTB','STYPES','_cacheTextWidth','_flashDuration','Eetvf','getWtypeIdWithName','enemyNames','removedBuffs','autoSelect','AZNZH','displayRemovedStates','canEscape','clearBattleCoreData','isItemCommandEnabled','BYPOZ','uZdkp','ReflectAnimation','SkillItemMiddleLayout','addSkillCommands','createCommandVisibleJS','_commonEventQueue','_uiContainer','_flashColor','BTB','_angleRevertOnFinish','AutoBattleBgType','RexWO','Scene_Battle_skillWindowRect','finishActorInput','_battleCoreBattleResumeAfter','CmdStyle','isHidden','findIndex','EWarH','_effectType','VisuMZ_3_BoostAction','AfxUL','hyIOQ','MessageWait','PerformAction','blt','TjCOA','FUZLt','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','performAttack','processAbort','addExtendedTroopMembers','lWddz','displayReflectionPlayBack','RegExp','VyCuv','Sprite_StateIcon_updateFrame','battleCoreTpbMainPhase','padding','_borderPortraitSprite','playReflection','changeAtbCastTime','ShowRemovedBuff','prototype','tXzJc','horzCells','battleUIOffsetY','checkCacheKey','VisuMZ_2_BattleSystemPTB','command301','stepBack','aJvbP','ShowTpDmg','RTFLh','BARE\x20HANDS','XOHYX','dead\x20battlers','placeStateIcon','JS\x20%1START\x20ACTION','dataId','checkSceneBattleTransitionable','SfnkO','StatusWindowSkinFilename','RJKPd','ActSeq_Animation_PlayAtCoordinate','selectNextCommandTpb','BravePoints','isEffecting','dead\x20actors','setLetter','TpbGaugeOffsetY','Cozac','battleCommands','686574rwkgSj','ApplyImmortal','ActSeq_Inject_AnimationEnd','oiBtG','AnchorX','onBattleEnd','_skewY','SceneManager_push','oTHqE','Sprite_Battler_updatePosition','makeTargets','Text','process_VisuMZ_BattleCore_CommonEventKeys','WaitForEffect','tUrQV','Actions','ActSeq_Mechanics_StbExtraAction','xVKxM','activate','addOptionsCommand','sJtTE','drawSkillCost','bitmapWidth','checkShowHideSkillNotetags','tpbCommandFight','Mute','FocusX','ActSeq_Movement_FaceDirection','_animationContainer','updateCommandNameWindow','OlODD','ItYHw','_homeY','move','gainTp','Window_BattleLog_displayActionResults','Window_BattleLog_performDamage','MIN_SAFE_INTEGER','updateAngleCalculations','mUufR','SXWAk','NameFontSize','removeChild','_cursorSprite','Aqqtb','mmp','WLjfm','clone','OFvRE','refreshCursor','isBTB','Game_Battler_performEvasion','getNextSubjectFromPool','guardSkillId','shouldHideBattleEndPopups','vLYii','AnimationID','ActSeq_Horror_TVRemove','attackMotions','Window_ActorCommand_initialize','_escapeRatio','arPenRate','dilrC','ActSeq_DB_DragonbonesMotionAni','clearActiveWeaponSlot','MANUAL','battleSkew','stypeId','oVbgq','setCursorRect','createBattleUIOffsetY','XcXJb','Game_Battler_onBattleEnd','ywBTy','iconIndex','battleAnimation','updateStaticSvBattlerFrames','BMeKO','battleback1Name','commandStyleCheck','_floatHeight','isTickBased','isPartyTpbInputtable','State-%1-%2','DefeatEvent','endAction','Strength','AutoBattleRect','PostApplyAsTargetJS','TP_Flat','alive\x20friends\x20not\x20target','anchorY','processBorderActor','sYZqY','bitmapHeight','Mechanics','Saokg','GobhI','_lastPluginCommandInterpreter','isSpriteVisible','drawItemStyleIconText','skill','fontSize','jAVVp','odLHp','_duration','cameraDuration','FaceAway','getBattlePortraitOffsetX','VisuMZ_4_CombatLog','isEscapeCommandEnabled','FamDS','Scene_Battle_stop','isGuard','YAhBt','CastPhysical','getDualWieldTimes','tnDjD','CriticalDmgFlat','cKMWv','#%1','YYJXK','MpGaugeOffsetX','updateEffectContainers','displayEvasion','_namesCount','Scene_Map_updateCallMenu','onRegeneratePlayStateAnimation','recoverAll','_immortal','PreRegenerateJS','evade','drawItem','lqMkn','commandNameWindowCenter','pwRMi','Sprite_Enemy_setHue','gaugeLineHeight','_item','statusWindowRectXPStyle','_actorCommandWindow','SwitchMissEvade','StatusWindowSelectableBackHide','zYaFY','BmXoE','qQfbl','clearOnceParallelInterpreters','Sprite_Battler_damageOffsetY','battlerSmoothImage','ActSeq_Mechanics_PtbFullHalfAction','TextColor','ActSeq_Element_AddElements','repositionCancelButtonBorderStyle','setHelpWindow','isSpinning','sPBKB','adjustFlippedBattlefield','VisuMZ_1_MainMenuCore','_currentAngle','setBattleSkew','windowskin','head','createLowerLayer','attack','MP_Rate','registerDefeatedEnemy','PbPYp','johnK','clearRect','makeSpeed','registerCommand','_commonEventKey','mhIZC','States','effect','IFwRI','commandSymbol','physical','cancelActorInput','ActSeq_Mechanics_ArmorPenetration','onBattleStartBattleCore','Window_BattleLog_performSubstitute','innerHeight','mhp','top','floor','ARRAYSTRUCT','_targetAngle','svShadow','WtypeId','NogTs','XMDtS','kZsIw','findTargetSprite','Game_Battler_makeSpeed','ActSeq_Animation_ActionAnimation','Window_BattleLog_refresh','WaitForFloat','hpAffected','performSubstitute','LaKGj','setupZoomBlurImpactFilter','BattleManager_onEscapeSuccess','ActionEndUpdate','ZNxwM','uZaVq','getNextDamagePopup','custom','CoreEngine','Wave','SEpFE','Game_Enemy_transform','DistanceX','autoSelectLastSelected','OnynU','BattleManager_processVictory','kypGO','clearActiveWeaponSet','setActorHome','randomInt','ActSeq_Impact_Negative','Scene_Battle_startActorSelection','Scale','UoQNB','DefaultSoftScaler','Damage','837325wKtRYk','addSingleSkillCommands','_offsetX','Game_Action_executeDamage','startAction','fhTVt','itemLineRect','updateStatusWindowPosition','ShowRemovedState','softDamageCapRate','_skewDuration','isImmortal','message2','StepDistanceY','ActSeq_Horror_GlitchCreate','_surprise','displayReflection','ParseItemNotetags','commandName','autoBattleAtStart','targetDistortionSpritePosition','angleDuration','lastFilename','stateMotionIndex','note','isStateResist','_currentActor','Sprite_Animation_targetSpritePosition','Game_Map_setupBattleback','_skillIDs','chant','isMeleeSingleTargetAction','Lmmmj','show','updateCollapse','ysMnm','CommandAddAutoBattle','Pre','updateStateSpriteBattleCore','displayCurrentState','displayAffectedStatus','isOpponent','ATTACK','refreshStatusWindow','kIItn','Scene_Battle_update','processActorCommandCancelTPB','isMVAnimation','LKETz','gGTyA','command119','Scene_Battle_createActorCommandWindow','isBorderStylePortraitShown','AddOption','IKoTF','JS\x20ESCAPE\x20FAILURE','clearElementChanges','cancel','setupWeaponAnimation','chantStyle','requestFauxAnimation','fHrOJ','+%1\x20MP','Game_Battler_onTurnEnd','isNextScene','battleUIOffsetX','KkReK','ActSeq_Camera_Clamp','FoFAR','CheckMapBattleEventValid','Sprite_Actor_moveToStartPosition','Window_ActorCommand_setup','createActorCommandWindow','createInnerPortrait','commandNameWindowDrawBackground','setActionState','Game_Troop_expTotal','HelpEscape','addSkillTypeCommand','isDying','ParseWeaponNotetags','loadSvActor','updateGrow','setLastBattleSkill','backColor','process_VisuMZ_BattleCore_Failsafes','hvrWe','updateInterpreter','ActionSkillMsg2','Window_BattleLog_pushBaseLine','children','kPILd','SkewY','ShowActorGauge','QEZgs','VUNYn','alterCost','_enemySprites','executeDamage','commandRemember','height','LCcJP','isSkill','MAXMP','GZkEL','coreEngineRepositionEnemies','frameVisible','ArPenRate','drain','_homeDuration','GSyfT','delay','validTargets','hQYZh','startMotion','_inputting','YEWel','makeHpDamageText','_damageContainer','drawItemImageXPStyle','tYGdm','startFloat','ntPFn','CWkUE','displayTpDamage','_cancelButton','_targetGrowX','_skewWholeDuration','_index','updateShadowScale','ScaleDown','ActSeq_Weapon_ClearActiveWeapon','Game_Enemy_setup','weFhv','command3011','MRigW','_regionBattleback1','frontview_ui','Game_Battler_clearDamagePopup','_battlerHue','isBattleCoreTargetScope','process_VisuMZ_BattleCore_jsFunctions','clearBattlerMotionTrailData','getDefeatedEnemies','border','animationBaseDelay','isForOpponent','XiTLN','numTargets','mURjV','createChildSprite','Window_BattleLog_performMiss','itemHit','setHome','isForFriend','VisuMZ_2_PartySystem','SkillItemBorderCols','setupShockwaveImpactFilter','isJumping','setBattlerFlip','BattleManager_endAction','Sprite_Actor_setActorHome','StatusWindowAttachmentBack','ActSeqImpact','resizeWindowXPStyle','onTurnEnd','currentAction','DamageType%1','updateWeather','ext','actorCommandEscape','OJAvB','TKOMB','oQiTB','isFloating','parent','skillId','performActionMotions','ActSeq_Target_NextTarget','Window_BattleLog_performEvasion','battleSys','placeTimeGauge','createAutoBattleWindow','Game_Interpreter_command301','makeActionListAutoAttack','_effectDuration','mainSprite','freezeFrame','Weapon-%1-%2','_homeX','isConfused','Window_BattleLog_performReflection','PortraitScaleBorderStyle','WxuxM','_battleLayoutStyle','lastBattleSkill','isNonSubmenuCancel','setup','8eAmKlM','updateStateSprite','enemyId','hasSvBattler','Game_Actor_setup','text\x20target','SceneManager_isSceneChanging','walk','pARNK','performJump','BattleManager_onEncounter','Game_Action_evalDamageFormula','_createDamageContainer','MAT','OQmLT','extraPositionY','yJdmO','BattleManager_selectNextCommand','mainSpriteScaleX','setBattleCameraTargets','constructor','Spriteset_Battle_createBattleField','createActionSequenceProjectile','initMembersBattleCore','updateBossCollapse','startWeaponAnimation','StepDuration','CastAnimation','bKXXF','popupDamage','requestDragonbonesAnimation','removeStatesAuto','HelpOptions','_tpbNeedsPartyCommand','isTpb','LKies','_preBattleCommonEvent','ActionEffect','ActSeq_Mechanics_RemoveState','actorCommandAutoBattle','applyAngleChange','ShowCosts','waitCount','ActSeq_BattleLog_PopBaseLine','evaded','HvbCR','alive\x20battlers','isRightInputMode','UpQmY','Scene_Battle_createAllWindows','StyleON','ActSeq_Movement_MoveBy','createUIContainer','checkShowHideBattleNotetags','BqgqY','Skills','ShowHpDmg','cXdfs','softDamageCap','ESCAPE','linkSprite','addPartyCommand','qPyku','calcWindowHeight','createAnimationContainer','requestAnimation','getHalfActionsPTB','performCastAnimation','evalDamageFormulaBattleCore','criticalHitFlat','TuCLb','NelDn','TPB','vVVgT','_executedValue','TbKqB','drawItemStatusXPStyle','_actions','Game_Action_numRepeats','Window_BattleLog_update','sideview_ui','_offsetY','adjustWeaponSpriteOffset','updateFrame','addDebuff','createWeather','_freezeMotionData','XFIcW','VcVYE','tWYai','ParseActorNotetags','IpWcC','AutoBattleOK','KNvgA','drawTextTopAligned','_speed','position','currentValue','bGKNZ','tone','debuffAdd','isSkillItemWindowsMiddle','ClearBattleLog','BattleCore','TBhqv','motionSpeed','KtrCR','okButtonText','autoBattle','SwitchCritical','isAlwaysHidden','StatusWindowAttachmentBackOffsetY','_back1Sprite','actorCommandCancelTPB','xnFua','setBattlePortrait','ReflectPlayback','%1Apply%2JS','TpbGaugeOffsetX','_cache','numRepeats','NhoBA','updateHomeMove','Scene_Map_initialize','StartTurnShow','PostApplyAsUserJS','TextAlign','PreStartActionJS','IWpzu','contents','AceEX','Window_BattleLog_performActionStart','isBattleFlipped','addText','textSizeEx','PjCZv','QoRqO','Scene_Battle_initialize','_floatDuration','jWIQJ','statusText','isChanting','PortraitScale','XVFyD','AUTO\x20BATTLE','Window_BattleEnemy_show','launchBattle','PostDamageJS','CmdIconOptions','jmmRd','allowCollapse','active','process_VisuMZ_BattleCore_CreateRegExp','DamageStyleList','AntiTintUiElements','applyGuard','VisuMZ_2_BattleSystemCTB','Sprite_AnimationMV_updatePosition','displayBuffs','TpbActiveChangeEnabled','processAnimationRequests','getSkillTypes','fbjRy','isETB','updateStateIconSprite','_homeWholeDuration','ibONn','removeOnceParallelInterpreter','MAspF','actor','update','RequiresDefeat','drawItemStatusListStyle','fUhOp','hasStaticSvBattler','_targetHomeY','STB','eFoHu','removeHorrorEffect','Scene_Battle_partyCommandWindowRect','getLastPluginCommandInterpreter','SlotID','extraHeight','Pgyah','setCommonEvent','battleCommandName','Sprite_Enemy_initVisibility','missile','onDatabaseLoaded','makeTargetSelectionMoreVisible','wholeActionSet','drawSingleSkillCost','Exploiter','alive\x20enemies\x20not\x20target','kjgFh','oQUmy','EscapeSuccessJS','pFGFX','SkewX','_shake','AutoBattle','parse','HzEUI','EbtWv','createKeyJS','VTGJt','ConvertParams','SsXSd','RvXxH','_battleCoreForcedElements','scope','refreshRequest','changeTurnOrderByCTB','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','StatusWindowSkinHide','uOYNb','helpAreaBottom','_borderPortraitDuration','WaitCount1','addDamageSprite','_target','performMagicEvasion','canUseItemCommand','setActiveWeaponSet','GQFrt','_waitMode','_visualHpGauge_JustDied','faceRect','Index','reverse','checkShowHideSwitchNotetags','_actor','isBattleSys','Targets1','startHomeMove','_growY','AS\x20USER','initBattlePortrait','battleCoreResumeLaunchBattle','MwfkD','rGXJc','gradientFillRect','OverallFormulaJS','removeDamageSprite','VRmKJ','kNVVM','MLDqj','actor%1-portrait','skillTypes','isAutoBattle','ForceExploiter','_armorPenetration','MWnkC','moveToStartPosition','loadBattleback1','cczoT','setBattleCameraPoint','EZPmL','becomeSTBExploited','_growEasing','CriticalHitRateJS','STR','ActSeq_Mechanics_SwapWeapon','aeciV','isAnyProjectilePresent','PopupOffsetX','Scene_ItemBase_applyItem','fight','_targetIndex','hdFdW','hasBeenDefeatedBefore','MBOfd','ActSeq_Movement_WaitForSkew','_targetSkewY','alive\x20actors','text','IvieO','VsJcv','expTotal','_autoBattle','Scene_Battle_onActorCancel','Game_Action_apply','applyDamageCaps','BrUkT','NameOffsetX','IZwWX','VbaCR','createBattleField','initElementStatusCore','_list','skillItemWindowRectMiddle','ActSeq_Projectile_Animation','DefaultDamageStyle','FlashColor','cmboi','vDyXi','animationShouldMirror','textColor','_growDuration','xtcnZ','PurIs','commandEscape','frameCount','arPenFlat','svAnchorY','setText','rSeTq','Window_BattleLog_performCollapse','_drawTextOutline','_isBattlerFlipped','createSeparateDamagePopups','portrait','updateOpacity','isOkEnabled','_spriteset','getEnemyIdWithName','Window_BattleLog_displayCritical','globalAlpha','YVkSn','performActionEndMembers','Ewubc','ActSeq_Impact_ShockwavePoint','Window_PartyCommand_initialize','hpHealingFmt','preparePartyRefresh','_opacityWholeDuration','TjpaN','toUseBoostPoints','_targetSkewX','qwNrM','isCancelled','ActSeq_Motion_PerformAction','updateAttachmentSprites','updateBattlebackBitmap2','Sprite_Battler_damageOffsetX','jHPBF','mGgss','startJump','SkillItemStandardCols','HLCRa','Window_BattleLog_performAction','VisuMZ_2_BattleSystemFTB','_jumpHeight','ActionSequence','create','Scene_Battle_updateBattleProcess','lineHeight','Pqvol','ShowFailure','hVnhB','EnGcv','CriticalColor','cggbn','_autoBattleWindow','processForcedAction','createContents','open','uEzNv','Immortal','zbysT','DisablePartyCmd','setBattleAngle','playCancel','addChildAt','isVisualHpGaugeDisplayed','ActSeq_Set_WholeActionSet','ActSeq_BattleLog_WaitForNewLine','Width','boxWidth','snapForBackground','_lastRegenFrameCount','rrNtq','getSkillIdWithName','damageOffsetX','_opacityDuration','_stateSprite','_svBattlerData','CalcEscapeRaiseJS','PxHGo','processVictory','Window_BattleStatus_drawItemImage','round','PostStartBattleJS','drawIcon','ActSeq_Inject_AnimationPauseResume','ActSeq_Movement_WaitForJump','Debuffs','ActSeq_Mechanics_RemoveBuffDebuff','JumpToLabel','Game_Action_clear','Game_Interpreter_command283','updateFlip','battleLayoutStyle','DisplayAction','SvWeaponMass-%1-%2','_enemyId','hpVeG','changeAtbChargeTime','Sprite_Actor_updateShadow','jsScaleToFit','onMoveEnd','ActionEnd','process_VisuMZ_BattleCore_TraitObject_Notetags','repeatTargets','yTFhv','partyCommandWindowRectBorderStyle','fYjKm','isAnyoneJumping','PJLoP','kQomx','freezeMotion','vYTXV','VariableDmg','Game_BattlerBase_canGuard','ywAyN','svBattlerShadowVisible','performCounter','gainStoredBoostPoints','pop','popBaseLine','visualHpGauge','WaitForMovement','RGovk','isAnimationShownOnBattlePortrait','Actor','weapons','JS\x20%1END\x20TURN','addMeleeReturnActionSet','forceWeaponAnimation','aEoyW','luDJG','PARTY','_battlePortrait','alive\x20actors\x20not\x20user','oBtyX','CreateActionSequenceTargets','WMUxK','BackColor','BattleLogRectJS','ShowPortraits','performMoveToPoint','_subject','wait','VisuMZ_2_BattleSystemBTB','index','VisuMZ_2_BattleSystemOTB','zXVfS','addChildToBack','RfNbl','ActSeq_Mechanics_CustomDmgFormula','jumpBattler','clearMotion','_multipliers','onAngleEnd','isNextSceneBattleTransitionable','formula','ParseArmorNotetags','resetBreakShield','Game_Temp_requestAnimation','_baseTexture','floatBattler','YZwqI','NameAlwaysHidden','performMoveToTargets','sort','setBattleCameraOffset','CTB','format','ActSeq_Camera_FocusPoint','spriteId','jFsZa','deathStateId','yqrfX','actionSplicePoint','displayMiss','updateScale','innerWidth','IconStypeMagic','ActSeq_Mechanics_HpMpTp','mpGPz','front\x20center','GTeDA','SvmSl','setupBattleback','vzybY','EnableDamageCap','itemTextAlign','wtypeId','Game_Action_needsSelection','remove','ChangeOrderBy','Sprite_Actor_updateFrame','updateUiContainerPosition','createPartyCommandWindow','waitForEffect','PopupDuration','PostRegenerateJS','ArRedRate','placeActorName','alive\x20opponents\x20not\x20target','crFxE','setupOversaturateImpactFilter','equips','moQTn','WaitCount2','AS\x20TARGET','izTio','criticalDmgRate','destroy','rrbEM','Elements','PreEndTurnJS','weatherType','itemWindowRect','split','lOCIH','lastCommandSymbol','Fnvdh','Game_Action_itemEffectAddNormalState','selectPreviousCommand','BmYsX','alterActionCostPTB','initVisibility','ipUhb','Game_BattlerBase_eraseState','RDfqQ','isActionSelectionValid','Scene_Battle_onEnemyCancel','_motion','checkAutoCustomActionSequenceNotetagEffect','svBattlerName','BTJca','sliceMin','PreApplyJS','onActorOk','_jumpWholeDuration','onHomeMoveEnd','Pavio','Setting','NUM','startSpin','toLowerCase','enemy','MHVBo','updateEffectsContainer','removeImmortal','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','QgeyY','moveBattlerDistance','48849DASmVM','updateBorderStyle','NOQal','svBattlerAnchorX','Style','gvxZy','createDistortionSprite','TargetLocation','compareBattlerSprites','_enemyIDs','FDjEV','vAJoN','getHardDamageCap','Game_BattlerBase_initMembers','tEmxw','OIGFQ','ShowAddedBuff','allBattleMembers','ZeVkQ','BattleManager_checkBattleEnd','StartTurnMsg','Enable','alterPriority','ActorCmd','isDead','applyCritical','_battleCoreBattleStartEvent','playEnemyDamage','iterateBattler','createEffectActionSet','opponentsUnit','CalcEscapeRatioJS','SPqsd','ActSeq_Target_CurrentIndex','Game_Battler_performMiss','jswSr','WaitForCamera','iconWidth','isSideButtonLayout','Direction','moveBattlerToPoint','lPipo','Scene_Battle_updateStatusWindowPosition','ElementStatusCore','_dimmerSprite','alive\x20enemies\x20not\x20user','callNextMethod','zysyT','XkOuA','ActSeq_Mechanics_OnceParallel','_damages','SdweC','vVfJf','Sprite_Enemy_createStateIconSprite','resize','_jumpDuration','_createCursorSprite','zOOim','ActSeq_Weapon_NextActiveWeapon','DigitGrouping','updateBattlebackBitmap1','heTAf','ActSeq_Mechanics_Immortal','allowRandomSpeed','%1EndActionJS','abnormal','mIhpA','BQehn','icon','_callSceneOptions','SmoothImage','fyYJm','jqWuP','startMove','DamageStyles','effects','ActSeq_Impact_ColorBreak','isBusy','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','WMPLT','wzkge','isAlive','12LJatnk','finishActionSet','process_VisuMZ_BattleCore_PreBattleCommonEvent','qmPIv','BattleManager_processAbort','isFlipped','displayAddedStates','isPTB','UgVNT','setCustomDamageFormula','ShowPortraitsBorderStyle','vertCells','addWeaponSwapCommand','isOTB','ActSeq_Movement_Skew','qIOmn','ActSeq_Camera_Reset','isBattleMember','ActSeq_Impact_Desaturate','_stateIconSprite','CmdIconAutoBattle','updateActors','drawLineText','GUARD','_text','action','isAttack','KHrXC','troop','offsetX','xOqvl','iQeEI','regionId','lCxsq','damageContainer','updateCancel','extendTroopMembers','cTXBd','CommandAddOptions','drawText','LjBDZ','ActSeq_Mechanics_StbRemoveExcessActions','nyJLM','Sprite_Battler_setBattler','itemHeight','ActSeq_Movement_Spin','dctHB','addOnceParallelInterpreter','trueRandomTarget','isFrameVisible','CriticalHitRate','HelpAutoBattle','ShowFacesListStyle','Ssffy','StateIconOffsetX','tmhlY','updateVisibility','isUndecided','_stypeIDs','dimColor1','Exploited','bitmap','VisuMZ_2_WeaponSwapSystem','Game_Action_isForFriend','AutoBattleMsg','addBattleCoreAutoBattleStyleCommand','clamp','MtZPj','isDebuffAffected','GuardFormulaJS','BattleManager_startInput','glCpA','battlelog','Class-%1-%2','AttcX','bCVxh','Intensity','WaitForAnimation','drawItemStyleIcon','isItem','_preemptive','ActSeq_Animation_AttackAnimation','KNOih','isCommonEventReserved','kgCNW','ArPenFlat','_iconIndex','kpdVA','removeAnimationFromContainer','DIOYo','critical','_linkedSprite','shouldPopupDamage','LYoSu','ARRAYFUNC','NGYsh','bCDYC','battleGrow','JejUq','vSdYx','skills','Spriteset_Battle_update','LRalh','ItPAS','mcncU','autoBattleStart','_targetHomeX','_wtypeIDs','miAXn','qgUSu','onOpacityEnd','HLkwH','trim','thrust','addState','MGsYi','krlYM','battleCorePreBattleCommonEvent','_active','makeSuccess','FEdKA','FRFOE','Enemy','isCTB','addChildToUiContainer','addShowHpGaugeCommand','indexOf','changePaintOpacity','autoSelectPriority','OffsetX','createBorderStylePortraitSprite','_lineHeight','NaVeO','WridR','PrYXy','setMoveEasingType','_weather','_forceAction','Window_BattleLog_displayMpDamage','counterAttack','currentSymbol','Shadow2','refreshMotion','repositionEnemiesByResolution','_forcedBattlers','createAnimationSprite','ActSeq_Impact_TimeStop','rfUjn','wJmCH','onDisabledPartyCommandSelection','_drawTextBody','animationWait','isAutoBattleCommandEnabled','Window_Options_addGeneralOptions','Sprite_Battler_initMembers','isCharging','initialize','EnableSoftCap','Rate','_updateClientArea','makeData','SvMotionIdleMass-%1-%2','baHYq','RGDkd','IDJrp','battlerShadowScaleX','AutoBattleCancel','OQgwy','displayMpDamage','skewBattler','BattleManager_endBattle','isLearnedSkill','JS\x20BATTLE\x20DEFEAT','Turns','FqfCt','FxwkG','%1Event','displayChangedBuffs','Game_Map_encounterList','actionBattleCoreJS','MBZUp','sortEnemies','Scene_Battle_commandFight','JS\x20%1START\x20TURN','cameraOffsetDuration','commandOptions','performFlinch','Scene_Battle_onActorOk','NextTurn','ntMhP','pNcki','animationId','casting','BattleSystemSTB','guard','battleFloat','getItemDamageAmountLabelOriginal','EscapeFailureJS','currentClass','isBattlerFlipped','makeCommandList','showHelpWindow','_customDamageFormula','spell','escape','StatusWindowAttachmentFront','VisuMZ_2_BattleSystemSTB','updateSpin','updateJump','mainSpriteScaleY','_helpWindow','checkSubstitute','_forcedHomeY','OwYEd','isMagical','NameOffsetY','mfMSi','_hpGaugeSprite','frontviewSpriteY','ScaleX','Game_Map_battleback1Name','ZkFsZ','createAttachedSprites','ShowCurrentState','ARRAYJSON','startActorSelection','VisuMZ_2_BattleSystemETB','compareEnemySprite','_waitCount','_jumpMaxHeight','wtCpR','UhAEz','_canLose','ZwduG','isTpbCharged','requestMotionRefresh','start','_skewX','CmdTextAutoBattle','initMembers','BindCommonEventKeysForObj','status','helpWindowRect','extraPositionX','clearHorrorEffects','inHomePosition','Game_Interpreter_terminate','_totalValue','ActSeq_Mechanics_CtbSpeed','AZzbm','performCollapse','adjustPosition_ScaleToFit','DTB','setHorrorEffectSettings','PKTVQ','JS\x20%1START\x20BATTLE','opacityStart','wykSY','addAutoBattleCommands','CheckVisibleBattleNotetags','slice','WaitForOpacity','ChargeRate','Window_BattleLog_performActionEnd','YgPXj','boxHeight','command357','_tpbState','moveToStartPositionBattleCore','Scene_Party','pages','Game_Battler_performDamage','STRUCT','_activeWeaponSlot','VisuMZ_3_SideviewBattleUI','dlzbL','zOKAu','QZjLW','SCSjQ','_tempActor','Srvnf','NJPPC','dnjnL','createBattleUIOffsetX','setHalfActionsPTB','AsUser','JqLZU','frameDelay','JbVsp','addLoadListener','createTroopNote','isOpen','_lastEnemy','rRPLC','_allTargets','onActorCancel','ActionStart','switchToWeaponType','AAtky','svBattlerAnchorY','sleep','gJwPk','_emptyBitmap','setBattleZoom','FlinchDuration','OEwOf','drawItemBackground','BattleManager_inputtingAction','FlinchDistanceY','turnOrderChangeOTB','isAutoBattleCommandAdded','GUauu','inputtingAction','ActSeq_Movement_WaitForOpacity','ActSeq_Impact_BlueRedInvert','redraw','TWinJ','fVdbL','CmdTextAlign','ActSeq_Impact_MotionBlurScreen','KXqFo','process_VisuMZ_BattleCore_PluginParams','_indent','setWaitMode','WgLYy','_baseLineStack','ConfigManager_applyData','RQREv','changeBattlerOpacity','canUse','animationNextDelay','BattlebackScale','kgPJC','front\x20base','_enemyNameContainer','EscapeSuccess','_forcedBattleLayout','Sprite_Battler_setHome','fYaJC','updateHelp','jhrmS','cameraClamp','UmbkL','Frame','TimeScale','startEnemySelection','bind','ActSeq_BattleLog_Clear','UNTITLED','battlerSprites','addCustomCommands','dQvFf','processRandomizedData','uiMenuStyle','mpDamageFmt','getInputButtonString','alive\x20battlers\x20not\x20user','_defeatedEnemies','updateStart','PreStartBattleJS','bgType','VJUaR','updateAction','notFocusValid','Override','alignBattleCoreDamageSprite','eraseState','startInput','isQueueOptionsMenu','hLGeH','makeBattleCommand','Wqoin','EAMon','BattleManager_checkSubstitute','forceEscapeSprite','ShuffleArray','rnMrL','eklIL','dying','_onceParallelInterpreters','selectLast','startGrow','Sprite_Enemy_update','regenerateAll','ActSeq_Mechanics_EnemyEscape','pdLLD','Destination','criticalHitRate','ocXiF','Sprite_Battler_updateMain','uPDqP','KKqcm','filterArea','Sprite_SvEnemy','_animationSprites','font','skewDuration','OtPyf','ActSeq_Motion_WaitMotionFrame','PreDamageAsUserJS','XUyCO','charged','qSQdL','prnKn','commandAutoBattle','damageFlat','targetObjects','filter','pauseInjectAnimation','hpDamage','PreApply%1JS','KMeFx','pushBaseLine','BZsCB','ihGzB','pwbHw','_deathStateApplied','XnUvL','createMainSprite','setupChild','select','createCancelButton','BwoGl','gUdZz','WaitComplete','BattleManager_updatePhase','DigitGroupingDamageSprites','message1','isEnemy','log','Game_BattlerBase_canAttack','createEnemies','WJkPM','Game_Action_isForOpponent','performActionStart','ActSeq_BattleLog_UI','DefaultStyle','_growX','_skillWindow','getBattlePortrait','VisuMZ_3_ActSeqImpact','prev\x20target','HelpSkillType','ShowCritical','nctlp','JS\x20BATTLE\x20VICTORY','SvBattlerSolo-%1-%2','Window_BattleLog_performMagicEvasion','singleSkill','SvMotionIdleSolo-%1-%2','ATK','setBattler','MDF','setupCriticalEffect','MotionAni','VariableID','FqQUn','performActionEnd','Game_Battler_performActionStart','Scene_Battle_createPartyCommandWindow','Window_BattleLog_displayEvasion','ActSeq_Mechanics_BtbGain','isHiddenSkill','refreshBattlerMotions','alive\x20friends','DEF','WaitCount','updateMain','alterType','QNYoM','isInputting','value1','updateEventMain','lBMnV','setupActionSet','attackSkillId','IgakU','_skewEasing','Game_Battler_regenerateAll','optDisplayTp','updateCallMenu','addCombatLogCommand','eegat','NsJDy','BattleManager_onEscapeFailure','Sprite_Actor_update','ActSeq_Horror_NoiseRemove','Scene_Battle_selectNextCommand','qbyzW','getColor','onSkewEnd','BattleManager_startBattle','ActionCount','Lkmok','addSingleSkillCommand','oeKMm','_windowLayer','setBattlerFacePoint','performAction','_animation','UecHF','WaitForSkew','WaitForProjectile','slices','unshift','gainHp','_enemy','ResetFocus','autoBattleWindowRect','_createEffectsContainer','isDeathStateAffected','getAttackWeaponAnimationId','dKczR','isAppeared','isForAll','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','loadSvEnemy','NameLegacy','setImmortal','_dragonbonesSpriteContainer','onEnemyCancel','ActSeq_Movement_Float','blockWidth','needsActorInputCancel','isDamagePopupRequested','CriticalHitFlat','Kaefe','battleCamera','Game_Party_removeActor','concat','DamageFlat','useDigitGrouping','_frame','_targetOpacity','CQFvT','measureTextWidth','displayCounter','oesVr','PopupOffsetY','MWVui','canAddSkillCommand','aUcdj','VarianceFormulaJS','794556duefSd','_shadowScaleY','BattleVictoryJS','avqPn','canGuard','BattleManager_isTpbMainPhase','onEnemyOk','qpqVO','selectNextCommand','options','spinBattler','TtsRK','nextActiveWeaponSlot','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','doesPageHaveOnceParallelStart','jTZND','okTargetSelectionVisibility','battlerShadowScaleY','vtxCx','addAttackCommand','isDuringNonLoopingMotion','performEvasion','applyForcedGameTroopSettingsBattleCore','min','CriticalHitMultiplier','PrioritySortActive','statusTextAutoBattleStyle','getItemDamageAmountTextBattleCore','Spriteset_Battle_updateActors','CommandVisible','flashDuration','VisuMZ_2_DragonbonesUnion','INBiI','ScaleToFit','autoBattleUseSkills','save','PreEndBattleJS','_checkOn','_battleCoreNoElement','contentsOpacity','_commandNameWindow','_updateFilterArea','VgcCU','isAtbCastingState','_pattern','EFFECT_COMMON_EVENT','partyCommandWindowRectDefaultStyle','setupNegativeImpactFilter','ActSeq_Camera_WaitForCamera','_forcedHomeX','NameAttachStateIcon','updateShadowVisibility','processBattleCoreJS','QBSyK','isWaiting','_enemyWindow','ShowEnemyGauge','startSkew','TMQpD','drawTextEx','Window_BattleLog_clear','MaxLines','isAnyoneInjectAniPrepping','ActSeq_Skew_WaitForSkew','drawItemImagePortraitStyle','WSRCL','QzPzd','FkhbE','VisuMZ_3_FrontviewBattleUI','stop','_actionBattlers','commandStyle','rhPPZ','subject','isPhysical','ForceExploited','BattleLog','BTFyY','updatePositionBattleCore','updateOnceParallelInterpreters','DULlO','HPoCw','gainHalfActionsPTB','basicGaugesY','JS\x20ESCAPE\x20SUCCESS','isCertainHit','Duration','DistanceAdjust','Scene_Battle_startActorCommandSelection','getChildIndex','ArRedFlat','CmdIconEscape','Spriteset_Battle_createLowerLayer','attackAnimationId1','bGSsK','compatibilityVisible','performAttackSlot','QoL','FSrMT','createHelpWindowBattleCore','startTpbTurn','cancelButtonText','needsSelectionBattleCore','_enemies','BTestBypass','gGCYJ','BattleStartEvent','JS\x20%1DAMAGE\x20%2','code','isTurnBased','AdjustRect','setupMotionBlurImpactFilter','onGrowEnd','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','Hbtsl','AsTarget','isAnyoneSpinning','checkExtendTroopCompatibility','addGeneralOptions','performWeaponAnimation','statusWindowRect','battleEffect','PostDamage%1JS','isIncludedInEnemyWindow','ActSeq_Impact_ShockwaveEachTargets','nvxEG','ParseEnemyNotetags','float','Sprite_Damage_createChildSprite','AttachStateOffsetX','jwsiP','svBattlerData','requestRefresh','applyTargetFilters','BaIks','includes','JS\x20%1END\x20BATTLE','WaitForScale','dead','oMGkd','scale','_colorType','maxCols','_backAttachmentSprite','finalizeScale','createAllWindows','reserveCommonEvent','Window_ItemList_maxCols','hrMxj','VisuMZ_3_WeaknessDisplay','getBattlePortraitOffsetY','NVETN','adjustPosition_1for1','OffsetY','drawBackgroundRect','processDefeat','FollowTurn','rGufJ','uxwRH','_baseX','collapse','KtbCs','_performActionEnd'];_0x15df=function(){return _0x531324;};return _0x15df();}