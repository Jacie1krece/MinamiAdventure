//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.77;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.77] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x4adfe0=_0x5881;(function(_0x5489ad,_0x1b131c){const _0x265eee=_0x5881,_0x216739=_0x5489ad();while(!![]){try{const _0x33e4ad=parseInt(_0x265eee(0x318))/0x1+parseInt(_0x265eee(0x95f))/0x2+-parseInt(_0x265eee(0x500))/0x3*(parseInt(_0x265eee(0x28b))/0x4)+-parseInt(_0x265eee(0xb37))/0x5*(-parseInt(_0x265eee(0x456))/0x6)+parseInt(_0x265eee(0x167))/0x7+-parseInt(_0x265eee(0x1cf))/0x8*(parseInt(_0x265eee(0x588))/0x9)+-parseInt(_0x265eee(0x24d))/0xa*(parseInt(_0x265eee(0x404))/0xb);if(_0x33e4ad===_0x1b131c)break;else _0x216739['push'](_0x216739['shift']());}catch(_0x294861){_0x216739['push'](_0x216739['shift']());}}}(_0x3e27,0xc16b2));var label=_0x4adfe0(0xa98),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x4adfe0(0xcd9)](function(_0xc01621){const _0x3e467b=_0x4adfe0;return _0xc01621[_0x3e467b(0xa5d)]&&_0xc01621['description'][_0x3e467b(0x5d0)]('['+label+']');})[0x0];VisuMZ[label][_0x4adfe0(0x5bc)]=VisuMZ[label][_0x4adfe0(0x5bc)]||{},VisuMZ[_0x4adfe0(0x360)]=function(_0x40146f,_0x5a2ba9){const _0x170eb0=_0x4adfe0;for(const _0x17fa1c in _0x5a2ba9){if(_0x170eb0(0x88d)!=='cLXHs')return this[_0x170eb0(0x26e)][_0x170eb0(0xa38)]();else{if(_0x17fa1c[_0x170eb0(0x634)](/(.*):(.*)/i)){if('dHsOS'==='NNpfo'){const _0x2c6968=this[_0x170eb0(0x48b)][_0x170eb0(0x144)](),_0x193cc6=this[_0x170eb0(0x48b)];_0x2c6968&&_0x2c6968[_0x170eb0(0x92f)]()===_0x193cc6&&_0x2c6968[_0x170eb0(0x56c)]('PreStartActionJS'),_0x11941b[_0x170eb0(0xa98)][_0x170eb0(0xc72)][_0x170eb0(0x61e)](this),_0x2c6968&&_0x2c6968[_0x170eb0(0x92f)]()===_0x193cc6&&_0x2c6968[_0x170eb0(0x56c)]('PostStartActionJS');}else{const _0x192142=String(RegExp['$1']),_0x517966=String(RegExp['$2'])[_0x170eb0(0xb24)]()[_0x170eb0(0xb83)]();let _0x24db0d,_0x4f5a08,_0x54e22c;switch(_0x517966){case'NUM':_0x24db0d=_0x5a2ba9[_0x17fa1c]!==''?Number(_0x5a2ba9[_0x17fa1c]):0x0;break;case _0x170eb0(0x54d):_0x4f5a08=_0x5a2ba9[_0x17fa1c]!==''?JSON[_0x170eb0(0xc5f)](_0x5a2ba9[_0x17fa1c]):[],_0x24db0d=_0x4f5a08[_0x170eb0(0x2f7)](_0x468280=>Number(_0x468280));break;case'EVAL':_0x24db0d=_0x5a2ba9[_0x17fa1c]!==''?eval(_0x5a2ba9[_0x17fa1c]):null;break;case'ARRAYEVAL':_0x4f5a08=_0x5a2ba9[_0x17fa1c]!==''?JSON[_0x170eb0(0xc5f)](_0x5a2ba9[_0x17fa1c]):[],_0x24db0d=_0x4f5a08[_0x170eb0(0x2f7)](_0x5c212d=>eval(_0x5c212d));break;case _0x170eb0(0x8af):_0x24db0d=_0x5a2ba9[_0x17fa1c]!==''?JSON[_0x170eb0(0xc5f)](_0x5a2ba9[_0x17fa1c]):'';break;case _0x170eb0(0x4d7):_0x4f5a08=_0x5a2ba9[_0x17fa1c]!==''?JSON[_0x170eb0(0xc5f)](_0x5a2ba9[_0x17fa1c]):[],_0x24db0d=_0x4f5a08[_0x170eb0(0x2f7)](_0x49ee70=>JSON[_0x170eb0(0xc5f)](_0x49ee70));break;case _0x170eb0(0xc94):_0x24db0d=_0x5a2ba9[_0x17fa1c]!==''?new Function(JSON[_0x170eb0(0xc5f)](_0x5a2ba9[_0x17fa1c])):new Function(_0x170eb0(0xc54));break;case'ARRAYFUNC':_0x4f5a08=_0x5a2ba9[_0x17fa1c]!==''?JSON[_0x170eb0(0xc5f)](_0x5a2ba9[_0x17fa1c]):[],_0x24db0d=_0x4f5a08[_0x170eb0(0x2f7)](_0x1b69db=>new Function(JSON['parse'](_0x1b69db)));break;case _0x170eb0(0x6fb):_0x24db0d=_0x5a2ba9[_0x17fa1c]!==''?String(_0x5a2ba9[_0x17fa1c]):'';break;case _0x170eb0(0x3ae):_0x4f5a08=_0x5a2ba9[_0x17fa1c]!==''?JSON[_0x170eb0(0xc5f)](_0x5a2ba9[_0x17fa1c]):[],_0x24db0d=_0x4f5a08[_0x170eb0(0x2f7)](_0x3b3b64=>String(_0x3b3b64));break;case _0x170eb0(0x747):_0x54e22c=_0x5a2ba9[_0x17fa1c]!==''?JSON[_0x170eb0(0xc5f)](_0x5a2ba9[_0x17fa1c]):{},_0x40146f[_0x192142]={},VisuMZ[_0x170eb0(0x360)](_0x40146f[_0x192142],_0x54e22c);continue;case'ARRAYSTRUCT':_0x4f5a08=_0x5a2ba9[_0x17fa1c]!==''?JSON['parse'](_0x5a2ba9[_0x17fa1c]):[],_0x24db0d=_0x4f5a08[_0x170eb0(0x2f7)](_0x500b9f=>VisuMZ[_0x170eb0(0x360)]({},JSON[_0x170eb0(0xc5f)](_0x500b9f)));break;default:continue;}_0x40146f[_0x192142]=_0x24db0d;}}}}return _0x40146f;},(_0x5e9a85=>{const _0x12dbef=_0x4adfe0,_0x523d7d=_0x5e9a85[_0x12dbef(0xa23)];for(const _0x51ac5e of dependencies){if(_0x12dbef(0x3eb)===_0x12dbef(0x402)){if(_0x535f3c['VisuMZ_2_BattleSystemCTB']&&_0x890342['isCTB']())return![];else{if(!_0x507cb7[_0x12dbef(0xa98)][_0x12dbef(0x674)])return![];const _0x575324=_0x1c26cd[_0x12dbef(0x66d)]()['filter'](_0xd24c71=>_0xd24c71['isTpbCharged']()&&_0xd24c71[_0x12dbef(0x305)]());return _0x575324[_0x12dbef(0xa59)]>0x0&&_0x994a3c[_0x12dbef(0xcf8)]()!==_0x575324[_0x575324[_0x12dbef(0xa59)]-0x1];}}else{if(!Imported[_0x51ac5e]){alert(_0x12dbef(0x8d6)[_0x12dbef(0x31d)](_0x523d7d,_0x51ac5e)),SceneManager[_0x12dbef(0x162)]();break;}}}const _0x2a5995=_0x5e9a85[_0x12dbef(0xb68)];if(_0x2a5995[_0x12dbef(0x634)](/\[Version[ ](.*?)\]/i)){const _0x9a8243=Number(RegExp['$1']);_0x9a8243!==VisuMZ[label][_0x12dbef(0xcc9)]&&(_0x12dbef(0x3a5)!==_0x12dbef(0x327)?(alert(_0x12dbef(0x892)[_0x12dbef(0x31d)](_0x523d7d,_0x9a8243)),SceneManager[_0x12dbef(0x162)]()):this['setHandler']('pagedown',this[_0x12dbef(0x668)]['bind'](this)));}if(_0x2a5995[_0x12dbef(0x634)](/\[Tier[ ](\d+)\]/i)){if(_0x12dbef(0x57a)===_0x12dbef(0x9aa))_0x221e6a[_0x12dbef(0xa98)][_0x12dbef(0x616)][_0x12dbef(0x61e)](this),this[_0x12dbef(0x983)]();else{const _0x4d75b1=Number(RegExp['$1']);_0x4d75b1<tier?_0x12dbef(0xcd0)==='LmVvx'?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x12dbef(0x31d)](_0x523d7d,_0x4d75b1,tier)),SceneManager[_0x12dbef(0x162)]()):(_0x378ebb[_0x12dbef(0x572)](),_0x435e3f[_0x12dbef(0x50c)](_0x305b0d[_0x12dbef(0x5e4)]())):tier=Math['max'](_0x4d75b1,tier);}}VisuMZ[_0x12dbef(0x360)](VisuMZ[label][_0x12dbef(0x5bc)],_0x5e9a85[_0x12dbef(0xcdd)]);})(pluginData),VisuMZ[_0x4adfe0(0x35a)]=function(_0x24525b){const _0x57f2a1=_0x4adfe0;let _0x386cda=[];for(const _0x151051 of _0x24525b){_0x386cda=_0x386cda[_0x57f2a1(0x197)](VisuMZ['ConvertActionSequenceTarget'](_0x151051));}return _0x386cda[_0x57f2a1(0xcd9)](_0x10b60b=>_0x10b60b);},VisuMZ['ConvertActionSequenceTarget']=function(_0x21b47d){const _0x944d9a=_0x4adfe0,_0x46d263=BattleManager['allBattleMembers']()[_0x944d9a(0xcd9)](_0x58f1c7=>_0x58f1c7&&_0x58f1c7['isAppeared']()),_0x5d84da=BattleManager[_0x944d9a(0x48b)],_0x2c0170=BattleManager[_0x944d9a(0x48f)],_0x2d9b9d=BattleManager['_allTargets']?BattleManager[_0x944d9a(0x1a7)]['slice'](0x0):_0x46d263;_0x21b47d=_0x21b47d[_0x944d9a(0xc1b)]()[_0x944d9a(0xb83)]();if(_0x21b47d==='user')return[_0x5d84da];else{if(_0x21b47d===_0x944d9a(0x1fb))return[_0x2c0170];else{if(_0x21b47d==='prev\x20target'){if(_0x2c0170){const _0x358e6e=_0x2d9b9d[_0x944d9a(0x766)](_0x2c0170);return _0x358e6e>=0x0?[_0x2d9b9d[_0x358e6e-0x1]||_0x2c0170]:[_0x2c0170];}}else{if(_0x21b47d===_0x944d9a(0x387)){if(_0x2c0170){if(_0x944d9a(0x9eb)===_0x944d9a(0x9eb)){const _0x4391b2=_0x2d9b9d[_0x944d9a(0x766)](_0x2c0170);return _0x4391b2>=0x0?[_0x2d9b9d[_0x4391b2+0x1]||_0x2c0170]:[_0x2c0170];}else return _0x517ee0=_0x3e5abe[_0x944d9a(0xb24)]()['trim'](),this[_0x944d9a(0xc10)]()===_0x446415;}}else{if(_0x21b47d===_0x944d9a(0x6e2))return _0x944d9a(0xcf2)!=='xMibW'?_0x10f8f9:_0x2d9b9d;else{if(_0x21b47d===_0x944d9a(0xbd0))return[_0x5d84da][_0x944d9a(0x197)](_0x2d9b9d);else{if(_0x21b47d===_0x944d9a(0x68f))return _0x46d263['filter'](_0x18aab1=>_0x18aab1!==_0x5d84da&&!_0x2d9b9d[_0x944d9a(0x5d0)](_0x18aab1)&&_0x18aab1[_0x944d9a(0x9e1)]());else{if(_0x21b47d===_0x944d9a(0x2e1)){if(_0x944d9a(0xca9)!==_0x944d9a(0xca9))_0x1edee2[_0x944d9a(0x3ed)](_0x1fba9a);else return[VisuMZ[_0x944d9a(0xad1)]()];}else{if(_0x21b47d[_0x944d9a(0x634)](/SPECIAL (.*)>/i)){const _0x44f878=String(RegExp['$1'])[_0x944d9a(0x176)](',')[_0x944d9a(0x2f7)](_0x2c6a67=>_0x2c6a67[_0x944d9a(0xb83)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x44f878)];}}}}}}}}}if(_0x5d84da){if(_0x21b47d===_0x944d9a(0x20c))return'UWKDc'!==_0x944d9a(0x949)?_0xd9dcfd[_0x944d9a(0xaaf)]():_0x5d84da['friendsUnit']()['aliveMembers']();else{if(_0x21b47d===_0x944d9a(0x26a))return _0x5d84da['friendsUnit']()[_0x944d9a(0x66d)]()['filter'](_0x3517a8=>_0x3517a8!==_0x5d84da);else{if(_0x21b47d===_0x944d9a(0xc1d))return _0x5d84da[_0x944d9a(0x6e8)]()[_0x944d9a(0x66d)]()[_0x944d9a(0xcd9)](_0x7359d2=>_0x7359d2!==_0x2c0170);else{if(_0x21b47d===_0x944d9a(0x9d0))return _0x5d84da[_0x944d9a(0x6e8)]()[_0x944d9a(0xce8)]();else{if(_0x21b47d[_0x944d9a(0x634)](/FRIEND INDEX (\d+)/i)){const _0x2e6295=Number(RegExp['$1']);return[_0x5d84da[_0x944d9a(0x6e8)]()[_0x944d9a(0x42b)]()[_0x2e6295]];}}}}}if(_0x21b47d===_0x944d9a(0x4fa))return _0x5d84da[_0x944d9a(0xad9)]()[_0x944d9a(0x66d)]();else{if(_0x21b47d===_0x944d9a(0x7c2))return _0x5d84da[_0x944d9a(0xad9)]()[_0x944d9a(0x66d)]()[_0x944d9a(0xcd9)](_0x1b5de8=>_0x1b5de8!==_0x2c0170);else{if(_0x21b47d===_0x944d9a(0x610))return _0x5d84da[_0x944d9a(0xad9)]()[_0x944d9a(0xce8)]();else{if(_0x21b47d[_0x944d9a(0x634)](/OPPONENT INDEX (\d+)/i)){const _0x1bb2dc=Number(RegExp['$1']);return[_0x5d84da[_0x944d9a(0xad9)]()[_0x944d9a(0x42b)]()[_0x1bb2dc]];}}}}}if(_0x21b47d===_0x944d9a(0xb36))return $gameParty['aliveMembers']();else{if(_0x21b47d===_0x944d9a(0xb35))return $gameParty[_0x944d9a(0x66d)]()[_0x944d9a(0xcd9)](_0x194b80=>_0x194b80!==_0x5d84da);else{if(_0x21b47d===_0x944d9a(0x131))return $gameParty[_0x944d9a(0x66d)]()[_0x944d9a(0xcd9)](_0xca71a8=>_0xca71a8!==_0x2c0170);else{if(_0x21b47d===_0x944d9a(0x27d)){if(_0x944d9a(0x9f8)!=='YbIvR')return $gameParty['deadMembers']();else{if(!_0x54c673[_0x944d9a(0xa98)]['Settings'][_0x944d9a(0x22d)][_0x944d9a(0x495)])return;const _0x3c62bc=this[_0x944d9a(0xcf8)](_0x921f97),_0x2f67f1=this[_0x944d9a(0x8a8)](_0x106099);_0x2f67f1[_0x944d9a(0x1e2)]=_0xe6f01a['faceWidth'],_0x2f67f1[_0x944d9a(0x6a1)]-=0x2,this[_0x944d9a(0x599)](_0x3c62bc,_0x2f67f1['x']+0x1,_0x2f67f1['y']+0x1,_0x2f67f1[_0x944d9a(0x1e2)],_0x2f67f1[_0x944d9a(0x6a1)]);}}else{if(_0x21b47d[_0x944d9a(0x634)](/ACTOR INDEX (\d+)/i)){if(_0x944d9a(0x84d)!=='NhztD')return;else{const _0x410b97=Number(RegExp['$1']);return[$gameParty['members']()[_0x410b97]];}}else{if(_0x21b47d[_0x944d9a(0x634)](/ACTOR ID (\d+)/i)){const _0x4eadb8=Number(RegExp['$1']);return[$gameActors[_0x944d9a(0xcf8)](_0x4eadb8)];}}}}}}if(_0x21b47d==='alive\x20enemies'){if(_0x944d9a(0x238)===_0x944d9a(0x238))return $gameTroop[_0x944d9a(0x66d)]();else{const _0x147e1e=this['findSymbolExt']('singleSkill',_0x683d30['id']);this[_0x944d9a(0x165)](_0x147e1e||0x0);}}else{if(_0x21b47d==='alive\x20enemies\x20not\x20user'){if(_0x944d9a(0x89a)===_0x944d9a(0x425)){if(!_0x4c121d[_0x944d9a(0x445)])return;const _0x16db44=_0x91ce8[_0x944d9a(0x726)]['_spriteset'];if(!_0x16db44)return;if(_0x487f98['ActSeqImpact']['version']<=1.04){_0x34ca3c(_0x944d9a(0x79c)),_0xbbc922[_0x944d9a(0x162)]();return;}_0x247337[_0x944d9a(0x360)](_0x2de3d4,_0xf4bd62);const _0xfbe370=_0x16f08d[_0x944d9a(0x25c)];_0x16db44[_0x944d9a(0x5b4)](_0xfbe370);}else return $gameTroop[_0x944d9a(0x66d)]()[_0x944d9a(0xcd9)](_0x4f3f14=>_0x4f3f14!==_0x5d84da);}else{if(_0x21b47d===_0x944d9a(0x72b))return _0x944d9a(0xb85)===_0x944d9a(0xb85)?$gameTroop[_0x944d9a(0x66d)]()[_0x944d9a(0xcd9)](_0x5eed2b=>_0x5eed2b!==_0x2c0170):this[_0x944d9a(0xca2)]();else{if(_0x21b47d===_0x944d9a(0x68d))return _0x944d9a(0xb5d)===_0x944d9a(0x67f)?![]:$gameTroop[_0x944d9a(0xce8)]();else{if(_0x21b47d[_0x944d9a(0x634)](/ENEMY INDEX (\d+)/i)){const _0x39ac3f=Number(RegExp['$1']);return[$gameTroop[_0x944d9a(0x42b)]()[_0x39ac3f]];}else{if(_0x21b47d[_0x944d9a(0x634)](/ENEMY ID (\d+)/i)){const _0x49bfd7=Number(RegExp['$1']);return $gameTroop[_0x944d9a(0x66d)]()['filter'](_0x1c1f24=>_0x1c1f24[_0x944d9a(0xba4)]()===_0x49bfd7);}}}}}}if(_0x21b47d===_0x944d9a(0x33c)){if(_0x944d9a(0xb6a)===_0x944d9a(0x6e0)){const _0x31b3a=_0x2915ec(_0x1f05d8['$1'])[_0x944d9a(0x176)](/[\r\n]+/)[_0x944d9a(0xb6e)]('');_0x268dc9['name']=_0x1870aa[_0x944d9a(0x5e9)](_0x31b3a);}else return _0x46d263[_0x944d9a(0xcd9)](_0x53b4ac=>_0x53b4ac[_0x944d9a(0xb82)]());}else{if(_0x21b47d==='alive\x20battlers\x20not\x20user'){if(_0x944d9a(0x55a)===_0x944d9a(0x55a))return _0x46d263[_0x944d9a(0xcd9)](_0x32ce5d=>_0x32ce5d[_0x944d9a(0xb82)]()&&_0x32ce5d!==_0x5d84da);else{const _0x498d6e=this[_0x944d9a(0xb7f)]['bitmap'];this[_0x944d9a(0xb7f)][_0x944d9a(0xb0f)](0x0,0x0,_0x498d6e[_0x944d9a(0x1e2)],_0x498d6e[_0x944d9a(0x6a1)]);}}else{if(_0x21b47d==='alive\x20battlers\x20not\x20target'){if(_0x944d9a(0x383)!==_0x944d9a(0x383))_0x54210f['BattleSystemBTB'][_0x944d9a(0xcc9)]<1.11&&(_0x177c46(_0x5706f1['format'](_0x944d9a(0x441))),_0x134131['exit']());else return _0x46d263[_0x944d9a(0xcd9)](_0x23aef3=>_0x23aef3['isAlive']()&&_0x23aef3!==_0x2c0170);}else{if(_0x21b47d===_0x944d9a(0x45e))return _0x46d263[_0x944d9a(0xcd9)](_0x1366e7=>_0x1366e7['isDead']());}}}return[];},VisuMZ[_0x4adfe0(0xad1)]=function(){const _0x5149c6=_0x4adfe0;return BattleManager[_0x5149c6(0x48f)];},VisuMZ['GetActionSequenceSpecialTargetWithFlags']=function(_0x4b7c71){const _0x169eb0=_0x4adfe0;return BattleManager[_0x169eb0(0x48f)];},PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x3f4),_0x897f13=>{const _0x25e03a=_0x4adfe0;if(!SceneManager[_0x25e03a(0xcfa)]())return;VisuMZ[_0x25e03a(0x360)](_0x897f13,_0x897f13);const _0x44a297=$gameTemp['getLastPluginCommandInterpreter'](),_0x576f3b=BattleManager['_action'],_0x434df5=BattleManager['_subject'],_0x1ff515=BattleManager[_0x25e03a(0x1a7)]?BattleManager[_0x25e03a(0x1a7)][_0x25e03a(0x7bc)](0x0):[],_0x37e75d=BattleManager[_0x25e03a(0x964)];if(!_0x44a297||!_0x576f3b||!_0x434df5)return;if(!_0x576f3b[_0x25e03a(0x28e)]())return;if(_0x897f13['DisplayAction'])_0x37e75d[_0x25e03a(0xc60)](_0x434df5,_0x576f3b[_0x25e03a(0x28e)]());_0x897f13['ApplyImmortal']&&_0x37e75d[_0x25e03a(0x98e)](_0x25e03a(0x7e0),_0x434df5,_0x1ff515,!![]);if(_0x897f13[_0x25e03a(0xbef)])_0x37e75d[_0x25e03a(0x98e)](_0x25e03a(0x7cc),_0x434df5,_0x576f3b);if(_0x897f13['WaitForMovement'])_0x37e75d[_0x25e03a(0x98e)](_0x25e03a(0xbca));if(_0x897f13[_0x25e03a(0x3e9)])_0x37e75d[_0x25e03a(0x98e)](_0x25e03a(0xa72),_0x434df5,_0x576f3b);if(_0x897f13[_0x25e03a(0x77e)])_0x37e75d[_0x25e03a(0x98e)]('waitForAnimation');_0x44a297[_0x25e03a(0x98c)](_0x25e03a(0x957));}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x2da),_0xaa4ab3=>{const _0x4c4022=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xaa4ab3,_0xaa4ab3);const _0x304f2f=$gameTemp[_0x4c4022(0x781)](),_0x379a76=BattleManager['_action'],_0x3e5f13=BattleManager['_subject'],_0x34cc84=BattleManager['_allTargets']?BattleManager[_0x4c4022(0x1a7)][_0x4c4022(0x7bc)](0x0):[],_0x1194a1=BattleManager[_0x4c4022(0x964)],_0x26faab=_0xaa4ab3['DualWield']??![];if(!_0x304f2f||!_0x379a76||!_0x3e5f13)return;if(!_0x379a76[_0x4c4022(0x28e)]())return;let _0x89822=_0x26faab?_0x1194a1[_0x4c4022(0x69e)](_0x3e5f13):0x1;for(let _0x382394=0x0;_0x382394<_0x89822;_0x382394++){_0x26faab&&_0x3e5f13[_0x4c4022(0x771)]()&&_0x1194a1[_0x4c4022(0x98e)](_0x4c4022(0x9d8),_0x3e5f13,_0x382394);if(_0xaa4ab3[_0x4c4022(0x6f4)])_0x1194a1[_0x4c4022(0x98e)](_0x4c4022(0x870),_0x3e5f13,_0x379a76);if(_0xaa4ab3[_0x4c4022(0xcb1)]>0x0)_0x1194a1['push'](_0x4c4022(0x4e4),_0xaa4ab3[_0x4c4022(0xcb1)]);if(_0xaa4ab3['ActionAnimation'])_0x1194a1[_0x4c4022(0x98e)](_0x4c4022(0x22e),_0x3e5f13,_0x34cc84,_0x379a76[_0x4c4022(0x28e)]()[_0x4c4022(0x49f)]);if(_0xaa4ab3[_0x4c4022(0x77e)])_0x1194a1[_0x4c4022(0x98e)](_0x4c4022(0x67c));for(const _0x38578a of _0x34cc84){if(_0x4c4022(0x13a)==='MqcIh')_0x10b8c3=_0x46d1f2>=_0xa931f2?_0x1e280c:_0x5de739;else{if(!_0x38578a)continue;if(_0xaa4ab3[_0x4c4022(0x1df)])_0x1194a1[_0x4c4022(0x98e)](_0x4c4022(0x700),_0x3e5f13,_0x38578a);}}}_0x26faab&&_0x3e5f13[_0x4c4022(0x771)]()&&_0x1194a1[_0x4c4022(0x98e)]('clearActiveWeaponSet',_0x3e5f13);if(_0xaa4ab3[_0x4c4022(0x714)])_0x1194a1[_0x4c4022(0x98e)](_0x4c4022(0x7e0),_0x3e5f13,_0x34cc84,![]);_0x304f2f[_0x4c4022(0x98c)](_0x4c4022(0x957));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Set_TargetActionSet',_0x1dd303=>{const _0x2f2c5f=_0x4adfe0;if(!SceneManager[_0x2f2c5f(0xcfa)]())return;VisuMZ[_0x2f2c5f(0x360)](_0x1dd303,_0x1dd303);const _0x54c036=$gameTemp[_0x2f2c5f(0x781)](),_0x5cb71e=BattleManager[_0x2f2c5f(0x3a3)],_0x4e5c0b=BattleManager['_subject'],_0x5373c7=BattleManager[_0x2f2c5f(0x1a7)]?BattleManager['_allTargets']['slice'](0x0):[],_0x103bbd=BattleManager['_logWindow'],_0x1767b1=_0x1dd303[_0x2f2c5f(0xca1)]??![];if(!_0x54c036||!_0x5cb71e||!_0x4e5c0b)return;if(!_0x5cb71e[_0x2f2c5f(0x28e)]())return;let _0x24cc9c=_0x1767b1?_0x103bbd[_0x2f2c5f(0x69e)](_0x4e5c0b):0x1;for(let _0x275f24=0x0;_0x275f24<_0x24cc9c;_0x275f24++){for(const _0x2545ee of _0x5373c7){if(!_0x2545ee)continue;_0x1767b1&&_0x4e5c0b['isActor']()&&(_0x2f2c5f(0xb11)!==_0x2f2c5f(0xa8f)?_0x103bbd[_0x2f2c5f(0x98e)](_0x2f2c5f(0x9d8),_0x4e5c0b,_0x275f24):_0x1a520a+=(_0x48b871[_0x2f2c5f(0x13b)]()?0x1:-0x1)*_0x83f5d['mainSpriteWidth']()/0x2);if(_0x1dd303[_0x2f2c5f(0x6f4)])_0x103bbd['push'](_0x2f2c5f(0x870),_0x4e5c0b,_0x5cb71e);if(_0x1dd303[_0x2f2c5f(0x850)]>0x0)_0x103bbd[_0x2f2c5f(0x98e)]('waitCount',_0x1dd303[_0x2f2c5f(0x850)]);if(_0x1dd303[_0x2f2c5f(0xc9a)])_0x103bbd['push'](_0x2f2c5f(0x22e),_0x4e5c0b,[_0x2545ee],_0x5cb71e[_0x2f2c5f(0x28e)]()[_0x2f2c5f(0x49f)]);if(_0x1dd303['WaitCount2']>0x0)_0x103bbd['push']('waitCount',_0x1dd303[_0x2f2c5f(0xabe)]);if(_0x1dd303['ActionEffect'])_0x103bbd['push']('actionEffect',_0x4e5c0b,_0x2545ee);}}_0x1767b1&&_0x4e5c0b['isActor']()&&_0x103bbd['push'](_0x2f2c5f(0x3ea),_0x4e5c0b);if(_0x1dd303[_0x2f2c5f(0x714)])_0x103bbd[_0x2f2c5f(0x98e)](_0x2f2c5f(0x7e0),_0x4e5c0b,_0x5373c7,![]);_0x54c036[_0x2f2c5f(0x98c)](_0x2f2c5f(0x957));}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],'ActSeq_Set_FinishAction',_0x2767d0=>{const _0x4d4a5=_0x4adfe0;if(!SceneManager[_0x4d4a5(0xcfa)]())return;VisuMZ[_0x4d4a5(0x360)](_0x2767d0,_0x2767d0);const _0x165105=$gameTemp[_0x4d4a5(0x781)](),_0x15810e=BattleManager['_action'],_0x3de909=BattleManager[_0x4d4a5(0x48b)],_0x386d8b=BattleManager[_0x4d4a5(0x1a7)]?BattleManager['_allTargets'][_0x4d4a5(0x7bc)](0x0):[],_0x54b60d=BattleManager[_0x4d4a5(0x964)];if(!_0x165105||!_0x15810e||!_0x3de909)return;if(!_0x15810e[_0x4d4a5(0x28e)]())return;if(_0x2767d0['ApplyImmortal'])_0x54b60d[_0x4d4a5(0x98e)](_0x4d4a5(0x7e0),_0x3de909,_0x386d8b,![]);if(_0x2767d0['WaitForNewLine'])_0x54b60d['push']('waitForNewLine');if(_0x2767d0['WaitForEffect'])_0x54b60d[_0x4d4a5(0x98e)](_0x4d4a5(0x9ef));if(_0x2767d0[_0x4d4a5(0x53b)])_0x54b60d[_0x4d4a5(0x98e)]('clear');if(_0x2767d0[_0x4d4a5(0x8da)])_0x54b60d[_0x4d4a5(0x98e)](_0x4d4a5(0xad5),_0x3de909);if(_0x2767d0[_0x4d4a5(0xc03)])_0x54b60d[_0x4d4a5(0x98e)](_0x4d4a5(0xbca));_0x165105[_0x4d4a5(0x98c)](_0x4d4a5(0x957));}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],'ActSeq_ChangeAngle',_0x239fa=>{const _0x4ce883=_0x4adfe0;if(!SceneManager[_0x4ce883(0xcfa)]())return;if(!Imported[_0x4ce883(0x3cb)])return;VisuMZ[_0x4ce883(0x360)](_0x239fa,_0x239fa);const _0x35b4c3=$gameTemp[_0x4ce883(0x781)](),_0x35bc1c=_0x239fa[_0x4ce883(0x608)];if(!_0x35b4c3)return;$gameScreen[_0x4ce883(0x9c4)](_0x239fa[_0x4ce883(0x7c9)],_0x239fa[_0x4ce883(0x96d)],_0x239fa['EasingType']);if(_0x35bc1c)_0x35b4c3[_0x4ce883(0x98c)](_0x4ce883(0xbbc));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xc55),_0x1c1479=>{const _0x4bfc34=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4bfc34(0x3cb)])return;VisuMZ[_0x4bfc34(0x360)](_0x1c1479,_0x1c1479);const _0x3bba77=$gameTemp[_0x4bfc34(0x781)](),_0x35b29c=_0x1c1479[_0x4bfc34(0x608)];if(!_0x3bba77)return;$gameScreen[_0x4bfc34(0x9c4)](0x0,_0x1c1479['Duration'],_0x1c1479[_0x4bfc34(0xc6d)]);if(_0x35b29c)_0x3bba77[_0x4bfc34(0x98c)](_0x4bfc34(0xbbc));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Angle_WaitForAngle',_0x4d61ce=>{const _0x3f9c50=_0x4adfe0;if(!SceneManager[_0x3f9c50(0xcfa)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x131769=$gameTemp[_0x3f9c50(0x781)]();if(!_0x131769)return;_0x131769['setWaitMode'](_0x3f9c50(0xbbc));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x8f1),_0x2a3da4=>{const _0x596973=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2a3da4,_0x2a3da4);const _0x281d85=$gameTemp[_0x596973(0x781)](),_0x7c8ec8=BattleManager[_0x596973(0x3a3)],_0x513bc9=BattleManager[_0x596973(0x48b)],_0x366e3a=VisuMZ[_0x596973(0x35a)](_0x2a3da4[_0x596973(0x114)]),_0x277177=_0x2a3da4[_0x596973(0x547)],_0x2ea26d=BattleManager['_logWindow'];if(!_0x281d85||!_0x7c8ec8||!_0x513bc9)return;if(!_0x7c8ec8[_0x596973(0x28e)]())return;let _0x28ef61=_0x7c8ec8[_0x596973(0x28e)]()[_0x596973(0x49f)];if(_0x28ef61<0x0)_0x28ef61=_0x513bc9[_0x596973(0x512)]();$gameTemp['requestAnimation'](_0x366e3a,_0x28ef61,_0x277177),_0x2a3da4[_0x596973(0x77e)]&&_0x281d85[_0x596973(0x98c)]('battleAnimation');}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],'ActSeq_Animation_AttackAnimation',_0x491502=>{const _0x1090a3=_0x4adfe0;if(!SceneManager[_0x1090a3(0xcfa)]())return;VisuMZ[_0x1090a3(0x360)](_0x491502,_0x491502);const _0x34c81b=$gameTemp['getLastPluginCommandInterpreter'](),_0x5ecaaa=BattleManager['_subject'],_0x553cc8=VisuMZ[_0x1090a3(0x35a)](_0x491502[_0x1090a3(0x114)]),_0x26f422=_0x491502['Mirror'],_0x38f096=BattleManager[_0x1090a3(0x964)];if(!_0x34c81b||!_0x5ecaaa)return;const _0x14f7d7=_0x5ecaaa[_0x1090a3(0x512)]();$gameTemp[_0x1090a3(0x135)](_0x553cc8,_0x14f7d7,_0x26f422),_0x491502['WaitForAnimation']&&_0x34c81b[_0x1090a3(0x98c)](_0x1090a3(0x281));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Animation_AttackAnimation2',_0x21f62c=>{const _0x4c82c5=_0x4adfe0;if(!SceneManager[_0x4c82c5(0xcfa)]())return;VisuMZ[_0x4c82c5(0x360)](_0x21f62c,_0x21f62c);const _0x3b258f=_0x52dff7[_0x4c82c5(0x155)](_0x21f62c['Slot']);if(_0x3b258f<=0x0)return;const _0x771636=$gameTemp[_0x4c82c5(0x781)](),_0x52dff7=BattleManager[_0x4c82c5(0x48b)],_0x4ad6ba=VisuMZ[_0x4c82c5(0x35a)](_0x21f62c['Targets']),_0x249520=_0x21f62c[_0x4c82c5(0x547)],_0x153376=BattleManager['_logWindow'];if(!_0x771636||!_0x52dff7)return;$gameTemp['requestAnimation'](_0x4ad6ba,_0x3b258f,_0x249520);if(_0x21f62c[_0x4c82c5(0x77e)]){if(_0x4c82c5(0xa1e)!=='xHlBs')_0x771636[_0x4c82c5(0x98c)](_0x4c82c5(0x281));else return'#%1'[_0x4c82c5(0x31d)](_0x145699(_0xa5adba['$1']));}}),PluginManager['registerCommand'](pluginData['name'],_0x4adfe0(0x181),_0x8d0dfd=>{const _0x2ebcd3=_0x4adfe0;if(!SceneManager[_0x2ebcd3(0xcfa)]())return;VisuMZ[_0x2ebcd3(0x360)](_0x8d0dfd,_0x8d0dfd);const _0x3545a0=$gameTemp['getLastPluginCommandInterpreter'](),_0x68d4ec=BattleManager[_0x2ebcd3(0x3a3)],_0x4d25df=_0x8d0dfd[_0x2ebcd3(0x547)],_0x53513e=VisuMZ['CreateActionSequenceTargets'](_0x8d0dfd[_0x2ebcd3(0x114)]);if(!_0x3545a0||!_0x68d4ec)return;if(!_0x68d4ec['item']())return;for(const _0x332850 of _0x53513e){if(!_0x332850)continue;_0x332850[_0x2ebcd3(0xa72)](_0x68d4ec,_0x4d25df);}if(_0x8d0dfd[_0x2ebcd3(0x77e)])_0x3545a0[_0x2ebcd3(0x98c)](_0x2ebcd3(0x281));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x296),_0x2cb02a=>{const _0xe78c80=_0x4adfe0;VisuMZ[_0xe78c80(0x360)](_0x2cb02a,_0x2cb02a);const _0x472e9c=$gameTemp[_0xe78c80(0x781)](),_0x31fe93=VisuMZ[_0xe78c80(0x35a)](_0x2cb02a[_0xe78c80(0x114)]),_0x500f7f=_0x2cb02a[_0xe78c80(0x7a7)];if(!_0x500f7f)return;for(const _0x535fce of _0x31fe93){if(!_0x535fce)continue;if(!_0x535fce['isActor']())continue;_0x535fce[_0xe78c80(0x7b4)](_0x500f7f);}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x3c2),_0x3844c3=>{const _0x3a60d7=_0x4adfe0;if(!SceneManager['_scene'])return;if(!SceneManager['_scene'][_0x3a60d7(0x898)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x3a60d7(0x360)](_0x3844c3,_0x3844c3);const _0x45296a=$gameTemp[_0x3a60d7(0x781)](),_0x1e6bf4=Math['round'](_0x3844c3[_0x3a60d7(0x33a)]),_0x87408c=Math[_0x3a60d7(0xb95)](_0x3844c3[_0x3a60d7(0x3bd)]);$gameTemp[_0x3a60d7(0xaca)](_0x1e6bf4,_0x87408c,_0x3844c3[_0x3a60d7(0x2be)],_0x3844c3['Mirror'],_0x3844c3[_0x3a60d7(0x200)]),_0x3844c3[_0x3a60d7(0x53f)]&&_0x45296a&&(SceneManager['_scene'][_0x3a60d7(0x898)][_0x3a60d7(0xb1c)](),_0x45296a[_0x3a60d7(0x98c)](_0x3a60d7(0x281)));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x2bc),_0xd1586e=>{const _0x33de1f=_0x4adfe0;if(!SceneManager[_0x33de1f(0xcfa)]())return;VisuMZ['ConvertParams'](_0xd1586e,_0xd1586e);const _0x3f259f=$gameTemp[_0x33de1f(0x781)](),_0x5c65e2=VisuMZ[_0x33de1f(0x35a)](_0xd1586e[_0x33de1f(0x114)]),_0xa3dfd3=_0xd1586e[_0x33de1f(0x2be)],_0x5afa16=_0xd1586e['Mirror'];if(!_0x3f259f)return;$gameTemp[_0x33de1f(0x135)](_0x5c65e2,_0xa3dfd3,_0x5afa16);if(_0xd1586e[_0x33de1f(0x77e)])_0x3f259f['setWaitMode'](_0x33de1f(0x281));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xbad),_0x20acc5=>{const _0x31b49b=_0x4adfe0;if(!SceneManager[_0x31b49b(0xcfa)]())return;const _0x53840f=$gameTemp[_0x31b49b(0x781)]();if(!_0x53840f)return;_0x53840f[_0x31b49b(0x98c)]('battleAnimation');}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xaeb),_0x343fae=>{const _0x53e455=_0x4adfe0;if(!SceneManager[_0x53e455(0xcfa)]())return;VisuMZ[_0x53e455(0x360)](_0x343fae,_0x343fae);const _0x331009=BattleManager[_0x53e455(0x964)],_0x794706=_0x343fae[_0x53e455(0x365)]&&Imported[_0x53e455(0xc82)];_0x331009['addText'](_0x343fae[_0x53e455(0x4d6)]),_0x794706&&Imported[_0x53e455(0xc82)]&&(_0x53e455(0x688)===_0x53e455(0x688)?$gameSystem[_0x53e455(0x358)](_0x343fae[_0x53e455(0x4d6)]||'',_0x343fae[_0x53e455(0x2ee)]||0x0):this[_0x53e455(0x607)](this[_0x53e455(0x6e3)]));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x620),_0x18bbbb=>{const _0x59c643=_0x4adfe0;if(!SceneManager[_0x59c643(0xcfa)]())return;const _0x3146b0=BattleManager['_logWindow'];_0x3146b0[_0x59c643(0x465)]();}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x9c1),_0x9706c4=>{const _0x372cc7=_0x4adfe0;if(!SceneManager[_0x372cc7(0xcfa)]())return;const _0x3b457e=$gameTemp[_0x372cc7(0x781)](),_0x4f9f30=BattleManager['_action'],_0x599bc0=BattleManager[_0x372cc7(0x48b)],_0x2e2343=BattleManager[_0x372cc7(0x964)];if(!_0x3b457e||!_0x4f9f30||!_0x599bc0)return;if(!_0x4f9f30['item']())return;_0x2e2343[_0x372cc7(0xc60)](_0x599bc0,_0x4f9f30['item']()),_0x3b457e[_0x372cc7(0x98c)](_0x372cc7(0x957));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x643),_0x719a5f=>{const _0x2f45b5=_0x4adfe0;if(!SceneManager[_0x2f45b5(0xcfa)]())return;const _0x1868a4=BattleManager['_logWindow'];_0x1868a4[_0x2f45b5(0x1d5)]();}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xa9d),_0x3fb323=>{const _0x1db5b5=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;const _0xb17549=BattleManager[_0x1db5b5(0x964)];_0xb17549[_0x1db5b5(0xa48)]();}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x137),_0x308445=>{const _0x8627a2=_0x4adfe0;if(!SceneManager[_0x8627a2(0xcfa)]())return;const _0x38f81a=BattleManager[_0x8627a2(0x964)];_0x38f81a[_0x8627a2(0xcab)]();}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],'ActSeq_BattleLog_UI',_0x25b2fd=>{const _0x2823d0=_0x4adfe0;if(!SceneManager[_0x2823d0(0xcfa)]())return;VisuMZ['ConvertParams'](_0x25b2fd,_0x25b2fd),SceneManager['_scene'][_0x2823d0(0x50d)](_0x25b2fd[_0x2823d0(0x93e)]);}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],'ActSeq_BattleLog_WaitForBattleLog',_0x525201=>{const _0x2b414a=_0x4adfe0;if(!SceneManager[_0x2b414a(0xcfa)]())return;const _0x348213=$gameTemp[_0x2b414a(0x781)]();_0x348213[_0x2b414a(0x98c)](_0x2b414a(0x957));}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x8f4),_0x4135ba=>{const _0x4473ff=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;const _0x107628=$gameTemp[_0x4473ff(0x781)](),_0x193a69=BattleManager[_0x4473ff(0x964)];_0x193a69[_0x4473ff(0x596)](),_0x107628[_0x4473ff(0x98c)]('battlelog');}),PluginManager['registerCommand'](pluginData['name'],_0x4adfe0(0xa08),_0x1cc220=>{const _0x37a943=_0x4adfe0;if(!SceneManager[_0x37a943(0xcfa)]())return;if(!Imported[_0x37a943(0x3cb)])return;VisuMZ['ConvertParams'](_0x1cc220,_0x1cc220);const _0x290f53=$gameScreen[_0x37a943(0x5fc)]();_0x290f53[_0x37a943(0x11c)]=_0x1cc220[_0x37a943(0x34b)];}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Camera_FocusPoint',_0x2a2096=>{const _0x506a8d=_0x4adfe0;if(!SceneManager[_0x506a8d(0xcfa)]())return;if(!Imported[_0x506a8d(0x3cb)])return;VisuMZ[_0x506a8d(0x360)](_0x2a2096,_0x2a2096);const _0x4b198e=$gameTemp[_0x506a8d(0x781)](),_0xba292c=_0x2a2096[_0x506a8d(0xb5f)];$gameScreen[_0x506a8d(0x17e)](_0x2a2096[_0x506a8d(0xbaf)],_0x2a2096[_0x506a8d(0xbe8)],_0x2a2096[_0x506a8d(0x96d)],_0x2a2096[_0x506a8d(0xc6d)]);if(_0xba292c)_0x4b198e[_0x506a8d(0x98c)](_0x506a8d(0x4c6));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x85a),_0x5f1c62=>{const _0x49f65d=_0x4adfe0;if(!SceneManager[_0x49f65d(0xcfa)]())return;if(!Imported[_0x49f65d(0x3cb)])return;VisuMZ[_0x49f65d(0x360)](_0x5f1c62,_0x5f1c62);const _0x3c046b=$gameTemp[_0x49f65d(0x781)](),_0x5a165f=VisuMZ[_0x49f65d(0x35a)](_0x5f1c62[_0x49f65d(0x114)]),_0x580098=_0x5f1c62[_0x49f65d(0xb5f)];$gameScreen[_0x49f65d(0x67d)](_0x5a165f,_0x5f1c62[_0x49f65d(0x96d)],_0x5f1c62[_0x49f65d(0xc6d)]);if(_0x580098)_0x3c046b[_0x49f65d(0x98c)](_0x49f65d(0x4c6));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x223),_0x379540=>{const _0x3522aa=_0x4adfe0;if(!SceneManager[_0x3522aa(0xcfa)]())return;if(!Imported[_0x3522aa(0x3cb)])return;VisuMZ[_0x3522aa(0x360)](_0x379540,_0x379540);const _0x1f46b3=$gameTemp[_0x3522aa(0x781)](),_0x4fdd45=_0x379540[_0x3522aa(0xb5f)];$gameScreen['setBattleCameraOffset'](_0x379540[_0x3522aa(0x909)],_0x379540[_0x3522aa(0x116)],_0x379540[_0x3522aa(0x96d)],_0x379540[_0x3522aa(0xc6d)]);if(_0x4fdd45)_0x1f46b3[_0x3522aa(0x98c)](_0x3522aa(0x4c6));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Camera_Reset',_0x3c2c8d=>{const _0x31477a=_0x4adfe0;if(!SceneManager[_0x31477a(0xcfa)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x31477a(0x360)](_0x3c2c8d,_0x3c2c8d);const _0x152ed9=$gameTemp[_0x31477a(0x781)](),_0x207ede=_0x3c2c8d[_0x31477a(0xa9c)],_0x281890=_0x3c2c8d[_0x31477a(0xa5c)],_0x56e05b=_0x3c2c8d['WaitForCamera'];if(_0x207ede){const _0x2ce74e=Math[_0x31477a(0xb95)](Graphics['width']/0x2),_0x4a1007=Math['round'](Graphics[_0x31477a(0x6a1)]/0x2);$gameScreen['setBattleCameraPoint'](_0x2ce74e,_0x4a1007,_0x3c2c8d[_0x31477a(0x96d)],_0x3c2c8d[_0x31477a(0xc6d)]);}if(_0x281890){if(_0x31477a(0x7cb)!==_0x31477a(0xa57))$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x3c2c8d[_0x31477a(0x96d)],_0x3c2c8d[_0x31477a(0xc6d)]);else{if(this[_0x31477a(0x994)]())return _0x5ed521;return _0x182663=this['applySoftDamageCap'](_0x1125bd),_0x157dd4=this[_0x31477a(0xa01)](_0x2fc191),_0x4ac29a;}}if(_0x56e05b)_0x152ed9[_0x31477a(0x98c)](_0x31477a(0x4c6));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x7a1),_0x31db6b=>{const _0x291065=_0x4adfe0;if(!SceneManager[_0x291065(0xcfa)]())return;if(!Imported[_0x291065(0x3cb)])return;const _0x4f4bca=$gameTemp[_0x291065(0x781)]();if(!_0x4f4bca)return;_0x4f4bca[_0x291065(0x98c)]('battleCamera');}),VisuMZ[_0x4adfe0(0xa98)]['CreateCutinSettings']=function(_0x210637){const _0x4e2db4=_0x4adfe0;_0x210637[_0x4e2db4(0xae7)]='';const _0x52fca5=VisuMZ[_0x4e2db4(0xc78)][_0x4e2db4(0x227)](_0x210637),_0x51adb9=VisuMZ[_0x4e2db4(0x35a)](_0x210637[_0x4e2db4(0x114)])[0x0]||null;if(_0x51adb9){_0x52fca5[_0x4e2db4(0xae7)]=_0x51adb9[_0x4e2db4(0x7f7)](),_0x52fca5[_0x4e2db4(0x550)]=_0x51adb9[_0x4e2db4(0x969)](),_0x52fca5[_0x4e2db4(0xa66)]=_0x51adb9[_0x4e2db4(0x444)](),_0x52fca5[_0x4e2db4(0x9bc)]=_0x51adb9[_0x4e2db4(0x190)]();if(_0x51adb9[_0x4e2db4(0x13b)]()){_0x51adb9['flipVisualCutinHorz']()&&(_0x52fca5[_0x4e2db4(0x376)]=!_0x52fca5[_0x4e2db4(0x376)]);_0x51adb9['flipVisualCutinVert']()&&(_0x52fca5[_0x4e2db4(0x341)]=!_0x52fca5[_0x4e2db4(0x341)]);if(_0x52fca5[_0x4e2db4(0x9bc)]===_0x4e2db4(0x889)){if('bxieD'===_0x4e2db4(0x4a1))return 0xff;else _0x52fca5[_0x4e2db4(0x376)]=!_0x52fca5[_0x4e2db4(0x376)];}_0x210637['ExtraSettings'][_0x4e2db4(0x4b7)]&&(_0x52fca5[_0x4e2db4(0x8bd)]*=-0x1);if(_0x210637[_0x4e2db4(0x102)]['parallaxScrollYinvertEnemy']){if(_0x4e2db4(0x4c4)===_0x4e2db4(0xc41))return![];else _0x52fca5[_0x4e2db4(0xcde)]*=-0x1;}_0x52fca5[_0x4e2db4(0x272)]+=_0x210637[_0x4e2db4(0x102)]['parallaxHueEnemyModifier']??0x0;}}return _0x52fca5;},PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Cutin_AddVisualCutinEffect',_0x593500=>{const _0x4aae08=_0x4adfe0;if(!SceneManager[_0x4aae08(0xcfa)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x4aae08(0x360)](_0x593500,_0x593500);const _0x5bef01=VisuMZ[_0x4aae08(0xa98)][_0x4aae08(0x227)](_0x593500);SceneManager[_0x4aae08(0x726)][_0x4aae08(0x8f0)](_0x5bef01);const _0x650851=$gameTemp[_0x4aae08(0x781)]();_0x650851&&_0x593500[_0x4aae08(0xb00)]&&_0x650851['setWaitMode'](_0x4aae08(0x6ee));}),PluginManager['registerCommand'](pluginData['name'],_0x4adfe0(0x529),_0xe49d13=>{const _0x3f0c38=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3f0c38(0x21f)])return;VisuMZ['ConvertParams'](_0xe49d13,_0xe49d13),SceneManager[_0x3f0c38(0x726)][_0x3f0c38(0xba5)]();const _0x3dae6e=$gameTemp[_0x3f0c38(0x781)]();if(_0x3dae6e&&_0xe49d13[_0x3f0c38(0x450)]){if(_0x3f0c38(0xbc3)!=='Rowpi')_0x3dae6e[_0x3f0c38(0x98c)](_0x3f0c38(0x206));else{const _0x370b41=_0x1e00a6['BattleCore'][_0x3f0c38(0x5bc)];if(this[_0x3f0c38(0xab3)]===_0x3e5024)_0x5a4ebf+=_0x370b41['Actor'][_0x3f0c38(0x909)]||0x0,_0x4024e2+=_0x370b41[_0x3f0c38(0x2e2)][_0x3f0c38(0x116)]||0x0;else this[_0x3f0c38(0xab3)]===_0x52f9bd&&(_0x10b87f+=_0x370b41['Enemy'][_0x3f0c38(0x909)]||0x0,_0x436bde+=_0x370b41[_0x3f0c38(0x30b)][_0x3f0c38(0x116)]||0x0);this['_battler']&&(_0xbe1c10=this[_0x3f0c38(0x26e)][_0x3f0c38(0x937)]??_0x410c47,_0x467b3b=this[_0x3f0c38(0x26e)][_0x3f0c38(0x1b3)]??_0x311143),_0x197560[_0x3f0c38(0xa98)][_0x3f0c38(0x861)]['call'](this,_0x239021,_0x4c6b93),this['_targetHomeX']=this[_0x3f0c38(0xc0d)],this[_0x3f0c38(0x464)]=this[_0x3f0c38(0x5e7)],this[_0x3f0c38(0x2d9)]=0x0,this['_homeWholeDuration']=0x0,this[_0x3f0c38(0x828)]='Linear';}}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x4a3),_0x3a9494=>{const _0x274ecc=_0x4adfe0;if(!SceneManager[_0x274ecc(0xcfa)]())return;if(!Imported[_0x274ecc(0x21f)])return;VisuMZ[_0x274ecc(0x360)](_0x3a9494,_0x3a9494);const _0x1e7f6e=_0x3a9494[_0x274ecc(0xb52)][_0x274ecc(0xc1b)]()[_0x274ecc(0xb83)]();SceneManager['_scene'][_0x274ecc(0x139)](_0x1e7f6e);const _0x2a37ff=$gameTemp[_0x274ecc(0x781)]();_0x2a37ff&&_0x3a9494['WaitForExit']&&_0x2a37ff['setWaitMode'](_0x274ecc(0x206));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Cutin_WaitForEntrance',_0x1ef9ad=>{const _0x56d823=_0x4adfe0;if(!SceneManager[_0x56d823(0xcfa)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x9c0e8a=$gameTemp[_0x56d823(0x781)]();_0x9c0e8a[_0x56d823(0x98c)](_0x56d823(0x6ee));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],'ActSeq_Cutin_WaitForExit',_0x25b70d=>{const _0x54e98c=_0x4adfe0;if(!SceneManager[_0x54e98c(0xcfa)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x417c15=$gameTemp[_0x54e98c(0x781)]();_0x417c15['setWaitMode'](_0x54e98c(0x206));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x81d),_0x51cccc=>{const _0x2ea42b=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2ea42b(0x658)])return;VisuMZ['ConvertParams'](_0x51cccc,_0x51cccc);const _0x7fabb6=VisuMZ[_0x2ea42b(0x35a)](_0x51cccc[_0x2ea42b(0x114)]),_0x331ec0=_0x51cccc['MotionAni'][_0x2ea42b(0xc1b)]()['trim']();for(const _0x5ea238 of _0x7fabb6){if(!_0x5ea238)continue;_0x5ea238[_0x2ea42b(0x132)](_0x331ec0);}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x4dc),_0x149538=>{const _0x1ed9b6=_0x4adfe0;if(!SceneManager[_0x1ed9b6(0xcfa)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x1ed9b6(0x360)](_0x149538,_0x149538);const _0x3a0a51=VisuMZ['CreateActionSequenceTargets'](_0x149538[_0x1ed9b6(0x114)]),_0x17c0bc=_0x149538[_0x1ed9b6(0xa25)];for(const _0x4254c2 of _0x3a0a51){if('vuyGJ'==='vuyGJ'){if(!_0x4254c2)continue;_0x4254c2[_0x1ed9b6(0xc5b)]()[_0x1ed9b6(0x871)]=_0x17c0bc;}else{_0x1c0a5f-=_0x2d91d6;const _0x2876c3=_0x177030[_0x1ed9b6(0xa98)][_0x1ed9b6(0x5bc)][_0x1ed9b6(0x676)][_0x1ed9b6(0x86f)],_0x34cd46=_0x3d2a3a[_0x1ed9b6(0x7a0)](0x1-_0x17abd0/((_0x5bf71c-_0x56ba94)*_0x2876c3+_0x57870e),0.01);_0x49de9a*=_0x34cd46,_0x3eb2c6+=_0x3cebb0;}}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x9b5),_0x2308e4=>{const _0x55430b=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x55430b(0x12f)])return;VisuMZ[_0x55430b(0x360)](_0x2308e4,_0x2308e4);const _0xe7edc2=BattleManager[_0x55430b(0x3a3)],_0x4d66be=_0x2308e4[_0x55430b(0xa31)];if(!_0xe7edc2)return;_0xe7edc2[_0x55430b(0x9af)]=_0x4d66be;}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x7c3),_0x35fb70=>{const _0x54bef7=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x333c2a=BattleManager[_0x54bef7(0x3a3)];if(!_0x333c2a)return;_0x333c2a[_0x54bef7(0xa99)]();}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x989),_0x100717=>{const _0x4cf295=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x4cf295(0x360)](_0x100717,_0x100717);const _0x5eb3c4=BattleManager[_0x4cf295(0x3a3)],_0x39e479=_0x100717['Elements'];if(!_0x5eb3c4)return;_0x5eb3c4['_battleCoreForcedElements']=_0x39e479;}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],'ActSeq_Element_NullElements',_0x57c7c8=>{const _0x3b7513=_0x4adfe0;if(!SceneManager[_0x3b7513(0xcfa)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x25d583=BattleManager[_0x3b7513(0x3a3)];if(!_0x25d583)return;_0x25d583[_0x3b7513(0x26f)]=!![];}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Horror_Clear',_0x26ebf0=>{const _0x275227=_0x4adfe0;if(!Imported[_0x275227(0xb0d)])return;if(!SceneManager[_0x275227(0xcfa)]())return;VisuMZ['ConvertParams'](_0x26ebf0,_0x26ebf0);const _0x464c75=VisuMZ['CreateActionSequenceTargets'](_0x26ebf0[_0x275227(0x114)]);for(const _0x34b4a4 of _0x464c75){if(_0x275227(0x9de)!==_0x275227(0x9de)){if(!this[_0x275227(0xbe3)]()&&this!==_0x44bdec[_0x275227(0x48b)]){if(this[_0x275227(0xc66)]())this['battler']()['refreshMotion']();}this[_0x275227(0x396)]();return;}else{if(!_0x34b4a4)continue;_0x34b4a4[_0x275227(0x236)](_0x275227(0x85c)),_0x34b4a4['removeHorrorEffect'](_0x275227(0xb65)),_0x34b4a4[_0x275227(0x236)]('tv'),_0x34b4a4[_0x275227(0x424)]();}}$gamePlayer[_0x275227(0xcab)]();}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],'ActSeq_Horror_GlitchCreate',_0x27c789=>{const _0x438e7b=_0x4adfe0;if(!Imported[_0x438e7b(0xb0d)])return;if(!SceneManager[_0x438e7b(0xcfa)]())return;VisuMZ['ConvertParams'](_0x27c789,_0x27c789);const _0x31797c=VisuMZ[_0x438e7b(0x35a)](_0x27c789[_0x438e7b(0x114)]),_0x235ef1=_0x438e7b(0xb65);_0x27c789['sliceMin']=Math['ceil'](_0x27c789['slices']/0x2),_0x27c789[_0x438e7b(0x3b6)]=_0x27c789[_0x438e7b(0xcf1)],_0x27c789['refreshRequest']=!![];for(const _0x4d0e60 of _0x31797c){if(!_0x4d0e60)continue;_0x4d0e60[_0x438e7b(0x876)](_0x235ef1,_0x27c789);}$gamePlayer[_0x438e7b(0xcab)]();}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],'ActSeq_Horror_GlitchRemove',_0x38eb92=>{const _0x37ae3f=_0x4adfe0;if(!Imported[_0x37ae3f(0xb0d)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x37ae3f(0x360)](_0x38eb92,_0x38eb92);const _0x298886=VisuMZ[_0x37ae3f(0x35a)](_0x38eb92[_0x37ae3f(0x114)]);for(const _0x408837 of _0x298886){if(_0x37ae3f(0xaf2)===_0x37ae3f(0xca4))_0x451519['BattleCore'][_0x37ae3f(0x779)](),_0x4f6d96[_0x37ae3f(0xa98)][_0x37ae3f(0x4a0)](_0x2699a5),_0x3b5bdf['BattleCore'][_0x37ae3f(0x4a0)](_0xbd8def);else{if(!_0x408837)continue;_0x408837[_0x37ae3f(0x236)](_0x37ae3f(0xb65));}}$gamePlayer[_0x37ae3f(0xcab)]();}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Horror_NoiseCreate',_0x46badd=>{const _0xbdf238=_0x4adfe0;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xbdf238(0x360)](_0x46badd,_0x46badd);const _0x5d2eda=VisuMZ[_0xbdf238(0x35a)](_0x46badd['Targets']),_0x3c8ce8='noise';for(const _0x26cb2f of _0x5d2eda){if(!_0x26cb2f)continue;_0x26cb2f['setHorrorEffectSettings'](_0x3c8ce8,_0x46badd);}$gamePlayer['refresh']();}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x934),_0x15db0d=>{const _0xd325e7=_0x4adfe0;if(!Imported[_0xd325e7(0xb0d)])return;if(!SceneManager[_0xd325e7(0xcfa)]())return;VisuMZ[_0xd325e7(0x360)](_0x15db0d,_0x15db0d);const _0x315e7e=VisuMZ['CreateActionSequenceTargets'](_0x15db0d[_0xd325e7(0x114)]);for(const _0x1b6dcd of _0x315e7e){if(_0xd325e7(0x7dd)==='MlTiL'){if(!_0x1b6dcd)continue;_0x1b6dcd[_0xd325e7(0x236)]('noise');}else{const _0x4b2b66=_0x3916de[_0xd325e7(0x726)]['_actorWindow'];_0x4b2b66[_0xd325e7(0x9e8)](),_0x4b2b66[_0xd325e7(0x343)](![]),_0x4b2b66['deselect']();const _0x177af5=_0x2aa3be[_0xd325e7(0x726)][_0xd325e7(0x326)];_0x177af5[_0xd325e7(0xfc)]['y']=0x1;}}$gamePlayer[_0xd325e7(0xcab)]();}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xbe6),_0x4dde29=>{const _0x284fab=_0x4adfe0;if(!Imported[_0x284fab(0xb0d)])return;if(!SceneManager[_0x284fab(0xcfa)]())return;VisuMZ['ConvertParams'](_0x4dde29,_0x4dde29);const _0x1406c0=VisuMZ[_0x284fab(0x35a)](_0x4dde29[_0x284fab(0x114)]),_0x305e8a='tv';for(const _0x1b0181 of _0x1406c0){if(_0x284fab(0x6b9)!==_0x284fab(0x6b9)){if(_0x391bcf[_0x284fab(0x533)])this['displayItemMessage'](_0x354825[_0x284fab(0xcdb)],_0x4f6a22,_0x4caeee);if(_0x46449a['ActionSkillMsg2'])this['displayItemMessage'](_0x3ee957['message2'],_0x164823,_0xc4c91);}else{if(!_0x1b0181)continue;_0x1b0181[_0x284fab(0x876)](_0x305e8a,_0x4dde29);}}$gamePlayer[_0x284fab(0xcab)]();}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x950),_0xa28f02=>{const _0x27b31b=_0x4adfe0;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x27b31b(0x360)](_0xa28f02,_0xa28f02);const _0xc44631=VisuMZ[_0x27b31b(0x35a)](_0xa28f02[_0x27b31b(0x114)]);for(const _0x5aaae6 of _0xc44631){if(_0x27b31b(0x5d4)===_0x27b31b(0x83c)){if(this[_0x27b31b(0xacc)]==='all\x20actors')return![];if(this['_targetBattlerKey']===_0x27b31b(0x933))return![];if(!this[_0x27b31b(0x70e)]&&this[_0x27b31b(0x92f)]()[_0x27b31b(0x1f7)]())return![];if(this[_0x27b31b(0x4de)]())return!![];if(!this[_0x27b31b(0x28e)]())return![];return typeof this[_0x27b31b(0x28e)]()[_0x27b31b(0x178)]===_0x27b31b(0x217);}else{if(!_0x5aaae6)continue;_0x5aaae6[_0x27b31b(0x236)]('tv');}}$gamePlayer[_0x27b31b(0xcab)]();}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Impact_BlueRedInvert',_0x3059b7=>{const _0x433f5c=_0x4adfe0;if(!Imported[_0x433f5c(0x445)])return;const _0x390daf=SceneManager[_0x433f5c(0x726)][_0x433f5c(0x898)];if(!_0x390daf)return;if(VisuMZ['ActSeqImpact'][_0x433f5c(0xcc9)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x433f5c(0x162)]();return;}VisuMZ[_0x433f5c(0x360)](_0x3059b7,_0x3059b7);const _0x4b8538=_0x3059b7[_0x433f5c(0x25c)];_0x390daf[_0x433f5c(0x5b4)](_0x4b8538);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Impact_ColorBreak',_0x24f8cd=>{const _0x295897=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3f4392=SceneManager[_0x295897(0x726)][_0x295897(0x898)];if(!_0x3f4392)return;VisuMZ[_0x295897(0x360)](_0x24f8cd,_0x24f8cd);const _0x317218=_0x24f8cd[_0x295897(0xa28)]||0x1,_0x14fed4=_0x24f8cd[_0x295897(0x96d)]||0x1,_0x1fe8c5=_0x24f8cd[_0x295897(0xc6d)]||_0x295897(0x525);_0x3f4392[_0x295897(0x929)](_0x317218,_0x14fed4,_0x1fe8c5);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x6ae),_0x5ae5a9=>{const _0x37fb64=_0x4adfe0;if(!Imported[_0x37fb64(0x445)])return;const _0x3c778c=SceneManager[_0x37fb64(0x726)][_0x37fb64(0x898)];if(!_0x3c778c)return;if(VisuMZ[_0x37fb64(0xb9e)][_0x37fb64(0xcc9)]<=1.04){if(_0x37fb64(0x493)!==_0x37fb64(0x493))_0x585bca[_0x37fb64(0x2ae)]=_0x5d98e2(_0x10968a['$1'])[_0x37fb64(0xc1b)]()['trim']();else{alert(_0x37fb64(0x79c)),SceneManager[_0x37fb64(0x162)]();return;}}VisuMZ[_0x37fb64(0x360)](_0x5ae5a9,_0x5ae5a9);const _0xa13b59=_0x5ae5a9[_0x37fb64(0x25c)];_0x3c778c[_0x37fb64(0x353)](_0xa13b59);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x71e),_0x3a2401=>{const _0x56cd40=_0x4adfe0;if(!SceneManager[_0x56cd40(0xcfa)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1a8785=SceneManager[_0x56cd40(0x726)][_0x56cd40(0x898)];if(!_0x1a8785)return;VisuMZ['ConvertParams'](_0x3a2401,_0x3a2401);const _0x11a8a2=Number(_0x3a2401[_0x56cd40(0x7c9)])||0x0,_0x450612=Number(_0x3a2401['Rate']),_0x242a69=_0x3a2401[_0x56cd40(0x96d)]||0x1,_0x193cd6=_0x3a2401[_0x56cd40(0xc6d)]||_0x56cd40(0x525);_0x1a8785['setupMotionBlurImpactFilter'](_0x11a8a2,_0x450612,_0x242a69,_0x193cd6);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x4af),_0x270224=>{const _0x5c497a=_0x4adfe0;if(!SceneManager[_0x5c497a(0xcfa)]())return;if(!Imported[_0x5c497a(0x445)])return;const _0x4cf1c6=SceneManager[_0x5c497a(0x726)][_0x5c497a(0x898)];if(!_0x4cf1c6)return;VisuMZ['ConvertParams'](_0x270224,_0x270224);const _0x1a54fd=Number(_0x270224[_0x5c497a(0x7c9)])||0x0,_0x1491da=Number(_0x270224[_0x5c497a(0x37f)]),_0x39af92=_0x270224['Duration']||0x1,_0x1fb778=_0x270224[_0x5c497a(0xc6d)]||_0x5c497a(0x525),_0x2d892a=VisuMZ[_0x5c497a(0x35a)](_0x270224['Targets']);for(const _0x17a9f8 of _0x2d892a){if('TEFgm'!==_0x5c497a(0x58e)){if(!_0x17a9f8)continue;if(!_0x17a9f8[_0x5c497a(0xc66)]())continue;_0x17a9f8[_0x5c497a(0xc66)]()[_0x5c497a(0x801)](_0x1a54fd,_0x1491da,_0x39af92,_0x1fb778);}else return _0x5254a9[_0x5c497a(0xe0)][_0x5c497a(0x61e)](this);}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x21d),_0x2d8e01=>{const _0x3676e0=_0x4adfe0;if(!SceneManager[_0x3676e0(0xcfa)]())return;if(!Imported[_0x3676e0(0x445)])return;VisuMZ['ConvertParams'](_0x2d8e01,_0x2d8e01);const _0x2fa6d5={'delay':_0x2d8e01['delay'],'duration':_0x2d8e01[_0x3676e0(0x60c)],'hue':_0x2d8e01[_0x3676e0(0x9dd)],'opacityStart':_0x2d8e01[_0x3676e0(0x8d7)],'tone':_0x2d8e01[_0x3676e0(0x5eb)],'visible':!![]},_0x548290=VisuMZ[_0x3676e0(0x35a)](_0x2d8e01['Targets']);for(const _0x42692a of _0x548290){if(!_0x42692a)continue;_0x42692a['setBattlerMotionTrailData'](_0x2fa6d5);}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Impact_MotionTrailRemove',_0x4129a0=>{const _0x5598a8=_0x4adfe0;if(!SceneManager[_0x5598a8(0xcfa)]())return;if(!Imported[_0x5598a8(0x445)])return;VisuMZ[_0x5598a8(0x360)](_0x4129a0,_0x4129a0);const _0x3d3a88=VisuMZ['CreateActionSequenceTargets'](_0x4129a0[_0x5598a8(0x114)]);for(const _0x34d2f9 of _0x3d3a88){if(!_0x34d2f9)continue;_0x34d2f9[_0x5598a8(0x61f)]();}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Impact_Negative',_0x5e61ff=>{const _0x4ae5da=_0x4adfe0;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5df2e0=SceneManager[_0x4ae5da(0x726)]['_spriteset'];if(!_0x5df2e0)return;if(VisuMZ[_0x4ae5da(0xb9e)]['version']<=1.04){if(_0x4ae5da(0x3da)==='wBfmk'){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x4ae5da(0x162)]();return;}else return _0x11f2fd[_0x4ae5da(0xa98)]['Scene_Battle_itemWindowRect'][_0x4ae5da(0x61e)](this);}VisuMZ['ConvertParams'](_0x5e61ff,_0x5e61ff);const _0x211e2e=_0x5e61ff[_0x4ae5da(0x25c)];_0x5df2e0[_0x4ae5da(0x4ef)](_0x211e2e);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Impact_Oversaturate',_0x1a2adc=>{const _0x1d2604=_0x4adfe0;if(!Imported[_0x1d2604(0x445)])return;const _0x4a8389=SceneManager[_0x1d2604(0x726)][_0x1d2604(0x898)];if(!_0x4a8389)return;if(VisuMZ['ActSeqImpact'][_0x1d2604(0xcc9)]<=1.04){if(_0x1d2604(0xbe5)!==_0x1d2604(0xc8f)){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x1d2604(0x162)]();return;}else this['revertTpbCachedActor']();}VisuMZ[_0x1d2604(0x360)](_0x1a2adc,_0x1a2adc);const _0x32aa3f=_0x1a2adc[_0x1d2604(0x25c)];_0x4a8389[_0x1d2604(0x6bb)](_0x32aa3f);}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],'ActSeq_Impact_ShockwavePoint',_0x24bb75=>{const _0x1a1245=_0x4adfe0;if(!Imported[_0x1a1245(0x445)])return;const _0x1a1e96=SceneManager[_0x1a1245(0x726)][_0x1a1245(0x898)];if(!_0x1a1e96)return;VisuMZ['ConvertParams'](_0x24bb75,_0x24bb75);const _0x5ac73a=_0x24bb75['X']||0x0,_0x40c0a2=_0x24bb75['Y']||0x0,_0x3cd250=_0x24bb75[_0x1a1245(0x394)]||0x0,_0xfbe526=_0x24bb75[_0x1a1245(0x3e3)]||0x0,_0x9f84d6=_0x24bb75[_0x1a1245(0x96d)]||0x1;_0x1a1e96[_0x1a1245(0x618)](_0x5ac73a,_0x40c0a2,_0x3cd250,_0xfbe526,_0x9f84d6);}),PluginManager['registerCommand'](pluginData['name'],_0x4adfe0(0x51d),_0x49a046=>{const _0x1b343c=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xff3d13=SceneManager['_scene'][_0x1b343c(0x898)];if(!_0xff3d13)return;VisuMZ['ConvertParams'](_0x49a046,_0x49a046);const _0x4445b2=VisuMZ[_0x1b343c(0x35a)](_0x49a046[_0x1b343c(0x114)]),_0x1b7924=_0x49a046[_0x1b343c(0xbb0)],_0x59a205=_0x49a046[_0x1b343c(0x909)]||0x0,_0x703e1b=_0x49a046[_0x1b343c(0x116)]||0x0,_0x45cd77=_0x49a046[_0x1b343c(0x394)]||0x0,_0xcbdfbd=_0x49a046[_0x1b343c(0x3e3)]||0x0,_0xea9e4=_0x49a046[_0x1b343c(0x96d)]||0x1;for(const _0x2f2f37 of _0x4445b2){if('OUMMY'!==_0x1b343c(0x359)){if(!_0x2f2f37)continue;if(!_0x2f2f37[_0x1b343c(0xc66)]())continue;const _0x13fe41=_0x2f2f37['battler']();let _0x478f08=_0x13fe41[_0x1b343c(0x49e)],_0x353da5=_0x13fe41[_0x1b343c(0x984)];_0x478f08+=(Graphics[_0x1b343c(0x1e2)]-Graphics['boxWidth'])/0x2,_0x353da5+=(Graphics[_0x1b343c(0x6a1)]-Graphics[_0x1b343c(0x468)])/0x2;if(_0x1b7924[_0x1b343c(0x634)](/front/i))_0x478f08+=(_0x2f2f37[_0x1b343c(0x13b)]()?0x1:-0x1)*_0x13fe41['mainSpriteWidth']()/0x2;else _0x1b7924[_0x1b343c(0x634)](/back/i)&&(_0x478f08+=(_0x2f2f37[_0x1b343c(0x13b)]()?-0x1:0x1)*_0x13fe41[_0x1b343c(0x5be)]()/0x2);if(_0x1b7924[_0x1b343c(0x634)](/head/i))_0x353da5-=_0x13fe41[_0x1b343c(0xabd)]();else _0x1b7924[_0x1b343c(0x634)](/center/i)&&(_0x353da5-=_0x13fe41[_0x1b343c(0xabd)]()/0x2);_0x478f08+=_0x59a205,_0x353da5+=_0x703e1b,_0xff3d13[_0x1b343c(0x618)](_0x478f08,_0x353da5,_0x45cd77,_0xcbdfbd,_0xea9e4);}else this[_0x1b343c(0x593)][_0x1b343c(0xcc5)]['x']=this['_targetSkewX'],this[_0x1b343c(0x593)][_0x1b343c(0xcc5)]['y']=this['_targetSkewY'];}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xaa2),_0x26a213=>{const _0x47b59d=_0x4adfe0;if(!SceneManager[_0x47b59d(0xcfa)]())return;if(!Imported[_0x47b59d(0x445)])return;const _0x1eb42e=SceneManager[_0x47b59d(0x726)][_0x47b59d(0x898)];if(!_0x1eb42e)return;VisuMZ[_0x47b59d(0x360)](_0x26a213,_0x26a213);const _0x32849a=VisuMZ[_0x47b59d(0x35a)](_0x26a213[_0x47b59d(0x114)]),_0x42d7e1=_0x26a213['TargetLocation'],_0x427a53=_0x26a213[_0x47b59d(0x909)]||0x0,_0x199fc4=_0x26a213[_0x47b59d(0x116)]||0x0,_0x12701b=_0x26a213[_0x47b59d(0x394)]||0x0,_0x5189b5=_0x26a213[_0x47b59d(0x3e3)]||0x0,_0x39bff9=_0x26a213['Duration']||0x1,_0xdb10f2=Math[_0x47b59d(0x258)](..._0x32849a[_0x47b59d(0x2f7)](_0xea1b0b=>_0xea1b0b['battler']()[_0x47b59d(0x49e)]-_0xea1b0b[_0x47b59d(0xc66)]()[_0x47b59d(0x5be)]()/0x2)),_0x29cbaf=Math[_0x47b59d(0x7a0)](..._0x32849a['map'](_0x3e4008=>_0x3e4008[_0x47b59d(0xc66)]()[_0x47b59d(0x49e)]+_0x3e4008[_0x47b59d(0xc66)]()[_0x47b59d(0x5be)]()/0x2)),_0x3c8651=Math[_0x47b59d(0x258)](..._0x32849a['map'](_0x3032f2=>_0x3032f2[_0x47b59d(0xc66)]()[_0x47b59d(0x984)]-_0x3032f2['battler']()[_0x47b59d(0xabd)]())),_0x303714=Math[_0x47b59d(0x7a0)](..._0x32849a[_0x47b59d(0x2f7)](_0x55995c=>_0x55995c[_0x47b59d(0xc66)]()[_0x47b59d(0x984)])),_0x27e909=_0x32849a[_0x47b59d(0xcd9)](_0xbecfb9=>_0xbecfb9[_0x47b59d(0x771)]())['length'],_0x13abdb=_0x32849a[_0x47b59d(0xcd9)](_0x510d32=>_0x510d32[_0x47b59d(0x13b)]())[_0x47b59d(0xa59)];let _0x33bf6d=0x0,_0x5d6dda=0x0;if(_0x42d7e1['match'](/front/i))_0x47b59d(0x5c7)!=='lvwyj'?this[_0x47b59d(0xafe)](_0x47b59d(0x946)):_0x33bf6d=_0x27e909>=_0x13abdb?_0xdb10f2:_0x29cbaf;else{if(_0x42d7e1[_0x47b59d(0x634)](/middle/i))_0x33bf6d=(_0xdb10f2+_0x29cbaf)/0x2,melee=-0x1;else _0x42d7e1[_0x47b59d(0x634)](/back/i)&&(_0x33bf6d=_0x27e909>=_0x13abdb?_0x29cbaf:_0xdb10f2);}if(_0x42d7e1[_0x47b59d(0x634)](/head/i))_0x47b59d(0xf2)==='lpdAO'?_0x5d6dda=_0x3c8651:(this['_preBattleCommonEvent']=_0x2fa651,_0x3f6e07['_scene']['battleCoreResumeLaunchBattle']());else{if(_0x42d7e1[_0x47b59d(0x634)](/center/i)){if(_0x47b59d(0x4f6)!==_0x47b59d(0x4f6))return _0x2e2344=this[_0x47b59d(0x50f)](),this['repeatTargets'](_0x458fed);else _0x5d6dda=(_0x3c8651+_0x303714)/0x2;}else _0x42d7e1['match'](/base/i)&&(_0x47b59d(0xb4f)!==_0x47b59d(0xa94)?_0x5d6dda=_0x303714:(_0x185b39+=_0x2bdcaa[_0x47b59d(0x771)]()?-_0x3d4d4d:_0x3155f2,_0x3d8f70+=_0x260029));}_0x33bf6d+=(Graphics[_0x47b59d(0x1e2)]-Graphics[_0x47b59d(0xcc7)])/0x2,_0x5d6dda+=(Graphics[_0x47b59d(0x6a1)]-Graphics[_0x47b59d(0x468)])/0x2,_0x33bf6d+=_0x427a53,_0x5d6dda+=_0x199fc4,_0x1eb42e[_0x47b59d(0x618)](_0x33bf6d,_0x5d6dda,_0x12701b,_0x5189b5,_0x39bff9);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x3f0),_0x1d50ef=>{const _0x1ab75e=_0x4adfe0;if(!Imported[_0x1ab75e(0x445)])return;const _0x247395=SceneManager[_0x1ab75e(0x726)][_0x1ab75e(0x898)];if(!_0x247395)return;if(VisuMZ[_0x1ab75e(0xb9e)]['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x1ab75e(0x162)]();return;}VisuMZ[_0x1ab75e(0x360)](_0x1d50ef,_0x1d50ef);const _0x23806e=$gameTemp[_0x1ab75e(0x781)](),_0x2f04d2=Math[_0x1ab75e(0x7a0)](0.01,_0x1d50ef[_0x1ab75e(0xa04)]);$gameTemp['setBattleImpactTimeScale'](_0x2f04d2,_0x23806e);}),PluginManager['registerCommand'](pluginData['name'],_0x4adfe0(0x708),_0x75b564=>{const _0x5ef9ef=_0x4adfe0;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x55b552=SceneManager[_0x5ef9ef(0x726)][_0x5ef9ef(0x898)];if(!_0x55b552)return;if(VisuMZ[_0x5ef9ef(0xb9e)][_0x5ef9ef(0xcc9)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x5ef9ef(0x162)]();return;}VisuMZ[_0x5ef9ef(0x360)](_0x75b564,_0x75b564);const _0x15c2ae=$gameTemp[_0x5ef9ef(0x781)](),_0x5045f0=_0x75b564['ms']||0x1;VisuMZ['ActSeqImpact']['freezeTime'](_0x5045f0,_0x15c2ae);}),PluginManager['registerCommand'](pluginData['name'],_0x4adfe0(0xa3c),_0x2657d0=>{const _0xbf6fac=_0x4adfe0;if(!Imported[_0xbf6fac(0x445)])return;const _0x506a7b=SceneManager['_scene'][_0xbf6fac(0x898)];if(!_0x506a7b)return;VisuMZ['ConvertParams'](_0x2657d0,_0x2657d0);const _0x5d4c23=_0x2657d0['X']||0x0,_0x2f7b26=_0x2657d0['Y']||0x0,_0x2ed3a4=_0x2657d0[_0xbf6fac(0xc24)]||0x0,_0x1baedc=_0x2657d0['Radius']||0x0,_0x300eba=_0x2657d0['Duration']||0x1,_0x14f346=_0x2657d0[_0xbf6fac(0xc6d)]||'Linear';_0x506a7b[_0xbf6fac(0x2fb)](_0x2ed3a4,_0x5d4c23,_0x2f7b26,_0x1baedc,_0x300eba,_0x14f346);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x338),_0x43e4ec=>{const _0x40e2d0=_0x4adfe0;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xe5f91f=SceneManager[_0x40e2d0(0x726)][_0x40e2d0(0x898)];if(!_0xe5f91f)return;VisuMZ[_0x40e2d0(0x360)](_0x43e4ec,_0x43e4ec);const _0x1bbe02=VisuMZ[_0x40e2d0(0x35a)](_0x43e4ec[_0x40e2d0(0x114)]),_0x3a32f2=_0x43e4ec['TargetLocation'],_0x4f2945=_0x43e4ec[_0x40e2d0(0x909)]||0x0,_0x192515=_0x43e4ec[_0x40e2d0(0x116)]||0x0,_0x346fd3=_0x43e4ec[_0x40e2d0(0xc24)]||0x0,_0x3b10c7=_0x43e4ec[_0x40e2d0(0x535)]||0x0,_0x4a347a=_0x43e4ec[_0x40e2d0(0x96d)]||0x1,_0x42e747=_0x43e4ec['EasingType']||_0x40e2d0(0x525),_0x2ded40=Math[_0x40e2d0(0x258)](..._0x1bbe02['map'](_0x38b18f=>_0x38b18f[_0x40e2d0(0xc66)]()[_0x40e2d0(0x49e)]-_0x38b18f['battler']()['mainSpriteWidth']()/0x2)),_0x51c2e0=Math[_0x40e2d0(0x7a0)](..._0x1bbe02[_0x40e2d0(0x2f7)](_0x1a3a61=>_0x1a3a61[_0x40e2d0(0xc66)]()[_0x40e2d0(0x49e)]+_0x1a3a61[_0x40e2d0(0xc66)]()['mainSpriteWidth']()/0x2)),_0x590756=Math[_0x40e2d0(0x258)](..._0x1bbe02[_0x40e2d0(0x2f7)](_0x461b7f=>_0x461b7f[_0x40e2d0(0xc66)]()[_0x40e2d0(0x984)]-_0x461b7f[_0x40e2d0(0xc66)]()['mainSpriteHeight']())),_0x550dd8=Math[_0x40e2d0(0x7a0)](..._0x1bbe02[_0x40e2d0(0x2f7)](_0x334e59=>_0x334e59[_0x40e2d0(0xc66)]()[_0x40e2d0(0x984)])),_0x383f4f=_0x1bbe02[_0x40e2d0(0xcd9)](_0x324fec=>_0x324fec[_0x40e2d0(0x771)]())[_0x40e2d0(0xa59)],_0x3dbc3b=_0x1bbe02[_0x40e2d0(0xcd9)](_0x4570cc=>_0x4570cc[_0x40e2d0(0x13b)]())[_0x40e2d0(0xa59)];let _0x4608e5=0x0,_0x293175=0x0;if(_0x3a32f2['match'](/front/i))_0x40e2d0(0xcd2)===_0x40e2d0(0x21a)?this[_0x40e2d0(0xe8)]=_0x40e2d0(0xcac):_0x4608e5=_0x383f4f>=_0x3dbc3b?_0x2ded40:_0x51c2e0;else{if(_0x3a32f2['match'](/middle/i)){if('ePIhy'===_0x40e2d0(0x3a6))_0x4608e5=(_0x2ded40+_0x51c2e0)/0x2,melee=-0x1;else{const _0x26f26b=_0x91057d[_0x40e2d0(0x28e)]();this['displayAction'](_0x9d7836,_0x26f26b),this[_0x40e2d0(0x98e)](_0x40e2d0(0x7e0),_0x276574,_0x367997,!![]),this[_0x40e2d0(0x98e)](_0x40e2d0(0x7cc),_0x872244,_0x3cf9b3),this[_0x40e2d0(0x98e)](_0x40e2d0(0xbca)),this[_0x40e2d0(0x98e)](_0x40e2d0(0xa72),_0x4054b7,_0x5acc26),this[_0x40e2d0(0x98e)](_0x40e2d0(0x67c));}}else _0x3a32f2[_0x40e2d0(0x634)](/back/i)&&(_0x4608e5=_0x383f4f>=_0x3dbc3b?_0x51c2e0:_0x2ded40);}if(_0x3a32f2[_0x40e2d0(0x634)](/head/i))_0x293175=_0x590756;else{if(_0x3a32f2[_0x40e2d0(0x634)](/center/i)){if(_0x40e2d0(0xb93)!==_0x40e2d0(0xb93))return 0x1;else _0x293175=(_0x590756+_0x550dd8)/0x2;}else _0x3a32f2[_0x40e2d0(0x634)](/base/i)&&(_0x293175=_0x550dd8);}_0x4608e5+=(Graphics[_0x40e2d0(0x1e2)]-Graphics[_0x40e2d0(0xcc7)])/0x2,_0x293175+=(Graphics[_0x40e2d0(0x6a1)]-Graphics[_0x40e2d0(0x468)])/0x2,_0x4608e5+=_0x4f2945,_0x293175+=_0x192515,_0xe5f91f[_0x40e2d0(0x2fb)](_0x346fd3,_0x4608e5,_0x293175,_0x3b10c7,_0x4a347a,_0x42e747);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x30a),_0x412817=>{const _0x1bc628=_0x4adfe0;if(!Imported[_0x1bc628(0x445)])return;const _0x369f83=SceneManager[_0x1bc628(0x726)][_0x1bc628(0x898)];if(!_0x369f83)return;if(VisuMZ[_0x1bc628(0xb9e)][_0x1bc628(0xcc9)]<=1.05){if('ehTQh'!==_0x1bc628(0x968)){alert(_0x1bc628(0x79c)),SceneManager[_0x1bc628(0x162)]();return;}else return _0x1fe3be[_0x1bc628(0x726)][_0x1bc628(0x898)][_0x1bc628(0x6c3)];}VisuMZ[_0x1bc628(0x360)](_0x412817,_0x412817);const _0x4a8907=VisuMZ[_0x1bc628(0x35a)](_0x412817[_0x1bc628(0x114)]),_0x102420={'filename':_0x412817[_0x1bc628(0x7a7)],'horzCells':_0x412817[_0x1bc628(0x9cc)]||0x1,'vertCells':_0x412817[_0x1bc628(0x92b)]||0x1,'frameDelay':_0x412817[_0x1bc628(0x148)]||0x1,'smooth':_0x412817[_0x1bc628(0x656)]||![],'anchorX':_0x412817[_0x1bc628(0x7ac)]||0x0,'anchorY':_0x412817[_0x1bc628(0xcd6)]||0x0,'offsetX':_0x412817[_0x1bc628(0x8c2)]||0x0,'offsetY':_0x412817['offsetY']||0x0};for(const _0xbf3b3c of _0x4a8907){if(!_0xbf3b3c)continue;if(!_0xbf3b3c[_0x1bc628(0xc66)]())continue;_0xbf3b3c[_0x1bc628(0xc66)]()[_0x1bc628(0x3db)](_0x102420);}const _0x696cbf=$gameTemp['getLastPluginCommandInterpreter']();_0x696cbf&&_0x696cbf[_0x1bc628(0x98c)](_0x1bc628(0xb32));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x776),_0x513073=>{const _0x1bfdf1=_0x4adfe0;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4325b8=SceneManager['_scene'][_0x1bfdf1(0x898)];if(!_0x4325b8)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){alert(_0x1bfdf1(0x79c)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x513073,_0x513073);const _0x118468=VisuMZ[_0x1bfdf1(0x35a)](_0x513073[_0x1bfdf1(0x114)]);for(const _0x32871b of _0x118468){if('uQipR'==='kvlIe')this[_0x1bfdf1(0xb60)]=new _0x1fd4c7(),this[_0x1bfdf1(0x607)](this['_stateIconSprite']);else{if(!_0x32871b)continue;if(!_0x32871b[_0x1bfdf1(0xc66)]())continue;_0x32871b[_0x1bfdf1(0xc66)]()[_0x1bfdf1(0x1fa)]();}}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Inject_AnimationPauseResume',_0x5bab2a=>{const _0x44694d=_0x4adfe0;if(!Imported[_0x44694d(0x445)])return;const _0x3a4e28=SceneManager[_0x44694d(0x726)][_0x44694d(0x898)];if(!_0x3a4e28)return;if(VisuMZ[_0x44694d(0xb9e)][_0x44694d(0xcc9)]<=1.05){if(_0x44694d(0x72d)===_0x44694d(0x5e2))_0x2cea70=_0x52693d;else{alert(_0x44694d(0x79c)),SceneManager[_0x44694d(0x162)]();return;}}VisuMZ['ConvertParams'](_0x5bab2a,_0x5bab2a);const _0x3b1062=VisuMZ[_0x44694d(0x35a)](_0x5bab2a['Targets']),_0xf9a315=_0x5bab2a['pause'];for(const _0x1a58ce of _0x3b1062){if(!_0x1a58ce)continue;if(!_0x1a58ce[_0x44694d(0xc66)]())continue;_0x1a58ce['battler']()[_0x44694d(0x20f)](_0xf9a315);}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x948),_0x307cae=>{const _0x17327e=_0x4adfe0;if(!SceneManager[_0x17327e(0xcfa)]())return;const _0xeeb1a8=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xeeb1a8)return;_0xeeb1a8[_0x17327e(0x98c)](_0x17327e(0x142));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_ActionEffect',_0x19c34a=>{const _0x2f8383=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2f8383(0x360)](_0x19c34a,_0x19c34a);const _0x4c086f=$gameTemp['getLastPluginCommandInterpreter'](),_0xb1680e=BattleManager[_0x2f8383(0x3a3)],_0x617d75=BattleManager[_0x2f8383(0x48b)],_0x4f23f6=BattleManager[_0x2f8383(0x964)];if(!_0x4c086f||!_0xb1680e||!_0x617d75)return;if(!_0xb1680e[_0x2f8383(0x28e)]())return;const _0x577db0=VisuMZ[_0x2f8383(0x35a)](_0x19c34a[_0x2f8383(0x114)]);for(const _0x349e23 of _0x577db0){if(!_0x349e23)continue;_0x4f23f6[_0x2f8383(0x98e)](_0x2f8383(0x700),_0x617d75,_0x349e23);}_0x4c086f[_0x2f8383(0x98c)](_0x2f8383(0x957));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xc87),_0x2e7530=>{const _0x1eef35=_0x4adfe0;if(!SceneManager[_0x1eef35(0xcfa)]())return;if(!Imported[_0x1eef35(0x125)])return;$gameTemp[_0x1eef35(0xbab)]=!![];}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x868),_0x30a6f9=>{const _0x568224=_0x4adfe0;if(!SceneManager[_0x568224(0xcfa)]())return;VisuMZ[_0x568224(0x360)](_0x30a6f9,_0x30a6f9);const _0x2bd1bb=[_0x568224(0x973),_0x568224(0x7fa),_0x568224(0x561),'DEF','MAT','MDF',_0x568224(0xcd5),'LUK'],_0x236da1=_0x30a6f9['Buffs'],_0x3dadfd=_0x30a6f9[_0x568224(0xa49)],_0x393d9c=_0x30a6f9[_0x568224(0x54e)],_0x2051cc=VisuMZ[_0x568224(0x35a)](_0x30a6f9[_0x568224(0x114)]);for(const _0x4f660e of _0x2051cc){if(!_0x4f660e)continue;for(const _0x37af3a of _0x236da1){const _0xa1afde=_0x2bd1bb[_0x568224(0x766)](_0x37af3a[_0x568224(0xb24)]()[_0x568224(0xb83)]());_0xa1afde>=0x0&&_0xa1afde<=0x7&&_0x4f660e[_0x568224(0x5a9)](_0xa1afde,_0x393d9c);}for(const _0x7322f4 of _0x3dadfd){const _0x1f588a=_0x2bd1bb[_0x568224(0x766)](_0x7322f4[_0x568224(0xb24)]()[_0x568224(0xb83)]());if(_0x1f588a>=0x0&&_0x1f588a<=0x7){if(_0x568224(0x9bb)===_0x568224(0xb10)){if(!_0x5f276d['isSceneBattle']())return;if(!_0x1ffc68[_0x568224(0xb51)])return;_0x5adedf[_0x568224(0x360)](_0x13cabc,_0x2d8454);const _0x192c1b=_0x305ba9[_0x568224(0x781)](),_0x49a9fb=_0x4654a5[_0x568224(0xcc6)];if(!_0x192c1b)return;const _0x11c78f=_0x406fc8['_spriteset'];if(!_0x11c78f)return;_0x11c78f[_0x568224(0xf3)](_0x1f4e9a);if(_0x49a9fb)_0x192c1b['setWaitMode'](_0x568224(0x2c3));}else _0x4f660e[_0x568224(0xbcc)](_0x1f588a,_0x393d9c);}}}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_AddState',_0x44b5b8=>{const _0xdf5bff=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xdf5bff(0x360)](_0x44b5b8,_0x44b5b8);const _0x55e75d=_0x44b5b8['States'],_0xcd2085=VisuMZ[_0xdf5bff(0x35a)](_0x44b5b8[_0xdf5bff(0x114)]);for(const _0x5b3b58 of _0xcd2085){if('Doxzu'!=='RlmWM'){if(!_0x5b3b58)continue;for(const _0x21a372 of _0x55e75d){_0xdf5bff(0x321)===_0xdf5bff(0x321)?_0x5b3b58['addState'](_0x21a372):(_0x21eb4f['prototype'][_0xdf5bff(0x1d6)][_0xdf5bff(0x61e)](this),this[_0xdf5bff(0x3aa)]());}}else this[_0xdf5bff(0xc42)][_0xdf5bff(0x69a)]=![];}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_ArmorPenetration',_0x471311=>{const _0x206343=_0x4adfe0;if(!SceneManager[_0x206343(0xcfa)]())return;VisuMZ[_0x206343(0x360)](_0x471311,_0x471311);const _0xacf6fb=BattleManager['_action'],_0x55f92e={'arPenRate':_0x471311[_0x206343(0x559)],'arPenFlat':_0x471311[_0x206343(0x4bd)],'arRedRate':_0x471311[_0x206343(0x905)],'arRedFlat':_0x471311[_0x206343(0xa93)]};_0xacf6fb[_0x206343(0x124)]=_0x55f92e;}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_AnalyzeWeakness',_0x1ca8c6=>{const _0x199356=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x199356(0x834)])return;VisuMZ[_0x199356(0x360)](_0x1ca8c6,_0x1ca8c6);const _0x304930=VisuMZ[_0x199356(0x35a)](_0x1ca8c6[_0x199356(0x114)]),_0x1d6a00=_0x1ca8c6[_0x199356(0x7be)]||0x1;for(const _0x50bd88 of _0x304930){if(!_0x50bd88)continue;if(!_0x50bd88[_0x199356(0x13b)]())continue;_0x50bd88[_0x199356(0x2cf)](_0x1d6a00);}}),PluginManager['registerCommand'](pluginData['name'],_0x4adfe0(0xaab),_0x367515=>{const _0x4b9abc=_0x4adfe0;if(!SceneManager[_0x4b9abc(0xcfa)]())return;if(!Imported[_0x4b9abc(0x9b6)])return;if(!BattleManager[_0x4b9abc(0x76a)]())return;VisuMZ[_0x4b9abc(0x360)](_0x367515,_0x367515);const _0x287d48=VisuMZ[_0x4b9abc(0x35a)](_0x367515['Targets']),_0x4c7297=_0x367515[_0x4b9abc(0x293)],_0x5a4c5e=_0x367515[_0x4b9abc(0x293)],_0x30505e=_0x367515['Interrupt'];for(const _0x482c16 of _0x287d48){if(!_0x482c16)continue;if(_0x482c16['isAtbChargingState']())_0x4b9abc(0x8a4)!==_0x4b9abc(0x8cd)?_0x482c16[_0x4b9abc(0xc7e)](_0x4c7297):(this[_0x4b9abc(0x593)]['skew']['x']=this[_0x4b9abc(0xa67)],this[_0x4b9abc(0x593)][_0x4b9abc(0xcc5)]['y']=this[_0x4b9abc(0x16c)]);else{if(_0x482c16[_0x4b9abc(0x659)]()){if(_0x4b9abc(0x3fe)!=='CKZeF'){_0x482c16[_0x4b9abc(0x3af)](_0x5a4c5e);if(_0x30505e)_0x482c16[_0x4b9abc(0x463)]();}else return!![];}}}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x39b),_0x5bb2fd=>{const _0x5e70e6=_0x4adfe0;if(!SceneManager[_0x5e70e6(0xcfa)]())return;if(!Imported[_0x5e70e6(0xcbe)])return;VisuMZ[_0x5e70e6(0x360)](_0x5bb2fd,_0x5bb2fd);const _0x2db3fe=VisuMZ[_0x5e70e6(0x35a)](_0x5bb2fd['Targets']),_0x24d6e0=_0x5bb2fd[_0x5e70e6(0x972)];for(const _0x347fe1 of _0x2db3fe){if(!_0x347fe1)continue;_0x347fe1[_0x5e70e6(0x505)](_0x24d6e0);}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xb08),_0x5d1e69=>{const _0x1040f9=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1040f9(0xcbe)])return;if(!BattleManager[_0x1040f9(0x48b)])return;VisuMZ[_0x1040f9(0x360)](_0x5d1e69,_0x5d1e69);const _0x202eb2=_0x5d1e69['VariableID'];$gameVariables[_0x1040f9(0x8b3)](_0x202eb2,BattleManager[_0x1040f9(0x48b)][_0x1040f9(0x4b1)]());}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x8e1),_0x411219=>{const _0x46ead9=_0x4adfe0;if(!SceneManager[_0x46ead9(0xcfa)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ['ConvertParams'](_0x411219,_0x411219);const _0x21ad6c=VisuMZ[_0x46ead9(0x35a)](_0x411219[_0x46ead9(0x114)]),_0x382910=_0x411219[_0x46ead9(0x9a8)];for(const _0x24006b of _0x21ad6c){if(!_0x24006b)continue;if(_0x24006b[_0x46ead9(0x55b)]())continue;if(!_0x24006b['isAffectedByBreakShield']())continue;_0x24006b[_0x46ead9(0x7d3)](_0x382910);}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_BreakShieldReset',_0x5e0701=>{const _0x375649=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x375649(0x531)])return;VisuMZ[_0x375649(0x360)](_0x5e0701,_0x5e0701);const _0x2fe615=VisuMZ[_0x375649(0x35a)](_0x5e0701[_0x375649(0x114)]);for(const _0x24599d of _0x2fe615){if(!_0x24599d)continue;if(_0x24599d[_0x375649(0x55b)]())continue;if(!_0x24599d[_0x375649(0x813)]())continue;_0x24599d['resetBreakShield']();}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0xae0),_0x4b422a=>{const _0x3e2149=_0x4adfe0;if(!SceneManager[_0x3e2149(0xcfa)]())return;if(!Imported[_0x3e2149(0xa2c)])return;if(!BattleManager[_0x3e2149(0x2c7)]())return;VisuMZ[_0x3e2149(0x360)](_0x4b422a,_0x4b422a);const _0xd63371=VisuMZ[_0x3e2149(0x35a)](_0x4b422a[_0x3e2149(0x114)]),_0x4dc017=_0x4b422a[_0x3e2149(0x7c5)];for(const _0x430b00 of _0xd63371){if(_0x3e2149(0x886)===_0x3e2149(0x886)){if(!_0x430b00)continue;_0x430b00[_0x3e2149(0x660)](_0x4dc017);}else{const _0x5b9f58=_0x35f017[_0x3e2149(0x28e)]();this[_0x3e2149(0x98e)](_0x3e2149(0x22e),_0x2ad662,[_0x18954d],_0x5b9f58[_0x3e2149(0x49f)]);}}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x7a9),_0x28df7c=>{const _0x50d52c=_0x4adfe0;if(!SceneManager[_0x50d52c(0xcfa)]())return;VisuMZ['ConvertParams'](_0x28df7c,_0x28df7c);const _0x5617ea=$gameTemp[_0x50d52c(0x781)](),_0x3d8a77=BattleManager[_0x50d52c(0x3a3)],_0x245fa2=BattleManager[_0x50d52c(0x48b)];if(!_0x5617ea||!_0x3d8a77||!_0x245fa2)return;if(!_0x3d8a77[_0x50d52c(0x28e)]())return;const _0x71f72e=VisuMZ[_0x50d52c(0x35a)](_0x28df7c[_0x50d52c(0x114)]);for(const _0x3491aa of _0x71f72e){if('RZLJi'===_0x50d52c(0x2ea)){if(!_0x3491aa)continue;_0x28df7c[_0x50d52c(0x24a)]&&(_0x3491aa[_0x50d52c(0x572)](),_0x3491aa[_0x50d52c(0x50c)](_0x3491aa['deathStateId']())),_0x3491aa[_0x50d52c(0xac8)]()&&(_0x50d52c(0x331)===_0x50d52c(0x331)?_0x3491aa[_0x50d52c(0xccc)]():this[_0x50d52c(0x88c)][this['_indent']]=_0x342702);}else _0x50928c=_0xbb8ad1[_0x50d52c(0xc66)]()[_0x50d52c(0xc0d)],_0x519b23=_0x149a46[_0x50d52c(0xc66)]()[_0x50d52c(0x5e7)];}_0x5617ea['setWaitMode']('battleEffect');}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x30f),_0x2c758c=>{const _0x23e1ba=_0x4adfe0;if(!SceneManager[_0x23e1ba(0xcfa)]())return;if(!Imported[_0x23e1ba(0x134)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x23e1ba(0x360)](_0x2c758c,_0x2c758c);const _0x1abf0a=VisuMZ['CreateActionSequenceTargets'](_0x2c758c[_0x23e1ba(0x114)]),_0x3eec50=_0x2c758c['ChangeOrderBy'];for(const _0x47a066 of _0x1abf0a){if(!_0x47a066)continue;_0x47a066[_0x23e1ba(0xa3a)](_0x3eec50);}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x390),_0x30572=>{const _0x420a0a=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x420a0a(0x134)])return;if(!BattleManager[_0x420a0a(0x34a)]())return;VisuMZ[_0x420a0a(0x360)](_0x30572,_0x30572);const _0x564608=VisuMZ['CreateActionSequenceTargets'](_0x30572[_0x420a0a(0x114)]),_0x4b28ea=_0x30572[_0x420a0a(0x293)],_0x188820=_0x30572[_0x420a0a(0x293)];for(const _0x551d93 of _0x564608){if(_0x420a0a(0x670)!=='CeWjy'){if(!_0x551d93)continue;if(_0x551d93['_tpbState']===_0x420a0a(0x644))_0x551d93['changeCtbChargeTime'](_0x4b28ea);else _0x551d93[_0x420a0a(0x595)]===_0x420a0a(0x577)&&_0x551d93[_0x420a0a(0xb7c)](_0x188820);}else{if(this[_0x420a0a(0xacc)]===_0x420a0a(0x8c6))return![];if(this['_targetBattlerKey']===_0x420a0a(0x933))return!![];return this[_0x420a0a(0x163)]()&&!this['isCustomBattleScope']()?this[_0x420a0a(0x691)]():_0x17a5f0['BattleCore'][_0x420a0a(0x399)][_0x420a0a(0x61e)](this);}}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xbd4),_0x5d4655=>{const _0x56140f=_0x4adfe0;if(!SceneManager[_0x56140f(0xcfa)]())return;VisuMZ[_0x56140f(0x360)](_0x5d4655,_0x5d4655);const _0x37f282=BattleManager['_action'];if(!_0x37f282)return;let _0x5c562f=_0x5d4655[_0x56140f(0xbc9)];_0x37f282[_0x56140f(0x6d8)](_0x5c562f);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xb3a),_0x9cfabd=>{const _0x1d0280=_0x4adfe0;if(!SceneManager[_0x1d0280(0xcfa)]())return;VisuMZ['ConvertParams'](_0x9cfabd,_0x9cfabd);const _0x5a6fc6=VisuMZ[_0x1d0280(0x35a)](_0x9cfabd['Targets']);for(const _0x3ace30 of _0x5a6fc6){if(!_0x3ace30)continue;if(_0x3ace30[_0x1d0280(0x113)]())_0x3ace30[_0x1d0280(0x18f)]();}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x1b4),_0x251c70=>{const _0x1ec849=_0x4adfe0;if(!SceneManager[_0x1ec849(0xcfa)]())return;VisuMZ[_0x1ec849(0x360)](_0x251c70,_0x251c70);const _0x2516a7=$gameTemp[_0x1ec849(0x781)](),_0x353fe4=BattleManager['_subject'],_0x63fc8c=_0x251c70[_0x1ec849(0xc08)];if(!_0x2516a7)return;if(!_0x353fe4)return;_0x353fe4&&_0x353fe4[_0x1ec849(0xc5a)]()&&_0x63fc8c[_0x1ec849(0xb24)]()[_0x1ec849(0xb83)]()!==_0x1ec849(0x319)&&_0x2516a7[_0x1ec849(0x552)]([_0x63fc8c]);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_EnemyEscape',_0x11a75d=>{const _0x80492f=_0x4adfe0;if(!SceneManager[_0x80492f(0xcfa)]())return;VisuMZ[_0x80492f(0x360)](_0x11a75d,_0x11a75d);const _0x268dd0=VisuMZ[_0x80492f(0x35a)](_0x11a75d[_0x80492f(0x114)]);for(const _0x5d4f6c of _0x268dd0){if(!_0x5d4f6c)continue;if(!_0x5d4f6c[_0x80492f(0x13b)]())continue;_0x5d4f6c[_0x80492f(0x946)]();}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_EtbAction',_0x579e47=>{const _0x54a347=_0x4adfe0;if(!SceneManager[_0x54a347(0xcfa)]())return;if(!Imported[_0x54a347(0x1d1)])return;if(!BattleManager['isETB']())return;VisuMZ[_0x54a347(0x360)](_0x579e47,_0x579e47);const _0x382aaa=_0x579e47[_0x54a347(0xb62)];BattleManager[_0x54a347(0x48b)]&&BattleManager[_0x54a347(0x48b)][_0x54a347(0x6e8)]()[_0x54a347(0x795)](_0x382aaa);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x917),_0x54a53f=>{const _0x4c648c=_0x4adfe0;if(!SceneManager[_0x4c648c(0xcfa)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager[_0x4c648c(0x88e)]())return;VisuMZ[_0x4c648c(0x360)](_0x54a53f,_0x54a53f);const _0x45b4f3=_0x54a53f[_0x4c648c(0xb62)];BattleManager[_0x4c648c(0x48b)]&&BattleManager['_subject'][_0x4c648c(0x6e8)]()['gainCurrentActionsFTB'](_0x45b4f3);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x611),_0xd29639=>{const _0x39a231=_0x4adfe0;if(!SceneManager[_0x39a231(0xcfa)]())return;VisuMZ[_0x39a231(0x360)](_0xd29639,_0xd29639);const _0x52f89b=VisuMZ[_0x39a231(0x35a)](_0xd29639[_0x39a231(0x114)]),_0x1ad3f9=_0xd29639['HP_Rate'],_0x2a4908=_0xd29639[_0x39a231(0x803)],_0x14c4da=_0xd29639[_0x39a231(0x955)],_0x475f76=_0xd29639[_0x39a231(0x4d4)],_0x437d69=_0xd29639[_0x39a231(0x5f0)],_0x27c31c=_0xd29639[_0x39a231(0xbaa)],_0x31b6cb=_0xd29639[_0x39a231(0x887)];for(const _0x3b0936 of _0x52f89b){if(_0x39a231(0x5ef)!==_0x39a231(0x5ef))this[_0x39a231(0x593)]['addChild'](this[_0x39a231(0x671)]);else{if(!_0x3b0936)continue;const _0x26eb9f=_0x3b0936[_0x39a231(0xb82)](),_0x2e245a=Math[_0x39a231(0xb95)](_0x1ad3f9*_0x3b0936[_0x39a231(0x7ff)]+_0x2a4908),_0x238fa4=Math['round'](_0x14c4da*_0x3b0936[_0x39a231(0x583)]+_0x475f76),_0x3b1c57=Math[_0x39a231(0xb95)](_0x437d69*_0x3b0936[_0x39a231(0x511)]()+_0x27c31c);if(_0x2e245a!==0x0)_0x3b0936[_0x39a231(0x78e)](_0x2e245a);if(_0x238fa4!==0x0)_0x3b0936['gainMp'](_0x238fa4);if(_0x3b1c57!==0x0)_0x3b0936['gainTp'](_0x3b1c57);if(_0x31b6cb)_0x3b0936['startDamagePopup']();_0x26eb9f&&_0x3b0936[_0x39a231(0xc5a)]()&&_0x3b0936[_0x39a231(0xccc)]();}}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x706),_0x250c2e=>{const _0x5bedca=_0x4adfe0;if(!SceneManager[_0x5bedca(0xcfa)]())return;VisuMZ[_0x5bedca(0x360)](_0x250c2e,_0x250c2e);const _0x2f3a52=VisuMZ[_0x5bedca(0x35a)](_0x250c2e[_0x5bedca(0x114)]);for(const _0x4b80b9 of _0x2f3a52){if(!_0x4b80b9)continue;_0x4b80b9[_0x5bedca(0xa9f)](_0x250c2e['Immortal']);}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x68b),_0x49fa4b=>{const _0x15a9f=_0x4adfe0;if(!SceneManager[_0x15a9f(0xcfa)]())return;VisuMZ[_0x15a9f(0x360)](_0x49fa4b,_0x49fa4b);const _0x5ba398=BattleManager['_action'],_0x5497a0={'criticalHitRate':_0x49fa4b[_0x15a9f(0x2b3)],'criticalHitFlat':_0x49fa4b[_0x15a9f(0x806)],'criticalDmgRate':_0x49fa4b['CriticalDmgRate'],'criticalDmgFlat':_0x49fa4b[_0x15a9f(0x1bb)],'damageRate':_0x49fa4b['DamageRate'],'damageFlat':_0x49fa4b[_0x15a9f(0xc46)],'hitRate':_0x49fa4b[_0x15a9f(0xc74)],'hitFlat':_0x49fa4b['HitFlat']};_0x5ba398[_0x15a9f(0x288)]=_0x5497a0;}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_OnceParallel',_0x48c135=>{const _0xdb2ba9=_0x4adfe0;if(!SceneManager[_0xdb2ba9(0xcfa)]())return;VisuMZ[_0xdb2ba9(0x360)](_0x48c135,_0x48c135);const _0x41d278=_0x48c135[_0xdb2ba9(0x5a6)];SceneManager[_0xdb2ba9(0x726)][_0xdb2ba9(0xb28)](_0x41d278);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_OtbOrder',_0x4d22bf=>{const _0x40602c=_0x4adfe0;if(!SceneManager[_0x40602c(0xcfa)]())return;if(!Imported[_0x40602c(0x7a8)])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x40602c(0x360)](_0x4d22bf,_0x4d22bf);const _0x2aab0a=VisuMZ[_0x40602c(0x35a)](_0x4d22bf[_0x40602c(0x114)]);for(const _0x581750 of _0x2aab0a){if(!_0x581750)continue;let _0x14b8b4=_0x4d22bf[_0x40602c(0x58b)],_0x55afb3=_0x4d22bf[_0x40602c(0xc56)],_0x4e4216=_0x4d22bf[_0x40602c(0x86c)];BattleManager[_0x40602c(0xa78)][_0x40602c(0x5d0)](_0x581750)?_0x14b8b4+=_0x4e4216:_0x55afb3+=_0x4e4216,BattleManager[_0x40602c(0xa0f)](_0x581750,-_0x14b8b4,![]),BattleManager[_0x40602c(0xa0f)](_0x581750,-_0x55afb3,!![]);}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x298),_0x11e75e=>{const _0x11cebc=_0x4adfe0;if(!SceneManager[_0x11cebc(0xcfa)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x11cebc(0x5f4)]())return;VisuMZ[_0x11cebc(0x360)](_0x11e75e,_0x11e75e);const _0x55ffe1=BattleManager[_0x11cebc(0x48b)]['friendsUnit'](),_0x23feae=_0x11e75e[_0x11cebc(0x4ff)],_0x128ba3=_0x11e75e['alterChange']||'unchanged',_0x2f7d46=_0x11e75e['alterType']||'unchanged',_0x12700b=_0x11e75e[_0x11cebc(0x187)]||0x0,_0x4547ce=_0x11e75e[_0x11cebc(0x460)]||0x0;if(_0x55ffe1['canAlterActionCostPTB']()||_0x23feae){if('LFTiv'===_0x11cebc(0x3a2)){const _0x3aa4b3=this['_mainSprite']['bitmap'];if(!_0x3aa4b3)return;const _0x1be273=_0x3aa4b3[_0x11cebc(0x1e2)];let _0x266681=_0x3aa4b3[_0x11cebc(0x6a1)];if(this[_0x11cebc(0x26e)][_0x11cebc(0xc5a)]()){if(this['_frame'])_0x266681=_0x93452c[_0x11cebc(0x7a0)](0x0,this[_0x11cebc(0x93d)]['height']-0x4);}this['_mainSprite'][_0x11cebc(0xb0f)](0x0,0x0,_0x1be273,_0x266681),this[_0x11cebc(0xb0f)](0x0,0x0,_0x1be273,_0x266681);}else _0x23feae&&(_0x55ffe1['_ptbActionCost']=_0x55ffe1['_ptbActionCost']||{},_0x55ffe1['_ptbActionCost'][_0x11cebc(0x741)]=0x0),_0x55ffe1['alterActionCostPTB'](_0x128ba3,_0x2f7d46,_0x12700b,_0x4547ce);}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x36c),_0x54ccee=>{const _0x3bef22=_0x4adfe0;if(!SceneManager[_0x3bef22(0xcfa)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x3bef22(0x5f4)]())return;VisuMZ[_0x3bef22(0x360)](_0x54ccee,_0x54ccee);const _0x23a0c8=BattleManager[_0x3bef22(0x48b)][_0x3bef22(0x6e8)]();let _0xe4d1f3=Math['max'](_0x54ccee[_0x3bef22(0xaa8)],0x0),_0x255962=_0x23a0c8[_0x3bef22(0xa24)](),_0x291267=_0x23a0c8[_0x3bef22(0xd01)]();while(_0xe4d1f3--){if('MdWAQ'!==_0x3bef22(0x9cf))_0x58d083=this[_0x3bef22(0x96b)][this[_0x3bef22(0x96b)][_0x3bef22(0xa59)]-0x1];else{if(_0x255962<=0x0&&_0x291267<=0x0){if(_0x3bef22(0xbed)!==_0x3bef22(0xbed))this['_forcedBattleLayout']=_0x3bef22(0x202);else break;}else _0x255962>0x0?_0x3bef22(0xa9a)!==_0x3bef22(0xa9a)?this[_0x3bef22(0x58c)]()?_0x1ad193['BattleCore'][_0x3bef22(0x693)][_0x3bef22(0x61e)](this):(this[_0x3bef22(0xac9)]=!this[_0x3bef22(0x237)][_0x3bef22(0x44a)](),!this[_0x3bef22(0xac9)]&&(this['opacity']=0x0)):(_0x255962--,_0x291267++):_0x291267--;}}_0x23a0c8[_0x3bef22(0x203)](_0x255962),_0x23a0c8[_0x3bef22(0x7ef)](_0x291267);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_PtbFullHalfAction',_0x93fe05=>{const _0x30aa0f=_0x4adfe0;if(!SceneManager[_0x30aa0f(0xcfa)]())return;if(!Imported[_0x30aa0f(0xb3b)])return;if(!BattleManager[_0x30aa0f(0x5f4)]())return;VisuMZ[_0x30aa0f(0x360)](_0x93fe05,_0x93fe05);const _0x5035df=BattleManager[_0x30aa0f(0x48b)]['friendsUnit']();let _0x40e93e=_0x93fe05[_0x30aa0f(0x667)],_0x4bba05=_0x93fe05['HalfActions'];_0x5035df[_0x30aa0f(0xc30)](_0x40e93e),_0x5035df[_0x30aa0f(0xc57)](_0x4bba05);}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x208),_0x4ca4b4=>{const _0x418cf2=_0x4adfe0;if(!SceneManager[_0x418cf2(0xcfa)]())return;VisuMZ[_0x418cf2(0x360)](_0x4ca4b4,_0x4ca4b4);const _0x10cb23=[_0x418cf2(0x973),_0x418cf2(0x7fa),'ATK',_0x418cf2(0x12b),'MAT',_0x418cf2(0x225),_0x418cf2(0xcd5),_0x418cf2(0x32b)],_0x497429=_0x4ca4b4['Buffs'],_0x3b7b2d=_0x4ca4b4[_0x418cf2(0xa49)],_0x46f1d4=VisuMZ[_0x418cf2(0x35a)](_0x4ca4b4['Targets']);for(const _0x1b2fa9 of _0x46f1d4){if(!_0x1b2fa9)continue;for(const _0xe28653 of _0x497429){if(_0x418cf2(0x49a)===_0x418cf2(0x49a)){const _0x3db4be=_0x10cb23[_0x418cf2(0x766)](_0xe28653['toUpperCase']()[_0x418cf2(0xb83)]());_0x3db4be>=0x0&&_0x3db4be<=0x7&&_0x1b2fa9[_0x418cf2(0x2f9)](_0x3db4be)&&(_0x418cf2(0xa42)!=='sGbIG'?(this[_0x418cf2(0xc47)]=0x0,this[_0x418cf2(0x5dc)]()):_0x1b2fa9[_0x418cf2(0x70d)](_0x3db4be));}else _0x5fbe8a&&_0x42586a[_0x418cf2(0x9e6)]();}for(const _0x21c141 of _0x3b7b2d){const _0x23bf23=_0x10cb23[_0x418cf2(0x766)](_0x21c141[_0x418cf2(0xb24)]()[_0x418cf2(0xb83)]());_0x23bf23>=0x0&&_0x23bf23<=0x7&&_0x1b2fa9[_0x418cf2(0xaa5)](_0x23bf23)&&_0x1b2fa9['removeBuff'](_0x23bf23);}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_RemoveState',_0x4667af=>{const _0x5d074b=_0x4adfe0;if(!SceneManager[_0x5d074b(0xcfa)]())return;VisuMZ[_0x5d074b(0x360)](_0x4667af,_0x4667af);const _0x105a8b=_0x4667af[_0x5d074b(0x36f)],_0x207381=VisuMZ[_0x5d074b(0x35a)](_0x4667af[_0x5d074b(0x114)]);for(const _0x51208f of _0x207381){if(!_0x51208f)continue;for(const _0x216c2b of _0x105a8b){_0x5d074b(0xab9)!==_0x5d074b(0x642)?_0x51208f[_0x5d074b(0x3ed)](_0x216c2b):_0x39b883[_0x5d074b(0x178)]=_0x49e6ac(_0x2206e7['$1'])[_0x5d074b(0xb24)]()[_0x5d074b(0xb83)]();}}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x602),_0x4081b4=>{const _0x50df05=_0x4adfe0;if(!SceneManager[_0x50df05(0xcfa)]())return;if(!Imported[_0x50df05(0x84f)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x50df05(0x360)](_0x4081b4,_0x4081b4);const _0x5cf094=_0x4081b4[_0x50df05(0x85d)],_0x5e59ad=VisuMZ['CreateActionSequenceTargets'](_0x4081b4['Targets']),_0x4ab2c5=_0x4081b4[_0x50df05(0xa4b)],_0x1c6739=_0x4081b4[_0x50df05(0x1a1)],_0x2a9256=_0x4081b4[_0x50df05(0xcea)],_0x131b9e=BattleManager[_0x50df05(0x3a3)];if(_0x5cf094)for(const _0x26e394 of _0x5e59ad){if(!_0x26e394)continue;if(_0x26e394===user)continue;if(_0x4ab2c5)_0x26e394['setSTBExploited'](![]);_0x26e394['becomeSTBExploited'](BattleManager[_0x50df05(0x48b)],_0x131b9e);}if(_0x1c6739&&BattleManager[_0x50df05(0x48b)]){if(_0x2a9256)BattleManager[_0x50df05(0x48b)][_0x50df05(0x945)](![]);const _0x2c2660=_0x5e59ad[0x0];BattleManager[_0x50df05(0x6da)](_0x2c2660,_0x131b9e);}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x129),_0x44767c=>{const _0x412040=_0x4adfe0;if(!SceneManager[_0x412040(0xcfa)]())return;if(!Imported[_0x412040(0x84f)])return;if(!BattleManager[_0x412040(0x4e3)]())return;VisuMZ[_0x412040(0x360)](_0x44767c,_0x44767c);const _0x1d76ef=_0x44767c[_0x412040(0x496)];BattleManager[_0x412040(0x48b)]&&(_0x412040(0x108)===_0x412040(0x7e6)?_0x44d42c[_0x412040(0xa98)][_0x412040(0x4bf)](_0x21eb22,_0x4dd3e0):BattleManager[_0x412040(0x48b)][_0x412040(0x186)](_0x1d76ef));}),PluginManager['registerCommand'](pluginData['name'],_0x4adfe0(0xab1),_0x15a58b=>{const _0x10af5e=_0x4adfe0;if(!SceneManager[_0x10af5e(0xcfa)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x10af5e(0x4e3)]())return;VisuMZ[_0x10af5e(0x360)](_0x15a58b,_0x15a58b);let _0x3048e1=_0x15a58b[_0x10af5e(0x496)];if(BattleManager[_0x10af5e(0x48b)]){if('anVTT'!==_0x10af5e(0x2c1)){BattleManager[_0x10af5e(0x48b)]['_actions']=BattleManager['_subject']['_actions']||[];while(_0x3048e1--){if(BattleManager['_subject'][_0x10af5e(0x60a)][_0x10af5e(0xa59)]<=0x0)break;BattleManager['_subject']['_actions'][_0x10af5e(0x2df)]();}}else _0x495b36[_0x10af5e(0x82f)](this[_0x10af5e(0x74a)]);}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],'ActSeq_Mechanics_SwapWeapon',_0x3e83ad=>{const _0x38b892=_0x4adfe0;if(!SceneManager[_0x38b892(0xcfa)]())return;if(!Imported[_0x38b892(0x354)])return;VisuMZ[_0x38b892(0x360)](_0x3e83ad,_0x3e83ad);const _0x4e9411=VisuMZ[_0x38b892(0x35a)](_0x3e83ad[_0x38b892(0x114)]),_0x520e88=_0x3e83ad[_0x38b892(0x5b9)];for(const _0xd9cb32 of _0x4e9411){if(_0x38b892(0xb9d)!==_0x38b892(0xb9d)){if(this['constructor']===_0x33a66a)return;this['updateGrow'](),this['finalizeScale']();}else{if(!_0xd9cb32)continue;if(!_0xd9cb32[_0x38b892(0x771)]())continue;_0xd9cb32[_0x38b892(0x1d0)](_0x520e88);}}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x29e),_0x33bef1=>{const _0x1e4031=_0x4adfe0;if(!SceneManager[_0x1e4031(0xcfa)]())return;VisuMZ['ConvertParams'](_0x33bef1,_0x33bef1);const _0x368b77=VisuMZ[_0x1e4031(0x35a)](_0x33bef1[_0x1e4031(0x114)]),_0x32184f=_0x33bef1[_0x1e4031(0x4d6)],_0x1bd649={'textColor':ColorManager[_0x1e4031(0x68c)](_0x33bef1[_0x1e4031(0x417)]),'flashColor':_0x33bef1['FlashColor'],'flashDuration':_0x33bef1[_0x1e4031(0x36a)]};for(const _0x2f1732 of _0x368b77){if(!_0x2f1732)continue;_0x2f1732[_0x1e4031(0xa45)](_0x32184f,_0x1bd649);}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x551),_0x35efac=>{const _0x52a8ee=_0x4adfe0;if(!SceneManager[_0x52a8ee(0xcfa)]())return;VisuMZ[_0x52a8ee(0x360)](_0x35efac,_0x35efac);const _0x1d33b7=VisuMZ[_0x52a8ee(0x35a)](_0x35efac[_0x52a8ee(0x114)]);let _0x588cf8=$gameVariables[_0x52a8ee(0x965)](_0x35efac['Variable']);Imported[_0x52a8ee(0x56a)]&&_0x35efac[_0x52a8ee(0x33b)]&&(_0x588cf8=VisuMZ[_0x52a8ee(0xa2d)](_0x588cf8));const _0x272a1c=String(_0x588cf8),_0x59a8fb={'textColor':ColorManager[_0x52a8ee(0x68c)](_0x35efac['TextColor']),'flashColor':_0x35efac['FlashColor'],'flashDuration':_0x35efac[_0x52a8ee(0x36a)]};for(const _0x1ec536 of _0x1d33b7){if(_0x52a8ee(0xb06)===_0x52a8ee(0x90e)){const _0x19a1c1=this['battleLayoutStyle']();(_0x19a1c1==='border'||this['isSkillItemWindowsMiddle']())&&(this[_0x52a8ee(0xa4c)][_0x52a8ee(0x4b6)](),this[_0x52a8ee(0xa4c)][_0x52a8ee(0x27e)]&&this[_0x52a8ee(0xa4c)]['show'](),this[_0x52a8ee(0x3fa)][_0x52a8ee(0x4b6)](),this['_itemWindow']['active']&&this[_0x52a8ee(0x3fa)][_0x52a8ee(0x454)]());}else{if(!_0x1ec536)continue;_0x1ec536[_0x52a8ee(0xa45)](_0x272a1c,_0x59a8fb);}}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],'ActSeq_Mechanics_WaitForEffect',_0x16baab=>{const _0x16ce4f=_0x4adfe0;if(!SceneManager[_0x16ce4f(0xcfa)]())return;const _0x4a560b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4a560b)return;_0x4a560b[_0x16ce4f(0x98c)](_0x16ce4f(0x627));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xa4e),_0x563bc1=>{const _0x3d42b9=_0x4adfe0;if(!SceneManager[_0x3d42b9(0xcfa)]())return;VisuMZ[_0x3d42b9(0x360)](_0x563bc1,_0x563bc1);const _0xf87b8e=VisuMZ['CreateActionSequenceTargets'](_0x563bc1['Targets']);for(const _0xa98fb6 of _0xf87b8e){if(!_0xa98fb6)continue;_0xa98fb6[_0x3d42b9(0x396)]();}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Motion_FreezeMotionFrame',_0x37a357=>{const _0x57dcce=_0x4adfe0;if(!SceneManager[_0x57dcce(0xcfa)]())return;VisuMZ[_0x57dcce(0x360)](_0x37a357,_0x37a357);const _0x22a011=VisuMZ[_0x57dcce(0x35a)](_0x37a357[_0x57dcce(0x114)]),_0x1068d8=_0x37a357[_0x57dcce(0x6a6)][_0x57dcce(0xc1b)]()[_0x57dcce(0xb83)]();let _0x2e9ba6=_0x37a357[_0x57dcce(0x5cc)];const _0x338678=_0x37a357[_0x57dcce(0x993)];!['attack','thrust','swing',_0x57dcce(0x94c)][_0x57dcce(0x5d0)](_0x1068d8)&&(_0x2e9ba6=![]);for(const _0x33a045 of _0x22a011){if(_0x57dcce(0x23c)===_0x57dcce(0x23c)){if(!_0x33a045)continue;_0x33a045[_0x57dcce(0x911)](_0x1068d8,_0x2e9ba6,_0x338678);}else this['push'](_0x57dcce(0x587),_0x8a9fe5);}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x7d9),_0x39c338=>{const _0x5940b6=_0x4adfe0;if(!SceneManager[_0x5940b6(0xcfa)]())return;VisuMZ[_0x5940b6(0x360)](_0x39c338,_0x39c338);const _0x3bade0=VisuMZ[_0x5940b6(0x35a)](_0x39c338['Targets']),_0xe6835b=_0x39c338[_0x5940b6(0x6a6)]['toLowerCase']()[_0x5940b6(0xb83)](),_0x212857=_0x39c338['ShowWeapon'];for(const _0x29597d of _0x3bade0){if(_0x5940b6(0x440)===_0x5940b6(0x440)){if(!_0x29597d)continue;if(_0xe6835b[_0x5940b6(0x634)](/ATTACK[ ](\d+)/i))_0x29597d['performAttackSlot'](Number(RegExp['$1']));else _0xe6835b===_0x5940b6(0xc64)?_0x5940b6(0x50e)!==_0x5940b6(0xc19)?_0x29597d['performAttack']():_0x59f13d[_0x5940b6(0x70d)](_0x5ef845):_0x29597d[_0x5940b6(0xb04)](_0xe6835b);if(!_0x212857)_0x29597d[_0x5940b6(0x1ca)](0x0);else{if(_0x212857&&[_0x5940b6(0x71b),_0x5940b6(0x5e5),_0x5940b6(0x6d0)]['includes'](_0xe6835b)){}}}else _0x389ece[_0x5940b6(0x6ec)][_0x5940b6(0x632)][_0x5940b6(0x61e)](this);}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0xac7),_0x148db7=>{const _0x1c8953=_0x4adfe0;if(!SceneManager[_0x1c8953(0xcfa)]())return;VisuMZ['ConvertParams'](_0x148db7,_0x148db7);const _0x5664d1=BattleManager[_0x1c8953(0x3a3)];if(!_0x5664d1)return;if(!_0x5664d1['item']())return;const _0x1b3846=VisuMZ['CreateActionSequenceTargets'](_0x148db7[_0x1c8953(0x114)]);for(const _0xe8c13f of _0x1b3846){if(_0x1c8953(0x1a9)===_0x1c8953(0x1a9)){if(!_0xe8c13f)continue;_0xe8c13f[_0x1c8953(0x870)](_0x5664d1);}else{const _0x43176b=_0x20b814[_0x1c8953(0xa98)][_0x1c8953(0x5bc)][_0x1c8953(0x22d)];if(_0x43176b[_0x1c8953(0x154)])return;_0x310cbd[_0x1c8953(0x6ec)][_0x1c8953(0xbeb)][_0x1c8953(0x61e)](this,_0x2434f5);}}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Motion_RefreshMotion',_0x1ea42e=>{const _0x1f344b=_0x4adfe0;if(!SceneManager[_0x1f344b(0xcfa)]())return;VisuMZ['ConvertParams'](_0x1ea42e,_0x1ea42e);const _0x4c896c=VisuMZ[_0x1f344b(0x35a)](_0x1ea42e['Targets']);for(const _0x446edb of _0x4c896c){if(!_0x446edb)continue;if(!_0x446edb['battler']())continue;_0x446edb[_0x1f344b(0xc66)]()[_0x1f344b(0x7e9)]();}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Motion_WaitMotionFrame',_0x229155=>{const _0x5743c2=_0x4adfe0;if(!SceneManager[_0x5743c2(0xcfa)]())return;VisuMZ[_0x5743c2(0x360)](_0x229155,_0x229155);const _0x5d710d=$gameTemp[_0x5743c2(0x781)](),_0x1d6ec8=_0x229155[_0x5743c2(0x4ec)]*Sprite_Battler['_motionSpeed'];_0x5d710d[_0x5743c2(0x733)](_0x1d6ec8);}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x95b),_0x551467=>{const _0x39d0b6=_0x4adfe0;if(!SceneManager[_0x39d0b6(0xcfa)]())return;VisuMZ[_0x39d0b6(0x360)](_0x551467,_0x551467);const _0x5c97c0=$gameTemp['getLastPluginCommandInterpreter'](),_0x26fef4=BattleManager[_0x39d0b6(0x3a3)];if(!_0x5c97c0||!_0x26fef4)return;if(!_0x26fef4[_0x39d0b6(0x28e)]())return;const _0x264dbc=VisuMZ[_0x39d0b6(0x35a)](_0x551467[_0x39d0b6(0x114)]);for(const _0x2a4412 of _0x264dbc){if(!_0x2a4412)continue;_0x2a4412[_0x39d0b6(0x7cc)](_0x26fef4);}if(_0x551467[_0x39d0b6(0xc03)])_0x5c97c0['setWaitMode'](_0x39d0b6(0x368));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xcc3),_0x1a54f2=>{const _0x3fb124=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x3fb124(0x1bc)]())return;VisuMZ['ConvertParams'](_0x1a54f2,_0x1a54f2);const _0x8e85dc=$gameTemp[_0x3fb124(0x781)](),_0x17142b=VisuMZ[_0x3fb124(0x35a)](_0x1a54f2[_0x3fb124(0x114)]),_0x202f5a=_0x1a54f2[_0x3fb124(0xc3f)],_0x4b9aaa=_0x1a54f2[_0x3fb124(0x480)],_0x2ea880=_0x1a54f2['DistanceY'],_0x4eca40=_0x1a54f2[_0x3fb124(0x96d)],_0x866f01=_0x1a54f2['FaceDirection'],_0x5b8966=_0x1a54f2[_0x3fb124(0xc6d)],_0x33ee7f=_0x1a54f2[_0x3fb124(0x6a6)],_0x589c12=_0x1a54f2[_0x3fb124(0xc03)];if(!_0x8e85dc)return;for(const _0x1363b3 of _0x17142b){if(_0x3fb124(0xc49)===_0x3fb124(0xc49)){if(!_0x1363b3)continue;let _0x3712ca=_0x4b9aaa,_0x1f24f6=_0x2ea880;if(_0x202f5a[_0x3fb124(0x634)](/horz/i))_0x3712ca*=_0x1363b3[_0x3fb124(0x771)]()?-0x1:0x1;if(_0x202f5a[_0x3fb124(0x634)](/vert/i))_0x1f24f6*=_0x1363b3[_0x3fb124(0x771)]()?-0x1:0x1;_0x1363b3['moveBattlerHomeDistance'](_0x3712ca,_0x1f24f6,_0x4eca40,_0x866f01,_0x5b8966),_0x1363b3[_0x3fb124(0xb04)](_0x33ee7f);}else _0x4e81a8[_0x3fb124(0xa98)][_0x3fb124(0x8fa)][_0x3fb124(0x61e)](this),this[_0x3fb124(0x7ee)]();}if(_0x589c12)_0x8e85dc[_0x3fb124(0x98c)](_0x3fb124(0x368));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x96a),_0x232a86=>{const _0x159391=_0x4adfe0;if(!SceneManager[_0x159391(0xcfa)]())return;if(!$gameSystem[_0x159391(0x1bc)]())return;VisuMZ[_0x159391(0x360)](_0x232a86,_0x232a86);const _0x11043a=$gameTemp[_0x159391(0x781)](),_0x20522f=VisuMZ[_0x159391(0x35a)](_0x232a86[_0x159391(0x114)]),_0x4a58a7=_0x232a86[_0x159391(0x4c2)],_0x47b593=_0x232a86[_0x159391(0x909)],_0x45cd42=_0x232a86[_0x159391(0x116)],_0x489b55=_0x232a86[_0x159391(0x96d)],_0x3d73b9=_0x232a86[_0x159391(0x4f0)],_0x8ff297=_0x232a86[_0x159391(0xc6d)],_0x5193a5=_0x232a86['MotionType'],_0x4b7bfa=_0x232a86['WaitForMovement'];if(!_0x11043a)return;for(const _0x29c295 of _0x20522f){if(!_0x29c295)continue;const _0xbbf696=_0x232a86[_0x159391(0x3dc)](_0x29c295)||{'x':0x0,'y':0x0};let _0x4964c3=_0xbbf696['x'],_0x4c79cc=_0xbbf696['y'];if(_0x4a58a7[_0x159391(0x634)](/none/i)){if('HZYBP'===_0x159391(0xabc)){const _0xa1efc4=_0x8767c7[_0x159391(0xa98)][_0x159391(0x5bc)]['Mechanics'];if(_0xa1efc4[_0x159391(0x959)]>0x0&&_0x191704[_0xa1efc4[_0x159391(0x959)]]){const _0x5e5cdc=_0x1d48cc[_0xa1efc4[_0x159391(0x959)]],_0x3198bf=_0x5e5cdc[_0x159391(0xc26)][_0x159391(0xa59)]-0x2,_0x422124=_0x5e5cdc[_0x159391(0xc26)][_0x3198bf];if(_0x422124&&_0x422124[_0x159391(0x888)]!==0xe6){const _0x40ba2c={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x138481=_0x5e5cdc[_0x159391(0xc26)][_0x159391(0xcf0)]();_0x5e5cdc[_0x159391(0xc26)][_0x159391(0x6f5)](_0x40ba2c),_0x5e5cdc['list'][_0x159391(0x6f5)](_0x138481);}}}else _0x4964c3+=_0x47b593,_0x4c79cc+=_0x45cd42;}else{if(_0x4a58a7[_0x159391(0x634)](/horz/i)&&_0x4a58a7[_0x159391(0x634)](/vert/i))_0x159391(0x756)===_0x159391(0x756)?(_0x4964c3+=_0x29c295['isActor']()?-_0x47b593:_0x47b593,_0x4c79cc+=_0x29c295[_0x159391(0x771)]()?-_0x45cd42:_0x45cd42):(this[_0x159391(0xa4c)][_0x159391(0x5cd)](),this[_0x159391(0x3fa)][_0x159391(0x5cd)]());else{if(_0x4a58a7[_0x159391(0x634)](/horz/i))'IARtQ'===_0x159391(0x8b2)?(_0x4964c3+=_0x29c295[_0x159391(0x771)]()?-_0x47b593:_0x47b593,_0x4c79cc+=_0x45cd42):(this[_0x159391(0x534)](),this['_requestRefresh']=![],_0x134f6a[_0x159391(0x63b)]());else _0x4a58a7['match'](/vert/i)&&(_0x4964c3+=_0x47b593,_0x4c79cc+=_0x29c295['isActor']()?-_0x45cd42:_0x45cd42);}}_0x29c295['moveBattlerHomeToPoint'](_0x4964c3,_0x4c79cc,_0x489b55,_0x3d73b9,_0x8ff297,-0x1),_0x29c295['requestMotion'](_0x5193a5);}if(_0x4b7bfa)_0x11043a['setWaitMode'](_0x159391(0x368));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Movement_HomeMoveToPoint',_0x416d41=>{const _0x4cb3bd=_0x4adfe0;if(!SceneManager[_0x4cb3bd(0xcfa)]())return;if(!$gameSystem[_0x4cb3bd(0x1bc)]())return;VisuMZ[_0x4cb3bd(0x360)](_0x416d41,_0x416d41);const _0x288b5c=$gameTemp['getLastPluginCommandInterpreter'](),_0x397fd0=VisuMZ[_0x4cb3bd(0x35a)](_0x416d41[_0x4cb3bd(0x114)]),_0x4cc4f7=_0x416d41[_0x4cb3bd(0x214)],_0x2aca4d=_0x416d41[_0x4cb3bd(0x4c2)],_0x32bbe5=_0x416d41[_0x4cb3bd(0x909)],_0x54db8e=_0x416d41['OffsetY'],_0x5eb68a=_0x416d41[_0x4cb3bd(0x96d)],_0x2fd555=_0x416d41['FaceDirection'],_0x180e56=_0x416d41[_0x4cb3bd(0xc6d)],_0xfeed4d=_0x416d41['MotionType'],_0x474aa5=_0x416d41['WaitForMovement'];if(!_0x288b5c)return;for(const _0x4c7c7a of _0x397fd0){if('CFjri'==='djLcC')_0x40735b-=this[_0x4cb3bd(0x56b)],_0x3103fc-=this[_0x4cb3bd(0xb34)];else{if(!_0x4c7c7a)continue;let _0xf796f3=_0x4c7c7a[_0x4cb3bd(0xc66)]()[_0x4cb3bd(0x49e)],_0x329f89=_0x4c7c7a[_0x4cb3bd(0xc66)]()[_0x4cb3bd(0x984)];if(_0x4cc4f7[_0x4cb3bd(0x634)](/home/i))_0xf796f3=_0x4c7c7a[_0x4cb3bd(0xc66)]()['_homeX'],_0x329f89=_0x4c7c7a[_0x4cb3bd(0xc66)]()[_0x4cb3bd(0x5e7)];else{if(_0x4cc4f7[_0x4cb3bd(0x634)](/center/i))_0xf796f3=Graphics[_0x4cb3bd(0xcc7)]/0x2,_0x329f89=Graphics[_0x4cb3bd(0x468)]/0x2;else _0x4cc4f7[_0x4cb3bd(0x634)](/point (\d+), (\d+)/i)&&(_0xf796f3=Number(RegExp['$1']),_0x329f89=Number(RegExp['$2']));}if(_0x2aca4d[_0x4cb3bd(0x634)](/none/i))_0xf796f3+=_0x32bbe5,_0x329f89+=_0x54db8e;else{if(_0x2aca4d['match'](/horz/i)&&_0x2aca4d['match'](/vert/i)){if('DBcOW'!==_0x4cb3bd(0x544))_0xf796f3+=_0x4c7c7a[_0x4cb3bd(0x771)]()?-_0x32bbe5:_0x32bbe5,_0x329f89+=_0x4c7c7a[_0x4cb3bd(0x771)]()?-_0x54db8e:_0x54db8e;else{if(!_0x2526ee[_0x4cb3bd(0xcfa)]())return;const _0x40b84d=_0x2f1c0d['getLastPluginCommandInterpreter']();if(!_0x40b84d)return;_0x40b84d[_0x4cb3bd(0x98c)](_0x4cb3bd(0x627));}}else{if(_0x2aca4d[_0x4cb3bd(0x634)](/horz/i))_0x4cb3bd(0x355)===_0x4cb3bd(0x2b1)?(_0x5930f4=(_0x48ee53+_0x261291)/0x2,_0x2b78fd=-0x1):(_0xf796f3+=_0x4c7c7a[_0x4cb3bd(0x771)]()?-_0x32bbe5:_0x32bbe5,_0x329f89+=_0x54db8e);else _0x2aca4d[_0x4cb3bd(0x634)](/vert/i)&&('GpkuY'===_0x4cb3bd(0x5dd)?(_0x102500[_0x4cb3bd(0xa98)]['Sprite_Actor_setBattler'][_0x4cb3bd(0x61e)](this,_0x1cbbc7),this[_0x4cb3bd(0xce7)](_0x10a25a)):(_0xf796f3+=_0x32bbe5,_0x329f89+=_0x4c7c7a[_0x4cb3bd(0x771)]()?-_0x54db8e:_0x54db8e));}}_0x4c7c7a[_0x4cb3bd(0x872)](_0xf796f3,_0x329f89,_0x5eb68a,_0x2fd555,_0x180e56,-0x1),_0x4c7c7a['requestMotion'](_0xfeed4d);}}if(_0x474aa5)_0x288b5c[_0x4cb3bd(0x98c)](_0x4cb3bd(0x368));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x3df),_0x48ac04=>{const _0x3c7c82=_0x4adfe0;if(!SceneManager[_0x3c7c82(0xcfa)]())return;if(!$gameSystem[_0x3c7c82(0x1bc)]())return;VisuMZ[_0x3c7c82(0x360)](_0x48ac04,_0x48ac04);const _0x4b55ff=$gameTemp[_0x3c7c82(0x781)](),_0x57ad0d=VisuMZ[_0x3c7c82(0x35a)](_0x48ac04[_0x3c7c82(0x49d)]),_0x16709e=VisuMZ[_0x3c7c82(0x35a)](_0x48ac04[_0x3c7c82(0xb41)]),_0x417dcc=_0x48ac04[_0x3c7c82(0xbb0)];let _0x4b83aa=_0x48ac04[_0x3c7c82(0x3c6)];const _0x4434d5=_0x48ac04['OffsetAdjust'],_0x47c78a=_0x48ac04['OffsetX'],_0x34bfc0=_0x48ac04[_0x3c7c82(0x116)],_0x2d1d29=_0x48ac04['Duration'],_0x4085a7=_0x48ac04[_0x3c7c82(0x4f0)],_0x26202d=_0x48ac04['EasingType'],_0x460d92=_0x48ac04[_0x3c7c82(0x6a6)],_0x3edfa6=_0x48ac04[_0x3c7c82(0xc03)],_0xd4cbed=Math[_0x3c7c82(0x258)](..._0x16709e[_0x3c7c82(0x2f7)](_0x29255f=>_0x29255f[_0x3c7c82(0xc66)]()['_baseX']-_0x29255f[_0x3c7c82(0xc66)]()[_0x3c7c82(0x5be)]()/0x2)),_0x2895a2=Math[_0x3c7c82(0x7a0)](..._0x16709e[_0x3c7c82(0x2f7)](_0x416b46=>_0x416b46[_0x3c7c82(0xc66)]()[_0x3c7c82(0x49e)]+_0x416b46['battler']()[_0x3c7c82(0x5be)]()/0x2)),_0x2e8539=Math['min'](..._0x16709e[_0x3c7c82(0x2f7)](_0x11b4e3=>_0x11b4e3[_0x3c7c82(0xc66)]()[_0x3c7c82(0x984)]-_0x11b4e3['battler']()['mainSpriteHeight']())),_0x21e937=Math[_0x3c7c82(0x7a0)](..._0x16709e[_0x3c7c82(0x2f7)](_0xbac476=>_0xbac476[_0x3c7c82(0xc66)]()[_0x3c7c82(0x984)])),_0x3c8674=_0x16709e[_0x3c7c82(0xcd9)](_0x37edf1=>_0x37edf1[_0x3c7c82(0x771)]())[_0x3c7c82(0xa59)],_0x2000f9=_0x16709e[_0x3c7c82(0xcd9)](_0x241071=>_0x241071[_0x3c7c82(0x13b)]())[_0x3c7c82(0xa59)];let _0x37b4e0=0x0,_0x415768=0x0;if(_0x417dcc[_0x3c7c82(0x634)](/front/i))_0x3c7c82(0x8f8)!=='bmYoW'?_0x37b4e0=_0x3c8674>=_0x2000f9?_0xd4cbed:_0x2895a2:(this[_0x3c7c82(0x6e3)]&&this[_0x3c7c82(0x607)](this[_0x3c7c82(0x6e3)]),this[_0x3c7c82(0x195)]&&this['addChildToBack'](this[_0x3c7c82(0x195)]));else{if(_0x417dcc[_0x3c7c82(0x634)](/middle/i))_0x37b4e0=(_0xd4cbed+_0x2895a2)/0x2,_0x4b83aa=-0x1;else _0x417dcc[_0x3c7c82(0x634)](/back/i)&&(_0x37b4e0=_0x3c8674>=_0x2000f9?_0x2895a2:_0xd4cbed);}if(_0x417dcc[_0x3c7c82(0x634)](/head/i))_0x415768=_0x2e8539;else{if(_0x417dcc[_0x3c7c82(0x634)](/center/i))_0x415768=(_0x2e8539+_0x21e937)/0x2;else _0x417dcc[_0x3c7c82(0x634)](/base/i)&&(_0x415768=_0x21e937);}if(!_0x4b55ff)return;for(const _0x1caf8c of _0x57ad0d){if('CRLYF'==='CRLYF'){if(!_0x1caf8c)continue;let _0x18cb90=_0x37b4e0,_0x2af62f=_0x415768;if(_0x4434d5[_0x3c7c82(0x634)](/none/i))_0x18cb90+=_0x47c78a,_0x2af62f+=_0x34bfc0;else{if(_0x4434d5[_0x3c7c82(0x634)](/horz/i)&&_0x4434d5[_0x3c7c82(0x634)](/vert/i))_0x3c7c82(0x128)!==_0x3c7c82(0x554)?(_0x18cb90+=_0x1caf8c['isActor']()?-_0x47c78a:_0x47c78a,_0x2af62f+=_0x1caf8c[_0x3c7c82(0x771)]()?-_0x34bfc0:_0x34bfc0):(_0x766726[_0x3c7c82(0xa98)][_0x3c7c82(0x519)]&&_0x30ca66[_0x3c7c82(0xa98)]['ParseClassNotetags']['call'](this,_0x32fe20),_0x2d129d['BattleCore'][_0x3c7c82(0x99b)](_0x2dd9e9));else{if(_0x4434d5[_0x3c7c82(0x634)](/horz/i)){if('jLWbp'===_0x3c7c82(0x90f))_0x18cb90+=_0x1caf8c[_0x3c7c82(0x771)]()?-_0x47c78a:_0x47c78a,_0x2af62f+=_0x34bfc0;else{_0x25b6dd(_0x3c7c82(0x79c)),_0x203460[_0x3c7c82(0x162)]();return;}}else _0x4434d5[_0x3c7c82(0x634)](/vert/i)&&(_0x18cb90+=_0x47c78a,_0x2af62f+=_0x1caf8c[_0x3c7c82(0x771)]()?-_0x34bfc0:_0x34bfc0);}}_0x1caf8c[_0x3c7c82(0x872)](_0x18cb90,_0x2af62f,_0x2d1d29,_0x4085a7,_0x26202d,_0x4b83aa),_0x1caf8c[_0x3c7c82(0xb04)](_0x460d92);}else return _0x10812f[_0x3c7c82(0x726)]['battleLayoutStyle']()===_0x3c7c82(0x2a2)?_0x380f28[_0x3c7c82(0xa98)][_0x3c7c82(0x5bc)]['BattleLayout'][_0x3c7c82(0x24c)]:_0x51961a['BattleCore'][_0x3c7c82(0x5bc)][_0x3c7c82(0x22d)][_0x3c7c82(0x2c5)];}if(_0x3edfa6)_0x4b55ff[_0x3c7c82(0x98c)](_0x3c7c82(0x368));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Movement_FaceDirection',_0x47fd13=>{const _0x5db668=_0x4adfe0;if(!SceneManager[_0x5db668(0xcfa)]())return;if(!$gameSystem[_0x5db668(0x1bc)]())return;VisuMZ[_0x5db668(0x360)](_0x47fd13,_0x47fd13);const _0x44b074=VisuMZ['CreateActionSequenceTargets'](_0x47fd13[_0x5db668(0x114)]);let _0x40e30a=_0x47fd13['Direction']['match'](/back/i);for(const _0x4f65f2 of _0x44b074){if(!_0x4f65f2)continue;if(_0x47fd13[_0x5db668(0x926)][_0x5db668(0x634)](/rand/i))_0x40e30a=Math[_0x5db668(0xc05)](0x2);_0x4f65f2[_0x5db668(0x9f9)](!!_0x40e30a);}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0xbf1),_0x50b416=>{const _0x36d1e1=_0x4adfe0;if(!SceneManager[_0x36d1e1(0xcfa)]())return;if(!$gameSystem[_0x36d1e1(0x1bc)]())return;VisuMZ[_0x36d1e1(0x360)](_0x50b416,_0x50b416);const _0x515dd3=VisuMZ[_0x36d1e1(0x35a)](_0x50b416[_0x36d1e1(0x114)]),_0x444367=_0x50b416['FaceAway'];for(const _0x3478a5 of _0x515dd3){if(!_0x3478a5)continue;const _0x2277c1=_0x50b416[_0x36d1e1(0x362)](_0x3478a5)||{'x':0x0,'y':0x0};let _0x469895=_0x2277c1['x'],_0xfcf0f1=_0x2277c1['y'];_0x3478a5[_0x36d1e1(0x944)](Math['round'](_0x469895),Math['round'](_0xfcf0f1),!!_0x444367);}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0xac4),_0x197982=>{const _0x229d20=_0x4adfe0;if(!SceneManager[_0x229d20(0xcfa)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x229d20(0x360)](_0x197982,_0x197982);const _0x195c5e=VisuMZ['CreateActionSequenceTargets'](_0x197982[_0x229d20(0x114)]);let _0x42dac1=_0x197982[_0x229d20(0x351)];const _0x5bf64b=_0x197982[_0x229d20(0xc76)];for(const _0x46c225 of _0x195c5e){if(!_0x46c225)continue;let _0x34c333=_0x46c225[_0x229d20(0xc66)]()[_0x229d20(0x49e)],_0x3d5d32=_0x46c225['battler']()[_0x229d20(0x984)];if(_0x42dac1[_0x229d20(0x634)](/home/i))_0x34c333=_0x46c225[_0x229d20(0xc66)]()[_0x229d20(0xc0d)],_0x3d5d32=_0x46c225['battler']()['_homeY'];else{if(_0x42dac1[_0x229d20(0x634)](/center/i))_0x34c333=Graphics[_0x229d20(0xcc7)]/0x2,_0x3d5d32=Graphics[_0x229d20(0x468)]/0x2;else _0x42dac1[_0x229d20(0x634)](/point (\d+), (\d+)/i)&&(_0x34c333=Number(RegExp['$1']),_0x3d5d32=Number(RegExp['$2']));}_0x46c225[_0x229d20(0x944)](Math[_0x229d20(0xb95)](_0x34c333),Math[_0x229d20(0xb95)](_0x3d5d32),!!_0x5bf64b);}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x199),_0x23dc19=>{const _0x9975e7=_0x4adfe0;if(!SceneManager[_0x9975e7(0xcfa)]())return;if(!$gameSystem[_0x9975e7(0x1bc)]())return;VisuMZ[_0x9975e7(0x360)](_0x23dc19,_0x23dc19);const _0xb117c2=VisuMZ['CreateActionSequenceTargets'](_0x23dc19[_0x9975e7(0x49d)]),_0x2f1bef=VisuMZ[_0x9975e7(0x35a)](_0x23dc19[_0x9975e7(0xb41)]),_0x3bb3df=_0x2f1bef[_0x9975e7(0x2f7)](_0x19aaa3=>_0x19aaa3&&_0x19aaa3[_0x9975e7(0xc66)]()?_0x19aaa3[_0x9975e7(0xc66)]()[_0x9975e7(0x49e)]:0x0)/(_0x2f1bef['length']||0x1),_0x34c1d4=_0x2f1bef[_0x9975e7(0x2f7)](_0x4582de=>_0x4582de&&_0x4582de[_0x9975e7(0xc66)]()?_0x4582de['battler']()[_0x9975e7(0x984)]:0x0)/(_0x2f1bef['length']||0x1),_0x7294f9=_0x23dc19[_0x9975e7(0xc76)];for(const _0x5f23e2 of _0xb117c2){if('sPzLD'!=='sPzLD')_0x428dee[_0x9975e7(0x2ae)]=_0x364127(_0x1d723a['$1'])[_0x9975e7(0xc1b)]()['trim']();else{if(!_0x5f23e2)continue;_0x5f23e2[_0x9975e7(0x944)](Math[_0x9975e7(0xb95)](_0x3bb3df),Math[_0x9975e7(0xb95)](_0x34c1d4),!!_0x7294f9);}}}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x838),_0x46cbd2=>{const _0x355579=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x355579(0x360)](_0x46cbd2,_0x46cbd2);const _0xc46e87=$gameTemp[_0x355579(0x781)](),_0x5fdb8a=VisuMZ[_0x355579(0x35a)](_0x46cbd2[_0x355579(0x114)]),_0x24bbf4=_0x46cbd2[_0x355579(0x21c)],_0x586bbd=_0x46cbd2[_0x355579(0x96d)],_0x272973=_0x46cbd2[_0x355579(0xc6d)],_0x1b7035=_0x46cbd2[_0x355579(0x9fb)];if(!_0xc46e87)return;for(const _0x2ca2d4 of _0x5fdb8a){if(!_0x2ca2d4)continue;_0x2ca2d4[_0x355579(0x856)](_0x24bbf4,_0x586bbd,_0x272973);}if(_0x1b7035)_0xc46e87[_0x355579(0x98c)](_0x355579(0x20b));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x5f1),_0x33ba92=>{const _0x5f2106=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x33ba92,_0x33ba92);const _0x28ae73=$gameTemp[_0x5f2106(0x781)]();if(!_0x28ae73)return;const _0x246b75=VisuMZ[_0x5f2106(0x35a)](_0x33ba92['Targets']);for(const _0x306158 of _0x246b75){if(!_0x306158)continue;_0x306158[_0x5f2106(0x930)]();}BattleManager[_0x5f2106(0x48b)]&&BattleManager[_0x5f2106(0x48b)]['performActionEnd']();if(_0x33ba92[_0x5f2106(0xc03)])_0x28ae73['setWaitMode']('battleMove');}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x7bf),_0x168a59=>{const _0x378681=_0x4adfe0;if(!SceneManager[_0x378681(0xcfa)]())return;VisuMZ[_0x378681(0x360)](_0x168a59,_0x168a59);const _0x80b47e=$gameTemp[_0x378681(0x781)](),_0x4facfb=VisuMZ[_0x378681(0x35a)](_0x168a59[_0x378681(0x114)]),_0x5a2093=_0x168a59[_0x378681(0x21c)],_0xa00c28=_0x168a59[_0x378681(0x96d)],_0x5bd659=_0x168a59[_0x378681(0x2fc)];if(!_0x80b47e)return;for(const _0x37dea3 of _0x4facfb){if('BwmQp'!=='BwmQp')this[_0x378681(0x678)](_0x3aaf59,'tp',_0x4aca8f+(_0x1f12e5['TpGaugeOffsetX']||0x0),_0x5c5df7+this[_0x378681(0x9bf)]()*0x2+(_0x4b5779['TpGaugeOffsetY']||0x0));else{if(!_0x37dea3)continue;_0x37dea3[_0x378681(0xb44)](_0x5a2093,_0xa00c28);}}if(_0x5bd659)_0x80b47e['setWaitMode'](_0x378681(0xc86));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xc14),_0x32d2a6=>{const _0x2a7197=_0x4adfe0;if(!SceneManager[_0x2a7197(0xcfa)]())return;if(!$gameSystem[_0x2a7197(0x1bc)]())return;VisuMZ['ConvertParams'](_0x32d2a6,_0x32d2a6);const _0x236e3a=$gameTemp[_0x2a7197(0x781)](),_0x4cce03=VisuMZ[_0x2a7197(0x35a)](_0x32d2a6[_0x2a7197(0x114)]),_0x599baf=_0x32d2a6[_0x2a7197(0xc3f)],_0x3d9fdb=_0x32d2a6['DistanceX'],_0x20d829=_0x32d2a6['DistanceY'],_0x13c83b=_0x32d2a6['Duration'],_0x32056a=_0x32d2a6[_0x2a7197(0x4f0)],_0x53f9e7=_0x32d2a6['EasingType'],_0x3b1d3b=_0x32d2a6[_0x2a7197(0x6a6)],_0x14e405=_0x32d2a6[_0x2a7197(0xc03)];if(!_0x236e3a)return;for(const _0x380791 of _0x4cce03){if(!_0x380791)continue;let _0x35dbd5=_0x3d9fdb,_0x210d4f=_0x20d829;if(_0x599baf[_0x2a7197(0x634)](/horz/i))_0x35dbd5*=_0x380791[_0x2a7197(0x771)]()?-0x1:0x1;if(_0x599baf[_0x2a7197(0x634)](/vert/i))_0x210d4f*=_0x380791[_0x2a7197(0x771)]()?-0x1:0x1;_0x380791[_0x2a7197(0x979)](_0x35dbd5,_0x210d4f,_0x13c83b,_0x32056a,_0x53f9e7),_0x380791[_0x2a7197(0xb04)](_0x3b1d3b);}if(_0x14e405)_0x236e3a['setWaitMode'](_0x2a7197(0x368));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x16a),_0x53b085=>{const _0x856887=_0x4adfe0;if(!SceneManager[_0x856887(0xcfa)]())return;if(!$gameSystem[_0x856887(0x1bc)]())return;VisuMZ[_0x856887(0x360)](_0x53b085,_0x53b085);const _0x21a1b5=$gameTemp['getLastPluginCommandInterpreter'](),_0x3bf8ad=VisuMZ[_0x856887(0x35a)](_0x53b085[_0x856887(0x114)]),_0x2a741a=_0x53b085[_0x856887(0x4c2)],_0x5eda1c=_0x53b085[_0x856887(0x909)],_0x566802=_0x53b085['OffsetY'],_0x1c8269=_0x53b085[_0x856887(0x96d)],_0xa9892d=_0x53b085[_0x856887(0x4f0)],_0x303059=_0x53b085['EasingType'],_0x46d5e8=_0x53b085[_0x856887(0x6a6)],_0x22ef35=_0x53b085[_0x856887(0xc03)];if(!_0x21a1b5)return;for(const _0x521aff of _0x3bf8ad){if(!_0x521aff)continue;const _0x3e5875=_0x53b085[_0x856887(0x3dc)](_0x521aff)||{'x':0x0,'y':0x0};let _0x341303=_0x3e5875['x'],_0x18ff4d=_0x3e5875['y'];if(_0x2a741a['match'](/none/i))_0x341303+=_0x5eda1c,_0x18ff4d+=_0x566802;else{if(_0x2a741a['match'](/horz/i)&&_0x2a741a[_0x856887(0x634)](/vert/i))_0x341303+=_0x521aff[_0x856887(0x771)]()?-_0x5eda1c:_0x5eda1c,_0x18ff4d+=_0x521aff[_0x856887(0x771)]()?-_0x566802:_0x566802;else{if(_0x2a741a['match'](/horz/i))_0x341303+=_0x521aff['isActor']()?-_0x5eda1c:_0x5eda1c,_0x18ff4d+=_0x566802;else{if(_0x2a741a[_0x856887(0x634)](/vert/i)){if(_0x856887(0x15f)===_0x856887(0x990))return this[_0x856887(0x624)](_0x2cb685);else _0x341303+=_0x5eda1c,_0x18ff4d+=_0x521aff[_0x856887(0x771)]()?-_0x566802:_0x566802;}}}}_0x521aff['moveBattlerToPoint'](_0x341303,_0x18ff4d,_0x1c8269,_0xa9892d,_0x303059,-0x1),_0x521aff[_0x856887(0xb04)](_0x46d5e8);}if(_0x22ef35)_0x21a1b5[_0x856887(0x98c)]('battleMove');}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xb5c),_0x217e10=>{const _0x25954d=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x25954d(0x360)](_0x217e10,_0x217e10);const _0x38c205=$gameTemp['getLastPluginCommandInterpreter'](),_0x5d5be5=VisuMZ[_0x25954d(0x35a)](_0x217e10['Targets']),_0xdd282f=_0x217e10[_0x25954d(0x214)],_0x44e266=_0x217e10[_0x25954d(0x4c2)],_0x28d7f2=_0x217e10[_0x25954d(0x909)],_0x369679=_0x217e10[_0x25954d(0x116)],_0x5795cc=_0x217e10[_0x25954d(0x96d)],_0x4e2068=_0x217e10[_0x25954d(0x4f0)],_0x470278=_0x217e10[_0x25954d(0xc6d)],_0x4604f4=_0x217e10[_0x25954d(0x6a6)],_0x6222d8=_0x217e10[_0x25954d(0xc03)];if(!_0x38c205)return;for(const _0x4f92e9 of _0x5d5be5){if(!_0x4f92e9)continue;let _0xb911b2=_0x4f92e9[_0x25954d(0xc66)]()[_0x25954d(0x49e)],_0x3d76db=_0x4f92e9['battler']()[_0x25954d(0x984)];if(_0xdd282f[_0x25954d(0x634)](/home/i))'mpTLo'!=='mpTLo'?(_0x5bd98d['prototype'][_0x25954d(0xb7d)][_0x25954d(0x61e)](this,_0x1af5ad),this[_0x25954d(0xfc)]['x']=-0x1,this[_0x25954d(0x381)][_0x25954d(0xfc)]['x']=-0x1):(_0xb911b2=_0x4f92e9[_0x25954d(0xc66)]()[_0x25954d(0xc0d)],_0x3d76db=_0x4f92e9[_0x25954d(0xc66)]()[_0x25954d(0x5e7)]);else{if(_0xdd282f['match'](/center/i))_0xb911b2=Graphics['boxWidth']/0x2,_0x3d76db=Graphics['boxHeight']/0x2;else{if(_0xdd282f[_0x25954d(0x634)](/point (\d+), (\d+)/i)){if(_0x25954d(0xb4b)!==_0x25954d(0xb4b)){if(!this[_0x25954d(0x418)]())return;if(this['_targetFloatHeight']===_0xe5eb3)return;this[_0x25954d(0x79b)]=_0xe75fdc,this[_0x25954d(0xa8d)]=_0x51a73f,this[_0x25954d(0x19a)]=_0x22b18f,this['_floatEasing']=_0x22f548||_0x25954d(0x525);if(_0xe3dc33<=0x0)this['_floatHeight']=_0x1ff3ae;}else _0xb911b2=Number(RegExp['$1']),_0x3d76db=Number(RegExp['$2']);}}}if(_0x44e266[_0x25954d(0x634)](/none/i)){if(_0x25954d(0x954)===_0x25954d(0x39e)){this[_0x25954d(0xa78)][_0x25954d(0xb6e)](_0x5bc2e8);if(_0x593ac0===this['_subject'])return;const _0x16ff7c=_0x4715d3['makeDeepCopy'](_0x5e0f25[_0x25954d(0x144)]());this['_forcedBattlers'][_0x25954d(0x98e)]([_0xe46c76,_0x16ff7c]);}else _0xb911b2+=_0x28d7f2,_0x3d76db+=_0x369679;}else{if(_0x44e266[_0x25954d(0x634)](/horz/i)&&_0x44e266['match'](/vert/i))_0xb911b2+=_0x4f92e9[_0x25954d(0x771)]()?-_0x28d7f2:_0x28d7f2,_0x3d76db+=_0x4f92e9['isActor']()?-_0x369679:_0x369679;else{if(_0x44e266[_0x25954d(0x634)](/horz/i))_0xb911b2+=_0x4f92e9[_0x25954d(0x771)]()?-_0x28d7f2:_0x28d7f2,_0x3d76db+=_0x369679;else{if(_0x44e266[_0x25954d(0x634)](/vert/i)){if('IixMM'==='IixMM')_0xb911b2+=_0x28d7f2,_0x3d76db+=_0x4f92e9['isActor']()?-_0x369679:_0x369679;else return _0xe2e463[_0x25954d(0xa98)][_0x25954d(0x23e)][_0x25954d(0x61e)](this);}}}}_0x4f92e9['moveBattlerToPoint'](_0xb911b2,_0x3d76db,_0x5795cc,_0x4e2068,_0x470278,-0x1),_0x4f92e9[_0x25954d(0xb04)](_0x4604f4);}if(_0x6222d8)_0x38c205['setWaitMode']('battleMove');}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x7eb),_0x2c0dda=>{const _0x2941e3=_0x4adfe0;if(!SceneManager[_0x2941e3(0xcfa)]())return;if(!$gameSystem[_0x2941e3(0x1bc)]())return;VisuMZ[_0x2941e3(0x360)](_0x2c0dda,_0x2c0dda);const _0x2b46d9=$gameTemp[_0x2941e3(0x781)](),_0x1b949e=VisuMZ[_0x2941e3(0x35a)](_0x2c0dda[_0x2941e3(0x49d)]),_0x2859c4=VisuMZ['CreateActionSequenceTargets'](_0x2c0dda[_0x2941e3(0xb41)]),_0x10130e=_0x2c0dda[_0x2941e3(0xbb0)];let _0x3a4de2=_0x2c0dda[_0x2941e3(0x3c6)];const _0x3b244e=_0x2c0dda[_0x2941e3(0x4c2)],_0x3e3578=_0x2c0dda[_0x2941e3(0x909)],_0x1fa78e=_0x2c0dda[_0x2941e3(0x116)],_0x28e7ca=_0x2c0dda[_0x2941e3(0x96d)],_0x4b049e=_0x2c0dda[_0x2941e3(0x4f0)],_0x23aa65=_0x2c0dda[_0x2941e3(0xc6d)],_0x55e470=_0x2c0dda[_0x2941e3(0x6a6)],_0x50ad88=_0x2c0dda['WaitForMovement'],_0x58fe69=Math[_0x2941e3(0x258)](..._0x2859c4[_0x2941e3(0x2f7)](_0x410deb=>_0x410deb[_0x2941e3(0xc66)]()[_0x2941e3(0x49e)]-_0x410deb[_0x2941e3(0xc66)]()['mainSpriteWidth']()/0x2)),_0x1b4a29=Math[_0x2941e3(0x7a0)](..._0x2859c4['map'](_0x1d7c4b=>_0x1d7c4b[_0x2941e3(0xc66)]()[_0x2941e3(0x49e)]+_0x1d7c4b[_0x2941e3(0xc66)]()['mainSpriteWidth']()/0x2)),_0x5d579d=Math[_0x2941e3(0x258)](..._0x2859c4['map'](_0x25b0a3=>_0x25b0a3['battler']()[_0x2941e3(0x984)]-_0x25b0a3[_0x2941e3(0xc66)]()[_0x2941e3(0xabd)]())),_0x1725e8=Math[_0x2941e3(0x7a0)](..._0x2859c4[_0x2941e3(0x2f7)](_0x4ade8a=>_0x4ade8a[_0x2941e3(0xc66)]()[_0x2941e3(0x984)])),_0x5479f6=_0x2859c4[_0x2941e3(0xcd9)](_0x407573=>_0x407573['isActor']())['length'],_0x309753=_0x2859c4['filter'](_0x238584=>_0x238584['isEnemy']())[_0x2941e3(0xa59)];let _0x33030a=0x0,_0x1b6734=0x0;if(_0x10130e['match'](/front/i)){if(_0x2941e3(0x260)==='mxTmW')_0x33030a=_0x5479f6>=_0x309753?_0x58fe69:_0x1b4a29;else for(const _0x14033e of this['members']()){if(_0x14033e)_0x14033e[_0x2941e3(0x469)](_0x377e5f);}}else{if(_0x10130e[_0x2941e3(0x634)](/middle/i))_0x33030a=(_0x58fe69+_0x1b4a29)/0x2,_0x3a4de2=-0x1;else{if(_0x10130e[_0x2941e3(0x634)](/back/i)){if(_0x2941e3(0xa03)!==_0x2941e3(0x92a))_0x33030a=_0x5479f6>=_0x309753?_0x1b4a29:_0x58fe69;else{if(!this[_0x2941e3(0x33e)][_0x2941e3(0xa3b)](_0x93a62f['id']))return![];}}}}if(_0x10130e['match'](/head/i))_0x2941e3(0x180)!=='sZeJy'?_0x1b6734=_0x5d579d:_0x12860e[_0x2941e3(0x358)](_0x57d1fc['Text']||'',_0xb9d43a[_0x2941e3(0x2ee)]||0x0);else{if(_0x10130e[_0x2941e3(0x634)](/center/i))_0x2941e3(0x350)===_0x2941e3(0x92d)?this[_0x2941e3(0x492)]=this[_0x2941e3(0x492)]||[]:_0x1b6734=(_0x5d579d+_0x1725e8)/0x2;else _0x10130e[_0x2941e3(0x634)](/base/i)&&('NfpNf'!==_0x2941e3(0x9a4)?_0x1b6734=_0x1725e8:_0x4b4a6a=_0x2941e3(0x1a3));}if(!_0x2b46d9)return;for(const _0x447923 of _0x1b949e){if(!_0x447923)continue;let _0x444719=_0x33030a,_0x204adb=_0x1b6734;if(_0x3b244e[_0x2941e3(0x634)](/none/i)){if('chMoJ'===_0x2941e3(0x81b)){if(_0x59d9a1===_0xbfa98c[_0x2941e3(0xcf8)]())return![];}else _0x444719+=_0x3e3578,_0x204adb+=_0x1fa78e;}else{if(_0x3b244e[_0x2941e3(0x634)](/horz/i)&&_0x3b244e['match'](/vert/i)){if(_0x2941e3(0x78b)===_0x2941e3(0x18d))return!![];else _0x444719+=_0x447923['isActor']()?-_0x3e3578:_0x3e3578,_0x204adb+=_0x447923[_0x2941e3(0x771)]()?-_0x1fa78e:_0x1fa78e;}else{if(_0x3b244e[_0x2941e3(0x634)](/horz/i))_0x444719+=_0x447923[_0x2941e3(0x771)]()?-_0x3e3578:_0x3e3578,_0x204adb+=_0x1fa78e;else _0x3b244e['match'](/vert/i)&&(_0x444719+=_0x3e3578,_0x204adb+=_0x447923['isActor']()?-_0x1fa78e:_0x1fa78e);}}_0x447923[_0x2941e3(0x9e5)](_0x444719,_0x204adb,_0x28e7ca,_0x4b049e,_0x23aa65,_0x3a4de2),_0x447923['requestMotion'](_0x55e470);}if(_0x50ad88)_0x2b46d9[_0x2941e3(0x98c)](_0x2941e3(0x368));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Movement_Opacity',_0xb11855=>{const _0x294a15=_0x4adfe0;if(!SceneManager[_0x294a15(0xcfa)]())return;VisuMZ['ConvertParams'](_0xb11855,_0xb11855);const _0x2f5ca0=$gameTemp[_0x294a15(0x781)](),_0x5b519f=VisuMZ[_0x294a15(0x35a)](_0xb11855[_0x294a15(0x114)]),_0x42b6d3=_0xb11855[_0x294a15(0x74e)],_0x689d8=_0xb11855['Duration'],_0xd1453c=_0xb11855['EasingType'],_0x33fe38=_0xb11855[_0x294a15(0x878)];if(!_0x2f5ca0)return;for(const _0x22f260 of _0x5b519f){if(_0x294a15(0x88f)!==_0x294a15(0x589)){if(!_0x22f260)continue;_0x22f260[_0x294a15(0x953)](_0x42b6d3,_0x689d8,_0xd1453c);}else{const _0x54e86c=this[_0x294a15(0x6e8)]()[_0x294a15(0x66d)]()[_0x294a15(0xb6e)](this['subject']());if(_0x54e86c[_0x294a15(0xa59)]>0x0){_0x54e86c[_0x294a15(0x712)]((_0x1fbfa7,_0x12e017)=>_0x1fbfa7[_0x294a15(0x576)]()-_0x12e017[_0x294a15(0x576)]());while(_0x51b8cb[_0x294a15(0x5d0)](this[_0x294a15(0x92f)]())){const _0x34dfd3=_0x573a27['indexOf'](this[_0x294a15(0x92f)]());_0x3669c3[_0x34dfd3]=_0x54e86c[_0x3a373c[_0x294a15(0xc05)](_0x54e86c[_0x294a15(0xa59)])];}}else _0x1691b2[_0x294a15(0xb6e)](this[_0x294a15(0x92f)]());}}if(_0x33fe38)_0x2f5ca0[_0x294a15(0x98c)](_0x294a15(0xa02));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],'ActSeq_Movement_Scale',_0x25c57e=>{const _0x3de410=_0x4adfe0;if(!SceneManager[_0x3de410(0xcfa)]())return;VisuMZ['ConvertParams'](_0x25c57e,_0x25c57e);const _0x50c0bd=$gameTemp[_0x3de410(0x781)](),_0x246480=VisuMZ['CreateActionSequenceTargets'](_0x25c57e[_0x3de410(0x114)]),_0x33facc=_0x25c57e[_0x3de410(0x819)],_0x27baa0=_0x25c57e[_0x3de410(0x451)],_0x206424=_0x25c57e['Duration'],_0x3f74e6=_0x25c57e[_0x3de410(0xc6d)],_0x48e800=_0x25c57e[_0x3de410(0xcbc)];if(!_0x50c0bd)return;for(const _0x42dba5 of _0x246480){if(!_0x42dba5)continue;_0x42dba5[_0x3de410(0x255)](_0x33facc,_0x27baa0,_0x206424,_0x3f74e6);}if(_0x48e800)_0x50c0bd[_0x3de410(0x98c)]('battleGrow');}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x568),_0x5df765=>{const _0x48b2ba=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x48b2ba(0x360)](_0x5df765,_0x5df765);const _0x34a09e=$gameTemp[_0x48b2ba(0x781)](),_0x503561=VisuMZ['CreateActionSequenceTargets'](_0x5df765[_0x48b2ba(0x114)]),_0x273926=_0x5df765[_0x48b2ba(0x9a9)],_0x388ea6=_0x5df765[_0x48b2ba(0xb3d)],_0xe688a1=_0x5df765[_0x48b2ba(0x96d)],_0x5f205e=_0x5df765[_0x48b2ba(0xc6d)],_0x400871=_0x5df765[_0x48b2ba(0xfa)];if(!_0x34a09e)return;for(const _0x324b7d of _0x503561){if(_0x48b2ba(0x4f7)===_0x48b2ba(0xb14))return _0x3974ba(_0x4a57a1['$1'])*0.01;else{if(!_0x324b7d)continue;_0x324b7d['skewBattler'](_0x273926,_0x388ea6,_0xe688a1,_0x5f205e);}}if(_0x400871)_0x34a09e[_0x48b2ba(0x98c)](_0x48b2ba(0x2cc));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x62e),_0x1a601e=>{const _0x73b209=_0x4adfe0;if(!SceneManager[_0x73b209(0xcfa)]())return;VisuMZ[_0x73b209(0x360)](_0x1a601e,_0x1a601e);const _0x36b220=$gameTemp[_0x73b209(0x781)](),_0x568b5d=VisuMZ['CreateActionSequenceTargets'](_0x1a601e['Targets']),_0x4712e2=_0x1a601e[_0x73b209(0x7c9)],_0x568a02=_0x1a601e[_0x73b209(0x96d)],_0x15580f=_0x1a601e['EasingType'],_0x2bb6af=_0x1a601e[_0x73b209(0x72a)],_0x27f865=_0x1a601e[_0x73b209(0x9a5)];if(!_0x36b220)return;for(const _0x551cce of _0x568b5d){if(!_0x551cce)continue;_0x551cce[_0x73b209(0xcbd)](_0x4712e2,_0x568a02,_0x15580f,_0x2bb6af);}if(_0x27f865)_0x36b220['setWaitMode'](_0x73b209(0x4c1));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xa50),_0xa02d62=>{const _0x5a589e=_0x4adfe0;if(!SceneManager[_0x5a589e(0xcfa)]())return;const _0x2b16a3=$gameTemp[_0x5a589e(0x781)]();if(!_0x2b16a3)return;_0x2b16a3['setWaitMode'](_0x5a589e(0x20b));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xb54),_0x4723fb=>{const _0x488c19=_0x4adfe0;if(!SceneManager[_0x488c19(0xcfa)]())return;const _0x4ffd4d=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4ffd4d)return;_0x4ffd4d[_0x488c19(0x98c)](_0x488c19(0xc86));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x1c8),_0x37d0a6=>{const _0x40a223=_0x4adfe0;if(!SceneManager[_0x40a223(0xcfa)]())return;const _0x4052d0=$gameTemp[_0x40a223(0x781)]();if(!_0x4052d0)return;_0x4052d0[_0x40a223(0x98c)](_0x40a223(0x368));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x232),_0x204de5=>{const _0x5a0836=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;const _0x447746=$gameTemp[_0x5a0836(0x781)]();if(!_0x447746)return;_0x447746['setWaitMode']('battleOpacity');}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x5bb),_0x273157=>{const _0x347331=_0x4adfe0;if(!SceneManager[_0x347331(0xcfa)]())return;const _0x5214ec=$gameTemp[_0x347331(0x781)]();if(!_0x5214ec)return;_0x5214ec[_0x347331(0x98c)](_0x347331(0xc3c));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x4d8),_0x13f497=>{const _0x4df12a=_0x4adfe0;if(!SceneManager[_0x4df12a(0xcfa)]())return;const _0x328fbf=$gameTemp[_0x4df12a(0x781)]();if(!_0x328fbf)return;_0x328fbf[_0x4df12a(0x98c)](_0x4df12a(0x2cc));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xced),_0x8c15c=>{const _0x534cd4=_0x4adfe0;if(!SceneManager[_0x534cd4(0xcfa)]())return;const _0x1e70c7=$gameTemp[_0x534cd4(0x781)]();if(!_0x1e70c7)return;_0x1e70c7[_0x534cd4(0x98c)](_0x534cd4(0x4c1));}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x897),_0x1d75b2=>{const _0xc9a82=_0x4adfe0;if(!SceneManager[_0xc9a82(0xcfa)]())return;if(!Imported[_0xc9a82(0xb51)])return;VisuMZ[_0xc9a82(0x360)](_0x1d75b2,_0x1d75b2);const _0x431bcb=$gameTemp[_0xc9a82(0x781)](),_0x5803c0=_0x1d75b2[_0xc9a82(0xcc6)];if(!_0x431bcb)return;const _0x5b7ffd=BattleManager[_0xc9a82(0x898)];if(!_0x5b7ffd)return;_0x5b7ffd[_0xc9a82(0xf3)](_0x1d75b2);if(_0x5803c0)_0x431bcb[_0xc9a82(0x98c)](_0xc9a82(0x2c3));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xa20),_0x465d75=>{const _0x2c3f2b=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x2c3f2b(0x360)](_0x465d75,_0x465d75);const _0x48aa0e=$gameTemp[_0x2c3f2b(0x781)](),_0xee5a57=_0x465d75[_0x2c3f2b(0xcc6)];if(!_0x48aa0e)return;const _0x13b894=BattleManager[_0x2c3f2b(0x898)];if(!_0x13b894)return;_0x13b894[_0x2c3f2b(0xf3)](_0x465d75);if(_0xee5a57)_0x48aa0e[_0x2c3f2b(0x98c)](_0x2c3f2b(0x2c3));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x8f9),_0x1c89e8=>{const _0x3ac9fd=_0x4adfe0;if(!SceneManager[_0x3ac9fd(0xcfa)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x3ac9fd(0x360)](_0x1c89e8,_0x1c89e8);const _0x405105=$gameTemp[_0x3ac9fd(0x781)](),_0x38acab=_0x1c89e8[_0x3ac9fd(0xcc6)];if(!_0x405105)return;const _0x3aea8f=BattleManager[_0x3ac9fd(0x898)];if(!_0x3aea8f)return;_0x3aea8f[_0x3ac9fd(0xf3)](_0x1c89e8);if(_0x38acab)_0x405105['setWaitMode'](_0x3ac9fd(0x2c3));}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xbf4),_0x5daab2=>{const _0x2112f2=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2112f2(0x3cb)])return;VisuMZ[_0x2112f2(0x360)](_0x5daab2,_0x5daab2);const _0x32cc5a=$gameTemp['getLastPluginCommandInterpreter'](),_0x1ea8cf=_0x5daab2[_0x2112f2(0xfa)];if(!_0x32cc5a)return;$gameScreen['setBattleSkew'](_0x5daab2[_0x2112f2(0x9a9)],_0x5daab2['SkewY'],_0x5daab2[_0x2112f2(0x96d)],_0x5daab2[_0x2112f2(0xc6d)]);if(_0x1ea8cf)_0x32cc5a[_0x2112f2(0x98c)]('battleSkew');}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x1da),_0x4cdae3=>{const _0x345b80=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x345b80(0x3cb)])return;VisuMZ[_0x345b80(0x360)](_0x4cdae3,_0x4cdae3);const _0x32b60e=$gameTemp[_0x345b80(0x781)](),_0x83e8c5=_0x4cdae3['WaitForSkew'];if(!_0x32b60e)return;$gameScreen[_0x345b80(0x81e)](0x0,0x0,_0x4cdae3[_0x345b80(0x96d)],_0x4cdae3['EasingType']);if(_0x83e8c5)_0x32b60e[_0x345b80(0x98c)](_0x345b80(0xb7b));}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xbf8),_0x286607=>{const _0x2eaa80=_0x4adfe0;if(!SceneManager[_0x2eaa80(0xcfa)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x3761c3=$gameTemp[_0x2eaa80(0x781)]();if(!_0x3761c3)return;_0x3761c3[_0x2eaa80(0x98c)](_0x2eaa80(0xb7b));}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x437),_0x20e8a6=>{const _0x328ca5=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x328ca5(0x360)](_0x20e8a6,_0x20e8a6);const _0x203fe9=$gameTemp[_0x328ca5(0x781)](),_0x3946ac=_0x20e8a6[_0x328ca5(0x83e)],_0x585af6=_0x20e8a6[_0x328ca5(0xc08)];if(!_0x203fe9)return;BattleManager[_0x328ca5(0x79f)]=_0x3946ac,BattleManager['_target']=BattleManager['_allTargets']?BattleManager[_0x328ca5(0x1a7)][BattleManager[_0x328ca5(0x79f)]]||null:null;if(BattleManager[_0x328ca5(0x48f)]&&_0x585af6[_0x328ca5(0xb24)]()[_0x328ca5(0xb83)]()!==_0x328ca5(0x319)){if(_0x328ca5(0x263)===_0x328ca5(0x263))_0x203fe9[_0x328ca5(0x552)]([_0x585af6]);else return _0x31a335[_0x328ca5(0xce8)]();}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xc39),_0x3c5c39=>{const _0x2b65af=_0x4adfe0;if(!SceneManager[_0x2b65af(0xcfa)]())return;VisuMZ[_0x2b65af(0x360)](_0x3c5c39,_0x3c5c39);const _0x19e8ac=$gameTemp[_0x2b65af(0x781)](),_0x78dfff=_0x3c5c39[_0x2b65af(0xc08)];if(!_0x19e8ac)return;BattleManager['_targetIndex']++,BattleManager[_0x2b65af(0x48f)]=BattleManager[_0x2b65af(0x1a7)][BattleManager[_0x2b65af(0x79f)]]||null,BattleManager[_0x2b65af(0x48f)]&&_0x78dfff[_0x2b65af(0xb24)]()[_0x2b65af(0xb83)]()!==_0x2b65af(0x319)&&_0x19e8ac[_0x2b65af(0x552)]([_0x78dfff]);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x1be),_0x252ef5=>{const _0x439cb6=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x439cb6(0x360)](_0x252ef5,_0x252ef5);const _0x57705b=$gameTemp['getLastPluginCommandInterpreter'](),_0x79fac7=_0x252ef5[_0x439cb6(0xc08)];if(!_0x57705b)return;BattleManager['_targetIndex']--,BattleManager[_0x439cb6(0x48f)]=BattleManager[_0x439cb6(0x1a7)][BattleManager[_0x439cb6(0x79f)]]||null,BattleManager[_0x439cb6(0x48f)]&&_0x79fac7['toUpperCase']()['trim']()!==_0x439cb6(0x319)&&_0x57705b[_0x439cb6(0x552)]([_0x79fac7]);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x961),_0x4f5ce3=>{const _0xd78cf5=_0x4adfe0;if(!SceneManager[_0xd78cf5(0xcfa)]())return;VisuMZ[_0xd78cf5(0x360)](_0x4f5ce3,_0x4f5ce3);const _0x4fdc8f=$gameTemp[_0xd78cf5(0x781)](),_0xd2a2c1=_0x4f5ce3[_0xd78cf5(0x209)],_0x9b45f3=_0x4f5ce3[_0xd78cf5(0xc08)];if(!_0x4fdc8f)return;const _0x12b020=BattleManager[_0xd78cf5(0x79f)];for(;;){if('imTeI'===_0xd78cf5(0x269)){BattleManager['_targetIndex']=Math[_0xd78cf5(0xc05)](BattleManager['_allTargets']['length']);if(!_0xd2a2c1)break;if(BattleManager['_targetIndex']!==_0x12b020)break;if(BattleManager[_0xd78cf5(0x1a7)][_0xd78cf5(0xa59)]<=0x1){if(_0xd78cf5(0xbcf)===_0xd78cf5(0x12d))this[_0xd78cf5(0x401)][_0xd78cf5(0xa6f)](this[_0xd78cf5(0xa2b)]),this[_0xd78cf5(0xaec)]['setHelpWindow'](this['_helpWindow']);else{BattleManager[_0xd78cf5(0x79f)]=0x0;break;}}}else _0x4e5c55[_0xd78cf5(0xa98)]['Sprite_Actor_updateBitmap'][_0xd78cf5(0x61e)](this),this[_0xd78cf5(0xc9e)]&&this['_mainSprite'][_0xd78cf5(0x932)]&&this[_0xd78cf5(0x26e)]&&(this[_0xd78cf5(0xc9e)][_0xd78cf5(0x932)]['smooth']!==this['_battler'][_0xd78cf5(0x407)]()&&(this[_0xd78cf5(0xc9e)][_0xd78cf5(0x932)][_0xd78cf5(0x656)]=this['_battler'][_0xd78cf5(0x407)]()));}BattleManager[_0xd78cf5(0x48f)]=BattleManager[_0xd78cf5(0x1a7)][BattleManager[_0xd78cf5(0x79f)]]||null,BattleManager[_0xd78cf5(0x48f)]&&_0x9b45f3[_0xd78cf5(0xb24)]()['trim']()!=='UNTITLED'&&_0x4fdc8f[_0xd78cf5(0x552)]([_0x9b45f3]);}),PluginManager[_0x4adfe0(0xa26)](pluginData['name'],_0x4adfe0(0x243),_0x9a9483=>{const _0x4badee=_0x4adfe0;if(!SceneManager[_0x4badee(0xcfa)]())return;if(!Imported[_0x4badee(0xbfc)])return;if(!ConfigManager[_0x4badee(0xa1d)])return;VisuMZ['ConvertParams'](_0x9a9483,_0x9a9483);const _0xca086e=VisuMZ[_0x4badee(0x35a)](_0x9a9483[_0x4badee(0x114)]);let _0x455df7=_0x9a9483[_0x4badee(0x885)]||'';for(const _0x1d3f8b of _0xca086e){if(_0x4badee(0x563)==='sdxHI')this[_0x4badee(0xc9e)]=new _0x422016(),this['_mainSprite'][_0x4badee(0x893)]['x']=0.5,this[_0x4badee(0xc9e)][_0x4badee(0x893)]['y']=0x1,this[_0x4badee(0x607)](this[_0x4badee(0xc9e)]),this[_0x4badee(0x3f8)]();else{if(!_0x1d3f8b)continue;_0x1d3f8b[_0x4badee(0x99c)](_0x455df7);}}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xbd2),_0x84d0e2=>{const _0x5d6f89=_0x4adfe0;if(!SceneManager[_0x5d6f89(0xcfa)]())return;if(!Imported[_0x5d6f89(0xbfc)])return;if(!ConfigManager[_0x5d6f89(0xa1d)])return;VisuMZ[_0x5d6f89(0x360)](_0x84d0e2,_0x84d0e2);const _0xe6ca53=VisuMZ[_0x5d6f89(0x35a)](_0x84d0e2[_0x5d6f89(0x114)]);let _0x4a6057=(_0x84d0e2[_0x5d6f89(0xba9)]||'')+(_0x84d0e2['Letter']||'');for(const _0x51eb81 of _0xe6ca53){if(!_0x51eb81)continue;_0x51eb81[_0x5d6f89(0x99c)](_0x4a6057);}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Weapon_ClearActiveWeapon',_0x39744e=>{const _0x576e80=_0x4adfe0;if(!SceneManager[_0x576e80(0xcfa)]())return;VisuMZ[_0x576e80(0x360)](_0x39744e,_0x39744e);const _0x42c7b1=VisuMZ['CreateActionSequenceTargets'](_0x39744e[_0x576e80(0x114)]);for(const _0x4e614d of _0x42c7b1){if(!_0x4e614d)continue;if(!_0x4e614d[_0x576e80(0x771)]())continue;_0x4e614d['clearActiveWeaponSlot']();}}),PluginManager['registerCommand'](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x524),_0x221b9f=>{const _0x30582e=_0x4adfe0;if(!SceneManager[_0x30582e(0xcfa)]())return;VisuMZ['ConvertParams'](_0x221b9f,_0x221b9f);const _0x158fda=$gameTemp[_0x30582e(0x781)]();let _0x4d89c1=![];const _0x59ac3a=_0x221b9f[_0x30582e(0xc08)],_0x42ab35=VisuMZ['CreateActionSequenceTargets'](_0x221b9f['Targets']);for(const _0x962a69 of _0x42ab35){if(!_0x962a69)continue;if(!_0x962a69[_0x30582e(0x771)]())continue;_0x962a69[_0x30582e(0x63e)]();if(_0x962a69[_0x30582e(0x37d)]()[_0x30582e(0xa59)]>0x0){if(_0x30582e(0x3b2)===_0x30582e(0x796)){_0x585b64[_0x30582e(0x6ec)][_0x30582e(0x1c7)][_0x30582e(0x61e)](this);if(this['_commandNameWindow'])this[_0x30582e(0x606)]();}else _0x4d89c1=!![];}else _0x962a69[_0x30582e(0xabf)]();}_0x4d89c1&&_0x59ac3a[_0x30582e(0xb24)]()[_0x30582e(0xb83)]()!==_0x30582e(0x319)&&_0x158fda[_0x30582e(0x552)]([_0x59ac3a]);}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x32c),_0x20aa54=>{const _0x56f380=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x56f380(0x360)](_0x20aa54,_0x20aa54);let _0x218949=_0x20aa54[_0x56f380(0x6d3)];_0x218949--,_0x218949=Math[_0x56f380(0x7a0)](_0x218949,0x0);const _0x4861c1=VisuMZ[_0x56f380(0x35a)](_0x20aa54[_0x56f380(0x114)]);for(const _0x549a3f of _0x4861c1){if(!_0x549a3f)continue;if(!_0x549a3f[_0x56f380(0x771)]())continue;_0x549a3f[_0x56f380(0xbce)](_0x218949);}}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0xadf),_0xbb6deb=>{const _0x11d2e4=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x11d2e4(0x3cb)])return;VisuMZ[_0x11d2e4(0x360)](_0xbb6deb,_0xbb6deb);const _0x197e1f=$gameTemp[_0x11d2e4(0x781)](),_0x2f78de=_0xbb6deb[_0x11d2e4(0x333)];if(!_0x197e1f)return;$gameScreen[_0x11d2e4(0x590)](_0xbb6deb['Scale'],_0xbb6deb['Duration'],_0xbb6deb['EasingType']);if(_0x2f78de)_0x197e1f[_0x11d2e4(0x98c)]('battleZoom');}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],'ActSeq_Zoom_Reset',_0x5966dd=>{const _0x2627f3=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2627f3(0x3cb)])return;VisuMZ['ConvertParams'](_0x5966dd,_0x5966dd);const _0x4509a3=$gameTemp[_0x2627f3(0x781)](),_0x30db66=_0x5966dd[_0x2627f3(0x333)];if(!_0x4509a3)return;$gameScreen[_0x2627f3(0x590)](0x1,_0x5966dd[_0x2627f3(0x96d)],_0x5966dd['EasingType']);if(_0x30db66)_0x4509a3['setWaitMode']('battleZoom');}),PluginManager[_0x4adfe0(0xa26)](pluginData[_0x4adfe0(0xa23)],_0x4adfe0(0x9dc),_0x11233d=>{const _0x1d1699=_0x4adfe0;if(!SceneManager[_0x1d1699(0xcfa)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x36c5d8=$gameTemp[_0x1d1699(0x781)]();if(!_0x36c5d8)return;_0x36c5d8[_0x1d1699(0x98c)](_0x1d1699(0x2c9));}),VisuMZ['BattleCore'][_0x4adfe0(0x27c)]=Scene_Boot['prototype'][_0x4adfe0(0xc48)],Scene_Boot[_0x4adfe0(0x6ec)][_0x4adfe0(0xc48)]=function(){const _0x3a3a2e=_0x4adfe0;this[_0x3a3a2e(0x262)](),this[_0x3a3a2e(0x1dc)](),this[_0x3a3a2e(0xc81)](),this[_0x3a3a2e(0x4f4)](),VisuMZ[_0x3a3a2e(0xa98)]['Scene_Boot_onDatabaseLoaded']['call'](this),this[_0x3a3a2e(0x840)](),this[_0x3a3a2e(0x185)](),this[_0x3a3a2e(0x18b)](),this[_0x3a3a2e(0x72e)]();},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Notetags']=function(){const _0x40e34a=_0x4adfe0;if(VisuMZ[_0x40e34a(0x2e8)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x40e34a(0x41d)](),this[_0x40e34a(0x57f)]();},Scene_Boot['prototype'][_0x4adfe0(0x262)]=function(){const _0x23e457=_0x4adfe0,_0xe60899=$dataSystem['weaponTypes']['length'];for(let _0x429d4f=0x0;_0x429d4f<_0xe60899;_0x429d4f++){const _0x5ce0bd=$dataSystem[_0x23e457(0x8c3)][_0x429d4f];if(_0x5ce0bd)continue;$dataSystem[_0x23e457(0x8c3)][_0x429d4f]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype'][_0x4adfe0(0x1dc)]=function(){const _0x4b0bc4=_0x4adfe0,_0x490c90=VisuMZ['BattleCore'][_0x4b0bc4(0x5bc)];_0x490c90['Damage'][_0x4b0bc4(0x978)]===undefined&&(_0x490c90[_0x4b0bc4(0x676)][_0x4b0bc4(0x978)]=_0x4b0bc4(0xb55));_0x490c90[_0x4b0bc4(0x2e2)][_0x4b0bc4(0xb50)]===undefined&&(_0x490c90[_0x4b0bc4(0x2e2)][_0x4b0bc4(0xb50)]=![]);if(_0x490c90['Enemy'][_0x4b0bc4(0xb50)]===undefined){if('vaace'!=='Cyuor')_0x490c90[_0x4b0bc4(0x30b)][_0x4b0bc4(0xb50)]=!![];else{if(!_0x1d54d2[_0x4b0bc4(0xcfa)]())return!![];const _0x243246=[_0x4b0bc4(0xc51),_0x4b0bc4(0xb23)];return _0x243246['includes'](_0x456c48[_0x4b0bc4(0xa23)]);}}_0x490c90[_0x4b0bc4(0x2e2)]['PrioritySortActive']===undefined&&(_0x490c90['Actor'][_0x4b0bc4(0x2ff)]=![]),_0x490c90[_0x4b0bc4(0x2e2)]['PrioritySortActors']===undefined&&(_0x490c90[_0x4b0bc4(0x2e2)][_0x4b0bc4(0x920)]=!![]);},VisuMZ[_0x4adfe0(0x10e)]={},Scene_Boot[_0x4adfe0(0x6ec)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x480e3f=_0x4adfe0;for(const _0x2b2d4f of VisuMZ[_0x480e3f(0xa98)][_0x480e3f(0x5bc)][_0x480e3f(0x676)][_0x480e3f(0xcb3)]){if(!_0x2b2d4f)continue;const _0x5cdc5f=_0x2b2d4f['Name'][_0x480e3f(0xb24)]()[_0x480e3f(0xb83)]();VisuMZ[_0x480e3f(0x10e)][_0x5cdc5f]=_0x2b2d4f;}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xafd)]={},Scene_Boot[_0x4adfe0(0x6ec)][_0x4adfe0(0x4f4)]=function(){const _0x21654d=_0x4adfe0,_0x127463=VisuMZ[_0x21654d(0xa98)][_0x21654d(0xafd)],_0x56fc6=_0x21654d(0x2d8),_0x7df4c1=[[_0x21654d(0x375),_0x21654d(0x357)],['Post',_0x21654d(0xb6b)]],_0x24c909=[[_0x21654d(0x873),'JS\x20%1APPLY\x20%2'],[_0x21654d(0x3f2),_0x21654d(0xb98)]],_0x2ad4d2=[['',''],['AsUser',_0x21654d(0xbc6)],[_0x21654d(0x630),'AS\x20TARGET']];for(const _0x152dac of _0x24c909){for(const _0x7db618 of _0x2ad4d2){for(const _0xcee72a of _0x7df4c1){const _0x4bb279=_0x152dac[0x0][_0x21654d(0x31d)](_0xcee72a[0x0],_0x7db618[0x0]),_0x5116d3=_0x152dac[0x1]['format'](_0xcee72a[0x1],_0x7db618[0x1])['trim'](),_0x269c8d=new RegExp(_0x56fc6['format'](_0x5116d3),'i');_0x127463[_0x4bb279]=_0x269c8d;}}}const _0x1afb5d=[['%1StartActionJS',_0x21654d(0x5fa)],[_0x21654d(0x73b),'JS\x20%1END\x20ACTION']];for(const _0x278c46 of _0x1afb5d){if('maZfA'==='maZfA')for(const _0x3ff466 of _0x7df4c1){if('rLnAt'===_0x21654d(0x2e7))return 0x1;else{const _0x4475f2=_0x278c46[0x0][_0x21654d(0x31d)](_0x3ff466[0x0]),_0x2f52da=_0x278c46[0x1][_0x21654d(0x31d)](_0x3ff466[0x1]),_0x4bb6d3=new RegExp(_0x56fc6[_0x21654d(0x31d)](_0x2f52da),'i');_0x127463[_0x4475f2]=_0x4bb6d3;}}else{if(this[_0x21654d(0x266)]())this[_0x21654d(0x469)](_0x21654d(0xbea));_0xc408cd[_0x21654d(0xa98)][_0x21654d(0x261)]['call'](this);if(this[_0x21654d(0x266)]())this[_0x21654d(0x469)](_0x21654d(0x183));}}const _0x21c8bc=[[_0x21654d(0xc8a),'JS\x20%1START\x20BATTLE'],[_0x21654d(0x4eb),_0x21654d(0x80c)],[_0x21654d(0x121),_0x21654d(0x59c)],[_0x21654d(0x9b4),'JS\x20BATTLE\x20DEFEAT'],[_0x21654d(0xc17),_0x21654d(0x8e3)],['EscapeFailureJS',_0x21654d(0xc73)],[_0x21654d(0x2a5),_0x21654d(0x980)],[_0x21654d(0xb9b),_0x21654d(0x883)],['%1RegenerateJS','JS\x20%1REGENERATE']];for(const _0xffac5b of _0x21c8bc){for(const _0x2c394f of _0x7df4c1){if('fIiza'!==_0x21654d(0x192)){const _0x32fac3=_0xffac5b[0x0][_0x21654d(0x31d)](_0x2c394f[0x0]),_0x36efde=_0xffac5b[0x1][_0x21654d(0x31d)](_0x2c394f[0x1]),_0x2787b2=new RegExp(_0x56fc6[_0x21654d(0x31d)](_0x36efde),'i');_0x127463[_0x32fac3]=_0x2787b2;}else{if(!_0x22617f[_0x21654d(0xcfa)]())return;const _0x1d11cd=_0x21be18['_logWindow'];_0x1d11cd[_0x21654d(0x465)]();}}}},Scene_Boot[_0x4adfe0(0x6ec)][_0x4adfe0(0x157)]=function(){const _0x458afd=_0x4adfe0,_0xb0d8c8=$dataSkills[_0x458afd(0x197)]($dataItems);for(const _0x389892 of _0xb0d8c8){if('gqufZ'===_0x458afd(0x426))_0x5c34f8[_0x458afd(0xa98)][_0x458afd(0x693)][_0x458afd(0x61e)](this);else{if(!_0x389892)continue;VisuMZ[_0x458afd(0xa98)][_0x458afd(0x7f4)](_0x389892);}}},Scene_Boot['prototype'][_0x4adfe0(0x41d)]=function(){const _0x48176d=_0x4adfe0,_0x40b5e7=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x13c847 of _0x40b5e7){if(!_0x13c847)continue;VisuMZ[_0x48176d(0xa98)][_0x48176d(0x99b)](_0x13c847);}},Scene_Boot[_0x4adfe0(0x6ec)][_0x4adfe0(0x185)]=function(){const _0x324aad=_0x4adfe0,_0xd379bf=VisuMZ[_0x324aad(0xa98)][_0x324aad(0x5bc)][_0x324aad(0x4e9)][_0x324aad(0x34d)],_0x4173d9=[];for(const _0x3fe824 of _0xd379bf){const _0x192a48=$dataTroops[_0x3fe824];if(_0x192a48)_0x4173d9[_0x324aad(0x98e)](JsonEx[_0x324aad(0x1a2)](_0x192a48));}for(const _0x5a1a9d of $dataTroops){if(!_0x5a1a9d)continue;for(const _0x5cbf03 of _0x4173d9){if(_0x324aad(0x760)===_0x324aad(0xcaa))_0x263a9c[_0x324aad(0xea)]();else{if(_0x5cbf03['id']===_0x5a1a9d['id'])continue;_0x5a1a9d['pages']=_0x5a1a9d[_0x324aad(0x5ff)][_0x324aad(0x197)](_0x5cbf03[_0x324aad(0x5ff)]);}}}},Scene_Boot['prototype'][_0x4adfe0(0x18b)]=function(){const _0x22d966=_0x4adfe0,_0x4746fc=VisuMZ[_0x22d966(0xa98)][_0x22d966(0x5bc)][_0x22d966(0x4e9)];if(_0x4746fc[_0x22d966(0x959)]>0x0&&$dataCommonEvents[_0x4746fc[_0x22d966(0x959)]]){const _0x5d550a=$dataCommonEvents[_0x4746fc[_0x22d966(0x959)]],_0x19da74=_0x5d550a[_0x22d966(0xc26)]['length']-0x2,_0x254b4f=_0x5d550a['list'][_0x19da74];if(_0x254b4f&&_0x254b4f[_0x22d966(0x888)]!==0xe6){const _0x3a62e4={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x1f8e81=_0x5d550a[_0x22d966(0xc26)][_0x22d966(0xcf0)]();_0x5d550a[_0x22d966(0xc26)][_0x22d966(0x6f5)](_0x3a62e4),_0x5d550a[_0x22d966(0xc26)][_0x22d966(0x6f5)](_0x1f8e81);}}},Scene_Boot[_0x4adfe0(0x6ec)]['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x49bc47=_0x4adfe0;VisuMZ['BattleCore'][_0x49bc47(0x779)](),VisuMZ[_0x49bc47(0xa98)][_0x49bc47(0x4a0)]($dataSkills),VisuMZ['BattleCore'][_0x49bc47(0x4a0)]($dataItems);},VisuMZ['BattleCore'][_0x4adfe0(0x779)]=function(){const _0x5c5218=_0x4adfe0;VisuMZ[_0x5c5218(0xa98)]['_commonEventKey']={};for(const _0x1bc5da of $dataCommonEvents){if(!_0x1bc5da)continue;if(_0x1bc5da[_0x5c5218(0xa23)]['match'](/\[(.*)\]/i)){let _0x312ca9=String(RegExp['$1'])['replace'](/,/g,'')[_0x5c5218(0xb24)]()[_0x5c5218(0xb83)]();VisuMZ['BattleCore'][_0x5c5218(0x661)][_0x312ca9]=_0x1bc5da['id'];}}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x4a0)]=function(_0x3e55c8){const _0x236e36=_0x4adfe0;for(const _0x2fddf1 of _0x3e55c8){if(!_0x2fddf1)continue;VisuMZ[_0x236e36(0xa98)][_0x236e36(0x27a)](_0x2fddf1);}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x27a)]=function(_0x1e86d3){const _0x3eaf27=_0x4adfe0;if(!_0x1e86d3)return;if(!_0x1e86d3['effects'])return;VisuMZ[_0x3eaf27(0xa98)][_0x3eaf27(0x661)]=VisuMZ[_0x3eaf27(0xa98)][_0x3eaf27(0x661)]||{};const _0x5c5267=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x473b1a=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x470ac0=[];const _0x589489=_0x1e86d3['note']['match'](_0x5c5267);if(_0x589489){if('gaQnA'===_0x3eaf27(0x780))this[_0x3eaf27(0xac6)]++,this['active']=!![];else{for(const _0x2e62c9 of _0x589489){_0x2e62c9[_0x3eaf27(0x634)](_0x5c5267);const _0x485692=String(RegExp['$1'])[_0x3eaf27(0x176)](',')['map'](_0x2ae525=>String(_0x2ae525)[_0x3eaf27(0xb24)]()[_0x3eaf27(0xb83)]());_0x470ac0=_0x470ac0['concat'](_0x485692);}!_0x1e86d3[_0x3eaf27(0x15d)][_0x3eaf27(0x634)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1e86d3[_0x3eaf27(0x15d)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}}if(_0x1e86d3['note'][_0x3eaf27(0x634)](_0x473b1a)){const _0x3f46c3=String(RegExp['$1'])[_0x3eaf27(0x176)](/[\r\n]+/)[_0x3eaf27(0x2f7)](_0x42911e=>String(_0x42911e)[_0x3eaf27(0xb24)]()[_0x3eaf27(0xb83)]());_0x470ac0=_0x470ac0['concat'](_0x3f46c3);if(!_0x1e86d3[_0x3eaf27(0x15d)][_0x3eaf27(0x634)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x3eaf27(0x6c5)!==_0x3eaf27(0x6c5)){if(!_0x59a353[_0x3eaf27(0xcfa)]())return;if(!_0x530daf[_0x3eaf27(0x3cb)])return;_0x1ebfb7[_0x3eaf27(0x360)](_0x15c484,_0x8d7b7a);const _0xb21fac=_0x10d85f[_0x3eaf27(0x781)](),_0x3b4910=_0xaed5af[_0x3eaf27(0x35a)](_0xf2f767[_0x3eaf27(0x114)]),_0x149250=_0x1b9ebc['WaitForCamera'];_0x27c6a6['setBattleCameraTargets'](_0x3b4910,_0x1a1a37[_0x3eaf27(0x96d)],_0x5981b['EasingType']);if(_0x149250)_0xb21fac[_0x3eaf27(0x98c)](_0x3eaf27(0x4c6));}else _0x1e86d3['note']+=_0x3eaf27(0xcee);};}for(const _0x356b04 of _0x470ac0){if(VisuMZ['BattleCore'][_0x3eaf27(0x661)][_0x356b04]){const _0x9d87d9=VisuMZ[_0x3eaf27(0xa98)][_0x3eaf27(0x661)][_0x356b04],_0xb96327={'code':0x2c,'dataId':_0x9d87d9,'value1':0x1,'value2':0x0};_0x1e86d3[_0x3eaf27(0x91f)][_0x3eaf27(0x98e)](_0xb96327);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x564c45=_0x4adfe0,_0xa01782=$dataSkills[_0x564c45(0x197)]($dataItems);for(const _0xc6993a of _0xa01782){if(_0x564c45(0x373)!==_0x564c45(0x373))this[_0x564c45(0x98e)](_0x564c45(0x8f2),_0x1f0134);else{if(!_0xc6993a)continue;VisuMZ[_0x564c45(0xa98)]['Parse_Notetags_Targets'](_0xc6993a);}}},VisuMZ['BattleCore'][_0x4adfe0(0x605)]=VisuMZ[_0x4adfe0(0x605)],VisuMZ[_0x4adfe0(0x605)]=function(_0x25f018){const _0x59adbf=_0x4adfe0;VisuMZ['BattleCore']['ParseActorNotetags']&&VisuMZ['BattleCore'][_0x59adbf(0x605)]['call'](this,_0x25f018),VisuMZ[_0x59adbf(0xa98)][_0x59adbf(0x99b)](_0x25f018);},VisuMZ['BattleCore']['ParseClassNotetags']=VisuMZ['ParseClassNotetags'],VisuMZ['ParseClassNotetags']=function(_0xd9029c){const _0x9267d1=_0x4adfe0;VisuMZ[_0x9267d1(0xa98)]['ParseClassNotetags']&&VisuMZ['BattleCore'][_0x9267d1(0x519)]['call'](this,_0xd9029c),VisuMZ[_0x9267d1(0xa98)]['Parse_Notetags_TraitObjects'](_0xd9029c);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x1e4)]=VisuMZ[_0x4adfe0(0x1e4)],VisuMZ[_0x4adfe0(0x1e4)]=function(_0x5308cb){const _0xd94d8a=_0x4adfe0;VisuMZ['BattleCore'][_0xd94d8a(0x1e4)]&&VisuMZ['BattleCore'][_0xd94d8a(0x1e4)][_0xd94d8a(0x61e)](this,_0x5308cb),VisuMZ[_0xd94d8a(0xa98)][_0xd94d8a(0x7f4)](_0x5308cb),VisuMZ[_0xd94d8a(0xa98)][_0xd94d8a(0xba0)](_0x5308cb);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xaf0)]=VisuMZ['ParseItemNotetags'],VisuMZ['ParseItemNotetags']=function(_0x1b14a2){const _0x80820e=_0x4adfe0;VisuMZ[_0x80820e(0xa98)][_0x80820e(0xaf0)]&&(_0x80820e(0x6a3)===_0x80820e(0x2e0)?this[_0x80820e(0xe8)]=_0x389f3b:VisuMZ[_0x80820e(0xa98)][_0x80820e(0xaf0)]['call'](this,_0x1b14a2)),VisuMZ[_0x80820e(0xa98)][_0x80820e(0x7f4)](_0x1b14a2),VisuMZ[_0x80820e(0xa98)][_0x80820e(0xba0)](_0x1b14a2);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x240)]=VisuMZ[_0x4adfe0(0x240)],VisuMZ[_0x4adfe0(0x240)]=function(_0x42d9b6){const _0x480910=_0x4adfe0;if(VisuMZ['BattleCore'][_0x480910(0x240)]){if(_0x480910(0x13c)!==_0x480910(0x13c)){if(!this['visible'])return![];if(_0x1acd8e[_0x480910(0x1bc)]())return![];const _0x2b246b=_0x3af730[_0x480910(0x726)]['battleLayoutStyle'](),_0x5b5b04=['default',_0x480910(0xc26),'xp',_0x480910(0xcac),_0x480910(0x2a2)];return _0x5b5b04[_0x480910(0x5d0)](_0x2b246b);}else VisuMZ['BattleCore'][_0x480910(0x240)]['call'](this,_0x42d9b6);}VisuMZ[_0x480910(0xa98)][_0x480910(0x99b)](_0x42d9b6);},VisuMZ[_0x4adfe0(0xa98)]['ParseArmorNotetags']=VisuMZ[_0x4adfe0(0x62d)],VisuMZ[_0x4adfe0(0x62d)]=function(_0x26ee05){const _0x593a63=_0x4adfe0;VisuMZ['BattleCore'][_0x593a63(0x62d)]&&VisuMZ['BattleCore'][_0x593a63(0x62d)][_0x593a63(0x61e)](this,_0x26ee05),VisuMZ[_0x593a63(0xa98)][_0x593a63(0x99b)](_0x26ee05);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xb0a)]=VisuMZ[_0x4adfe0(0xb0a)],VisuMZ[_0x4adfe0(0xb0a)]=function(_0x3591ea){const _0x3af4bd=_0x4adfe0;VisuMZ[_0x3af4bd(0xa98)][_0x3af4bd(0xb0a)]&&(_0x3af4bd(0x3cf)===_0x3af4bd(0x3ff)?(this[_0x3af4bd(0x815)]['x']=this[_0x3af4bd(0x1e2)],this[_0x3af4bd(0xbdf)]=this[_0x3af4bd(0x1e2)]*0x3/0x4):VisuMZ[_0x3af4bd(0xa98)][_0x3af4bd(0xb0a)][_0x3af4bd(0x61e)](this,_0x3591ea)),VisuMZ[_0x3af4bd(0xa98)][_0x3af4bd(0x99b)](_0x3591ea);},VisuMZ['BattleCore'][_0x4adfe0(0x4a7)]=VisuMZ[_0x4adfe0(0x4a7)],VisuMZ[_0x4adfe0(0x4a7)]=function(_0x12a328){const _0xc7d8f4=_0x4adfe0;if(VisuMZ[_0xc7d8f4(0xa98)][_0xc7d8f4(0x4a7)]){if(_0xc7d8f4(0x428)===_0xc7d8f4(0x428))VisuMZ[_0xc7d8f4(0xa98)]['ParseStateNotetags'][_0xc7d8f4(0x61e)](this,_0x12a328);else return!![];}VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x12a328);},VisuMZ[_0x4adfe0(0xa98)]['Parse_Notetags_Action']=function(_0x3e652d){const _0x33e15c=_0x4adfe0,_0x5622f3=['PreApplyJS','PostApplyJS','PreDamageJS',_0x33e15c(0x310),'PreStartActionJS','PostStartActionJS',_0x33e15c(0x5a0),_0x33e15c(0x894)];for(const _0xfdd7e1 of _0x5622f3){if('LAurn'!=='qlwUX')VisuMZ['BattleCore'][_0x33e15c(0x4bf)](_0x3e652d,_0xfdd7e1);else{let _0x3b0a85=_0x15c1d6['value1'];_0x3b0a85*=_0x201435['stateRate'](_0x707d1),_0x3b0a85*=this[_0x33e15c(0x92f)]()[_0x33e15c(0xbbd)](_0x4658f4),_0x3b0a85*=this['lukEffectRate'](_0x173283),_0x3cd7ff[_0x33e15c(0x256)]()<_0x3b0a85&&(_0x2449f7[_0x33e15c(0xb16)]=!![],this[_0x33e15c(0x170)](_0x46af7c));}}const _0xf282b0=_0x3e652d[_0x33e15c(0x15d)];_0xf282b0[_0x33e15c(0x634)](/<ALWAYS CRITICAL/i)&&(_0x33e15c(0x585)!=='SrzCW'?(this[_0x33e15c(0x469)](_0x33e15c(0xc17)),_0x3cc65d[_0x33e15c(0x898)][_0x33e15c(0x9b3)](),_0x30cf78[_0x33e15c(0xa98)][_0x33e15c(0x34c)][_0x33e15c(0x61e)](this),this[_0x33e15c(0x4b4)](_0x33e15c(0x8de))):_0x3e652d[_0x33e15c(0x87d)]['critical']=!![]),_0xf282b0[_0x33e15c(0x634)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x3e652d['repeats']=Math[_0x33e15c(0x7a0)](0x1,Number(RegExp['$1']))),_0xf282b0[_0x33e15c(0x634)](/<TARGET:[ ](.*)>/i)&&('kXOLp'!==_0x33e15c(0xb58)?this[_0x33e15c(0xbd8)][_0x33e15c(0x607)](_0x58d2c0):_0x3e652d['scope']=String(RegExp['$1'])[_0x33e15c(0xb24)]()[_0x33e15c(0xb83)]());},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x99b)]=function(_0x35cc2d){const _0x4cdf57=_0x4adfe0,_0x15c3ca=[_0x4cdf57(0x430),_0x4cdf57(0x47f),'PreDamageAsUserJS',_0x4cdf57(0x28d),_0x4cdf57(0x835),_0x4cdf57(0x4e6),_0x4cdf57(0x452),_0x4cdf57(0x31b),_0x4cdf57(0xa3e),'PostStartActionJS',_0x4cdf57(0x5a0),'PostEndActionJS','PreStartBattleJS','PostStartBattleJS',_0x4cdf57(0x5db),_0x4cdf57(0x259),_0x4cdf57(0x121),_0x4cdf57(0x9b4),_0x4cdf57(0xc17),_0x4cdf57(0x640),'PreStartTurnJS',_0x4cdf57(0x183),_0x4cdf57(0x617),_0x4cdf57(0x8f6),_0x4cdf57(0x87e),'PostRegenerateJS'];for(const _0x2ccb47 of _0x15c3ca){VisuMZ['BattleCore'][_0x4cdf57(0x4bf)](_0x35cc2d,_0x2ccb47);}},VisuMZ['BattleCore']['Parse_Notetags_Targets']=function(_0x106ee7){const _0x2842e0=_0x4adfe0,_0x26fb67=_0x106ee7[_0x2842e0(0x15d)];if(_0x26fb67[_0x2842e0(0x634)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x33e4c3=String(RegExp['$1']),_0x2b01f2=VisuMZ[_0x2842e0(0xa98)]['createKeyJS'](_0x106ee7,_0x2842e0(0x114));VisuMZ[_0x2842e0(0xa98)][_0x2842e0(0x9cb)](_0x33e4c3,_0x2b01f2);}if(_0x26fb67[_0x2842e0(0x634)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x576424=String(RegExp['$1']),_0x28cf5c=VisuMZ[_0x2842e0(0xa98)][_0x2842e0(0x91d)](_0x106ee7,'CommandVisible');VisuMZ[_0x2842e0(0xa98)]['createCommandVisibleJS'](_0x576424,_0x28cf5c);}},VisuMZ[_0x4adfe0(0xa98)]['JS']={},VisuMZ[_0x4adfe0(0xa98)]['createJS']=function(_0x1676b0,_0x367745){const _0x2f3261=_0x4adfe0,_0x5811e3=_0x1676b0[_0x2f3261(0x15d)];if(_0x5811e3[_0x2f3261(0x634)](VisuMZ['BattleCore'][_0x2f3261(0xafd)][_0x367745])){const _0x138e98=RegExp['$1'],_0x52a386='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x2f3261(0x31d)](_0x138e98),_0xb83366=VisuMZ[_0x2f3261(0xa98)]['createKeyJS'](_0x1676b0,_0x367745);VisuMZ['BattleCore']['JS'][_0xb83366]=new Function(_0x52a386);}},VisuMZ['BattleCore'][_0x4adfe0(0x91d)]=function(_0x5bc5a4,_0x5cc4ae){const _0x1d7c0b=_0x4adfe0;if(VisuMZ[_0x1d7c0b(0x91d)])return VisuMZ['createKeyJS'](_0x5bc5a4,_0x5cc4ae);let _0x1652d4='';if($dataActors[_0x1d7c0b(0x5d0)](_0x5bc5a4))_0x1652d4=_0x1d7c0b(0xb8a)[_0x1d7c0b(0x31d)](_0x5bc5a4['id'],_0x5cc4ae);if($dataClasses[_0x1d7c0b(0x5d0)](_0x5bc5a4))_0x1652d4='Class-%1-%2'[_0x1d7c0b(0x31d)](_0x5bc5a4['id'],_0x5cc4ae);if($dataSkills[_0x1d7c0b(0x5d0)](_0x5bc5a4))_0x1652d4=_0x1d7c0b(0x9b8)[_0x1d7c0b(0x31d)](_0x5bc5a4['id'],_0x5cc4ae);if($dataItems[_0x1d7c0b(0x5d0)](_0x5bc5a4))_0x1652d4=_0x1d7c0b(0xafb)[_0x1d7c0b(0x31d)](_0x5bc5a4['id'],_0x5cc4ae);if($dataWeapons[_0x1d7c0b(0x5d0)](_0x5bc5a4))_0x1652d4=_0x1d7c0b(0xa84)[_0x1d7c0b(0x31d)](_0x5bc5a4['id'],_0x5cc4ae);if($dataArmors[_0x1d7c0b(0x5d0)](_0x5bc5a4))_0x1652d4=_0x1d7c0b(0x470)[_0x1d7c0b(0x31d)](_0x5bc5a4['id'],_0x5cc4ae);if($dataEnemies['includes'](_0x5bc5a4))_0x1652d4=_0x1d7c0b(0x4b0)[_0x1d7c0b(0x31d)](_0x5bc5a4['id'],_0x5cc4ae);if($dataStates[_0x1d7c0b(0x5d0)](_0x5bc5a4))_0x1652d4='State-%1-%2'[_0x1d7c0b(0x31d)](_0x5bc5a4['id'],_0x5cc4ae);return _0x1652d4;},VisuMZ['BattleCore']['createTargetsJS']=function(_0x94efc9,_0x7a6f43){const _0x1f7171=_0x4adfe0,_0x5377d2='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x1f7171(0x31d)](_0x94efc9);VisuMZ['BattleCore']['JS'][_0x7a6f43]=new Function(_0x5377d2);},VisuMZ[_0x4adfe0(0xa98)]['createCommandVisibleJS']=function(_0x7d9f13,_0x1b5304){const _0x8a7f59=_0x4adfe0,_0x3a0355=_0x8a7f59(0x7ec)[_0x8a7f59(0x31d)](_0x7d9f13);VisuMZ[_0x8a7f59(0xa98)]['JS'][_0x1b5304]=new Function(_0x3a0355);},TextManager['autoBattle']=VisuMZ[_0x4adfe0(0xa98)]['Settings'][_0x4adfe0(0xa9e)]['CmdTextAutoBattle'],TextManager['autoBattleStart']=VisuMZ[_0x4adfe0(0xa98)]['Settings'][_0x4adfe0(0x936)][_0x4adfe0(0x2ef)],TextManager[_0x4adfe0(0x734)]=VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5bc)][_0x4adfe0(0x936)][_0x4adfe0(0x702)],TextManager[_0x4adfe0(0x65b)]=VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5bc)][_0x4adfe0(0x1f0)]['Name'],ColorManager[_0x4adfe0(0x68c)]=function(_0x18d183){const _0x371882=_0x4adfe0;return _0x18d183=String(_0x18d183),_0x18d183[_0x371882(0x634)](/#(.*)/i)?_0x371882(0x7c8)['format'](String(RegExp['$1'])):this[_0x371882(0x3ad)](Number(_0x18d183));},DataManager[_0x4adfe0(0x400)]=function(_0x159586){const _0x3323a4=_0x4adfe0;if(_0x159586['note']['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x367403=String(RegExp['$1'])[_0x3323a4(0xb24)]()[_0x3323a4(0xb83)]();if(_0x367403===_0x3323a4(0x6c2))return'MANUAL';if(VisuMZ[_0x3323a4(0x10e)][_0x367403])return _0x367403;}const _0x5932d1=VisuMZ[_0x3323a4(0xa98)][_0x3323a4(0x5bc)][_0x3323a4(0x676)][_0x3323a4(0xa97)][_0x3323a4(0xb24)]()[_0x3323a4(0xb83)]();if(VisuMZ['DamageStyles'][_0x5932d1])return _0x5932d1;return _0x3323a4(0x6c2);},DataManager[_0x4adfe0(0x612)]=function(_0x1f2374){const _0x5b4fd2=_0x4adfe0;_0x1f2374=_0x1f2374['toUpperCase']()[_0x5b4fd2(0xb83)](),this['_stypeIDs']=this[_0x5b4fd2(0xa4d)]||{};if(this[_0x5b4fd2(0xa4d)][_0x1f2374])return this[_0x5b4fd2(0xa4d)][_0x1f2374];for(let _0x5c5c6a=0x1;_0x5c5c6a<0x64;_0x5c5c6a++){if('QMTfr'!=='CtTJf'){if(!$dataSystem[_0x5b4fd2(0x3ca)][_0x5c5c6a])continue;let _0x27f2c7=$dataSystem['skillTypes'][_0x5c5c6a][_0x5b4fd2(0xb24)]()[_0x5b4fd2(0xb83)]();_0x27f2c7=_0x27f2c7['replace'](/\x1I\[(\d+)\]/gi,''),_0x27f2c7=_0x27f2c7['replace'](/\\I\[(\d+)\]/gi,''),this[_0x5b4fd2(0xa4d)][_0x27f2c7]=_0x5c5c6a;}else this[_0x5b4fd2(0x381)][_0x5b4fd2(0xfc)]['x']=0x1/(this[_0x5b4fd2(0xfc)]['x']||0.001),this[_0x5b4fd2(0x381)][_0x5b4fd2(0xfc)]['y']=0x1/(this['scale']['y']||0.001);}return this[_0x5b4fd2(0xa4d)][_0x1f2374]||0x0;},DataManager['getSkillIdWithName']=function(_0x78f21c){const _0x55721e=_0x4adfe0;_0x78f21c=_0x78f21c[_0x55721e(0xb24)]()['trim'](),this[_0x55721e(0x265)]=this[_0x55721e(0x265)]||{};if(this[_0x55721e(0x265)][_0x78f21c])return this[_0x55721e(0x265)][_0x78f21c];for(const _0x33e3c6 of $dataSkills){if(!_0x33e3c6)continue;this[_0x55721e(0x265)][_0x33e3c6[_0x55721e(0xa23)][_0x55721e(0xb24)]()[_0x55721e(0xb83)]()]=_0x33e3c6['id'];}return this[_0x55721e(0x265)][_0x78f21c]||0x0;},DataManager[_0x4adfe0(0xbe2)]=function(_0x2480d5){const _0x1e9109=_0x4adfe0;_0x2480d5=_0x2480d5[_0x1e9109(0xb24)]()[_0x1e9109(0xb83)](),this['_enemyIDs']=this[_0x1e9109(0x54c)]||{};if(this['_enemyIDs'][_0x2480d5])return this['_enemyIDs'][_0x2480d5];for(const _0xb54d1 of $dataEnemies){if(!_0xb54d1)continue;this[_0x1e9109(0x54c)][_0xb54d1[_0x1e9109(0xa23)][_0x1e9109(0xb24)]()['trim']()]=_0xb54d1['id'];}return this[_0x1e9109(0x54c)][_0x2480d5]||0x0;},DataManager[_0x4adfe0(0x1e3)]=function(_0x418d17){const _0x42bf8d=_0x4adfe0;_0x418d17=_0x418d17[_0x42bf8d(0xb24)]()[_0x42bf8d(0xb83)](),this['_wtypeIDs']=this[_0x42bf8d(0x67a)]||{};if(this[_0x42bf8d(0x67a)][_0x418d17])return this[_0x42bf8d(0x67a)][_0x418d17];for(let _0x2b23ab=0x1;_0x2b23ab<0x64;_0x2b23ab++){if(!$dataSystem['weaponTypes'][_0x2b23ab])continue;let _0x3eeb51=$dataSystem[_0x42bf8d(0x220)][_0x2b23ab]['toUpperCase']()[_0x42bf8d(0xb83)]();_0x3eeb51=_0x3eeb51['replace'](/\x1I\[(\d+)\]/gi,''),_0x3eeb51=_0x3eeb51[_0x42bf8d(0x335)](/\\I\[(\d+)\]/gi,''),this[_0x42bf8d(0x67a)][_0x3eeb51]=_0x2b23ab;}return this['_wtypeIDs'][_0x42bf8d(0x79e)]=0x0,this[_0x42bf8d(0x67a)][_0x418d17]||0x0;},DataManager[_0x4adfe0(0x4ee)]=function(_0x998c96){const _0x260ad=_0x4adfe0,_0x3cbf8c=_0x260ad(0x329);let _0x4c634f=_0x998c96['iconIndex'],_0x69c31a=_0x998c96[_0x260ad(0xa23)];const _0x4d351f=_0x998c96[_0x260ad(0x15d)];return _0x4d351f[_0x260ad(0x634)](/<DISPLAY ICON: (\d+)>/i)&&(_0x4c634f=Number(RegExp['$1'])),_0x4d351f[_0x260ad(0x634)](/<DISPLAY TEXT: (.*)>/i)&&(_0x69c31a=String(RegExp['$1'])),_0x3cbf8c['format'](_0x4c634f,_0x69c31a);},DataManager[_0x4adfe0(0x382)]=function(_0x23ae6b){const _0x2cb2cc=_0x4adfe0;if(_0x23ae6b[_0x2cb2cc(0x15d)][_0x2cb2cc(0x634)](/<COMMAND TEXT: (.*)>/i))return String(RegExp['$1']);else{if('JDcpU'!==_0x2cb2cc(0x29c))_0x274a9e[_0x2cb2cc(0x98c)](_0x2cb2cc(0x206));else return _0x23ae6b[_0x2cb2cc(0xa23)];}},DataManager[_0x4adfe0(0x1ab)]=function(_0x5e3c4c){const _0x104956=_0x4adfe0;return _0x5e3c4c['note'][_0x104956(0x634)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x5e3c4c['iconIndex'];},DataManager[_0x4adfe0(0x20d)]=function(_0x52fc69){const _0x1dadc2=_0x4adfe0,_0x550c1f=$dataEnemies[_0x52fc69];if(_0x550c1f){if(_0x1dadc2(0x3e0)!==_0x1dadc2(0x3e0))this[_0x1dadc2(0x3ce)](_0x1d42e7)?_0x53fb91['prepareCustomActionSequence']():this['usePremadeActionSequence'](_0x2a84e0,_0x2a422e,_0xca513c);else{if(_0x550c1f[_0x1dadc2(0x15d)][_0x1dadc2(0x634)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if('lqFJa'===_0x1dadc2(0x778))_0x4fcd3a[_0x1dadc2(0xa98)][_0x1dadc2(0x166)]['call'](this,_0x1dbda7),this[_0x1dadc2(0x5c6)]();else{const _0x2a6c23=String(RegExp['$1'])[_0x1dadc2(0x176)](/[\r\n]+/)['remove'](''),_0x549264=this['processRandomizedData'](_0x2a6c23);_0x52fc69=this[_0x1dadc2(0xbe2)](_0x549264)||_0x52fc69,_0x52fc69=DataManager[_0x1dadc2(0x20d)](_0x52fc69);}}}}return _0x52fc69;},DataManager[_0x4adfe0(0x5e9)]=function(_0x181c93){const _0xb041c7=_0x4adfe0;let _0x4b490a=0x0;const _0x167cff={};for(const _0x1e7df7 of _0x181c93){if(_0x1e7df7[_0xb041c7(0x634)](/(.*):[ ](\d+)/i)){if(_0xb041c7(0x3e8)!=='PbXXR'){const _0xa674e2=String(RegExp['$1'])[_0xb041c7(0xb83)](),_0xea9381=Number(RegExp['$2']);_0x167cff[_0xa674e2]=_0xea9381,_0x4b490a+=_0xea9381;}else _0x19bddb[_0xb041c7(0x1c5)][_0xb041c7(0xcc9)]<1.15&&(_0x5254d5(_0x21144f['format'](_0xb041c7(0xb5e))),_0x37ecb5[_0xb041c7(0x162)]());}else{if(_0x1e7df7['match'](/(.*):[ ](\d+\.?\d+)/i)){if(_0xb041c7(0x4cd)==='PNxbg'){if(this[_0xb041c7(0x3f7)]<0xff)this[_0xb041c7(0x3f7)]+=0x10;}else{const _0x7c5687=String(RegExp['$1'])['trim'](),_0x413ab0=Number(RegExp['$2']);_0x167cff[_0x7c5687]=_0x413ab0,_0x4b490a+=_0x413ab0;}}else _0x1e7df7!==''&&(_0x167cff[_0x1e7df7]=0x1,_0x4b490a++);}}if(_0x4b490a<=0x0)return'';let _0x3b2ce0=Math[_0xb041c7(0x256)]()*_0x4b490a;for(const _0x2db3d9 in _0x167cff){_0x3b2ce0-=_0x167cff[_0x2db3d9];if(_0x3b2ce0<=0x0)return _0x2db3d9;}return'';},DataManager[_0x4adfe0(0xbae)]=function(_0x226aa1){const _0x152630=_0x4adfe0;if(!_0x226aa1)return![];if(!VisuMZ['BattleCore'][_0x152630(0x5bc)][_0x152630(0x5f6)][_0x152630(0xab8)])return![];if(_0x226aa1['note'][_0x152630(0x634)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x226aa1[_0x152630(0x15d)][_0x152630(0x634)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x5b1e42 of _0x226aa1[_0x152630(0x91f)]){if(!_0x5b1e42)continue;if(_0x5b1e42[_0x152630(0x888)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x4adfe0(0x2a9)]=function(_0x3e3ddf){const _0x11940b=_0x4adfe0,_0x498daa=$dataTroops[_0x3e3ddf];if(!_0x498daa)return'';let _0x1bfa9b='';_0x1bfa9b+=_0x498daa[_0x11940b(0xa23)];for(const _0x3531e6 of _0x498daa[_0x11940b(0x5ff)]){for(const _0x1e2253 of _0x3531e6[_0x11940b(0xc26)]){if(_0x11940b(0x826)===_0x11940b(0x826))[0x6c,0x198][_0x11940b(0x5d0)](_0x1e2253[_0x11940b(0x888)])&&(_0x1bfa9b+='\x0a',_0x1bfa9b+=_0x1e2253[_0x11940b(0xcdd)][0x0]);else{const _0x526938=_0x41df25[_0x11940b(0xa98)]['Settings'][_0x11940b(0x22d)],_0x352a79=_0x201069[_0x11940b(0x6ec)][_0x11940b(0xc1f)](),_0x5698c5=_0x33887a[_0x11940b(0xcc7)]-(_0x526938['CommandWidth']||0xc0),_0x420e8c=this[_0x11940b(0x110)]()+_0x352a79,_0x4459a4=this[_0x11940b(0x3cc)]()?0x0:_0x239e11['boxWidth']-_0x5698c5,_0x2f3c1f=_0x48cdc9['boxHeight']-_0x420e8c+_0x352a79;return new _0x37fef2(_0x4459a4,_0x2f3c1f,_0x5698c5,_0x420e8c);}}}return _0x1bfa9b;},ConfigManager[_0x4adfe0(0x2c2)]=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x4adfe0(0x797)]=ConfigManager[_0x4adfe0(0x797)]??![],ConfigManager['visualHpGauge']=ConfigManager[_0x4adfe0(0x65b)]??!![],VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x477)]=ConfigManager['makeData'],ConfigManager[_0x4adfe0(0xaac)]=function(){const _0x4c4a09=_0x4adfe0,_0xd86443=VisuMZ[_0x4c4a09(0xa98)][_0x4c4a09(0x477)]['call'](this);return _0xd86443[_0x4c4a09(0x2c2)]=this[_0x4c4a09(0x2c2)],_0xd86443[_0x4c4a09(0x797)]=this[_0x4c4a09(0x797)],_0xd86443['visualHpGauge']=this[_0x4c4a09(0x65b)],_0xd86443;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x754)]=ConfigManager[_0x4adfe0(0x34e)],ConfigManager[_0x4adfe0(0x34e)]=function(_0x2d9614){const _0x40b256=_0x4adfe0;VisuMZ[_0x40b256(0xa98)][_0x40b256(0x754)][_0x40b256(0x61e)](this,_0x2d9614),'autoBattleAtStart'in _0x2d9614?this['autoBattleAtStart']=_0x2d9614[_0x40b256(0x2c2)]:this[_0x40b256(0x2c2)]=![],'autoBattleUseSkills'in _0x2d9614?this[_0x40b256(0x797)]=_0x2d9614[_0x40b256(0x797)]:this[_0x40b256(0x797)]=![],_0x40b256(0x65b)in _0x2d9614?this[_0x40b256(0x65b)]=_0x2d9614['visualHpGauge']:_0x40b256(0xb4d)!=='QieoE'?this[_0x40b256(0x65b)]=!![]:_0x376fba[_0x40b256(0x2e2)][_0x40b256(0x920)]=!![];},ImageManager['svActorHorzCells']=ImageManager[_0x4adfe0(0x7c6)]||0x9,ImageManager[_0x4adfe0(0x1c2)]=ImageManager[_0x4adfe0(0x1c2)]||0x6,VisuMZ['BattleCore'][_0x4adfe0(0x6dd)]=BattleManager[_0x4adfe0(0x9ac)],BattleManager[_0x4adfe0(0x9ac)]=function(_0x201f5d,_0x11ddda,_0x3a6561){const _0x33b633=_0x4adfe0;VisuMZ[_0x33b633(0xa98)][_0x33b633(0x6dd)][_0x33b633(0x61e)](this,_0x201f5d,_0x11ddda,_0x3a6561),this['_battlerKeyCache']={};},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x8ae)]=BattleManager[_0x4adfe0(0x7d4)],BattleManager[_0x4adfe0(0x7d4)]=function(){const _0x7adbc6=_0x4adfe0;VisuMZ[_0x7adbc6(0xa98)][_0x7adbc6(0x8ae)][_0x7adbc6(0x61e)](this),this['_forcedBattlers']=[];},BattleManager[_0x4adfe0(0x1ad)]=function(){const _0x402c39=_0x4adfe0;if(!SceneManager[_0x402c39(0xcfa)]())return;const _0x4cbda4=SceneManager[_0x402c39(0x726)]['_statusWindow'];if(_0x4cbda4)_0x4cbda4[_0x402c39(0x7b3)]();},BattleManager['battleSys']=function(){const _0xf229bd=_0x4adfe0;if(BattleManager[_0xf229bd(0xaf5)]())return _0xf229bd(0xa51);return _0xf229bd(0x6dc);},BattleManager[_0x4adfe0(0x1eb)]=function(_0x17e4ec){const _0x49afda=_0x4adfe0;return _0x17e4ec=_0x17e4ec[_0x49afda(0xb24)]()[_0x49afda(0xb83)](),this[_0x49afda(0xc10)]()===_0x17e4ec;},BattleManager[_0x4adfe0(0xcf9)]=function(){const _0x1b554c=_0x4adfe0;return this[_0x1b554c(0x1eb)](_0x1b554c(0x6dc));},BattleManager['isTurnBased']=function(){const _0x58ae50=_0x4adfe0;return this[_0x58ae50(0xcf9)]();},BattleManager[_0x4adfe0(0x275)]=function(){return!this['isTurnBased']();},BattleManager[_0x4adfe0(0x95d)]=function(){return!this['isTurnBased']()&&!this['isTickBased']();},BattleManager[_0x4adfe0(0x44f)]=function(_0x4e447c){const _0x42f525=_0x4adfe0;this[_0x42f525(0x75c)]=this[_0x42f525(0x75c)]||{};if(this[_0x42f525(0x75c)][_0x4e447c]!==undefined)return this[_0x42f525(0x75c)][_0x4e447c];this[_0x42f525(0x75c)][_0x4e447c]=null;const _0x9b033b=this[_0x42f525(0x601)](),_0x319af8=_0x9b033b[_0x42f525(0x8bc)](_0x5e8eb7=>_0x5e8eb7[_0x42f525(0x8ef)]()===_0x4e447c);if(_0x319af8)this[_0x42f525(0x75c)][_0x4e447c]=_0x319af8;return this[_0x42f525(0x75c)][_0x4e447c];},Game_BattlerBase['prototype'][_0x4adfe0(0x8ef)]=function(){const _0x2e3709=_0x4adfe0;return _0x2e3709(0xbe4)[_0x2e3709(0x31d)](this[_0x2e3709(0x771)]()?_0x2e3709(0xcf8):_0x2e3709(0x85f),this[_0x2e3709(0xa23)]());},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x3ba)]=function(_0x2efe72){const _0x232575=_0x4adfe0;if(this[_0x232575(0xacc)]!=='')return;typeof _0x2efe72==='string'?this[_0x232575(0xacc)]=_0x2efe72[_0x232575(0xc1b)]()[_0x232575(0xb83)]():this[_0x232575(0xacc)]=_0x2efe72[_0x232575(0x8ef)]();},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x50f)]=function(){const _0x1b9e1f=_0x4adfe0;return[this[_0x1b9e1f(0x5f8)]()];},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x5f8)]=function(){const _0x9d5db1=_0x4adfe0,_0x210166=this['_targetBattlerKey']||'',_0x2eaf80=BattleManager['getBattlerFromKey'](_0x210166);if(!_0x2eaf80)return this[_0x9d5db1(0xc3e)]();if(!_0x2eaf80['isAlive']())return this['getBattlerKeyTargetReplacement']();return _0x2eaf80;},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xc3e)]=function(){const _0x241f22=_0x4adfe0,_0x3b572c=this[_0x241f22(0xacc)];return _0x3b572c[_0x241f22(0x634)](/ACTOR/i)?this[_0x241f22(0x6e8)]()[_0x241f22(0x985)]():this['opponentsUnit']()[_0x241f22(0x985)]();},BattleManager[_0x4adfe0(0xa56)]=function(){const _0x32f96e=_0x4adfe0;return this[_0x32f96e(0x601)]()['filter'](_0x200e06=>_0x200e06[_0x32f96e(0xa38)]());},BattleManager[_0x4adfe0(0x469)]=function(_0x1bc7c6){const _0x97500d=_0x4adfe0;_0x1bc7c6==='BattleVictoryJS'&&(this[_0x97500d(0xcf4)]=!![]),$gameParty[_0x97500d(0x469)](_0x1bc7c6),$gameTroop[_0x97500d(0x469)](_0x1bc7c6);},VisuMZ[_0x4adfe0(0xa98)]['BattleManager_startBattle']=BattleManager[_0x4adfe0(0x9f5)],BattleManager['startBattle']=function(){const _0x428ac0=_0x4adfe0;this['_endBattle']=![],this[_0x428ac0(0xc2f)]=ConfigManager['autoBattleAtStart'],this[_0x428ac0(0xcf4)]=![],this[_0x428ac0(0x469)](_0x428ac0(0x649)),VisuMZ[_0x428ac0(0xa98)][_0x428ac0(0x52a)]['call'](this),this[_0x428ac0(0x469)](_0x428ac0(0x4ca));},BattleManager[_0x4adfe0(0x4b4)]=function(_0xaec159){const _0x532102=_0x4adfe0,_0x539afd=VisuMZ[_0x532102(0xa98)][_0x532102(0x5bc)][_0x532102(0x4e9)];_0xaec159!==_0x532102(0x910)&&_0x539afd[_0x532102(0x785)]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x539afd[_0x532102(0x785)])&&$gameTemp[_0x532102(0xe3)](_0x539afd[_0x532102(0x785)]);const _0x1a2828=_0x532102(0x555)[_0x532102(0x31d)](_0xaec159);_0x539afd[_0x1a2828]&&VisuMZ[_0x532102(0xa98)]['CheckMapBattleEventValid'](_0x539afd[_0x1a2828])&&$gameTemp[_0x532102(0xe3)](_0x539afd[_0x1a2828]);},VisuMZ['BattleCore'][_0x4adfe0(0x2fe)]=BattleManager[_0x4adfe0(0x323)],BattleManager[_0x4adfe0(0x323)]=function(){const _0x1a0e94=_0x4adfe0;if(this[_0x1a0e94(0x9be)]===_0x1a0e94(0x8bf)){if($gameTemp[_0x1a0e94(0xcb0)]())return![];}return VisuMZ[_0x1a0e94(0xa98)][_0x1a0e94(0x2fe)][_0x1a0e94(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x2e5)]=BattleManager[_0x4adfe0(0x97c)],BattleManager[_0x4adfe0(0x97c)]=function(){const _0x19759c=_0x4adfe0;this[_0x19759c(0xcf4)]=!![],this[_0x19759c(0x469)](_0x19759c(0x121)),VisuMZ[_0x19759c(0xa98)][_0x19759c(0x2e5)][_0x19759c(0x61e)](this),this[_0x19759c(0x4b4)](_0x19759c(0x2af));},VisuMZ['BattleCore'][_0x4adfe0(0x684)]=BattleManager[_0x4adfe0(0x7e2)],BattleManager[_0x4adfe0(0x7e2)]=function(){const _0x304b52=_0x4adfe0;this[_0x304b52(0xcf4)]=!![],VisuMZ[_0x304b52(0xa98)][_0x304b52(0x684)][_0x304b52(0x61e)](this);},VisuMZ['BattleCore']['BattleManager_processDefeat']=BattleManager[_0x4adfe0(0x7fe)],BattleManager[_0x4adfe0(0x7fe)]=function(){const _0x15ffdc=_0x4adfe0;this[_0x15ffdc(0xcf4)]=!![],this[_0x15ffdc(0x469)](_0x15ffdc(0x9b4)),VisuMZ[_0x15ffdc(0xa98)]['BattleManager_processDefeat']['call'](this),this[_0x15ffdc(0x4b4)](_0x15ffdc(0x2b6));},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x226)]=BattleManager['endBattle'],BattleManager[_0x4adfe0(0xbb4)]=function(_0x2e68dc){const _0x2f6771=_0x4adfe0;this['_endBattle']=!![],this['_autoBattle']=![],this[_0x2f6771(0x469)]('PreEndBattleJS'),VisuMZ[_0x2f6771(0xa98)][_0x2f6771(0x226)]['call'](this,_0x2e68dc),this[_0x2f6771(0x469)]('PostEndBattleJS');},VisuMZ['BattleCore'][_0x4adfe0(0x261)]=BattleManager[_0x4adfe0(0xb75)],BattleManager[_0x4adfe0(0xb75)]=function(){const _0x2bebc7=_0x4adfe0;if(this['isTurnBased']())this[_0x2bebc7(0x469)](_0x2bebc7(0xbea));VisuMZ['BattleCore'][_0x2bebc7(0x261)][_0x2bebc7(0x61e)](this);if(this[_0x2bebc7(0x266)]())this[_0x2bebc7(0x469)]('PostStartTurnJS');},VisuMZ['BattleCore'][_0x4adfe0(0xc72)]=BattleManager[_0x4adfe0(0x80a)],BattleManager[_0x4adfe0(0x80a)]=function(){const _0xe597df=_0x4adfe0,_0x1b30cf=this[_0xe597df(0x48b)][_0xe597df(0x144)](),_0x3e44b0=this['_subject'];_0x1b30cf&&_0x1b30cf[_0xe597df(0x92f)]()===_0x3e44b0&&_0x1b30cf['actionBattleCoreJS'](_0xe597df(0xa3e));VisuMZ[_0xe597df(0xa98)][_0xe597df(0xc72)][_0xe597df(0x61e)](this);if(_0x1b30cf&&_0x1b30cf['subject']()===_0x3e44b0){if(_0xe597df(0x9d3)==='ZPTPN'){const _0x1fc08d=this['commandStyle'](),_0x2b1645=_0x5a803a[_0xe597df(0xa98)][_0xe597df(0x5bc)][_0xe597df(0xa9e)][_0xe597df(0x4c9)],_0x1591b0=_0x1fc08d===_0xe597df(0x530)?_0x194fb0[_0xe597df(0x633)]:'\x5cI[%1]%2'['format'](_0x2b1645,_0x4d8d0a[_0xe597df(0x633)]),_0x5877af=this[_0xe597df(0xa8e)]();this[_0xe597df(0x3bc)](_0x1591b0,_0xe597df(0x633),_0x5877af);}else _0x1b30cf[_0xe597df(0x56c)](_0xe597df(0x7ad));}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x72c)]=BattleManager[_0x4adfe0(0xb30)],BattleManager[_0x4adfe0(0xb30)]=function(){const _0x5ce40e=_0x4adfe0,_0x5188a4=this[_0x5ce40e(0x3a3)],_0x15e0ac=this[_0x5ce40e(0x48b)];if(_0x5188a4&&_0x5188a4!==this[_0x5ce40e(0x221)]&&_0x5188a4[_0x5ce40e(0x92f)]()===_0x15e0ac){if(_0x5ce40e(0x4bc)!==_0x5ce40e(0x4bc))return this[_0x5ce40e(0xbf9)]();else _0x5188a4[_0x5ce40e(0x56c)]('PreEndActionJS');}this[_0x5ce40e(0x48b)]?_0x5ce40e(0x6fc)!==_0x5ce40e(0x6fc)?this[_0x5ce40e(0xb04)](_0x5ce40e(0x71b)):VisuMZ['BattleCore'][_0x5ce40e(0x72c)]['call'](this):this[_0x5ce40e(0x9be)]='turn',_0x5188a4&&_0x5188a4!==this[_0x5ce40e(0x221)]&&_0x5188a4[_0x5ce40e(0x92f)]()===_0x15e0ac&&_0x5188a4[_0x5ce40e(0x56c)](_0x5ce40e(0x894)),this[_0x5ce40e(0x92e)](this[_0x5ce40e(0x601)]()),this[_0x5ce40e(0x221)]=this[_0x5ce40e(0x3a3)];},BattleManager[_0x4adfe0(0x92e)]=function(_0x2db07f){const _0x3ab784=_0x4adfe0;for(const _0x35cfff of _0x2db07f){if(!_0x35cfff)continue;if(!_0x35cfff[_0x3ab784(0xc66)]())continue;_0x35cfff[_0x3ab784(0xc66)]()[_0x3ab784(0x7e9)]();}},BattleManager[_0x4adfe0(0x1f3)]=function(){const _0x4e1c36=_0x4adfe0;if(!this['_logWindow'][_0x4e1c36(0xaba)]()){if('ChFKr'!==_0x4e1c36(0x6df))this[_0x4e1c36(0xb30)]();else{if(!this[_0x4e1c36(0xb7f)])return;this['_shadowSprite']['y']=this['_baseY']-this['y']-0x2;}}},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x623)]=function(){const _0x32b6ec=_0x4adfe0;this[_0x32b6ec(0xb07)]();if(Imported[_0x32b6ec(0x120)]){const _0x14903e=VisuMZ[_0x32b6ec(0x4f9)][_0x32b6ec(0x5bc)][_0x32b6ec(0x36f)];_0x14903e&&_0x14903e[_0x32b6ec(0x46d)]===![]&&this['removeStatesAuto'](0x1);}else this['removeStatesAuto'](0x1);this[_0x32b6ec(0x22c)]();},BattleManager['makeEscapeRatio']=function(){const _0x5b1208=_0x4adfe0;this['_escapeRatio']=VisuMZ[_0x5b1208(0xa98)]['Settings'][_0x5b1208(0x4e9)][_0x5b1208(0x3fd)][_0x5b1208(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x34c)]=BattleManager['onEscapeSuccess'],BattleManager[_0x4adfe0(0xa30)]=function(){const _0x36b0f3=_0x4adfe0;this['processBattleCoreJS'](_0x36b0f3(0xc17)),BattleManager['_spriteset'][_0x36b0f3(0x9b3)](),VisuMZ[_0x36b0f3(0xa98)][_0x36b0f3(0x34c)]['call'](this),this['processPostBattleCommonEvents'](_0x36b0f3(0x8de));},VisuMZ['BattleCore'][_0x4adfe0(0x628)]=BattleManager[_0x4adfe0(0x9ec)],BattleManager[_0x4adfe0(0x9ec)]=function(){const _0x182c05=_0x4adfe0;this[_0x182c05(0x469)](_0x182c05(0x640));const _0x875328=this[_0x182c05(0x307)];VisuMZ['BattleCore'][_0x182c05(0x628)][_0x182c05(0x61e)](this),this[_0x182c05(0x307)]=_0x875328+VisuMZ[_0x182c05(0xa98)][_0x182c05(0x5bc)]['Mechanics']['CalcEscapeRaiseJS'][_0x182c05(0x61e)](this),this['processPostBattleCommonEvents'](_0x182c05(0x910));},BattleManager[_0x4adfe0(0x999)]=function(){const _0x340717=_0x4adfe0;let _0x33d286=![];if(this[_0x340717(0x727)]())for(const _0x169280 of $gameTroop[_0x340717(0x466)]()){this[_0x340717(0x964)][_0x340717(0x98e)](_0x340717(0x46f),TextManager[_0x340717(0x3fb)][_0x340717(0x31d)](_0x169280)),this[_0x340717(0x964)][_0x340717(0x98e)](_0x340717(0x733)),_0x33d286=!![];}if(this[_0x340717(0x9fa)]){if(_0x340717(0xadd)!==_0x340717(0xac0))this[_0x340717(0x964)][_0x340717(0x98e)]('addText',TextManager[_0x340717(0xeb)][_0x340717(0x31d)]($gameParty[_0x340717(0xa23)]())),this[_0x340717(0x964)][_0x340717(0x98e)]('wait');else return this[_0x340717(0x512)]();}else this[_0x340717(0x73f)]&&(this[_0x340717(0x964)]['push'](_0x340717(0x46f),TextManager['surprise'][_0x340717(0x31d)]($gameParty['name']())),this[_0x340717(0x964)][_0x340717(0x98e)](_0x340717(0x733)));_0x33d286&&(_0x340717(0x63f)!==_0x340717(0x609)?(this[_0x340717(0x964)][_0x340717(0x98e)]('wait'),this[_0x340717(0x964)][_0x340717(0x98e)](_0x340717(0x465))):_0x45dd8c[_0x340717(0xa98)][_0x340717(0x5bc)]['AutoBattle'][_0x340717(0x431)]&&(this[_0x340717(0x5ad)](),this['addBattleCoreAutoBattleStyleCommand']())),this[_0x340717(0xaf5)]()&&this[_0x340717(0x94a)]()&&(this[_0x340717(0x57c)]=![]);},BattleManager[_0x4adfe0(0x727)]=function(){const _0x6e2a47=_0x4adfe0;if(BattleManager[_0x6e2a47(0xc2f)])return![];return VisuMZ[_0x6e2a47(0xa98)][_0x6e2a47(0x5bc)][_0x6e2a47(0x30b)][_0x6e2a47(0x3b8)];},VisuMZ[_0x4adfe0(0xa98)]['BattleManager_startInput']=BattleManager[_0x4adfe0(0xaa3)],BattleManager[_0x4adfe0(0xaa3)]=function(){const _0x16bf36=_0x4adfe0;VisuMZ[_0x16bf36(0xa98)]['BattleManager_startInput'][_0x16bf36(0x61e)](this),this[_0x16bf36(0xcf9)]()&&this[_0x16bf36(0x94a)]()&&!this[_0x16bf36(0x73f)]&&$gameParty[_0x16bf36(0x305)]()&&this['selectNextCommand']();},BattleManager[_0x4adfe0(0x94a)]=function(){const _0x49704a=_0x4adfe0;return VisuMZ[_0x49704a(0xa98)][_0x49704a(0x5bc)][_0x49704a(0xa9e)][_0x49704a(0xc35)];},BattleManager['checkTpbInputOpen']=function(){const _0x23cb52=_0x4adfe0;this[_0x23cb52(0x37e)]()&&this[_0x23cb52(0xa70)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x158)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x598)],Scene_Battle['prototype'][_0x4adfe0(0x598)]=function(){const _0x597ef3=_0x4adfe0;VisuMZ['BattleCore']['Scene_Battle_startActorCommandSelection']['call'](this),BattleManager[_0x597ef3(0xaf5)]()&&BattleManager[_0x597ef3(0x57c)]&&(BattleManager[_0x597ef3(0x57c)]=![],this[_0x597ef3(0x446)]());},BattleManager[_0x4adfe0(0x750)]=function(_0x2c3980,_0x4d117b){const _0x1a5e3f=_0x4adfe0;this['_action'][_0x1a5e3f(0x97e)]=_0x4d117b,this[_0x1a5e3f(0x964)][_0x1a5e3f(0x5d8)](_0x4d117b),this[_0x1a5e3f(0x964)][_0x1a5e3f(0x73a)](_0x2c3980,this[_0x1a5e3f(0x3a3)]),this[_0x1a5e3f(0x3a3)][_0x1a5e3f(0x680)](_0x2c3980),this['_logWindow'][_0x1a5e3f(0x5aa)](_0x2c3980,_0x2c3980);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x36e)]=BattleManager[_0x4adfe0(0x389)],BattleManager[_0x4adfe0(0x389)]=function(){const _0x47c74e=_0x4adfe0;VisuMZ[_0x47c74e(0xa98)][_0x47c74e(0x36e)]['call'](this),this[_0x47c74e(0xa78)]=this[_0x47c74e(0xa78)][_0x47c74e(0xcd9)](_0x15ded1=>_0x15ded1&&_0x15ded1[_0x47c74e(0x138)]());},VisuMZ['BattleCore'][_0x4adfe0(0x5a8)]=BattleManager[_0x4adfe0(0x8d3)],BattleManager[_0x4adfe0(0x8d3)]=function(_0x20724a){const _0x2c15c4=_0x4adfe0;if(this[_0x2c15c4(0x9be)]===_0x2c15c4(0x802))this[_0x2c15c4(0x971)]();else{if(this[_0x2c15c4(0x9be)]===_0x2c15c4(0x8c4))this['updateForceAction']();else{if(_0x2c15c4(0x2b9)!==_0x2c15c4(0x562))VisuMZ[_0x2c15c4(0xa98)][_0x2c15c4(0x5a8)][_0x2c15c4(0x61e)](this,_0x20724a);else{_0x315bfb=_0x2b5194[_0x2c15c4(0xb24)]()[_0x2c15c4(0xb83)]();const _0x13ea03=this[_0x2c15c4(0x913)](_0x408969,_0x1703d4);if(_0x13ea03<=0x0)return;const _0x3aa2ac=_0x2ed309[_0x2c15c4(0xb95)](_0x2b4955*_0x13ea03);if(_0x3aa2ac<=0x0)return;let _0x1c1bd1=this[_0x2c15c4(0x92f)]();if(this[_0x2c15c4(0x97e)])_0x1c1bd1=this['_reflectionTarget'];const _0xaa54f4=_0x377d29['isNegativeLifeSteal'](_0x470121)?-0x1:0x1;if(_0x53b14f==='HP')_0x1c1bd1[_0x2c15c4(0x78e)](_0xaa54f4*_0x3aa2ac);if(_0x10c6eb==='MP')_0x1c1bd1[_0x2c15c4(0xcbb)](_0xaa54f4*_0x3aa2ac);}}}},BattleManager[_0x4adfe0(0x8ff)]=function(){const _0x2565a7=_0x4adfe0;this[_0x2565a7(0x1a7)]=this[_0x2565a7(0xae1)][_0x2565a7(0x7bc)](0x0),this['_targetIndex']=0x0,this[_0x2565a7(0x48f)]=this[_0x2565a7(0x1a7)][0x0]||null,this['_phase']='custom';},BattleManager[_0x4adfe0(0x971)]=function(){const _0x4c77d7=_0x4adfe0;!this[_0x4c77d7(0x271)]()&&!this[_0x4c77d7(0x964)][_0x4c77d7(0xaba)]()&&(_0x4c77d7(0xa5a)!==_0x4c77d7(0xa5a)?(_0x27bcc6[_0x4c77d7(0xa98)][_0x4c77d7(0x3c8)][_0x4c77d7(0x61e)](this),this['opacity']=this[_0x4c77d7(0xccd)]>0x0?0xff:0x0):this['_phase']=_0x4c77d7(0x287));},BattleManager[_0x4adfe0(0x8c4)]=function(_0x1a552b){const _0x56c360=_0x4adfe0;this[_0x56c360(0xa78)][_0x56c360(0xb6e)](_0x1a552b);if(_0x1a552b===this[_0x56c360(0x48b)])return;const _0x329962=JsonEx['makeDeepCopy'](_0x1a552b['currentAction']());this[_0x56c360(0xbd6)][_0x56c360(0x98e)]([_0x1a552b,_0x329962]);},BattleManager[_0x4adfe0(0x434)]=function(){},BattleManager[_0x4adfe0(0x5b5)]=function(){const _0x160bc2=_0x4adfe0;if(this[_0x160bc2(0xaf5)]())this[_0x160bc2(0x9be)]='turn';else this[_0x160bc2(0xbd6)][_0x160bc2(0xa59)]>0x0?this[_0x160bc2(0x9be)]=_0x160bc2(0x8bf):_0x160bc2(0x4ed)!==_0x160bc2(0x4ed)?_0xbcb762[_0x160bc2(0x2e2)][_0x160bc2(0x2ff)]=![]:this[_0x160bc2(0xaa3)]();},BattleManager[_0x4adfe0(0x344)]=function(){const _0x288841=_0x4adfe0,_0x2ae6a1=this[_0x288841(0x48b)];_0x2ae6a1&&this[_0x288841(0xaf5)]()&&(_0x288841(0x857)!==_0x288841(0xf9)?_0x2ae6a1[_0x288841(0x814)]('undecided'):(_0x2c4ff1[_0x288841(0xa98)][_0x288841(0xc68)][_0x288841(0x61e)](this),this['y']=_0x403146[_0x288841(0x6a1)]*0xa,this[_0x288841(0x54b)]()&&this[_0x288841(0x788)]()));for(;;){if(_0x288841(0xca0)!==_0x288841(0xca0))return this[_0x288841(0xcfe)]()[_0x288841(0x634)](/\$/i);else{const _0x2f93b8=this[_0x288841(0x8e6)]();if(!_0x2f93b8)return null;if(_0x2f93b8[_0x288841(0x4d1)]()&&_0x2f93b8[_0x288841(0xb82)]())return _0x2f93b8;}}},BattleManager['getNextSubjectFromPool']=function(){const _0x4d71a0=_0x4adfe0;if(this[_0x4d71a0(0xbd6)][_0x4d71a0(0xa59)]>0x0){if(_0x4d71a0(0xb81)===_0x4d71a0(0xccb)){const _0x2cc3e6=_0x28f601[_0x4d71a0(0xa98)][_0x4d71a0(0x5bc)]['BattleLayout'];_0x2cc3e6['StatusWindowSkinFilename']?this['windowskin']=_0x5e48ed['loadSystem'](_0x2cc3e6[_0x4d71a0(0xbb3)]):_0x2e9758['prototype'][_0x4d71a0(0x739)][_0x4d71a0(0x61e)](this);}else{const _0x172f03=this[_0x4d71a0(0xbd6)][_0x4d71a0(0x2df)](),_0x3d1d77=_0x172f03[0x0];return _0x3d1d77[_0x4d71a0(0x60a)]=_0x3d1d77[_0x4d71a0(0x60a)]||[],_0x3d1d77[_0x4d71a0(0x60a)][0x0]=_0x172f03[0x1],_0x3d1d77;}}else return this[_0x4d71a0(0xa78)][_0x4d71a0(0x2df)]();},VisuMZ[_0x4adfe0(0xa98)]['Game_Battler_forceAction']=Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x8c4)],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x8c4)]=function(_0x2d49ca,_0x51454a){const _0x20e057=_0x4adfe0;VisuMZ[_0x20e057(0xa98)][_0x20e057(0x751)][_0x20e057(0x61e)](this,_0x2d49ca,_0x51454a),this[_0x20e057(0x60a)][this[_0x20e057(0x60a)][_0x20e057(0xa59)]-0x1][_0x20e057(0x413)]=!![];},Game_Interpreter[_0x4adfe0(0x6ec)][_0x4adfe0(0xcd1)]=function(_0x53dfd5){const _0x2e8a42=_0x4adfe0;return this[_0x2e8a42(0x51b)](_0x53dfd5[0x0],_0x53dfd5[0x1],_0x54388d=>{const _0x22a0ad=_0x2e8a42;if('PRwrX'!==_0x22a0ad(0x625)){if(!_0x54388d['isDeathStateAffected']()){if(_0x22a0ad(0x3e6)!==_0x22a0ad(0x3e6)){this[_0x22a0ad(0x98e)](_0x22a0ad(0xbff),_0x15c8b0);if(!_0xfedad1[_0x22a0ad(0xa98)][_0x22a0ad(0x5bc)][_0x22a0ad(0x109)]['ShowReflect'])return;this[_0x22a0ad(0x98e)]('addText',_0x5067ac['magicReflection'][_0x22a0ad(0x31d)](_0x2149b3[_0x22a0ad(0xa23)]()));}else _0x54388d[_0x22a0ad(0x8c4)](_0x53dfd5[0x2],_0x53dfd5[0x3]),BattleManager['forceAction'](_0x54388d);}}else{if(_0x200f98[_0x22a0ad(0xa98)][_0x22a0ad(0x661)][_0x168623]){const _0x32749d=_0x570688[_0x22a0ad(0xa98)][_0x22a0ad(0x661)][_0x591c38],_0x56af86={'code':0x2c,'dataId':_0x32749d,'value1':0x1,'value2':0x0};_0x5e7f4d['effects'][_0x22a0ad(0x98e)](_0x56af86);}}}),!![];},VisuMZ[_0x4adfe0(0xa98)]['Game_Battler_makeSpeed']=Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x528)],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x528)]=function(){const _0x512283=_0x4adfe0;VisuMZ[_0x512283(0xa98)][_0x512283(0x462)][_0x512283(0x61e)](this);if(this[_0x512283(0x60a)]['length']<=0x0){if(_0x512283(0xcb7)===_0x512283(0xcb7))this[_0x512283(0xa36)]=Number[_0x512283(0xaf1)];else return this[_0x512283(0x812)]?this[_0x512283(0x812)][_0x512283(0x248)]===0x0&&this[_0x512283(0x812)][_0x512283(0xafc)]===0x0:!![];}},BattleManager[_0x4adfe0(0x774)]=function(){const _0x331a7e=_0x4adfe0;if(VisuMZ['BattleCore'][_0x331a7e(0x5bc)][_0x331a7e(0x676)]['EndBattlePopups']??!![])return![];return SceneManager[_0x331a7e(0xcfa)]()&&this['_endingBattle'];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xb4e)]=BattleManager['selectNextCommand'],BattleManager[_0x4adfe0(0xa70)]=function(){const _0x26131c=_0x4adfe0;if(this[_0x26131c(0xaf5)]())_0x26131c(0x1ed)===_0x26131c(0x483)?(_0x208635=_0x44f515['battler']()[_0x26131c(0xc0d)],_0x22f92c=_0x29a9cd['battler']()[_0x26131c(0x5e7)]):this[_0x26131c(0x777)]();else{if(_0x26131c(0x1a5)===_0x26131c(0x1a5))VisuMZ['BattleCore'][_0x26131c(0xb4e)][_0x26131c(0x61e)](this);else{if(!_0x4b0150[_0x26131c(0xcfa)]())return;_0x19a919[_0x26131c(0x360)](_0x133aed,_0x2e66ef),_0x26fec1['_scene'][_0x26131c(0x50d)](_0x586af0[_0x26131c(0x93e)]);}}},BattleManager[_0x4adfe0(0x777)]=function(){const _0x2dbb38=_0x4adfe0;if(this[_0x2dbb38(0xfb)]){if(this[_0x2dbb38(0xfb)][_0x2dbb38(0xa70)]()){if(_0x2dbb38(0x960)===_0x2dbb38(0xb2e))return _0x446b4b[_0x2dbb38(0xa98)][_0x2dbb38(0x3a4)][_0x2dbb38(0x61e)](this);else return;}this[_0x2dbb38(0x636)](),this[_0x2dbb38(0x96c)](),!this['_subject']&&!this[_0x2dbb38(0xfb)]&&SceneManager['_scene'][_0x2dbb38(0x39f)]();}else{if(!this[_0x2dbb38(0x48b)]){if(_0x2dbb38(0x9fc)!==_0x2dbb38(0x9fc))return _0x5bb523[_0x2dbb38(0xa98)][_0x2dbb38(0x87c)][_0x2dbb38(0x61e)](this);else this[_0x2dbb38(0x506)]();}}},BattleManager[_0x4adfe0(0x96c)]=function(){const _0x1db324=_0x4adfe0;if(!this['isPartyTpbInputtable']()||this[_0x1db324(0x9f3)]()){if(_0x1db324(0x2fa)!==_0x1db324(0x2fa))_0x45ecd6=_0x2b3b5b[_0x1db324(0x912)];else{this[_0x1db324(0x8ea)]&&(!$gameParty[_0x1db324(0xc7b)]()[_0x1db324(0x5d0)](this[_0x1db324(0x8ea)])&&(this['_tpbSceneChangeCacheActor']=null));if(!this['_tpbSceneChangeCacheActor'])this[_0x1db324(0x8ba)](),this[_0x1db324(0xfb)]=null,this[_0x1db324(0x744)]=![];else{if(_0x1db324(0x8a3)===_0x1db324(0x93a)){const _0x3e4461=/<BYPASS DAMAGE CAP>/i;if(this[_0x1db324(0x28e)]()[_0x1db324(0x15d)][_0x1db324(0x634)](_0x3e4461))return!![];if(this['subject']()[_0x1db324(0xb13)]()['some'](_0x51fe9a=>_0x51fe9a&&_0x51fe9a[_0x1db324(0x15d)][_0x1db324(0x634)](_0x3e4461)))return!![];return!_0x39ebde[_0x1db324(0xa98)][_0x1db324(0x5bc)]['Damage'][_0x1db324(0x55c)];}else this[_0x1db324(0x7a6)]();}}}},BattleManager[_0x4adfe0(0x7a6)]=function(){const _0x2d8188=_0x4adfe0;!$gameParty['battleMembers']()[_0x2d8188(0x5d0)](this['_tpbSceneChangeCacheActor'])&&(_0x2d8188(0x312)===_0x2d8188(0x1aa)?(this[_0x2d8188(0xc47)]=_0x61456f[_0x2d8188(0x4f3)]>=0x0?0x0:0x1,this[_0x2d8188(0xb40)](_0x37eb71[_0x2d8188(0x4f3)])):this[_0x2d8188(0x8ea)]=null);if(this[_0x2d8188(0x8ea)])this[_0x2d8188(0xfb)]=this[_0x2d8188(0x8ea)],this['_currentActor']['_tpbState']=_0x2d8188(0x3c5),this[_0x2d8188(0x744)]=!![],this[_0x2d8188(0x8ea)]=null;else{if(_0x2d8188(0xa41)!==_0x2d8188(0xa41))return _0x318dc7['BattleCore']['Settings'][_0x2d8188(0x936)][_0x2d8188(0xbcb)];else this['cancelActorInput'](),this[_0x2d8188(0xfb)]=null,this['_inputting']=![];}},VisuMZ['BattleCore']['BattleManager_isTpbMainPhase']=BattleManager[_0x4adfe0(0x65e)],BattleManager[_0x4adfe0(0x65e)]=function(){const _0x5d34f1=_0x4adfe0;return this[_0x5d34f1(0x9be)]===_0x5d34f1(0x802)?this[_0x5d34f1(0x38f)]():_0x5d34f1(0x5cf)!==_0x5d34f1(0x5cf)?this[_0x5d34f1(0xc52)](_0x52cc62):VisuMZ[_0x5d34f1(0xa98)][_0x5d34f1(0x23b)][_0x5d34f1(0x61e)](this);},BattleManager[_0x4adfe0(0x38f)]=function(){const _0x462c07=_0x4adfe0;return this[_0x462c07(0x2cb)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x35e)]=BattleManager[_0x4adfe0(0x8ba)],BattleManager['cancelActorInput']=function(){const _0x4713cf=_0x4adfe0;this[_0x4713cf(0xaf5)]()&&this[_0x4713cf(0x9be)]===_0x4713cf(0xa0a)&&(this[_0x4713cf(0xfb)]=null),VisuMZ[_0x4713cf(0xa98)]['BattleManager_cancelActorInput'][_0x4713cf(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x2d7)]=BattleManager[_0x4adfe0(0xc15)],BattleManager[_0x4adfe0(0xc15)]=function(){const _0x90e983=_0x4adfe0,_0x20bf43=this[_0x90e983(0xfb)];if(_0x20bf43&&!_0x20bf43[_0x90e983(0xc15)]()){const _0x5606f6=_0x20bf43[_0x90e983(0x3b4)];_0x20bf43['_actions'][_0x5606f6]=new Game_Action(_0x20bf43);}return VisuMZ[_0x90e983(0xa98)][_0x90e983(0x2d7)]['call'](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xbdc)]=BattleManager[_0x4adfe0(0x5f7)],BattleManager[_0x4adfe0(0x5f7)]=function(_0x5213c3){const _0x1bea24=_0x4adfe0;if(this[_0x1bea24(0x3a3)][_0x1bea24(0x41a)]())return![];return VisuMZ[_0x1bea24(0xa98)][_0x1bea24(0xbdc)]['call'](this,_0x5213c3);},SceneManager['isSceneBattle']=function(){const _0x542291=_0x4adfe0;return this['_scene']&&this[_0x542291(0x726)]['constructor']===Scene_Battle;},SceneManager['isBattleFlipped']=function(){return Spriteset_Battle['prototype']['isFlipped']();},SceneManager[_0x4adfe0(0x18a)]=function(){const _0x5cfb6f=_0x4adfe0;if(SceneManager[_0x5cfb6f(0xbc2)](Scene_Options))return!![];return![];},SceneManager[_0x4adfe0(0x388)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x4adfe0(0x274)]=function(_0x4cf5c5){const _0x39e130=_0x4adfe0;if(!SceneManager['isSceneBattle']())return!![];const _0x30dec2=[_0x39e130(0xc51),_0x39e130(0xb23)];return _0x30dec2[_0x39e130(0x5d0)](_0x4cf5c5[_0x39e130(0xa23)]);},VisuMZ['BattleCore'][_0x4adfe0(0xae9)]=SceneManager[_0x4adfe0(0x98e)],SceneManager['push']=function(_0x3bed08){const _0x35a8cd=_0x4adfe0;if(!SceneManager[_0x35a8cd(0x274)](_0x3bed08))return this[_0x35a8cd(0xc52)](_0x3bed08);VisuMZ[_0x35a8cd(0xa98)][_0x35a8cd(0xae9)][_0x35a8cd(0x61e)](this,_0x3bed08);},SceneManager[_0x4adfe0(0xc52)]=function(_0x3e888d){const _0x5f333b=_0x4adfe0;if(!$gameTemp['isPlaytest']())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x5f333b(0xcdc)]=!![];let _0x1453d8='';_0x1453d8+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x1453d8+=_0x5f333b(0x701)[_0x5f333b(0x31d)](_0x3e888d[_0x5f333b(0xa23)]),alert(_0x1453d8);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xb20)]=Game_Temp['prototype'][_0x4adfe0(0x135)],Game_Temp['prototype'][_0x4adfe0(0x135)]=function(_0xc8749c,_0x12a3f6,_0x3a05a1){const _0x4cc922=_0x4adfe0;_0xc8749c=_0xc8749c[_0x4cc922(0xcd9)]((_0x122a60,_0x282c32,_0x44c024)=>_0x44c024[_0x4cc922(0x766)](_0x122a60)===_0x282c32),SceneManager[_0x4cc922(0xcfa)]()&&SceneManager[_0x4cc922(0x2dc)]()&&(_0x3a05a1=!_0x3a05a1),VisuMZ[_0x4cc922(0xa98)][_0x4cc922(0xb20)]['call'](this,_0xc8749c,_0x12a3f6,_0x3a05a1),SceneManager[_0x4cc922(0xcfa)]()&&BattleManager[_0x4cc922(0x898)][_0x4cc922(0xa92)]();},Game_Temp[_0x4adfe0(0x6ec)][_0x4adfe0(0xbb2)]=function(_0xe6a112){const _0x2ba415=_0x4adfe0;this[_0x2ba415(0xa60)]=_0xe6a112;},Game_Temp[_0x4adfe0(0x6ec)]['getLastPluginCommandInterpreter']=function(){const _0x36f75f=_0x4adfe0;return this[_0x36f75f(0xa60)];},Game_Temp['prototype'][_0x4adfe0(0x9ea)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x4adfe0(0x6ec)][_0x4adfe0(0x8fd)]=function(_0x39e0e1){const _0x7fc2ef=_0x4adfe0;$gameMap&&$dataMap&&$dataMap[_0x7fc2ef(0x15d)]&&(_0x7fc2ef(0x2de)===_0x7fc2ef(0x2de)?this[_0x7fc2ef(0xa7e)]($dataMap[_0x7fc2ef(0x15d)]):_0xbd7094[_0x7fc2ef(0x135)]([this],_0x5dc9b2,!!_0x2c46bd));const _0x2904a2=$dataTroops[_0x39e0e1];if(_0x2904a2){if('Ruvtj'==='Ruvtj'){let _0x193dd6=DataManager['createTroopNote'](_0x2904a2['id']);this[_0x7fc2ef(0xa7e)](_0x193dd6);}else this['push']('fnordAddedStates'),this['push'](_0x7fc2ef(0x1d5)),this[_0x7fc2ef(0x98e)]('pushBaseLine'),this[_0x7fc2ef(0x98e)]('addText',_0x4c58f5[_0x7fc2ef(0x31d)](_0x5236a9[_0x7fc2ef(0xa23)]())),this['push']('wait');}},Game_Temp[_0x4adfe0(0x6ec)][_0x4adfe0(0xa7e)]=function(_0x2ff5dd){const _0x286720=_0x4adfe0;if(!_0x2ff5dd)return;if(_0x2ff5dd['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x41dde6=String(RegExp['$1']);if(_0x41dde6[_0x286720(0x634)](/DEFAULT/i))this[_0x286720(0xe8)]=_0x286720(0x93f);else{if(_0x41dde6[_0x286720(0x634)](/LIST/i))this[_0x286720(0xe8)]=_0x286720(0xc26);else{if(_0x41dde6[_0x286720(0x634)](/XP/i)){if(_0x286720(0x9ff)!==_0x286720(0x7da))this['_forcedBattleLayout']='xp';else{const _0x2475c9=_0x4d7cc9['BattleCore'][_0x286720(0x477)][_0x286720(0x61e)](this);return _0x2475c9[_0x286720(0x2c2)]=this[_0x286720(0x2c2)],_0x2475c9['autoBattleUseSkills']=this[_0x286720(0x797)],_0x2475c9['visualHpGauge']=this[_0x286720(0x65b)],_0x2475c9;}}else{if(_0x41dde6['match'](/PORTRAIT/i))_0x286720(0x763)===_0x286720(0x763)?this[_0x286720(0xe8)]='portrait':(_0x24c7c0+=_0x1da15e['isActor']()?-_0x22a645:_0x5d6d61,_0x53e888+=_0x2ce83a);else{if(_0x41dde6[_0x286720(0x634)](/BORDER/i)){if(_0x286720(0x1a8)!==_0x286720(0x1a8)){var _0x516f03,_0x5cac46,_0x265ae0;for(_0x265ae0=_0x5752ee['length']-0x1;_0x265ae0>0x0;_0x265ae0--){_0x516f03=_0x55e33c[_0x286720(0xa55)](_0x17ebdb['random']()*(_0x265ae0+0x1)),_0x5cac46=_0x3b65af[_0x265ae0],_0x26a320[_0x265ae0]=_0x289453[_0x516f03],_0x2666c7[_0x516f03]=_0x5cac46;}return _0x4a4c77;}else this[_0x286720(0xe8)]=_0x286720(0x2a2);}else{if(_0x41dde6[_0x286720(0x634)](/(?:SIDEVIEW UI|SIDEVIEW)/i))_0x286720(0x83d)!==_0x286720(0x83d)?(this[_0x286720(0xc0d)]=this['_targetHomeX'],this['_homeY']=this[_0x286720(0x464)]):Imported[_0x286720(0xc75)]?this[_0x286720(0xe8)]='sideview_ui':_0x286720(0xb6c)!==_0x286720(0xb6c)?this['selectNextCommand']():this['_forcedBattleLayout']='default';else{if(_0x41dde6[_0x286720(0x634)](/(?:FRONTVIEW UI|FRONTVIEW)/i)){if(_0x286720(0xce0)!==_0x286720(0xce0)){const _0x3821ca=_0x43c164[_0x286720(0x726)]['partyCommandWindowRectBorderStyle']();this[_0x286720(0x119)](_0x3821ca['x'],_0x3821ca['y'],_0x3821ca[_0x286720(0x1e2)],_0x3821ca[_0x286720(0x6a1)]),this[_0x286720(0xc0e)](),this[_0x286720(0x1c0)](0x0);}else Imported[_0x286720(0x89b)]?_0x286720(0x1ec)!=='DEevj'?(this[_0x286720(0x133)]()?(this[_0x286720(0x326)][_0x286720(0x454)](),this['_enemyWindow'][_0x286720(0x9e8)](),this['_actorCommandWindow'][_0x286720(0x325)]()):_0x12410e[_0x286720(0xa98)]['Scene_Battle_onEnemyCancel'][_0x286720(0x61e)](this),this[_0x286720(0xb09)](),this[_0x286720(0x6a7)]['closeBattleActorWindow']()):this[_0x286720(0xe8)]='frontview_ui':this[_0x286720(0xe8)]=_0x286720(0x93f);}}}}}}}}},VisuMZ['BattleCore'][_0x4adfe0(0x4d9)]=Game_System[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)],Game_System[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)]=function(){const _0x2f6794=_0x4adfe0;VisuMZ[_0x2f6794(0xa98)][_0x2f6794(0x4d9)][_0x2f6794(0x61e)](this),this[_0x2f6794(0x311)]();},Game_System[_0x4adfe0(0x6ec)][_0x4adfe0(0x311)]=function(){const _0x1f0dbc=_0x4adfe0;this[_0x1f0dbc(0x492)]=this[_0x1f0dbc(0x492)]||[];},Game_System['prototype'][_0x4adfe0(0xb9f)]=function(){const _0x35563f=_0x4adfe0;if(this[_0x35563f(0x492)]===undefined)this['initBattleCore']();return this[_0x35563f(0x492)];},Game_System[_0x4adfe0(0x6ec)]['registerDefeatedEnemy']=function(_0x5574b8){const _0x2a579d=_0x4adfe0;if(this[_0x2a579d(0x492)]===undefined)this[_0x2a579d(0x311)]();if(!_0x5574b8)return;if(this[_0x2a579d(0x492)][_0x2a579d(0x5d0)](_0x5574b8))return;this[_0x2a579d(0x492)][_0x2a579d(0x98e)](_0x5574b8),this[_0x2a579d(0x492)][_0x2a579d(0x712)]((_0xfdbc88,_0x3fb7f4)=>_0xfdbc88-_0x3fb7f4);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x38a)]=Game_BattlerBase['prototype'][_0x4adfe0(0xb8e)],Game_BattlerBase[_0x4adfe0(0x6ec)]['addNewState']=function(_0x542b7e){const _0x40affe=_0x4adfe0,_0x5a75f4=this['isAlive'](),_0x7336ac=this[_0x40affe(0xc20)]();VisuMZ[_0x40affe(0xa98)][_0x40affe(0x38a)][_0x40affe(0x61e)](this,_0x542b7e);if(this[_0x40affe(0x13b)]()&&_0x5a75f4&&this['isDead']()){if(_0x40affe(0xc67)!==_0x40affe(0x48c))this['_visualHpGauge_JustDied']=!this[_0x40affe(0xb49)](),$gameSystem[_0x40affe(0x5b6)](this['enemyId']());else return _0x197635[_0x40affe(0xa98)][_0x40affe(0x789)][_0x40affe(0x61e)](this);}if(SceneManager[_0x40affe(0xcfa)]()&&_0x7336ac!==this[_0x40affe(0xc20)]()){if(_0x40affe(0x82c)!==_0x40affe(0xc7f)){if(this['battler']()){if('MyiHl'!=='MyiHl')return _0x414828[_0x40affe(0x2cb)]();else this[_0x40affe(0xc66)]()[_0x40affe(0x7e9)]();}}else return _0x2dc24d[_0x40affe(0xcd9)](_0x3f0c2a=>_0x3f0c2a!==_0x17329d&&!_0x2e7983[_0x40affe(0x5d0)](_0x3f0c2a)&&_0x3f0c2a['notFocusValid']());}},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xb49)]=function(){const _0x1f58de=_0x4adfe0;return $gameSystem[_0x1f58de(0xb9f)]()[_0x1f58de(0x5d0)](this['_enemyId']);},VisuMZ[_0x4adfe0(0xa98)]['Game_BattlerBase_eraseState']=Game_BattlerBase['prototype'][_0x4adfe0(0x8a7)],Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x8a7)]=function(_0x40debd){const _0x50e97f=_0x4adfe0;VisuMZ['BattleCore'][_0x50e97f(0xc62)][_0x50e97f(0x61e)](this,_0x40debd),this[_0x50e97f(0x13b)]()&&_0x40debd===this[_0x50e97f(0x5e4)]()&&this[_0x50e97f(0xb82)]()&&(this[_0x50e97f(0x46c)]=![]),!this[_0x50e97f(0x879)]&&!this['_tempBattler']&&SceneManager[_0x50e97f(0xcfa)]()&&this[_0x50e97f(0x47e)]();},VisuMZ[_0x4adfe0(0xa98)]['Game_Action_clear']=Game_Action['prototype'][_0x4adfe0(0x465)],Game_Action['prototype'][_0x4adfe0(0x465)]=function(){const _0x5e7dbe=_0x4adfe0;VisuMZ[_0x5e7dbe(0xa98)][_0x5e7dbe(0xb2f)]['call'](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x5e7dbe(0x1f5)]=_0x5e7dbe(0x93f),this[_0x5e7dbe(0x5c6)]();},Game_Action['prototype'][_0x4adfe0(0x5c6)]=function(){this['_targetBattlerKey']='';},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x7b1)]=Game_Action['prototype'][_0x4adfe0(0xc16)],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xc16)]=function(_0x40279a){const _0x4604ad=_0x4adfe0;VisuMZ['BattleCore'][_0x4604ad(0x7b1)][_0x4604ad(0x61e)](this,_0x40279a),this[_0x4604ad(0x5c6)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x166)]=Game_Action[_0x4adfe0(0x6ec)]['setSkill'],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xa11)]=function(_0x552656){const _0x571b32=_0x4adfe0;VisuMZ[_0x571b32(0xa98)][_0x571b32(0x166)][_0x571b32(0x61e)](this,_0x552656),this[_0x571b32(0x5c6)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xa7f)]=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x3d0)],Game_Action['prototype'][_0x4adfe0(0x3d0)]=function(_0x435336){const _0x201932=_0x4adfe0;VisuMZ[_0x201932(0xa98)][_0x201932(0xa7f)][_0x201932(0x61e)](this,_0x435336),this[_0x201932(0x5c6)]();},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xc09)]=function(_0x7ee3a0,_0x49c340){const _0x54f386=_0x4adfe0;return VisuMZ[_0x54f386(0xa98)][_0x54f386(0x5bc)][_0x54f386(0x676)][_0x54f386(0xc27)]['call'](this,_0x7ee3a0,_0x49c340);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x29d)]=function(_0x1b2ec4,_0x40a56a){const _0x3bc3fd=_0x4adfe0;return VisuMZ[_0x3bc3fd(0xa98)][_0x3bc3fd(0x5bc)][_0x3bc3fd(0x676)][_0x3bc3fd(0x2aa)][_0x3bc3fd(0x61e)](this,_0x1b2ec4,_0x40a56a);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x1a0)]=function(_0x354049,_0x3e3ff5){const _0x13ccbd=_0x4adfe0;return VisuMZ[_0x13ccbd(0xa98)][_0x13ccbd(0x5bc)][_0x13ccbd(0x676)][_0x13ccbd(0x845)][_0x13ccbd(0x61e)](this,_0x354049,_0x3e3ff5);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x6f0)]=Game_Action['prototype'][_0x4adfe0(0xcb4)],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xcb4)]=function(_0x1acce8){const _0x39fbcf=_0x4adfe0,_0xb7af25=this['item']()[_0x39fbcf(0x15d)];if(_0xb7af25[_0x39fbcf(0x634)](/<ALWAYS HIT>/i))return 0x1;else{if(_0xb7af25[_0x39fbcf(0x634)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{if(_0x39fbcf(0x798)===_0x39fbcf(0xc29))this[_0x39fbcf(0xb04)](_0x39fbcf(0x5e5));else{let _0x39eae8=VisuMZ[_0x39fbcf(0xa98)][_0x39fbcf(0x6f0)]['call'](this,_0x1acce8);return _0x39eae8=this[_0x39fbcf(0x288)][_0x39fbcf(0xa0c)]*_0x39eae8+this[_0x39fbcf(0x288)]['hitFlat'],_0x39eae8;}}}},Game_Action['prototype'][_0x4adfe0(0x6b0)]=function(_0x1c41b7){const _0x5952d4=_0x4adfe0;if(!this[_0x5952d4(0x28e)]()[_0x5952d4(0x87d)][_0x5952d4(0xcba)])return 0x0;let _0x373467=VisuMZ[_0x5952d4(0xa98)][_0x5952d4(0x5bc)]['Damage'][_0x5952d4(0xb71)][_0x5952d4(0x61e)](this,_0x1c41b7);return _0x373467=this[_0x5952d4(0x288)][_0x5952d4(0x5c1)]*_0x373467+this[_0x5952d4(0x288)][_0x5952d4(0x1cd)],_0x373467;},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x80f)]=function(_0x5e5b29){const _0x350f58=_0x4adfe0;return _0x5e5b29=VisuMZ[_0x350f58(0xa98)]['Settings'][_0x350f58(0x676)][_0x350f58(0x299)][_0x350f58(0x61e)](this,_0x5e5b29),_0x5e5b29=this[_0x350f58(0x288)][_0x350f58(0x12e)]*_0x5e5b29+this[_0x350f58(0x288)][_0x350f58(0x380)],_0x5e5b29;},VisuMZ[_0x4adfe0(0xa98)]['Game_Action_evalDamageFormula']=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xcc2)],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xcc2)]=function(_0x17ef0f){const _0x2267e1=_0x4adfe0;if(this[_0x2267e1(0x1f5)]!==_0x2267e1(0x93f))return this[_0x2267e1(0x549)](_0x17ef0f);else{if(DataManager[_0x2267e1(0x400)](this['item']())===_0x2267e1(0x6c2))return VisuMZ[_0x2267e1(0xa98)][_0x2267e1(0x140)]['call'](this,_0x17ef0f);else{if(_0x2267e1(0xdf)===_0x2267e1(0x66e)){const _0x572675=this[_0x2267e1(0xaad)](_0x23bd29),_0x24cbac=new(_0x572675?_0x3f3746:_0x3e917b)(),_0x4fb278=this[_0x2267e1(0xc2c)](_0x178bbb);this[_0x2267e1(0xab7)](_0x272ede[0x0])&&(_0x4b81bd=!_0x936fa5),_0x24cbac[_0x2267e1(0xb63)]=_0x2ef9cc,_0x24cbac['setup'](_0x4fb278,_0xfa2c71,_0x219e3f,_0x403b76),this['addAnimationSpriteToContainer'](_0x24cbac);}else return this[_0x2267e1(0x624)](_0x17ef0f);}}},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x6d8)]=function(_0x497d15){const _0x917138=_0x4adfe0;this[_0x917138(0x1f5)]=_0x497d15;},Game_Action[_0x4adfe0(0x6ec)]['customDamageFormula']=function(_0x488954){const _0x36e0c1=_0x4adfe0,_0xdc02bf=this[_0x36e0c1(0x28e)](),_0x90a56f=_0xdc02bf[_0x36e0c1(0x87d)][_0x36e0c1(0x24f)];_0xdc02bf[_0x36e0c1(0x87d)][_0x36e0c1(0x24f)]=this[_0x36e0c1(0x1f5)];let _0x4c9465=VisuMZ['BattleCore']['Game_Action_evalDamageFormula'][_0x36e0c1(0x61e)](this,_0x488954);return _0xdc02bf['damage']['formula']=_0x90a56f,_0x4c9465;},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x1b9)]=function(){const _0x1e21e8=_0x4adfe0;if(this['item']()[_0x1e21e8(0x15d)][_0x1e21e8(0x634)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1209cf=String(RegExp['$1'])[_0x1e21e8(0xb24)]()[_0x1e21e8(0xb83)]();return _0x1209cf;}return'MANUAL';},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x624)]=function(_0x47af57){const _0x7b6400=_0x4adfe0,_0x53516e=DataManager[_0x7b6400(0x400)](this[_0x7b6400(0x28e)]()),_0xdeafa7=VisuMZ['DamageStyles'][_0x53516e];try{return _0xdeafa7['Formula'][_0x7b6400(0x61e)](this,_0x47af57);}catch(_0x45657a){if($gameTemp[_0x7b6400(0x7b7)]())console[_0x7b6400(0x1ce)](_0x45657a);return VisuMZ['BattleCore'][_0x7b6400(0x140)][_0x7b6400(0x61e)](this);}},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x1f2)]=function(_0x206803,_0x5c720f){const _0x2f4a3d=_0x4adfe0;if(this[_0x2f4a3d(0xa19)]())return _0x5c720f;const _0x332e8=this[_0x2f4a3d(0x92f)](),_0x3ec3e2=_0x206803;let _0x270a3f=[],_0x37bc13=[];_0x270a3f[_0x2f4a3d(0x98e)](this[_0x2f4a3d(0x124)][_0x2f4a3d(0x8b1)],this[_0x2f4a3d(0x124)][_0x2f4a3d(0x4d3)]),_0x37bc13[_0x2f4a3d(0x98e)](this[_0x2f4a3d(0x124)]['arPenRate'],this[_0x2f4a3d(0x124)]['arRedRate']);const _0x128fa7=this[_0x2f4a3d(0x8be)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x29febc=this[_0x2f4a3d(0x8be)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x30a5e5=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x18bcee=this[_0x2f4a3d(0x8be)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x270a3f=_0x270a3f[_0x2f4a3d(0x197)](_0x3ec3e2['traitObjects']()[_0x2f4a3d(0x2f7)](_0x5a2c06=>_0x5a2c06&&_0x5a2c06[_0x2f4a3d(0x15d)][_0x2f4a3d(0x634)](_0x128fa7)?Number(RegExp['$1']):0x0)),_0x37bc13=_0x37bc13[_0x2f4a3d(0x197)](_0x3ec3e2[_0x2f4a3d(0xb13)]()['map'](_0xdac520=>_0xdac520&&_0xdac520[_0x2f4a3d(0x15d)][_0x2f4a3d(0x634)](_0x29febc)?Number(RegExp['$1'])/0x64:0x0)),_0x270a3f=_0x270a3f[_0x2f4a3d(0x197)](_0x332e8[_0x2f4a3d(0xb13)]()['map'](_0x47805b=>_0x47805b&&_0x47805b[_0x2f4a3d(0x15d)][_0x2f4a3d(0x634)](_0x30a5e5)?Number(RegExp['$1']):0x0)),_0x37bc13=_0x37bc13[_0x2f4a3d(0x197)](_0x332e8['traitObjects']()[_0x2f4a3d(0x2f7)](_0x1b655e=>_0x1b655e&&_0x1b655e['note'][_0x2f4a3d(0x634)](_0x18bcee)?Number(RegExp['$1'])/0x64:0x0)),this[_0x2f4a3d(0x28e)]()[_0x2f4a3d(0x15d)][_0x2f4a3d(0x634)](_0x30a5e5)&&_0x270a3f[_0x2f4a3d(0x98e)](Number(RegExp['$1'])),this[_0x2f4a3d(0x28e)]()['note']['match'](_0x18bcee)&&_0x37bc13['push'](Number(RegExp['$1'])),_0x5c720f=_0x270a3f[_0x2f4a3d(0x127)]((_0x1220b1,_0x2a3346)=>_0x1220b1-_0x2a3346,_0x5c720f),_0x5c720f>0x0&&(_0x5c720f=_0x37bc13[_0x2f4a3d(0x127)]((_0x240969,_0x415508)=>_0x240969*(0x1-_0x415508),_0x5c720f)),_0x5c720f;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xa8c)]=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x619)],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x619)]=function(_0x95d693,_0x58dff6){const _0x27e32c=_0x4adfe0;_0x58dff6=_0x58dff6*this[_0x27e32c(0x288)][_0x27e32c(0x397)],_0x58dff6+=this[_0x27e32c(0x288)][_0x27e32c(0x414)]*(_0x58dff6>=0x0?0x1:-0x1),_0x58dff6=this[_0x27e32c(0x61c)]('PreDamage%1JS',_0x95d693,_0x58dff6,![]),_0x58dff6=this['applyDamageCaps'](_0x58dff6),_0x58dff6=Math[_0x27e32c(0xb95)](_0x58dff6),this['_executedValue']=_0x58dff6,this[_0x27e32c(0xa58)]=this['_totalValue']||0x0,this[_0x27e32c(0xa58)]+=_0x58dff6,VisuMZ[_0x27e32c(0xa98)][_0x27e32c(0xa8c)][_0x27e32c(0x61e)](this,_0x95d693,_0x58dff6),this['applyBattleCoreJS']('PostDamage%1JS',_0x95d693,_0x58dff6,!![]);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x2ec)]=function(_0x5188f7){const _0x23c00d=_0x4adfe0;if(this[_0x23c00d(0x994)]())return _0x5188f7;return _0x5188f7=this['applySoftDamageCap'](_0x5188f7),_0x5188f7=this[_0x23c00d(0xa01)](_0x5188f7),_0x5188f7;},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x994)]=function(){const _0x17fa6a=_0x4adfe0,_0x2417cc=/<BYPASS DAMAGE CAP>/i;if(this[_0x17fa6a(0x28e)]()['note'][_0x17fa6a(0x634)](_0x2417cc))return!![];if(this[_0x17fa6a(0x92f)]()['traitObjects']()[_0x17fa6a(0x3b9)](_0x1fce73=>_0x1fce73&&_0x1fce73[_0x17fa6a(0x15d)][_0x17fa6a(0x634)](_0x2417cc)))return!![];return!VisuMZ[_0x17fa6a(0xa98)]['Settings']['Damage']['EnableDamageCap'];},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x7e5)]=function(_0x540c50){const _0x473697=_0x4adfe0;if(!VisuMZ['BattleCore'][_0x473697(0x5bc)][_0x473697(0x676)][_0x473697(0x5d1)])return _0x540c50;const _0x44de8b=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()['note'][_0x473697(0x634)](_0x44de8b))return _0x540c50;if(this['subject']()[_0x473697(0xb13)]()[_0x473697(0x3b9)](_0x48a2b2=>_0x48a2b2&&_0x48a2b2['note'][_0x473697(0x634)](_0x44de8b)))return _0x540c50;const _0x2d9cd5=_0x540c50<0x0?-0x1:0x1;_0x540c50=Math[_0x473697(0x6b7)](_0x540c50);let _0x3a1b1b=this[_0x473697(0x92f)]()[_0x473697(0xa1b)]();this[_0x473697(0x28e)]()[_0x473697(0x15d)][_0x473697(0x634)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x3a1b1b+=Number(RegExp['$1'])/0x64);_0x3a1b1b=_0x3a1b1b[_0x473697(0x548)](0.01,0x1);const _0x47f9d3=this[_0x473697(0x829)](),_0x49c34a=_0x3a1b1b*_0x47f9d3;if(_0x540c50>_0x49c34a&&_0x47f9d3>_0x49c34a){_0x540c50-=_0x49c34a;const _0x2f2cc6=VisuMZ[_0x473697(0xa98)][_0x473697(0x5bc)][_0x473697(0x676)][_0x473697(0x86f)],_0x1ffe19=Math['max'](0x1-_0x540c50/((_0x47f9d3-_0x49c34a)*_0x2f2cc6+_0x540c50),0.01);_0x540c50*=_0x1ffe19,_0x540c50+=_0x49c34a;}return _0x540c50*_0x2d9cd5;},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x829)]=function(){const _0x5b9c17=_0x4adfe0;if(this[_0x5b9c17(0x28e)]()['note'][_0x5b9c17(0x634)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x5b9c17(0x860)==='NUrHP')_0x2c2693=_0xa53d9[_0x5b9c17(0xcc7)]/0x2,_0x406128=_0x465036[_0x5b9c17(0x468)]/0x2;else return Number(RegExp['$1']);}else{if(_0x5b9c17(0x1f9)!==_0x5b9c17(0x1f9)){_0x4aab50[_0x5b9c17(0xa98)][_0x5b9c17(0x3de)][_0x5b9c17(0x61e)](this,_0x15e3b5),this[_0x5b9c17(0x521)](),this[_0x5b9c17(0x7aa)]();const _0x61a5a9=this[_0x5b9c17(0xc66)]();_0x61a5a9&&(_0x61a5a9[_0x5b9c17(0x6e9)]=_0x49afe4,_0x61a5a9[_0x5b9c17(0x6ad)](this));}else return this[_0x5b9c17(0x92f)]()[_0x5b9c17(0x94d)]();}},Game_Action['prototype'][_0x4adfe0(0xa01)]=function(_0x551287){const _0x4267de=_0x4adfe0;console[_0x4267de(0x1ce)](_0x551287);let _0x511793=this[_0x4267de(0x829)]();return _0x551287['clamp'](-_0x511793,_0x511793);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x8e2)]=function(){const _0xcd150a=_0x4adfe0;if(!this[_0xcd150a(0x28e)]())return![];return(this[_0xcd150a(0x28e)]()[_0xcd150a(0x15d)]||'')[_0xcd150a(0x634)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x4adfe0(0x6ec)]['disperseDamage']=function(_0x328d66){const _0x248d18=_0x4adfe0;if(this[_0x248d18(0x8e2)]()){let _0x558aef=BattleManager[_0x248d18(0xae1)];_0x328d66/=_0x558aef[_0x248d18(0xa59)],this['isAttack']()&&('EAjgv'==='DaReo'?this[_0x248d18(0x502)]():_0x328d66*=this[_0x248d18(0x92f)]()[_0x248d18(0x567)]()+0x1),_0x328d66=_0x328d66>0x0?Math['ceil'](_0x328d66):Math[_0x248d18(0xa55)](_0x328d66);}return _0x328d66;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xad0)]=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xc09)],Game_Action['prototype']['makeDamageValue']=function(_0xca13bb,_0xbfd95b){const _0x30b15a=_0x4adfe0;let _0x12e2b4=VisuMZ[_0x30b15a(0xa98)][_0x30b15a(0xad0)][_0x30b15a(0x61e)](this,_0xca13bb,_0xbfd95b);return this[_0x30b15a(0x3f9)](_0x12e2b4);},Game_Action['prototype'][_0x4adfe0(0x2a3)]=function(_0x5cbfba,_0x3ae064){const _0x40a06a=_0x4adfe0;let _0x2036d8=(_0x5cbfba[_0x40a06a(0x7ff)]*_0x3ae064['value1']+_0x3ae064['value2'])*_0x5cbfba[_0x40a06a(0xa86)];_0x2036d8=this[_0x40a06a(0x3f9)](_0x2036d8),this[_0x40a06a(0x7f9)]()&&(_0x40a06a(0xb57)!=='kbbfY'?_0x2036d8*=this['subject']()[_0x40a06a(0x941)]:this[_0x40a06a(0xf7)]()),_0x2036d8=Math[_0x40a06a(0xa55)](_0x2036d8),_0x2036d8!==0x0&&(_0x5cbfba[_0x40a06a(0x78e)](_0x2036d8),this[_0x40a06a(0x170)](_0x5cbfba));},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x592)]=function(_0x308aa6,_0x20de4b){const _0x382e5a=_0x4adfe0;let _0x14ffd7=(_0x308aa6[_0x382e5a(0x583)]*_0x20de4b[_0x382e5a(0x6b2)]+_0x20de4b[_0x382e5a(0x4e7)])*_0x308aa6['rec'];_0x14ffd7=this[_0x382e5a(0x3f9)](_0x14ffd7);if(this[_0x382e5a(0x7f9)]()){if('IcbjI'!==_0x382e5a(0x580))_0x14ffd7*=this['subject']()[_0x382e5a(0x941)];else{_0x4f1ee1=(_0x114180+_0x3c4cb5)/0x2;if(_0x4ec65b[_0x382e5a(0xc66)]())_0x38b42e+=_0x582b31['battler']()[_0x382e5a(0x6a1)]/0x2;}}_0x14ffd7=Math[_0x382e5a(0xa55)](_0x14ffd7),_0x14ffd7!==0x0&&(_0x308aa6[_0x382e5a(0xcbb)](_0x14ffd7),this[_0x382e5a(0x170)](_0x308aa6));},Game_Action['prototype'][_0x4adfe0(0x4b9)]=function(_0x23ffa0,_0x15b688){const _0x115df2=_0x4adfe0;let _0x428c2f=Math['floor'](_0x15b688['value1']);_0x428c2f=this[_0x115df2(0x3f9)](_0x428c2f),_0x428c2f!==0x0&&(_0x23ffa0[_0x115df2(0xcf3)](_0x428c2f),this[_0x115df2(0x170)](_0x23ffa0));},VisuMZ['BattleCore'][_0x4adfe0(0xa7b)]=Game_Action['prototype']['apply'],Game_Action['prototype'][_0x4adfe0(0x680)]=function(_0x2c896a){const _0x420ca2=_0x4adfe0;this[_0x420ca2(0x61c)](_0x420ca2(0x39c),_0x2c896a,0x0,!![]),VisuMZ[_0x420ca2(0xa98)][_0x420ca2(0xa7b)][_0x420ca2(0x61e)](this,_0x2c896a),this[_0x420ca2(0x61c)](_0x420ca2(0x56e),_0x2c896a,this[_0x420ca2(0x21b)]||0x0,!![]),this[_0x420ca2(0x571)](_0x2c896a);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x61c)]=function(_0x24d8a1,_0x3b405c,_0xe19229,_0x593aaf){const _0x2a4470=_0x4adfe0;if(this[_0x2a4470(0xcad)]||this['_tempActor'])return;_0xe19229=_0xe19229||0x0;const _0x50d8ab=_0xe19229,_0x470781=VisuMZ[_0x2a4470(0xa98)][_0x2a4470(0x5bc)]['Mechanics'],_0x18fe1d=_0x24d8a1[_0x2a4470(0x31d)]('');if(_0x470781[_0x18fe1d]){_0xe19229=_0x470781[_0x18fe1d][_0x2a4470(0x61e)](this,_0xe19229,_0x3b405c);if(_0x593aaf)_0xe19229=_0x50d8ab;}let _0x17d128=VisuMZ[_0x2a4470(0xa98)][_0x2a4470(0x91d)](this['item'](),_0x24d8a1[_0x2a4470(0x31d)](''));if(VisuMZ[_0x2a4470(0xa98)]['JS'][_0x17d128]){if('DdebP'!==_0x2a4470(0x91b)){const _0x33dd6e=this['commandName'](_0x3727ab);if(_0x33dd6e[_0x2a4470(0x634)](/\\I\[(\d+)\]/i)){const _0xd9085a=this[_0x2a4470(0x6f8)](_0x27cd43),_0xa97ec=this[_0x2a4470(0xa88)](_0x33dd6e)['width'];return _0xa97ec<=_0xd9085a[_0x2a4470(0x1e2)]?'iconText':_0x2a4470(0x639);}}else{_0xe19229=VisuMZ['BattleCore']['JS'][_0x17d128][_0x2a4470(0x61e)](this,this[_0x2a4470(0x92f)](),_0x3b405c,this['item'](),_0xe19229);if(_0x593aaf)_0xe19229=_0x50d8ab;}}for(const _0x48f20a of this['subject']()[_0x2a4470(0xb13)]()){if(_0x2a4470(0x3c1)===_0x2a4470(0x3d8))return![];else{if(!_0x48f20a)continue;_0x17d128=VisuMZ['BattleCore'][_0x2a4470(0x91d)](_0x48f20a,_0x24d8a1[_0x2a4470(0x31d)](_0x2a4470(0x7df)));if(VisuMZ['BattleCore']['JS'][_0x17d128]){_0xe19229=VisuMZ[_0x2a4470(0xa98)]['JS'][_0x17d128]['call'](this,this[_0x2a4470(0x92f)](),_0x3b405c,_0x48f20a,_0xe19229);if(_0x593aaf)_0xe19229=_0x50d8ab;}}}for(const _0x21bf8a of _0x3b405c[_0x2a4470(0xb13)]()){if(!_0x21bf8a)continue;_0x17d128=VisuMZ[_0x2a4470(0xa98)][_0x2a4470(0x91d)](_0x21bf8a,_0x24d8a1[_0x2a4470(0x31d)]('AsTarget'));if(VisuMZ[_0x2a4470(0xa98)]['JS'][_0x17d128]){_0xe19229=VisuMZ[_0x2a4470(0xa98)]['JS'][_0x17d128][_0x2a4470(0x61e)](this,this[_0x2a4470(0x92f)](),_0x3b405c,_0x21bf8a,_0xe19229);if(_0x593aaf)_0xe19229=_0x50d8ab;}}return _0xe19229;},Game_Action['prototype']['actionBattleCoreJS']=function(_0x439751){const _0x885c8e=_0x4adfe0,_0x4f907e=this[_0x885c8e(0xa58)]||0x0,_0x480b61=VisuMZ['BattleCore'][_0x885c8e(0x5bc)][_0x885c8e(0x4e9)],_0x3b8bec=_0x439751[_0x885c8e(0x31d)]('');if(_0x480b61[_0x3b8bec]){if(_0x885c8e(0x2a1)!==_0x885c8e(0xb1e))_0x480b61[_0x3b8bec][_0x885c8e(0x61e)](this,_0x4f907e);else{this['_text']=this[_0x885c8e(0x85f)]()[_0x885c8e(0xa23)]();const _0x45d7d1=this[_0x885c8e(0xa88)](this[_0x885c8e(0xa82)])[_0x885c8e(0x1e2)],_0x45732e=_0x2136f1['round']((this[_0x885c8e(0xc90)]-_0x45d7d1)/0x2);this[_0x885c8e(0x9c2)](this['_text'],_0x45732e,0x0,_0x45d7d1+0x8);}}let _0x1ee515=VisuMZ[_0x885c8e(0xa98)]['createKeyJS'](this[_0x885c8e(0x28e)](),_0x439751);if(VisuMZ['BattleCore']['JS'][_0x1ee515]){if(_0x885c8e(0x303)!==_0x885c8e(0xad4))VisuMZ[_0x885c8e(0xa98)]['JS'][_0x1ee515]['call'](this,this[_0x885c8e(0x92f)](),this[_0x885c8e(0x92f)](),this['item'](),_0x4f907e);else{const _0x726bbe=_0x4aae80[_0x885c8e(0xa98)][_0x885c8e(0x5bc)]['BattleLog'],_0x1988ff=_0x4d020a[_0x885c8e(0x393)]();if(_0x726bbe['ShowAddedBuff'])this[_0x885c8e(0x71c)](_0x58c546,_0x1988ff['addedBuffs'],_0x3e9c24[_0x885c8e(0xcc8)]);if(_0x726bbe[_0x885c8e(0x458)])this[_0x885c8e(0x71c)](_0x13620a,_0x1988ff[_0x885c8e(0xcf5)],_0x38c4e8[_0x885c8e(0x37c)]);if(_0x726bbe[_0x885c8e(0x652)])this[_0x885c8e(0x71c)](_0x6a4beb,_0x1988ff['removedBuffs'],_0x4787c5[_0x885c8e(0xcd8)]);}}for(const _0x448b7c of this[_0x885c8e(0x92f)]()[_0x885c8e(0xb13)]()){if(!_0x448b7c)continue;_0x1ee515=VisuMZ[_0x885c8e(0xa98)][_0x885c8e(0x91d)](_0x448b7c,_0x439751),VisuMZ[_0x885c8e(0xa98)]['JS'][_0x1ee515]&&VisuMZ[_0x885c8e(0xa98)]['JS'][_0x1ee515]['call'](this,this[_0x885c8e(0x92f)](),this[_0x885c8e(0x92f)](),_0x448b7c,_0x4f907e);}},Game_Action['prototype'][_0x4adfe0(0xa5f)]=function(){const _0x33449c=_0x4adfe0;return VisuMZ[_0x33449c(0xa98)][_0x33449c(0x5bc)]['Mechanics'][_0x33449c(0x88a)][_0x33449c(0x61e)](this);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xab4)]=function(){const _0x35b293=_0x4adfe0;return VisuMZ[_0x35b293(0xa98)][_0x35b293(0x5bc)][_0x35b293(0x4e9)]['AllowRandomSpeed'];},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x4de)]=function(){const _0x2d3964=_0x4adfe0;if(this[_0x2d3964(0xacc)]===_0x2d3964(0x8c6))return![];if(this[_0x2d3964(0xacc)]==='all\x20enemies')return![];if(!this[_0x2d3964(0x28e)]())return![];return this['item']()[_0x2d3964(0x15d)][_0x2d3964(0x634)](/<JS TARGETS>/i);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x163)]=function(){const _0x31729a=_0x4adfe0;if(this[_0x31729a(0xacc)]==='all\x20actors')return![];if(this[_0x31729a(0xacc)]===_0x31729a(0x933))return![];if(!this['_forcing']&&this['subject']()[_0x31729a(0x1f7)]())return![];if(this[_0x31729a(0x4de)]())return!![];if(!this[_0x31729a(0x28e)]())return![];return typeof this[_0x31729a(0x28e)]()[_0x31729a(0x178)]===_0x31729a(0x217);},VisuMZ['BattleCore'][_0x4adfe0(0x399)]=Game_Action[_0x4adfe0(0x6ec)]['isForOpponent'],Game_Action['prototype'][_0x4adfe0(0xac1)]=function(){const _0x450370=_0x4adfe0;if(this[_0x450370(0xacc)]===_0x450370(0x8c6))return![];if(this[_0x450370(0xacc)]===_0x450370(0x933))return!![];if(this[_0x450370(0x163)]()&&!this['isCustomBattleScope']()){if(_0x450370(0x84b)!==_0x450370(0x84b)){if(!_0x513157['isSceneBattle']())return;if(!_0xcdec57[_0x450370(0x21f)])return;const _0x292d01=_0x2b0d6a['getLastPluginCommandInterpreter']();_0x292d01['setWaitMode'](_0x450370(0x206));}else return this[_0x450370(0x691)]();}else return VisuMZ[_0x450370(0xa98)][_0x450370(0x399)]['call'](this);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x691)]=function(){const _0x375854=_0x4adfe0,_0x4a9313=this[_0x375854(0x28e)]()['scope'];if(_0x4a9313['match'](/ANY/i))return!![];return _0x4a9313[_0x375854(0x634)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4adfe0(0xa98)]['Game_Action_isForFriend']=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x41a)],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x41a)]=function(){const _0x205f7b=_0x4adfe0;if(this[_0x205f7b(0xacc)]===_0x205f7b(0x8c6))return!![];if(this[_0x205f7b(0xacc)]==='all\x20enemies')return![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x205f7b(0x41e)]():VisuMZ['BattleCore'][_0x205f7b(0x789)][_0x205f7b(0x61e)](this);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x41e)]=function(){const _0x275425=_0x4adfe0,_0x468672=this[_0x275425(0x28e)]()[_0x275425(0x178)];return _0x468672['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action['prototype'][_0x4adfe0(0x93c)]=function(){const _0x16fd7f=_0x4adfe0;if(this[_0x16fd7f(0x163)]()&&!this[_0x16fd7f(0x4de)]()){const _0xca95c5=this['item']()[_0x16fd7f(0x178)];return _0xca95c5['match'](/(?:ENEMY|FOE)/i)&&_0xca95c5[_0x16fd7f(0x634)](/OR/i)&&_0xca95c5[_0x16fd7f(0x634)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action['prototype']['isForAnyoneFocusFriends']=function(){const _0x5228a5=_0x4adfe0;if(this['isForAnyone']()){if(_0x5228a5(0x89e)!=='zFiUO'){const _0x2a4f53=this[_0x5228a5(0x28e)]()['scope'];if(_0x2a4f53[_0x5228a5(0x634)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}else{if(!_0x16b1e2[_0x5228a5(0xcfa)]())return;if(!_0xa7eb11['VisuMZ_3_ActSeqCamera'])return;_0x30ae3c[_0x5228a5(0x360)](_0x2287ea,_0x53caee);const _0x5ae872=_0x10f50c['getLastPluginCommandInterpreter'](),_0x3a4ea4=_0x52fd24['ResetFocus'],_0x501ca9=_0x202be4[_0x5228a5(0xa5c)],_0x361573=_0x2acaca['WaitForCamera'];if(_0x3a4ea4){const _0x25b1f6=_0x9d8cef[_0x5228a5(0xb95)](_0x358be9[_0x5228a5(0x1e2)]/0x2),_0x314ce9=_0x4023b2['round'](_0x141123['height']/0x2);_0x5f1c88['setBattleCameraPoint'](_0x25b1f6,_0x314ce9,_0x1add8c['Duration'],_0x21d5fe[_0x5228a5(0xc6d)]);}_0x501ca9&&_0x9bce4a['setBattleCameraOffset'](0x0,0x0,_0x29bdef[_0x5228a5(0x96d)],_0x392dbb[_0x5228a5(0xc6d)]);if(_0x361573)_0x5ae872['setWaitMode']('battleCamera');}}return![];},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x769)]=function(){const _0x491dd2=_0x4adfe0;if(this[_0x491dd2(0x93c)]()){const _0x92d432=this[_0x491dd2(0x28e)]()[_0x491dd2(0x178)];if(_0x92d432[_0x491dd2(0x634)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x23e)]=Game_Action[_0x4adfe0(0x6ec)]['isForAliveFriend'],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xc95)]=function(){const _0x4eafe3=_0x4adfe0;return this[_0x4eafe3(0x163)]()&&!this[_0x4eafe3(0x4de)]()?this[_0x4eafe3(0x95a)]():VisuMZ[_0x4eafe3(0xa98)][_0x4eafe3(0x23e)][_0x4eafe3(0x61e)](this);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x95a)]=function(){const _0x59ab8d=_0x4adfe0;if(this[_0x59ab8d(0x93c)]())return!![];return![];},Game_Action['prototype'][_0x4adfe0(0x285)]=function(){const _0x5b52c9=_0x4adfe0;return this[_0x5b52c9(0x28e)]()&&this['item']()[_0x5b52c9(0x15d)][_0x5b52c9(0x634)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x3a4)]=Game_Action['prototype'][_0x4adfe0(0x2e9)],Game_Action['prototype'][_0x4adfe0(0x2e9)]=function(){const _0x2f8c68=_0x4adfe0;if(this[_0x2f8c68(0xacc)]===_0x2f8c68(0x8c6))return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];return this[_0x2f8c68(0x163)]()&&!this[_0x2f8c68(0x4de)]()?this[_0x2f8c68(0x2d6)]():VisuMZ[_0x2f8c68(0xa98)][_0x2f8c68(0x3a4)][_0x2f8c68(0x61e)](this);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x2d6)]=function(){const _0x52f98a=_0x4adfe0;if(this[_0x52f98a(0x93c)]())return!![];return![];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x84c)]=Game_Action[_0x4adfe0(0x6ec)]['isForRandom'],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xc37)]=function(){const _0x1ed10b=_0x4adfe0;if(this[_0x1ed10b(0xacc)]==='all\x20actors')return![];if(this[_0x1ed10b(0xacc)]===_0x1ed10b(0x933))return![];return this[_0x1ed10b(0x163)]()&&!this[_0x1ed10b(0x4de)]()?this[_0x1ed10b(0x12a)]():VisuMZ[_0x1ed10b(0xa98)][_0x1ed10b(0x84c)]['call'](this);},Game_Action['prototype'][_0x4adfe0(0x12a)]=function(){const _0xdf31ca=_0x4adfe0,_0x499827=this[_0xdf31ca(0x28e)]()[_0xdf31ca(0x178)];return _0x499827[_0xdf31ca(0x634)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x2f1)]=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xc44)],Game_Action[_0x4adfe0(0x6ec)]['isForAll']=function(){const _0x369685=_0x4adfe0;if(this[_0x369685(0xacc)]==='all\x20actors')return!![];if(this['_targetBattlerKey']===_0x369685(0x933))return!![];return VisuMZ[_0x369685(0xa98)][_0x369685(0x2f1)][_0x369685(0x61e)](this);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x4ab)]=function(){const _0x3df7e8=_0x4adfe0;if(!this['item']())return![];if(this[_0x3df7e8(0x471)]())return![];return(this[_0x3df7e8(0x28e)]()[_0x3df7e8(0x15d)]||'')[_0x3df7e8(0x634)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xc9f)]=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x536)],Game_Action['prototype']['testApply']=function(_0x569613){const _0x5e5a96=_0x4adfe0;if(this[_0x5e5a96(0x285)]()&&_0x569613===this[_0x5e5a96(0x92f)]())return![];return VisuMZ[_0x5e5a96(0xa98)][_0x5e5a96(0xc9f)][_0x5e5a96(0x61e)](this,_0x569613);},VisuMZ['BattleCore'][_0x4adfe0(0xcca)]=Game_Action[_0x4adfe0(0x6ec)]['itemTargetCandidates'],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x518)]=function(){const _0x322ff7=_0x4adfe0,_0x4adda7=VisuMZ[_0x322ff7(0xa98)][_0x322ff7(0xcca)]['call'](this);if(this[_0x322ff7(0x285)]())_0x4adda7[_0x322ff7(0xb6e)](this['subject']());return _0x4adda7;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x87c)]=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x336)],Game_Action['prototype'][_0x4adfe0(0x336)]=function(){const _0x23a2e1=_0x4adfe0;return this[_0x23a2e1(0x163)]()&&!this[_0x23a2e1(0x4de)]()?this[_0x23a2e1(0x448)]():VisuMZ[_0x23a2e1(0xa98)][_0x23a2e1(0x87c)][_0x23a2e1(0x61e)](this);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x448)]=function(){const _0x10ddf3=_0x4adfe0,_0x105f6e=this[_0x10ddf3(0x28e)]()[_0x10ddf3(0x178)];if(_0x105f6e['match'](/RANDOM/i))return![];if(_0x105f6e[_0x10ddf3(0x634)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x105f6e[_0x10ddf3(0x634)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x105f6e[_0x10ddf3(0x634)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x105f6e[_0x10ddf3(0x634)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x10ddf3(0xa98)][_0x10ddf3(0x87c)][_0x10ddf3(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x55f)]=Game_Action[_0x4adfe0(0x6ec)]['makeTargets'],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x10c)]=function(){const _0x3e74d2=_0x4adfe0;let _0x51bc13=[];return this['isBattleCoreTargetScope']()?this['isCustomBattleScope']()?_0x3e74d2(0x4dd)===_0x3e74d2(0x4dd)?_0x51bc13=this[_0x3e74d2(0x7e3)]():this['startMotion']('chant'):_0x51bc13=this[_0x3e74d2(0x264)]():_0x51bc13=VisuMZ[_0x3e74d2(0xa98)][_0x3e74d2(0x55f)][_0x3e74d2(0x61e)](this),_0x51bc13=this['applyTargetFilters'](_0x51bc13),_0x51bc13;},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x7b2)]=function(){const _0x2d8227=_0x4adfe0;return this[_0x2d8227(0x92f)]()[_0x2d8227(0x771)]()&&!this['subject']()['isAutoBattle']();},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x7e3)]=function(){const _0x207ebb=_0x4adfe0,_0x5def41=VisuMZ[_0x207ebb(0xa98)]['createKeyJS'](this[_0x207ebb(0x28e)](),'Targets');if(VisuMZ['BattleCore']['JS'][_0x5def41]){if(_0x207ebb(0x62b)===_0x207ebb(0x62b)){targets=VisuMZ[_0x207ebb(0xa98)][_0x207ebb(0x55f)][_0x207ebb(0x61e)](this);const _0x50ec73=VisuMZ[_0x207ebb(0xa98)][_0x207ebb(0x91d)](this[_0x207ebb(0x28e)](),_0x207ebb(0x114));return targets=VisuMZ[_0x207ebb(0xa98)]['JS'][_0x50ec73][_0x207ebb(0x61e)](this,this[_0x207ebb(0x92f)](),targets),this[_0x207ebb(0xa05)](targets);}else this['initialize'](...arguments);}return this[_0x207ebb(0x264)]();},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x264)]=function(){const _0x2abda3=_0x4adfe0;let _0x4c3e5a=[];const _0x21ae3a=String(this[_0x2abda3(0x28e)]()[_0x2abda3(0x178)]);if(this[_0x2abda3(0x769)]()){if(this[_0x2abda3(0x7b2)]()){if(_0x2abda3(0xc0c)==='BuJxC')return _0x4c3e5a=this[_0x2abda3(0x50f)](),this[_0x2abda3(0xa05)](_0x4c3e5a);else _0x5e9fc1[_0x2abda3(0x6ec)]['update'][_0x2abda3(0x61e)](this),this[_0x2abda3(0x7db)](),this[_0x2abda3(0x1e0)](),this[_0x2abda3(0x6d6)](),this[_0x2abda3(0x8fb)]();}else return this[_0x2abda3(0x79f)]=-0x1,_0x4c3e5a[_0x2abda3(0x98e)](...this[_0x2abda3(0x81f)]()),this['repeatTargets'](_0x4c3e5a);}if(this[_0x2abda3(0x6f2)]()){if(this[_0x2abda3(0x7b2)]())return _0x4c3e5a=this[_0x2abda3(0x50f)](),this['repeatTargets'](_0x4c3e5a);else{if('otadf'==='RCPRr'){if(_0x49e76b[_0x2abda3(0xaf5)]()){if(this['turnCount']()<=0x0)return;}else{if(_0x1285ff[_0x2abda3(0x53d)]()<=0x0)return;}}else{if(Imported[_0x2abda3(0x99a)]){if(VisuMZ[_0x2abda3(0xc31)]['version']<1.19){let _0x56c93c='';_0x56c93c+=_0x2abda3(0x40b),_0x56c93c+=_0x2abda3(0x361),_0x56c93c+=_0x2abda3(0x809),alert(_0x56c93c),SceneManager[_0x2abda3(0x162)]();}}return this[_0x2abda3(0x79f)]=-0x1,_0x4c3e5a[_0x2abda3(0x98e)](...this[_0x2abda3(0x9c7)]()),this[_0x2abda3(0xa05)](_0x4c3e5a);}}}if(_0x21ae3a['match'](/(\d+) RANDOM ANY/i)){let _0xfc021=Number(RegExp['$1']);while(_0xfc021--){const _0x1dd07f=Math[_0x2abda3(0xc05)](0x2)===0x0?this['opponentsUnit']():this[_0x2abda3(0x6e8)]();_0x4c3e5a[_0x2abda3(0x98e)](_0x1dd07f['trueRandomTarget']());}return this[_0x2abda3(0xa05)](_0x4c3e5a);}if(_0x21ae3a[_0x2abda3(0x634)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x474519=Number(RegExp['$1']);while(_0x474519--){_0x4c3e5a['push'](this['opponentsUnit']()['trueRandomTarget']());}return this[_0x2abda3(0xa05)](_0x4c3e5a);}if(_0x21ae3a['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if('fJvks'!==_0x2abda3(0x922)){_0x246c4e['prototype'][_0x2abda3(0xcab)]['call'](this),this['contents'][_0x2abda3(0x465)]();if(!this[_0x2abda3(0x85f)]())return;this[_0x2abda3(0x903)]();}else{let _0x1cd168=Number(RegExp['$1']);while(_0x1cd168--){_0x4c3e5a['push'](this[_0x2abda3(0x6e8)]()[_0x2abda3(0x985)]());}return this[_0x2abda3(0xa05)](_0x4c3e5a);}}if(_0x21ae3a[_0x2abda3(0x634)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x4c3e5a['push'](...this['friendsUnit']()[_0x2abda3(0x66d)]()[_0x2abda3(0xcd9)](_0x4c45b0=>_0x4c45b0!==this[_0x2abda3(0x92f)]())),this['repeatTargets'](_0x4c3e5a);return VisuMZ['BattleCore']['Game_Action_makeTargets'][_0x2abda3(0x61e)](this);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x105)]=function(_0x2ec0b5){const _0x176849=_0x4adfe0,_0x1a99fb=[];for(let _0x5e9b10=0x0;_0x5e9b10<this[_0x176849(0x1b2)]();_0x5e9b10++){_0x176849(0xc2d)!=='lcjZT'?this[_0x176849(0x85b)](_0x176849(0x891),this[_0x176849(0x668)]['bind'](this)):_0x1a99fb[_0x176849(0x98e)](_0x2ec0b5[_0x176849(0x985)]());}return _0x1a99fb;},Game_Action['prototype']['applyTargetFilters']=function(_0x318f59){const _0x2a1971=_0x4adfe0;if(!this[_0x2a1971(0x28e)]())return _0x318f59;const _0x56df5b=this[_0x2a1971(0x28e)]()[_0x2a1971(0x15d)];if(this[_0x2a1971(0x285)]()){this['isForAll']()&&_0x318f59[_0x2a1971(0xb6e)](this[_0x2a1971(0x92f)]());if(_0x318f59[_0x2a1971(0x5d0)](this[_0x2a1971(0x92f)]())){const _0x3707c2=this['friendsUnit']()[_0x2a1971(0x66d)]()[_0x2a1971(0xb6e)](this[_0x2a1971(0x92f)]());if(_0x3707c2[_0x2a1971(0xa59)]>0x0){_0x3707c2[_0x2a1971(0x712)]((_0x26f2b5,_0x13ac52)=>_0x26f2b5[_0x2a1971(0x576)]()-_0x13ac52[_0x2a1971(0x576)]());while(_0x318f59['includes'](this[_0x2a1971(0x92f)]())){const _0x10d4cc=_0x318f59[_0x2a1971(0x766)](this[_0x2a1971(0x92f)]());_0x318f59[_0x10d4cc]=_0x3707c2[Math[_0x2a1971(0xc05)](_0x3707c2[_0x2a1971(0xa59)])];}}else _0x318f59[_0x2a1971(0xb6e)](this[_0x2a1971(0x92f)]());}}return _0x318f59;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x8dc)]=Game_Action[_0x4adfe0(0x6ec)]['itemEffectAddAttackState'],Game_Action['prototype']['itemEffectAddAttackState']=function(_0x547901,_0x1c0522){const _0x4267e1=_0x4adfe0;VisuMZ[_0x4267e1(0xa98)][_0x4267e1(0x8dc)]['call'](this,_0x547901,_0x1c0522);if(!_0x547901[_0x4267e1(0x177)]())return;for(const _0x3e1aab of this['subject']()[_0x4267e1(0x663)]()){if(_0x3e1aab===_0x547901[_0x4267e1(0x5e4)]()){let _0x1e26ae=_0x1c0522[_0x4267e1(0x6b2)];_0x1e26ae*=_0x547901[_0x4267e1(0xc88)](_0x3e1aab),_0x1e26ae*=this[_0x4267e1(0x92f)]()[_0x4267e1(0xbbd)](_0x3e1aab),_0x1e26ae*=this['lukEffectRate'](_0x547901),Math[_0x4267e1(0x256)]()<_0x1e26ae&&(_0x547901[_0x4267e1(0xb16)]=!![],this[_0x4267e1(0x170)](_0x547901));}}},VisuMZ['BattleCore']['Game_Action_itemEffectAddNormalState']=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x461)],Game_Action[_0x4adfe0(0x6ec)]['itemEffectAddNormalState']=function(_0x296890,_0x5dcead){const _0x1e4c1f=_0x4adfe0;VisuMZ[_0x1e4c1f(0xa98)][_0x1e4c1f(0xb4c)][_0x1e4c1f(0x61e)](this,_0x296890,_0x5dcead);if(!_0x296890[_0x1e4c1f(0x177)]())return;if(_0x5dcead[_0x1e4c1f(0x1de)]!==_0x296890['deathStateId']())return;let _0xfdbd7d=_0x5dcead[_0x1e4c1f(0x6b2)];!this[_0x1e4c1f(0xa19)]()&&(_0x1e4c1f(0x97b)!==_0x1e4c1f(0xa40)?(_0xfdbd7d*=_0x296890[_0x1e4c1f(0xc88)](_0x5dcead[_0x1e4c1f(0x1de)]),_0xfdbd7d*=this['lukEffectRate'](_0x296890)):(_0x5b30f3(_0x374e98[_0x1e4c1f(0x31d)]('STB')),_0x2aae2d['exit']())),Math[_0x1e4c1f(0x256)]()<_0xfdbd7d&&(_0x1e4c1f(0xcec)!==_0x1e4c1f(0x575)?(_0x296890[_0x1e4c1f(0xb16)]=!![],this[_0x1e4c1f(0x170)](_0x296890)):this[_0x1e4c1f(0xacc)]=_0x1379be['battlerKey']());},VisuMZ[_0x4adfe0(0xa98)]['Game_Action_applyGlobal']=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xb05)],Game_Action[_0x4adfe0(0x6ec)]['applyGlobal']=function(){const _0x30f689=_0x4adfe0;VisuMZ[_0x30f689(0xa98)]['Game_Action_applyGlobal'][_0x30f689(0x61e)](this),this[_0x30f689(0xaa9)](),this[_0x30f689(0x675)]();},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xaa9)]=function(){const _0x4bb142=_0x4adfe0;if(!SceneManager[_0x4bb142(0xcfa)]())return;const _0x24d93d=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x5447ce=this[_0x4bb142(0x28e)]()[_0x4bb142(0x15d)][_0x4bb142(0x634)](_0x24d93d);if(_0x5447ce)for(const _0x2b0196 of _0x5447ce){if(!_0x2b0196)continue;_0x2b0196[_0x4bb142(0x634)](_0x24d93d);const _0x26bd28=String(RegExp['$1'])['split'](',')[_0x4bb142(0x2f7)](_0x3a4268=>String(_0x3a4268)['trim']()),_0x29eec4=_0x26bd28[_0x4bb142(0x2f7)](_0x17af60=>DataManager[_0x4bb142(0xcda)](_0x17af60));for(const _0x86315e of _0x29eec4){const _0x129463=$dataCommonEvents[_0x86315e];_0x129463&&$gameTemp[_0x4bb142(0xe3)](_0x86315e);}}},DataManager['getCommonEventIdWithName']=function(_0x24c842){const _0x77a4f=_0x4adfe0;_0x24c842=_0x24c842[_0x77a4f(0xb24)]()[_0x77a4f(0xb83)](),this[_0x77a4f(0x194)]=this[_0x77a4f(0x194)]||{};if(this[_0x77a4f(0x194)][_0x24c842])return this[_0x77a4f(0x194)][_0x24c842];for(const _0x1d6565 of $dataCommonEvents){if(!_0x1d6565)continue;let _0x242dd1=_0x1d6565[_0x77a4f(0xa23)];_0x242dd1=_0x242dd1['replace'](/\x1I\[(\d+)\]/gi,''),_0x242dd1=_0x242dd1[_0x77a4f(0x335)](/\\I\[(\d+)\]/gi,''),this[_0x77a4f(0x194)][_0x242dd1[_0x77a4f(0xb24)]()[_0x77a4f(0xb83)]()]=_0x1d6565['id'];}return this['_commonEventIDs'][_0x24c842]||0x0;},Game_Action['prototype']['resetResultSwitches']=function(){const _0x3c330d=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;const _0xd38bc7=VisuMZ['BattleCore']['Settings'][_0x3c330d(0x4e9)];_0xd38bc7[_0x3c330d(0x150)]&&$gameSwitches['setValue'](_0xd38bc7['SwitchCritical'],![]),_0xd38bc7[_0x3c330d(0x27f)]&&$gameSwitches[_0x3c330d(0x8b3)](_0xd38bc7[_0x3c330d(0x27f)],![]),_0xd38bc7[_0x3c330d(0x718)]&&$gameVariables[_0x3c330d(0x8b3)](_0xd38bc7[_0x3c330d(0x718)],0x0),_0xd38bc7[_0x3c330d(0xc6b)]&&$gameVariables[_0x3c330d(0x8b3)](_0xd38bc7[_0x3c330d(0xc6b)],0x0);},Game_Action['prototype'][_0x4adfe0(0x571)]=function(_0xf7b2a9){const _0x1d580f=_0x4adfe0;if(!SceneManager[_0x1d580f(0xcfa)]())return;if(!_0xf7b2a9)return;const _0x1962c8=_0xf7b2a9['result'](),_0x34d3e1=VisuMZ['BattleCore'][_0x1d580f(0x5bc)][_0x1d580f(0x4e9)];_0x34d3e1[_0x1d580f(0x150)]&&_0x1962c8['critical']&&$gameSwitches['setValue'](_0x34d3e1[_0x1d580f(0x150)],!![]);_0x34d3e1[_0x1d580f(0x27f)]&&(_0x1962c8[_0x1d580f(0xa53)]||_0x1962c8['evaded'])&&$gameSwitches['setValue'](_0x34d3e1[_0x1d580f(0x27f)],!![]);if(_0x34d3e1[_0x1d580f(0x718)]){if(_0x1d580f(0x752)!=='SYZZg')_0x367a1e=(_0x4ff676+_0x2e2337)/0x2;else{let _0x2d19c4=$gameVariables[_0x1d580f(0x965)](_0x34d3e1[_0x1d580f(0x718)]);_0x1962c8['hpDamage']>0x0&&(_0x2d19c4+=Math[_0x1d580f(0x6b7)](_0x1962c8[_0x1d580f(0x4f3)])),$gameVariables[_0x1d580f(0x8b3)](_0x34d3e1[_0x1d580f(0x718)],_0x2d19c4);}}if(_0x34d3e1['VariableHeal']){let _0x3a7134=$gameVariables[_0x1d580f(0x965)](_0x34d3e1[_0x1d580f(0xc6b)]);_0x1962c8[_0x1d580f(0x4f3)]<0x0&&(_0x3a7134+=Math['abs'](_0x1962c8[_0x1d580f(0x4f3)])),$gameVariables[_0x1d580f(0x8b3)](_0x34d3e1[_0x1d580f(0xc6b)],_0x3a7134);}},VisuMZ[_0x4adfe0(0xa98)]['LifeStealRegExp']={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x7f8)]=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x290)],Game_Action['prototype'][_0x4adfe0(0x290)]=function(_0x3e34d8,_0x433f09){const _0x45b15b=_0x4adfe0;VisuMZ[_0x45b15b(0xa98)][_0x45b15b(0x7f8)][_0x45b15b(0x61e)](this,_0x3e34d8,_0x433f09),!this[_0x45b15b(0x8f3)]()&&_0x3e34d8&&_0x3e34d8['result']()[_0x45b15b(0x4f3)]>0x0&&this[_0x45b15b(0xa77)]('HP',_0x3e34d8,_0x3e34d8[_0x45b15b(0x393)]()[_0x45b15b(0x4f3)]);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x239)]=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x2a8)],Game_Action[_0x4adfe0(0x6ec)]['executeMpDamage']=function(_0x49e238,_0x5afac0){const _0x26630a=_0x4adfe0;VisuMZ[_0x26630a(0xa98)][_0x26630a(0x239)][_0x26630a(0x61e)](this,_0x49e238,_0x5afac0),!this[_0x26630a(0x8f3)]()&&_0x49e238&&_0x49e238[_0x26630a(0x393)]()[_0x26630a(0xace)]>0x0&&this['performLifeSteal']('MP',_0x49e238,_0x49e238[_0x26630a(0x393)]()[_0x26630a(0xace)]);},Game_Action[_0x4adfe0(0x6ec)]['performLifeSteal']=function(_0x276446,_0x58244c,_0x58f14b){const _0x2641d8=_0x4adfe0;_0x276446=_0x276446['toUpperCase']()[_0x2641d8(0xb83)]();const _0x419e7e=this[_0x2641d8(0x913)](_0x276446,_0x58244c);if(_0x419e7e<=0x0)return;const _0x42f9fd=Math[_0x2641d8(0xb95)](_0x58f14b*_0x419e7e);if(_0x42f9fd<=0x0)return;let _0x4876f0=this['subject']();if(this[_0x2641d8(0x97e)])_0x4876f0=this[_0x2641d8(0x97e)];const _0x23dae5=_0x58244c[_0x2641d8(0x67b)](_0x276446)?-0x1:0x1;if(_0x276446==='HP')_0x4876f0['gainHp'](_0x23dae5*_0x42f9fd);if(_0x276446==='MP')_0x4876f0['gainMp'](_0x23dae5*_0x42f9fd);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x913)]=function(_0x4f53dd,_0x5f16c7){const _0x3dbe77=_0x4adfe0;if(this[_0x3dbe77(0xc07)](_0x4f53dd))return 0x0;if(this['subject']()['isDisarmLifeSteal'](_0x4f53dd))return 0x0;if(_0x5f16c7['isGuardLifeSteal'](_0x4f53dd))return 0x0;let _0x46906d=0x0;return _0x46906d+=this[_0x3dbe77(0x81c)](_0x4f53dd),_0x46906d+=this[_0x3dbe77(0x92f)]()['lifeStealRate'](_0x4f53dd,this[_0x3dbe77(0x28e)]()[_0x3dbe77(0x286)]),_0x46906d['clamp'](0x0,0x1);},Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0xc07)]=function(_0x680cf8){const _0x567952=_0x4adfe0;_0x680cf8=_0x680cf8['toUpperCase']()[_0x567952(0xb83)]();const _0x3c20de=VisuMZ[_0x567952(0xa98)][_0x567952(0x69b)],_0xe4f5dc=this[_0x567952(0x28e)]()['note']||'';if(_0xe4f5dc[_0x567952(0x634)](_0x3c20de[_0x567952(0x717)]))return _0x567952(0x918)!==_0x567952(0x89d)?!![]:[_0x1ec0a3][_0x567952(0x197)](_0x20cded);if(_0x680cf8==='HP'&&_0xe4f5dc['match'](_0x3c20de[_0x567952(0x22f)])){if('EXUAb'!=='UjeBF')return!![];else{_0x1bf2f9[_0x567952(0x3af)](_0x4c13d6);if(_0x2b524e)_0x4dca74['atbInterrupt']();}}if(_0x680cf8==='MP'&&_0xe4f5dc[_0x567952(0x634)](_0x3c20de[_0x567952(0x8c8)]))return _0x567952(0x715)!=='ponDA'?!![]:_0x4a3282[_0x567952(0xcfa)]()?(_0x1f7a47['_scene'][_0x567952(0x898)][_0x567952(0x6d2)](_0xc10ecb[0x0],_0x347e7a[0x1]),!![]):_0x1fc94d[_0x567952(0xa98)]['Game_Interpreter_command283']['call'](this,_0x2262a9);return![];},Game_Action['prototype'][_0x4adfe0(0x81c)]=function(_0x531ab6){const _0x4ab2ea=_0x4adfe0,_0x1fc907=VisuMZ[_0x4ab2ea(0xa98)][_0x4ab2ea(0x69b)],_0x1e4612=this[_0x4ab2ea(0x28e)]()[_0x4ab2ea(0x15d)]||'';_0x531ab6=_0x531ab6[_0x4ab2ea(0xb24)]()[_0x4ab2ea(0xb83)]();const _0x40552a=_0x1e4612[_0x4ab2ea(0x634)](_0x1fc907[_0x4ab2ea(0x75a)]);if(_0x40552a)for(const _0x2aa7e6 of _0x40552a){if(_0x4ab2ea(0x696)===_0x4ab2ea(0xaaa)){if(!_0x208ed4[_0x4ab2ea(0x6ec)][_0x4ab2ea(0x189)][_0x4ab2ea(0x61e)](this,_0x5d624a))return!![];if(!_0x358157[_0x4ab2ea(0x6ec)][_0x4ab2ea(0xc6c)][_0x4ab2ea(0x61e)](this,_0x2d13cd))return!![];if(!_0x15b758[_0x4ab2ea(0x6ec)][_0x4ab2ea(0x8b7)][_0x4ab2ea(0x61e)](this,_0x1c6563))return!![];}else{_0x2aa7e6[_0x4ab2ea(0x634)](_0x1fc907['lifeSteaItem']);const _0x10611=String(RegExp['$1'])[_0x4ab2ea(0xb24)]()[_0x4ab2ea(0xb83)](),_0xc0d2b1=Number(RegExp['$2'])*0.01;if(_0x10611!==_0x531ab6)continue;return _0xc0d2b1;}}return 0x0;},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x913)]=function(_0x3dedf7,_0x168f83){const _0x44f6f4=_0x4adfe0,_0x1d1344=VisuMZ[_0x44f6f4(0xa98)]['LifeStealRegExp'];let _0x26046f=0x0;_0x3dedf7=_0x3dedf7[_0x44f6f4(0xb24)]()['trim']();for(const _0x2ec95e of this[_0x44f6f4(0xb13)]()){if(_0x44f6f4(0xb8f)==='ZHEFo'){if(!_0x2ec95e)continue;const _0x39e6de=_0x2ec95e[_0x44f6f4(0x15d)]||'',_0xdbe849=_0x39e6de[_0x44f6f4(0x634)](_0x1d1344[_0x44f6f4(0x136)]);if(_0xdbe849){if(_0x44f6f4(0xb15)==='bLBPN')for(const _0x114c19 of _0xdbe849){_0x114c19['match'](_0x1d1344[_0x44f6f4(0x136)]);const _0xd61bd6=String(RegExp['$1'])[_0x44f6f4(0xb24)]()[_0x44f6f4(0xb83)](),_0x3aa063=String(RegExp['$2']),_0x2b0e59=Number(RegExp['$3'])*0.01;if(_0xd61bd6!==_0x3dedf7)continue;if(_0x168f83===Game_Action[_0x44f6f4(0xcbf)]&&_0x3aa063[_0x44f6f4(0x634)](/CERTAIN/i))_0x26046f+=_0x2b0e59;else{if(_0x168f83===Game_Action['HITTYPE_PHYSICAL']&&_0x3aa063[_0x44f6f4(0x634)](/PHYS/i))'dpddm'!==_0x44f6f4(0x59a)?_0x26046f+=_0x2b0e59:_0x295b6c['setBattleCameraOffset'](0x0,0x0,_0x3b08e2[_0x44f6f4(0x96d)],_0x35c39e['EasingType']);else _0x168f83===Game_Action[_0x44f6f4(0xa79)]&&_0x3aa063[_0x44f6f4(0x634)](/MAGIC/i)&&(_0x26046f+=_0x2b0e59);}}else{let _0x1f67c3=_0x44f6f4(0x27b);if(this[_0x44f6f4(0x3a1)](_0x1f67c3))return this[_0x44f6f4(0xc42)][_0x1f67c3];return this['_cache'][_0x1f67c3]=this['createBattleUIOffsetY'](this[_0x44f6f4(0xcf8)]()),this['_cache'][_0x1f67c3];}}}else return _0x2ead76[_0x44f6f4(0x66d)]()['filter'](_0xae81dc=>_0xae81dc!==_0xcafeb4);}return _0x26046f;},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x7dc)]=function(_0x5476a4){const _0x5042c0=_0x4adfe0;_0x5476a4=_0x5476a4[_0x5042c0(0xb24)]()['trim']();const _0x17efff=VisuMZ['BattleCore'][_0x5042c0(0x69b)];for(const _0x5a4cd7 of this[_0x5042c0(0xb13)]()){if(_0x5042c0(0x2b8)!==_0x5042c0(0x149)){if(!_0x5a4cd7)continue;const _0x30d880=_0x5a4cd7['note']||'';if(_0x30d880[_0x5042c0(0x634)](_0x17efff['disarmLifeSteal']))return _0x5042c0(0x77b)!==_0x5042c0(0x4ea)?!![]:_0x1a516b[_0x5042c0(0x9ab)];if(_0x5476a4==='HP'&&_0x30d880['match'](_0x17efff[_0x5042c0(0x295)]))return!![];if(_0x5476a4==='MP'&&_0x30d880[_0x5042c0(0x634)](_0x17efff[_0x5042c0(0x695)]))return!![];}else{let _0x1e694c=this['createString'](_0x487d0f);const _0x32fbc6=this[_0x5042c0(0x459)](),_0x511541=_0x390775['floor'](_0x32fbc6*0.75);for(let _0x529660=0x0;_0x529660<_0x1e694c[_0x5042c0(0xa59)];_0x529660++){const _0x12b70d=this[_0x5042c0(0x80e)](_0x511541,_0x32fbc6);_0x12b70d[_0x5042c0(0x932)][_0x5042c0(0xafa)](_0x1e694c[_0x529660],0x0,0x0,_0x511541,_0x32fbc6,'center'),_0x12b70d['x']=(_0x529660-(_0x1e694c[_0x5042c0(0xa59)]-0x1)/0x2)*_0x511541,_0x12b70d['dy']=-_0x529660;}}}return![];},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x67b)]=function(_0x284d7d){const _0x131327=_0x4adfe0;_0x284d7d=_0x284d7d[_0x131327(0xb24)]()[_0x131327(0xb83)]();const _0x564a8d=VisuMZ[_0x131327(0xa98)]['LifeStealRegExp'];for(const _0x4cb6cc of this[_0x131327(0xb13)]()){if('RiTvp'!==_0x131327(0x558))_0x51ecb6[_0x131327(0xa98)][_0x131327(0x519)]['call'](this,_0xbf6862);else{if(!_0x4cb6cc)continue;const _0x298cdc=_0x4cb6cc[_0x131327(0x15d)]||'';if(_0x298cdc['match'](_0x564a8d[_0x131327(0x52d)])){if(_0x131327(0x818)!=='WjLAw')return!![];else _0x397101=_0x4fada1[_0x131327(0x9a6)];}if(_0x284d7d==='HP'&&_0x298cdc[_0x131327(0x634)](_0x564a8d[_0x131327(0xa95)])){if(_0x131327(0x96f)===_0x131327(0x96f))return!![];else{if(this[_0x131327(0x58c)]())_0x271251[_0x131327(0xa98)]['Sprite_Enemy_updateBossCollapse'][_0x131327(0x61e)](this);}}if(_0x284d7d==='MP'&&_0x298cdc['match'](_0x564a8d[_0x131327(0xac2)])){if(_0x131327(0x686)===_0x131327(0x686))return!![];else{const _0x124dd0=this[_0x131327(0x80e)](_0x1a57f0,_0x57f4cf);_0x124dd0[_0x131327(0x932)][_0x131327(0xafa)](_0x33b2f0[_0x1aa6b2],0x0,0x0,_0x25e183,_0x1da1cb,_0x131327(0x379)),_0x124dd0['x']=(_0x57e64d-(_0x11aed3[_0x131327(0xa59)]-0x1)/0x2)*_0x3524a0,_0x124dd0['dy']=-_0xad2421;}}}}return![];},Game_BattlerBase['prototype']['isGuardLifeSteal']=function(_0x587cf5){const _0x1e848e=_0x4adfe0;_0x587cf5=_0x587cf5[_0x1e848e(0xb24)]()[_0x1e848e(0xb83)]();const _0xf0ccbb=VisuMZ[_0x1e848e(0xa98)]['LifeStealRegExp'];for(const _0x1449c4 of this['traitObjects']()){if('SpNzz'===_0x1e848e(0xacd)){_0xdf932f['changeWeather'](_0x132a4f[0x0],_0x41bb61[0x1],_0x29e5f5[0x2]);if(_0x501c44[0x3])this[_0x1e848e(0x733)](_0x13672f[0x2]);return!![];}else{if(!_0x1449c4)continue;const _0x13f7d1=_0x1449c4[_0x1e848e(0x15d)]||'';if(_0x13f7d1['match'](_0xf0ccbb[_0x1e848e(0xfd)]))return!![];if(_0x587cf5==='HP'&&_0x13f7d1[_0x1e848e(0x634)](_0xf0ccbb[_0x1e848e(0x9ae)]))return!![];if(_0x587cf5==='MP'&&_0x13f7d1[_0x1e848e(0x634)](_0xf0ccbb[_0x1e848e(0xb33)]))return _0x1e848e(0x65f)===_0x1e848e(0x65f)?!![]:(this[_0x1e848e(0x51b)](_0x12681c[0x0],_0x34aa2b[0x1],_0x30efdd=>{const _0x5522d7=_0x1e848e;!_0x30efdd[_0x5522d7(0xac8)]()&&(_0x30efdd[_0x5522d7(0x8c4)](_0xef64c[0x2],_0xc56eee[0x3]),_0x47d763[_0x5522d7(0x8c4)](_0x30efdd));}),!![]);}}return![];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x510)]=Game_BattlerBase[_0x4adfe0(0x6ec)]['initMembers'],Game_BattlerBase['prototype'][_0x4adfe0(0x7d4)]=function(){const _0x493dbf=_0x4adfe0;VisuMZ[_0x493dbf(0xa98)]['Game_BattlerBase_initMembers'][_0x493dbf(0x61e)](this),this[_0x493dbf(0x46b)]();},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x46b)]=function(){const _0x1dc72d=_0x4adfe0;this[_0x1dc72d(0xb9c)]=![];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x1c4)]=Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0xcab)],Game_BattlerBase['prototype'][_0x4adfe0(0xcab)]=function(){const _0x5cb4b1=_0x4adfe0;this[_0x5cb4b1(0xc42)]={},VisuMZ[_0x5cb4b1(0xa98)][_0x5cb4b1(0x1c4)][_0x5cb4b1(0x61e)](this);},Game_BattlerBase[_0x4adfe0(0x6ec)]['checkCacheKey']=function(_0x26dd15){const _0x3b8302=_0x4adfe0;return this['_cache']=this[_0x3b8302(0xc42)]||{},this[_0x3b8302(0xc42)][_0x26dd15]!==undefined;},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x94d)]=function(){const _0x446440=_0x4adfe0;if(this[_0x446440(0xc42)][_0x446440(0x94d)]!==undefined)return this[_0x446440(0xc42)][_0x446440(0x94d)];const _0x1d3fc7=/<DAMAGE CAP:[ ](\d+)>/i,_0x3b5a11=this[_0x446440(0xb13)]()[_0x446440(0x2f7)](_0x2d2f53=>_0x2d2f53&&_0x2d2f53[_0x446440(0x15d)]['match'](_0x1d3fc7)?Number(RegExp['$1']):0x0);let _0xe356c0=_0x3b5a11['length']>0x0?Math[_0x446440(0x7a0)](..._0x3b5a11):0x0;if(_0xe356c0<=0x0)_0xe356c0=VisuMZ[_0x446440(0xa98)]['Settings'][_0x446440(0x676)][_0x446440(0x7c1)];return this[_0x446440(0xc42)][_0x446440(0x94d)]=_0xe356c0,this[_0x446440(0xc42)][_0x446440(0x94d)];},Game_BattlerBase['prototype'][_0x4adfe0(0xa1b)]=function(){const _0x2d8eb8=_0x4adfe0;if(this[_0x2d8eb8(0xc42)][_0x2d8eb8(0x30c)]!==undefined)return this[_0x2d8eb8(0xc42)]['softDamageCap'];let _0x3fcbf8=VisuMZ[_0x2d8eb8(0xa98)][_0x2d8eb8(0x5bc)][_0x2d8eb8(0x676)][_0x2d8eb8(0x4d5)];const _0x41c2e1=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4c426a=this[_0x2d8eb8(0xb13)]()[_0x2d8eb8(0x2f7)](_0x328424=>_0x328424&&_0x328424['note']['match'](_0x41c2e1)?Number(RegExp['$1'])/0x64:0x0);return _0x3fcbf8=_0x4c426a[_0x2d8eb8(0x127)]((_0x3a828a,_0x350420)=>_0x3a828a+_0x350420,_0x3fcbf8),this[_0x2d8eb8(0xc42)][_0x2d8eb8(0x30c)]=_0x3fcbf8,this[_0x2d8eb8(0xc42)][_0x2d8eb8(0x30c)][_0x2d8eb8(0x548)](0.01,0x1);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xb89)]=Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0xc43)],Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0xc43)]=function(){const _0x148ae5=_0x4adfe0;VisuMZ[_0x148ae5(0xa98)][_0x148ae5(0xb89)][_0x148ae5(0x61e)](this);if(SceneManager[_0x148ae5(0xcfa)]()){if(_0x148ae5(0x5c3)==='vhwjt'){const _0x30a86f=this[_0x148ae5(0x1d3)],_0x3897fb=_0x1d374c[_0x148ae5(0xc21)](),_0xb7ca12=_0x38a232['x']+_0x514861[_0x148ae5(0xa55)](_0x3c8f6a['width']/0x2)+_0x3897fb;_0x30a86f['x']=_0x30a86f[_0x148ae5(0x1e2)]/-0x2+_0xb7ca12,_0x30a86f['y']=_0x5265c8[_0x148ae5(0xa55)](_0x2977a3[_0x148ae5(0x6a1)]/0x2);}else this['requestMotion']('dead');}},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0xc66)]=function(){const _0x55fa67=_0x4adfe0;if(!SceneManager[_0x55fa67(0xcfa)]())return null;if(!SceneManager[_0x55fa67(0x726)]['_spriteset'])return null;return SceneManager[_0x55fa67(0x726)][_0x55fa67(0x898)]['findTargetSprite'](this);},Game_BattlerBase[_0x4adfe0(0x6ec)]['svBattlerAnchorX']=function(){const _0x50dae1=_0x4adfe0;return VisuMZ[_0x50dae1(0xa98)][_0x50dae1(0x5bc)][_0x50dae1(0x2e2)]['AnchorX'];},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x5e8)]=function(){const _0x334267=_0x4adfe0;return VisuMZ[_0x334267(0xa98)][_0x334267(0x5bc)][_0x334267(0x2e2)]['AnchorY'];},Game_BattlerBase[_0x4adfe0(0x6ec)]['svBattlerShadowVisible']=function(){const _0x2056b3=_0x4adfe0;if(this[_0x2056b3(0x771)]&&this[_0x2056b3(0x771)]()){if(_0x2056b3(0x5ed)!==_0x2056b3(0x74b))return VisuMZ[_0x2056b3(0xa98)][_0x2056b3(0x5bc)][_0x2056b3(0x2e2)]['Shadow'];else{const _0x1fc4df=this['autoBattleWindowRect']();this[_0x2056b3(0xbc4)]=new _0x31921b(_0x1fc4df),this[_0x2056b3(0xbc4)][_0x2056b3(0x9e8)](),this[_0x2056b3(0x607)](this[_0x2056b3(0xbc4)]);}}else return VisuMZ[_0x2056b3(0xa98)]['Settings'][_0x2056b3(0x30b)][_0x2056b3(0x6ca)];},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x407)]=function(){return!![];},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0xc18)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x4adfe0(0x27b)]=function(){return 0x0;},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x76f)]=function(_0x29a4c0){const _0x544cd0=_0x4adfe0;if(!_0x29a4c0)return 0x0;let _0x526261=0x0;const _0x5bbef0=_0x29a4c0['note'];return _0x5bbef0[_0x544cd0(0x634)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x526261+=Number(RegExp['$1'])),_0x5bbef0['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x526261+=Number(RegExp['$1'])),_0x526261;},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x278)]=function(_0x551f2b){const _0x3a3d09=_0x4adfe0;if(!_0x551f2b)return 0x0;let _0x33988d=0x0;const _0x46299b=_0x551f2b[_0x3a3d09(0x15d)];return _0x46299b[_0x3a3d09(0x634)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x33988d+=Number(RegExp['$1'])),_0x46299b[_0x3a3d09(0x634)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x33988d+=Number(RegExp['$2'])),_0x33988d;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x3f3)]=Game_BattlerBase[_0x4adfe0(0x6ec)]['isStateResist'],Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x2ce)]=function(_0x35647a){const _0x286c70=_0x4adfe0;if(_0x35647a===this[_0x286c70(0x5e4)]()&&this['isImmortal']())return!![];return VisuMZ[_0x286c70(0xa98)]['Game_BattlerBase_isStateResist'][_0x286c70(0x61e)](this,_0x35647a);},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x177)]=function(){const _0x52737e=_0x4adfe0;return this[_0x52737e(0xb9c)];},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0xa9f)]=function(_0x393111){const _0xa83cbf=_0x4adfe0;if(_0x393111){if('RjuMz'===_0xa83cbf(0x6d5))this[_0xa83cbf(0x3bb)]();else{let _0xebaf59=this[_0xa83cbf(0x742)]()?_0x3fb6b1['ALL_ACTORS']:_0xc22528[_0xa83cbf(0x4c0)];if(_0xe9a83f['VisuMZ_0_CoreEngine']&&_0x73b588['SHOW_BUTTON']){this['_buttonKey']=this['forActor']()?_0xa83cbf(0x891):'pageup',this['_buttonText']=_0x4ec08a[_0xa83cbf(0x1ae)](this[_0xa83cbf(0xc8d)]);const _0x3643ad=_0x9cbc7d[_0xa83cbf(0xaa0)][_0xa83cbf(0x5bc)][_0xa83cbf(0x241)][_0xa83cbf(0x42e)];_0xebaf59=_0x3643ad['format'](this[_0xa83cbf(0x5ce)],_0xebaf59);}this['addCommand'](_0xebaf59,_0xa83cbf(0x11e));}}else this[_0xa83cbf(0x572)]();},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x3bb)]=function(){const _0x2acf95=_0x4adfe0;if(this[_0x2acf95(0xc5a)]())return;this[_0x2acf95(0xb9c)]=!![],this[_0x2acf95(0xb16)]=![];},Game_BattlerBase[_0x4adfe0(0x6ec)]['removeImmortal']=function(){const _0x2ae26f=_0x4adfe0,_0x43b756=this[_0x2ae26f(0xb82)]();this[_0x2ae26f(0xb9c)]=![],_0x43b756&&this['_deathStateApplied']&&this[_0x2ae26f(0xc43)](),this[_0x2ae26f(0xb16)]=![],this[_0x2ae26f(0xcab)](),this[_0x2ae26f(0xc5a)]()&&_0x43b756&&(this[_0x2ae26f(0xccc)](),this[_0x2ae26f(0x47e)]());},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x4cf)]=Game_Action[_0x4adfe0(0x6ec)]['numRepeats'],Game_Action['prototype'][_0x4adfe0(0x20e)]=function(){const _0x652363=_0x4adfe0;if(this[_0x652363(0x28e)]()){if(_0x652363(0x39a)!==_0x652363(0x39a)){if(_0x54d185===this[_0x652363(0x5e4)]()&&this[_0x652363(0x177)]())return!![];return _0x4976be[_0x652363(0xa98)][_0x652363(0x3f3)][_0x652363(0x61e)](this,_0x3d8453);}else return VisuMZ[_0x652363(0xa98)]['Game_Action_numRepeats'][_0x652363(0x61e)](this);}else return 0x0;},VisuMZ[_0x4adfe0(0xa98)]['Game_Action_setAttack']=Game_Action[_0x4adfe0(0x6ec)]['setAttack'],Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x66a)]=function(){const _0x590f32=_0x4adfe0;this[_0x590f32(0x92f)]()&&this['subject']()[_0x590f32(0x64c)]()?VisuMZ[_0x590f32(0xa98)][_0x590f32(0x6ed)][_0x590f32(0x61e)](this):this[_0x590f32(0x465)]();},VisuMZ[_0x4adfe0(0xa98)]['Game_BattlerBase_canAttack']=Game_BattlerBase['prototype'][_0x4adfe0(0x64c)],Game_BattlerBase[_0x4adfe0(0x6ec)]['canAttack']=function(){const _0xaf7185=_0x4adfe0;if(!this[_0xaf7185(0x786)]())return![];return VisuMZ['BattleCore'][_0xaf7185(0x570)][_0xaf7185(0x61e)](this);},Game_BattlerBase['prototype'][_0x4adfe0(0x786)]=function(){const _0x4d11bb=_0x4adfe0;for(const _0x240583 of this[_0x4d11bb(0xb13)]()){if(!_0x240583)continue;if(_0x240583[_0x4d11bb(0x15d)][_0x4d11bb(0x634)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x7d7)]=Game_Action[_0x4adfe0(0x6ec)][_0x4adfe0(0x38c)],Game_Action[_0x4adfe0(0x6ec)]['setGuard']=function(){const _0x5dfbc7=_0x4adfe0;this[_0x5dfbc7(0x92f)]()[_0x5dfbc7(0x204)]()&&VisuMZ[_0x5dfbc7(0xa98)][_0x5dfbc7(0x7d7)]['call'](this);},VisuMZ['BattleCore'][_0x4adfe0(0x416)]=Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x204)],Game_BattlerBase['prototype'][_0x4adfe0(0x204)]=function(){const _0x4f7ba1=_0x4adfe0;if(!this[_0x4f7ba1(0x8c0)]())return![];return VisuMZ[_0x4f7ba1(0xa98)][_0x4f7ba1(0x416)][_0x4f7ba1(0x61e)](this);},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x8c0)]=function(){const _0x226222=_0x4adfe0;for(const _0x2362eb of this[_0x226222(0xb13)]()){if(_0x226222(0x626)==='EPbVW'){if(!_0x2362eb)continue;if(_0x2362eb[_0x226222(0x15d)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}else{if(!_0x51cfce[_0x226222(0xa98)][_0x226222(0x5bc)][_0x226222(0x109)][_0x226222(0x4c5)])return;_0xd46c57[_0x226222(0xa98)]['Window_BattleLog_displayTpDamage']['call'](this,_0x2cee5a);}}return!![];},Game_BattlerBase[_0x4adfe0(0x6ec)]['canUseItemCommand']=function(){const _0x2fb2e3=_0x4adfe0;for(const _0x41eb14 of this[_0x2fb2e3(0xb13)]()){if(_0x2fb2e3(0x2d5)===_0x2fb2e3(0x2d5)){if(!_0x41eb14)continue;if(_0x41eb14[_0x2fb2e3(0x15d)][_0x2fb2e3(0x634)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}else this[_0x2fb2e3(0x545)]()[_0x2fb2e3(0x607)](_0x53bca0),_0x5ea248['battleStatusSprite']=!![];}return!![];},VisuMZ['BattleCore'][_0x4adfe0(0x4ac)]=Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0xbb7)],Game_BattlerBase['prototype']['meetsUsableItemConditions']=function(_0x528984){const _0x2517d3=_0x4adfe0;if(_0x528984&&_0x528984['note']['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x2517d3(0xc84)!=='WdCTt'){if(!_0x191301[_0x2517d3(0x7b7)]())return;_0x3a9d4d[_0x2517d3(0x1ce)](this[_0x2517d3(0x710)][_0x2517d3(0x2f7)](_0x207946=>_0x207946[_0x2517d3(0xa23)])['join']('\x0a'));}else{const _0x396340=this[_0x2517d3(0x6e8)]()[_0x2517d3(0x66d)]();if(_0x396340['length']===0x1&&_0x396340[0x0]===this)return![];}}return VisuMZ[_0x2517d3(0xa98)][_0x2517d3(0x4ac)]['call'](this,_0x528984);},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xab4)]=function(){const _0x4989a6=_0x4adfe0;return VisuMZ[_0x4989a6(0xa98)][_0x4989a6(0x5bc)]['Mechanics'][_0x4989a6(0x90a)];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x2a4)]=Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x859)],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x859)]=function(){const _0x2c3204=_0x4adfe0;if(SceneManager['isSceneBattle']()){if(BattleManager[_0x2c3204(0xaf5)]()){if(this[_0x2c3204(0x53d)]()<=0x0)return;}else{if($gameTroop[_0x2c3204(0x53d)]()<=0x0)return;}}if(SceneManager[_0x2c3204(0xcfa)]()&&BattleManager[_0x2c3204(0xaf5)]()&&this[_0x2c3204(0x233)]===Graphics['frameCount']){if(_0x2c3204(0x35f)!==_0x2c3204(0x35f)){return!_0x25da61[_0x2c3204(0x1bc)]()&&this[_0x2c3204(0x26e)]&&this[_0x2c3204(0x26e)][_0x2c3204(0x771)]();return!_0x148e92[_0x2c3204(0x1bc)]()&&this[_0x2c3204(0x26e)]&&this[_0x2c3204(0x26e)][_0x2c3204(0x771)]()&&_0x46c41e['prototype'][_0x2c3204(0xca7)]()===_0x2c3204(0xcac);}else return;}this['_lastRegenFrameCount']=Graphics[_0x2c3204(0x9c9)];SceneManager['isSceneBattle']()&&this['processBattleCoreJS']('PreRegenerateJS');VisuMZ['BattleCore'][_0x2c3204(0x2a4)]['call'](this);if(SceneManager[_0x2c3204(0xcfa)]()){if(_0x2c3204(0x457)===_0x2c3204(0x8fc))return _0x94f9cb['BattleCore']['Window_Options_statusText'][_0x2c3204(0x61e)](this,_0x289b05);else this[_0x2c3204(0x765)](),this[_0x2c3204(0x469)](_0x2c3204(0x6aa));}},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x765)]=function(){const _0x8793e=_0x4adfe0;if(SceneManager['isSceneBattle']())for(const _0x4483bc of this[_0x8793e(0xb13)]()){if(!_0x4483bc)continue;this[_0x8793e(0x5b1)](_0x4483bc);}},Game_Battler['prototype'][_0x4adfe0(0x5b1)]=function(_0x482b57){const _0x5c29e4=_0x4adfe0;if(!Imported[_0x5c29e4(0x56a)])return;if(!SceneManager[_0x5c29e4(0xcfa)]())return;if(this[_0x5c29e4(0xc5a)]())return;if(this[_0x5c29e4(0x44a)]())return;if(_0x482b57[_0x5c29e4(0x15d)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x5c29e4(0xc58)!==_0x5c29e4(0xc58)){const _0x55ea72=_0x3273bb[_0x5c29e4(0xc5f)]('['+_0x40644e['$1'][_0x5c29e4(0x634)](/\d+/g)+']');for(const _0x466bc4 of _0x55ea72){if(_0x5a3133[_0x5c29e4(0x965)](_0x466bc4))return!![];}return![];}else{const _0x1600cc=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x1600cc,![],![]);}}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x8ee)]=Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xbba)],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xbba)]=function(){const _0x441c12=_0x4adfe0;this[_0x441c12(0x469)]('PreStartTurnJS'),VisuMZ['BattleCore']['Game_Battler_startTpbTurn']['call'](this),this[_0x441c12(0x469)](_0x441c12(0x183));},VisuMZ[_0x4adfe0(0xa98)]['Game_Battler_onTurnEnd']=Game_Battler[_0x4adfe0(0x6ec)]['onTurnEnd'],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xc04)]=function(){const _0x1c779e=_0x4adfe0;this[_0x1c779e(0x469)](_0x1c779e(0x617)),VisuMZ[_0x1c779e(0xa98)][_0x1c779e(0x3a0)][_0x1c779e(0x61e)](this),this['processBattleCoreJS'](_0x1c779e(0x8f6));},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x469)]=function(_0x1f40b1){const _0x26fb7c=_0x4adfe0;if(this[_0x26fb7c(0xcad)]||this[_0x26fb7c(0x879)])return;const _0x5a2c66=VisuMZ[_0x26fb7c(0xa98)][_0x26fb7c(0x5bc)][_0x26fb7c(0x4e9)];if(_0x5a2c66[_0x1f40b1])_0x5a2c66[_0x1f40b1][_0x26fb7c(0x61e)](this);for(const _0x244354 of this[_0x26fb7c(0xb13)]()){if(!_0x244354)continue;key=VisuMZ[_0x26fb7c(0xa98)][_0x26fb7c(0x91d)](_0x244354,_0x1f40b1),VisuMZ[_0x26fb7c(0xa98)]['JS'][key]&&('UBxMX'!==_0x26fb7c(0x5c2)?VisuMZ[_0x26fb7c(0xa98)]['JS'][key][_0x26fb7c(0x61e)](this,this,this,_0x244354,0x0):this[_0x26fb7c(0x37e)]()&&this[_0x26fb7c(0xa70)]());}},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xa54)]=function(){const _0x11074e=_0x4adfe0;return VisuMZ[_0x11074e(0xa98)][_0x11074e(0x5bc)][_0x11074e(0x2e2)][_0x11074e(0x8e4)]||![];},Game_Battler[_0x4adfe0(0x6ec)]['isChanting']=function(){const _0x8d5e94=_0x4adfe0;if(this['isWaiting']()){if(this['chantStyle']()){if(this[_0x8d5e94(0x60a)][_0x8d5e94(0x3b9)](_0x4c2131=>_0x4c2131[_0x8d5e94(0x28e)]()&&_0x4c2131['isMagical']()))return!![];}else{if(_0x8d5e94(0xaa7)!==_0x8d5e94(0x40e)){if(this[_0x8d5e94(0x60a)]['some'](_0x2811ff=>_0x2811ff[_0x8d5e94(0x28e)]()&&_0x2811ff[_0x8d5e94(0x764)]()))return!![];}else{this[_0x8d5e94(0xb04)](_0x8d5e94(0x539));return;}}}if(BattleManager['isTpb']()&&this[_0x8d5e94(0x595)]===_0x8d5e94(0x577)){if(this[_0x8d5e94(0xa54)]())return this[_0x8d5e94(0x144)]()&&this['currentAction']()[_0x8d5e94(0x28e)]()&&this[_0x8d5e94(0x144)]()[_0x8d5e94(0x732)]();else{if('CNmzU'===_0x8d5e94(0x87f))return this[_0x8d5e94(0x144)]()&&this[_0x8d5e94(0x144)]()['item']()&&this[_0x8d5e94(0x144)]()[_0x8d5e94(0x764)]();else _0x103e2c['BattleCore']['Window_BattleLog_performMagicEvasion'][_0x8d5e94(0x61e)](this,_0x255741),this[_0x8d5e94(0x115)]();}}return![];},Game_Battler['prototype'][_0x4adfe0(0x51c)]=function(){const _0x211346=_0x4adfe0;if(BattleManager[_0x211346(0xaf5)]()&&this[_0x211346(0x595)]==='casting')return this[_0x211346(0xa54)]()?this['currentAction']()&&this[_0x211346(0x144)]()['item']()&&!this[_0x211346(0x144)]()['isMagical']():this[_0x211346(0x144)]()&&this[_0x211346(0x144)]()[_0x211346(0x28e)]()&&!this[_0x211346(0x144)]()[_0x211346(0x764)]();return![];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xc5d)]=Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xab6)],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xab6)]=function(){const _0x19bca2=_0x4adfe0;VisuMZ['BattleCore']['Game_Battler_clearDamagePopup']['call'](this),this[_0x19bca2(0x94e)]=[];},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x66f)]=function(){const _0x10cdab=_0x4adfe0;if(!this['_damagePopupArray'])this[_0x10cdab(0xab6)]();return this['_damagePopupArray'][_0x10cdab(0xa59)]>0x0;},Game_Battler['prototype']['startDamagePopup']=function(){const _0x37ee71=_0x4adfe0;if(!SceneManager[_0x37ee71(0xcfa)]())return;if(BattleManager[_0x37ee71(0x774)]())return;if(!this[_0x37ee71(0x94e)])this[_0x37ee71(0xab6)]();this[_0x37ee71(0xaee)]();const _0x265590=this[_0x37ee71(0xc66)]();if(_0x265590)_0x265590['setupDamagePopup']();},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xaee)]=function(){const _0x357d55=_0x4adfe0,_0x2d8eb0=this['result']();if(_0x2d8eb0[_0x357d55(0xa53)]||_0x2d8eb0[_0x357d55(0x5f5)]){if(_0x357d55(0xc79)!==_0x357d55(0x410)){const _0xfa7d43=JsonEx['makeDeepCopy'](_0x2d8eb0);_0xfa7d43[_0x357d55(0xaf7)]=![],_0xfa7d43[_0x357d55(0xace)]=0x0,this[_0x357d55(0x94e)][_0x357d55(0x98e)](_0xfa7d43);}else return this[_0x357d55(0x28e)]()['note']['match'](/<DAMAGE CAP:[ ](\d+)>/i)?_0x24b274(_0xe68ea2['$1']):this[_0x357d55(0x92f)]()['hardDamageCap']();}if(_0x2d8eb0[_0x357d55(0xaf7)]){if(_0x357d55(0x4f2)!=='pXuFX')_0x434c87=_0x14c1e4(_0x50aa7b['$1']);else{const _0x5d166a=JsonEx['makeDeepCopy'](_0x2d8eb0);_0x5d166a[_0x357d55(0xa53)]=![],_0x5d166a[_0x357d55(0x5f5)]=![],_0x5d166a[_0x357d55(0xace)]=0x0,this[_0x357d55(0x94e)][_0x357d55(0x98e)](_0x5d166a);}}if(_0x2d8eb0['mpDamage']!==0x0){const _0x390632=JsonEx[_0x357d55(0x1a2)](_0x2d8eb0);_0x390632[_0x357d55(0xa53)]=![],_0x390632[_0x357d55(0x5f5)]=![],_0x390632[_0x357d55(0xaf7)]=![],this[_0x357d55(0x94e)][_0x357d55(0x98e)](_0x390632);}},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x2bd)]=function(){const _0x33def8=_0x4adfe0;if(!this['_damagePopupArray'])this[_0x33def8(0xab6)]();return VisuMZ['BattleCore'][_0x33def8(0x5bc)][_0x33def8(0x676)][_0x33def8(0xa13)]?this[_0x33def8(0x94e)][_0x33def8(0x2df)]():this[_0x33def8(0x94e)][_0x33def8(0xcf0)]();},Game_Battler['prototype']['setupTextPopup']=function(_0x4b63ef,_0x25edee){const _0x12b311=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x12b311(0x774)]())return;if(!this['battler']())return;if(_0x4b63ef[_0x12b311(0xa59)]<=0x0)return;_0x25edee=_0x25edee||{},_0x25edee[_0x12b311(0x3ad)]=_0x25edee['textColor']||_0x12b311(0x25b),_0x25edee[_0x12b311(0x392)]=_0x25edee[_0x12b311(0x392)]||[0x0,0x0,0x0,0x0],_0x25edee['flashDuration']=_0x25edee[_0x12b311(0xb01)]||0x0,this[_0x12b311(0xc66)]()['setupTextPopup'](_0x4b63ef,_0x25edee);},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xa6b)]=function(_0x18a852,_0x1266fe,_0x46f5b1){const _0x32e439=_0x4adfe0;if(!SceneManager[_0x32e439(0xcfa)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x32e439(0xc66)]())return;if(_0x1266fe[_0x32e439(0xa59)]<=0x0)return;_0x46f5b1=_0x46f5b1||{},_0x46f5b1[_0x32e439(0x3ad)]=_0x46f5b1[_0x32e439(0x3ad)]||_0x32e439(0x25b),_0x46f5b1[_0x32e439(0x392)]=_0x46f5b1[_0x32e439(0x392)]||[0x0,0x0,0x0,0x0],_0x46f5b1['flashDuration']=_0x46f5b1[_0x32e439(0xb01)]||0x0,this['battler']()['setupIconTextPopup'](_0x18a852,_0x1266fe,_0x46f5b1);},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e1)]=function(){const _0xa9c248=_0x4adfe0;if(this['isHidden']())return![];if(this[_0xa9c248(0xb82)]()&&this['isAppeared']())return!![];if(this[_0xa9c248(0x13b)]()&&this[_0xa9c248(0x147)]()){if(this[_0xa9c248(0xc5a)]()&&this['allowCollapse']())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x4c7)]=Game_Battler[_0x4adfe0(0x6ec)]['clearMotion'],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x7d1)]=function(){const _0x9d7888=_0x4adfe0;VisuMZ[_0x9d7888(0xa98)][_0x9d7888(0x4c7)][_0x9d7888(0x61e)](this),this[_0x9d7888(0x396)]();},Game_Battler[_0x4adfe0(0x6ec)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xa96)]=function(){return![];},VisuMZ[_0x4adfe0(0xa98)]['Game_Battler_onBattleStart']=Game_Battler[_0x4adfe0(0x6ec)]['onBattleStart'],Game_Battler[_0x4adfe0(0x6ec)]['onBattleStart']=function(_0x168e6b){const _0x57a745=_0x4adfe0;VisuMZ[_0x57a745(0xa98)]['Game_Battler_onBattleStart'][_0x57a745(0x61e)](this,_0x168e6b),this[_0x57a745(0x28a)](_0x168e6b),this[_0x57a745(0xab6)]();},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x28a)]=function(_0xfaffa7){const _0xf57f36=_0x4adfe0;this[_0xf57f36(0x9f9)](![]),this[_0xf57f36(0x937)]=undefined,this[_0xf57f36(0x1b3)]=undefined;},VisuMZ['BattleCore']['Game_Battler_onBattleEnd']=Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x641)],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x641)]=function(){const _0x2b7c2c=_0x4adfe0;VisuMZ[_0x2b7c2c(0xa98)][_0x2b7c2c(0x494)][_0x2b7c2c(0x61e)](this),this['onBattleEndBattleCore']();},Game_Battler['prototype'][_0x4adfe0(0xc6f)]=function(){const _0x28caa5=_0x4adfe0;this[_0x28caa5(0x937)]=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x8d5)]=Game_Battler[_0x4adfe0(0x6ec)]['performActionStart'],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x7cc)]=function(_0x24740e){const _0x3d8a89=_0x4adfe0;VisuMZ[_0x3d8a89(0xa98)][_0x3d8a89(0x8d5)][_0x3d8a89(0x61e)](this,_0x24740e);if(!_0x24740e[_0x3d8a89(0x997)]()){const _0x2e9189=this[_0x3d8a89(0xc66)]();_0x2e9189&&_0x2e9189[_0x3d8a89(0xabb)]();}this[_0x3d8a89(0x9f9)](![]);},Game_Battler['prototype'][_0x4adfe0(0x930)]=function(){const _0x249776=_0x4adfe0,_0x4f6ae7=this['_flinched'];this[_0x249776(0x9a3)]=![];if(BattleManager[_0x249776(0x2cb)]()&&this['isInputting']()){const _0x8a18c9=this['battler']();if(_0x8a18c9&&_0x4f6ae7)_0x8a18c9[_0x249776(0xabb)]();return;}const _0x571601=this[_0x249776(0xc66)]();if(_0x571601)_0x571601[_0x249776(0x156)]();this['setBattlerFlip'](![]),this[_0x249776(0x47e)]();},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x349)]=function(_0x3d22a8){const _0x27500f=_0x4adfe0;if(_0x3d22a8[_0x27500f(0x74c)]()){if('SJcUX'!==_0x27500f(0x2f0))return this[_0x27500f(0x448)]();else this[_0x27500f(0x637)]();}else{if(_0x3d22a8['isGuard']())this[_0x27500f(0xb04)](_0x27500f(0x664));else{if(_0x3d22a8[_0x27500f(0x732)]())this[_0x27500f(0xb04)](_0x27500f(0x423));else{if(_0x3d22a8['isSkill']())_0x27500f(0x111)!==_0x27500f(0x111)?this[_0x27500f(0x8a6)](0x1):[0x1,0x2,0x5,0x6][_0x27500f(0x5d0)](_0x3d22a8[_0x27500f(0x28e)]()[_0x27500f(0x87d)][_0x27500f(0xb52)])?this[_0x27500f(0x637)]():this[_0x27500f(0xb04)](_0x27500f(0x7f2));else _0x3d22a8[_0x27500f(0x7f9)]()&&this['requestMotion'](_0x27500f(0x28e));}}}},Game_Battler[_0x4adfe0(0x6ec)]['getAttackMotion']=function(){const _0x2bddba=_0x4adfe0;return $dataSystem[_0x2bddba(0x8c3)][0x0];},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xa69)]=function(){const _0x7dbfb9=_0x4adfe0,_0x4b0484=this[_0x7dbfb9(0xc32)]();return _0x4b0484?_0x4b0484[_0x7dbfb9(0x46a)]:0x0;},Game_Battler['prototype'][_0x4adfe0(0xa06)]=function(_0x452ad7){const _0x439a57=_0x4adfe0;if(!$gameSystem[_0x439a57(0x1bc)]())return;const _0xffc88e=this[_0x439a57(0xc66)](),_0x219494=_0x452ad7[_0x439a57(0xc66)]();if(!_0xffc88e||!_0x219494)return;const _0x2f3577=_0x219494[_0x439a57(0x49e)],_0x25c801=_0x219494[_0x439a57(0x984)];this['moveBattlerToPoint'](_0x2f3577,_0x25c801,0x0,![],_0x439a57(0x525),-0x1),_0xffc88e[_0x439a57(0x1e0)]();const _0x5e2dd4=VisuMZ[_0x439a57(0xa98)][_0x439a57(0x5bc)][_0x439a57(0x5f6)];let _0xba3a05=(_0x219494[_0x439a57(0x1e2)]+_0xffc88e[_0x439a57(0x1e2)])/0x2;_0xba3a05*=this[_0x439a57(0x771)]()?0x1:-0x1;let _0x1a4146=_0x5e2dd4[_0x439a57(0x6b1)]*(this[_0x439a57(0x771)]()?0x1:-0x1);_0x452ad7[_0x439a57(0x979)](_0xba3a05,_0x1a4146,0x0,![],_0x439a57(0x525)),_0x219494[_0x439a57(0x1e0)]();},Game_Battler['prototype'][_0x4adfe0(0xb04)]=function(_0x87781a){const _0x568e3b=_0x4adfe0;if(SceneManager[_0x568e3b(0xcfa)]()){const _0x237768=this[_0x568e3b(0xc66)]();_0x237768&&(_0x237768[_0x568e3b(0x995)](_0x87781a),['swing',_0x568e3b(0x71b),'missile']['includes'](_0x87781a)&&this['performWeaponAnimation']());}this[_0x568e3b(0x396)]();},Game_Battler[_0x4adfe0(0x6ec)]['performWeaponAnimation']=function(){},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x1ca)]=function(_0x35fea1){const _0x4cf27f=_0x4adfe0;if(SceneManager[_0x4cf27f(0xcfa)]()){if(_0x4cf27f(0x698)===_0x4cf27f(0x782))return this[_0x4cf27f(0x5af)]=this[_0x4cf27f(0x5af)]||_0x33d188['prototype'][_0x4cf27f(0x6ff)]()||0x24,this[_0x4cf27f(0x5af)]*0x4;else{const _0x48f682=this[_0x4cf27f(0xc66)]();if(_0x48f682)_0x48f682[_0x4cf27f(0x759)](_0x35fea1);}}},Game_Battler[_0x4adfe0(0x6ec)]['startAttackWeaponAnimation']=function(){const _0x59b019=_0x4adfe0;if(SceneManager['isSceneBattle']()){const _0x32d76b=this[_0x59b019(0xa69)]();this[_0x59b019(0x1ca)](_0x32d76b);}},Game_Battler[_0x4adfe0(0x6ec)]['performCastAnimation']=function(_0x53c414,_0x2a6056){const _0x343741=_0x4adfe0;if(!_0x53c414)return;if(!_0x53c414[_0x343741(0x28e)]())return;if(_0x53c414['isAttack']())return;if(_0x53c414[_0x343741(0x997)]())return;if(_0x53c414[_0x343741(0x7f9)]())return;let _0x5512fe=0x0;const _0xfe80e6=VisuMZ[_0x343741(0xa98)][_0x343741(0x5bc)][_0x343741(0x5f6)],_0x262664=_0x53c414[_0x343741(0x28e)]()[_0x343741(0x15d)];if(_0x262664[_0x343741(0x634)](/<CAST ANIMATION: (\d+)>/i))_0x5512fe=Number(RegExp['$1']);else{if(_0x262664[_0x343741(0x634)](/<NO CAST ANIMATION>/i))return;else{if(_0x53c414['isCertainHit']())_0x5512fe=_0xfe80e6[_0x343741(0x10d)];else{if(_0x53c414[_0x343741(0x8be)]())_0x5512fe=_0xfe80e6[_0x343741(0x912)];else _0x53c414[_0x343741(0x732)]()&&(_0x5512fe=_0xfe80e6['CastMagical']);}}}_0x5512fe>0x0&&$gameTemp['requestAnimation']([this],_0x5512fe,!!_0x2a6056);},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xbff)]=function(){const _0x3b86a1=_0x4adfe0;SoundManager[_0x3b86a1(0xe5)]();let _0x23a92e=VisuMZ[_0x3b86a1(0xa98)]['Settings']['ActionSequence'][_0x3b86a1(0x3ec)];_0x23a92e>0x0&&(Imported[_0x3b86a1(0x56a)]?$gameTemp[_0x3b86a1(0xab0)]([this],_0x23a92e):$gameTemp[_0x3b86a1(0x135)]([this],_0x23a92e));},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x442)]=Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xbfb)],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xbfb)]=function(){const _0x44523d=_0x4adfe0;VisuMZ[_0x44523d(0xa98)][_0x44523d(0x442)][_0x44523d(0x61e)](this),this[_0x44523d(0x207)](),this[_0x44523d(0x62f)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x16d)]=Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x8f2)],Game_Battler[_0x4adfe0(0x6ec)]['performMiss']=function(){const _0x1cac80=_0x4adfe0;VisuMZ[_0x1cac80(0xa98)]['Game_Battler_performMiss'][_0x1cac80(0x61e)](this),this[_0x1cac80(0x207)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xc98)]=Game_Battler[_0x4adfe0(0x6ec)]['performEvasion'],Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x4f1)]=function(){const _0x324b4b=_0x4adfe0;VisuMZ[_0x324b4b(0xa98)][_0x324b4b(0xc98)][_0x324b4b(0x61e)](this),this[_0x324b4b(0x207)]();},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x207)]=function(){const _0x41bdc6=_0x4adfe0;if(!$gameSystem[_0x41bdc6(0x1bc)]())return;if(this['_flinched'])return;this['_flinched']=!![];const _0x4cbad0=this[_0x41bdc6(0xc66)]();if(_0x4cbad0)_0x4cbad0['stepFlinch']();},Game_Battler[_0x4adfe0(0x6ec)]['performShakeFlinch']=function(){const _0x1be966=_0x4adfe0;if(!this[_0x1be966(0x578)]())return;const _0x546116=VisuMZ[_0x1be966(0xa98)][_0x1be966(0x5bc)][_0x1be966(0x2e2)];if(!(_0x546116[_0x1be966(0x46e)]??![]))return;if(this[_0x1be966(0x242)]<=0x0)return;const _0x315b46=this[_0x1be966(0xc66)]();if(_0x315b46){const _0x37aeda=this['_lastHpDamage'],_0x14ed99=(_0x37aeda/this[_0x1be966(0x7ff)])[_0x1be966(0x548)](0.8,0x1),_0x1280fd=_0x546116['ShakeFlinchPower']??0x30,_0x30ba95=_0x14ed99*_0x1280fd;_0x315b46[_0x1be966(0xb90)](_0x30ba95,_0x14ed99);}},Game_Battler['prototype'][_0x4adfe0(0x47e)]=function(){const _0x6dffa7=_0x4adfe0;if(this[_0x6dffa7(0xc5a)]()&&this[_0x6dffa7(0x2ca)]!==_0x6dffa7(0x539)){this[_0x6dffa7(0xb04)](_0x6dffa7(0x539));return;}if(this['isDead']()&&this['_motionType']==='dead')return;if(!!this[_0x6dffa7(0x1fe)])return;if(this['isEnemy']()){if(_0x6dffa7(0x13f)==='MDKcV'){const _0x110ec2=_0x1febcf['BattleCore'][_0x6dffa7(0x5bc)][_0x6dffa7(0x30b)];this[_0x6dffa7(0x2ab)]=_0x110ec2['AttackAnimation'],this[_0x6dffa7(0xb92)]={};}else{if(!this[_0x6dffa7(0xbe3)]()&&this!==BattleManager['_subject']){if(_0x6dffa7(0x5b8)===_0x6dffa7(0x5b8)){if(this[_0x6dffa7(0xc66)]())this[_0x6dffa7(0xc66)]()[_0x6dffa7(0x7e9)]();}else{const _0x3666db=this[_0x6dffa7(0x33e)][_0x6dffa7(0xf5)]();if(_0x3666db){const _0x3ad9f2=this[_0x6dffa7(0x17c)](_0x6dffa7(0x7f2),_0x3666db[_0x6dffa7(0x707)]);this[_0x6dffa7(0x165)](_0x3ad9f2||0x0);}}}this['clearFreezeMotion']();return;}}if(this[_0x6dffa7(0x2ca)]===_0x6dffa7(0xcc4))return;if(this[_0x6dffa7(0x2ca)]==='escape'&&!BattleManager['isInputting']())return;if(this[_0x6dffa7(0x2ca)]===_0x6dffa7(0x664)&&!BattleManager[_0x6dffa7(0x613)]())return;this['clearMotion']();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x6dffa7(0x48b)])return;if(this[_0x6dffa7(0xc66)]()&&BattleManager[_0x6dffa7(0x613)]()){this[_0x6dffa7(0xc66)]()[_0x6dffa7(0x7e9)](),this[_0x6dffa7(0x396)]();return;}},Game_Enemy[_0x4adfe0(0x6ec)]['isDuringNonLoopingMotion']=function(){const _0x270fe7=_0x4adfe0;if(!this[_0x270fe7(0x147)]())return![];const _0x9020d0=this[_0x270fe7(0xc66)]();if(!_0x9020d0)return![];const _0x5974a3=_0x9020d0['_svBattlerSprite'];if(!_0x5974a3)return![];const _0x3fa62f=_0x5974a3[_0x270fe7(0xcfc)];return _0x3fa62f&&!_0x3fa62f['loop'];},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x122)]=function(){return this['_isBattlerFlipped'];},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x9f9)]=function(_0x558c08){const _0x4288d4=_0x4adfe0;if(!$gameSystem[_0x4288d4(0x1bc)]())return;this[_0x4288d4(0x1b8)]=_0x558c08;const _0x1c6074=this[_0x4288d4(0xc66)]();if(_0x1c6074)_0x1c6074['updateFlip']();},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x944)]=function(_0x11652b,_0x274dc7,_0x5c7c31){const _0xdba8ad=_0x4adfe0;if(!$gameSystem[_0xdba8ad(0x1bc)]())return;const _0xaecf27=this[_0xdba8ad(0xc66)]();if(!_0xaecf27)return;if(_0x11652b===_0xaecf27[_0xdba8ad(0x49e)])return;let _0x41b1ff=![];if(this['isActor']()){if(_0x11652b>_0xaecf27['_baseX'])_0x41b1ff=!![];if(_0x11652b<_0xaecf27[_0xdba8ad(0x49e)])_0x41b1ff=![];}else{if(this[_0xdba8ad(0x13b)]()){if(_0x11652b>_0xaecf27['_baseX'])_0x41b1ff=![];if(_0x11652b<_0xaecf27[_0xdba8ad(0x49e)])_0x41b1ff=!![];}};this['setBattlerFlip'](_0x5c7c31?!_0x41b1ff:_0x41b1ff),_0xaecf27[_0xdba8ad(0x160)]();},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x979)]=function(_0x1d324b,_0x23dd22,_0x3b61fb,_0x5a4555,_0x5141bc){const _0x465df5=_0x4adfe0;if(!$gameSystem[_0x465df5(0x1bc)]())return;const _0x8b9d6b=this['battler']();if(!_0x8b9d6b)return;if(_0x5a4555)this[_0x465df5(0x944)](_0x1d324b+_0x8b9d6b[_0x465df5(0x49e)],_0x23dd22+_0x8b9d6b[_0x465df5(0x984)],![]);_0x1d324b+=_0x8b9d6b[_0x465df5(0x49e)]-_0x8b9d6b[_0x465df5(0xc0d)],_0x23dd22+=_0x8b9d6b['_baseY']-_0x8b9d6b[_0x465df5(0x5e7)],_0x8b9d6b[_0x465df5(0x1d2)](_0x1d324b,_0x23dd22,_0x3b61fb);if(Imported[_0x465df5(0x56a)])_0x8b9d6b[_0x465df5(0x75b)](_0x5141bc||_0x465df5(0x525));},Game_Battler['prototype'][_0x4adfe0(0x9e5)]=function(_0x4d02f5,_0x4a37a3,_0x5babdd,_0x442cce,_0x3c1d26,_0x487444){const _0x1b214f=_0x4adfe0;if(!$gameSystem['isSideView']())return;const _0x4a30ff=this[_0x1b214f(0xc66)]();if(!_0x4a30ff)return;if(_0x4d02f5===Infinity||_0x4a37a3===Infinity)return;if(isNaN(_0x4d02f5)||isNaN(_0x4a37a3))return;_0x487444=_0x487444||0x0;if(_0x487444>0x0){if(_0x1b214f(0xc00)==='pciee')this['createEnemyNameContainer'](),_0x3ed9a2['BattleCore']['Scene_Battle_createAllWindows'][_0x1b214f(0x61e)](this),this[_0x1b214f(0x6eb)]();else{if(_0x4a30ff[_0x1b214f(0x49e)]>_0x4d02f5)_0x4d02f5+=_0x4a30ff['width']/0x2+_0x487444;if(_0x4a30ff[_0x1b214f(0x49e)]<_0x4d02f5)_0x4d02f5-=_0x4a30ff[_0x1b214f(0x1e2)]/0x2+_0x487444;}}if(_0x442cce)this[_0x1b214f(0x944)](_0x4d02f5,_0x4a37a3,![]);_0x4d02f5-=_0x4a30ff[_0x1b214f(0xc0d)],_0x4a37a3-=_0x4a30ff[_0x1b214f(0x5e7)],_0x4a30ff['startMove'](_0x4d02f5,_0x4a37a3,_0x5babdd);if(Imported[_0x1b214f(0x56a)])_0x4a30ff[_0x1b214f(0x75b)](_0x3c1d26||_0x1b214f(0x525));},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xb42)]=function(_0x34bf96,_0x95ede7,_0xeeab06,_0x2d3901,_0x21cfa){const _0x5decc9=_0x4adfe0;if(!$gameSystem[_0x5decc9(0x1bc)]())return;const _0x2f5e64=this[_0x5decc9(0xc66)]();if(!_0x2f5e64)return;if(_0x2d3901)this[_0x5decc9(0x944)](_0x34bf96+_0x2f5e64[_0x5decc9(0x49e)],_0x95ede7+_0x2f5e64[_0x5decc9(0x984)],![]);_0x34bf96+=_0x2f5e64[_0x5decc9(0xc0d)],_0x95ede7+=_0x2f5e64['_homeY'],_0x2f5e64[_0x5decc9(0xb8d)](_0x34bf96,_0x95ede7,_0xeeab06,_0x21cfa),this[_0x5decc9(0x937)]=_0x34bf96,this[_0x5decc9(0x1b3)]=_0x95ede7;},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x872)]=function(_0x1a29be,_0x42f662,_0xdec57a,_0x41388e,_0xcf4ac3,_0x4d26e6){const _0x12aa83=_0x4adfe0;if(!$gameSystem[_0x12aa83(0x1bc)]())return;const _0x4d16c2=this[_0x12aa83(0xc66)]();if(!_0x4d16c2)return;_0x4d26e6=_0x4d26e6||0x0;if(_0x4d26e6>0x0){if(_0x4d16c2[_0x12aa83(0x49e)]>_0x1a29be)_0x1a29be+=_0x4d16c2[_0x12aa83(0x1e2)]/0x2+_0x4d26e6;if(_0x4d16c2[_0x12aa83(0x49e)]<_0x1a29be)_0x1a29be-=_0x4d16c2[_0x12aa83(0x1e2)]/0x2+_0x4d26e6;}if(_0x41388e)this['setBattlerFacePoint'](_0x1a29be,_0x42f662,![]);_0x4d16c2['startHomeMove'](_0x1a29be,_0x42f662,_0xdec57a,_0xcf4ac3),this[_0x12aa83(0x937)]=_0x1a29be,this[_0x12aa83(0x1b3)]=_0x42f662;},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x856)]=function(_0x271379,_0xc8b5fa,_0x450e1f){const _0x5a5841=_0x4adfe0;if(!$gameSystem[_0x5a5841(0x1bc)]())return;const _0x262518=this[_0x5a5841(0xc66)]();if(!_0x262518)return;_0x262518[_0x5a5841(0xa80)](_0x271379,_0xc8b5fa,_0x450e1f);},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xb44)]=function(_0x68a3d7,_0x636cd2){const _0x45fa22=_0x4adfe0;if(!$gameSystem[_0x45fa22(0x1bc)]())return;const _0x2f4afd=this[_0x45fa22(0xc66)]();if(!_0x2f4afd)return;_0x2f4afd[_0x45fa22(0x2d1)](_0x68a3d7,_0x636cd2);},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xcbd)]=function(_0x29936c,_0x1c1ab3,_0x1e72a6,_0x249bf3){const _0x16e941=_0x4adfe0;if(!$gameSystem[_0x16e941(0x1bc)]())return;const _0x3b9bd6=this['battler']();if(!_0x3b9bd6)return;_0x3b9bd6[_0x16e941(0xbc8)](_0x29936c,_0x1c1ab3,_0x1e72a6,_0x249bf3);},Game_Battler['prototype'][_0x4adfe0(0x479)]=function(_0x546af0,_0x293ae2,_0x33742f,_0x662a84){const _0x53a2fe=_0x4adfe0;if(!$gameSystem[_0x53a2fe(0x1bc)]())return;const _0x20a387=this[_0x53a2fe(0xc66)]();if(!_0x20a387)return;if(this['isActor']()){if('VvsYU'!=='VGVGG')_0x546af0*=-0x1,_0x293ae2*=-0x1;else return![];}_0x20a387[_0x53a2fe(0x6c9)](_0x546af0,_0x293ae2,_0x33742f,_0x662a84);},Game_Battler[_0x4adfe0(0x6ec)]['growBattler']=function(_0x13c80d,_0x3a4b8f,_0x2d75ef,_0x6c215f){const _0x5b6f3b=_0x4adfe0;if(!$gameSystem[_0x5b6f3b(0x1bc)]())return;const _0x52612b=this[_0x5b6f3b(0xc66)]();if(!_0x52612b)return;_0x52612b[_0x5b6f3b(0x59f)](_0x13c80d,_0x3a4b8f,_0x2d75ef,_0x6c215f);},Game_Battler['prototype'][_0x4adfe0(0x953)]=function(_0x3b1d5d,_0x20fe33,_0x107305){const _0x1fbf51=_0x4adfe0;if(!$gameSystem['isSideView']())return;const _0x2d8273=this[_0x1fbf51(0xc66)]();if(!_0x2d8273)return;_0x2d8273[_0x1fbf51(0x9a7)](_0x3b1d5d,_0x20fe33,_0x107305);},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x396)]=function(){const _0x10233b=_0x4adfe0,_0x44920c=!!this[_0x10233b(0x1fe)];this[_0x10233b(0x1fe)]=undefined;if(_0x44920c){if(_0x10233b(0x473)!==_0x10233b(0xd00))this[_0x10233b(0x47e)](),this[_0x10233b(0x8ac)]();else{if(!_0xb0cc0c[_0x10233b(0xa98)]['TpbActiveChangeEnabled'])return![];const _0x570e79=_0x3306e8['aliveMembers']()[_0x10233b(0xcd9)](_0x27beb0=>_0x27beb0[_0x10233b(0xc1a)]()&&_0x27beb0['canInput']());return _0x570e79['length']>0x0&&_0x27f4a3['actor']()!==_0x570e79[_0x570e79[_0x10233b(0xa59)]-0x1];}}},Game_Battler[_0x4adfe0(0x6ec)]['clearFreezeMotionForWeapons']=function(){const _0x3f6798=_0x4adfe0;if(!SceneManager[_0x3f6798(0xcfa)]())return;const _0xe82d8=this[_0x3f6798(0xc66)]();if(!_0xe82d8)return;let _0x580daf=this[_0x3f6798(0x771)]()?_0xe82d8[_0x3f6798(0x228)]:_0xe82d8[_0x3f6798(0x671)][_0x3f6798(0x228)];_0x580daf&&(_0x3f6798(0x485)===_0x3f6798(0x3d5)?(_0x25533c[_0x3f6798(0xa98)]['BattleManager_makeActionOrders'][_0x3f6798(0x61e)](this),this[_0x3f6798(0xa78)]=this['_actionBattlers'][_0x3f6798(0xcd9)](_0x2143fd=>_0x2143fd&&_0x2143fd[_0x3f6798(0x138)]())):_0x580daf['setup'](0x0));},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x911)]=function(_0x4ea5ef,_0x1e05cc,_0x1753a1){const _0x19111d=_0x4adfe0;if(this[_0x19111d(0x13b)]()&&!this[_0x19111d(0x147)]())return;let _0x23410d=0x0,_0xcdc4ae=0x0;if(_0x4ea5ef[_0x19111d(0x634)](/ATTACK[ ](\d+)/i)){if(_0x19111d(0xbdd)!=='AneZq'){_0x525d6e[_0x19111d(0xa98)][_0x19111d(0xb77)][_0x19111d(0x61e)](this);const _0x54c58b=_0x68d4b4[_0x19111d(0xc15)]();if(_0x54c58b){const _0x418cae=_0x4fe24b[_0x19111d(0x66d)]();_0x54c58b[_0x19111d(0x4ab)]()&&_0x418cae[_0x19111d(0xa59)]>0x1&&this[_0x19111d(0x85b)](_0x19111d(0x891),this[_0x19111d(0x668)][_0x19111d(0xb0e)](this));}}else _0xcdc4ae=Number(RegExp['$1']),_0xcdc4ae--;}if(this['isActor']()){if(_0x19111d(0xbb1)==='sQZkf')_0x29dcfd[_0x19111d(0x6ec)][_0x19111d(0x7d4)][_0x19111d(0x61e)](this),this[_0x19111d(0x237)]=null,this[_0x19111d(0xac9)]=![],this['_battlerName']='',this['_battlerHue']=0x0,this[_0x19111d(0x4a9)]=null,this[_0x19111d(0x9d4)]=0x0,this[_0x19111d(0x657)]=0x0,this[_0x19111d(0xade)](),this[_0x19111d(0x36d)]();else{const _0x547335=this[_0x19111d(0x37d)]();_0x23410d=_0x547335[_0xcdc4ae]?_0x547335[_0xcdc4ae][_0x19111d(0xa1a)]:0x0;}}else this[_0x19111d(0x13b)]()&&(_0x23410d=this[_0x19111d(0x848)]()[_0x19111d(0xa1a)]||0x0);const _0x28fa43=$dataSystem['attackMotions'][_0x23410d];if(_0x4ea5ef[_0x19111d(0x634)](/attack/i)){if('iMwzC'==='WGvUv'){if(!_0x543730['BattleCore']['Settings'][_0x19111d(0x2e2)]['PrioritySortActive'])return;const _0x1b5878=_0x553455[_0x19111d(0x48b)];if(_0x1b5878){if(_0x1b5878['isActor']()&&!_0x584704['isSideView']())return;const _0x8bf49b=_0x1b5878[_0x19111d(0xc66)]();if(_0x8bf49b&&_0x1b5878['isActor']())this[_0x19111d(0xbd8)][_0x19111d(0x607)](_0x8bf49b);}}else _0x4ea5ef=[_0x19111d(0x71b),_0x19111d(0x5e5),_0x19111d(0x94c)][_0x28fa43[_0x19111d(0xb52)]]||'swing';}this['_freezeMotionData']={'motionType':_0x4ea5ef,'weaponImageId':_0x1e05cc?_0x28fa43[_0x19111d(0x46a)]:0x0,'pattern':_0x1753a1};},Game_Battler['prototype']['isFriendly']=function(_0x120c0d){const _0x55ffb2=_0x4adfe0;if(!_0x120c0d)return![];return _0x120c0d[_0x55ffb2(0x6e8)]()===this[_0x55ffb2(0x6e8)]();},Game_Battler['prototype'][_0x4adfe0(0xb8b)]=function(_0x5b1cef){const _0x4bef8b=_0x4adfe0;if(!_0x5b1cef)return![];return _0x5b1cef[_0x4bef8b(0xad9)]()===this['friendsUnit']();},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x30d)]=function(){return![];},Game_Actor['prototype'][_0x4adfe0(0x30d)]=function(){return this['battlerName']()['match'](/\$/i);},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x30d)]=function(){const _0x13d824=_0x4adfe0;return this['hasSvBattler']()&&this[_0x13d824(0x245)]()['match'](/\$/i);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x3b3)]=Game_Actor[_0x4adfe0(0x6ec)]['setup'],Game_Actor['prototype']['setup']=function(_0xb9a2bb){const _0x1005d6=_0x4adfe0;VisuMZ[_0x1005d6(0xa98)]['Game_Actor_setup'][_0x1005d6(0x61e)](this,_0xb9a2bb),this[_0x1005d6(0xcce)]();},Game_Actor['prototype'][_0x4adfe0(0xcce)]=function(){const _0x41e656=_0x4adfe0;this[_0x41e656(0x91c)]='',this['actor']()&&this['actor']()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x41e656(0x91c)]=String(RegExp['$1']));},Game_Actor['prototype'][_0x4adfe0(0x4e2)]=function(){const _0x2982f2=_0x4adfe0;if(this['getBattlePortrait']()!=='')return this['getBattlePortrait']();else{if(Imported[_0x2982f2(0x2a6)]&&this[_0x2982f2(0x7ca)]()!=='')return _0x2982f2(0x216)===_0x2982f2(0x76d)?_0x295ec7[_0x2982f2(0xa98)]['Settings'][_0x2982f2(0x2e2)]['AnchorX']:this[_0x2982f2(0x7ca)]();}return'';},Game_Actor[_0x4adfe0(0x6ec)]['getBattlePortrait']=function(){const _0x50e455=_0x4adfe0;if(this[_0x50e455(0x91c)]===undefined)this[_0x50e455(0xcce)]();return this[_0x50e455(0x91c)];},Game_Actor['prototype'][_0x4adfe0(0x7b4)]=function(_0x3f35df){const _0x48b415=_0x4adfe0;if(this[_0x48b415(0x91c)]===undefined)this[_0x48b415(0xcce)]();this[_0x48b415(0x91c)]=_0x3f35df;if(SceneManager[_0x48b415(0xcfa)]()&&$gameParty[_0x48b415(0xc7b)]()[_0x48b415(0x5d0)](this)){if('UrWLk'===_0x48b415(0x95e))_0x5a7762+=_0x2046b6,_0x3ef0eb+=_0x35b240[_0x48b415(0x771)]()?-_0x273aea:_0x5ae540;else{const _0x461fa1=SceneManager[_0x48b415(0x726)][_0x48b415(0x326)];_0x461fa1&&('zRycz'===_0x48b415(0x6cb)?_0x461fa1[_0x48b415(0x90b)](this):(this[_0x48b415(0x841)]=_0x56aba6,this['_animationCount']=-_0x8350a8,this[_0x48b415(0x433)]=_0x28ec7d,this[_0x48b415(0xac5)](),this[_0x48b415(0x513)]()));}}},Game_Actor['prototype'][_0x4adfe0(0x694)]=function(){return!![];},Game_Actor[_0x4adfe0(0x6ec)]['isAutoBattle']=function(){const _0x2e2f36=_0x4adfe0;if(!this[_0x2e2f36(0x1f7)]()&&BattleManager[_0x2e2f36(0xc2f)])return!![];return Game_Battler['prototype'][_0x2e2f36(0x51a)][_0x2e2f36(0x61e)](this);},VisuMZ['BattleCore'][_0x4adfe0(0xa0d)]=Game_Actor['prototype'][_0x4adfe0(0xba1)],Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xba1)]=function(){const _0x5c4208=_0x4adfe0;if(BattleManager['_autoBattle']&&!ConfigManager[_0x5c4208(0x797)])return this[_0x5c4208(0xca2)]();else{return VisuMZ[_0x5c4208(0xa98)][_0x5c4208(0xa0d)]['call'](this);;}},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xca2)]=function(){const _0x184578=_0x4adfe0,_0x54674c=[],_0x4759af=new Game_Action(this);return _0x4759af[_0x184578(0x66a)](),_0x54674c['push'](_0x4759af),_0x54674c;},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xc38)]=function(){const _0x4c6b45=_0x4adfe0;return this['currentClass']()[_0x4c6b45(0x15d)][_0x4c6b45(0x634)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):_0x4c6b45(0x3c3)===_0x4c6b45(0x32e)?this[_0x4c6b45(0x9be)]===_0x4c6b45(0x802)?this[_0x4c6b45(0x38f)]():_0x3c133b[_0x4c6b45(0xa98)][_0x4c6b45(0x23b)][_0x4c6b45(0x61e)](this):VisuMZ['BattleCore']['Settings'][_0x4c6b45(0x35b)][_0x4c6b45(0xa22)];},Game_Actor['prototype'][_0x4adfe0(0xa74)]=function(){const _0x34dfea=_0x4adfe0;if(this[_0x34dfea(0xc42)][_0x34dfea(0x6fe)]!==undefined)return this['_cache']['svAnchorX'];if(this[_0x34dfea(0xcf8)]()[_0x34dfea(0x15d)][_0x34dfea(0x634)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if('mfChd'===_0x34dfea(0x6a0))return!![];else this[_0x34dfea(0xc42)]['svAnchorX']=eval(RegExp['$1']),this[_0x34dfea(0xc42)][_0x34dfea(0x211)]=eval(RegExp['$2']);}else this[_0x34dfea(0xc42)][_0x34dfea(0x6fe)]=Game_Battler[_0x34dfea(0x6ec)][_0x34dfea(0xa74)]['call'](this);return this[_0x34dfea(0xc42)][_0x34dfea(0x6fe)];},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x5e8)]=function(){const _0x2e9d19=_0x4adfe0;if(this[_0x2e9d19(0xc42)][_0x2e9d19(0x211)]!==undefined)return this[_0x2e9d19(0xc42)][_0x2e9d19(0x211)];return this[_0x2e9d19(0xcf8)]()['note'][_0x2e9d19(0x634)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache']['svAnchorX']=eval(RegExp['$1']),this[_0x2e9d19(0xc42)][_0x2e9d19(0x211)]=eval(RegExp['$2'])):this[_0x2e9d19(0xc42)][_0x2e9d19(0x211)]=Game_Battler['prototype'][_0x2e9d19(0x5e8)][_0x2e9d19(0x61e)](this),this[_0x2e9d19(0xc42)][_0x2e9d19(0x211)];},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x279)]=function(){const _0x2eb87b=_0x4adfe0;if(this['_cache'][_0x2eb87b(0x69a)]!==undefined)return this['_cache'][_0x2eb87b(0x69a)];if(this[_0x2eb87b(0xcf8)]()[_0x2eb87b(0x15d)][_0x2eb87b(0x634)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x2eb87b(0x69a)]=!![];else this[_0x2eb87b(0xcf8)]()['note'][_0x2eb87b(0x634)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x2eb87b(0xc42)]['svShadow']=![]:this[_0x2eb87b(0xc42)][_0x2eb87b(0x69a)]=Game_Battler[_0x2eb87b(0x6ec)][_0x2eb87b(0x279)][_0x2eb87b(0x61e)](this);return this['_cache'][_0x2eb87b(0x69a)];},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x407)]=function(){const _0x4b6a94=_0x4adfe0;return VisuMZ[_0x4b6a94(0xa98)][_0x4b6a94(0x5bc)][_0x4b6a94(0x2e2)][_0x4b6a94(0xb50)];},Game_Actor['prototype'][_0x4adfe0(0x553)]=function(){const _0x8a8bf5=_0x4adfe0,_0x15b88c=this[_0x8a8bf5(0x37d)](),_0x1b5c1d=_0x15b88c[0x0]?_0x15b88c[0x0][_0x8a8bf5(0xa1a)]:0x0,_0x2cd218=$dataSystem[_0x8a8bf5(0x8c3)][_0x1b5c1d];_0x2cd218&&this['startWeaponAnimation'](_0x2cd218[_0x8a8bf5(0x46a)]);},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x870)]=function(_0x2667e2){const _0x5b0b6d=_0x4adfe0;Game_Battler[_0x5b0b6d(0x6ec)][_0x5b0b6d(0x870)][_0x5b0b6d(0x61e)](this,_0x2667e2),this[_0x5b0b6d(0x349)](_0x2667e2);},Game_Actor[_0x4adfe0(0x6ec)]['getAttackMotion']=function(){const _0x380b67=_0x4adfe0,_0x95a3f0=this[_0x380b67(0x37d)](),_0x189212=_0x95a3f0[0x0]?_0x95a3f0[0x0][_0x380b67(0xa1a)]:0x0;return $dataSystem[_0x380b67(0x8c3)][_0x189212];},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x155)]=function(_0x3d81b9){const _0x160139=_0x4adfe0;_0x3d81b9=_0x3d81b9||0x1,_0x3d81b9--;const _0x1f309f=this[_0x160139(0x37d)]();return _0x1f309f[_0x3d81b9]?_0x1f309f[_0x3d81b9][_0x160139(0x49f)]:0x0;},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x645)]=function(_0x31b6ff){const _0x8d919f=_0x4adfe0;_0x31b6ff=_0x31b6ff||0x1,_0x31b6ff--;const _0x37d106=this[_0x8d919f(0x37d)](),_0x4e494f=_0x37d106[_0x31b6ff]?_0x37d106[_0x31b6ff][_0x8d919f(0xa1a)]:0x0;return $dataSystem[_0x8d919f(0x8c3)][_0x4e494f];},Game_Actor['prototype']['performAttackSlot']=function(_0x4c8304){const _0x726f48=_0x4adfe0;_0x4c8304=_0x4c8304||0x1,_0x4c8304--;const _0x2a328b=this[_0x726f48(0x37d)](),_0x256090=_0x2a328b[_0x4c8304]?_0x2a328b[_0x4c8304]['wtypeId']:0x0,_0x31e7ae=$dataSystem['attackMotions'][_0x256090];if(_0x31e7ae){if(_0x31e7ae[_0x726f48(0xb52)]===0x0)_0x726f48(0x824)==='nkHWN'?this[_0x726f48(0xb04)](_0x726f48(0x71b)):this[_0x726f48(0x2b5)]();else{if(_0x31e7ae['type']===0x1)this[_0x726f48(0xb04)](_0x726f48(0x5e5));else _0x31e7ae[_0x726f48(0xb52)]===0x2&&(_0x726f48(0xc8b)!==_0x726f48(0xb86)?this[_0x726f48(0xb04)]('missile'):this[_0x726f48(0x2c6)]+=0x10);}this[_0x726f48(0x1ca)](_0x31e7ae['weaponImageId']);}},Game_Battler['prototype']['setActiveWeaponSlot']=function(_0x13af08){const _0xa54e=_0x4adfe0;if(this['isActor']()){const _0x28b36d=this[_0xa54e(0x37d)]();if(_0x28b36d[_0xa54e(0xa59)]>0x0){const _0x3538ef=_0x28b36d[_0x13af08];if(_0x3538ef)_0x13af08=this['equips']()[_0xa54e(0x766)](_0x3538ef);}}this['_activeWeaponSlot']=_0x13af08||0x0,this['_cache']={};},Game_Battler['prototype'][_0x4adfe0(0x63e)]=function(){const _0x1b7dea=_0x4adfe0;this[_0x1b7dea(0x737)]=this[_0x1b7dea(0x737)]||0x0,this[_0x1b7dea(0x737)]++,this['_cache']={};},Game_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xabf)]=function(){const _0x12a5a2=_0x4adfe0;this[_0x12a5a2(0x737)]=undefined,this[_0x12a5a2(0xc42)]={};},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xbee)]=Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x970)],Game_Actor[_0x4adfe0(0x6ec)]['equips']=function(){const _0x9e9b15=_0x4adfe0;let _0x39135a=VisuMZ[_0x9e9b15(0xa98)][_0x9e9b15(0xbee)][_0x9e9b15(0x61e)](this);if(this[_0x9e9b15(0xba7)])return _0x39135a;if(this[_0x9e9b15(0x737)]!==undefined){this[_0x9e9b15(0xba7)]=!![];const _0x14e753=this[_0x9e9b15(0x8f7)]();for(let _0x59f5aa=0x0;_0x59f5aa<_0x14e753['length'];_0x59f5aa++){if('chfyj'!==_0x9e9b15(0x740))_0x14e753[_0x59f5aa]===0x1&&this[_0x9e9b15(0x737)]!==_0x59f5aa&&(_0x9e9b15(0xb74)!==_0x9e9b15(0xb74)?_0x302446[_0x9e9b15(0x8b3)](_0xc44ab8[_0x9e9b15(0x718)],0x0):_0x39135a[_0x59f5aa]=null);else{if(!this[_0x9e9b15(0x26e)][_0x9e9b15(0x66f)]())return;while(this['_battler']['isDamagePopupRequested']()){this[_0x9e9b15(0x26e)][_0x9e9b15(0x694)]()&&this['createDamageSprite']();}this['_battler']['clearDamagePopup'](),this[_0x9e9b15(0x26e)][_0x9e9b15(0xb07)]();}}this[_0x9e9b15(0xba7)]=undefined;}return _0x39135a;},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x69e)]=function(_0x5d6359){const _0x4147d0=_0x4adfe0;return _0x5d6359[_0x4147d0(0x771)]()?_0x5d6359['weapons']()[_0x4147d0(0xa59)]||0x1:0x1;},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x9d8)]=function(_0x3ebb00,_0x11b6c9){const _0x49a93a=_0x4adfe0;_0x3ebb00&&_0x3ebb00[_0x49a93a(0x771)]()&&_0x3ebb00[_0x49a93a(0xbce)](_0x11b6c9),this[_0x49a93a(0x115)]();},Window_BattleLog[_0x4adfe0(0x6ec)]['clearActiveWeaponSet']=function(_0x4e5095){const _0x174ed1=_0x4adfe0;if(_0x4e5095&&_0x4e5095['isActor']()){if('dXOVG'!==_0x174ed1(0xae3))_0x4e5095['clearActiveWeaponSlot']();else{const _0x4c8abd=this[_0x174ed1(0x908)](this['_distortionSprite']);this[_0x174ed1(0x844)](this[_0x174ed1(0xb7f)],_0x4c8abd),this[_0x174ed1(0x76c)]();}}this[_0x174ed1(0x115)]();},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xc18)]=function(){const _0x2dcd0d=_0x4adfe0;let _0x3ce1cf=_0x2dcd0d(0xc18);if(this['checkCacheKey'](_0x3ce1cf))return this[_0x2dcd0d(0xc42)][_0x3ce1cf];return this['_cache'][_0x3ce1cf]=this[_0x2dcd0d(0x76f)](this[_0x2dcd0d(0xcf8)]()),this['_cache'][_0x3ce1cf];},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x27b)]=function(){const _0x25c3e6=_0x4adfe0;let _0x43a41b=_0x25c3e6(0x27b);if(this[_0x25c3e6(0x3a1)](_0x43a41b))return this['_cache'][_0x43a41b];return this[_0x25c3e6(0xc42)][_0x43a41b]=this['createBattleUIOffsetY'](this[_0x25c3e6(0xcf8)]()),this[_0x25c3e6(0xc42)][_0x43a41b];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x7ea)]=Game_Enemy[_0x4adfe0(0x6ec)]['setup'],Game_Enemy[_0x4adfe0(0x6ec)]['setup']=function(_0x2bf48d,_0x8527e4,_0x5d5965){const _0x55766f=_0x4adfe0;_0x2bf48d=DataManager[_0x55766f(0x20d)](_0x2bf48d),VisuMZ[_0x55766f(0xa98)][_0x55766f(0x7ea)][_0x55766f(0x61e)](this,_0x2bf48d,_0x8527e4,_0x5d5965),Imported[_0x55766f(0x12f)]&&this['initElementStatusCore'](),this[_0x55766f(0x521)](),this['setupBattleCoreData'](),Imported[_0x55766f(0x12f)]&&this['recoverAll']();},Game_Enemy[_0x4adfe0(0x6ec)]['clearBattleCoreData']=function(){const _0x31fce6=_0x4adfe0,_0x2a26af=VisuMZ[_0x31fce6(0xa98)][_0x31fce6(0x5bc)][_0x31fce6(0x30b)];this[_0x31fce6(0x2ab)]=_0x2a26af[_0x31fce6(0x64b)],this[_0x31fce6(0xb92)]={};},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x7aa)]=function(){const _0x1c4a6d=_0x4adfe0,_0x1a84ef=VisuMZ[_0x1c4a6d(0xa98)][_0x1c4a6d(0x5bc)][_0x1c4a6d(0x30b)],_0x155d70=this[_0x1c4a6d(0x85f)]()['note'];this[_0x1c4a6d(0xb92)]={'name':'','wtypeId':_0x1a84ef[_0x1c4a6d(0x58a)],'collapse':_0x1a84ef['AllowCollapse'],'motionIdle':_0x1a84ef[_0x1c4a6d(0xc59)],'width':_0x1a84ef[_0x1c4a6d(0x332)]||0x40,'height':_0x1a84ef['Height']||0x40,'anchorX':_0x1a84ef[_0x1c4a6d(0xa35)]||0x0,'anchorY':_0x1a84ef[_0x1c4a6d(0x2f2)]||0x0,'shadow':_0x1a84ef['Shadow']};_0x155d70['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x1c4a6d(0x2ab)]=Number(RegExp['$1']));const _0x1e7019=this[_0x1c4a6d(0xb92)];if(_0x155d70[_0x1c4a6d(0x634)](/<SIDEVIEW BATTLER: (.*)>/i))_0x1e7019['name']=String(RegExp['$1']);else{if(_0x155d70['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x3f2cd0=String(RegExp['$1'])[_0x1c4a6d(0x176)](/[\r\n]+/)[_0x1c4a6d(0xb6e)]('');_0x1e7019['name']=DataManager[_0x1c4a6d(0x5e9)](_0x3f2cd0);}}_0x155d70[_0x1c4a6d(0x634)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x1e7019['anchorX']=eval(RegExp['$1']),_0x1e7019[_0x1c4a6d(0xcd6)]=eval(RegExp['$2']));if(_0x155d70['match'](/<SIDEVIEW COLLAPSE>/i))_0x1e7019['collapse']=!![];else _0x155d70[_0x1c4a6d(0x634)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x1e7019[_0x1c4a6d(0xb91)]=![]);if(_0x155d70['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x1e7019[_0x1c4a6d(0xa5e)]=!![];else _0x155d70[_0x1c4a6d(0x634)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x1e7019['shadow']=![]);if(_0x155d70['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x1e7019[_0x1c4a6d(0x2ae)]=String(RegExp['$1'])[_0x1c4a6d(0xc1b)]()[_0x1c4a6d(0xb83)]();else{if(_0x155d70[_0x1c4a6d(0x634)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x5cafc9=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x1c4a6d(0xb6e)]('');_0x1e7019[_0x1c4a6d(0x2ae)]=DataManager[_0x1c4a6d(0x5e9)](_0x5cafc9);}}if(_0x155d70[_0x1c4a6d(0x634)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)){if(_0x1c4a6d(0x61b)!==_0x1c4a6d(0x320))_0x1e7019['width']=Number(RegExp['$1']),_0x1e7019[_0x1c4a6d(0x6a1)]=Number(RegExp['$2']);else{const _0x125ac3=_0x1c7d1a(_0x2f12f9['$1']);_0x125ac3<_0x2f3091?(_0x215d0e(_0x1c4a6d(0x7cd)[_0x1c4a6d(0x31d)](_0x48b032,_0x125ac3,_0x32cd34)),_0x30cc8e[_0x1c4a6d(0x162)]()):_0x4f2924=_0x1395ea[_0x1c4a6d(0x7a0)](_0x125ac3,_0x22c620);}}if(_0x155d70[_0x1c4a6d(0x634)](/<SIDEVIEW WEAPON: (.*)>/i)){if(_0x1c4a6d(0x783)!==_0x1c4a6d(0x783)){if(!_0x5cb076[_0x1c4a6d(0xcfa)]())return;if(!_0x5db499['VisuMZ_3_ActSeqCamera'])return;_0x165f80[_0x1c4a6d(0x360)](_0x11a480,_0x53f091);const _0x40a664=_0x5d4141[_0x1c4a6d(0x781)](),_0x46c436=_0x449b9f[_0x1c4a6d(0xb5f)];_0x410d58[_0x1c4a6d(0xa37)](_0x286ffe[_0x1c4a6d(0x909)],_0x30c50f['OffsetY'],_0x2180b8['Duration'],_0x5ae1ea[_0x1c4a6d(0xc6d)]);if(_0x46c436)_0x40a664[_0x1c4a6d(0x98c)]('battleCamera');}else _0x1e7019[_0x1c4a6d(0xa1a)]=DataManager[_0x1c4a6d(0x1e3)](RegExp['$1']);}else{if(_0x155d70['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x1c4a6d(0x646)!==_0x1c4a6d(0x646)){const _0x2d3c66=_0x5914e2[_0xdb8df];if(_0x2d3c66)this[_0x1c4a6d(0x486)](_0x2d3c66);}else{const _0x2d10bf=String(RegExp['$1'])[_0x1c4a6d(0x176)](/[\r\n]+/)[_0x1c4a6d(0xb6e)](''),_0x1a5700=DataManager[_0x1c4a6d(0x5e9)](_0x2d10bf);_0x1e7019[_0x1c4a6d(0xa1a)]=DataManager['getWtypeIdWithName'](_0x1a5700);}}}if(Imported[_0x1c4a6d(0x12f)]){if(_0x1c4a6d(0x6bc)!==_0x1c4a6d(0x6bc)){const _0x4b89db=_0x1c4a6d(0x2bf)['format'](_0x5ca3b3[_0x1c4a6d(0xb79)]()),_0x5a7fdf=this['createInnerPortrait'](_0x4b89db,_0x1657d),_0x311849=_0x24153f[_0x1c4a6d(0x4e2)]();_0x311849!==''?_0x5a7fdf['bitmap']=_0x1c6c33[_0x1c4a6d(0xc53)](_0x311849):_0x5a7fdf[_0x1c4a6d(0x932)]=_0x35aedf[_0x1c4a6d(0xc4d)];const _0x3c7bcc=this[_0x1c4a6d(0x8a8)](_0x12d875);_0x5a7fdf[_0x1c4a6d(0x893)]['x']=0.5,_0x5a7fdf[_0x1c4a6d(0x893)]['y']=0x1;let _0xe7fefc=_0x5483fc[_0x1c4a6d(0xb95)](_0x3c7bcc['x']+_0x3c7bcc['width']/0x2)+this[_0x1c4a6d(0x581)];_0xe7fefc+=_0x258d72['getBattlePortraitOffsetX']();let _0x4ff759=_0x25a85a[_0x1c4a6d(0xb95)](this['height']);_0x4ff759+=_0x97ed3e[_0x1c4a6d(0x340)](),_0x5a7fdf[_0x1c4a6d(0x119)](_0xe7fefc,_0x4ff759);const _0x3e30ba=_0x27c928[_0x1c4a6d(0xa98)][_0x1c4a6d(0x5bc)][_0x1c4a6d(0x22d)][_0x1c4a6d(0x7a5)];_0x5a7fdf[_0x1c4a6d(0xfc)]['x']=_0x3e30ba,_0x5a7fdf[_0x1c4a6d(0xfc)]['y']=_0x3e30ba,_0x5a7fdf[_0x1c4a6d(0x454)]();}else{const _0x1d60d9=this[_0x1c4a6d(0x755)]();for(const _0x3444ec of _0x1d60d9){const _0x48c0e1=this['traitSet'](_0x3444ec)[_0x1c4a6d(0x816)][_0x1c4a6d(0xb24)]()[_0x1c4a6d(0xb83)](),_0x2d95a2=_0x3444ec[_0x1c4a6d(0xb24)]()[_0x1c4a6d(0xb83)]();if(_0x155d70[_0x1c4a6d(0x634)](VisuMZ[_0x1c4a6d(0x669)][_0x1c4a6d(0xafd)][_0x1c4a6d(0x55e)[_0x1c4a6d(0x31d)](_0x2d95a2,_0x48c0e1)]))_0x1c4a6d(0xa7a)!==_0x1c4a6d(0xa39)?_0x1e7019[_0x1c4a6d(0xa23)]=String(RegExp['$1']):(_0x4e1adb[_0x1c4a6d(0x9e5)](_0x59f731,_0x4a6f0a,_0x1030cb,_0x4f4904,_0x51f153,-0x1),this['callNextMethod']());else{if(_0x155d70[_0x1c4a6d(0x634)](VisuMZ[_0x1c4a6d(0x669)][_0x1c4a6d(0xafd)]['SvBattlerMass-%1-%2'['format'](_0x2d95a2,_0x48c0e1)])){const _0x4c5bf9=String(RegExp['$1'])[_0x1c4a6d(0x176)](/[\r\n]+/)[_0x1c4a6d(0xb6e)]('');_0x1e7019[_0x1c4a6d(0xa23)]=DataManager[_0x1c4a6d(0x5e9)](_0x4c5bf9);}}if(_0x155d70[_0x1c4a6d(0x634)](VisuMZ[_0x1c4a6d(0x669)][_0x1c4a6d(0xafd)][_0x1c4a6d(0x882)[_0x1c4a6d(0x31d)](_0x2d95a2,_0x48c0e1)]))_0x1c4a6d(0xcb5)!==_0x1c4a6d(0x6ef)?_0x1e7019[_0x1c4a6d(0xa1a)]=DataManager[_0x1c4a6d(0x1e3)](RegExp['$1']):(_0x4e6c9f['x']+=this['x'],_0x15e5f6['y']+=this['y']);else{if(_0x155d70[_0x1c4a6d(0x634)](VisuMZ[_0x1c4a6d(0x669)]['RegExp'][_0x1c4a6d(0x315)['format'](_0x2d95a2,_0x48c0e1)])){if(_0x1c4a6d(0x42d)!=='pJIPh'){const _0x17dce2=String(RegExp['$1'])[_0x1c4a6d(0x176)](/[\r\n]+/)[_0x1c4a6d(0xb6e)](''),_0x1a8cbc=DataManager['processRandomizedData'](_0x17dce2);_0x1e7019[_0x1c4a6d(0xa1a)]=DataManager[_0x1c4a6d(0x1e3)](_0x1a8cbc);}else{const _0x148708=this[_0x1c4a6d(0x28e)]()[_0x1c4a6d(0x178)];return _0x148708['match'](/(?:ENEMY|FOE)/i)&&_0x148708[_0x1c4a6d(0x634)](/OR/i)&&_0x148708[_0x1c4a6d(0x634)](/(?:ALLY|FRIEND)/i);}}}if(_0x155d70[_0x1c4a6d(0x634)](VisuMZ[_0x1c4a6d(0x669)][_0x1c4a6d(0xafd)][_0x1c4a6d(0x843)[_0x1c4a6d(0x31d)](_0x2d95a2,_0x48c0e1)]))_0x1e7019[_0x1c4a6d(0x2ae)]=String(RegExp['$1'])[_0x1c4a6d(0xc1b)]()[_0x1c4a6d(0xb83)]();else{if(_0x155d70[_0x1c4a6d(0x634)](VisuMZ[_0x1c4a6d(0x669)][_0x1c4a6d(0xafd)][_0x1c4a6d(0x1f4)[_0x1c4a6d(0x31d)](_0x2d95a2,_0x48c0e1)])){if(_0x1c4a6d(0x45c)===_0x1c4a6d(0x45c)){const _0xff0761=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x1c4a6d(0xb6e)]('');_0x1e7019[_0x1c4a6d(0x2ae)]=DataManager['processRandomizedData'](_0xff0761);}else{if(_0x55656a[_0x1c4a6d(0x84a)]())this[_0x1c4a6d(0x534)](),this[_0x1c4a6d(0x621)]=![],_0x29d35c[_0x1c4a6d(0x63b)]();else this[_0x1c4a6d(0x621)]&&(this[_0x1c4a6d(0x621)]=![],this[_0x1c4a6d(0xcab)](),this[_0x1c4a6d(0x951)]());}}}}}}},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x512)]=function(){const _0x109108=_0x4adfe0;return this[_0x109108(0x2ab)]||0x0;},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xa2e)]=function(){const _0x4d01f5=_0x4adfe0;return this[_0x4d01f5(0x512)]();},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x155)]=function(_0xf57837){const _0x2f0a21=_0x4adfe0;return this[_0x2f0a21(0x512)]();},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x578)]=function(){const _0x4adb67=_0x4adfe0;if(this[_0x4adb67(0x85f)]()['note'][_0x4adb67(0x634)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x4adb67(0x6ec)][_0x4adb67(0x578)][_0x4adb67(0x61e)](this);},Game_Enemy[_0x4adfe0(0x6ec)]['isBattlerGrounded']=function(){const _0x27e30b=_0x4adfe0;if(this['enemy']()[_0x27e30b(0x15d)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype'][_0x4adfe0(0x792)]=function(){const _0x4db13b=_0x4adfe0,_0x35f874=[];for(const _0xfac090 of this[_0x4db13b(0x85f)]()[_0x4db13b(0x6a5)]){if(_0x4db13b(0x541)!==_0x4db13b(0x118)){const _0xbf83ca=$dataSkills[_0xfac090['skillId']];if(_0xbf83ca&&!_0x35f874[_0x4db13b(0x5d0)](_0xbf83ca))_0x35f874[_0x4db13b(0x98e)](_0xbf83ca);}else this[_0x4db13b(0x56b)]=(this[_0x4db13b(0x56b)]*(_0xb1dfb0-0x1)+this[_0x4db13b(0x79b)])/_0x10e0ae;}return _0x35f874;},Game_Enemy['prototype'][_0x4adfe0(0xc18)]=function(){const _0x349446=_0x4adfe0;let _0x34d4b6=_0x349446(0xc18);if(this[_0x349446(0x3a1)](_0x34d4b6))return this['_cache'][_0x34d4b6];return this[_0x349446(0xc42)][_0x34d4b6]=this['createBattleUIOffsetX'](this[_0x349446(0x85f)]()),this[_0x349446(0xc42)][_0x34d4b6];},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x27b)]=function(){const _0x22e3e4=_0x4adfe0;let _0x4e69a0=_0x22e3e4(0x27b);if(this[_0x22e3e4(0x3a1)](_0x4e69a0))return this[_0x22e3e4(0xc42)][_0x4e69a0];return this[_0x22e3e4(0xc42)][_0x4e69a0]=this[_0x22e3e4(0x278)](this[_0x22e3e4(0x85f)]()),this[_0x22e3e4(0xc42)][_0x4e69a0];},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x848)]=function(){const _0x291489=_0x4adfe0;if(this[_0x291489(0xb92)]!==undefined)return this['_svBattlerData'];return this[_0x291489(0x7aa)](),this[_0x291489(0xb92)];},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x147)]=function(){const _0x4eb8b2=_0x4adfe0;return this[_0x4eb8b2(0x848)]()[_0x4eb8b2(0xa23)]!=='';},Game_Enemy['prototype']['svBattlerName']=function(){const _0x3fc895=_0x4adfe0;return this[_0x3fc895(0x848)]()['name'];},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x407)]=function(){const _0x4eec74=_0x4adfe0;if(this[_0x4eec74(0x147)]())return VisuMZ[_0x4eec74(0xa98)][_0x4eec74(0x5bc)][_0x4eec74(0x2e2)][_0x4eec74(0xb50)];else{if('rDfRW'==='rDfRW')return VisuMZ[_0x4eec74(0xa98)][_0x4eec74(0x5bc)][_0x4eec74(0x30b)]['SmoothImage'];else{const _0x4e5a6d=_0x43aba0[_0x4eec74(0x31d)](_0x3b858e['name'](),_0x2b0fb2[_0x4eec74(0x4ae)](_0x3a3226));this['push']('popBaseLine'),this[_0x4eec74(0x98e)]('pushBaseLine'),this[_0x4eec74(0x98e)](_0x4eec74(0x46f),_0x4e5a6d),this[_0x4eec74(0x98e)](_0x4eec74(0x733));}}},Game_Enemy['prototype'][_0x4adfe0(0x870)]=function(_0x464c6a){const _0x411e9d=_0x4adfe0;Game_Battler[_0x411e9d(0x6ec)][_0x411e9d(0x870)][_0x411e9d(0x61e)](this,_0x464c6a);if(this['hasSvBattler']())this[_0x411e9d(0x349)](_0x464c6a);},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x637)]=function(){const _0x412b0e=_0x4adfe0,_0x1eb66a=this[_0x412b0e(0x848)]()['wtypeId']||0x0,_0x5ed8b7=$dataSystem['attackMotions'][_0x1eb66a];if(_0x5ed8b7){if(_0x412b0e(0xb99)===_0x412b0e(0xb99)){if(_0x5ed8b7[_0x412b0e(0xb52)]===0x0)_0x412b0e(0xaa4)!==_0x412b0e(0x447)?this[_0x412b0e(0xb04)]('thrust'):(_0x48e978--,_0x4a4098++);else{if(_0x5ed8b7['type']===0x1)this['requestMotion'](_0x412b0e(0x5e5));else _0x5ed8b7[_0x412b0e(0xb52)]===0x2&&(_0x412b0e(0x6b5)!==_0x412b0e(0x6b5)?_0x548efa[_0x412b0e(0xa98)][_0x412b0e(0x1ba)][_0x412b0e(0x61e)](this):this['requestMotion']('missile'));}}else{const _0x150f86=this['isOnCurrentMap']()?this[_0x412b0e(0x9ce)]:0x0,_0x32ecaf=_0x14d2f8[_0x412b0e(0xc26)];this['setupChild'](_0x32ecaf,_0x150f86),this[_0x412b0e(0x352)]=_0x33b1a6[_0x412b0e(0x1a2)](this[_0x412b0e(0x352)]);const _0x1cda04={'code':0xbc3,'indent':this['_indent'],'parameters':_0x53cef2[_0x412b0e(0x1a2)](_0x5d3f5a)};return this['_list'][_0x412b0e(0x3d4)](this[_0x412b0e(0x16f)]+0x1,0x0,_0x1cda04),!![];}}},Game_Enemy[_0x4adfe0(0x6ec)]['performWeaponAnimation']=function(){const _0x2b493d=_0x4adfe0,_0x2dd846=this['svBattlerData']()[_0x2b493d(0xa1a)]||0x0,_0x47929c=$dataSystem[_0x2b493d(0x8c3)][_0x2dd846];_0x47929c&&this[_0x2b493d(0x1ca)](_0x47929c[_0x2b493d(0x46a)]);},Game_Enemy['prototype'][_0x4adfe0(0xc32)]=function(){const _0x133b9f=_0x4adfe0,_0x58ff9d=this[_0x133b9f(0x848)]()[_0x133b9f(0xa1a)]||0x0;return $dataSystem[_0x133b9f(0x8c3)][_0x58ff9d];},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x645)]=function(_0x5985aa){const _0x29aa92=_0x4adfe0;return this[_0x29aa92(0xc32)]();},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xbfb)]=function(){const _0x5257aa=_0x4adfe0;Game_Battler[_0x5257aa(0x6ec)][_0x5257aa(0xbfb)][_0x5257aa(0x61e)](this),this[_0x5257aa(0x694)]()&&this[_0x5257aa(0x147)]()&&this[_0x5257aa(0xb04)]('damage'),SoundManager[_0x5257aa(0x604)]();},Game_Enemy['prototype'][_0x4adfe0(0x4f1)]=function(){const _0x5ef01b=_0x4adfe0;Game_Battler[_0x5ef01b(0x6ec)][_0x5ef01b(0x4f1)][_0x5ef01b(0x61e)](this),this[_0x5ef01b(0xb04)](_0x5ef01b(0x385));},Game_Enemy['prototype'][_0x4adfe0(0x587)]=function(){const _0x3aab5a=_0x4adfe0;Game_Battler['prototype'][_0x3aab5a(0x587)]['call'](this),this[_0x3aab5a(0xb04)](_0x3aab5a(0x385));},Game_Enemy[_0x4adfe0(0x6ec)]['performCounter']=function(){const _0x4f778a=_0x4adfe0;Game_Battler[_0x4f778a(0x6ec)]['performCounter'][_0x4f778a(0x61e)](this),this[_0x4f778a(0x637)]();},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x58c)]=function(){const _0x206abf=_0x4adfe0;if(this['hasSvBattler']()){if(_0x206abf(0x48d)!==_0x206abf(0x145)){if(this[_0x206abf(0x1e6)]()>=0x1)return!![];return this[_0x206abf(0x848)]()['collapse'];}else _0x1cf639[_0x206abf(0xa98)][_0x206abf(0x60d)][_0x206abf(0x61e)](this,_0x3b364d);}else return!![];},Game_Enemy['prototype'][_0x4adfe0(0xa74)]=function(){const _0x5c7fec=_0x4adfe0;return this[_0x5c7fec(0x848)]()[_0x5c7fec(0x7ac)];},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x5e8)]=function(){const _0x28ed68=_0x4adfe0;return this[_0x28ed68(0x848)]()[_0x28ed68(0xcd6)];},Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x279)]=function(){const _0x4f2790=_0x4adfe0;return this['svBattlerData']()[_0x4f2790(0xa5e)];},VisuMZ[_0x4adfe0(0xa98)]['Game_Enemy_transform']=Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xdc)],Game_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xdc)]=function(_0x446f49){const _0x1041e9=_0x4adfe0;VisuMZ[_0x1041e9(0xa98)][_0x1041e9(0x3de)][_0x1041e9(0x61e)](this,_0x446f49),this[_0x1041e9(0x521)](),this[_0x1041e9(0x7aa)]();const _0x327404=this[_0x1041e9(0xc66)]();_0x327404&&(_0x327404['_battlerName']=undefined,_0x327404[_0x1041e9(0x6ad)](this));},Game_Unit['prototype'][_0x4adfe0(0x469)]=function(_0x26fe14){const _0x12c7a5=_0x4adfe0;for(const _0x38902d of this[_0x12c7a5(0x42b)]()){if(_0x38902d)_0x38902d['processBattleCoreJS'](_0x26fe14);}},Game_Unit[_0x4adfe0(0x6ec)][_0x4adfe0(0x985)]=function(){const _0x250325=_0x4adfe0,_0x233f37=this['aliveMembers']();return _0x233f37[Math[_0x250325(0xc05)](_0x233f37[_0x250325(0xa59)])];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x55d)]=Game_Party[_0x4adfe0(0x6ec)]['addActor'],Game_Party[_0x4adfe0(0x6ec)][_0x4adfe0(0xc0b)]=function(_0x419ffa){const _0x577c11=_0x4adfe0;VisuMZ['BattleCore']['Game_Party_addActor']['call'](this,_0x419ffa),BattleManager[_0x577c11(0x1ad)]();},VisuMZ[_0x4adfe0(0xa98)]['Game_Party_removeActor']=Game_Party[_0x4adfe0(0x6ec)][_0x4adfe0(0x306)],Game_Party[_0x4adfe0(0x6ec)][_0x4adfe0(0x306)]=function(_0x37f23d){const _0x5d8ad8=_0x4adfe0;VisuMZ[_0x5d8ad8(0xa98)][_0x5d8ad8(0x367)][_0x5d8ad8(0x61e)](this,_0x37f23d),BattleManager['refreshStatusWindow']();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x56f)]=Game_Troop['prototype'][_0x4adfe0(0x9ac)],Game_Troop[_0x4adfe0(0x6ec)][_0x4adfe0(0x9ac)]=function(_0x5c1def){const _0x4c7498=_0x4adfe0;$gameTemp[_0x4c7498(0x9ea)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x5c1def),VisuMZ[_0x4c7498(0xa98)]['Game_Troop_setup'][_0x4c7498(0x61e)](this,_0x5c1def),this[_0x4c7498(0x9f6)]();},VisuMZ[_0x4adfe0(0xa98)]['Game_Troop_expTotal']=Game_Troop['prototype'][_0x4adfe0(0xba2)],Game_Troop[_0x4adfe0(0x6ec)][_0x4adfe0(0xba2)]=function(){const _0x4d092d=_0x4adfe0;let _0x6ccc38=VisuMZ[_0x4d092d(0xa98)]['Game_Troop_expTotal']['call'](this);return this[_0x4d092d(0x9d9)]&&(_0x6ccc38*=this[_0x4d092d(0x9d9)]()),Math['ceil'](_0x6ccc38);},Game_Troop['prototype'][_0x4adfe0(0x9d9)]=function(){return 0x1;},Game_Troop[_0x4adfe0(0x6ec)][_0x4adfe0(0x9f6)]=function(){const _0x37c5a3=_0x4adfe0,_0x1f2f45=DataManager[_0x37c5a3(0x2a9)](this[_0x37c5a3(0xbbf)]()['id']);if(_0x1f2f45['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x13c104=RegExp['$1'][_0x37c5a3(0x176)](',')['map'](_0x55ef01=>Number(_0x55ef01));this[_0x37c5a3(0xbfd)](),this[_0x37c5a3(0xc25)](_0x13c104);}},Game_Troop[_0x4adfe0(0x6ec)][_0x4adfe0(0xbfd)]=function(){const _0x615f57=_0x4adfe0;let _0x53fab1=_0x615f57(0x71a)+'\x0a';_0x53fab1+=_0x615f57(0x29b);Imported[_0x615f57(0xa2c)]&&(VisuMZ[_0x615f57(0x862)][_0x615f57(0xcc9)]<1.11&&(alert(_0x53fab1[_0x615f57(0x31d)]('BTB')),SceneManager['exit']()));if(Imported[_0x615f57(0x134)]){if('fnbEw'!==_0x615f57(0x1b0)){if(VisuMZ[_0x615f57(0x70c)][_0x615f57(0xcc9)]<1.19){if(_0x615f57(0x47d)==='YkkbZ')alert(_0x53fab1[_0x615f57(0x31d)](_0x615f57(0x895))),SceneManager['exit']();else return _0x6a0815[_0x615f57(0xa98)][_0x615f57(0x5bc)]['Actor']['ChantStyle']||![];}}else this[_0x615f57(0x415)]=this[_0x615f57(0xce4)]();}Imported[_0x615f57(0x84f)]&&(VisuMZ[_0x615f57(0x1c5)]['version']<1.15&&(alert(_0x53fab1[_0x615f57(0x31d)]('STB')),SceneManager[_0x615f57(0x162)]()));},Game_Troop[_0x4adfe0(0x6ec)][_0x4adfe0(0xc25)]=function(_0x466521){const _0x55b9c6=_0x4adfe0;this['_namesCount']={};for(const _0x14345d of this[_0x55b9c6(0x42b)]()){if(!_0x14345d)continue;_0x14345d[_0x55b9c6(0x5a5)]('');}for(const _0x4e4f02 of _0x466521){const _0x2a3f7c=$dataTroops[_0x4e4f02];if(_0x2a3f7c)this['addExtendedTroopMembers'](_0x2a3f7c);}this[_0x55b9c6(0x82d)]();},Game_Troop[_0x4adfe0(0x6ec)][_0x4adfe0(0x486)]=function(_0xe15619){const _0x18c49a=_0x4adfe0;for(const _0x39fe62 of _0xe15619[_0x18c49a(0x42b)]){if($dataEnemies[_0x39fe62['enemyId']]){const _0x4c5b41=_0x39fe62['enemyId'],_0x13a113=_0x39fe62['x'],_0x208d27=_0x39fe62['y'],_0x34278f=new Game_Enemy(_0x4c5b41,_0x13a113,_0x208d27);_0x39fe62[_0x18c49a(0xa2f)]&&_0x34278f[_0x18c49a(0x9e8)](),this['_enemies'][_0x18c49a(0x98e)](_0x34278f);}}},VisuMZ['BattleCore'][_0x4adfe0(0xc61)]=Game_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0x546)],Game_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0x546)]=function(){const _0x35658b=_0x4adfe0;VisuMZ[_0x35658b(0xa98)][_0x35658b(0xc61)]['call'](this),this[_0x35658b(0x2e3)]();},Game_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0x2e3)]=function(){const _0x5e4646=_0x4adfe0;this[_0x5e4646(0xa6c)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x212bc2=$dataMap[_0x5e4646(0x15d)];if(!_0x212bc2)return;const _0x20e1c2=_0x212bc2[_0x5e4646(0x634)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x20e1c2)for(const _0x287b5c of _0x20e1c2){if(_0x5e4646(0x28f)!=='cWLYN')_0x35329d+=_0x545f65['isActor']()?-_0xcc2d1f:_0x16f619,_0x5a44dd+=_0x1639bd[_0x5e4646(0x771)]()?-_0x13b066:_0x423491;else{_0x287b5c[_0x5e4646(0x634)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0xaaa3a7=Number(RegExp['$1']),_0x2dcd50=Number(RegExp['$2']),_0x2719dd=_0x2dcd50===0x1?this['_regionBattleback1']:this[_0x5e4646(0x3cd)],_0x2d6f27=String(RegExp['$3']);_0x2719dd[_0xaaa3a7]=_0x2d6f27;}}},VisuMZ['BattleCore'][_0x4adfe0(0x8d0)]=Game_Map['prototype']['battleback1Name'],Game_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0x8b4)]=function(){const _0x5edd6e=_0x4adfe0;if(!BattleManager[_0x5edd6e(0xa46)]()){const _0x1216e7=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x5edd6e(0xa6c)]&&this[_0x5edd6e(0xa6c)][_0x1216e7]){if(_0x5edd6e(0x902)===_0x5edd6e(0x902))return this[_0x5edd6e(0xa6c)][_0x1216e7];else this[_0x5edd6e(0xafe)]('dying');}}return VisuMZ[_0x5edd6e(0xa98)][_0x5edd6e(0x8d0)][_0x5edd6e(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x91a)]=Game_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0x974)],Game_Map[_0x4adfe0(0x6ec)]['battleback2Name']=function(){const _0x16c45f=_0x4adfe0;if(!BattleManager[_0x16c45f(0xa46)]()){if(_0x16c45f(0x8b8)===_0x16c45f(0x44b))_0x3fc420=!_0x1117e7;else{const _0x40c1e6=$gamePlayer[_0x16c45f(0x143)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x16c45f(0x3cd)][_0x40c1e6]){if('VAFgj'===_0x16c45f(0xbb6))_0x168811[_0x16c45f(0xa98)][_0x16c45f(0x22a)][_0x16c45f(0x61e)](this),delete this[_0x16c45f(0xa8b)]['pageup'],delete this[_0x16c45f(0xa8b)][_0x16c45f(0x891)];else return this[_0x16c45f(0x3cd)][_0x40c1e6];}}}return VisuMZ[_0x16c45f(0xa98)][_0x16c45f(0x91a)][_0x16c45f(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x9f2)]=Game_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0xaf8)],Game_Map[_0x4adfe0(0x6ec)]['encounterList']=function(){const _0x151065=_0x4adfe0;let _0x12e1ee=JsonEx[_0x151065(0x1a2)](VisuMZ['BattleCore'][_0x151065(0x9f2)][_0x151065(0x61e)](this));return VisuMZ[_0x151065(0xa98)][_0x151065(0x767)](_0x12e1ee);},VisuMZ['BattleCore'][_0x4adfe0(0x767)]=function(_0xb02a32){const _0x22ff56=_0x4adfe0;var _0x211bb1,_0x4a133e,_0x45ec32;for(_0x45ec32=_0xb02a32[_0x22ff56(0xa59)]-0x1;_0x45ec32>0x0;_0x45ec32--){_0x211bb1=Math[_0x22ff56(0xa55)](Math[_0x22ff56(0x256)]()*(_0x45ec32+0x1)),_0x4a133e=_0xb02a32[_0x45ec32],_0xb02a32[_0x45ec32]=_0xb02a32[_0x211bb1],_0xb02a32[_0x211bb1]=_0x4a133e;}return _0xb02a32;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x915)]=Game_Interpreter[_0x4adfe0(0x6ec)][_0x4adfe0(0x4cc)],Game_Interpreter[_0x4adfe0(0x6ec)][_0x4adfe0(0x4cc)]=function(_0x449afb){const _0x5e8213=_0x4adfe0;return $gameTemp[_0x5e8213(0xbb2)](this),VisuMZ[_0x5e8213(0xa98)][_0x5e8213(0x915)][_0x5e8213(0x61e)](this,_0x449afb);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x62c)]=Game_Interpreter['prototype']['updateWaitMode'],Game_Interpreter[_0x4adfe0(0x6ec)][_0x4adfe0(0x762)]=function(){const _0x4a5efb=_0x4adfe0;if(SceneManager[_0x4a5efb(0xcfa)]())switch(this[_0x4a5efb(0x515)]){case'battleAngle':if(Imported[_0x4a5efb(0x3cb)]){if(_0x4a5efb(0xbcd)===_0x4a5efb(0xae5))this[_0x4a5efb(0xaa6)]=(this['_growX']*(_0x513198-0x1)+this[_0x4a5efb(0x8eb)])/_0x35ab99,this[_0x4a5efb(0xad2)]=(this[_0x4a5efb(0xad2)]*(_0x3016d1-0x1)+this['_targetGrowY'])/_0x3f5a43;else{if($gameScreen['battleCameraData']()['angleDuration']>0x0)return!![];this[_0x4a5efb(0x515)]='';}}break;case _0x4a5efb(0x281):if(BattleManager['_spriteset'][_0x4a5efb(0x35d)]())return!![];this[_0x4a5efb(0x515)]='';break;case _0x4a5efb(0x4c6):if(Imported[_0x4a5efb(0x3cb)]){if(_0x4a5efb(0x650)!==_0x4a5efb(0x9b7)){if($gameScreen[_0x4a5efb(0x5fc)]()[_0x4a5efb(0x9c5)]>0x0)return!![];if($gameScreen[_0x4a5efb(0x5fc)]()[_0x4a5efb(0x87b)]>0x0)return!![];this[_0x4a5efb(0x515)]='';}else this[_0x4a5efb(0x6c3)]=new _0x6a6f56(),this[_0x4a5efb(0x6c3)]['x']=this[_0x4a5efb(0x4b5)]['x'],this[_0x4a5efb(0x6c3)]['y']=this['_battleField']['y'],this['addChild'](this['_damageContainer']);}break;case _0x4a5efb(0x627):if(BattleManager[_0x4a5efb(0x898)]['isEffecting']())return!![];this['_waitMode']='';break;case'battleFloat':if(BattleManager[_0x4a5efb(0x898)][_0x4a5efb(0x19e)]())return!![];this[_0x4a5efb(0x515)]='';break;case _0x4a5efb(0xc86):if(BattleManager[_0x4a5efb(0x898)][_0x4a5efb(0x543)]())return!![];this['_waitMode']='';break;case _0x4a5efb(0x957):if(BattleManager[_0x4a5efb(0x964)]['isBusy']())return!![];this[_0x4a5efb(0x515)]='';break;case _0x4a5efb(0x368):if(BattleManager['_spriteset'][_0x4a5efb(0x921)]())return!![];this['_waitMode']='';break;case _0x4a5efb(0xa02):if(BattleManager[_0x4a5efb(0x898)][_0x4a5efb(0x254)]())return!![];this[_0x4a5efb(0x515)]='';break;case _0x4a5efb(0xc3c):if(BattleManager[_0x4a5efb(0x898)][_0x4a5efb(0xcb9)]())return!![];this[_0x4a5efb(0x515)]='';break;case _0x4a5efb(0x2cc):if(BattleManager[_0x4a5efb(0x898)][_0x4a5efb(0x4e0)]())return!![];this[_0x4a5efb(0x515)]='';break;case _0x4a5efb(0x2c3):if(Imported[_0x4a5efb(0xb51)]){if('VMQkA'==='mSZFz')return this[_0x4a5efb(0x144)]()&&this[_0x4a5efb(0x144)]()[_0x4a5efb(0x28e)]()&&!this[_0x4a5efb(0x144)]()[_0x4a5efb(0x732)]();else{if(BattleManager[_0x4a5efb(0x898)]['isAnyProjectilePresent']())return!![];this[_0x4a5efb(0x515)]='';}}break;case _0x4a5efb(0xb7b):if(Imported[_0x4a5efb(0x3cb)]){if('ATJal'===_0x4a5efb(0x391)){if($gameScreen[_0x4a5efb(0x5fc)]()['skewDuration']>0x0)return!![];this['_waitMode']='';}else _0x288e24?(this['_windowLayer']['x']=(_0xea1baf[_0x4a5efb(0x1e2)]-_0x46cfd1[_0x4a5efb(0xcc7)])/0x2,this[_0x4a5efb(0x743)]['y']=(_0x18b52f[_0x4a5efb(0x6a1)]-_0x28d2c0[_0x4a5efb(0x468)])/0x2):(this[_0x4a5efb(0x743)]['x']=_0x745fb2['width']*0xa,this[_0x4a5efb(0x743)]['y']=_0x527805[_0x4a5efb(0x6a1)]*0xa);}break;case'battleSpin':if(BattleManager['_spriteset'][_0x4a5efb(0x6fa)]())return!![];this[_0x4a5efb(0x515)]='';break;case _0x4a5efb(0x2c9):if(Imported[_0x4a5efb(0x3cb)]){if($gameScreen[_0x4a5efb(0x5fc)]()['zoomDuration']>0x0)return!![];this[_0x4a5efb(0x515)]='';}break;case _0x4a5efb(0xb32):if(Imported[_0x4a5efb(0x445)]){if(_0x4a5efb(0x4fb)!=='cJKtM')this['_waitMode']='';else{if(BattleManager[_0x4a5efb(0x898)]['isAnyoneInjectAniPrepping']){if(_0x4a5efb(0x82e)===_0x4a5efb(0x212)){if(_0x34e989===_0x255eba['deathStateId']()){let _0x296103=_0x500a1e[_0x4a5efb(0x6b2)];_0x296103*=_0x3d4275[_0x4a5efb(0xc88)](_0x15e666),_0x296103*=this[_0x4a5efb(0x92f)]()[_0x4a5efb(0xbbd)](_0x5253bc),_0x296103*=this[_0x4a5efb(0xad8)](_0xed449),_0x54402a['random']()<_0x296103&&(_0x200b92[_0x4a5efb(0xb16)]=!![],this[_0x4a5efb(0x170)](_0x32ec08));}}else{if(BattleManager['_spriteset'][_0x4a5efb(0x1b1)]())return!![];this['_waitMode']=_0x4a5efb(0x142);}}else this[_0x4a5efb(0x515)]='';break;}}break;case _0x4a5efb(0x142):if(Imported[_0x4a5efb(0x445)]){if(BattleManager[_0x4a5efb(0x898)][_0x4a5efb(0x4cb)]())return!![];this[_0x4a5efb(0x515)]='';}break;}return VisuMZ[_0x4a5efb(0xa98)][_0x4a5efb(0x62c)][_0x4a5efb(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xc33)]=Game_Interpreter[_0x4adfe0(0x6ec)]['command301'],Game_Interpreter[_0x4adfe0(0x6ec)][_0x4adfe0(0x7a2)]=function(_0x592f53){const _0x3f438c=_0x4adfe0;if(!$gameParty[_0x3f438c(0x73c)]()){if(_0x3f438c(0x538)!==_0x3f438c(0x2b7))return this['command301_PreBattleEvent'](_0x592f53);else{const _0x505f93=_0x28b9da-this['_homeX'],_0x537f12=_0x2f56fa-this[_0x3f438c(0x5e7)];this[_0x3f438c(0xc0d)]=_0x111d31,this['_homeY']=_0x4c5724,this[_0x3f438c(0x248)]-=_0x505f93,this[_0x3f438c(0xafc)]-=_0x537f12,this[_0x3f438c(0x7fc)]-=_0x505f93,this[_0x3f438c(0x5d7)]-=_0x537f12,this[_0x3f438c(0x1e0)]();}}else{if(_0x3f438c(0x3f6)===_0x3f438c(0x3f6))return VisuMZ[_0x3f438c(0xa98)][_0x3f438c(0xc33)]['call'](this,_0x592f53);else this[_0x3f438c(0x2ab)]=_0x16ff90(_0x542e45['$1']);}},Game_Interpreter[_0x4adfe0(0x6ec)]['command3011']=function(_0x47dd1d){const _0x4ccff2=_0x4adfe0;return VisuMZ['BattleCore'][_0x4ccff2(0xc33)][_0x4ccff2(0x61e)](this,_0x47dd1d),BattleManager[_0x4ccff2(0x68e)](_0x1d5b43=>{const _0x2b877b=_0x4ccff2;this[_0x2b877b(0x88c)][this[_0x2b877b(0x682)]]=_0x1d5b43;}),!![];},VisuMZ[_0x4adfe0(0xa98)]['CheckMapBattleEventValid']=function(_0x2befbf){const _0x380165=_0x4adfe0,_0x37134e=$dataCommonEvents[_0x2befbf];if(!_0x37134e)return![];if(_0x37134e[_0x380165(0xc26)][_0x380165(0xa59)]<=0x1)return![];return!![];},Game_Interpreter['prototype'][_0x4adfe0(0x716)]=function(_0x43dafc){const _0x44f349=_0x4adfe0,_0xbd309c=VisuMZ[_0x44f349(0xa98)][_0x44f349(0x5bc)]['Mechanics'],_0x5d4f0e=_0xbd309c[_0x44f349(0x959)],_0x4ea077=$dataCommonEvents[_0x5d4f0e];if(_0x4ea077&&VisuMZ[_0x44f349(0xa98)]['CheckMapBattleEventValid'](_0x5d4f0e)){if('LpTBc'!==_0x44f349(0xc11)){const _0x278998=this['isOnCurrentMap']()?this['_eventId']:0x0,_0x4317e1=_0x4ea077[_0x44f349(0xc26)];this[_0x44f349(0x63d)](_0x4317e1,_0x278998),this[_0x44f349(0x352)]=JsonEx[_0x44f349(0x1a2)](this[_0x44f349(0x352)]);const _0x336863={'code':0xbc3,'indent':this[_0x44f349(0x682)],'parameters':JsonEx[_0x44f349(0x1a2)](_0x43dafc)};return this['_list'][_0x44f349(0x3d4)](this[_0x44f349(0x16f)]+0x1,0x0,_0x336863),!![];}else this['x']=_0x2f19de[_0x44f349(0xb95)](_0x372879[_0x44f349(0xcc7)]/0x2),this['y']=_0x37a3aa[_0x44f349(0xb95)](_0x19f630['boxHeight']/0x2);}else return VisuMZ['BattleCore'][_0x44f349(0xc33)][_0x44f349(0x61e)](this,_0x43dafc);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x75e)]=BattleManager['onEncounter'],BattleManager[_0x4adfe0(0x45b)]=function(){const _0x47d814=_0x4adfe0;VisuMZ[_0x47d814(0xa98)][_0x47d814(0x75e)]['call'](this),this[_0x47d814(0x7b8)]();},BattleManager[_0x4adfe0(0x7b8)]=function(){const _0x351f66=_0x4adfe0,_0x7f15ba=VisuMZ[_0x351f66(0xa98)][_0x351f66(0x5bc)][_0x351f66(0x4e9)],_0x1da9fb=_0x7f15ba[_0x351f66(0x959)];_0x1da9fb&&VisuMZ[_0x351f66(0xa98)][_0x351f66(0x884)](_0x1da9fb)&&(_0x351f66(0x489)==='lbfxQ'?(this[_0x351f66(0x40c)]=!![],$gameTemp[_0x351f66(0xe3)](_0x7f15ba['BattleStartEvent']),$gameMap[_0x351f66(0x334)](),$gameMap[_0x351f66(0x398)][_0x351f66(0x942)]=!![]):(_0x40fa36=_0x23453c[_0x351f66(0xcd9)]((_0x42068b,_0x355171,_0x27d4a4)=>_0x27d4a4[_0x351f66(0x766)](_0x42068b)===_0x355171),_0x1ecf08[_0x351f66(0xcfa)]()&&_0x3fe1ef[_0x351f66(0x2dc)]()&&(_0x269250=!_0x409847),_0x3d3aba[_0x351f66(0xa98)]['Game_Temp_requestAnimation']['call'](this,_0xce8d90,_0x201652,_0x9ae6aa),_0x4bca2b[_0x351f66(0xcfa)]()&&_0x4c12bb[_0x351f66(0x898)]['processAnimationRequests']())),_0x7f15ba['DefeatEvent']>0x0&&(this[_0x351f66(0x2fd)]=!![]);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x509)]=Scene_Map['prototype'][_0x4adfe0(0xaea)],Scene_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0xaea)]=function(){const _0x1f0e4d=_0x4adfe0;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ[_0x1f0e4d(0xa98)][_0x1f0e4d(0x509)][_0x1f0e4d(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x823)]=Scene_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0x731)],Scene_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0x731)]=function(){const _0x486616=_0x4adfe0;if(BattleManager[_0x486616(0x40c)]){if(_0x486616(0x48e)!==_0x486616(0x9b9))this['battleCorePreBattleCommonEvent']();else return _0x57dcc7[_0x486616(0x6e8)]()['aliveMembers']();}else _0x486616(0x455)===_0x486616(0x808)?this['parseForcedGameTroopSettingsBattleCore'](_0x45e302['note']):VisuMZ['BattleCore'][_0x486616(0x823)][_0x486616(0x61e)](this);},Scene_Map['prototype'][_0x4adfe0(0x7d6)]=function(){const _0x14dcc1=_0x4adfe0;this[_0x14dcc1(0x81a)]=!![];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x71d)]=SceneManager[_0x4adfe0(0x963)],SceneManager[_0x4adfe0(0x963)]=function(){const _0x5b4836=_0x4adfe0;if(BattleManager[_0x5b4836(0x40c)])return![];return VisuMZ[_0x5b4836(0xa98)][_0x5b4836(0x71d)][_0x5b4836(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x9e3)]=Game_Interpreter[_0x4adfe0(0x6ec)][_0x4adfe0(0xa33)],Game_Interpreter[_0x4adfe0(0x6ec)][_0x4adfe0(0xa33)]=function(){const _0x208db2=_0x4adfe0;VisuMZ[_0x208db2(0xa98)]['Game_Interpreter_terminate'][_0x208db2(0x61e)](this),this[_0x208db2(0x942)]&&(this[_0x208db2(0x942)]=undefined,SceneManager['_scene'][_0x208db2(0x60f)]());},Scene_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0x60f)]=function(){const _0x4cfdb2=_0x4adfe0;BattleManager[_0x4cfdb2(0x40c)]=undefined,BattleManager[_0x4cfdb2(0x386)]=!![],this[_0x4cfdb2(0x75f)]();},VisuMZ['BattleCore'][_0x4adfe0(0x790)]=Scene_Map[_0x4adfe0(0x6ec)]['initialize'],Scene_Map[_0x4adfe0(0x6ec)]['initialize']=function(){const _0x410faa=_0x4adfe0;VisuMZ['BattleCore'][_0x410faa(0x790)]['call'](this),BattleManager['_battleCoreBattleResumeAfter']&&(this[_0x410faa(0x81a)]=!![],BattleManager[_0x410faa(0x386)]=undefined);},VisuMZ['BattleCore'][_0x4adfe0(0x7e8)]=Scene_Map[_0x4adfe0(0x6ec)]['initialize'],Scene_Map[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)]=function(){const _0x5103fe=_0x4adfe0;VisuMZ[_0x5103fe(0xa98)][_0x5103fe(0x7e8)][_0x5103fe(0x61e)](this),$gameTemp[_0x5103fe(0x9ea)]();},VisuMZ[_0x4adfe0(0xa98)]['Scene_ItemBase_applyItem']=Scene_ItemBase['prototype'][_0x4adfe0(0x4ce)],Scene_ItemBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x4ce)]=function(){const _0x5682f5=_0x4adfe0;VisuMZ['BattleCore'][_0x5682f5(0x476)][_0x5682f5(0x61e)](this);if(this[_0x5682f5(0x28e)]()[_0x5682f5(0x15d)][_0x5682f5(0x634)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if('Ohjrk'!==_0x5682f5(0x153))_0x423154=_0x35c7fd;else return;}this['item']()[_0x5682f5(0x15d)][_0x5682f5(0x634)](/<CUSTOM ACTION SEQUENCE>/i)&&('RgOYO'!==_0x5682f5(0x2d2)?(_0x3f6e9b[_0x5682f5(0xa98)][_0x5682f5(0x247)]['call'](this),this[_0x5682f5(0x15c)]()):$gameTemp[_0x5682f5(0xb2c)]=[]),DataManager[_0x5682f5(0xbae)](this['item']())&&($gameTemp[_0x5682f5(0xb2c)]=[]);},VisuMZ['BattleCore'][_0x4adfe0(0xba8)]=Scene_Options[_0x4adfe0(0x6ec)][_0x4adfe0(0x939)],Scene_Options[_0x4adfe0(0x6ec)][_0x4adfe0(0x939)]=function(){const _0x1d00b0=_0x4adfe0;let _0x46ca19=VisuMZ['BattleCore'][_0x1d00b0(0xba8)]['call'](this);const _0x431b4b=VisuMZ[_0x1d00b0(0xa98)][_0x1d00b0(0x5bc)];if(_0x431b4b[_0x1d00b0(0x936)][_0x1d00b0(0x431)]&&_0x431b4b['AutoBattle']['AdjustRect'])_0x46ca19+=0x2;if(_0x431b4b['HpGauge']['AddOption']&&_0x431b4b[_0x1d00b0(0x1f0)][_0x1d00b0(0x8a9)])_0x46ca19+=0x1;return _0x46ca19;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x919)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)]=function(){const _0x2c7b1=_0x4adfe0;VisuMZ[_0x2c7b1(0xa98)][_0x2c7b1(0x919)]['call'](this),this[_0x2c7b1(0x429)]();},VisuMZ['BattleCore']['Scene_Battle_start']=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x745)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x745)]=function(){const _0x53bd7d=_0x4adfe0;SceneManager[_0x53bd7d(0x18a)]()?(Scene_Message[_0x53bd7d(0x6ec)][_0x53bd7d(0x745)][_0x53bd7d(0x61e)](this),this[_0x53bd7d(0x898)]&&this[_0x53bd7d(0x898)]['update'](),BattleManager[_0x53bd7d(0x8ea)]&&BattleManager[_0x53bd7d(0x7a6)]()):(VisuMZ['BattleCore'][_0x53bd7d(0xa32)][_0x53bd7d(0x61e)](this),$gameTroop[_0x53bd7d(0xa17)]());},VisuMZ['BattleCore']['Scene_Battle_stop']=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x75f)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x75f)]=function(){const _0x190039=_0x4adfe0;SceneManager[_0x190039(0x388)]()?Scene_Message[_0x190039(0x6ec)][_0x190039(0x75f)][_0x190039(0x61e)](this):_0x190039(0x17d)===_0x190039(0x17d)?VisuMZ[_0x190039(0xa98)][_0x190039(0x1ba)][_0x190039(0x61e)](this):this['autoSelectLastSelected']();},VisuMZ['BattleCore']['Scene_Battle_terminate']=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xa33)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xa33)]=function(){const _0x5b12c1=_0x4adfe0;if(SceneManager[_0x5b12c1(0x388)]()){if(_0x5b12c1(0x5f2)!==_0x5b12c1(0x5f2))return this[_0x5b12c1(0x726)]&&this['_scene'][_0x5b12c1(0xab3)]===_0x4e8998;else Scene_Message[_0x5b12c1(0x6ec)][_0x5b12c1(0xa33)][_0x5b12c1(0x61e)](this);}else _0x5b12c1(0x7cf)!==_0x5b12c1(0x7cf)?(this['_windowLayer']['x']=(_0x47b1bd[_0x5b12c1(0x1e2)]-_0x574ba7[_0x5b12c1(0xcc7)])/0x2,this[_0x5b12c1(0x743)]['y']=(_0xb92a50['height']-_0x55b15b['boxHeight'])/0x2):VisuMZ[_0x5b12c1(0xa98)][_0x5b12c1(0x6b8)][_0x5b12c1(0x61e)](this);this[_0x5b12c1(0x429)]();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x3cc)]=function(){const _0x3edbd9=_0x4adfe0;if(ConfigManager[_0x3edbd9(0xa68)]&&ConfigManager['uiInputPosition']!==undefined){if(_0x3edbd9(0x60b)!==_0x3edbd9(0xc1c))return ConfigManager[_0x3edbd9(0x6e4)];else{if(!_0x457f07[_0x3edbd9(0x1bc)]())return;const _0x12082b=this[_0x3edbd9(0xc66)]();if(!_0x12082b)return;_0x12082b[_0x3edbd9(0xbc8)](_0x286530,_0x36d099,_0x57e49c,_0x1668a6);}}else{if(this['battleLayoutStyle']()===_0x3edbd9(0x2a2))return![];else{return Scene_Message[_0x3edbd9(0x6ec)]['isRightInputMode']['call'](this);;}}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x2b0)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x6ba)],Scene_Battle['prototype'][_0x4adfe0(0x6ba)]=function(){const _0x50534b=_0x4adfe0;this['createEnemyNameContainer'](),VisuMZ[_0x50534b(0xa98)]['Scene_Battle_createAllWindows'][_0x50534b(0x61e)](this),this[_0x50534b(0x6eb)]();},VisuMZ['BattleCore'][_0x4adfe0(0x9ca)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x11f)],Scene_Battle[_0x4adfe0(0x6ec)]['createEnemyWindow']=function(){const _0x237241=_0x4adfe0;VisuMZ[_0x237241(0xa98)][_0x237241(0x9ca)]['call'](this),this['createMultiTargetWindows']();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x161)]=function(){const _0x1de47c=_0x4adfe0;this['createMultiTargetWindow'](!![]),this[_0x1de47c(0x409)](![]);},Scene_Battle['prototype'][_0x4adfe0(0x472)]=function(_0x433c9d){const _0x5c3b73=_0x4adfe0,_0x16b4ea=Window_BattleMultiTarget[_0x5c3b73(0xb39)],_0xa88387=this[_0x5c3b73(0x422)](0x1,!![]);let _0x2f0c09=_0x433c9d?Graphics[_0x5c3b73(0xcc7)]-_0x16b4ea:0x0;_0x2f0c09+=_0x433c9d?Window_BattleMultiTarget[_0x5c3b73(0xdd)]:Window_BattleMultiTarget[_0x5c3b73(0x74d)];const _0x322b82=[_0x5c3b73(0x6ea)][_0x5c3b73(0x5d0)](this[_0x5c3b73(0xca7)]())?0x0:this[_0x5c3b73(0x326)][_0x5c3b73(0x6a1)];let _0x3d1ded=Graphics['boxHeight']-_0x322b82-_0xa88387;return _0x3d1ded+=_0x433c9d?Window_BattleMultiTarget['ACTOR_OFFSET_Y']:Window_BattleMultiTarget[_0x5c3b73(0x532)],new Rectangle(_0x2f0c09,_0x3d1ded,_0x16b4ea,_0xa88387);},Scene_Battle[_0x4adfe0(0x6ec)]['createMultiTargetWindow']=function(_0x2d2cd2){const _0x1ae773=_0x4adfe0,_0x15b7c6=this[_0x1ae773(0x472)](_0x2d2cd2),_0x403727=new Window_BattleMultiTarget(_0x15b7c6,_0x2d2cd2);this[_0x1ae773(0x631)](_0x403727);if(_0x2d2cd2)'QVons'!=='ivVtH'?this['_actorMultiTargetWindow']=_0x403727:(_0x51bd59[_0x1ae773(0xa98)][_0x1ae773(0x92c)]['call'](this,_0x3c369f),this[_0x1ae773(0x115)]());else{if(_0x1ae773(0x2bb)!==_0x1ae773(0x1af))this['_enemyMultiTargetWindow']=_0x403727;else{if(this[_0x1ae773(0xacc)]!=='')return;typeof _0x5c9ae8===_0x1ae773(0x217)?this['_targetBattlerKey']=_0x208cb0[_0x1ae773(0xc1b)]()[_0x1ae773(0xb83)]():this[_0x1ae773(0xacc)]=_0x452773[_0x1ae773(0x8ef)]();}}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x280)]=Scene_Battle[_0x4adfe0(0x6ec)]['createCancelButton'],Scene_Battle['prototype'][_0x4adfe0(0x614)]=function(){const _0x578d7d=_0x4adfe0;VisuMZ[_0x578d7d(0xa98)][_0x578d7d(0x280)][_0x578d7d(0x61e)](this);if(this[_0x578d7d(0xca7)]()===_0x578d7d(0x2a2)){if(_0x578d7d(0x4e8)!==_0x578d7d(0x4e8)){if(!_0x2640d4['isSceneBattle']())return;if(!_0x34a086[_0x578d7d(0x84f)])return;if(!_0x4a6a6d[_0x578d7d(0x4e3)]())return;_0x13559b[_0x578d7d(0x360)](_0xaa875e,_0x177b92);const _0x1b5877=_0x3b1b5c[_0x578d7d(0x496)];_0x1cca67[_0x578d7d(0x48b)]&&_0x4d7505['_subject'][_0x578d7d(0x186)](_0x1b5877);}else this[_0x578d7d(0x655)]();}},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x50d)]=function(_0x4474bb){const _0x584790=_0x4adfe0;if(_0x4474bb)this[_0x584790(0x743)]['x']=(Graphics[_0x584790(0x1e2)]-Graphics[_0x584790(0xcc7)])/0x2,this[_0x584790(0x743)]['y']=(Graphics['height']-Graphics[_0x584790(0x468)])/0x2;else{if(_0x584790(0xaf4)!=='acCgM')return _0x584790(0x639);else this[_0x584790(0x743)]['x']=Graphics[_0x584790(0x1e2)]*0xa,this['_windowLayer']['y']=Graphics[_0x584790(0x6a1)]*0xa;}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x2d4)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xa70)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xa70)]=function(){const _0x413e37=_0x4adfe0,_0x27bd79=BattleManager[_0x413e37(0xcf8)]();VisuMZ['BattleCore'][_0x413e37(0x2d4)][_0x413e37(0x61e)](this);if(_0x27bd79){if(_0x27bd79===BattleManager['actor']())return;if(_0x27bd79===BattleManager[_0x413e37(0x48b)])return;if(_0x27bd79['battler']())_0x27bd79['battler']()[_0x413e37(0x156)]();}},VisuMZ['BattleCore'][_0x4adfe0(0x58f)]=Scene_Battle['prototype'][_0x4adfe0(0x573)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x573)]=function(){const _0x5d0d62=_0x4adfe0,_0x2ab2e2=BattleManager['actor']();if(_0x2ab2e2&&_0x2ab2e2[_0x5d0d62(0xc66)])_0x2ab2e2[_0x5d0d62(0xc66)]()['stepBack']();VisuMZ[_0x5d0d62(0xa98)][_0x5d0d62(0x58f)][_0x5d0d62(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x6be)]=Scene_Battle['prototype'][_0x4adfe0(0x877)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x877)]=function(){const _0x18a134=_0x4adfe0;if(VisuMZ['BattleCore'][_0x18a134(0x5bc)][_0x18a134(0x109)]['BattleLogRectJS'])return VisuMZ[_0x18a134(0xa98)][_0x18a134(0x5bc)][_0x18a134(0x109)][_0x18a134(0xa21)]['call'](this);return VisuMZ['BattleCore'][_0x18a134(0x6be)][_0x18a134(0x61e)](this);},VisuMZ['BattleCore'][_0x4adfe0(0x616)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x3a9)],Scene_Battle[_0x4adfe0(0x6ec)]['createPartyCommandWindow']=function(){const _0x53b97d=_0x4adfe0;VisuMZ['BattleCore'][_0x53b97d(0x616)][_0x53b97d(0x61e)](this),this[_0x53b97d(0x983)]();},Scene_Battle[_0x4adfe0(0x6ec)]['createPartyCommandWindowBattleCore']=function(){const _0x4b1ab8=_0x4adfe0,_0x23eb13=this['_partyCommandWindow'];_0x23eb13[_0x4b1ab8(0x85b)](_0x4b1ab8(0xa34),this[_0x4b1ab8(0xb56)][_0x4b1ab8(0xb0e)](this)),_0x23eb13[_0x4b1ab8(0x85b)](_0x4b1ab8(0x51e),this['commandOptions'][_0x4b1ab8(0xb0e)](this));const _0x31e0f7=this['battleLayoutStyle']();switch(_0x31e0f7){case'xp':case _0x4b1ab8(0xcac):return this[_0x4b1ab8(0xaec)][_0x4b1ab8(0x1c0)](0x1);break;}},Scene_Battle[_0x4adfe0(0x6ec)]['commandAutoBattle']=function(){const _0x3bb29f=_0x4adfe0;BattleManager[_0x3bb29f(0xc2f)]=!![],$gameParty[_0x3bb29f(0x9c3)](),this['selectNextCommand'](),BattleManager[_0x3bb29f(0xaf5)]()&&(BattleManager[_0x3bb29f(0x744)]=![]);},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xbc0)]=function(){const _0x2d26bf=_0x4adfe0;if(this[_0x2d26bf(0x377)]())this[_0x2d26bf(0x582)]=!![],this[_0x2d26bf(0x964)]['push'](_0x2d26bf(0x46f),VisuMZ[_0x2d26bf(0xa98)][_0x2d26bf(0x5bc)]['PartyCmd'][_0x2d26bf(0xa4f)]);else{if(_0x2d26bf(0xa7c)!=='nXjmo'){const _0x32af83=this['_commandNameWindow'];_0x32af83[_0x2d26bf(0x17f)][_0x2d26bf(0x465)]();const _0x2b40f9=this['commandStyleCheck'](this[_0x2d26bf(0x721)]());if(_0x2b40f9===_0x2d26bf(0x639)&&this[_0x2d26bf(0xbf9)]()>0x0){const _0x9fa397=this[_0x2d26bf(0x6f8)](this['index']());let _0x3b4ae6=this[_0x2d26bf(0xacb)](this[_0x2d26bf(0x721)]());_0x3b4ae6=_0x3b4ae6[_0x2d26bf(0x335)](/\\I\[(\d+)\]/gi,''),_0x32af83[_0x2d26bf(0x218)](),this[_0x2d26bf(0x1f1)](_0x3b4ae6,_0x9fa397),this['commandNameWindowDrawText'](_0x3b4ae6,_0x9fa397),this['commandNameWindowCenter'](_0x3b4ae6,_0x9fa397);}}else this[_0x2d26bf(0x9e2)]();}},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x377)]=function(){const _0x4b9387=_0x4adfe0;return BattleManager[_0x4b9387(0x2cb)]();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e2)]=function(){const _0x468f64=_0x4adfe0;this[_0x468f64(0x582)]=![],this[_0x468f64(0x898)][_0x468f64(0x9e6)](),this['_windowLayer']['visible']=![];if(BattleManager[_0x468f64(0xa46)]())($dataSystem[_0x468f64(0x8b4)]||$dataSystem[_0x468f64(0x974)])&&SceneManager[_0x468f64(0x6f3)]();else{if($gameMap[_0x468f64(0x8b4)]()||$gameMap['battleback2Name']()){if('ZwLjH'===_0x468f64(0xab5))SceneManager[_0x468f64(0x6f3)]();else return _0x547ef3['BattleCore'][_0x468f64(0x5bc)][_0x468f64(0x676)][_0x468f64(0x845)]['call'](this,_0x8a344,_0x40ec6c);}}SceneManager['push'](Scene_Options);if(BattleManager[_0x468f64(0xaf5)]()){if(_0x468f64(0x98f)===_0x468f64(0x98f))BattleManager[_0x468f64(0x8ea)]=BattleManager[_0x468f64(0xcf8)]();else{const _0x2dae13=_0x38124c['BattleCore'][_0x468f64(0x5bc)][_0x468f64(0x22d)][_0x468f64(0x76b)],_0x22d162=_0x57e28a['round'](_0x56840a[_0x468f64(0xcc7)]/0x3),_0x311472=_0x4772bd[_0x468f64(0xb95)](_0x5938aa[_0x468f64(0xcc7)]/_0x27ad99['battleMembers']()[_0x468f64(0xa59)]),_0x4d21b9=_0x5b850d[_0x468f64(0x7a0)](_0x591863[_0x468f64(0x258)](_0x22d162,_0x311472),_0x2dae13),_0x4550fa=this[_0x468f64(0x65c)](_0x378423[_0x468f64(0xa98)]['Settings'][_0x468f64(0x22d)][_0x468f64(0xa1f)]),_0x16ab44=_0x1db1b4[_0x468f64(0xa55)]((_0x1a1487[_0x468f64(0xcc7)]-_0x4f57e9['width'])/0x2),_0x3e5dc2=_0x12bfd8[_0x468f64(0xcc7)]-_0x16ab44,_0x8ee581=(_0x1d69eb[_0x468f64(0xb95)](_0x311472*_0x27aded[_0x468f64(0x721)]())+_0x1aa20f[_0x468f64(0xb95)]((_0x311472-_0x4d21b9)/0x2))[_0x468f64(0x548)](_0x16ab44,_0x3e5dc2-_0x4d21b9),_0x1be5a0=_0x47d4ed[_0x468f64(0xb95)](_0x10be2c[_0x468f64(0x726)][_0x468f64(0x326)]['y']-_0x4550fa);this[_0x468f64(0x119)](_0x8ee581,_0x1be5a0,_0x4d21b9,_0x4550fa),this[_0x468f64(0xc0e)](),this[_0x468f64(0x1c0)](0x1);}}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x345)]=Scene_Battle['prototype'][_0x4adfe0(0x39f)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x39f)]=function(){const _0x3290dd=_0x4adfe0;VisuMZ['BattleCore'][_0x3290dd(0x345)][_0x3290dd(0x61e)](this);if(this[_0x3290dd(0x582)]&&!BattleManager[_0x3290dd(0x48b)])this['callOptions']();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x4be)]=Scene_Battle[_0x4adfe0(0x6ec)]['update'],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e6)]=function(){const _0xc25573=_0x4adfe0;VisuMZ['BattleCore'][_0xc25573(0x4be)][_0xc25573(0x61e)](this),this['updateOnceParallelInterpreters']();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x6eb)]=function(){const _0x54cbf9=_0x4adfe0,_0x3c12e7=this['autoBattleWindowRect']();this[_0x54cbf9(0xbc4)]=new Window_AutoBattleCancel(_0x3c12e7),this[_0x54cbf9(0xbc4)]['hide'](),this[_0x54cbf9(0x607)](this['_autoBattleWindow']);},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x14c)]=function(){const _0x372524=_0x4adfe0;return VisuMZ[_0x372524(0xa98)][_0x372524(0x5bc)][_0x372524(0x936)][_0x372524(0x730)][_0x372524(0x61e)](this);},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x429)]=function(){const _0x1f0438=_0x4adfe0;this[_0x1f0438(0x7c0)]=[];},Scene_Battle[_0x4adfe0(0x6ec)]['updateOnceParallelInterpreters']=function(){const _0x4b4b61=_0x4adfe0;if(!this['_onceParallelInterpreters'])return;for(const _0x68cc3c of this[_0x4b4b61(0x7c0)]){_0x68cc3c&&_0x68cc3c[_0x4b4b61(0x9e6)]();}},Scene_Battle['prototype']['playOnceParallelInterpreter']=function(_0x18c2d5){const _0x5ef319=_0x4adfe0,_0x20b45a=$dataCommonEvents[_0x18c2d5];if(!_0x20b45a)return;const _0x7b68eb=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x7b68eb),_0x7b68eb[_0x5ef319(0x927)](_0x18c2d5);},Scene_Battle[_0x4adfe0(0x6ec)]['addOnceParallelInterpreter']=function(_0x3cf184){const _0x57787a=_0x4adfe0;this[_0x57787a(0x7c0)]=this[_0x57787a(0x7c0)]||[],this[_0x57787a(0x7c0)][_0x57787a(0x98e)](_0x3cf184);},Scene_Battle[_0x4adfe0(0x6ec)]['removeOnceParallelInterpreter']=function(_0x19b7fa){const _0x59a15c=_0x4adfe0;this[_0x59a15c(0x7c0)]=this['_onceParallelInterpreters']||[],this[_0x59a15c(0x7c0)][_0x59a15c(0xb6e)](_0x19b7fa);},Game_Troop[_0x4adfe0(0x6ec)][_0x4adfe0(0xa17)]=function(){const _0x2bb872=_0x4adfe0;for(const _0x5a2b47 of this['troop']()[_0x2bb872(0x5ff)]){if(!this[_0x2bb872(0x328)](_0x5a2b47))continue;SceneManager[_0x2bb872(0x726)]['playOnceParallelTroopPage'](_0x5a2b47);}},Game_Troop[_0x4adfe0(0x6ec)][_0x4adfe0(0x328)]=function(_0x2e5604){const _0x28adc8=_0x4adfe0;if(!_0x2e5604)return;for(const _0x153c9c of _0x2e5604[_0x28adc8(0xc26)]){if([0x6c,0x198][_0x28adc8(0x5d0)](_0x153c9c[_0x28adc8(0x888)])){if('ElFJn'===_0x28adc8(0x70a))return _0x274012[_0x28adc8(0x100)]-_0x3a7470[_0x28adc8(0x100)];else{const _0x1234d8=_0x153c9c['parameters'][0x0];if(_0x1234d8['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle['prototype'][_0x4adfe0(0x768)]=function(_0x129715){const _0x381a78=_0x4adfe0;if(!_0x129715)return;const _0x2bc9a7=new Game_BattleOnceParallelInterpreter();this[_0x381a78(0x4ad)](_0x2bc9a7),_0x2bc9a7[_0x381a78(0x2eb)](_0x129715);};function Game_BattleOnceParallelInterpreter(){const _0x30b09c=_0x4adfe0;this[_0x30b09c(0xb7d)](...arguments);}Game_BattleOnceParallelInterpreter[_0x4adfe0(0x6ec)]=Object[_0x4adfe0(0x3c4)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter[_0x4adfe0(0x6ec)][_0x4adfe0(0xab3)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x4adfe0(0x6ec)][_0x4adfe0(0x927)]=function(_0x5740e6){const _0x288cb3=_0x4adfe0,_0x42611d=$dataCommonEvents[_0x5740e6];_0x42611d?this[_0x288cb3(0x9ac)](_0x42611d[_0x288cb3(0xc26)],0x0):this[_0x288cb3(0xa33)]();},Game_BattleOnceParallelInterpreter[_0x4adfe0(0x6ec)]['terminate']=function(){const _0x5c8297=_0x4adfe0;if(!SceneManager['isSceneBattle']())return;SceneManager[_0x5c8297(0x726)][_0x5c8297(0xa87)](this),Game_Interpreter[_0x5c8297(0x6ec)][_0x5c8297(0xa33)][_0x5c8297(0x61e)](this);},Game_BattleOnceParallelInterpreter[_0x4adfe0(0x6ec)]['setTroopPage']=function(_0x41f5b5){const _0x2c20a7=_0x4adfe0;if(_0x41f5b5){if(_0x2c20a7(0x662)!==_0x2c20a7(0x662))return this[_0x2c20a7(0x92f)]()[_0x2c20a7(0x94d)]();else this[_0x2c20a7(0x9ac)](_0x41f5b5['list'],0x0);}else this[_0x2c20a7(0xa33)]();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x80b)]=function(){const _0x19827d=_0x4adfe0;return VisuMZ[_0x19827d(0xa98)][_0x19827d(0x5bc)][_0x19827d(0xa9e)][_0x19827d(0x5f3)];},VisuMZ[_0x4adfe0(0xa98)]['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x4adfe0(0x6ec)]['startPartyCommandSelection'],Scene_Battle[_0x4adfe0(0x6ec)]['startPartyCommandSelection']=function(){const _0x140744=_0x4adfe0;this[_0x140744(0x80b)]()?this['onDisabledPartyCommandSelection']():VisuMZ[_0x140744(0xa98)]['Scene_Battle_startPartyCommandSelection'][_0x140744(0x61e)](this);},Scene_Battle['prototype'][_0x4adfe0(0xc93)]=function(){const _0x403556=_0x4adfe0;if(BattleManager[_0x403556(0xcf9)]())'PkjsA'!=='RFrNj'?this[_0x403556(0xa70)]():(this['_effectsContainer']=new _0x40ecf7(),this[_0x403556(0x607)](this['_effectsContainer']));else BattleManager['isTpb']()&&VisuMZ[_0x403556(0xa98)]['Scene_Battle_startPartyCommandSelection']['call'](this);},VisuMZ['BattleCore'][_0x4adfe0(0x4a6)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xa5b)],Scene_Battle['prototype'][_0x4adfe0(0xa5b)]=function(){const _0x503732=_0x4adfe0;if(BattleManager['isTpb']()){if(_0x503732(0xc99)===_0x503732(0xc7d))return _0x4244f4(_0x297aa9['$1']);else this[_0x503732(0x59b)](),this[_0x503732(0x598)]();}else VisuMZ[_0x503732(0xa98)]['Scene_Battle_commandFight']['call'](this);},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x59b)]=function(){const _0x4a6b5d=_0x4adfe0;if(!VisuMZ[_0x4a6b5d(0xa98)]['TpbActiveChangeEnabled'])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x4a6b5d(0x34a)]())return;const _0x2368d1=$gameParty['aliveMembers']()[_0x4a6b5d(0xcd9)](_0x227eba=>_0x227eba[_0x4a6b5d(0xc1a)]()&&_0x227eba[_0x4a6b5d(0x305)]());BattleManager[_0x4a6b5d(0xfb)]=_0x2368d1[0x0]||null,BattleManager[_0x4a6b5d(0xfb)]&&BattleManager['_currentActor']['setActionState'](_0x4a6b5d(0xa90));},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x2b2)]=Scene_Battle['prototype'][_0x4adfe0(0x364)],Scene_Battle['prototype'][_0x4adfe0(0x364)]=function(){const _0x4f4e73=_0x4adfe0;VisuMZ[_0x4f4e73(0xa98)]['Scene_Battle_createActorCommandWindow'][_0x4f4e73(0x61e)](this),this[_0x4f4e73(0x47a)]();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x47a)]=function(){const _0x5018f3=_0x4adfe0,_0x2ab05e=this[_0x5018f3(0x401)];_0x2ab05e[_0x5018f3(0x85b)](_0x5018f3(0x946),this[_0x5018f3(0xca3)][_0x5018f3(0xb0e)](this)),_0x2ab05e[_0x5018f3(0x85b)](_0x5018f3(0xa34),this['actorCommandAutoBattle']['bind'](this)),_0x2ab05e['setHandler']('singleSkill',this[_0x5018f3(0xbb8)][_0x5018f3(0xb0e)](this));if(BattleManager[_0x5018f3(0xaf5)]()){if('QhtbD'!==_0x5018f3(0x52f)){if(this[_0x5018f3(0x80b)]()){if(_0x5018f3(0x53e)===_0x5018f3(0x53e))delete _0x2ab05e['_handlers'][_0x5018f3(0x12c)];else{if(!_0x1616df['isSceneBattle']())return;_0x5e5a12['ConvertParams'](_0x2f5d19,_0x444105);const _0x7a472f=_0x1ff8fe[_0x5018f3(0x964)],_0x17259c=_0x13189b[_0x5018f3(0x365)]&&_0x2c2922['VisuMZ_4_CombatLog'];_0x7a472f['addText'](_0x334d8b[_0x5018f3(0x4d6)]),_0x17259c&&_0x4c1e85['VisuMZ_4_CombatLog']&&_0x47722f[_0x5018f3(0x358)](_0x726a6a[_0x5018f3(0x4d6)]||'',_0x5df72b['CombatLogIcon']||0x0);}}else _0x2ab05e[_0x5018f3(0x85b)](_0x5018f3(0x12c),this[_0x5018f3(0x446)][_0x5018f3(0xb0e)](this));}else this[_0x5018f3(0x807)](_0xad222e);}},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xca3)]=function(){const _0x23a6ba=_0x4adfe0;this[_0x23a6ba(0xbe0)]();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xa12)]=function(){const _0x3e2aca=_0x4adfe0;BattleManager[_0x3e2aca(0xcf8)]()['makeAutoBattleActions'](),BattleManager[_0x3e2aca(0x636)](),BattleManager[_0x3e2aca(0x506)](),this[_0x3e2aca(0x5a2)]();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xbb8)]=function(){const _0x3403cd=_0x4adfe0,_0x4acab9=BattleManager['inputtingAction'](),_0x4c8f16=this[_0x3403cd(0x401)][_0x3403cd(0x19b)]();_0x4acab9[_0x3403cd(0xa11)](_0x4c8f16),BattleManager[_0x3403cd(0xcf8)]()[_0x3403cd(0x4db)]($dataSkills[_0x4c8f16]),this[_0x3403cd(0xae6)]();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x446)]=function(){const _0x3a96ff=_0x4adfe0;if(this['tpbActorSwitchConditionsMet']()){if(_0x3a96ff(0xa75)===_0x3a96ff(0xa75))this[_0x3a96ff(0x5a7)]();else return!![];}else this['processActorCommandCancelTPB']();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x674)]=![],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x638)]=function(){const _0x26cf64=_0x4adfe0;if(Imported[_0x26cf64(0x134)]&&BattleManager[_0x26cf64(0x34a)]()){if(_0x26cf64(0x647)==='ZkoyJ')_0x5a0c27['x']+=_0x2197f0[_0x26cf64(0xb87)]*_0xfa7ea4,_0x2cc0d5['y']+=_0x2f2633[_0x26cf64(0x103)];else return![];}else{if(!VisuMZ[_0x26cf64(0xa98)][_0x26cf64(0x674)])return![];const _0x43f014=$gameParty['aliveMembers']()[_0x26cf64(0xcd9)](_0x53aa4c=>_0x53aa4c['isTpbCharged']()&&_0x53aa4c[_0x26cf64(0x305)]());return _0x43f014[_0x26cf64(0xa59)]>0x0&&BattleManager[_0x26cf64(0xcf8)]()!==_0x43f014[_0x43f014[_0x26cf64(0xa59)]-0x1];}},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x5a7)]=function(){const _0x435ef9=_0x4adfe0,_0x4e1ff5=BattleManager['actor'](),_0x26d2d5=_0x4e1ff5[_0x435ef9(0xc66)]();if(_0x26d2d5)_0x26d2d5[_0x435ef9(0x156)]();const _0x46c118=$gameParty[_0x435ef9(0x66d)]()['filter'](_0x11b9f8=>_0x11b9f8[_0x435ef9(0xc1a)]()&&_0x11b9f8[_0x435ef9(0x305)]()),_0x5e2531=_0x46c118['indexOf'](_0x4e1ff5),_0xcaaf39=_0x46c118[_0x5e2531+0x1];BattleManager[_0x435ef9(0xfb)]=_0xcaaf39||null;if(_0xcaaf39)_0xcaaf39[_0x435ef9(0x814)](_0x435ef9(0xa90));_0x4e1ff5[_0x435ef9(0x814)](_0x435ef9(0x6c1)),this[_0x435ef9(0x5a2)]();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x193)]=function(){const _0x2dd3cc=_0x4adfe0;this[_0x2dd3cc(0xaec)]['setup'](),this[_0x2dd3cc(0x401)][_0x2dd3cc(0x5cd)]();if(!VisuMZ['BattleCore'][_0x2dd3cc(0x674)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x2dd3cc(0x34a)]())return;if(BattleManager[_0x2dd3cc(0xfb)]){if(_0x2dd3cc(0xff)!==_0x2dd3cc(0xff)){const _0x158910=_0x5596e8[_0x2dd3cc(0xa98)][_0x2dd3cc(0x5bc)][_0x2dd3cc(0x22d)];if(_0x158910['StatusWindowAttachmentBack']){const _0x43d93d=new _0x3baf11();_0x43d93d[_0x2dd3cc(0x932)]=_0xedcdb6[_0x2dd3cc(0x7fd)](_0x158910[_0x2dd3cc(0x952)]),_0x43d93d['x']=_0x158910[_0x2dd3cc(0x174)]||0x0,_0x43d93d['y']=_0x158910[_0x2dd3cc(0xb72)]||0x0,this['addChildToBack'](_0x43d93d),this[_0x2dd3cc(0x195)]=_0x43d93d;}if(_0x158910[_0x2dd3cc(0x924)]){const _0x3942f7=new _0x8fe752();_0x3942f7['bitmap']=_0x287a1e[_0x2dd3cc(0x7fd)](_0x158910[_0x2dd3cc(0x924)]),_0x3942f7['x']=_0x158910[_0x2dd3cc(0x2b4)]||0x0,_0x3942f7['y']=_0x158910[_0x2dd3cc(0x5d9)]||0x0,this[_0x2dd3cc(0x607)](_0x3942f7),this[_0x2dd3cc(0x6e3)]=_0x3942f7;}}else{BattleManager[_0x2dd3cc(0xfb)][_0x2dd3cc(0x814)](_0x2dd3cc(0x6c1));const _0x12290a=BattleManager['_currentActor']['battler']();if(_0x12290a)_0x12290a[_0x2dd3cc(0x156)]();}}BattleManager['_currentActor']=null;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xa8a)]=Scene_Battle['prototype'][_0x4adfe0(0x998)],Scene_Battle[_0x4adfe0(0x6ec)]['createHelpWindow']=function(){const _0x568976=_0x4adfe0;VisuMZ['BattleCore'][_0x568976(0xa8a)][_0x568976(0x61e)](this),this[_0x568976(0x175)]();},Scene_Battle[_0x4adfe0(0x6ec)]['createHelpWindowBattleCore']=function(){const _0x4b356f=_0x4adfe0;this['_actorCommandWindow'][_0x4b356f(0xa6f)](this[_0x4b356f(0xa2b)]),this[_0x4b356f(0xaec)][_0x4b356f(0xa6f)](this['_helpWindow']);},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xca7)]=function(){const _0x2d3e73=_0x4adfe0;if($gameTemp[_0x2d3e73(0xe8)]!==undefined){if(_0x2d3e73(0x61a)===_0x2d3e73(0x369)){const _0x24715d=_0x1c4e41[this[_0x2d3e73(0x33e)][_0x2d3e73(0x6fd)]()];if(!_0x24715d)return;if(!this[_0x2d3e73(0xbbe)](_0x24715d))return;const _0x21e207=this[_0x2d3e73(0x2c4)](),_0x5e0cc8=_0x7f83fb[_0x2d3e73(0x382)](_0x24715d),_0x38aa73=_0x20874c[_0x2d3e73(0x1ab)](_0x24715d),_0x4f624c=_0x21e207===_0x2d3e73(0x530)?_0x5e0cc8:_0x2d3e73(0x329)['format'](_0x38aa73,_0x5e0cc8);this[_0x2d3e73(0x3bc)](_0x4f624c,'attack',this[_0x2d3e73(0x33e)][_0x2d3e73(0x64c)]());}else return $gameTemp[_0x2d3e73(0xe8)];}if(this[_0x2d3e73(0x43c)])return this[_0x2d3e73(0x43c)];return this[_0x2d3e73(0x43c)]=VisuMZ['BattleCore'][_0x2d3e73(0x5bc)][_0x2d3e73(0x22d)][_0x2d3e73(0x31c)][_0x2d3e73(0xc1b)]()[_0x2d3e73(0xb83)](),this[_0x2d3e73(0x43c)]===_0x2d3e73(0x202)&&!Imported[_0x2d3e73(0xc75)]&&(this['_battleLayoutStyle']=_0x2d3e73(0x93f)),this['_battleLayoutStyle']===_0x2d3e73(0x6ea)&&!Imported['VisuMZ_3_FrontviewBattleUI']&&(_0x2d3e73(0xae2)===_0x2d3e73(0xae2)?this[_0x2d3e73(0x43c)]=_0x2d3e73(0x93f):this[_0x2d3e73(0x66b)]()),this[_0x2d3e73(0x43c)];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xaae)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x110)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x110)]=function(){const _0x3821c9=_0x4adfe0,_0x361ba1=this[_0x3821c9(0xca7)]();switch(_0x361ba1){case _0x3821c9(0xc26):return this[_0x3821c9(0x422)](Math[_0x3821c9(0x7a0)](0x1,$gameParty[_0x3821c9(0xb70)]()),!![]);break;default:return VisuMZ[_0x3821c9(0xa98)][_0x3821c9(0xaae)][_0x3821c9(0x61e)](this);break;}},VisuMZ['BattleCore'][_0x4adfe0(0xbf5)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x729)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x729)]=function(){const _0x3d7698=_0x4adfe0,_0x19923f=this[_0x3d7698(0xca7)]();switch(_0x19923f){case _0x3d7698(0x2a2):return this[_0x3d7698(0xbe9)]();break;case'default':case _0x3d7698(0xc26):case'xp':case'portrait':default:return VisuMZ[_0x3d7698(0xa98)][_0x3d7698(0xbf5)][_0x3d7698(0x61e)](this);break;}},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xadc)]=function(){const _0x22dd76=_0x4adfe0,_0x22eb6d=this[_0x22dd76(0xca7)]();switch(_0x22eb6d){case'xp':case _0x22dd76(0xcac):return this[_0x22dd76(0x5b2)]();break;case'border':return this[_0x22dd76(0x7ba)]();break;case'default':case _0x22dd76(0xc26):default:return this[_0x22dd76(0x9b0)]();break;}},VisuMZ['BattleCore'][_0x4adfe0(0x504)]=Scene_Battle['prototype'][_0x4adfe0(0x201)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x201)]=function(){const _0x3f85fd=_0x4adfe0,_0x3d6035=this[_0x3f85fd(0xca7)]();switch(_0x3d6035){case'xp':case'portrait':return this[_0x3f85fd(0x9a0)]();break;case _0x3f85fd(0x2a2):return this['partyCommandWindowRectBorderStyle']();case'default':case'list':default:return this[_0x3f85fd(0x564)]();break;}},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x564)]=function(){const _0x3786f2=_0x4adfe0,_0x5688f4=VisuMZ['BattleCore'][_0x3786f2(0x5bc)][_0x3786f2(0x22d)],_0x147cc8=_0x5688f4[_0x3786f2(0x76b)]||0xc0,_0x44f2c8=this['windowAreaHeight'](),_0x1c6a3f=this['isRightInputMode']()?Graphics[_0x3786f2(0xcc7)]-_0x147cc8:0x0,_0x461697=Graphics['boxHeight']-_0x44f2c8;return new Rectangle(_0x1c6a3f,_0x461697,_0x147cc8,_0x44f2c8);},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x253)]=function(){return this['partyCommandWindowRect']();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x8b0)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x7e1)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x7e1)]=function(){const _0x69182b=_0x4adfe0,_0x45e0cb=this[_0x69182b(0xca7)]();switch(_0x45e0cb){case'xp':case _0x69182b(0xcac):case'border':break;case _0x69182b(0x93f):case _0x69182b(0xc26):default:VisuMZ['BattleCore'][_0x69182b(0x8b0)][_0x69182b(0x61e)](this);break;}},VisuMZ['BattleCore'][_0x4adfe0(0xbe7)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x6d1)],Scene_Battle[_0x4adfe0(0x6ec)]['startActorSelection']=function(){const _0x4933d3=_0x4adfe0;VisuMZ[_0x4933d3(0xa98)]['Scene_Battle_startActorSelection'][_0x4933d3(0x61e)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ['BattleCore'][_0x4adfe0(0x291)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x29f)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x29f)]=function(){const _0x21b621=_0x4adfe0;VisuMZ[_0x21b621(0xa98)][_0x21b621(0x291)][_0x21b621(0x61e)](this),this[_0x21b621(0x6a7)]['autoSelect'](),this[_0x21b621(0x1e8)]();},Scene_Battle[_0x4adfe0(0x6ec)]['makeTargetSelectionMoreVisible']=function(){const _0x5504b6=_0x4adfe0,_0x47af2e=this[_0x5504b6(0xca7)]();['xp','portrait',_0x5504b6(0x2a2)][_0x5504b6(0x5d0)](_0x47af2e)&&(_0x5504b6(0x304)!==_0x5504b6(0x304)?this['_requestRefresh']=!![]:this[_0x5504b6(0x401)][_0x5504b6(0x5cd)]()),(_0x47af2e===_0x5504b6(0x2a2)||this[_0x5504b6(0xc97)]())&&(this[_0x5504b6(0xa4c)][_0x5504b6(0x5cd)](),this['_itemWindow'][_0x5504b6(0x5cd)]());},VisuMZ[_0x4adfe0(0xa98)]['Scene_Battle_onActorOk']=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xa47)],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xa47)]=function(){const _0x58d179=_0x4adfe0;VisuMZ['BattleCore'][_0x58d179(0x8fa)][_0x58d179(0x61e)](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x133)]=function(){const _0x33ef34=_0x4adfe0;return[_0x33ef34(0xc64),_0x33ef34(0x664),_0x33ef34(0x869)][_0x33ef34(0x5d0)](this[_0x33ef34(0x401)][_0x33ef34(0x86b)]());},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xa6d)]=Scene_Battle[_0x4adfe0(0x6ec)]['onActorCancel'],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x1fd)]=function(){const _0x43cb3e=_0x4adfe0;this['isNonSubmenuCancel']()?(this[_0x43cb3e(0x326)]['show'](),this[_0x43cb3e(0xce9)][_0x43cb3e(0x9e8)](),this[_0x43cb3e(0x401)][_0x43cb3e(0x325)]()):VisuMZ[_0x43cb3e(0xa98)][_0x43cb3e(0xa6d)][_0x43cb3e(0x61e)](this),this[_0x43cb3e(0xb09)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x4a2)]=Scene_Battle[_0x4adfe0(0x6ec)]['onEnemyOk'],Scene_Battle[_0x4adfe0(0x6ec)]['onEnemyOk']=function(){const _0x9e7813=_0x4adfe0,_0x19b9c5=BattleManager[_0x9e7813(0xc15)]();_0x19b9c5['setTargetBattlerKey'](this[_0x9e7813(0x6a7)]['enemy']()),this['_enemyWindow']['closeBattleActorWindow'](),VisuMZ['BattleCore'][_0x9e7813(0x4a2)]['call'](this),this[_0x9e7813(0x7ee)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x520)]=Scene_Battle['prototype']['onEnemyCancel'],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x6ce)]=function(){const _0x2207e7=_0x4adfe0;this['isNonSubmenuCancel']()?(this[_0x2207e7(0x326)][_0x2207e7(0x454)](),this[_0x2207e7(0x6a7)][_0x2207e7(0x9e8)](),this['_actorCommandWindow']['activate']()):VisuMZ[_0x2207e7(0xa98)]['Scene_Battle_onEnemyCancel'][_0x2207e7(0x61e)](this),this[_0x2207e7(0xb09)](),this[_0x2207e7(0x6a7)][_0x2207e7(0x1c9)]();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x7ee)]=function(){const _0x451f67=_0x4adfe0,_0x532494=this[_0x451f67(0xca7)]();if(_0x532494===_0x451f67(0x2a2)||this[_0x451f67(0xc97)]()){this[_0x451f67(0xa4c)]['open']();if(this[_0x451f67(0xa4c)][_0x451f67(0x27e)]){if(_0x451f67(0x7ce)!=='WmHAr')this[_0x451f67(0xa4c)][_0x451f67(0x454)]();else return!![];}this['_itemWindow'][_0x451f67(0x4b6)](),this[_0x451f67(0x3fa)][_0x451f67(0x27e)]&&this[_0x451f67(0x3fa)]['show']();}},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xb09)]=function(){const _0x2a7a16=_0x4adfe0,_0x253f6a=this[_0x2a7a16(0xca7)]();['xp',_0x2a7a16(0xcac),'border']['includes'](_0x253f6a)&&this['_actorCommandWindow'][_0x2a7a16(0x4b6)](),this['okTargetSelectionVisibility']();},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x9b0)]=function(){const _0x2e556e=_0x4adfe0,_0x46289e=VisuMZ[_0x2e556e(0xa98)]['Settings'][_0x2e556e(0x22d)],_0x2b7cc5=Window_BattleStatus[_0x2e556e(0x6ec)][_0x2e556e(0xc1f)](),_0x51c7fd=Graphics[_0x2e556e(0xcc7)]-(_0x46289e[_0x2e556e(0x76b)]||0xc0),_0x1a9f26=this[_0x2e556e(0x110)]()+_0x2b7cc5,_0x1e68d3=this[_0x2e556e(0x3cc)]()?0x0:Graphics[_0x2e556e(0xcc7)]-_0x51c7fd,_0x3a71af=Graphics[_0x2e556e(0x468)]-_0x1a9f26+_0x2b7cc5;return new Rectangle(_0x1e68d3,_0x3a71af,_0x51c7fd,_0x1a9f26);},Scene_Battle['prototype'][_0x4adfe0(0x5b2)]=function(){const _0x34b656=_0x4adfe0,_0xf6f621=Window_BattleStatus[_0x34b656(0x6ec)][_0x34b656(0xc1f)](),_0x3930bd=Graphics['boxWidth'],_0x4565d3=this['windowAreaHeight']()+_0xf6f621,_0x555378=0x0,_0x5d3fdb=Graphics['boxHeight']-_0x4565d3+_0xf6f621;return new Rectangle(_0x555378,_0x5d3fdb,_0x3930bd,_0x4565d3);},Scene_Battle[_0x4adfe0(0x6ec)]['partyCommandWindowRectXPStyle']=function(){const _0xa5c90=_0x4adfe0,_0x4578da=Graphics[_0xa5c90(0xcc7)]/0x2,_0x177d49=this[_0xa5c90(0x422)](VisuMZ['BattleCore'][_0xa5c90(0x5bc)][_0xa5c90(0x22d)][_0xa5c90(0xa1f)],!![]),_0xe3e7ea=Math[_0xa5c90(0xb95)]((Graphics['boxWidth']-_0x4578da)/0x2),_0x38f374=Graphics[_0xa5c90(0x468)]-_0x177d49-this[_0xa5c90(0x5b2)]()[_0xa5c90(0x6a1)];return new Rectangle(_0xe3e7ea,_0x38f374,_0x4578da,_0x177d49);},Scene_Battle['prototype'][_0x4adfe0(0xbe9)]=function(){const _0x508dff=_0x4adfe0,_0x12bbd8=Graphics[_0x508dff(0x1e2)],_0x4f6012=Math['round']((Graphics[_0x508dff(0xcc7)]-_0x12bbd8)/0x2),_0x22a08a=this['helpAreaHeight'](),_0x186c92=(Graphics['height']-Graphics[_0x508dff(0x468)])/-0x2;return new Rectangle(_0x4f6012,_0x186c92,_0x12bbd8,_0x22a08a);},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x7ba)]=function(){const _0x4c33a1=_0x4adfe0,_0x748c02=Graphics[_0x4c33a1(0x1e2)],_0x251712=Math[_0x4c33a1(0xb95)]((Graphics['boxWidth']-_0x748c02)/0x2),_0x19af1e=this[_0x4c33a1(0x422)](0x4,!![]),_0x2b2402=Graphics[_0x4c33a1(0x468)]-_0x19af1e+(Graphics[_0x4c33a1(0x6a1)]-Graphics[_0x4c33a1(0x468)])/0x2;return new Rectangle(_0x251712,_0x2b2402,_0x748c02,_0x19af1e);},Scene_Battle['prototype'][_0x4adfe0(0x47b)]=function(){const _0x162a01=_0x4adfe0,_0x5cd3db=Math['floor'](Graphics[_0x162a01(0x1e2)]/0x3),_0x21d867=this[_0x162a01(0x3cc)]()?(Graphics[_0x162a01(0x1e2)]+Graphics['boxWidth'])/0x2-_0x5cd3db:(Graphics[_0x162a01(0x1e2)]-Graphics['boxWidth'])/-0x2,_0x6e276d=this['helpWindowRectBorderStyle'](),_0x5e7462=_0x6e276d['y']+_0x6e276d[_0x162a01(0x6a1)],_0x976986=this[_0x162a01(0x7ba)](),_0x484e70=_0x976986['y']-_0x5e7462;return new Rectangle(_0x21d867,_0x5e7462,_0x5cd3db,_0x484e70);},Scene_Battle[_0x4adfe0(0x6ec)]['skillItemWindowRectBorderStyle']=function(){const _0x2f5409=_0x4adfe0,_0x55f003=Math[_0x2f5409(0x37b)](Graphics[_0x2f5409(0x1e2)]/0x3),_0x1e6925=Math['round']((Graphics[_0x2f5409(0xcc7)]-_0x55f003)/0x2),_0x2850ca=this[_0x2f5409(0x47b)](),_0x433629=_0x2850ca['y'],_0x39498c=_0x2850ca[_0x2f5409(0x6a1)];return new Rectangle(_0x1e6925,_0x433629,_0x55f003,_0x39498c);},Scene_Battle['prototype'][_0x4adfe0(0x655)]=function(){const _0x5221e1=_0x4adfe0;this['_cancelButton']['y']=this[_0x5221e1(0xa2b)]['y']+this[_0x5221e1(0xa2b)]['height'];if(this['isRightInputMode']())_0x5221e1(0x198)==='mmYts'?(this[_0x5221e1(0xc9e)]['x']=_0x14d783['randomInt'](this[_0x5221e1(0x775)])*(_0xcd3ac7['random']()<0.5?-0x1:0x1),this['_baseY']!==this['y']&&(this[_0x5221e1(0xc9e)]['y']=this[_0x5221e1(0x6a1)]*0.5,this[_0x5221e1(0xc9e)]['y']+=_0x17e965['randomInt'](this[_0x5221e1(0x775)])*(_0x4b585f[_0x5221e1(0x256)]()<0.5?-0x1:0x1))):this[_0x5221e1(0xca7)]()==='border'?this[_0x5221e1(0x342)]['x']=0x8:this[_0x5221e1(0x342)]['x']=-this[_0x5221e1(0x342)]['width']-0x4;else{if('KAsNV'!==_0x5221e1(0x17b))this['_cancelButton']['x']=Graphics[_0x5221e1(0x1e2)]-(Graphics['width']-Graphics[_0x5221e1(0xcc7)])/0x2-this[_0x5221e1(0x342)][_0x5221e1(0x1e2)]-0x4;else{if(!this[_0x5221e1(0x786)]())return![];return _0x4d7da5[_0x5221e1(0xa98)][_0x5221e1(0x570)][_0x5221e1(0x61e)](this);}}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x4b3)]=Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x914)],Scene_Battle[_0x4adfe0(0x6ec)]['skillWindowRect']=function(){const _0x5871b1=_0x4adfe0;if(this['battleLayoutStyle']()===_0x5871b1(0x2a2)){if(_0x5871b1(0x54a)!==_0x5871b1(0xadb))return this['skillItemWindowRectBorderStyle']();else _0x1a8f96['addState'](_0x475c07);}else{if(this[_0x5871b1(0xc97)]())return _0x5871b1(0xdb)!=='jSBYr'?this[_0x5871b1(0x5e6)]():_0x5d5be3[_0x5871b1(0x6e4)];else{if(_0x5871b1(0x146)===_0x5871b1(0x146))return VisuMZ[_0x5871b1(0xa98)][_0x5871b1(0x4b3)][_0x5871b1(0x61e)](this);else{const _0x348a47=this[_0x5871b1(0x2c4)](),_0x436a43=_0x56641a[_0x5871b1(0xa98)][_0x5871b1(0x5bc)][_0x5871b1(0xa9e)][_0x5871b1(0x289)],_0x290aee=_0x348a47===_0x5871b1(0x530)?_0x30c1d6['autoBattle']:_0x5871b1(0x329)['format'](_0x436a43,_0x468b8e[_0x5871b1(0xa34)]),_0x307521=this[_0x5871b1(0xa00)]();this[_0x5871b1(0x3bc)](_0x290aee,_0x5871b1(0xa34),_0x307521);}}}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x337)]=Scene_Battle[_0x4adfe0(0x6ec)]['itemWindowRect'],Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xa0b)]=function(){const _0x2c7c17=_0x4adfe0;if(this[_0x2c7c17(0xca7)]()===_0x2c7c17(0x2a2))return this[_0x2c7c17(0x1e5)]();else return this[_0x2c7c17(0xc97)]()?this[_0x2c7c17(0x5e6)]():VisuMZ[_0x2c7c17(0xa98)][_0x2c7c17(0x337)]['call'](this);},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xc97)]=function(){const _0x4541da=_0x4adfe0;return VisuMZ[_0x4541da(0xa98)][_0x4541da(0x5bc)]['BattleLayout'][_0x4541da(0x24b)];},Scene_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x5e6)]=function(){const _0x11b4b6=_0x4adfe0,_0x369976=Sprite_Button['prototype'][_0x11b4b6(0xc8e)]()*0x2+0x4;let _0x538bd0=Graphics[_0x11b4b6(0xcc7)]-_0x369976;Imported[_0x11b4b6(0x56a)]&&SceneManager[_0x11b4b6(0x33d)]()&&(_0x538bd0+=_0x369976);const _0x2b3b09=this[_0x11b4b6(0xbf7)](),_0x224442=Graphics['boxHeight']-_0x2b3b09-this['statusWindowRect']()['height']+Window_BattleStatus[_0x11b4b6(0x6ec)][_0x11b4b6(0xc1f)](),_0x159493=0x0;return new Rectangle(_0x159493,_0x2b3b09,_0x538bd0,_0x224442);},Scene_Battle[_0x4adfe0(0x6ec)]['createEnemyNameContainer']=function(){const _0x2dfcde=_0x4adfe0;if(!VisuMZ[_0x2dfcde(0xa98)][_0x2dfcde(0x5bc)]['Enemy'][_0x2dfcde(0x57b)])return;this['_enemyNameContainer']=new Sprite(),this['_enemyNameContainer']['x']=this[_0x2dfcde(0x743)]['x'],this['_enemyNameContainer']['y']=this[_0x2dfcde(0x743)]['y'];const _0xd249f4=this[_0x2dfcde(0x3be)][_0x2dfcde(0x766)](this[_0x2dfcde(0x743)]);this['addChildAt'](this[_0x2dfcde(0x794)],_0xd249f4);for(let _0x581918=0x0;_0x581918<0x8;_0x581918++){const _0x4e8d6b=new Window_EnemyName(_0x581918);this['_enemyNameContainer'][_0x2dfcde(0x607)](_0x4e8d6b);}},Sprite_Battler[_0x4adfe0(0x9ab)]=VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5bc)][_0x4adfe0(0x2e2)][_0x4adfe0(0xb0c)],VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x1d8)]=Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x7d4)],Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x7d4)]=function(){const _0x2a25eb=_0x4adfe0;VisuMZ[_0x2a25eb(0xa98)][_0x2a25eb(0x1d8)][_0x2a25eb(0x61e)](this),this[_0x2a25eb(0x46b)]();if(this[_0x2a25eb(0xab3)]===Sprite_Enemy)this[_0x2a25eb(0x82b)]();this['createDistortionSprite']();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x46b)]=function(){const _0x25df1d=_0x4adfe0;this[_0x25df1d(0x49e)]=0x0,this[_0x25df1d(0x984)]=0x0,this['_floatHeight']=0x0,this[_0x25df1d(0x79b)]=0x0,this[_0x25df1d(0xa8d)]=0x0,this[_0x25df1d(0x19a)]=0x0,this[_0x25df1d(0x9ad)]=_0x25df1d(0x525),this[_0x25df1d(0xb34)]=0x0,this[_0x25df1d(0xcb6)]=0x0,this[_0x25df1d(0x784)]=0x0,this['_jumpWholeDuration']=0x0,this[_0x25df1d(0x9d7)]=0xff,this['_opacityDuration']=0x0,this[_0x25df1d(0x366)]=0x0,this[_0x25df1d(0x38b)]=_0x25df1d(0x525),this['_currentAngle']=0x0,this['_targetAngle']=0x0,this[_0x25df1d(0x112)]=0x0,this[_0x25df1d(0x2f3)]=0x0,this['_angleEasing']=_0x25df1d(0x525),this['_angleRevertOnFinish']=!![],this[_0x25df1d(0xbdb)]=0x0,this[_0x25df1d(0x74f)]=0x0,this['_targetSkewX']=0x0,this['_targetSkewY']=0x0,this[_0x25df1d(0x25a)]=0x0,this['_skewWholeDuration']=0x0,this['_skewEasing']=_0x25df1d(0x525),this[_0x25df1d(0xaa6)]=0x1,this[_0x25df1d(0xad2)]=0x1,this[_0x25df1d(0x8eb)]=0x1,this[_0x25df1d(0x10a)]=0x1,this[_0x25df1d(0x53a)]=0x0,this[_0x25df1d(0x6de)]=0x0,this[_0x25df1d(0x3ac)]=_0x25df1d(0x525),this[_0x25df1d(0xbd7)]=0x1,this['_targetHomeX']=0x0,this[_0x25df1d(0x464)]=0x0,this[_0x25df1d(0x2d9)]=0x0,this[_0x25df1d(0x1a4)]=0x0,this[_0x25df1d(0x828)]='Linear',this['_shakeFlinchDuration']=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler['prototype']['createShadowSprite']=function(){const _0x17a330=_0x4adfe0;this[_0x17a330(0xb7f)]=new Sprite(),this[_0x17a330(0xb7f)][_0x17a330(0x932)]=ImageManager['loadSystem'](_0x17a330(0x3e5)),this['_shadowSprite'][_0x17a330(0x932)][_0x17a330(0x656)]=VisuMZ[_0x17a330(0xa98)][_0x17a330(0x5bc)][_0x17a330(0x2e2)][_0x17a330(0xb50)],this['_shadowSprite'][_0x17a330(0x893)]['x']=0.5,this[_0x17a330(0xb7f)][_0x17a330(0x893)]['y']=0.5,this[_0x17a330(0xb7f)]['y']=-0x2,this[_0x17a330(0xb7f)][_0x17a330(0x415)]=![],this[_0x17a330(0x607)](this[_0x17a330(0xb7f)]);},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xee)]=function(){const _0x236ec4=_0x4adfe0;this[_0x236ec4(0x593)]=new Sprite(),this[_0x236ec4(0x593)]['anchor']['x']=0.5,this[_0x236ec4(0x593)]['anchor']['y']=0.5,this[_0x236ec4(0x607)](this[_0x236ec4(0x593)]);},Sprite_Battler[_0x4adfe0(0x6ec)]['attachSpritesToDistortionSprite']=function(){const _0x5e56fb=_0x4adfe0;if(!this[_0x5e56fb(0x593)])return;if(this['_shadowSprite']){if(_0x5e56fb(0xaa1)===_0x5e56fb(0xaa1)){const _0x32a6c3=this[_0x5e56fb(0x908)](this[_0x5e56fb(0x593)]);this[_0x5e56fb(0x844)](this[_0x5e56fb(0xb7f)],_0x32a6c3),this[_0x5e56fb(0x76c)]();}else{if(!_0x3d6f90[_0x5e56fb(0xcfa)]())return;if(!_0x2df9db[_0x5e56fb(0x21f)])return;_0x28b579['ConvertParams'](_0x11df1c,_0x35a5c3),_0xf11ca5[_0x5e56fb(0x726)][_0x5e56fb(0xba5)]();const _0x2d34c2=_0x2808fc[_0x5e56fb(0x781)]();_0x2d34c2&&_0x15dfe4[_0x5e56fb(0x450)]&&_0x2d34c2[_0x5e56fb(0x98c)](_0x5e56fb(0x206));}}if(this['_svBattlerSprite']){if(_0x5e56fb(0x5c4)!==_0x5e56fb(0x5c4)){const _0x602b03=_0x1a32af['BattleCore'][_0x5e56fb(0x5bc)][_0x5e56fb(0x2e2)];this[_0x5e56fb(0xb29)]=_0x42d9de[_0x5e56fb(0x37b)]((_0x602b03['ShakeFlinchDuration']??0x18)*_0x119852),this[_0x5e56fb(0x775)]=_0x233f75[_0x5e56fb(0x7a0)](this[_0x5e56fb(0x775)],_0x24cb75);}else this[_0x5e56fb(0x593)]['addChild'](this[_0x5e56fb(0x671)]);}this[_0x5e56fb(0x228)]&&this['_distortionSprite']['addChild'](this[_0x5e56fb(0x228)]),this[_0x5e56fb(0xc9e)]&&this[_0x5e56fb(0x593)][_0x5e56fb(0x607)](this['_mainSprite']),this['_injectAnimationSprite']&&this[_0x5e56fb(0x593)][_0x5e56fb(0x607)](this[_0x5e56fb(0x842)]),this[_0x5e56fb(0x173)]&&this[_0x5e56fb(0x593)][_0x5e56fb(0x607)](this[_0x5e56fb(0x173)]);},Sprite_Battler['prototype'][_0x4adfe0(0x76c)]=function(){const _0x4ade39=_0x4adfe0;if(!this[_0x4ade39(0xb7f)])return;if(this[_0x4ade39(0x26e)]&&this[_0x4ade39(0x26e)]['svBattlerShadowVisible']()){const _0xbc9998=this[_0x4ade39(0xb7f)][_0x4ade39(0x932)];this['_shadowSprite'][_0x4ade39(0xb0f)](0x0,0x0,_0xbc9998[_0x4ade39(0x1e2)],_0xbc9998[_0x4ade39(0x6a1)]);}else this[_0x4ade39(0xb7f)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x3d9)]=function(){const _0x2ddcd8=_0x4adfe0;return SceneManager[_0x2ddcd8(0xcfa)]()?SceneManager[_0x2ddcd8(0x726)][_0x2ddcd8(0x898)]['_damageContainer']:this[_0x2ddcd8(0x812)];},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xa45)]=function(_0x5b5ad0,_0x5720d8){const _0x538aee=_0x4adfe0;if(!this['_battler'][_0x538aee(0x694)]())return;if(BattleManager[_0x538aee(0x774)]())return;const _0x1d2e85=VisuMZ[_0x538aee(0xa98)][_0x538aee(0x5bc)][_0x538aee(0x676)],_0x276b96=new Sprite_Damage();_0x276b96[_0x538aee(0xf8)]=_0x1d2e85[_0x538aee(0x7e7)],this[_0x538aee(0x3d7)](_0x276b96),_0x276b96[_0x538aee(0xa45)](_0x5b5ad0,_0x5720d8),this[_0x538aee(0x5df)](_0x276b96);},Sprite_Battler[_0x4adfe0(0x6ec)]['setupIconTextPopup']=function(_0xf637d6,_0x2a3c01,_0x378e7d){const _0x2f65da=_0x4adfe0;if(!this[_0x2f65da(0x26e)][_0x2f65da(0x694)]())return;if(BattleManager[_0x2f65da(0x774)]())return;const _0x17d22b=VisuMZ[_0x2f65da(0xa98)][_0x2f65da(0x5bc)][_0x2f65da(0x676)],_0x243aba=new Sprite_Damage();_0x243aba[_0x2f65da(0xf8)]=_0x17d22b[_0x2f65da(0x7e7)],this[_0x2f65da(0x3d7)](_0x243aba),_0x243aba[_0x2f65da(0xa6b)](_0xf637d6,_0x2a3c01,_0x378e7d),this['addDamageSprite'](_0x243aba);},Sprite_Battler[_0x4adfe0(0x6ec)]['setupDamagePopup']=function(){const _0x3c45df=_0x4adfe0;if(!this[_0x3c45df(0x26e)][_0x3c45df(0x66f)]())return;while(this[_0x3c45df(0x26e)][_0x3c45df(0x66f)]()){if(_0x3c45df(0x2e4)!=='oDMac')this[_0x3c45df(0x26e)][_0x3c45df(0x694)]()&&this[_0x3c45df(0x2b5)]();else{const _0x1b7917=this[_0x3c45df(0x6f8)](_0x57384e),_0x556dba=this[_0x3c45df(0xa88)](_0x1dbc65)['width'];return _0x556dba<=_0x1b7917[_0x3c45df(0x1e2)]?_0x3c45df(0x579):'icon';}}this[_0x3c45df(0x26e)][_0x3c45df(0xab6)](),this[_0x3c45df(0x26e)][_0x3c45df(0xb07)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x2b5)]=function(){const _0x2c24e6=_0x4adfe0;if(BattleManager[_0x2c24e6(0x774)]())return;const _0x51c31e=VisuMZ[_0x2c24e6(0xa98)][_0x2c24e6(0x5bc)][_0x2c24e6(0x676)],_0x4be498=new Sprite_Damage();_0x4be498['_duration']=_0x51c31e['PopupDuration'],this[_0x2c24e6(0x3d7)](_0x4be498),_0x4be498[_0x2c24e6(0x9ac)](this[_0x2c24e6(0x26e)]),_0x4be498[_0x2c24e6(0x85e)](this[_0x2c24e6(0x26e)]),this[_0x2c24e6(0x5df)](_0x4be498);},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x5df)]=function(_0x51f608){const _0x434a95=_0x4adfe0;this['_damages'][_0x434a95(0x98e)](_0x51f608);if(this['isShownOnBattlePortrait']()){if(_0x434a95(0xc77)===_0x434a95(0xde))this[_0x434a95(0x582)]=!![],this[_0x434a95(0x964)]['push'](_0x434a95(0x46f),_0x2bbb2f[_0x434a95(0xa98)][_0x434a95(0x5bc)]['PartyCmd']['ActiveTpbOptionsMessage']);else{const _0x48c95f=SceneManager[_0x434a95(0x726)][_0x434a95(0x326)];if(_0x48c95f)_0x48c95f[_0x434a95(0x5df)](_0x51f608,this[_0x434a95(0x26e)]);}}else{if('ZlrXL'===_0x434a95(0x7f1)){this['damageContainer']()[_0x434a95(0x607)](_0x51f608);if(SceneManager['isBattleFlipped']())_0x51f608['scale']['x']=-0x1;}else _0x1d9150[_0x434a95(0xa98)]['Sprite_Actor_updateShadow']['call'](this),this[_0x434a95(0x988)]();}},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x906)]=function(){const _0x5942a8=_0x4adfe0;return!$gameSystem[_0x5942a8(0x1bc)]()&&this[_0x5942a8(0x26e)]&&this[_0x5942a8(0x26e)][_0x5942a8(0x771)]();return!$gameSystem[_0x5942a8(0x1bc)]()&&this[_0x5942a8(0x26e)]&&this[_0x5942a8(0x26e)][_0x5942a8(0x771)]()&&Window_BattleStatus['prototype'][_0x5942a8(0xca7)]()===_0x5942a8(0xcac);},Sprite_Battler['prototype'][_0x4adfe0(0x3d7)]=function(_0x2397a5){const _0x4e781b=_0x4adfe0;this[_0x4e781b(0xc7a)](_0x2397a5,!![]);const _0x3a5d23=VisuMZ[_0x4e781b(0xa98)][_0x4e781b(0x5bc)][_0x4e781b(0x676)],_0x1b3f19=SceneManager[_0x4e781b(0x2dc)]()?-0x1:0x1;if(_0x3a5d23[_0x4e781b(0xa13)])for(const _0x1d6dd8 of this['_damages']){_0x4e781b(0x78f)!==_0x4e781b(0x78f)?_0x29f2da[_0x4e781b(0x9fe)]():(_0x1d6dd8['x']+=_0x3a5d23[_0x4e781b(0xb87)]*_0x1b3f19,_0x1d6dd8['y']+=_0x3a5d23[_0x4e781b(0x103)]);}else{const _0x1cd472=this[_0x4e781b(0x80d)][this['_damages'][_0x4e781b(0xa59)]-0x1];if(_0x1cd472){if(_0x4e781b(0xc9c)===_0x4e781b(0xc9c))_0x2397a5['x']=_0x1cd472['x']+_0x3a5d23[_0x4e781b(0xb87)]*_0x1b3f19,_0x2397a5['y']=_0x1cd472['y']+_0x3a5d23[_0x4e781b(0x103)];else return _0x32e967=_0x5140ed(_0x5ecf18),_0x3d164f[_0x4e781b(0x634)](/#(.*)/i)?_0x4e781b(0x7c8)[_0x4e781b(0x31d)](_0x1004b3(_0x3b5c08['$1'])):this[_0x4e781b(0x3ad)](_0x24a2d8(_0x46097a));}}},Sprite_Battler['prototype']['alignBattleCoreDamageSprite']=function(_0x510232,_0x323f0b){const _0x58075f=_0x4adfe0,_0x2f21c1=SceneManager[_0x58075f(0x2dc)]()?-0x1:0x1;let _0x3cbc1c=this[_0x58075f(0x49e)];_0x3cbc1c+=this[_0x58075f(0x822)]();let _0x2e4a09=this[_0x58075f(0x984)];const _0xfdc411=this['_distortionSprite'][_0x58075f(0xfc)]['y'];_0x2e4a09+=this[_0x58075f(0xa76)]();const _0x30b473=SceneManager[_0x58075f(0x726)]['_statusWindow'];if(_0x30b473&&this['parent']===_0x30b473){_0x3cbc1c+=_0x30b473['x']-this[_0x58075f(0x6c0)]();const _0x28cdaf=_0x30b473[_0x58075f(0x6ff)]()*0x3/0x4;_0x2e4a09=_0x30b473['y']+_0x28cdaf,_0x2e4a09=Math['min'](_0x2e4a09,_0x30b473['y']+this['y']-this[_0x58075f(0x6a1)]+_0x28cdaf);}_0x510232['x']=Math[_0x58075f(0xb95)](_0x3cbc1c+this['damageOffsetX']()*_0x2f21c1),_0x510232['y']=Math[_0x58075f(0xb95)](_0x2e4a09+this[_0x58075f(0x3e2)]());},VisuMZ['BattleCore'][_0x4adfe0(0x95c)]=Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x6c0)],Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x6c0)]=function(){const _0x1a53e4=_0x4adfe0;let _0x42ed3c=VisuMZ[_0x1a53e4(0xa98)][_0x1a53e4(0x95c)][_0x1a53e4(0x61e)](this),_0x4fe821=VisuMZ['BattleCore']['Settings'][_0x1a53e4(0x676)]['PopupOffsetX']||0x0;return Math['round'](_0x42ed3c+_0x4fe821);},VisuMZ['BattleCore'][_0x4adfe0(0x6f7)]=Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x3e2)],Sprite_Battler[_0x4adfe0(0x6ec)]['damageOffsetY']=function(){const _0x27a21d=_0x4adfe0;let _0x44c2cd=VisuMZ[_0x27a21d(0xa98)][_0x27a21d(0x6f7)]['call'](this);switch(VisuMZ[_0x27a21d(0xa98)]['Settings']['Damage'][_0x27a21d(0x978)]){case _0x27a21d(0xa44):_0x44c2cd-=this['height']*this[_0x27a21d(0xfc)]['y'];break;case _0x27a21d(0x379):_0x44c2cd-=this[_0x27a21d(0x6a1)]*this[_0x27a21d(0xfc)]['y']*0.5;break;}let _0x2d0b3f=VisuMZ[_0x27a21d(0xa98)][_0x27a21d(0x5bc)][_0x27a21d(0x676)][_0x27a21d(0x42c)]||0x0;return Math[_0x27a21d(0xb95)](_0x44c2cd+_0x2d0b3f);},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x6c0)]=function(){const _0x1a45d6=_0x4adfe0;return Sprite_Battler[_0x1a45d6(0x6ec)]['damageOffsetX']['call'](this);},Sprite_Actor[_0x4adfe0(0x6ec)]['damageOffsetY']=function(){const _0x3d588e=_0x4adfe0;return Sprite_Battler[_0x3d588e(0x6ec)][_0x3d588e(0x3e2)][_0x3d588e(0x61e)](this);},Sprite_Battler['prototype'][_0x4adfe0(0x308)]=function(_0x5657ef){const _0x14f0c0=_0x4adfe0;if(this[_0x14f0c0(0x906)]()){if(_0x14f0c0(0x503)===_0x14f0c0(0x503))SceneManager[_0x14f0c0(0x726)]['_statusWindow'][_0x14f0c0(0xc50)](_0x5657ef);else return this[_0x14f0c0(0xa54)]()?this[_0x14f0c0(0x144)]()&&this[_0x14f0c0(0x144)]()['item']()&&this[_0x14f0c0(0x144)]()[_0x14f0c0(0x732)]():this[_0x14f0c0(0x144)]()&&this[_0x14f0c0(0x144)]()['item']()&&this['currentAction']()[_0x14f0c0(0x764)]();}else this['damageContainer']()[_0x14f0c0(0xc4e)](_0x5657ef),this[_0x14f0c0(0x80d)][_0x14f0c0(0xb6e)](_0x5657ef),_0x5657ef[_0x14f0c0(0x6ab)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x861)]=Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xc63)],Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xc63)]=function(_0x1e71d1,_0x1ebdb4){const _0x2b257b=_0x4adfe0,_0x17fe7a=VisuMZ[_0x2b257b(0xa98)][_0x2b257b(0x5bc)];if(this['constructor']===Sprite_Actor)_0x1e71d1+=_0x17fe7a[_0x2b257b(0x2e2)]['OffsetX']||0x0,_0x1ebdb4+=_0x17fe7a[_0x2b257b(0x2e2)]['OffsetY']||0x0;else{if(this[_0x2b257b(0xab3)]===Sprite_Enemy){if('pVUeO'===_0x2b257b(0xcf7))_0x1e71d1+=_0x17fe7a[_0x2b257b(0x30b)]['OffsetX']||0x0,_0x1ebdb4+=_0x17fe7a[_0x2b257b(0x30b)][_0x2b257b(0x116)]||0x0;else{if(this[_0x2b257b(0xa27)])return;}}}this[_0x2b257b(0x26e)]&&(_0x2b257b(0x928)==='qiSco'?(_0x1e71d1=this[_0x2b257b(0x26e)]['_forcedHomeX']??_0x1e71d1,_0x1ebdb4=this['_battler']['_forcedHomeY']??_0x1ebdb4):_0x273820?this[_0x2b257b(0x3bb)]():this[_0x2b257b(0x572)]()),VisuMZ[_0x2b257b(0xa98)]['Sprite_Battler_setHome']['call'](this,_0x1e71d1,_0x1ebdb4),this['_targetHomeX']=this['_homeX'],this['_targetHomeY']=this[_0x2b257b(0x5e7)],this[_0x2b257b(0x2d9)]=0x0,this[_0x2b257b(0x1a4)]=0x0,this['_homeEasing']=_0x2b257b(0x525);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xb9a)]=Sprite_Battler['prototype'][_0x4adfe0(0x9e6)],Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e6)]=function(){const _0xae7642=_0x4adfe0;VisuMZ['BattleCore'][_0xae7642(0xb9a)][_0xae7642(0x61e)](this),!this[_0xae7642(0x26e)]&&this['_hpGaugeSprite']&&(this[_0xae7642(0x74a)][_0xae7642(0x415)]=![]);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x16b)]=Sprite_Battler['prototype'][_0x4adfe0(0x8b6)],Sprite_Battler[_0x4adfe0(0x6ec)]['updateMain']=function(){const _0x21a293=_0x4adfe0;this[_0x21a293(0xb18)](),this[_0x21a293(0x171)](),this[_0x21a293(0xa91)](),this[_0x21a293(0x160)](),VisuMZ[_0x21a293(0xa98)]['Sprite_Battler_updateMain'][_0x21a293(0x61e)](this),this[_0x21a293(0x2ad)](),this[_0x21a293(0x7ed)]();if(this[_0x21a293(0xab3)]===Sprite_Enemy)this['updateShadow']();},VisuMZ['BattleCore'][_0x4adfe0(0xa52)]=Sprite_Battler['prototype'][_0x4adfe0(0x1e0)],Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x1e0)]=function(){const _0x4e0962=_0x4adfe0;this[_0x4e0962(0x43a)](),VisuMZ['BattleCore']['Sprite_Battler_updatePosition']['call'](this),this[_0x4e0962(0x250)](),this[_0x4e0962(0x8fb)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x2f6)]=function(){const _0x46acdc=_0x4adfe0,_0x5a3547=this[_0x46acdc(0xa3f)]();if(this[_0x46acdc(0x26e)][_0x46acdc(0xa38)]())this['_selectionEffectCount']++,Graphics[_0x46acdc(0x9c9)]%0x1e<0xf?_0x5a3547[_0x46acdc(0x39d)]([0xff,0xff,0xff,0x40]):_0x5a3547[_0x46acdc(0x39d)]([0x0,0x0,0x0,0x0]);else{if(this['_selectionEffectCount']>0x0){if(_0x46acdc(0x653)==='lZVGK')this[_0x46acdc(0x711)]=0x0,_0x5a3547[_0x46acdc(0x39d)]([0x0,0x0,0x0,0x0]);else return _0x1d96e6(_0x1de83c['$2']);}}},Sprite_Battler['prototype'][_0x4adfe0(0x5ab)]=function(_0x5a683a,_0x39210d){const _0x4c2a6f=_0x4adfe0,_0x32cc64=_0x5a683a-this[_0x4c2a6f(0xc0d)],_0x2273de=_0x39210d-this[_0x4c2a6f(0x5e7)];this[_0x4c2a6f(0xc0d)]=_0x5a683a,this[_0x4c2a6f(0x5e7)]=_0x39210d,this['_offsetX']-=_0x32cc64,this[_0x4c2a6f(0xafc)]-=_0x2273de,this[_0x4c2a6f(0x7fc)]-=_0x32cc64,this[_0x4c2a6f(0x5d7)]-=_0x2273de,this[_0x4c2a6f(0x1e0)]();},Sprite_Battler['prototype'][_0x4adfe0(0xb8d)]=function(_0x1fa9eb,_0xe39814,_0xeee6d6,_0x58199e){const _0xaddeeb=_0x4adfe0;if(this['_targetHomeX']!==_0x1fa9eb||this[_0xaddeeb(0x464)]!==_0xe39814){this[_0xaddeeb(0x179)]=_0x1fa9eb,this['_targetHomeY']=_0xe39814,this[_0xaddeeb(0x2d9)]=_0xeee6d6,this[_0xaddeeb(0x1a4)]=_0xeee6d6,this[_0xaddeeb(0x828)]=_0x58199e;if(_0xeee6d6<=0x0){if(_0xaddeeb(0x713)===_0xaddeeb(0x713))this[_0xaddeeb(0xf7)]();else{_0x4c8ff2[_0xaddeeb(0x634)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x4a02ef=_0x3251e0(_0x5e0d61['$1']),_0x34b7d5=_0xcb096d(_0x2f30fe['$2']),_0x13d9c8=_0x34b7d5===0x1?this['_regionBattleback1']:this[_0xaddeeb(0x3cd)],_0x215ca3=_0x4d9249(_0x46dc4f['$3']);_0x13d9c8[_0x4a02ef]=_0x215ca3;}}}},Sprite_Battler['prototype'][_0x4adfe0(0x43a)]=function(){const _0xb5bdd9=_0x4adfe0;if(this[_0xb5bdd9(0x2d9)]<=0x0)return;const _0x547f1e=this['_homeDuration'],_0x43f58f=this[_0xb5bdd9(0x1a4)],_0x22b31d=this[_0xb5bdd9(0x828)];Imported[_0xb5bdd9(0x56a)]?(this[_0xb5bdd9(0xc0d)]=this[_0xb5bdd9(0xa71)](this[_0xb5bdd9(0xc0d)],this['_targetHomeX'],_0x547f1e,_0x43f58f,_0x22b31d),this[_0xb5bdd9(0x5e7)]=this[_0xb5bdd9(0xa71)](this[_0xb5bdd9(0x5e7)],this[_0xb5bdd9(0x464)],_0x547f1e,_0x43f58f,_0x22b31d)):(this[_0xb5bdd9(0xc0d)]=(this[_0xb5bdd9(0xc0d)]*(_0x547f1e-0x1)+this['_targetHomeX'])/_0x547f1e,this['_homeY']=(this[_0xb5bdd9(0x5e7)]*(_0x547f1e-0x1)+this[_0xb5bdd9(0x464)])/_0x547f1e);this[_0xb5bdd9(0x2d9)]--;if(this[_0xb5bdd9(0x2d9)]<=0x0)this[_0xb5bdd9(0xf7)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xf7)]=function(){const _0xc35eb4=_0x4adfe0;this['_homeX']=this[_0xc35eb4(0x179)],this[_0xc35eb4(0x5e7)]=this[_0xc35eb4(0x464)];},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x250)]=function(){const _0x3ea4f0=_0x4adfe0;this[_0x3ea4f0(0x49e)]=this['x'],this[_0x3ea4f0(0x984)]=this['y'],this['updateFloat'](),this[_0x3ea4f0(0x863)](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x3ea4f0(0xa76)](),this['y']+=this[_0x3ea4f0(0x904)](),this['x']=Math[_0x3ea4f0(0xa55)](this['x']),this['y']=Math[_0x3ea4f0(0xa55)](this['y']);},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x822)]=function(){let _0xf1d88f=0x0;return _0xf1d88f;},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xa76)]=function(){const _0x3d2271=_0x4adfe0;let _0x3dd7bb=0x0;return this[_0x3d2271(0x26e)]&&!this[_0x3d2271(0x26e)][_0x3d2271(0xa96)]()&&(_0x3d2271(0x4a4)==='zTykv'?(_0x3dd7bb-=this[_0x3d2271(0x56b)],_0x3dd7bb-=this[_0x3d2271(0xb34)]):(this['_currentAngle']=_0x43563e,this['_angleRevertOnFinish']&&(this['_targetAngle']=0x0,this[_0x3d2271(0x7f3)]=0x0))),_0x3dd7bb;},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x904)]=function(){const _0x4334b8=_0x4adfe0;let _0x1e9f18=0x0;if(this['_distortionSprite']&&this[_0x4334b8(0xab3)]!==Sprite_SvEnemy){const _0x53c63c=this[_0x4334b8(0x593)][_0x4334b8(0xfc)]['y'];_0x1e9f18-=(_0x53c63c-0x1)*this[_0x4334b8(0x6a1)];}return _0x1e9f18;},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x160)]=function(){const _0x4052ae=_0x4adfe0,_0x26eac2=this[_0x4052ae(0x26e)]&&this[_0x4052ae(0x26e)]['isBattlerFlipped']();this[_0x4052ae(0xbd7)]=(_0x26eac2?-0x1:0x1)*Math['abs'](this[_0x4052ae(0xfc)]['x']);},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xa80)]=function(_0x378211,_0xc7ff2a,_0x2b970b){const _0x6b35c5=_0x4adfe0;if(!this[_0x6b35c5(0x418)]())return;if(this[_0x6b35c5(0x79b)]===_0x378211)return;this[_0x6b35c5(0x79b)]=_0x378211,this[_0x6b35c5(0xa8d)]=_0xc7ff2a,this['_floatWholeDuration']=_0xc7ff2a,this[_0x6b35c5(0x9ad)]=_0x2b970b||_0x6b35c5(0x525);if(_0xc7ff2a<=0x0)this['_floatHeight']=_0x378211;},Sprite_Battler['prototype'][_0x4adfe0(0x69c)]=function(){const _0x3818af=_0x4adfe0;if(this[_0x3818af(0xa8d)]<=0x0)return;const _0x49dcb1=this[_0x3818af(0xa8d)],_0x2ad4af=this[_0x3818af(0x19a)],_0x188dff=this[_0x3818af(0x9ad)];Imported[_0x3818af(0x56a)]?this[_0x3818af(0x56b)]=this[_0x3818af(0xa71)](this[_0x3818af(0x56b)],this[_0x3818af(0x79b)],_0x49dcb1,_0x2ad4af,_0x188dff):this[_0x3818af(0x56b)]=(this[_0x3818af(0x56b)]*(_0x49dcb1-0x1)+this[_0x3818af(0x79b)])/_0x49dcb1;this[_0x3818af(0xa8d)]--;if(this[_0x3818af(0xa8d)]<=0x0)this[_0x3818af(0x8c7)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x8c7)]=function(){const _0x121fa9=_0x4adfe0;this[_0x121fa9(0x56b)]=this['_targetFloatHeight'];},Sprite_Battler['prototype'][_0x4adfe0(0x6e6)]=function(){const _0x230a0b=_0x4adfe0;return this[_0x230a0b(0xa8d)]>0x0;},Sprite_Battler['prototype'][_0x4adfe0(0x2d1)]=function(_0x2d63d7,_0x27cb75){const _0x194537=_0x4adfe0;if(!this[_0x194537(0x418)]())return;if(_0x27cb75<=0x0)return;this[_0x194537(0xcb6)]=_0x2d63d7,this[_0x194537(0x784)]=_0x27cb75,this[_0x194537(0xa62)]=_0x27cb75;},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x863)]=function(){const _0x10a335=_0x4adfe0;if(this[_0x10a335(0x784)]<=0x0)return;const _0x2ca57a=this[_0x10a335(0xa62)]-this['_jumpDuration'],_0x49b13e=this['_jumpWholeDuration']/0x2,_0x5015ee=this[_0x10a335(0xcb6)],_0x3683cc=-_0x5015ee/Math[_0x10a335(0x15a)](_0x49b13e,0x2);this['_jumpHeight']=_0x3683cc*Math[_0x10a335(0x15a)](_0x2ca57a-_0x49b13e,0x2)+_0x5015ee,this['_jumpDuration']--;if(this[_0x10a335(0x784)]<=0x0)return this[_0x10a335(0x26b)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x26b)]=function(){const _0x562e69=_0x4adfe0;this[_0x562e69(0xb34)]=0x0;},Sprite_Battler['prototype'][_0x4adfe0(0x14d)]=function(){const _0x513840=_0x4adfe0;return this[_0x513840(0x784)]>0x0;},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x9a7)]=function(_0x5ae247,_0x58c43d,_0x2e1e2a){const _0x104631=_0x4adfe0;if(this[_0x104631(0x9d7)]===_0x5ae247)return;this[_0x104631(0x9d7)]=_0x5ae247,this[_0x104631(0xa2a)]=_0x58c43d,this[_0x104631(0x366)]=_0x58c43d,this[_0x104631(0x38b)]=_0x2e1e2a||_0x104631(0x525);if(_0x58c43d<=0x0)this[_0x104631(0x2c6)]=_0x5ae247;},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x8fb)]=function(){const _0x5da3c1=_0x4adfe0;if(this[_0x5da3c1(0xab3)][_0x5da3c1(0xa23)]===_0x5da3c1(0xe9))return;if(this[_0x5da3c1(0xa2a)]<=0x0)return;const _0x3ee05f=this[_0x5da3c1(0xa2a)],_0x58b7fb=this[_0x5da3c1(0x366)],_0xb96d51=this[_0x5da3c1(0x38b)];Imported[_0x5da3c1(0x56a)]?this[_0x5da3c1(0x2c6)]=this[_0x5da3c1(0xa71)](this[_0x5da3c1(0x2c6)],this[_0x5da3c1(0x9d7)],_0x3ee05f,_0x58b7fb,_0xb96d51):this[_0x5da3c1(0x2c6)]=(this[_0x5da3c1(0x2c6)]*(_0x3ee05f-0x1)+this[_0x5da3c1(0x9d7)])/_0x3ee05f;this[_0x5da3c1(0xa2a)]--;if(this[_0x5da3c1(0xa2a)]<=0x0)this[_0x5da3c1(0x15b)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x15b)]=function(){const _0x20e474=_0x4adfe0;this[_0x20e474(0x2c6)]=this[_0x20e474(0x9d7)];},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xb3e)]=function(){const _0x4a6027=_0x4adfe0;return this[_0x4a6027(0xa2a)]>0x0;},Sprite_Battler['prototype'][_0x4adfe0(0x75d)]=function(){const _0x7d1b1c=_0x4adfe0;this['_shadowSprite'][_0x7d1b1c(0x415)]=this[_0x7d1b1c(0x26e)][_0x7d1b1c(0x147)](),this[_0x7d1b1c(0x5ae)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x5ae)]=function(){const _0x2c04a8=_0x4adfe0;if(!this[_0x2c04a8(0xb7f)])return;this[_0x2c04a8(0xb7f)]['y']=this[_0x2c04a8(0x984)]-this['y']-0x2;},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x962)]=function(){const _0x1b5acb=_0x4adfe0;if(!this['_battler'])return;this[_0x1b5acb(0xa6e)]=this[_0x1b5acb(0x26e)][_0x1b5acb(0x817)](),this[_0x1b5acb(0x219)]=this['_battler'][_0x1b5acb(0x6c6)]();},Game_BattlerBase[_0x4adfe0(0x6ec)][_0x4adfe0(0x817)]=function(){const _0x98dbfb=_0x4adfe0,_0x2e1830=this[_0x98dbfb(0x771)]()?this[_0x98dbfb(0xcf8)]():this[_0x98dbfb(0x85f)]();if(_0x2e1830){if(_0x98dbfb(0xc65)==='lCvhK')return _0x7848e['prototype']['damageOffsetX']['call'](this);else{const _0xabefb9=_0x2e1830[_0x98dbfb(0x15d)];if(_0xabefb9[_0x98dbfb(0x634)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i)){if(_0x98dbfb(0x996)!==_0x98dbfb(0x996))_0x22c7c4[_0x98dbfb(0x932)]=_0x1bc5b3[_0x98dbfb(0xc53)](_0x53cff8);else return Number(RegExp['$1'])*0.01;}else{if(_0xabefb9['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}}return 0x1;},Game_BattlerBase['prototype']['battlerShadowScaleY']=function(){const _0x5d6e3f=_0x4adfe0,_0x2ed455=this[_0x5d6e3f(0x771)]()?this[_0x5d6e3f(0xcf8)]():this['enemy']();if(_0x2ed455){if(_0x5d6e3f(0x32d)!==_0x5d6e3f(0x5d6)){const _0x52a5a7=_0x2ed455[_0x5d6e3f(0x15d)];if(_0x52a5a7[_0x5d6e3f(0x634)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x52a5a7[_0x5d6e3f(0x634)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}else{const _0x8503f=_0x16143c[_0x375b64[_0x5d6e3f(0x959)]],_0x3ec30e=_0x8503f[_0x5d6e3f(0xc26)]['length']-0x2,_0x4b4028=_0x8503f[_0x5d6e3f(0xc26)][_0x3ec30e];if(_0x4b4028&&_0x4b4028[_0x5d6e3f(0x888)]!==0xe6){const _0x4469e6={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x7da761=_0x8503f[_0x5d6e3f(0xc26)][_0x5d6e3f(0xcf0)]();_0x8503f[_0x5d6e3f(0xc26)][_0x5d6e3f(0x6f5)](_0x4469e6),_0x8503f[_0x5d6e3f(0xc26)][_0x5d6e3f(0x6f5)](_0x7da761);}}}return 0x1;},Sprite_Battler['prototype']['updateScale']=function(){const _0x58284e=_0x4adfe0;if(this[_0x58284e(0xab3)]===Sprite_SvEnemy)return;this[_0x58284e(0xb1b)](),this[_0x58284e(0x1c3)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x1c3)]=function(){const _0x2f22d9=_0x4adfe0,_0x4e7df9=this[_0x2f22d9(0x593)];_0x4e7df9&&(_0x4e7df9[_0x2f22d9(0xfc)]['x']=this[_0x2f22d9(0x8ab)](),_0x4e7df9['scale']['y']=this[_0x2f22d9(0x25d)]());},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x8ab)]=function(){const _0x1310d6=_0x4adfe0;let _0x32ea64=0x1;return _0x32ea64*=this['_flipScaleX'],_0x32ea64*=this[_0x1310d6(0xaa6)],_0x32ea64;},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x25d)]=function(){const _0x14b95e=_0x4adfe0;return 0x1*this[_0x14b95e(0xad2)];},Sprite_Battler['prototype'][_0x4adfe0(0x5be)]=function(){const _0x459bbb=_0x4adfe0;return this[_0x459bbb(0x1e2)]*this[_0x459bbb(0x8ab)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xabd)]=function(){const _0x3f8779=_0x4adfe0;return this[_0x3f8779(0x6a1)]*this[_0x3f8779(0x25d)]();},Sprite_Battler[_0x4adfe0(0x6ec)]['startGrow']=function(_0x46a7cc,_0x245265,_0x1784ba,_0x4650ef){const _0xc3269a=_0x4adfe0;if(!this[_0xc3269a(0x418)]())return;if(!this[_0xc3269a(0x593)])return;if(this['_targetGrowX']===_0x46a7cc&&this[_0xc3269a(0x10a)]===_0x245265)return;this['_targetGrowX']=_0x46a7cc,this[_0xc3269a(0x10a)]=_0x245265,this[_0xc3269a(0x53a)]=_0x1784ba,this[_0xc3269a(0x6de)]=_0x1784ba,this[_0xc3269a(0x3ac)]=_0x4650ef||'Linear',_0x1784ba<=0x0&&(this['_growX']=this['_targetGrowX'],this[_0xc3269a(0xad2)]=this['_targetGrowY']);},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xb1b)]=function(){const _0x901954=_0x4adfe0;if(this[_0x901954(0x53a)]<=0x0)return;if(!this[_0x901954(0x593)])return;const _0x4e1a97=this[_0x901954(0x53a)],_0x1da0f5=this[_0x901954(0x6de)],_0x5b14cf=this['_growEasing'];Imported[_0x901954(0x56a)]?(this[_0x901954(0xaa6)]=this[_0x901954(0xa71)](this[_0x901954(0xaa6)],this['_targetGrowX'],_0x4e1a97,_0x1da0f5,_0x5b14cf),this[_0x901954(0xad2)]=this['applyEasing'](this[_0x901954(0xad2)],this['_targetGrowY'],_0x4e1a97,_0x1da0f5,_0x5b14cf)):(this[_0x901954(0xaa6)]=(this['_growX']*(_0x4e1a97-0x1)+this[_0x901954(0x8eb)])/_0x4e1a97,this[_0x901954(0xad2)]=(this[_0x901954(0xad2)]*(_0x4e1a97-0x1)+this[_0x901954(0x10a)])/_0x4e1a97);this['_growDuration']--;if(this[_0x901954(0x53a)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x916)]=function(){const _0x161a18=_0x4adfe0;this[_0x161a18(0xaa6)]=this['_targetGrowX'],this[_0x161a18(0xad2)]=this[_0x161a18(0x10a)];},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x810)]=function(){const _0x221fab=_0x4adfe0;return this[_0x221fab(0x53a)]>0x0;},Sprite_Battler[_0x4adfe0(0x6ec)]['startSkew']=function(_0x30faba,_0xeb14d8,_0x34e95f,_0x445cdd){const _0x3fc255=_0x4adfe0;if(!this['canMove']())return;if(!this[_0x3fc255(0x593)])return;if(this[_0x3fc255(0xa67)]===_0x30faba&&this[_0x3fc255(0x16c)]===_0xeb14d8)return;this[_0x3fc255(0xa67)]=_0x30faba,this[_0x3fc255(0x16c)]=_0xeb14d8,this[_0x3fc255(0x25a)]=_0x34e95f,this[_0x3fc255(0xc5c)]=_0x34e95f,this[_0x3fc255(0x991)]=_0x445cdd||_0x3fc255(0x525),_0x34e95f<=0x0&&(_0x3fc255(0x9f1)==='hQVrY'?(_0x523841[_0x3fc255(0x9cd)](),_0x19a6be['_autoBattle']=![],_0xaaf65d['clear'](),_0x264663[_0x3fc255(0x465)]()):(this['_distortionSprite']['skew']['x']=this[_0x3fc255(0xa67)],this['_distortionSprite'][_0x3fc255(0xcc5)]['y']=this['_targetSkewY']));},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x171)]=function(){const _0x49bbda=_0x4adfe0;if(this[_0x49bbda(0x25a)]<=0x0)return;if(!this[_0x49bbda(0x593)])return;const _0x3830b8=this[_0x49bbda(0x25a)],_0x23f7a0=this['_skewWholeDuration'],_0x6a538a=this['_skewEasing'],_0x2975a3=this[_0x49bbda(0x593)];Imported[_0x49bbda(0x56a)]?(_0x2975a3[_0x49bbda(0xcc5)]['x']=this[_0x49bbda(0xa71)](_0x2975a3[_0x49bbda(0xcc5)]['x'],this[_0x49bbda(0xa67)],_0x3830b8,_0x23f7a0,_0x6a538a),_0x2975a3[_0x49bbda(0xcc5)]['y']=this[_0x49bbda(0xa71)](_0x2975a3[_0x49bbda(0xcc5)]['y'],this[_0x49bbda(0x16c)],_0x3830b8,_0x23f7a0,_0x6a538a)):(_0x2975a3['skew']['x']=(_0x2975a3[_0x49bbda(0xcc5)]['x']*(_0x3830b8-0x1)+this[_0x49bbda(0xa67)])/_0x3830b8,_0x2975a3['skew']['y']=(_0x2975a3[_0x49bbda(0xcc5)]['y']*(_0x3830b8-0x1)+this[_0x49bbda(0x16c)])/_0x3830b8);this[_0x49bbda(0x25a)]--;if(this['_skewDuration']<=0x0)this[_0x49bbda(0xcd3)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xcd3)]=function(){const _0x20c0c8=_0x4adfe0;this[_0x20c0c8(0x593)][_0x20c0c8(0xcc5)]['x']=this[_0x20c0c8(0xa67)],this['_distortionSprite'][_0x20c0c8(0xcc5)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x4adfe0(0x6ec)]['isSkewing']=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xbc8)]=function(_0x38744b,_0x15dc3c,_0xcdfd54,_0x56ae48){const _0x18c804=_0x4adfe0;if(!this['canMove']())return;if(!this[_0x18c804(0x593)])return;if(this[_0x18c804(0xf0)]===_0x38744b)return;this[_0x18c804(0xf0)]=_0x38744b,this[_0x18c804(0x112)]=_0x15dc3c,this['_angleWholeDuration']=_0x15dc3c,this[_0x18c804(0xb88)]=_0xcdfd54||'Linear',this[_0x18c804(0x117)]=_0x56ae48,this[_0x18c804(0x117)]===undefined&&(this[_0x18c804(0x117)]=!![]),_0x15dc3c<=0x0&&(this[_0x18c804(0x7f3)]=_0x38744b,this[_0x18c804(0x117)]&&(this[_0x18c804(0xf0)]=0x0,this['_currentAngle']=0x0));},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xa91)]=function(){const _0xbfab62=_0x4adfe0;this[_0xbfab62(0x697)](),this[_0xbfab62(0x316)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x697)]=function(){const _0x7f3fe1=_0x4adfe0;if(this['_angleDuration']<=0x0)return;const _0xf17a0c=this[_0x7f3fe1(0x112)],_0x2adec8=this['_angleWholeDuration'],_0x47e244=this['_angleEasing'];if(Imported[_0x7f3fe1(0x56a)]){if(_0x7f3fe1(0x3b5)!==_0x7f3fe1(0x3b5)){const _0x4568ad=this['weapons']();_0x236d65=_0x4568ad[_0x500581]?_0x4568ad[_0x95f05a][_0x7f3fe1(0xa1a)]:0x0;}else this[_0x7f3fe1(0x7f3)]=this[_0x7f3fe1(0xa71)](this[_0x7f3fe1(0x7f3)],this[_0x7f3fe1(0xf0)],_0xf17a0c,_0x2adec8,_0x47e244);}else this[_0x7f3fe1(0x7f3)]=(this[_0x7f3fe1(0x7f3)]*(_0xf17a0c-0x1)+this[_0x7f3fe1(0xf0)])/_0xf17a0c;this[_0x7f3fe1(0x112)]--;if(this[_0x7f3fe1(0x112)]<=0x0)this[_0x7f3fe1(0x59e)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x59e)]=function(){const _0x18490f=_0x4adfe0;this['_currentAngle']=this['_targetAngle'],this[_0x18490f(0x117)]&&(this[_0x18490f(0xf0)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler['prototype']['isSpinning']=function(){const _0x5ae0da=_0x4adfe0;return this[_0x5ae0da(0x112)]>0x0;},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x316)]=function(){const _0xf7b2a7=_0x4adfe0;if(!this[_0xf7b2a7(0x593)])return;const _0x283502=this['_currentAngle'],_0x2a5226=this[_0xf7b2a7(0xfc)]['x'],_0x142c70=this['_battler']['isActor']()?-0x1:0x1;this['_distortionSprite'][_0xf7b2a7(0xb46)]=_0x283502*_0x2a5226*_0x142c70;const _0x23c6eb=this[_0xf7b2a7(0x593)][_0xf7b2a7(0xfc)]['y'];this[_0xf7b2a7(0x593)]['y']=this[_0xf7b2a7(0x6a1)]*-0.5*(0x2-_0x23c6eb),this[_0xf7b2a7(0x593)]['y']=Math[_0xf7b2a7(0x37b)](this['_distortionSprite']['y']);const _0x1910e5=[this[_0xf7b2a7(0xc9e)],this['_svBattlerSprite'],this[_0xf7b2a7(0x173)]];for(const _0x1822a8 of _0x1910e5){if(_0xf7b2a7(0x800)==='KxmxQ'){if(!_0x1822a8)continue;_0x1822a8['y']=this[_0xf7b2a7(0x6a1)]*0.5;}else{if(this['_targetBattlerKey']===_0xf7b2a7(0x8c6))return!![];if(this['_targetBattlerKey']==='all\x20enemies')return!![];return _0x383d57[_0xf7b2a7(0xa98)][_0xf7b2a7(0x2f1)][_0xf7b2a7(0x61e)](this);}}this[_0xf7b2a7(0xb7f)]&&(this[_0xf7b2a7(0xa6e)]=this[_0xf7b2a7(0xa6e)]??0x1,this['_shadowScaleY']=this[_0xf7b2a7(0x219)]??0x1,this[_0xf7b2a7(0xb7f)][_0xf7b2a7(0xfc)]['x']=this['_distortionSprite'][_0xf7b2a7(0xfc)]['x']*this[_0xf7b2a7(0xa6e)],this[_0xf7b2a7(0xb7f)][_0xf7b2a7(0xfc)]['y']=this['_distortionSprite'][_0xf7b2a7(0xfc)]['y']*this['_shadowScaleY']);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5cb)]=Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x6cc)],Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x6cc)]=function(){const _0x5a2fa2=_0x4adfe0;VisuMZ['BattleCore']['Sprite_Actor_createStateSprite'][_0x5a2fa2(0x61e)](this);if(VisuMZ[_0x5a2fa2(0xa98)][_0x5a2fa2(0x5bc)][_0x5a2fa2(0x1f0)]['ShowActorGauge']){if(_0x5a2fa2(0x282)!==_0x5a2fa2(0xe7))this['createHpGaugeSprite']();else{_0x844db4['prototype'][_0x5a2fa2(0x37a)]['call'](this);const _0x4f8364=this[_0x5a2fa2(0x33e)][_0x5a2fa2(0x245)]();this[_0x5a2fa2(0x6e9)]!==_0x4f8364&&(this[_0x5a2fa2(0x6e9)]=_0x4f8364,this['_mainSprite'][_0x5a2fa2(0x932)]=_0x5481e7[_0x5a2fa2(0xef)](_0x4f8364)),this['_mainSprite']&&this['_mainSprite'][_0x5a2fa2(0x932)]&&this[_0x5a2fa2(0x26e)]&&(this[_0x5a2fa2(0xc9e)][_0x5a2fa2(0x932)]['smooth']!==this[_0x5a2fa2(0x26e)][_0x5a2fa2(0x407)]()&&(this[_0x5a2fa2(0xc9e)]['bitmap'][_0x5a2fa2(0x656)]=this[_0x5a2fa2(0x26e)][_0x5a2fa2(0x407)]()));}}},VisuMZ['BattleCore'][_0x4adfe0(0x3c0)]=Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x36d)],Sprite_Enemy['prototype']['createStateIconSprite']=function(){const _0xf8f188=_0x4adfe0;VisuMZ[_0xf8f188(0xa98)][_0xf8f188(0x5bc)][_0xf8f188(0x1f0)][_0xf8f188(0x3f1)]&&this['createHpGaugeSprite'](),VisuMZ[_0xf8f188(0xa98)][_0xf8f188(0x3c0)][_0xf8f188(0x61e)](this);},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x70b)]=function(){const _0x4629f8=_0x4adfe0;if(!ConfigManager['visualHpGauge'])return;if(this[_0x4629f8(0xab3)]===Sprite_SvEnemy)return;const _0x3c9564=VisuMZ['BattleCore'][_0x4629f8(0x5bc)][_0x4629f8(0x1f0)],_0x384c9d=new Sprite_HpGauge();_0x384c9d[_0x4629f8(0x893)]['x']=_0x3c9564[_0x4629f8(0xa35)],_0x384c9d['anchor']['y']=_0x3c9564['AnchorY'],_0x384c9d[_0x4629f8(0xfc)]['x']=_0x384c9d['scale']['y']=_0x3c9564['Scale'],this[_0x4629f8(0x74a)]=_0x384c9d,this['addChild'](this[_0x4629f8(0x74a)]),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager[_0x4629f8(0x82f)](this[_0x4629f8(0x74a)]);},VisuMZ[_0x4adfe0(0xa98)]['Sprite_Battler_setBattler']=Sprite_Battler['prototype']['setBattler'],Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x6ad)]=function(_0x456833){const _0x47cb03=_0x4adfe0,_0x338efd=this[_0x47cb03(0x26e)];VisuMZ['BattleCore']['Sprite_Battler_setBattler'][_0x47cb03(0x61e)](this,_0x456833),this[_0x47cb03(0x805)](_0x456833);if(_0x338efd!==_0x456833)this[_0x47cb03(0x962)]();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x805)]=function(_0x34c3e2){const _0x181507=_0x4adfe0;if(!_0x34c3e2)return;if(!this['_hpGaugeSprite'])return;if(_0x34c3e2[_0x181507(0x771)]()){}else{if(_0x34c3e2['isEnemy']()){if(_0x181507(0x267)!=='iQCMy')_0x10a2a4['BattleCore'][_0x181507(0x629)][_0x181507(0x61e)](this),this[_0x181507(0x9da)]();else{if(this[_0x181507(0xab3)]===Sprite_SvEnemy&&!_0x34c3e2[_0x181507(0x147)]())return;}}}this[_0x181507(0x74a)][_0x181507(0x9ac)](_0x34c3e2,'hp');},Sprite_Battler[_0x4adfe0(0x6ec)]['hasStaticSvBattler']=function(){const _0x20c713=_0x4adfe0;return this[_0x20c713(0x26e)]&&this['_battler']['hasStaticSvBattler']();},Sprite_Battler[_0x4adfe0(0x6ec)]['updateStaticSvBattlerFrames']=function(){const _0x22fe73=_0x4adfe0,_0x26646d=this[_0x22fe73(0xc9e)][_0x22fe73(0x932)];if(!_0x26646d)return;const _0x1fad67=_0x26646d['width'];let _0x36c8ab=_0x26646d['height'];if(this[_0x22fe73(0x26e)][_0x22fe73(0xc5a)]()){if(this['_frame'])_0x36c8ab=Math[_0x22fe73(0x7a0)](0x0,this[_0x22fe73(0x93d)][_0x22fe73(0x6a1)]-0x4);}this[_0x22fe73(0xc9e)]['setFrame'](0x0,0x0,_0x1fad67,_0x36c8ab),this[_0x22fe73(0xb0f)](0x0,0x0,_0x1fad67,_0x36c8ab);},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x2ad)]=function(){const _0x50c160=_0x4adfe0;if(!this[_0x50c160(0x26e)])return;if(!this[_0x50c160(0x74a)])return;const _0x180389=VisuMZ[_0x50c160(0xa98)][_0x50c160(0x5bc)][_0x50c160(0x1f0)],_0x4d6db7=this[_0x50c160(0x74a)];_0x4d6db7['visible']=this['isVisualHpGaugeDisplayed']();const _0x360d5a=_0x180389[_0x50c160(0x909)],_0x246f14=_0x180389[_0x50c160(0x116)];_0x4d6db7['x']=_0x360d5a,_0x4d6db7['x']+=this[_0x50c160(0x26e)][_0x50c160(0xc18)](),_0x4d6db7['y']=-this['height']+_0x246f14,_0x4d6db7['y']+=this['_battler']['battleUIOffsetY'](),Spriteset_Battle[_0x50c160(0xcae)]&&SceneManager[_0x50c160(0x726)][_0x50c160(0x898)]&&(_0x4d6db7['x']+=this['x'],_0x4d6db7['y']+=this['y']);},Sprite_Battler[_0x4adfe0(0x6ec)]['isVisualHpGaugeDisplayed']=function(){const _0x35a77e=_0x4adfe0;if(!this[_0x35a77e(0x26e)])return![];if(this[_0x35a77e(0x26e)][_0x35a77e(0x771)]())return!![];if(this[_0x35a77e(0x26e)][_0x35a77e(0x44a)]())return![];if(this[_0x35a77e(0x2c6)]<=0x0)return![];const _0x341143=this['_battler'][_0x35a77e(0x85f)]()['note'];if(_0x341143['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x341143['match'](/<HIDE HP GAUGE>/i))return![];const _0x1e810c=VisuMZ[_0x35a77e(0xa98)]['Settings'][_0x35a77e(0x1f0)];if(_0x1e810c[_0x35a77e(0x3d1)]){if(_0x1e810c[_0x35a77e(0x900)]&&BattleManager['isBattleTest']())return!![];if(this[_0x35a77e(0x26e)][_0x35a77e(0x46c)])return![];return this[_0x35a77e(0x26e)][_0x35a77e(0xb49)]();}return!![];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x188)]=Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x164)],Sprite_Battler['prototype']['isMoving']=function(){const _0x10ed54=_0x4adfe0;if(!this[_0x10ed54(0x26e)])return![];if(this[_0x10ed54(0x2d9)]>0x0)return!![];return VisuMZ['BattleCore']['Sprite_Battler_isMoving'][_0x10ed54(0x61e)](this);},VisuMZ['BattleCore'][_0x4adfe0(0x449)]=Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x1d2)],Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x1d2)]=function(_0x6500c3,_0x496700,_0x285818){const _0x21ac99=_0x4adfe0;if(this['canMove']()){if(_0x21ac99(0xb8c)!==_0x21ac99(0x8d4))VisuMZ[_0x21ac99(0xa98)][_0x21ac99(0x449)]['call'](this,_0x6500c3,_0x496700,_0x285818);else{_0x2d45a6[_0x21ac99(0x4ab)]()&&_0x502aec['length']>0x1&&this[_0x21ac99(0x85b)]('pageup',this['selectAllEnemies'][_0x21ac99(0xb0e)](this));if(_0x55e78a['isForAnyone']()){const _0x1b3b46=_0x4650a1['aliveMembers']();_0x12ac51=_0x255135['concat'](_0x1b3b46),_0x139fe7[_0x21ac99(0x4ab)]()&&_0x1b3b46['length']>0x1&&this['setHandler'](_0x21ac99(0x891),this[_0x21ac99(0x668)][_0x21ac99(0xb0e)](this));}}}},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x418)]=function(){const _0x3d66ae=_0x4adfe0;if(this[_0x3d66ae(0x26e)]&&this['_battler'][_0x3d66ae(0xc5a)]())return![];if(this[_0x3d66ae(0x26e)]&&!this[_0x3d66ae(0x26e)]['canBattlerMove']())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xabb)]=function(){},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x156)]=function(){const _0x12b25a=_0x4adfe0;this[_0x12b25a(0x1d2)](0x0,0x0,0xc);},Sprite_Battler['prototype'][_0x4adfe0(0x1cc)]=function(){},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0x3e7)]=function(){const _0x56841f=_0x4adfe0,_0xa7be73=VisuMZ[_0x56841f(0xa98)][_0x56841f(0x5bc)][_0x56841f(0x2e2)],_0x5e80bd=this[_0x56841f(0x26e)]&&this[_0x56841f(0x26e)][_0x56841f(0x771)]()?0x1:-0x1,_0x503a9f=this['_baseX']-this[_0x56841f(0xc0d)]+_0x5e80bd*_0xa7be73[_0x56841f(0xb6d)],_0x1079c0=this[_0x56841f(0x984)]-this['_homeY']+_0x5e80bd*_0xa7be73[_0x56841f(0x58d)],_0x4cadc0=_0xa7be73['FlinchDuration'];this[_0x56841f(0x1d2)](_0x503a9f,_0x1079c0,_0x4cadc0);},Sprite_Battler[_0x4adfe0(0x6ec)][_0x4adfe0(0xb90)]=function(_0x4c1c30,_0x19307e){const _0x1bbc1d=_0x4adfe0,_0x165680=VisuMZ['BattleCore'][_0x1bbc1d(0x5bc)][_0x1bbc1d(0x2e2)];this[_0x1bbc1d(0xb29)]=Math[_0x1bbc1d(0x37b)]((_0x165680[_0x1bbc1d(0xce5)]??0x18)*_0x19307e),this[_0x1bbc1d(0x775)]=Math[_0x1bbc1d(0x7a0)](this[_0x1bbc1d(0x775)],_0x4c1c30);},Sprite_Battler['prototype']['updateShakeFlinch']=function(){const _0x447c47=_0x4adfe0,_0xa8a791=VisuMZ[_0x447c47(0xa98)][_0x447c47(0x5bc)]['Actor'];if(!(_0xa8a791[_0x447c47(0x46e)]??![]))return;if(this[_0x447c47(0xb29)]>0x0){const _0x390930=this[_0x447c47(0xb29)];this[_0x447c47(0x775)]=this['_shakeFlinchPower']*(_0x390930-0x1)/_0x390930,this[_0x447c47(0xb29)]--;if(this[_0x447c47(0xb29)]<=0x0){if(_0x447c47(0xb25)===_0x447c47(0xb25))this[_0x447c47(0x775)]=0x0;else{const _0xefac92=_0x3729b9[_0x447c47(0xc28)],_0x5393b0=_0x447c47(0x2c2);this[_0x447c47(0x3bc)](_0xefac92,_0x5393b0);}}}this[_0x447c47(0x775)]>0x0?(this[_0x447c47(0xc9e)]['x']=Math[_0x447c47(0xc05)](this['_shakeFlinchPower'])*(Math[_0x447c47(0x256)]()<0.5?-0x1:0x1),this[_0x447c47(0x984)]!==this['y']&&(this[_0x447c47(0xc9e)]['y']=this[_0x447c47(0x6a1)]*0.5,this[_0x447c47(0xc9e)]['y']+=Math[_0x447c47(0xc05)](this['_shakeFlinchPower'])*(Math[_0x447c47(0x256)]()<0.5?-0x1:0x1))):(this[_0x447c47(0xc9e)]['x']=0x0,this[_0x447c47(0xc9e)]['y']=this[_0x447c47(0x6a1)]*0.5);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x527)]=Sprite_Actor['prototype'][_0x4adfe0(0x7d4)],Sprite_Actor['prototype']['initMembers']=function(){const _0xa116f0=_0x4adfe0;VisuMZ['BattleCore'][_0xa116f0(0x527)]['call'](this),this[_0xa116f0(0x3f8)]();},Sprite_Actor[_0x4adfe0(0x6ec)]['mainSprite']=function(){const _0x433502=_0x4adfe0;return this[_0x433502(0x593)]||this[_0x433502(0xc9e)]||this;},VisuMZ['BattleCore'][_0x4adfe0(0x804)]=Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xbfe)],Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xbfe)]=function(){},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x566)]=function(_0x3d05a0){const _0x5c95ff=_0x4adfe0;if(SceneManager[_0x5c95ff(0x18a)]())return;if(!_0x3d05a0)return;if(!_0x3d05a0[_0x5c95ff(0x418)]())return;VisuMZ[_0x5c95ff(0xa98)]['Sprite_Actor_moveToStartPosition']['call'](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x229)]=Sprite_Actor[_0x4adfe0(0x6ec)]['setActorHome'],Sprite_Actor['prototype'][_0x4adfe0(0xbde)]=function(_0x437304){const _0x335818=_0x4adfe0;if(VisuMZ['BattleCore']['Settings']['Actor'][_0x335818(0x875)])_0x335818(0x41c)!==_0x335818(0x41c)?_0x577f0f[_0x335818(0x48b)][_0x335818(0x186)](_0x3160c2):VisuMZ[_0x335818(0xa98)][_0x335818(0x5bc)]['Actor']['HomePosJS'][_0x335818(0x61e)](this,_0x437304);else{if(_0x335818(0x72f)!=='HznLS')VisuMZ[_0x335818(0xa98)][_0x335818(0x229)]['call'](this,_0x437304);else{if(!_0x534c4c[_0x335818(0xcfa)]())return;const _0x26278a=_0x3151aa[_0x335818(0x781)]();if(!_0x26278a)return;_0x26278a[_0x335818(0x98c)]('battleInjectAni');}}},VisuMZ[_0x4adfe0(0xa98)]['Sprite_Actor_setBattler']=Sprite_Actor[_0x4adfe0(0x6ec)]['setBattler'],Sprite_Actor[_0x4adfe0(0x6ec)]['setBattler']=function(_0x45cf67){const _0x2ed36d=_0x4adfe0;VisuMZ['BattleCore'][_0x2ed36d(0x6cf)]['call'](this,_0x45cf67),this[_0x2ed36d(0xce7)](_0x45cf67);},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xce7)]=function(_0x2d221d){const _0xcfa946=_0x4adfe0;if(!_0x2d221d)return;if(!this[_0xcfa946(0xc9e)])return;this[_0xcfa946(0xc9e)][_0xcfa946(0x893)]['x']=this[_0xcfa946(0x33e)][_0xcfa946(0xa74)](),this[_0xcfa946(0xc9e)][_0xcfa946(0x893)]['y']=this[_0xcfa946(0x33e)][_0xcfa946(0x5e8)](),this[_0xcfa946(0x76c)]();},VisuMZ['BattleCore'][_0x4adfe0(0x2d0)]=Sprite_Actor[_0x4adfe0(0x6ec)]['update'],Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e6)]=function(){const _0x2ddbe6=_0x4adfe0;VisuMZ[_0x2ddbe6(0xa98)]['Sprite_Actor_update'][_0x2ddbe6(0x61e)](this),this[_0x2ddbe6(0x33e)]&&(this['updateStateSprite'](),this[_0x2ddbe6(0xba3)]());},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x93b)]=Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x37a)],Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x37a)]=function(){const _0x45792d=_0x4adfe0;VisuMZ[_0x45792d(0xa98)]['Sprite_Actor_updateBitmap']['call'](this);if(this['_mainSprite']&&this['_mainSprite'][_0x45792d(0x932)]&&this[_0x45792d(0x26e)]){if(this[_0x45792d(0xc9e)][_0x45792d(0x932)][_0x45792d(0x656)]!==this['_battler'][_0x45792d(0x407)]()){if('WwyFh'==='ILLKW'){if(!_0x1753f2['isSceneBattle']())return;_0x59612a[_0x45792d(0x360)](_0x3d263a,_0xec842a);const _0x4b6d7b=_0x3dfa96[_0x45792d(0x5a6)];_0x2077fb[_0x45792d(0x726)][_0x45792d(0xb28)](_0x4b6d7b);}else this[_0x45792d(0xc9e)][_0x45792d(0x932)][_0x45792d(0x656)]=this['_battler'][_0x45792d(0x407)]();}}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x3ab)]=Sprite_Actor[_0x4adfe0(0x6ec)]['updateShadow'],Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x75d)]=function(){const _0x378dcf=_0x4adfe0;VisuMZ[_0x378dcf(0xa98)]['Sprite_Actor_updateShadow']['call'](this),this[_0x378dcf(0x988)]();},Sprite_Actor['prototype'][_0x4adfe0(0x988)]=function(){const _0x15f376=_0x4adfe0;if(!this[_0x15f376(0xc9e)])return;if(!this['_shadowSprite'])return;this[_0x15f376(0x76c)](),this['updateShadowPosition']();},Sprite_Actor[_0x4adfe0(0x6ec)]['updateStateSprite']=function(){const _0x523f4e=_0x4adfe0;this['_stateSprite']['scale']['x']=0x1/(this[_0x523f4e(0xfc)]['x']||0.001),this[_0x523f4e(0x381)][_0x523f4e(0xfc)]['y']=0x1/(this[_0x523f4e(0xfc)]['y']||0.001);},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xba3)]=function(){const _0x5e0b58=_0x4adfe0;if(!$gameSystem['isSideView']()&&this['constructor']===Sprite_Actor){const _0x4e064b=Scene_Battle[_0x5e0b58(0x6ec)][_0x5e0b58(0xca7)]();['default',_0x5e0b58(0xc26),_0x5e0b58(0xcac),'border'][_0x5e0b58(0x5d0)](_0x4e064b)&&(this[_0x5e0b58(0x2c6)]=0x0);}},Sprite_Actor[_0x4adfe0(0x6ec)]['refreshMotion']=function(){const _0x3fe517=_0x4adfe0,_0x1effa4=this['_actor'];if(_0x1effa4){const _0x593afa=_0x1effa4[_0x3fe517(0xc20)]();if(_0x1effa4['isInputting']()||_0x1effa4[_0x3fe517(0x1d9)]()){if('thAcC'===_0x3fe517(0x881)){if(!_0x3098c7[_0x3fe517(0x445)])return;const _0xbb610f=_0x60804d['_scene']['_spriteset'];if(!_0xbb610f)return;if(_0x2707ae['ActSeqImpact'][_0x3fe517(0xcc9)]<=1.04){_0x6e1e04('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x29dd64[_0x3fe517(0x162)]();return;}_0x1900f2[_0x3fe517(0x360)](_0x156f18,_0x4d95d2);const _0x9fdae0=_0x192ae2['Enable'];_0xbb610f[_0x3fe517(0x353)](_0x9fdae0);}else this[_0x3fe517(0xafe)](_0x3fe517(0x526));}else{if(_0x593afa===0x3){if('CjwgU'===_0x3fe517(0xc23)){if(!this[_0x3fe517(0x943)]())return;if(!this[_0x3fe517(0x815)])this[_0x3fe517(0x5ec)]();this[_0x3fe517(0x63c)](),this['updateBorderSprite']();}else this[_0x3fe517(0xafe)](_0x3fe517(0x539));}else{if(_0x593afa===0x2)'eXAGj'==='eXAGj'?this[_0x3fe517(0xafe)](_0x3fe517(0xb43)):_0xe2c933+=_0x41753a;else{if(this[_0x3fe517(0xb2d)])_0x3fe517(0x215)===_0x3fe517(0x215)?this[_0x3fe517(0xafe)]('escape'):_0x3f6618[_0x3fe517(0x48b)][_0x3fe517(0x6e8)]()[_0x3fe517(0x795)](_0x536104);else{if(_0x1effa4[_0x3fe517(0x51c)]())this[_0x3fe517(0xafe)](_0x3fe517(0x733));else{if(_0x1effa4[_0x3fe517(0x749)]())this[_0x3fe517(0xafe)](_0x3fe517(0x833));else{if(_0x1effa4[_0x3fe517(0x997)]()||_0x1effa4[_0x3fe517(0x508)]()){if(_0x3fe517(0x32a)==='CFPvx'){const _0x1dfabb=_0x4a42da(_0x597f77['$1']);this[_0x3fe517(0x339)](_0x1dfabb);}else this[_0x3fe517(0xafe)](_0x3fe517(0x664));}else{if(_0x593afa===0x1)this[_0x3fe517(0xafe)](_0x3fe517(0xb47));else{if(_0x1effa4[_0x3fe517(0x683)]())_0x3fe517(0x31e)!==_0x3fe517(0xa4a)?this['startMotion'](_0x3fe517(0x270)):_0x17bf63[_0x3fe517(0xa98)][_0x3fe517(0x4a6)][_0x3fe517(0x61e)](this);else{if(_0x1effa4[_0x3fe517(0x68a)]()){if(_0x3fe517(0x374)!==_0x3fe517(0x78c))this[_0x3fe517(0xafe)](_0x3fe517(0x526));else return this['getBattlePortrait']();}else _0x1effa4[_0x3fe517(0x144)]()?this[_0x3fe517(0xafe)](_0x3fe517(0x733)):_0x3fe517(0x26c)!==_0x3fe517(0x26c)?(_0x14f8db[_0x3fe517(0xa98)]['Scene_Battle_startActorCommandSelection'][_0x3fe517(0x61e)](this),_0x514549[_0x3fe517(0xaf5)]()&&_0x48c227[_0x3fe517(0x57c)]&&(_0x2446d0[_0x3fe517(0x57c)]=![],this[_0x3fe517(0x446)]())):this[_0x3fe517(0xafe)](_0x3fe517(0x526));}}}}}}}}}}},Sprite_Actor['prototype'][_0x4adfe0(0x1cc)]=function(){const _0x349caa=_0x4adfe0,_0x1be6eb=0xa,_0x2034ea=0x12c*_0x1be6eb,_0x252ec4=0x1e*_0x1be6eb;this[_0x349caa(0x1d2)](_0x2034ea,0x0,_0x252ec4);},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x820)]=function(){const _0xf593b=_0x4adfe0;Sprite_Battler['prototype'][_0xf593b(0x820)][_0xf593b(0x61e)](this);},Sprite_Actor['prototype'][_0x4adfe0(0xb5a)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon['prototype'][_0x4adfe0(0x9bd)]=function(){const _0x48fe2f=_0x4adfe0;return Sprite_Battler[_0x48fe2f(0x9ab)];},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x4e1)]=function(){},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xb67)]=function(){},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x8c5)]=function(){const _0x174e25=_0x4adfe0;if(this[_0x174e25(0xcfc)]&&++this[_0x174e25(0x966)]>=this[_0x174e25(0xb5a)]()){if(this[_0x174e25(0xcfc)][_0x174e25(0xa9b)])this['_pattern']=(this[_0x174e25(0x433)]+0x1)%0x4;else{if(this[_0x174e25(0x433)]<0x2)this[_0x174e25(0x433)]++;else{if('bpEht'!==_0x174e25(0x3a8))this['refreshMotion']();else return _0x31c0f2['BattleCore']['Settings'][_0x174e25(0x2e2)][_0x174e25(0xb50)];}}this[_0x174e25(0x966)]=0x0;}},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x995)]=function(_0x26633b){const _0x21ae1a=_0x4adfe0;if(_0x26633b===_0x21ae1a(0xcc4))this[_0x21ae1a(0x63a)]=!![];if(this[_0x21ae1a(0x26e)]&&this[_0x21ae1a(0x26e)]['isDead']()){this[_0x21ae1a(0xcfc)]=Sprite_Actor['MOTIONS'][_0x21ae1a(0x539)];return;}const _0x425836=Sprite_Actor[_0x21ae1a(0x7d5)][_0x26633b];this[_0x21ae1a(0xcfc)]=_0x425836,this[_0x21ae1a(0x966)]=0x0,this[_0x21ae1a(0x433)]=0x0;},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x759)]=function(_0x3b3221){const _0xea7e1c=_0x4adfe0;if(this[_0xea7e1c(0x30d)]())return;this[_0xea7e1c(0x2f4)](),this['_weaponSprite'][_0xea7e1c(0x9ac)](_0x3b3221),this[_0xea7e1c(0x33e)][_0xea7e1c(0x9fd)]();},Sprite_Actor[_0x4adfe0(0x6ec)]['adjustWeaponSpriteOffset']=function(){const _0x21eced=_0x4adfe0;let _0x314e6f=-0x10,_0x4fadfe=this['height']*0.5;const _0x254444=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x4dc7e1=this[_0x21eced(0x26e)][_0x21eced(0xb13)]()[_0x21eced(0x2f7)](_0x5a6789=>_0x5a6789&&_0x5a6789['note'][_0x21eced(0x634)](_0x254444)?Number(RegExp['$1']):0x0),_0x4e23d2=this[_0x21eced(0x26e)][_0x21eced(0xb13)]()[_0x21eced(0x2f7)](_0x5d4cc0=>_0x5d4cc0&&_0x5d4cc0[_0x21eced(0x15d)][_0x21eced(0x634)](_0x254444)?Number(RegExp['$2']):0x0);_0x314e6f=_0x4dc7e1['reduce']((_0x2f4827,_0x5706a3)=>_0x2f4827+_0x5706a3,_0x314e6f),_0x4fadfe=_0x4e23d2[_0x21eced(0x127)]((_0x4b0890,_0x3e958c)=>_0x4b0890+_0x3e958c,_0x4fadfe),this[_0x21eced(0x228)]['x']=_0x314e6f,this['_weaponSprite']['y']=_0x4fadfe,this[_0x21eced(0x228)]['update']();},Sprite_Weapon[_0x4adfe0(0x6ec)][_0x4adfe0(0x9ac)]=function(_0x383860){const _0x3659b3=_0x4adfe0;this[_0x3659b3(0x841)]=_0x383860,this[_0x3659b3(0xac6)]=-0x1,this[_0x3659b3(0x433)]=0x0,this['loadBitmap'](),this[_0x3659b3(0x513)]();},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xab2)]=function(){},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0xabb)]=function(){const _0x1523dc=_0x4adfe0,_0x1c8c1c=VisuMZ[_0x1523dc(0xa98)][_0x1523dc(0x5bc)][_0x1523dc(0x5f6)],_0x5ea5a5=_0x1c8c1c[_0x1523dc(0x858)],_0x1b0a3d=_0x1c8c1c[_0x1523dc(0x6b1)],_0x56fac1=_0x1c8c1c[_0x1523dc(0x484)];this[_0x1523dc(0x1d2)](-_0x5ea5a5,-_0x1b0a3d,_0x56fac1);},VisuMZ['BattleCore'][_0x4adfe0(0xcf6)]=Sprite_Actor['prototype']['updateFrame'],Sprite_Actor['prototype'][_0x4adfe0(0x513)]=function(){const _0x299ea7=_0x4adfe0;this[_0x299ea7(0x30d)]()?this[_0x299ea7(0x49b)]():_0x299ea7(0xc02)==='GJRvl'?(this[_0x299ea7(0x412)](),VisuMZ[_0x299ea7(0xa98)][_0x299ea7(0xcf6)][_0x299ea7(0x61e)](this)):_0x2bd197[_0x299ea7(0xa98)]['Sprite_Actor_setActorHome'][_0x299ea7(0x61e)](this,_0x1f31cd);},Sprite_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x412)]=function(){const _0x173712=_0x4adfe0;if(this[_0x173712(0x26e)]&&this[_0x173712(0x26e)][_0x173712(0x1fe)]){if(_0x173712(0x50a)!==_0x173712(0x50a))_0x3a664c['BattleCore'][_0x173712(0x7d7)][_0x173712(0x61e)](this);else{const _0x2e1626=this[_0x173712(0x26e)][_0x173712(0x1fe)];this[_0x173712(0xcfc)]=Sprite_Actor[_0x173712(0x7d5)][_0x2e1626['motionType']],this[_0x173712(0x433)]=_0x2e1626[_0x173712(0x491)];const _0x58b67b=this[_0x173712(0x228)];_0x58b67b[_0x173712(0x64d)](_0x2e1626[_0x173712(0x46a)],_0x2e1626[_0x173712(0x491)]),this['adjustWeaponSpriteOffset']();}}},Sprite_Weapon['prototype'][_0x4adfe0(0x64d)]=function(_0x23a389,_0x36ea2f){const _0x5f5784=_0x4adfe0;this[_0x5f5784(0x841)]=_0x23a389,this['_animationCount']=-Infinity,this[_0x5f5784(0x433)]=_0x36ea2f,this[_0x5f5784(0xac5)](),this['updateFrame']();},Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x7d4)]=function(){const _0x5b995f=_0x4adfe0;Sprite_Battler[_0x5b995f(0x6ec)][_0x5b995f(0x7d4)][_0x5b995f(0x61e)](this),this[_0x5b995f(0x237)]=null,this['_appeared']=![],this[_0x5b995f(0x6e9)]='',this[_0x5b995f(0x7fb)]=0x0,this['_effectType']=null,this[_0x5b995f(0x9d4)]=0x0,this[_0x5b995f(0x657)]=0x0,this[_0x5b995f(0xade)](),this['createStateIconSprite']();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x64a)]=Sprite_Enemy[_0x4adfe0(0x6ec)]['update'],Sprite_Enemy[_0x4adfe0(0x6ec)]['update']=function(){const _0x48eb39=_0x4adfe0;VisuMZ['BattleCore'][_0x48eb39(0x64a)][_0x48eb39(0x61e)](this),this[_0x48eb39(0x76c)]();},Sprite_Enemy[_0x4adfe0(0x6ec)]['createMainSprite']=function(){const _0x3273d8=_0x4adfe0;this[_0x3273d8(0xc9e)]=new Sprite(),this[_0x3273d8(0xc9e)][_0x3273d8(0x893)]['x']=0.5,this['_mainSprite'][_0x3273d8(0x893)]['y']=0x1,this[_0x3273d8(0x607)](this[_0x3273d8(0xc9e)]),this[_0x3273d8(0x3f8)]();},Sprite_Enemy[_0x4adfe0(0x6ec)]['mainSprite']=function(){const _0x5a9bef=_0x4adfe0;return this[_0x5a9bef(0x593)]||this[_0x5a9bef(0xc9e)]||this;},Sprite_Enemy[_0x4adfe0(0x6ec)]['loadBitmap']=function(_0x2be206){const _0x20e3f0=_0x4adfe0;this[_0x20e3f0(0x932)]=new Bitmap(0x1,0x1);if(this[_0x20e3f0(0x147)]()){if(_0x20e3f0(0x736)!==_0x20e3f0(0x89f)){const _0x279744=this[_0x20e3f0(0x237)][_0x20e3f0(0x848)]();this[_0x20e3f0(0x932)]=new Bitmap(_0x279744[_0x20e3f0(0x1e2)],_0x279744[_0x20e3f0(0x6a1)]),this[_0x20e3f0(0xc9e)][_0x20e3f0(0x932)]=new Bitmap(0x1,0x1);}else{if(this[_0x20e3f0(0xab3)]===_0x4b7a26&&!_0x5de3a2[_0x20e3f0(0x147)]())return;}}else{if($gameSystem['isSideView']()){if('UjlWE'===_0x20e3f0(0x191)){const _0x1a3bc3=ImageManager[_0x20e3f0(0x33f)](_0x2be206);_0x1a3bc3[_0x20e3f0(0x5c5)](this['onStaticEnemyBitmapLoad'][_0x20e3f0(0xb0e)](this,_0x1a3bc3));}else this['_battleField']['addChild'](this[_0x20e3f0(0x347)]);}else{const _0x5a189d=ImageManager['loadEnemy'](_0x2be206);_0x5a189d[_0x20e3f0(0x5c5)](this[_0x20e3f0(0x982)][_0x20e3f0(0xb0e)](this,_0x5a189d));}}},Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x982)]=function(_0x242943){const _0x4715eb=_0x4adfe0;this['_mainSprite'][_0x4715eb(0x932)]=_0x242943,this['bitmap']=new Bitmap(_0x242943[_0x4715eb(0x1e2)],_0x242943['height']);},VisuMZ['BattleCore'][_0x4adfe0(0x98d)]=Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x2f8)],Sprite_Enemy['prototype'][_0x4adfe0(0x2f8)]=function(_0x46e85d){const _0x439f4c=_0x4adfe0;if(this[_0x439f4c(0xc9e)]){if(_0x439f4c(0x346)!==_0x439f4c(0x96e))this[_0x439f4c(0xc9e)][_0x439f4c(0x2f8)](_0x46e85d);else{if(!this[_0x439f4c(0x8c0)]())return![];return _0x3425f7['BattleCore']['Game_BattlerBase_canGuard'][_0x439f4c(0x61e)](this);}}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x693)]=Sprite_Enemy['prototype']['initVisibility'],Sprite_Enemy['prototype']['initVisibility']=function(){const _0x22076b=_0x4adfe0;this[_0x22076b(0x58c)]()?VisuMZ[_0x22076b(0xa98)][_0x22076b(0x693)]['call'](this):'Zxtyd'===_0x22076b(0x8e9)?this['_phase']='action':(this[_0x22076b(0xac9)]=!this[_0x22076b(0x237)][_0x22076b(0x44a)](),!this[_0x22076b(0xac9)]&&(_0x22076b(0x6a4)===_0x22076b(0x6a4)?this['opacity']=0x0:_0x2051d9+=_0x11f09c['iconWidth']));},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x44e)]=Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x86a)],Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x86a)]=function(){const _0x24a666=_0x4adfe0;if(this['allowCollapse']())VisuMZ[_0x24a666(0xa98)][_0x24a666(0x44e)][_0x24a666(0x61e)](this);},Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x513)]=function(){const _0xb8ea9c=_0x4adfe0;Sprite_Battler[_0xb8ea9c(0x6ec)][_0xb8ea9c(0x513)][_0xb8ea9c(0x61e)](this);const _0x18a3d2=this[_0xb8ea9c(0xa3f)]()||this;if(!_0x18a3d2)return;!_0x18a3d2[_0xb8ea9c(0x932)]&&(_0xb8ea9c(0x14a)!==_0xb8ea9c(0x560)?_0x18a3d2['bitmap']=new Bitmap(this[_0xb8ea9c(0x1e2)],this[_0xb8ea9c(0x6a1)]):_0x539df8[_0xb8ea9c(0xabf)]()),this['_effectType']==='bossCollapse'?this[_0xb8ea9c(0xc9e)][_0xb8ea9c(0xb0f)](0x0,0x0,this['_mainSprite'][_0xb8ea9c(0x1e2)],this['_effectDuration']):'BbXPF'===_0xb8ea9c(0x86e)?_0x3740dd[_0xb8ea9c(0xa1a)]=_0x536b19[_0xb8ea9c(0x1e3)](_0x154d91['$1']):_0x18a3d2[_0xb8ea9c(0xb0f)](0x0,0x0,_0x18a3d2[_0xb8ea9c(0x932)][_0xb8ea9c(0x1e2)],this[_0xb8ea9c(0x932)][_0xb8ea9c(0x6a1)]);},VisuMZ['BattleCore'][_0x4adfe0(0x3fc)]=Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xbc7)],Sprite_Enemy[_0x4adfe0(0x6ec)]['updateBossCollapse']=function(){const _0x4b182a=_0x4adfe0;if(this[_0x4b182a(0x58c)]())VisuMZ[_0x4b182a(0xa98)]['Sprite_Enemy_updateBossCollapse'][_0x4b182a(0x61e)](this);},Sprite_Enemy['prototype']['isMoving']=function(){const _0x26493f=_0x4adfe0;return Sprite_Battler[_0x26493f(0x6ec)][_0x26493f(0x164)]['call'](this);},VisuMZ['BattleCore'][_0x4adfe0(0x629)]=Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x704)],Sprite_Enemy['prototype'][_0x4adfe0(0x704)]=function(){const _0xea35ac=_0x4adfe0;VisuMZ[_0xea35ac(0xa98)][_0xea35ac(0x629)][_0xea35ac(0x61e)](this),this[_0xea35ac(0x9da)]();},Sprite_Enemy[_0x4adfe0(0x6ec)]['updateStateSpriteBattleCore']=function(){const _0x1b8eee=_0x4adfe0,_0x4563cb=VisuMZ['BattleCore'][_0x1b8eee(0x5bc)][_0x1b8eee(0x30b)];if(_0x4563cb['NameAttachStateIcon']&&!_0x4563cb['NameLegacy']){this[_0x1b8eee(0xb60)][_0x1b8eee(0x2c6)]=0x0;return;}this[_0x1b8eee(0xb60)]['x']=0x0,this['_stateIconSprite']['x']+=this['_battler'][_0x1b8eee(0xc18)](),this[_0x1b8eee(0xb60)]['y']=-this['bitmap'][_0x1b8eee(0x6a1)]-this['_stateIconSprite'][_0x1b8eee(0x6a1)]-0x4,this[_0x1b8eee(0xb60)]['y']+=this[_0x1b8eee(0x26e)][_0x1b8eee(0x27b)](),this['_stateIconSprite']['scale']['x']=0x1/(this[_0x1b8eee(0xfc)]['x']||0.001),this[_0x1b8eee(0xb60)]['scale']['y']=0x1/(this[_0x1b8eee(0xfc)]['y']||0.001),this['hasSvBattler']()&&(this[_0x1b8eee(0x671)]['_stateSprite'][_0x1b8eee(0xfc)]['x']=-0x1/(this[_0x1b8eee(0xfc)]['x']||0.001),this[_0x1b8eee(0x671)][_0x1b8eee(0x381)][_0x1b8eee(0xfc)]['y']=0x1/(this[_0x1b8eee(0xfc)]['y']||0.001));},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x292)]=Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x6ad)],Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x6ad)]=function(_0x335d2a){const _0x703aa0=_0x4adfe0;VisuMZ[_0x703aa0(0xa98)][_0x703aa0(0x292)][_0x703aa0(0x61e)](this,_0x335d2a),this[_0x703aa0(0x8aa)](_0x335d2a);},Sprite_Enemy['prototype'][_0x4adfe0(0x8aa)]=function(_0x526746){const _0x2b2b5a=_0x4adfe0;!this[_0x2b2b5a(0x671)]&&(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x526746),this['attachSpritesToDistortionSprite']()),this[_0x2b2b5a(0x671)][_0x2b2b5a(0x6ad)](_0x526746);},Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x147)]=function(){const _0x23df01=_0x4adfe0;return this[_0x23df01(0x237)]&&this['_enemy'][_0x23df01(0x147)]();},Sprite_Enemy[_0x4adfe0(0x6ec)]['allowCollapse']=function(){const _0x52bea9=_0x4adfe0;return this[_0x52bea9(0x147)]()?this[_0x52bea9(0x237)][_0x52bea9(0x58c)]():!![];},Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x7e9)]=function(){const _0x3fc959=_0x4adfe0;this[_0x3fc959(0x147)]()&&this[_0x3fc959(0x671)][_0x3fc959(0x7e9)]();},Sprite_Enemy['prototype'][_0x4adfe0(0x995)]=function(_0x528659){const _0x4f9d10=_0x4adfe0;if(this[_0x4f9d10(0x147)]())this[_0x4f9d10(0x671)]['forceMotion'](_0x528659);},Sprite_Enemy['prototype']['forceWeaponAnimation']=function(_0x3fe15e){const _0x3d1c18=_0x4adfe0;if(this[_0x3d1c18(0x147)]())this[_0x3d1c18(0x671)][_0x3d1c18(0x759)](_0x3fe15e);},Sprite_Enemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xabb)]=function(){const _0xc9e1e2=_0x4adfe0,_0x4baf28=VisuMZ[_0xc9e1e2(0xa98)]['Settings']['ActionSequence'],_0x4468e1=_0x4baf28[_0xc9e1e2(0x858)],_0x432f03=_0x4baf28[_0xc9e1e2(0x6b1)],_0x2503fc=_0x4baf28[_0xc9e1e2(0x484)];this[_0xc9e1e2(0x1d2)](_0x4468e1,_0x432f03,_0x2503fc);};function Sprite_SvEnemy(){const _0x4e5fe1=_0x4adfe0;this[_0x4e5fe1(0xb7d)](...arguments);}Sprite_SvEnemy['prototype']=Object['create'](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xab3)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x4adfe0(0x6ec)]['initialize']=function(_0x16001f){const _0x2a4ec0=_0x4adfe0;Sprite_Actor[_0x2a4ec0(0x6ec)]['initialize'][_0x2a4ec0(0x61e)](this,_0x16001f),this[_0x2a4ec0(0xfc)]['x']=-0x1,this[_0x2a4ec0(0x381)]['scale']['x']=-0x1;},Sprite_SvEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x82b)]=function(){},Sprite_SvEnemy[_0x4adfe0(0x6ec)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xbde)]=function(_0x92a6){},Sprite_SvEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x75d)]=function(){},Sprite_SvEnemy[_0x4adfe0(0x6ec)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x704)]=function(){const _0x18a77b=_0x4adfe0;this[_0x18a77b(0x381)][_0x18a77b(0x415)]=![];},Sprite_SvEnemy['prototype'][_0x4adfe0(0x37a)]=function(){const _0x331857=_0x4adfe0;Sprite_Battler[_0x331857(0x6ec)][_0x331857(0x37a)]['call'](this);const _0x1f1d5b=this[_0x331857(0x33e)][_0x331857(0x245)]();this[_0x331857(0x6e9)]!==_0x1f1d5b&&(_0x331857(0xbc5)!=='cThIW'?(this[_0x331857(0x469)](_0x331857(0xbea)),_0x5d39fe[_0x331857(0xa98)]['Game_Battler_startTpbTurn'][_0x331857(0x61e)](this),this[_0x331857(0x469)](_0x331857(0x183))):(this['_battlerName']=_0x1f1d5b,this[_0x331857(0xc9e)][_0x331857(0x932)]=ImageManager['loadSvActor'](_0x1f1d5b))),this[_0x331857(0xc9e)]&&this[_0x331857(0xc9e)]['bitmap']&&this[_0x331857(0x26e)]&&(this['_mainSprite'][_0x331857(0x932)][_0x331857(0x656)]!==this[_0x331857(0x26e)][_0x331857(0x407)]()&&(this[_0x331857(0xc9e)][_0x331857(0x932)][_0x331857(0x656)]=this[_0x331857(0x26e)][_0x331857(0x407)]()));},Sprite_SvEnemy['prototype'][_0x4adfe0(0x1cc)]=function(){},Sprite_SvEnemy[_0x4adfe0(0x6ec)]['startMove']=function(_0x22c316,_0x308522,_0x24e3ff){const _0x222464=_0x4adfe0;if(this[_0x222464(0x812)])this['parent'][_0x222464(0x1d2)](_0x22c316,_0x308522,_0x24e3ff);},Sprite_SvEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x7e9)]=function(){const _0x546863=_0x4adfe0,_0x37bf54=this[_0x546863(0x33e)];if(_0x37bf54){const _0x2676c3=_0x37bf54['stateMotionIndex']();if(_0x37bf54['isInputting']()||_0x37bf54[_0x546863(0x1d9)]()){if('twCej'===_0x546863(0x522))this[_0x546863(0xafe)](_0x546863(0x526));else{this[_0x546863(0x3d9)]()[_0x546863(0x607)](_0x55cf7a);if(_0x546c4f[_0x546863(0x2dc)]())_0x37f859[_0x546863(0xfc)]['x']=-0x1;}}else{if(_0x2676c3===0x3)_0x546863(0xb22)===_0x546863(0xb22)?this[_0x546863(0xafe)](_0x546863(0x539)):_0x534d06[_0x546863(0x70c)][_0x546863(0xcc9)]<1.19&&(_0x3e64be(_0x3db06f[_0x546863(0x31d)](_0x546863(0x895))),_0x25681c[_0x546863(0x162)]());else{if(_0x2676c3===0x2)this[_0x546863(0xafe)](_0x546863(0xb43));else{if(_0x37bf54[_0x546863(0x749)]())_0x546863(0x53c)!==_0x546863(0x159)?this[_0x546863(0xafe)](_0x546863(0x833)):(_0x1b3df9=_0xee4233(_0xd5c00d['$1']),_0x35788a--);else{if(_0x37bf54['isGuard']()||_0x37bf54[_0x546863(0x508)]())this[_0x546863(0xafe)](_0x546863(0x664));else{if(_0x2676c3===0x1)this[_0x546863(0xafe)](_0x546863(0xb47));else{if(_0x37bf54[_0x546863(0x683)]())this[_0x546863(0xafe)](_0x546863(0x270));else _0x37bf54[_0x546863(0x68a)]()?this[_0x546863(0xafe)](_0x546863(0x526)):this[_0x546863(0xafe)](_0x37bf54[_0x546863(0x848)]()[_0x546863(0x2ae)]||_0x546863(0x526));}}}}}}}},Sprite_SvEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x2ac)]=function(){const _0x2f44cc=_0x4adfe0;if(this[_0x2f44cc(0x812)]){if(_0x2f44cc(0xaf3)!==_0x2f44cc(0x363))return this[_0x2f44cc(0x812)][_0x2f44cc(0x248)]===0x0&&this['parent']['_offsetY']===0x0;else{const _0x3df040=_0x16769b[_0x2f44cc(0x726)]['_statusWindow'];if(_0x3df040)_0x3df040['addDamageSprite'](_0x406e21,this[_0x2f44cc(0x26e)]);}}else return!![];},Sprite_SvEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x160)]=function(){},VisuMZ['BattleCore'][_0x4adfe0(0x77f)]=Sprite_Animation['prototype'][_0x4adfe0(0x770)],Sprite_Animation[_0x4adfe0(0x6ec)][_0x4adfe0(0x770)]=function(_0x24a8ac){const _0x375dd3=_0x4adfe0;return _0x24a8ac['_distortionSprite']?this[_0x375dd3(0x3d6)](_0x24a8ac):VisuMZ[_0x375dd3(0xa98)][_0x375dd3(0x77f)][_0x375dd3(0x61e)](this,_0x24a8ac);},Sprite_Animation[_0x4adfe0(0x6ec)][_0x4adfe0(0x3d6)]=function(_0x4a5ebb){const _0x593abd=_0x4adfe0;let _0x42d3f6=_0x4a5ebb['x'],_0x220cae=_0x4a5ebb['y'],_0x128a2c=_0x4a5ebb['height'],_0xe27ed9=_0x4a5ebb[_0x593abd(0x593)][_0x593abd(0xfc)]['y'];_0x4a5ebb['x']=_0x4a5ebb['_baseX']+_0x4a5ebb[_0x593abd(0x822)](),_0x4a5ebb['y']=_0x4a5ebb[_0x593abd(0x984)]+_0x4a5ebb[_0x593abd(0xa76)](),_0x4a5ebb[_0x593abd(0x6a1)]*=_0xe27ed9;let _0x4e416a=VisuMZ[_0x593abd(0xa98)]['Sprite_Animation_targetSpritePosition'][_0x593abd(0x61e)](this,_0x4a5ebb);return _0x4a5ebb['x']=_0x42d3f6,_0x4a5ebb['y']=_0x220cae,_0x4a5ebb['height']=_0x128a2c,_0x4e416a;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x799)]=Sprite_AnimationMV[_0x4adfe0(0x6ec)][_0x4adfe0(0x1e0)],Sprite_AnimationMV['prototype']['updatePosition']=function(){const _0x3f4919=_0x4adfe0;VisuMZ[_0x3f4919(0xa98)]['Sprite_AnimationMV_updatePosition'][_0x3f4919(0x61e)](this);if(!SceneManager[_0x3f4919(0xcfa)]())return;if(this[_0x3f4919(0xbb9)][_0x3f4919(0x2a7)]===0x3)this['x']=Math[_0x3f4919(0xb95)](Graphics[_0x3f4919(0xcc7)]/0x2),this['y']=Math['round'](Graphics[_0x3f4919(0x468)]/0x2);else{if(this[_0x3f4919(0xa27)])return;}},Sprite_Damage[_0x4adfe0(0x6ec)][_0x4adfe0(0x85e)]=function(_0x5f4d5c){const _0x5c2e67=_0x4adfe0,_0x1ffcbc=_0x5f4d5c[_0x5c2e67(0x2bd)]()||_0x5f4d5c[_0x5c2e67(0x393)]();if(_0x1ffcbc['missed']||_0x1ffcbc[_0x5c2e67(0x5f5)])this['_colorType']=0x0,this[_0x5c2e67(0x5dc)]();else{if(_0x1ffcbc['hpAffected'])this[_0x5c2e67(0xc47)]=_0x1ffcbc[_0x5c2e67(0x4f3)]>=0x0?0x0:0x1,this['createDigits'](_0x1ffcbc[_0x5c2e67(0x4f3)]);else _0x5f4d5c[_0x5c2e67(0xb82)]()&&_0x1ffcbc[_0x5c2e67(0xace)]!==0x0&&(this[_0x5c2e67(0xc47)]=_0x1ffcbc[_0x5c2e67(0xace)]>=0x0?0x2:0x3,this[_0x5c2e67(0xb40)](_0x1ffcbc[_0x5c2e67(0xace)]));}_0x1ffcbc[_0x5c2e67(0xcba)]&&this[_0x5c2e67(0x230)]();},Sprite_Damage[_0x4adfe0(0x6ec)][_0x4adfe0(0x9ac)]=function(_0x26e219){},Sprite_Damage[_0x4adfe0(0x6ec)]['createDigits']=function(_0x1d6cda){const _0x11e32b=_0x4adfe0;let _0x2afba0=this[_0x11e32b(0xb66)](_0x1d6cda);const _0x526474=this['fontSize'](),_0x40165c=Math[_0x11e32b(0xa55)](_0x526474*0.75);for(let _0x5acd5a=0x0;_0x5acd5a<_0x2afba0[_0x11e32b(0xa59)];_0x5acd5a++){const _0x4b4f6e=this[_0x11e32b(0x80e)](_0x40165c,_0x526474);_0x4b4f6e['bitmap'][_0x11e32b(0xafa)](_0x2afba0[_0x5acd5a],0x0,0x0,_0x40165c,_0x526474,'center'),_0x4b4f6e['x']=(_0x5acd5a-(_0x2afba0['length']-0x1)/0x2)*_0x40165c,_0x4b4f6e['dy']=-_0x5acd5a;}},Sprite_Damage[_0x4adfe0(0x6ec)]['createString']=function(_0xaa0c95){const _0x1eead6=_0x4adfe0;let _0x422594=Math[_0x1eead6(0x6b7)](_0xaa0c95)[_0x1eead6(0x8c9)]();this[_0x1eead6(0x73e)]()&&(_0x422594=VisuMZ[_0x1eead6(0xa2d)](_0x422594));const _0x518f94=VisuMZ[_0x1eead6(0xa98)]['Settings'][_0x1eead6(0x676)];let _0x3f0f3e='',_0x5b30ca='';switch(this[_0x1eead6(0xc47)]){case 0x0:_0x3f0f3e=_0x518f94[_0x1eead6(0x855)]||_0x1eead6(0x569),_0x5b30ca=TextManager['hp'];if(_0xaa0c95===0x0)_0x3f0f3e='%1';break;case 0x1:_0x3f0f3e=_0x518f94[_0x1eead6(0xba6)]||'+%1',_0x5b30ca=TextManager['hp'];break;case 0x2:_0x3f0f3e=_0x518f94[_0x1eead6(0xad6)]||_0x1eead6(0xce1),_0x5b30ca=TextManager['mp'];break;case 0x3:_0x3f0f3e=_0x518f94['mpHealingFmt']||_0x1eead6(0x4fd),_0x5b30ca=TextManager['mp'];break;}return _0x3f0f3e['format'](_0x422594,_0x5b30ca)['trim']();},Sprite_Damage[_0x4adfe0(0x6ec)][_0x4adfe0(0x73e)]=function(){const _0x44af2d=_0x4adfe0;if(Imported[_0x44af2d(0x56a)]){if(_0x44af2d(0xc69)!=='FhuHq')_0x1e0ce6[_0x44af2d(0x552)]([_0xb1f972]);else return VisuMZ[_0x44af2d(0xaa0)]['Settings'][_0x44af2d(0x7b9)][_0x44af2d(0x987)];}else return![];},Sprite_Damage[_0x4adfe0(0x6ec)][_0x4adfe0(0x230)]=function(){const _0x144aad=_0x4adfe0,_0x55758c=VisuMZ[_0x144aad(0xa98)]['Settings']['Damage'];this[_0x144aad(0xb59)]=_0x55758c[_0x144aad(0x184)][_0x144aad(0x7bc)](0x0),this[_0x144aad(0x5bd)]=_0x55758c[_0x144aad(0x7bd)];},Sprite_Damage[_0x4adfe0(0x6ec)]['setupTextPopup']=function(_0x4f51a9,_0xac1321){const _0x11c523=_0x4adfe0;this[_0x11c523(0xb59)]=_0xac1321[_0x11c523(0x392)]||[0x0,0x0,0x0,0x0],this[_0x11c523(0xb59)]=JsonEx[_0x11c523(0x1a2)](this[_0x11c523(0xb59)]),this[_0x11c523(0x5bd)]=_0xac1321[_0x11c523(0xb01)]||0x0;const _0x50b24e=this[_0x11c523(0x459)](),_0x10f833=Math[_0x11c523(0xa55)](_0x50b24e*0x1e),_0x1f7bf0=this['createChildSprite'](_0x10f833,_0x50b24e);_0x1f7bf0[_0x11c523(0x932)][_0x11c523(0x3ad)]=ColorManager[_0x11c523(0x68c)](_0xac1321[_0x11c523(0x3ad)]),_0x1f7bf0[_0x11c523(0x932)][_0x11c523(0xafa)](_0x4f51a9,0x0,0x0,_0x10f833,_0x50b24e,_0x11c523(0x379)),_0x1f7bf0['dy']=0x0;},Sprite_Damage[_0x4adfe0(0x6ec)][_0x4adfe0(0xa6b)]=function(_0x48557f,_0x3c8aef,_0x6c9d21){const _0x48e659=_0x4adfe0,_0x7965bb=Math[_0x48e659(0x7a0)](this[_0x48e659(0x459)](),ImageManager[_0x48e659(0x3e4)]),_0x3cccd8=Math['floor'](_0x7965bb*0x1e),_0x34b131=this[_0x48e659(0x80e)](_0x3cccd8,_0x7965bb),_0x2b05fc=ImageManager[_0x48e659(0x99e)]/0x2,_0x4714b6=_0x34b131['bitmap'][_0x48e659(0xc89)](_0x3c8aef+'\x20');_0x34b131[_0x48e659(0x932)]['textColor']=ColorManager[_0x48e659(0x68c)](_0x6c9d21[_0x48e659(0x3ad)]),_0x34b131[_0x48e659(0x932)][_0x48e659(0xafa)](_0x3c8aef,_0x2b05fc,0x0,_0x3cccd8-_0x2b05fc,_0x7965bb,_0x48e659(0x379));const _0x503cbb=Math[_0x48e659(0xb95)]((_0x7965bb-ImageManager[_0x48e659(0x3e4)])/0x2),_0xa44dea=_0x3cccd8/0x2-ImageManager[_0x48e659(0x99e)]-_0x4714b6/0x2+_0x2b05fc/0x2,_0x3f04dd=ImageManager['loadSystem'](_0x48e659(0x591)),_0x5658b1=ImageManager[_0x48e659(0x99e)],_0x1d8948=ImageManager[_0x48e659(0x3e4)],_0x3cf543=_0x48557f%0x10*_0x5658b1,_0x1c2bb8=Math['floor'](_0x48557f/0x10)*_0x1d8948;_0x34b131['bitmap'][_0x48e659(0x6f1)](_0x3f04dd,_0x3cf543,_0x1c2bb8,_0x5658b1,_0x1d8948,_0xa44dea,_0x503cbb),this[_0x48e659(0xb59)]=_0x6c9d21[_0x48e659(0x392)]||[0x0,0x0,0x0,0x0],this[_0x48e659(0xb59)]=JsonEx['makeDeepCopy'](this[_0x48e659(0xb59)]),this[_0x48e659(0x5bd)]=_0x6c9d21['flashDuration']||0x0,_0x34b131['dy']=0x0;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xcfd)]=Sprite_Damage[_0x4adfe0(0x6ec)][_0x4adfe0(0x80e)],Sprite_Damage[_0x4adfe0(0x6ec)][_0x4adfe0(0x80e)]=function(_0x1b6ce5,_0x490dfb){const _0x2d80a8=_0x4adfe0;return _0x490dfb=Math['round'](_0x490dfb*1.2),VisuMZ[_0x2d80a8(0xa98)][_0x2d80a8(0xcfd)][_0x2d80a8(0x61e)](this,_0x1b6ce5,_0x490dfb);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x3c8)]=Sprite_StateIcon[_0x4adfe0(0x6ec)]['updateFrame'],Sprite_StateIcon[_0x4adfe0(0x6ec)][_0x4adfe0(0x513)]=function(){const _0x3a9a65=_0x4adfe0;VisuMZ['BattleCore'][_0x3a9a65(0x3c8)][_0x3a9a65(0x61e)](this),this[_0x3a9a65(0x2c6)]=this[_0x3a9a65(0xccd)]>0x0?0xff:0x0;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x8d8)]=Sprite_Weapon['prototype'][_0x4adfe0(0xac5)],Sprite_Weapon[_0x4adfe0(0x6ec)][_0x4adfe0(0xac5)]=function(){const _0x1a4b1b=_0x4adfe0;VisuMZ[_0x1a4b1b(0xa98)][_0x1a4b1b(0x8d8)][_0x1a4b1b(0x61e)](this),this[_0x1a4b1b(0x932)]&&(this[_0x1a4b1b(0x932)][_0x1a4b1b(0x656)]=VisuMZ[_0x1a4b1b(0xa98)][_0x1a4b1b(0x5bc)][_0x1a4b1b(0x2e2)]['SmoothImage']);},VisuMZ['BattleCore'][_0x4adfe0(0x8df)]=Sprite_Gauge['prototype']['smoothness'],Sprite_Gauge['prototype'][_0x4adfe0(0x8d9)]=function(){const _0x2240d8=_0x4adfe0;if(this[_0x2240d8(0x866)]!==_0x2240d8(0x50b)){if(_0x2240d8(0x4c8)!==_0x2240d8(0xb26))return VisuMZ['BattleCore'][_0x2240d8(0x5bc)][_0x2240d8(0x1f0)]['AniDuration']??0x14;else{if(!_0xa02e24['isSceneBattle']())return;const _0x5b38d4=_0x5b67b8['getLastPluginCommandInterpreter']();if(!_0x5b38d4)return;_0x5b38d4[_0x2240d8(0x98c)]('battleFloat');}}else return VisuMZ[_0x2240d8(0xa98)][_0x2240d8(0x8df)]['call'](this);};function _0x5881(_0x322fff,_0x1d4ef3){const _0x3e271b=_0x3e27();return _0x5881=function(_0x588173,_0x95e1f6){_0x588173=_0x588173-0xdb;let _0x5b1cd6=_0x3e271b[_0x588173];return _0x5b1cd6;},_0x5881(_0x322fff,_0x1d4ef3);}function Sprite_HpGauge(){const _0x4ab4a6=_0x4adfe0;this[_0x4ab4a6(0xb7d)](...arguments);}Sprite_HpGauge['prototype']=Object[_0x4adfe0(0x3c4)](Sprite_Gauge[_0x4adfe0(0x6ec)]),Sprite_HpGauge[_0x4adfe0(0x6ec)][_0x4adfe0(0xab3)]=Sprite_HpGauge,Sprite_HpGauge[_0x4adfe0(0x6ec)]['initialize']=function(){const _0x3c5406=_0x4adfe0;Sprite_Gauge['prototype'][_0x3c5406(0xb7d)]['call'](this);},Sprite_HpGauge[_0x4adfe0(0x6ec)][_0x4adfe0(0x825)]=function(){return 0x0;},Sprite_HpGauge[_0x4adfe0(0x6ec)]['redraw']=function(){const _0x538018=_0x4adfe0;this['bitmap'][_0x538018(0x465)]();const _0x3329ff=this[_0x538018(0x1b6)]();!isNaN(_0x3329ff)&&this[_0x538018(0x283)]();};function _0x3e27(){const _0x2f00d6=['optDisplayTp','NameOffsetY','battleGrow','StateIconOffsetY','getBattlerKeyTargetReplacement','DistanceAdjust','updateEffectsContainer','ywyRr','_cache','die','isForAll','addSkillCommands','DamageFlat','_colorType','onDatabaseLoaded','LatGW','TpGaugeOffsetY','removedBuffs','drawItemStatusXPStyle','_emptyBitmap','removeChild','refreshCursor','removeDamageSprite','Scene_Options','displayBattleCoreTransitionErrorMsg','loadPicture','return\x200','ActSeq_Angle_Reset','NextTurn','gainHalfActionsPTB','OMBgU','MotionIdle','isDead','dragonbonesData','_skewWholeDuration','Game_Battler_clearDamagePopup','magicReflection','parse','displayAction','Game_Map_setupBattleback','Game_BattlerBase_eraseState','setHome','attack','EPyKz','battler','hSwSO','Window_BattleEnemy_show','FhuHq','pcflv','VariableHeal','checkShowHideSwitchNotetags','EasingType','KqlAN','onBattleEndBattleCore','HelpSkillType','ReflectPlayback','BattleManager_startAction','JS\x20ESCAPE\x20FAILURE','HitRate','VisuMZ_3_SideviewBattleUI','FaceAway','Fkkmb','VisualCutinEffect','ITtjb','alignBattleCoreDamageSprite','battleMembers','commandRemember','uIEym','changeAtbChargeTime','ASnaK','CheckVisibleSkillNotetags','process_VisuMZ_BattleCore_DamageStyles','VisuMZ_4_CombatLog','RTiZQ','WdCTt','isStatusAffected','battleJump','ActSeq_Mechanics_ActiveChainInputDisable','stateRate','measureTextWidth','%1StartBattleJS','Puqef','resize','_buttonKey','blockWidth','rezPz','innerWidth','Window_Options_addGeneralOptions','validTargets','onDisabledPartyCommandSelection','FUNC','isForAliveFriend','pvFXm','isSkillItemWindowsMiddle','Game_Battler_performEvasion','OXjgL','ActionAnimation','autoMeleeMultiTargetActionSet','SuyMQ','AggroControlSystem','_mainSprite','Game_Action_testApply','CKpcX','DualWield','makeActionListAutoAttack','actorCommandEscape','QtJbH','isEffecting','ACTOR_OFFSET_Y','battleLayoutStyle','getItemDamageAmountLabelOriginal','uJVAE','rgmlk','refresh','portrait','_tempBattler','ANTI_TINT_UI','ePhgK','isCommonEventReserved','WaitCount','displayMpDamage','DamageStyleList','itemHit','PBgFt','_jumpMaxHeight','pJIFG','Sprite_Battleback_adjustPosition','isAnyoneGrowing','critical','gainMp','WaitForScale','spinBattler','VisuMZ_3_BoostAction','HITTYPE_CERTAIN','FOOBW','Window_BattleLog_popBaseLine','evalDamageFormula','ActSeq_Movement_HomeMoveBy','victory','skew','WaitForProjectile','boxWidth','buffAdd','version','Game_Action_itemTargetCandidates','CxlWO','performCollapse','_iconIndex','initBattlePortrait','createDamageContainer','LmVvx','command339','UfUec','onSkewEnd','textBaseline','AGI','anchorY','kwUqn','buffRemove','filter','getCommonEventIdWithName','message1','_displayBattleCoreTransitionErrorMsg','parameters','parallaxScrollY','drawBackgroundRect','fIheb','-%1\x20MP','_enemies','adjustFlippedBattlefield','visibilityState','ShakeFlinchDuration','bottom','setBattlerBattleCore','deadMembers','_actorWindow','ForceExploiter','SpGhB','DqIyh','ActSeq_Movement_WaitForSpin','<CUSTOM\x20ACTION\x20SEQUENCE>','bgType','pop','slices','xMibW','gainTp','_endingBattle','addedDebuffs','Sprite_Actor_updateFrame','pVUeO','actor','isDTB','isSceneBattle','movement','_motion','Sprite_Damage_createChildSprite','battlerName','_enemyID','AUStz','getHalfActionsPTB','dbFPf','transform','ACTOR_OFFSET_X','HzurD','rOBnd','jsScaleUp','hFLeN','ClWeH','reserveCommonEvent','_drawTextBody','playReflection','qbSlN','tEnHj','_forcedBattleLayout','Sprite_SvEnemy','playEnemyAttack','preemptive','hoqVp','HelpFight','createDistortionSprite','loadSvActor','_targetAngle','Window_Options_statusText','lpdAO','createActionSequenceProjectile','adjustPosition','lastBattleSkill','1:1','onHomeMoveEnd','_duration','JcwtM','WaitForSkew','_currentActor','scale','guardLifeSteal','soXqn','eiObJ','spriteId','noSimilarSTypes','ExtraSettings','PopupShiftY','VisuMZ_2_BattleGridSystem','randomTargets','cczmh','createLowerLayer','UfsLv','BattleLog','_targetGrowY','clearRect','makeTargets','CastCertain','DamageStyles','iCnOj','windowAreaHeight','uyKgj','_angleDuration','shouldPopupDamage','Targets','callNextMethod','OffsetY','_angleRevertOnFinish','YRUGo','move','nDaAO','itemTextAlign','cameraClamp','COMBATLOG','selectAll','createEnemyWindow','VisuMZ_1_SkillsStatesCore','BattleVictoryJS','isBattlerFlipped','invokeAction','_armorPenetration','VisuMZ_3_ActiveChainSkills','_weather','reduce','HpwDY','ActSeq_Mechanics_StbExtraAction','isForRandomBattleCore','DEF','cancel','nkVHv','criticalDmgRate','VisuMZ_1_ElementStatusCore','drawTextTopAligned','alive\x20actors\x20not\x20target','requestDragonbonesAnimation','isNonSubmenuCancel','VisuMZ_2_BattleSystemCTB','requestAnimation','lifeStealTrait','ActSeq_BattleLog_Refresh','isAppeared','endVisualCutin','UiKin','isEnemy','dtxNM','drawItemStatus','ugpKn','SttBv','Game_Action_evalDamageFormula','CmdTextAlign','battleInjectAni','regionId','currentAction','YINOB','GzUoq','hasSvBattler','frameDelay','lLloO','ovrxN','magicSkills','autoBattleWindowRect','isJumping','StartTurnMsg','jump','SwitchCritical','AllActorsText','WindowWidth','Ohjrk','StatusWindowSelectableBackHide','attackAnimationIdSlot','stepBack','process_VisuMZ_BattleCore_Action_Notetags','Scene_Battle_startActorCommandSelection','ODQkC','pow','onOpacityEnd','createBattleFieldBattleCore','note','AutoBattleOK','Ewsye','updateFlip','createMultiTargetWindows','exit','isBattleCoreTargetScope','isMoving','select','Game_Action_setSkill','10612462gDGiyU','AwmmJ','FWyfl','ActSeq_Movement_MoveToJsPoint','Sprite_Battler_updateMain','_targetSkewY','Game_Battler_performMiss','JwAwv','_index','makeSuccess','updateSkew','AttachStateOffsetY','_dragonbonesSpriteContainer','StatusWindowAttachmentBackOffsetX','createHelpWindowBattleCore','split','isImmortal','scope','_targetHomeX','WaVdQ','VKKyO','findSymbolExt','kQVIy','setBattleCameraPoint','contents','nVLuk','ActSeq_Animation_CastAnimation','HelpAutoBattle','PostStartTurnJS','CriticalColor','process_VisuMZ_BattleCore_BaseTroops','stbGainInstant','alterCost','Sprite_Battler_isMoving','checkShowHideBattleNotetags','isPreviousSceneBattleTransitionable','process_VisuMZ_BattleCore_PreBattleCommonEvent','DJcrj','kWAUz','displayAffectedStatus','startDamagePopup','visualCutinPortraitType','UjlWE','SJTeS','processActorCommandCancelTPB','_commonEventIDs','_backAttachmentSprite','drawItemImagePortraitStyle','concat','kuALN','ActSeq_Movement_FaceTarget','_floatWholeDuration','currentExt','YqwFf','vuHec','isAnyoneFloating','drawItemImageListStyle','applyGuard','Exploiter','makeDeepCopy','left','_homeWholeDuration','BjeIQ','MqbTS','_allTargets','TqHUZ','XmLdl','WnHiF','battleCommandIcon','ShowMissEvasion','refreshStatusWindow','getInputButtonString','ExHDs','kTkYV','isAnyoneInjectAniPrepping','numTargets','_forcedHomeY','ActSeq_Mechanics_DeathBreak','Spriteset_Battle_updateActors','currentValue','forceSelect','_isBattlerFlipped','damageStyle','Scene_Battle_stop','CriticalDmgFlat','isSideView','Window_ActorCommand_initialize','ActSeq_Target_PrevTarget','rJEMJ','setBackgroundType','SHOW_BUTTON','svActorVertCells','finalizeScale','Game_BattlerBase_refresh','BattleSystemSTB','nXzKp','callUpdateHelp','ActSeq_Movement_WaitForMovement','closeBattleActorWindow','startWeaponAnimation','ScaleUp','retreat','criticalHitFlat','log','33272jznIkw','switchToWeaponType','VisuMZ_2_BattleSystemETB','startMove','_commandNameWindow','_fauxAnimationSprites','popBaseLine','_updateClientArea','CheckSkillCommandShowSwitches','Sprite_Battler_initMembers','isActing','ActSeq_Skew_Reset','isFastForward','process_VisuMZ_BattleCore_PluginParams','NameFontSize','dataId','ActionEffect','updatePosition','canUseItemCommand','width','getWtypeIdWithName','ParseSkillNotetags','skillItemWindowRectBorderStyle','collapseType','isSkill','makeTargetSelectionMoreVisible','isMeleeSingleTargetAction','createCommandNameWindow','isBattleSys','DEevj','iqNLy','goDJA','ActorOffsetX','HpGauge','commandNameWindowDrawBackground','applyArmorModifiers','updateAction','SvMotionIdleMass-%1-%2','_customDamageFormula','top','isConfused','updateEffectContainers','qUWjC','stopInjectAnimation','current\x20target','_cacheTextWidth','onActorCancel','_freezeMotionData','ShowHpDmg','Mute','partyCommandWindowRect','sideview_ui','setFullActionsPTB','canGuard','Window_BattleLog_displayMpDamage','cutinExit','performFlinch','ActSeq_Mechanics_RemoveBuffDebuff','ForceRandom','fnordAddedStates','battleFloat','alive\x20friends','swapEnemyIDs','numRepeats','pauseInjectAnimation','Window_BattleLog_performActionEnd','svAnchorY','MFhjA','aQuMa','Destination','SlouV','FtbYG','string','resetFontSettings','_shadowScaleY','XBbfV','_executedValue','Height','ActSeq_Impact_MotionTrailCreate','tDkkc','VisuMZ_3_VisualCutinEffect','weaponTypes','_lastAction','drawIcon','ActSeq_Camera_Offset','addSingleSkillCommands','MDF','BattleManager_endBattle','CreateCutinSettings','_weaponSprite','Sprite_Actor_setActorHome','Window_BattleActor_hide','displayEvasion','removeBuffsAuto','BattleLayout','showAnimation','cancelHpLifeSteal','setupCriticalEffect','updateBattlebackBitmap1','ActSeq_Movement_WaitForOpacity','_lastRegenFrameCount','Window_BattleLog_displayCritical','tspsS','removeHorrorEffect','_enemy','EMUcJ','Game_Action_executeMpDamage','statusTextAutoBattleStyle','BattleManager_isTpbMainPhase','uKyoX','drawItem','Game_Action_isForAliveFriend','iJbhK','ParseWeaponNotetags','ButtonAssist','_lastHpDamage','ActSeq_BattleVoice_PlayCommonLine','addAttackCommand','svBattlerName','lastCommandSymbol','Spriteset_Battle_createBattleField','_offsetX','auto','ForceDeath','SkillItemMiddleLayout','SkillItemBorderCols','882370MSfSKM','EhBMC','formula','updatePositionBattleCore','OraxD','Skills','actorCommandWindowRect','isAnyoneChangingOpacity','growBattler','random','targetActionSet','min','PostEndBattleJS','_skewDuration','#ffffff','Enable','mainSpriteScaleY','updateBattlerContainer','ShowAddedState','mxTmW','BattleManager_startTurn','process_VisuMZ_BattleCore_Failsafes','jSzBY','makeTargetsBattleCore','_skillIDs','isTurnBased','iQCMy','GHBPr','imTeI','alive\x20friends\x20not\x20user','onJumpEnd','LBPGu','logActionList','_battler','_battleCoreNoElement','dying','updateEventMain','parallaxHue','loadBattleback1','checkSceneBattleTransitionable','isTickBased','resizeWindowBorderStyle','weatherPower','createBattleUIOffsetY','svBattlerShadowVisible','BindCommonEventKeysForObj','battleUIOffsetY','Scene_Boot_onDatabaseLoaded','dead\x20actors','active','SwitchMissEvade','Scene_Battle_createCancelButton','battleAnimation','qrmWw','drawGauge','DLOBP','isForNotUser','hitType','action','_multipliers','CmdIconAutoBattle','onBattleStartBattleCore','46820nhqYTL','isCommandEnabled','PostDamageAsUserJS','item','cWLYN','executeHpDamage','Scene_Battle_startEnemySelection','Sprite_Enemy_setBattler','ChargeRate','Window_BattleLog_performActionStart','disarmHpLifeSteal','ActSeq_Animation_ChangeBattlePortrait','HTVLU','ActSeq_Mechanics_PtbAlterCost','CriticalHitMultiplier','OwhWL','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','JDcpU','applyVariance','ActSeq_Mechanics_TextPopup','startEnemySelection','Game_Interpreter_command283','xuKHP','border','itemEffectRecoverHp','Game_Battler_regenerateAll','%1StartTurnJS','VisuMZ_1_MainMenuCore','position','executeMpDamage','createTroopNote','VarianceFormulaJS','_attackAnimationId','inHomePosition','updateHpGaugePosition','motionIdle','Victory','Scene_Battle_createAllWindows','FQggP','Scene_Battle_createActorCommandWindow','CriticalHitRate','StatusWindowAttachmentFrontOffsetX','createDamageSprite','Defeat','PCGJM','zOcYp','JOgFs','_lastActor','DRsKQ','ActSeq_Animation_ShowAnimation','getNextDamagePopup','AnimationID','actor%1-portrait','occasion','RFfgv','autoBattleAtStart','battleProjectiles','commandStyle','SkillItemStandardCols','opacity','isBTB','updateHelp','battleZoom','_motionType','isActiveTpb','battleSpriteSkew','AllEnemiesText','isStateResist','revealNewWeaknesses','Sprite_Actor_update','startJump','RgOYO','ShowCritical','Scene_Battle_selectNextCommand','FeQei','isForOneBattleCore','BattleManager_inputtingAction','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','_homeDuration','ActSeq_Set_WholeActionSet','isOptionsCommandEnabled','isBattleFlipped','jEsAT','TnVPE','shift','nBuDR','special','Actor','setupBattlebackBattleCore','dWdjH','BattleManager_processVictory','processBorderActor','oEhXo','ParseAllNotetags','isForOne','RZLJi','setTroopPage','applyDamageCaps','cZJsg','CombatLogIcon','StartName','SJcUX','Game_Action_isForAll','AnchorY','_angleWholeDuration','adjustWeaponSpriteOffset','physical','updateSelectionEffect','map','setHue','isBuffAffected','iiilq','setupZoomBlurImpactFilter','WaitForJump','_canLose','BattleManager_checkBattleEnd','PrioritySortActive','PARTY','iwNFn','dguKt','Zunml','WjFQS','canInput','removeActor','_escapeRatio','destroyDamageSprite','processTouch','ActSeq_Inject_AnimationStart','Enemy','softDamageCap','hasStaticSvBattler','jsScaleToFit','ActSeq_Mechanics_CtbOrder','PostDamageJS','initBattleCore','vywdY','save','createEnemyNames','SvWeaponMass-%1-%2','applyAngleChange','isAlwaysHidden','322944bdKriI','UNTITLED','_lastEnemy','PostDamageAsTargetJS','Style','format','eVuHC','updateKeyboardKeys','CxVFf','xGTIT','cCQYb','checkBattleEnd','createAttachedSprites','activate','_statusWindow','ybSuQ','doesPageHaveOnceParallelStart','\x5cI[%1]%2','ipMgH','LUK','ActSeq_Weapon_SetActiveWeapon','ZqSWn','oZwvz','performRecovery','deselect','vuOqi','Width','WaitForZoom','updateInterpreter','replace','needsSelection','Scene_Battle_itemWindowRect','ActSeq_Impact_ZoomBlurTargetCenter','addSkillTypeCommand','pointX','DigitGrouping','alive\x20battlers','isSideButtonLayout','_actor','loadSvEnemy','getBattlePortraitOffsetY','portraitFlipVert','_cancelButton','setEnemyWindowMode','getNextSubject','Scene_Battle_updateBattleProcess','UbUVL','_animationContainer','ATTACK','performActionMotions','isCTB','Setting','BattleManager_onEscapeSuccess','BaseTroopIDs','applyData','ESCAPE','xindY','Point','_list','setupDesaturateImpactFilter','VisuMZ_2_WeaponSwapSystem','GoDlB','gWcMw','PRE-','addTextToCombatLog','NJUSN','CreateActionSequenceTargets','ActorCmd','wikLV','isAnimationPlaying','BattleManager_cancelActorInput','BDZNs','ConvertParams','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','PointJS','GQvaZ','createActorCommandWindow','CopyCombatLog','_opacityWholeDuration','Game_Party_removeActor','battleMove','jgRkl','FlashDuration','drawItemStyleIcon','ActSeq_Mechanics_PtbConvert','createStateIconSprite','BattleManager_makeActionOrders','States','autoSelect','coreEngineRepositionEnemies','CmdIconItem','NxPWj','wnoBT','Pre','portraitFlipHorz','isQueueOptionsMenu','wWIUH','center','updateBitmap','ceil','debuffAdd','weapons','isPartyTpbInputtable','Rate','criticalDmgFlat','_stateSprite','battleCommandName','xoTmg','_createCursorArea','evade','_battleCoreBattleResumeAfter','text\x20target','isNextSceneBattleTransitionable','makeActionOrders','Game_BattlerBase_addNewState','_opacityEasing','setGuard','Spriteset_Battle_update','lineRect','battleCoreTpbMainPhase','ActSeq_Mechanics_CtbSpeed','ATJal','flashColor','result','Amp','tfZbC','clearFreezeMotion','damageRate','_interpreter','Game_Action_isForOpponent','cWTqD','ActSeq_Mechanics_BoostPointsChange','PreApply%1JS','setBlendColor','skwCX','updateBattleProcess','Game_Battler_onTurnEnd','checkCacheKey','lXgiZ','_action','Game_Action_isForOne','PyrTy','ePIhy','HpGaugeOffsetX','arNSv','createPartyCommandWindow','_updateCursorArea','Sprite_Actor_updateShadow','_growEasing','textColor','ARRAYSTR','changeAtbCastTime','ffRce','textAlign','Bnehe','Game_Actor_setup','_actionInputIndex','qYrZw','sliceMax','Window_BattleLog_clear','EmergeText','some','setTargetBattlerKey','addImmortal','addCommand','pointY','children','_uiContainer','Sprite_Enemy_createStateIconSprite','hlryZ','ActSeq_Animation_PlayAtCoordinate','ZuNYB','create','charged','MeleeDistance','Window_ActorCommand_setup','Sprite_StateIcon_updateFrame','adjustPosition_ScaleDown','skillTypes','VisuMZ_3_ActSeqCamera','isRightInputMode','_regionBattleback2','isCustomActionSequence','XvmII','setItem','RequiresDefeat','updateBorderStyle','StateIconOffsetX','splice','GjXyt','targetDistortionSpritePosition','sortDamageSprites','JvgeC','damageContainer','wBfmk','startInjectAnimation','DestinationJS','cEHvM','Game_Enemy_transform','ActSeq_Movement_HomeMoveToTarget','aNgCi','MultiTarget','damageOffsetY','Wave','iconHeight','Shadow2','DDMYy','stepFlinch','toWlY','CastAnimation','clearActiveWeaponSet','HJVqU','ReflectAnimation','removeState','KSuMW','placeTimeGauge','ActSeq_Impact_TimeScale','ShowEnemyGauge','%1Damage%2JS','Game_BattlerBase_isStateResist','ActSeq_Set_SetupAction','addBattleCoreAutoBattleStyleCommand','YnxUq','contentsOpacity','attachSpritesToDistortionSprite','disperseDamage','_itemWindow','emerge','Sprite_Enemy_updateBossCollapse','CalcEscapeRatioJS','LqzGQ','vpeOS','getDamageStyle','_actorCommandWindow','njUVE','removeAnimation','77JpIgVo','linkSprite','BG_TYPE','battlerSmoothImage','fVsSF','createMultiTargetWindow','uUnlD','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','_battleCoreBattleStartEvent','performMoveToTargets','hzMcN','wDsjG','YnhAX','ZcDOO','applyFreezeMotionFrames','_forceAction','damageFlat','visible','Game_BattlerBase_canGuard','TextColor','canMove','qVRkE','isForFriend','MpGaugeOffsetY','RdRSM','process_VisuMZ_BattleCore_TraitObject_Notetags','isForFriendBattleCore','performCounter','performJump','slkGM','calcWindowHeight','spell','clearHorrorEffects','kYPRy','Vurkn','performMoveToPoint','wIpfV','clearOnceParallelInterpreters','hitIndex','members','PopupOffsetY','DDKic','TextFmt','changeWeather','PreApplyAsUserJS','AddOption','getSkillTypes','_pattern','processForcedAction','placeStateIcon','front\x20center','ActSeq_Target_CurrentIndex','OnKZT','_cursorSprite','updateHomeMove','jIqsU','_battleLayoutStyle','getBattlePortraitOffsetX','XPActorDefaultHeight','fBuBl','sksyg','BTB','Game_Battler_performDamage','mNzrr','visualCutinPortraitHue','VisuMZ_3_ActSeqImpact','actorCommandCancelTPB','yyexL','needsSelectionBattleCore','Sprite_Battler_startMove','isHidden','jPtDo','filterArea','compatibilityVisible','Sprite_Enemy_updateCollapse','getBattlerFromKey','WaitForExit','ScaleY','PreDamageAsTargetJS','createAnimationContainer','show','yFgZI','49734kNSZKW','ldrMV','ShowAddedDebuff','fontSize','gTbrx','onEncounter','TNwKn','AddHpGaugeOption','dead\x20battlers','Window_BattleLog_performAction','alterPriority','itemEffectAddNormalState','Game_Battler_makeSpeed','atbInterrupt','_targetHomeY','clear','enemyNames','ActionSkillMsg2','boxHeight','processBattleCoreJS','weaponImageId','initMembersBattleCore','_visualHpGauge_JustDied','ActionEndUpdate','ShakeFlinch','addText','Armor-%1-%2','isForDeadFriend','multiTargetWindowRect','mlmhK','updateStateIconSprite','changePaintOpacity','Scene_ItemBase_applyItem','ConfigManager_makeData','_linkedSprite','skewBattler','createActorCommandWindowBattleCore','partyCommandWindowRectBorderStyle','centerFrontViewSprite','YkkbZ','requestMotionRefresh','PostApplyAsUserJS','DistanceX','isActionSelectionValid','YNRDG','BKhTj','StepDuration','DMrnu','addExtendedTroopMembers','_enemySprites','rowSpacing','lbfxQ','hqCyd','_subject','mEtcZ','VFsly','JoING','_target','CheckVisibleSwitchNotetags','pattern','_defeatedEnemies','XszPb','Game_Battler_onBattleEnd','ShowFacesListStyle','Actions','float','TpbGaugeOffsetY','battlerSprites','neKwo','updateStaticSvBattlerFrames','ALL\x20SKILLS','Targets1','_baseX','animationId','BindCommonEventKeysForGroup','okJmh','Scene_Battle_onEnemyOk','ActSeq_Cutin_EndVisualCutinEffectType','zTykv','CommandAddOptions','Scene_Battle_commandFight','ParseStateNotetags','isAlwaysVisible','_effectType','substitute','canSingleOrMultipleSelect','Game_BattlerBase_meetsUsableItemConditions','addOnceParallelInterpreter','param','ActSeq_Impact_MotionBlurTarget','Enemy-%1-%2','toUseBoostPoints','addChildToBack','Scene_Battle_skillWindowRect','processPostBattleCommonEvents','_battleField','open','parallaxScrollXinvertEnemy','TextAlign','itemEffectGainTp','Window_BattleLog_performReflection','displayItemMessage','XnwQW','ArPenFlat','Scene_Battle_update','createJS','ALL_ENEMIES','battleSpin','OffsetAdjust','_createEffectsContainer','dHAyd','ShowTpDmg','battleCamera','Game_Battler_clearMotion','VZZbz','CmdIconFight','PostStartBattleJS','isAnyoneInjectAnimating','command357','hGuOf','applyItem','Game_Action_numRepeats','addPartyCommand','isBattleMember','BIuck','arRedFlat','MP_Flat','DefaultSoftCap','Text','ARRAYJSON','ActSeq_Movement_WaitForSkew','Game_System_initialize','selectAllEnemies','setLastBattleSkill','ActSeq_DB_DragonbonesTimeScale','RNOvr','isCustomBattleScope','createWeather','isAnyoneSkewing','setupMotion','getBattlePortraitFilename','isSTB','waitCount','font','PostApplyAsTargetJS','value2','rwQrD','Mechanics','hjJHt','%1EndBattleJS','MotionFrameWait','usJrQ','battleDisplayText','setupNegativeImpactFilter','FaceDirection','performEvasion','pXuFX','hpDamage','process_VisuMZ_BattleCore_CreateRegExp','ugqNH','CKvTc','LEvoR','repositionEnemiesByResolution','SkillsStatesCore','alive\x20opponents','cJKtM','createActors','+%1\x20MP','command283','Override','267cEUqmh','Window_BattleLog_displayCurrentState','addItemCommand','WgtmZ','Scene_Battle_partyCommandWindowRect','gainStoredBoostPoints','selectNextActor','getBattlePortrait','isGuardWaiting','Scene_Map_updateCallMenu','snRro','time','addState','setVisibleUI','utcNv','getBattlerKeyTargets','Game_BattlerBase_initMembers','maxTp','attackAnimationId1','updateFrame','MzKxF','_waitMode','updateBattlebackBitmap','_padding','itemTargetCandidates','ParseClassNotetags','isAutoBattle','iterateBattler','isCharging','ActSeq_Impact_ShockwaveEachTargets','options','STYPES','Scene_Battle_onEnemyCancel','clearBattleCoreData','twCej','Window_BattleLog_performMagicEvasion','ActSeq_Weapon_NextActiveWeapon','Linear','walk','Sprite_Actor_initMembers','makeSpeed','ActSeq_Cutin_EndVisualCutinEffectAll','BattleManager_startBattle','targetBattlerContainerOpacity','HpGaugeOffsetY','negativeLifeSteal','setText','GpPtp','text','VisuMZ_4_BreakShields','ENEMY_OFFSET_Y','ActionSkillMsg1','preparePartyRefresh','Radius','testApply','IeciH','uRcOh','dead','_growDuration','ClearBattleLog','INxVH','turnCount','FBVIi','WaitComplete','ShowAddedBuff','VecIZ','isAnimationShownOnBattlePortrait','isAnyoneJumping','vqTFe','battleStatusWindowAnimationContainer','setupBattleback','Mirror','clamp','customDamageFormula','bOFjZ','meetsSelectFrontviewActorConditions','_enemyIDs','ARRAYNUM','Turns','dimColor1','portraitIndex','ActSeq_Mechanics_VariablePopup','command119','performWeaponAnimation','ckEUw','%1Event','Window_BattleStatus_drawItemImage','JUHAu','RiTvp','ArPenRate','jiYbv','isBreakStunned','EnableDamageCap','Game_Party_addActor','SvBattlerSolo-%1-%2','Game_Action_makeTargets','aNpIo','ATK','ZPGrd','cQNub','partyCommandWindowRectDefaultStyle','pUDnR','moveToStartPositionBattleCore','attackTimesAdd','ActSeq_Movement_Skew','-%1','VisuMZ_0_CoreEngine','_floatHeight','actionBattleCoreJS','unzej','PostApply%1JS','Game_Troop_setup','Game_BattlerBase_canAttack','applyResultSwitches','removeImmortal','selectPreviousCommand','addAnimationSpriteToContainer','iQBbJ','hpRate','casting','canBattlerMove','iconText','GOukA','NameLegacy','_tpbNeedsPartyCommand','waitForJump','_enemyWindowMode','process_VisuMZ_BattleCore_jsFunctions','euYMU','padding','_callSceneOptions','mmp','iGZvU','SrzCW','_waitCount','performMagicEvasion','1971orxZMK','swBIl','WtypeId','CurrentTurn','allowCollapse','FlinchDistanceY','jmHas','Scene_Battle_selectPreviousCommand','setBattleZoom','IconSet','itemEffectRecoverMp','_distortionSprite','symbol','_tpbState','waitForNewLine','StartTurnWait','startActorCommandSelection','drawActorFace','oBlDT','tpbCommandFight','JS\x20BATTLE\x20VICTORY','FxFes','onAngleEnd','startGrow','PreEndActionJS','isFlipped','changeInputWindow','GRqqL','_actorSprites','setLetter','CommonEventID','performTpbActiveCheckSwitch','BattleManager_updatePhase','addBuff','displayActionResults','silentHomeMove','DYGvS','addBattleCoreAutoBattleStartupCommand','updateShadowPosition','_lineHeight','bitmapHeight','onRegeneratePlayStateAnimation','statusWindowRectXPStyle','Window_BattleLog_performRecovery','setupBlueRedInvertImpactFilter','updateStart','registerDefeatedEnemy','DamageDisplay','OElyu','WeaponTypeID','isEscapeCommandEnabled','ActSeq_Movement_WaitForScale','Settings','_flashDuration','mainSpriteWidth','GYPnA','IconStypeNorm','criticalHitRate','JepWt','AEoUb','norJs','addLoadListener','clearTargetBattlerKey','lvwyj','drawLineText','Window_BattleLog_performEvasion','jkdKl','Sprite_Actor_createStateSprite','ShowWeapon','close','_buttonText','OZXeL','includes','EnableSoftCap','BPNvD','BfzcR','YGcmU','SFFiG','JlKHj','_targetOffsetY','displayReflection','StatusWindowAttachmentFrontOffsetY','displayRemovedStates','PreEndBattleJS','createMiss','VfEzz','filters','addDamageSprite','NameAlwaysVisible','Window_BattleLog_popupDamage','LXJOu','XPSpriteYLocation','deathStateId','swing','skillItemWindowRectMiddle','_homeY','svBattlerAnchorY','processRandomizedData','dbREa','tone','createBorderStylePortraitSprite','dggcM','animation','ExFkb','TP_Rate','ActSeq_Movement_HomeReset','VvcLB','DisablePartyCmd','isPTB','evaded','ActionSequence','checkSubstitute','getSpecificBattlerKeyTarget','oBXlt','JS\x20%1START\x20ACTION','displayMiss','battleCameraData','wlUuU','frameVisible','pages','_cursorArea','allBattleMembers','ActSeq_Mechanics_StbExploit','isHiddenSkill','playEnemyDamage','ParseActorNotetags','updateCommandNameWindow','addChild','WaitForAngle','exbXu','_actions','Hglxh','duration','Window_BattleLog_displayEvasion','wholeActionSet','battleCoreResumeLaunchBattle','dead\x20opponents','ActSeq_Mechanics_HpMpTp','getStypeIdWithName','isInputting','createCancelButton','drawSkillCost','Scene_Battle_createPartyCommandWindow','PreEndTurnJS','setupShockwaveImpactFilter','executeDamage','OTVUC','JSnsH','applyBattleCoreJS','sortEnemies','call','clearBattlerMotionTrailData','ActSeq_BattleLog_Clear','_requestRefresh','actionSplicePoint','onAllActionsEnd','evalDamageFormulaBattleCore','XOsfb','EPbVW','battleEffect','BattleManager_onEscapeFailure','Sprite_Enemy_updateStateSprite','processOk','CwkXZ','Game_Interpreter_updateWaitMode','ParseArmorNotetags','ActSeq_Movement_Spin','performShakeFlinch','AsTarget','addWindow','updatePadding','fight','match','cancelButtonText','finishActorInput','performAttack','tpbActorSwitchConditionsMet','icon','_checkOn','clearBattleRefreshRequest','prepareBorderActor','setupChild','nextActiveWeaponSlot','EufOM','EscapeFailureJS','onBattleEnd','cVPzx','ActSeq_BattleLog_PopBaseLine','charging','getAttackMotionSlot','gpkGe','NORbL','createAnimationSprite','PreStartBattleJS','Sprite_Enemy_update','AttackAnimation','canAttack','freezeFrame','ActionItemMsg','addBattleGridMoveCommand','QKdgo','setCursorRect','ShowRemovedBuff','lZVGK','GuFmH','repositionCancelButtonBorderStyle','smooth','_shake','VisuMZ_2_DragonbonesUnion','isAtbCastingState','ZIRWF','visualHpGauge','fittingHeight','updateUiContainerPosition','isTpbMainPhase','wVhoI','gainBravePoints','_commonEventKey','rivqU','attackStates','guard','cskuk','IconStypeMagic','FullActions','selectAllActors','ElementStatusCore','setAttack','showHelpWindow','drawItemImage','aliveMembers','cQrWm','isDamagePopupRequested','ubahO','_svBattlerSprite','selectLast','ShowCosts','TpbActiveChangeEnabled','resetResultSwitches','Damage','KQdtx','placeGauge','VaakR','_wtypeIDs','isNegativeLifeSteal','waitForAnimation','setBattleCameraTargets','isAutoBattleCommandAdded','xpaHM','apply','adjustPosition_1for1','_indent','isDying','BattleManager_processAbort','dgCAY','SChUl','LysHF','lmYol','Window_BattleLog_performCollapse','isUndecided','ActSeq_Mechanics_Multipliers','getColor','dead\x20enemies','setEventCallback','not\x20focus','autoMeleeSingleTargetActionSet','isForOpponentBattleCore','addEscapeCommand','Sprite_Enemy_initVisibility','isSpriteVisible','disarmMpLifeSteal','yRFPw','updateAngleCalculations','cmqkr','TpGaugeOffsetX','svShadow','LifeStealRegExp','updateFloat','eRZvB','getDualWieldTimes','mREVF','pidDV','height','statusText','gSuSI','dKTzp','actions','MotionType','_enemyWindow','Window_BattleLog_performSubstitute','deactivate','PostRegenerateJS','destroy','updateRefresh','setBattler','ActSeq_Impact_Desaturate','useItem','itemCri','StepDistanceY','value1','SNaPD','sFCBP','nlmxy','emqap','abs','Scene_Battle_terminate','BwMBl','createAllWindows','setupOversaturateImpactFilter','keeKJ','Window_BattleActor_processTouch','Scene_Battle_logWindowRect','front\x20base','damageOffsetX','undecided','MANUAL','_damageContainer','wTAhy','OwllS','battlerShadowScaleY','SqIqK','bWOTM','startSkew','Shadow','zRycz','createStateSprite','TpbGaugeOffsetX','onEnemyCancel','Sprite_Actor_setBattler','missle','startActorSelection','changeBattlebacks','SlotID','zYNpD','RjuMz','updateAttachedSprites','_doubleTouch','setCustomDamageFormula','BattlebackScale','performSTBExploiter','addWeaponSwapCommand','DTB','BattleManager_setup','_growWholeDuration','cDsli','SqMUg','Window_BattleEnemy_hide','all\x20targets','_frontAttachmentSprite','uiInputPosition','jjJhW','isFloating','PortraitScaleBorderStyle','friendsUnit','_battlerName','frontview_ui','createAutoBattleWindow','prototype','Game_Action_setAttack','cutinEnter','GOGfM','Game_Action_itemHit','blt','isForAnyoneFocusFriends','snapForBackground','PerformAction','unshift','updateBorderSprite','Sprite_Battler_damageOffsetY','itemLineRect','wiCdw','isAnyoneSpinning','STR','JqagW','attackSkillId','svAnchorX','lineHeight','actionEffect','\x20to\x20%1\x20midbattle.','StyleName','uodPg','updateStateSprite','dRdCY','ActSeq_Mechanics_Immortal','stypeId','ActSeq_Impact_TimeStop','adjustPosition_ScaleToFit','aBpTk','createHpGaugeSprite','BattleSystemCTB','removeBuff','_forcing','AutoBattleMsg','_methods','_selectionEffectCount','sort','dKUCe','ApplyImmortal','OlxPk','command301_PreBattleEvent','cancelLifeSteal','VariableDmg','isCurrentItemEnabled','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','thrust','displayBuffs','SceneManager_isSceneChanging','ActSeq_Impact_MotionBlurScreen','MpGaugeOffsetX','ActionCenteredName','index','cRTIe','Window_ItemList_maxCols','TrYsJ','makeHpDamageText','_scene','isDisplayEmergedEnemies','YaBYM','helpWindowRect','RevertAngle','alive\x20enemies\x20not\x20target','BattleManager_endAction','gBgaN','process_VisuMZ_BattleCore_CommonEventKeys','AnmiT','AutoBattleRect','launchBattle','isMagical','wait','autoBattleStyle','Window_BattleLog_displayMiss','npRts','_activeWeaponSlot','origin','loadWindowskin','displayReflectionPlayBack','%1EndActionJS','inBattle','bitmapWidth','useDigitGrouping','_surprise','ykarl','priority','forActor','_windowLayer','_inputting','start','_dimmerSprite','STRUCT','EnemyOffsetY','isChanting','_hpGaugeSprite','RUNpe','isAttack','ENEMY_OFFSET_X','Opacity','_skewY','invokeMagicReflection','Game_Battler_forceAction','SYZZg','Window_BattleEnemy_initialize','ConfigManager_applyData','getTraitSetKeys','CkuPf','compareBattlerSprites','refreshDimmerBitmap','forceWeaponAnimation','lifeSteaItem','setMoveEasingType','_battlerKeyCache','updateShadow','BattleManager_onEncounter','stop','DOIru','All\x20Allies','updateWaitMode','VKleX','isMagicSkill','regenerateAllBattleCore','indexOf','ShuffleArray','playOnceParallelTroopPage','isForAnyoneFocusOpponents','isATB','CommandWidth','updateShadowVisibility','mSuzV','GIfeQ','createBattleUIOffsetX','targetSpritePosition','isActor','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','isIncludedInEnemyWindow','shouldHideBattleEndPopups','_shakeFlinchPower','ActSeq_Inject_AnimationEnd','selectNextCommandTpb','sxKVN','CreateCommonEventKeys','addAutoBattleCommands','Rheql','isSkewing','ShowReflect','WaitForAnimation','Sprite_Animation_targetSpritePosition','Bbhhr','getLastPluginCommandInterpreter','kOudB','atRvJ','_jumpDuration','BattleEndEvent','canAttackBattleCore','getItemDamageAmountLabelBattleCore','openBattleActorWindow','Game_Action_isForFriend','maxCols','dQTQi','TpWGw','Spriteset_Battle_createLowerLayer','gainHp','RsMUs','Scene_Map_initializeAfter','CmdStyle','skills','gradientFillRect','_enemyNameContainer','gainCurrentActionsETB','WswiF','autoBattleUseSkills','kNzZv','Sprite_AnimationMV_updatePosition','QlhEP','_targetFloatHeight','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','ShowFailure','BARE\x20HANDS','_targetIndex','max','ActSeq_Camera_WaitForCamera','command301','NameOffsetX','LQdju','PortraitScale','revertTpbCachedActor','Filename','VisuMZ_2_BattleSystemOTB','ActSeq_Mechanics_Collapse','setupBattleCoreData','PxRuX','anchorX','PostStartActionJS','Window_SkillList_maxCols','AutoMeleeAoE','ALL_ACTORS','Game_Action_setSubject','isSubjectValidForAnyoneSelect','requestRefresh','setBattlePortrait','windowskin','displayTpDamage','isPlaytest','onEncounterBattleCore','QoL','statusWindowRectBorderStyle','_updateFilterArea','slice','CriticalDuration','Reveal','ActSeq_Movement_Jump','_onceParallelInterpreters','DefaultHardCap','alive\x20opponents\x20not\x20target','ActSeq_Element_Clear','removedStateObjects','BravePoints','svActorHorzCells','createInnerPortrait','#%1','Angle','getMenuImage','UPqxi','performActionStart','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','jidme','oWNOR','DamageType%1','clearMotion','HDcYg','alterBreakShield','initMembers','MOTIONS','battleCorePreBattleCommonEvent','Game_Action_setGuard','kuhkd','ActSeq_Motion_MotionType','XCTMM','updateLink','isDisarmLifeSteal','MlTiL','QRdVS','AsUser','applyImmortal','updateStatusWindowPosition','processAbort','makeTargetsBattleCoreJS','mEHXV','applySoftDamageCap','COjlW','PopupDuration','Scene_Map_initialize','refreshMotion','Game_Enemy_setup','ActSeq_Movement_MoveToTarget','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','updateShakeFlinch','okTargetSelectionVisibility','setHalfActionsPTB','bIskL','ZlrXL','skill','_currentAngle','Parse_Notetags_Action','rGnPK','Window_BattleLog_update','visualCutinPortraitFilename','Game_Action_executeHpDamage','isItem','MAXMP','_battlerHue','_targetOffsetX','loadSystem','processDefeat','mhp','KxmxQ','setupMotionBlurImpactFilter','custom','HP_Flat','Sprite_Actor_moveToStartPosition','setupHpGaugeSprite','CriticalHitFlat','resizeWindowXPStyle','GKRIO','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','startAction','isPartyCommandWindowDisabled','JS\x20%1END\x20BATTLE','_damages','createChildSprite','applyCritical','isGrowing','LJcDW','parent','isAffectedByBreakShield','setActionState','_borderPortraitSprite','Name','battlerShadowScaleX','QFWZc','ScaleX','_active','JIMGS','itemLifeStealRate','ActSeq_DB_DragonbonesMotionAni','setBattleSkew','targetsForOpponents','onMoveEnd','CmdIconOptions','extraPositionX','Scene_Map_launchBattle','nkHWN','gaugeX','wlgYv','SideviewSelect','_homeEasing','getHardDamageCap','CommandVisible','createShadowSprite','QOcbx','makeUniqueNames','ivMdY','addChildToUiContainer','VisuMZ_2_PartySystem','_forActor','WEAPON\x20SWAP','chant','VisuMZ_3_WeaknessDisplay','PreApplyAsTargetJS','AnaZf','worldTransform','ActSeq_Movement_Float','VnGfx','displayFailure','innerHeight','RolHc','HRGxh','Index','basicGaugesY','process_VisuMZ_BattleCore_Notetags','_weaponImageId','_injectAnimationSprite','SvMotionIdleSolo-%1-%2','addChildAt','GuardFormulaJS','_back1Sprite','CmdIconEscape','svBattlerData','bFJKC','isBattleRefreshRequested','ZeEzj','Game_Action_isForRandom','NhztD','lAlov','VisuMZ_2_BattleSystemSTB','WaitCount1','displayCritical','BziKx','HelpEscape','VisuMZ_2_AggroControlSystem','hpDamageFmt','floatBattler','TtKBz','StepDistanceX','regenerateAll','ActSeq_Camera_FocusTarget','setHandler','noise','Exploited','setupBattleCore','enemy','yDpub','Sprite_Battler_setHome','BattleSystemBTB','updateJump','EnemyOffsetX','MWptm','_statusType','IHETz','ActSeq_Mechanics_AddBuffDebuff','singleSkill','updateCollapse','currentSymbol','FollowTurn','showEnemyAttackAnimation','gYItK','DefaultSoftScaler','performAction','timeScale','moveBattlerHomeToPoint','%1Apply%2JS','SPbpH','HomePosJS','setHorrorEffectSettings','logWindowRect','WaitForOpacity','_tempActor','yUINp','cameraOffsetDuration','Game_Action_needsSelection','damage','PreRegenerateJS','CNmzU','updateBattlebackBitmap2','iEMCW','SvWeaponSolo-%1-%2','JS\x20%1END\x20TURN','CheckMapBattleEventValid','VoiceLine','fDfdh','ShowPopup','code','svActor','CalcActionSpeedJS','processRefresh','_branch','cLXHs','isFTB','bmHhQ','setupActionSet','pagedown','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','anchor','PostEndActionJS','CTB','processEnemyModeTouchBattleCore','ActSeq_Projectile_Animation','_spriteset','RtIli','JjjgU','VisuMZ_3_FrontviewBattleUI','updateCancel','LHhZt','lwwgy','GNFxW','_createCursorSprite','finishActionSet','EfZYz','YbDRy','cqfZP','addOptionsCommand','removeStatesAuto','eraseState','itemRect','AdjustRect','setSvBattlerSprite','mainSpriteScaleX','clearFreezeMotionForWeapons','GdhON','BattleManager_initMembers','JSON','Scene_Battle_updateStatusWindowPosition','arPenFlat','IARtQ','setValue','battleback1Name','ShowRemovedState','updateMain','checkShowHideSkillNotetags','XicCD','displayCurrentState','cancelActorInput','UvJDd','find','parallaxScrollX','isPhysical','turn','canGuardBattleCore','faceWidth','offsetX','attackMotions','forceAction','updateMotionCount','all\x20actors','onFloatEnd','cancelMpLifeSteal','toString','JVjQT','updateVisibility','OhfHu','QbrwU','<CENTER>%1','nameY','Game_Map_battleback1Name','ShowCounter','isMeleeMultiTargetAction','updatePhase','gTwwW','Game_Battler_performActionStart','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','opacityStart','Sprite_Weapon_loadBitmap','smoothness','ActionEnd','Window_PartyCommand_initialize','Game_Action_itemEffectAddAttackState','_createDamageContainer','EscapeSuccess','Sprite_Gauge_smoothness','displayChangedBuffs','ActSeq_Mechanics_BreakShieldChange','shouldDisperseDamage','JS\x20ESCAPE\x20SUCCESS','ChantStyle','placeActorName','getNextSubjectFromPool','contains','PGBBD','zxzXG','_tpbSceneChangeCacheActor','_targetGrowX','waitForFloat','StyleON','Game_Battler_startTpbTurn','battlerKey','startVisualCutin','ActSeq_Animation_ActionAnimation','performMiss','isDrain','ActSeq_BattleLog_WaitForNewLine','HJoPv','PostEndTurnJS','equipSlots','bnIyh','ActSeq_Projectile_Picture','Scene_Battle_onActorOk','updateOpacity','IfoNa','applyForcedGameTroopSettingsBattleCore','redraw','prepareCustomActionSequence','BTestBypass','_additionalSprites','aoEqa','drawEnemyName','extraPositionScaledY','ArRedRate','isShownOnBattlePortrait','itemHeight','getChildIndex','OffsetX','AllowRandomSpeed','refreshActorPortrait','drain','GOLXU','cjHwh','jLWbp','EscapeFail','freezeMotion','CastPhysical','lifeStealRate','skillWindowRect','Game_Interpreter_PluginCommand','onGrowEnd','ActSeq_Mechanics_FtbAction','HPHDX','Scene_Battle_initialize','Game_Map_battleback2Name','DdebP','_battlePortrait','createKeyJS','_createClientArea','effects','PrioritySortActors','isAnyoneMoving','fJvks','addCustomCommands','StatusWindowAttachmentFront','addShowHpGaugeCommand','Direction','setCommonEvent','qiSco','setupRgbSplitImpactFilter','Gtsam','vertCells','Window_BattleLog_performMiss','BgSGf','refreshBattlerMotions','subject','performActionEndMembers','backColor','bitmap','all\x20enemies','ActSeq_Horror_NoiseRemove','BhrfZ','AutoBattle','_forcedHomeX','DefaultStyle','maxCommands','eeHMe','Sprite_Actor_updateBitmap','isForAnyone','_frame','ShowHide','default','ncFuD','pha','_preBattleCommonEvent','isBorderStylePortraitShown','setBattlerFacePoint','setSTBExploited','escape','jnKyX','ActSeq_Inject_WaitForInjectAni','UWKDc','isSkipPartyCommandWindow','fCCzc','missile','hardDamageCap','_damagePopupArray','AttachStateOffsetX','ActSeq_Horror_TVRemove','updateAttachmentSprites','StatusWindowAttachmentBack','changeBattlerOpacity','quajZ','MP_Rate','ZwNlj','battlelog','maxLines','BattleStartEvent','isForAliveFriendBattleCore','ActSeq_Movement_BattleStep','Sprite_Battler_damageOffsetX','isTeamBased','wdBQa','1057554JmKCkP','GnadW','ActSeq_Target_RandTarget','updateShadowScale','isSceneChanging','_logWindow','value','_motionCount','ShowPortraits','JbfYT','visualCutinPortraitIndex','ActSeq_Movement_HomeMoveToJsPoint','_baseLineStack','checkTpbInputClose','Duration','wUohA','QHAir','equips','updateCustomActionSequence','BoostPoints','MAXHP','battleback2Name','frontviewSpriteY','fillRect','reverse','PopupPosition','moveBattlerDistance','ZRxrk','ldntJ','processVictory','gPwDU','_reflectionTarget','ITEM','JS\x20%1START\x20TURN','addSingleSkillCommand','onStaticEnemyBitmapLoad','createPartyCommandWindowBattleCore','_baseY','trueRandomTarget','Window_BattleLog_displayTpDamage','DigitGroupingDamageSprites','updateShadowBattleCore','ActSeq_Element_ForceElements','vNXlI','message2','setWaitMode','Sprite_Enemy_setHue','push','MRDWi','owHHy','_skewEasing','SIewM','Frame','isBypassDamageCap','forceMotion','DmczP','isGuard','createHelpWindow','displayStartMessages','VisuMZ_3_BattleAI','Parse_Notetags_TraitObjects','playBattleVoice','UoPvc','iconWidth','sibZC','partyCommandWindowRectXPStyle','addGeneralOptions','join','_flinched','wgBsh','WaitForSpin','FrontViewSelect','startOpacity','BreakShields','SkewX','hzkGT','_motionSpeed','setup','_floatEasing','guardHpLifeSteal','_battleCoreAddedElements','statusWindowRectDefaultStyle','commandSymbol','Window_BattleLog_pushBaseLine','processEscape','BattleDefeatJS','ActSeq_Element_AddElements','VisuMZ_2_BattleSystemATB','uqlMT','Skill-%1-%2','YvuKj','addMeleeReturnActionSet','cifIc','portraitType','animationWait','_phase','gaugeLineHeight','PcmOV','ActSeq_BattleLog_DisplayAction','drawTextEx','makeActions','setBattleAngle','cameraDuration','uzCgd','targetsForFriends','commandNameWindowDrawText','frameCount','Scene_Battle_createEnemyWindow','createTargetsJS','horzCells','playCancel','_eventId','MdWAQ','dead\x20friends','virtualClick','KoDKA','nDvwm','_effectDuration','CounterPlayback','mainFontSize','_targetOpacity','setActiveWeaponSet','expRate','updateStateSpriteBattleCore','isFrameVisible','ActSeq_Zoom_WaitForZoom','hue','NWmSi','_item','isOpen','notFocusValid','callOptions','Game_Interpreter_terminate','pageup','moveBattlerToPoint','update','createAttachmentSprites','hide','addGuardCommand','clearForcedGameTroopSettingsBattleCore','jgzKI','onEscapeFailure','MessageWait','right','waitForEffect','NameAlwaysHidden','pznGJ','Game_Map_encounterList','needsActorInputCancel','usePremadeActionSequence','startBattle','extendTroopMembers','iconIndex','CayyQ','setBattlerFlip','_preemptive','WaitForFloat','hXkRx','clearWeaponAnimation','endAnimation','IIWOn','isAutoBattleCommandEnabled','applyHardDamageCap','battleOpacity','vDlox','Scale','repeatTargets','performSubstitute','XGsvN','ActSeq_Camera_Clamp','drawItemImageXPStyle','battleEnd','itemWindowRect','hitRate','Game_Actor_makeActionList','NameAlwaysSelectOnly','turnOrderChangeOTB','_borderPortraitDuration','setSkill','actorCommandAutoBattle','NewPopupBottom','lastFilename','setHelpWindowItem','vDGKv','onBattleStartOnceParallels','Window_BattleLog_displayActionResults','isCertainHit','wtypeId','softDamageCapRate','addFightCommand','battleVoices','Rahaj','XPActorCommandLines','ActSeq_Projectile_Icon','BattleLogRectJS','BattleCmdList','name','getFullActionsPTB','TimeScale','registerCommand','battleStatusSprite','Intensity','loadBattleback2','_opacityDuration','_helpWindow','VisuMZ_2_BattleSystemBTB','GroupDigits','attackAnimationId2','hidden','onEscapeSuccess','Elements','Scene_Battle_start','terminate','autoBattle','AnchorX','_speed','setBattleCameraOffset','isSelected','AIrLT','changeTurnOrderByCTB','hasSkill','ActSeq_Impact_ZoomBlurPoint','drawSingleSkillCost','PreStartActionJS','mainSprite','gwgBa','Fjyph','sGbIG','Window_BattleLog_performCounter','head','setupTextPopup','isBattleTest','onActorOk','pushBaseLine','Debuffs','wGSZy','ForceExploited','_skillWindow','_stypeIDs','ActSeq_Motion_ClearFreezeFrame','ActiveTpbOptionsMessage','ActSeq_Movement_WaitForFloat','TPB','Sprite_Battler_updatePosition','missed','chantStyle','floor','selectedBattlers','SJSAl','_totalValue','length','sLuga','commandFight','ResetOffset','status','shadow','speed','_lastPluginCommandInterpreter','createBattleFieldContainer','_jumpWholeDuration','getConfigValue','makeCommandList','displayType','portraitHue','_targetSkewX','uiMenuStyle','getAttackWeaponAnimationId','waitForOpacity','setupIconTextPopup','_regionBattleback1','Scene_Battle_onActorCancel','_shadowScaleX','setHelpWindow','selectNextCommand','applyEasing','performCastAnimation','isOptionsCommandAdded','svBattlerAnchorX','nnFhV','extraPositionY','performLifeSteal','_actionBattlers','HITTYPE_MAGICAL','GICzJ','Game_Action_apply','nXjmo','KJJHj','parseForcedGameTroopSettingsBattleCore','Game_Action_setItem','startFloat','callOkHandler','_text','setupFont','Weapon-%1-%2','pNYkm','rec','removeOnceParallelInterpreter','textSizeEx','muBFv','Scene_Battle_createHelpWindow','_handlers','Game_Action_executeDamage','_floatDuration','isFightCommandEnabled','NBfYw','inputting','updateSpin','processAnimationRequests','ArRedFlat','xardZ','negativeHpLifeSteal','isBattlerGrounded','DefaultDamageStyle','BattleCore','clearElementChanges','buPvE','loop','ResetFocus','ActSeq_BattleLog_PushBaseLine','PartyCmd','setImmortal','CoreEngine','OhinP','ActSeq_Impact_ShockwaveCenterTargets','startInput','PBXhI','isDebuffAffected','_growX','rVFzn','ConvertCount','applyGlobalCommonEventNotetags','gIbwN','ActSeq_Mechanics_AtbGauge','makeData','isMVAnimation','Scene_Battle_windowAreaHeight','canEscape','requestFauxAnimation','ActSeq_Mechanics_StbRemoveExcessActions','updateTargetPosition','constructor','allowRandomSpeed','ZwLjH','clearDamagePopup','animationShouldMirror','AutoNotetag','WQMSW','isBusy','stepForward','XbUYX','mainSpriteHeight','WaitCount2','clearActiveWeaponSlot','qzFQD','isForOpponent','negativeMpLifeSteal','animationNextDelay','ActSeq_Movement_FacePoint','loadBitmap','_animationCount','ActSeq_Motion_PerformAction','isDeathStateAffected','_appeared','requestPointAnimation','commandName','_targetBattlerKey','egoCu','mpDamage','okButtonText','Game_Action_makeDamageValueDisperse','GetActionSequenceSpecialTarget','_growY','yIqsG','pImwC','performActionEnd','mpDamageFmt','_effectsContainer','lukEffectRate','opponentsUnit','autoSelectPriority','yCSEL','statusWindowRect','cBXjY','createMainSprite','ActSeq_Zoom_Scale','ActSeq_Mechanics_BtbGain','_targets','iLrYj','sYbGa','BoeCK','qzvCz','onSelectAction','portraitFilename','createBattleField','SceneManager_push','updateCallMenu','ActSeq_BattleLog_AddText','_partyCommandWindow','clone','createSeparateDamagePopups','globalAlpha','ParseItemNotetags','MIN_SAFE_INTEGER','mjKpS','zXfDC','acCgM','isTpb','Window_BattleLog_performDamage','hpAffected','encounterList','GRID\x20MOVE','drawText','Item-%1-%2','_offsetY','RegExp','startMotion','popupDamage','WaitForEntrance','flashDuration','wXTQL','bomCc','requestMotion','applyGlobal','EpQKZ','clearResult','ActSeq_Mechanics_BoostPointsStoreData','cancelTargetSelectionVisibility','ParseEnemyNotetags','Window_BattleLog_refresh','MotionSpeed','VisuMZ_2_HorrorEffects','bind','setFrame','gZBYL','zCbiV','AutoMeleeSolo','traitObjects','wEZVF','bLBPN','_deathStateApplied','ksjWt','updateScale','PostDamage%1JS','YRwDh','updateGrow','updatePointAnimations','isTriggered','Qfngp','isClicked','Game_Temp_requestAnimation','eggJp','KmOmV','Scene_Party','toUpperCase','fqysL','OsoOy','XkuTr','playOnceParallelInterpreter','_shakeFlinchDuration','ext','_back2Sprite','_commonEventQueue','forceEscapeSprite','ejhiO','Game_Action_clear','endAction','restore','battleInjectPrep','guardMpLifeSteal','_jumpHeight','alive\x20actors\x20not\x20user','alive\x20actors','600eyUPQq','context','WIDTH','ActSeq_Mechanics_DamagePopup','VisuMZ_2_BattleSystemPTB','_updateCursorFilterArea','SkewY','isChangingOpacity','ShowPortraitsBorderStyle','createDigits','Targets2','moveBattlerHomeDistance','sleep','jumpBattler','compareEnemySprite','angle','abnormal','pmgDJ','hasBeenDefeatedBefore','commandNameWindowCenter','JCdtg','Game_Action_itemEffectAddNormalState','zZayJ','BattleManager_selectNextCommand','BhtXA','SmoothImage','VisuMZ_3_ActSeqProjectiles','type','animationBaseDelay','ActSeq_Movement_WaitForJump','base','commandAutoBattle','TMLaf','kXOLp','_flashColor','motionSpeed','Window_BattleLog_displayFailure','ActSeq_Movement_MoveToPoint','XHOZw','STB','WaitForCamera','_stateIconSprite','drawItemStyleIconText','ActionCount','targetObjects','MaxLines','glitch','createString','setupWeaponAnimation','description','isBorderPortraitSpriteVisible','DbFLf','POST-','yzcvR','FlinchDistanceX','remove','xHtEJ','maxBattleMembers','CriticalHitRateJS','StatusWindowAttachmentBackOffsetY','adjustPosition_ScaleUp','CZxJR','startTurn','removeAnimationFromContainer','Window_BattleActor_show','addCombatLogCommand','actorId','uMokv','battleSkew','changeCtbCastTime','initialize','isItemCommandEnabled','_shadowSprite','updateWeather','fIbqj','isAlive','trim','BackColor','nWkkk','tvLti','PopupShiftX','_angleEasing','Game_BattlerBase_die','Actor-%1-%2','isOpponent','gPHKl','startHomeMove','addNewState','ZHEFo','startShakeFlinch','collapse','_svBattlerData','PDefk','PAQkI','round','isCancelled','showPortraits','JS\x20%1DAMAGE\x20%2','GurRe','Sprite_Battler_update','%1EndTurnJS','_immortal','zuvje','ActSeqImpact','getDefeatedEnemies','Parse_Notetags_Targets','makeActionList','expTotal','updateStyleOpacity','enemyId','clearAllVisualCutins','hpHealingFmt','_tempEquipCheck','Scene_Options_maxCommands','VoiceLineType','TP_Flat','_performActionEnd','DfvMB','ActSeq_Animation_WaitForAnimation','checkAutoCustomActionSequenceNotetagEffect','FocusX','TargetLocation','dmtqe','setLastPluginCommandInterpreter','StatusWindowSkinFilename','endBattle','alphabetic','aqNmm','meetsUsableItemConditions','actorCommandSingleSkill','_animation','startTpbTurn','recoverAll','battleAngle','attackStatesRate','canAddSkillCommand','troop','commandOptions','jsOneForOne','isPreviousScene','FVQDm','_autoBattleWindow','cThIW','AS\x20USER','updateBossCollapse','startSpin','Formula','waitForMovement','AutoBattleCancel','addDebuff','tADCS','setActiveWeaponSlot','idHxd','focus','ljaSh','ActSeq_BattleVoice_PlaySpecialLine','message4','ActSeq_Mechanics_CustomDmgFormula','_baseTexture','_forcedBattlers','_flipScaleX','_battlerContainer','_drawTextOutline','addAutoBattleCommand','_skewX','BattleManager_checkSubstitute','AneZq','setActorHome','_borderPortraitTargetX','commandEscape','createEffectActionSet','getEnemyIdWithName','isDuringNonLoopingMotion','%1-%2','VEbsl','ActSeq_Horror_TVCreate','Scene_Battle_startActorSelection','FocusY','helpWindowRectBorderStyle','PreStartTurnJS','drawItemBackground','PreDamage%1JS','NQvRz','Game_Actor_equips','ActionStart','updateActors','ActSeq_Movement_FaceJsPoint','NameAttachStateIcon','counterAttack','ActSeq_ChangeSkew','Scene_Battle_helpWindowRect','displayChangedStates','helpAreaBottom','ActSeq_Skew_WaitForSkew','maxItems','autoSelectLastSelected','performDamage','VisuMZ_3_BattleVoices','checkExtendTroopCompatibility','moveToStartPosition','performReflection','pbWhh','guardSkillId','GJRvl','WaitForMovement','onTurnEnd','randomInt','getItemDamageAmountTextOriginal','isCancelLifeSteal','JumpToLabel','makeDamageValue','HelpOptions','addActor','BuJxC','_homeX','createContents','_lines','battleSys','cggNG','addedBuffs','_animationSprites','ActSeq_Movement_MoveBy','inputtingAction','setSubject','EscapeSuccessJS','battleUIOffsetX','xtNWg','isTpbCharged','toLowerCase','ijERF','alive\x20friends\x20not\x20target','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','extraHeight','stateMotionIndex','windowPadding','vpGgR','UPAhJ','Strength','processExtendTroopMembers','list','OverallFormulaJS','autoBattleStart','VEdXc','putActiveBattlerOnTop','commandStyleCheck','makeTargetSprites','lcjZT','COMBAT\x20LOG','_autoBattle','gainFullActionsPTB','BattleAI','getAttackMotion','Game_Interpreter_command301','isLearnedSkill','SkipPartyCmd','ShowSubstitute','isForRandom','battleCommands','ActSeq_Target_NextTarget'];_0x3e27=function(){return _0x2f00d6;};return _0x3e27();}function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName[_0x4adfe0(0x6ec)]=Object['create'](Sprite_Name[_0x4adfe0(0x6ec)]),Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0xab3)]=Sprite_EnemyName,Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)]=function(){const _0x348dce=_0x4adfe0;Sprite_Name[_0x348dce(0x6ec)][_0x348dce(0xb7d)][_0x348dce(0x61e)](this),this[_0x348dce(0x324)]();},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x7d4)]=function(){const _0x57161e=_0x4adfe0;Sprite_Name[_0x57161e(0x6ec)][_0x57161e(0x7d4)]['call'](this),this[_0x57161e(0x2c6)]=0x0,this['_linkedSprite']=null,this['anchor']['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x324)]=function(){const _0x595fa6=_0x4adfe0;VisuMZ[_0x595fa6(0xa98)]['Settings']['Enemy'][_0x595fa6(0xbf2)]&&(_0x595fa6(0xa7d)!==_0x595fa6(0x9c0)?(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x595fa6(0x607)](this[_0x595fa6(0xb60)])):this[_0x595fa6(0x600)][_0x595fa6(0x415)]=this[_0x595fa6(0x9e0)]());},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x73d)]=function(){const _0x2a0f3d=_0x4adfe0;return Graphics[_0x2a0f3d(0xcc7)];},Sprite_EnemyName[_0x4adfe0(0x6ec)]['bitmapHeight']=function(){const _0x2e8b5f=_0x4adfe0;return this[_0x2e8b5f(0x5af)]=this['_lineHeight']||Window_Base[_0x2e8b5f(0x6ec)]['lineHeight']()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x459)]=function(){const _0x15ae99=_0x4adfe0;return VisuMZ[_0x15ae99(0xa98)]['Settings'][_0x15ae99(0x30b)][_0x15ae99(0x1dd)]||$gameSystem[_0x15ae99(0x9d6)]();},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x405)]=function(_0x8e134f){const _0xac46c9=_0x4adfe0;this[_0xac46c9(0x478)]=_0x8e134f;},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e6)]=function(){const _0x58e977=_0x4adfe0;Sprite_Name[_0x58e977(0x6ec)][_0x58e977(0x9e6)][_0x58e977(0x61e)](this),this[_0x58e977(0x7db)](),this[_0x58e977(0x1e0)](),this[_0x58e977(0x6d6)](),this[_0x58e977(0x8fb)]();},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x8fe)]=function(){const _0x4aee52=_0x4adfe0;this[_0x4aee52(0x1fc)]=undefined;const _0x2923bf=this[_0x4aee52(0xa23)](),_0x493f46=this[_0x4aee52(0x73d)](),_0x285b2d=Window_Base['prototype'][_0x4aee52(0x6ff)]();this[_0x4aee52(0xa83)](),this[_0x4aee52(0x932)][_0x4aee52(0x465)](),this[_0x4aee52(0x932)][_0x4aee52(0xafa)](_0x2923bf,0x0,0x0,_0x493f46,_0x285b2d,_0x4aee52(0x379));},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x7db)]=function(){const _0x10aec7=_0x4adfe0;if(!this[_0x10aec7(0x478)])return;if(this['_battler']!==this[_0x10aec7(0x478)]['_battler']){if(_0x10aec7(0x90d)===_0x10aec7(0x90d))this[_0x10aec7(0x9ac)](this[_0x10aec7(0x478)][_0x10aec7(0x26e)]);else{const _0x534019=_0x3fb5fa[_0x12930c];if(_0x534019)_0x4a01e4=this['equips']()['indexOf'](_0x534019);}}},Sprite_EnemyName[_0x4adfe0(0x6ec)]['updatePosition']=function(){const _0x33dce3=_0x4adfe0;if(!this[_0x33dce3(0x478)])return;this[_0x33dce3(0x5af)]=this[_0x33dce3(0x5af)]||Window_Base[_0x33dce3(0x6ec)]['lineHeight'](),this['x']=Math[_0x33dce3(0xb95)](this[_0x33dce3(0x478)][_0x33dce3(0x49e)]),this['y']=Math['round'](this[_0x33dce3(0x478)][_0x33dce3(0x984)]-this[_0x33dce3(0x5af)]*0.5);const _0x16ba26=VisuMZ[_0x33dce3(0xa98)][_0x33dce3(0x5bc)]['Enemy'];this['x']+=Math[_0x33dce3(0xb95)](_0x16ba26[_0x33dce3(0x7a3)]||0x0),this['y']+=Math['round'](_0x16ba26[_0x33dce3(0xc3b)]||0x0);},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x6d6)]=function(){const _0x4198d4=_0x4adfe0;this[_0x4198d4(0x474)]();},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x474)]=function(){const _0x1c1d1e=_0x4adfe0;if(!this['_stateIconSprite'])return;this[_0x1c1d1e(0x26e)]!==this['_stateIconSprite'][_0x1c1d1e(0x26e)]&&this['_stateIconSprite']['setup'](this[_0x1c1d1e(0x26e)]);const _0x424310=this['textWidth']();this[_0x1c1d1e(0x5af)]=this[_0x1c1d1e(0x5af)]||Window_Base['prototype']['lineHeight'](),this['_stateIconSprite']['x']=Math[_0x1c1d1e(0xb95)]((_0x424310+ImageManager['iconWidth'])/0x2)+0x8,this[_0x1c1d1e(0xb60)]['y']=this[_0x1c1d1e(0x5af)]/0x2;const _0x2decaa=VisuMZ[_0x1c1d1e(0xa98)]['Settings']['Enemy'];this['_stateIconSprite']['x']+=_0x2decaa[_0x1c1d1e(0x94f)]||0x0,this['_stateIconSprite']['y']+=_0x2decaa[_0x1c1d1e(0x172)]||0x0;},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x8fb)]=function(){const _0x53f4cb=_0x4adfe0,_0x594170=this['visibilityState']();if(_0x594170&&this[_0x53f4cb(0x2c6)]<0xff)_0x53f4cb(0x3ee)===_0x53f4cb(0x7f5)?(_0x556a80(_0x4044d6['format'](_0x53f4cb(0x441))),_0x46ffd7[_0x53f4cb(0x162)]()):this[_0x53f4cb(0x2c6)]+=0x10;else!_0x594170&&this[_0x53f4cb(0x2c6)]>0x0&&(_0x53f4cb(0x867)===_0x53f4cb(0x1ee)?(this['_action']['_reflectionTarget']=_0x315c40,this[_0x53f4cb(0x964)][_0x53f4cb(0x5d8)](_0x3cc986),this[_0x53f4cb(0x964)]['displayReflectionPlayBack'](_0x595a6,this[_0x53f4cb(0x3a3)]),this[_0x53f4cb(0x3a3)][_0x53f4cb(0x680)](_0x3e2ffc),this[_0x53f4cb(0x964)]['displayActionResults'](_0x33d519,_0x30559b)):this[_0x53f4cb(0x2c6)]-=0x10);},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0xce4)]=function(){const _0xf5e1cf=_0x4adfe0;if(this['isAlwaysHidden']()){if('bFJKC'===_0xf5e1cf(0x849))return![];else{const _0x2cfd50=this[_0xf5e1cf(0x2c4)](),_0x3d7c27=_0x535ee2[_0xf5e1cf(0xa98)][_0xf5e1cf(0x5bc)][_0xf5e1cf(0x35b)][_0xf5e1cf(0x372)],_0x4ac71a=_0x2cfd50===_0xf5e1cf(0x530)?_0x4db7b5[_0xf5e1cf(0x28e)]:_0xf5e1cf(0x329)[_0xf5e1cf(0x31d)](_0x3d7c27,_0x35e088[_0xf5e1cf(0x28e)]),_0x11bda0=this[_0xf5e1cf(0xb7e)]();this[_0xf5e1cf(0x3bc)](_0x4ac71a,'item',_0x11bda0);}}else{if(!this[_0xf5e1cf(0x26e)])return![];else{if(this[_0xf5e1cf(0x26e)][_0xf5e1cf(0xc5a)]())return![];else{if(!this[_0xf5e1cf(0x26e)]['isAppeared']()){if('iOtbb'!==_0xf5e1cf(0x7d2))return![];else{if(_0x577982[_0xf5e1cf(0x634)](/(.*):[ ](\d+)/i)){const _0x5c6173=_0x5b9749(_0x4bd37f['$1'])[_0xf5e1cf(0xb83)](),_0x53353d=_0x3cef64(_0x271dbf['$2']);_0x89e69[_0x5c6173]=_0x53353d,_0x4a8f4f+=_0x53353d;}else{if(_0x12c113[_0xf5e1cf(0x634)](/(.*):[ ](\d+\.?\d+)/i)){const _0x1cbf8f=_0x1847fb(_0x469061['$1'])[_0xf5e1cf(0xb83)](),_0x5b3bae=_0x98c81b(_0x500991['$2']);_0x465dbf[_0x1cbf8f]=_0x5b3bae,_0x1170af+=_0x5b3bae;}else _0x539177!==''&&(_0x388220[_0x504a54]=0x1,_0x3786f9++);}}}else{if(this[_0xf5e1cf(0x44d)]())return!![];else{if(this[_0xf5e1cf(0x4a8)]()){if(_0xf5e1cf(0x251)!==_0xf5e1cf(0x1bf))return!![];else{if(this['_jumpDuration']<=0x0)return;const _0x41ee1a=this['_jumpWholeDuration']-this[_0xf5e1cf(0x784)],_0x1a60d2=this[_0xf5e1cf(0xa62)]/0x2,_0x254616=this['_jumpMaxHeight'],_0x1f20a7=-_0x254616/_0x2888ec[_0xf5e1cf(0x15a)](_0x1a60d2,0x2);this['_jumpHeight']=_0x1f20a7*_0x199e56[_0xf5e1cf(0x15a)](_0x41ee1a-_0x1a60d2,0x2)+_0x254616,this[_0xf5e1cf(0x784)]--;if(this[_0xf5e1cf(0x784)]<=0x0)return this['onJumpEnd']();}}else{if(this[_0xf5e1cf(0x773)]())return!![];else{if(this['opacity']>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x317)]=function(){const _0x292e4f=_0x4adfe0;return VisuMZ['BattleCore'][_0x292e4f(0x5bc)][_0x292e4f(0x30b)][_0x292e4f(0x9f0)];},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x44d)]=function(){return![];},Sprite_EnemyName['prototype'][_0x4adfe0(0x4a8)]=function(){const _0x3ac24e=_0x4adfe0;return VisuMZ[_0x3ac24e(0xa98)]['Settings']['Enemy'][_0x3ac24e(0x5e0)];},Sprite_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x773)]=function(){const _0x5ebbb3=_0x4adfe0;if(VisuMZ[_0x5ebbb3(0xa98)][_0x5ebbb3(0x5bc)][_0x5ebbb3(0x30b)][_0x5ebbb3(0xa0e)]){if(_0x5ebbb3(0x7ab)!==_0x5ebbb3(0x94b))return this['_battler'][_0x5ebbb3(0xa38)]();else _0x26f271=_0x5af2ab*this['_multipliers']['damageRate'],_0x1d3f14+=this['_multipliers'][_0x5ebbb3(0x414)]*(_0x104f59>=0x0?0x1:-0x1),_0x36708d=this[_0x5ebbb3(0x61c)](_0x5ebbb3(0xbec),_0x26a169,_0x546511,![]),_0x562e14=this['applyDamageCaps'](_0x430668),_0x26e521=_0x1ae0f8[_0x5ebbb3(0xb95)](_0x1c6dad),this[_0x5ebbb3(0x21b)]=_0xae6e0f,this['_totalValue']=this[_0x5ebbb3(0xa58)]||0x0,this[_0x5ebbb3(0xa58)]+=_0x30d9d9,_0x2e03a1[_0x5ebbb3(0xa98)][_0x5ebbb3(0xa8c)][_0x5ebbb3(0x61e)](this,_0x5532aa,_0xdee045),this[_0x5ebbb3(0x61c)](_0x5ebbb3(0xb19),_0x2a6973,_0x138f14,!![]);}else{if(_0x5ebbb3(0x301)!==_0x5ebbb3(0xa07))return SceneManager[_0x5ebbb3(0x726)][_0x5ebbb3(0x6a7)]&&SceneManager[_0x5ebbb3(0x726)][_0x5ebbb3(0x6a7)][_0x5ebbb3(0x27e)]&&SceneManager[_0x5ebbb3(0x726)][_0x5ebbb3(0x6a7)][_0x5ebbb3(0xce2)][_0x5ebbb3(0x5d0)](this[_0x5ebbb3(0x26e)]);else this[_0x5ebbb3(0xb7f)]=new _0x4d4672(),this[_0x5ebbb3(0xb7f)][_0x5ebbb3(0x932)]=_0x32bd90['loadSystem'](_0x5ebbb3(0x3e5)),this[_0x5ebbb3(0xb7f)][_0x5ebbb3(0x932)][_0x5ebbb3(0x656)]=_0x1f1868[_0x5ebbb3(0xa98)]['Settings'][_0x5ebbb3(0x2e2)][_0x5ebbb3(0xb50)],this[_0x5ebbb3(0xb7f)]['anchor']['x']=0.5,this[_0x5ebbb3(0xb7f)][_0x5ebbb3(0x893)]['y']=0.5,this[_0x5ebbb3(0xb7f)]['y']=-0x2,this[_0x5ebbb3(0xb7f)][_0x5ebbb3(0x415)]=![],this['addChild'](this[_0x5ebbb3(0xb7f)]);}},Sprite_EnemyName[_0x4adfe0(0x6ec)]['textWidth']=function(){const _0x405c27=_0x4adfe0;if(!this[_0x405c27(0x26e)])return 0x0;if(this[_0x405c27(0x1fc)])return this[_0x405c27(0x1fc)];const _0x283ec3=this['name']();return this[_0x405c27(0xa83)](),this[_0x405c27(0x1fc)]=this[_0x405c27(0x932)][_0x405c27(0xc89)](_0x283ec3)||0x1,this[_0x405c27(0x1fc)];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xcb8)]=Sprite_Battleback[_0x4adfe0(0x6ec)][_0x4adfe0(0xf4)],Sprite_Battleback[_0x4adfe0(0x6ec)][_0x4adfe0(0xf4)]=function(){const _0x4ade4c=_0x4adfe0,_0xac9d24=VisuMZ['BattleCore'][_0x4ade4c(0x5bc)][_0x4ade4c(0x6d9)];if(!_0xac9d24)return VisuMZ['BattleCore'][_0x4ade4c(0xcb8)][_0x4ade4c(0x61e)](this);const _0x8be12=String(_0xac9d24[_0x4ade4c(0x938)])||'MZ';switch(_0x8be12){case'MZ':VisuMZ[_0x4ade4c(0xa98)][_0x4ade4c(0xcb8)]['call'](this);break;case _0x4ade4c(0xf6):this[_0x4ade4c(0x681)]();break;case'ScaleToFit':this[_0x4ade4c(0x709)]();break;case'ScaleDown':this['adjustPosition_ScaleDown']();break;case _0x4ade4c(0x1cb):this[_0x4ade4c(0xb73)]();break;}},Sprite_Battleback['prototype'][_0x4adfe0(0x681)]=function(){const _0x5b40c0=_0x4adfe0,_0x4c85c8=VisuMZ[_0x5b40c0(0xa98)][_0x5b40c0(0x5bc)]['BattlebackScale'];if(_0x4c85c8&&_0x4c85c8[_0x5b40c0(0xbc1)])return _0x4c85c8[_0x5b40c0(0xbc1)][_0x5b40c0(0x61e)](this);this[_0x5b40c0(0x1e2)]=Graphics[_0x5b40c0(0x1e2)],this['height']=Graphics[_0x5b40c0(0x6a1)];const _0xe8eb9a=0x1;this[_0x5b40c0(0xfc)]['x']=_0xe8eb9a,this[_0x5b40c0(0xfc)]['y']=_0xe8eb9a,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x4adfe0(0x6ec)][_0x4adfe0(0x709)]=function(){const _0x2a33bd=_0x4adfe0,_0x15e610=VisuMZ[_0x2a33bd(0xa98)][_0x2a33bd(0x5bc)][_0x2a33bd(0x6d9)];if(_0x15e610&&_0x15e610['jsScaleToFit'])return _0x15e610[_0x2a33bd(0x30e)]['call'](this);this[_0x2a33bd(0x1e2)]=Graphics[_0x2a33bd(0x1e2)],this[_0x2a33bd(0x6a1)]=Graphics[_0x2a33bd(0x6a1)];const _0x126321=this[_0x2a33bd(0x1e2)]/this['bitmap'][_0x2a33bd(0x1e2)],_0x209bb9=this[_0x2a33bd(0x6a1)]/this[_0x2a33bd(0x932)][_0x2a33bd(0x6a1)],_0x5521b6=Math[_0x2a33bd(0x7a0)](_0x126321,_0x209bb9);this['scale']['x']=_0x5521b6,this[_0x2a33bd(0xfc)]['y']=_0x5521b6,this['x']=(Graphics[_0x2a33bd(0x1e2)]-this[_0x2a33bd(0x1e2)])/0x2,this['y']=Graphics[_0x2a33bd(0x6a1)]-this['height'];},Sprite_Battleback[_0x4adfe0(0x6ec)][_0x4adfe0(0x3c9)]=function(){const _0x4f9868=_0x4adfe0,_0x548dd5=VisuMZ['BattleCore'][_0x4f9868(0x5bc)]['BattlebackScale'];if(_0x548dd5&&_0x548dd5['jsScaleDown'])return _0x4f9868(0x4f5)!==_0x4f9868(0x728)?_0x548dd5['jsScaleDown'][_0x4f9868(0x61e)](this):_0x41c255[_0x4f9868(0x15d)][_0x4f9868(0x634)](/<COMMAND ICON: (\d+)>/i)?_0x42f10f(_0x1909d5['$1']):_0xd18b78[_0x4f9868(0x9f7)];this['width']=Graphics[_0x4f9868(0x1e2)],this['height']=Graphics[_0x4f9868(0x6a1)];const _0x103991=Math[_0x4f9868(0x258)](0x1,this[_0x4f9868(0x1e2)]/this['bitmap'][_0x4f9868(0x1e2)]),_0x16b366=Math['min'](0x1,this['height']/this[_0x4f9868(0x932)][_0x4f9868(0x6a1)]),_0x4c00e9=Math[_0x4f9868(0x7a0)](_0x103991,_0x16b366);this[_0x4f9868(0xfc)]['x']=_0x4c00e9,this[_0x4f9868(0xfc)]['y']=_0x4c00e9,this['x']=(Graphics[_0x4f9868(0x1e2)]-this[_0x4f9868(0x1e2)])/0x2,this['y']=Graphics[_0x4f9868(0x6a1)]-this[_0x4f9868(0x6a1)];},Sprite_Battleback['prototype']['adjustPosition_ScaleUp']=function(){const _0x193fe4=_0x4adfe0,_0xd70748=VisuMZ[_0x193fe4(0xa98)]['Settings'][_0x193fe4(0x6d9)];if(_0xd70748&&_0xd70748[_0x193fe4(0xe0)]){if(_0x193fe4(0x24e)!=='EhBMC')_0x1d2671[_0x193fe4(0xa98)][_0x193fe4(0xb4e)][_0x193fe4(0x61e)](this);else return _0xd70748[_0x193fe4(0xe0)][_0x193fe4(0x61e)](this);}this[_0x193fe4(0x1e2)]=Graphics['width'],this[_0x193fe4(0x6a1)]=Graphics['height'];const _0x375052=Math[_0x193fe4(0x7a0)](0x1,this['width']/this['bitmap'][_0x193fe4(0x1e2)]),_0x214dd3=Math[_0x193fe4(0x7a0)](0x1,this[_0x193fe4(0x6a1)]/this[_0x193fe4(0x932)][_0x193fe4(0x6a1)]),_0x258be5=Math['max'](_0x375052,_0x214dd3);this[_0x193fe4(0xfc)]['x']=_0x258be5,this[_0x193fe4(0xfc)]['y']=_0x258be5,this['x']=(Graphics['width']-this[_0x193fe4(0x1e2)])/0x2,this['y']=Graphics['height']-this[_0x193fe4(0x6a1)];},Spriteset_Battle[_0x4adfe0(0xcae)]=![],Spriteset_Battle['prototype'][_0x4adfe0(0x5a1)]=function(){const _0x533581=_0x4adfe0;if(!$gameSystem[_0x533581(0x1bc)]())return![];return![];},Spriteset_Battle['prototype'][_0x4adfe0(0xb53)]=function(){return 0x0;},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xac3)]=function(){return 0x0;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x78d)]=Spriteset_Battle[_0x4adfe0(0x6ec)]['createLowerLayer'],Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x107)]=function(){const _0x432270=_0x4adfe0;VisuMZ['BattleCore']['Spriteset_Battle_createLowerLayer']['call'](this),this['createWeather'](),this[_0x432270(0x314)]();},VisuMZ[_0x4adfe0(0xa98)]['Spriteset_Battle_update']=Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e6)],Spriteset_Battle[_0x4adfe0(0x6ec)]['update']=function(){const _0x753ac6=_0x4adfe0;VisuMZ[_0x753ac6(0xa98)][_0x753ac6(0x38d)][_0x753ac6(0x61e)](this),this[_0x753ac6(0x25e)](),this['updateUiContainerPosition'](),this[_0x753ac6(0xb80)]();},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x4df)]=function(){const _0x5b361c=_0x4adfe0;this[_0x5b361c(0x126)]=new Weather(),this[_0x5b361c(0x4b5)][_0x5b361c(0x607)](this[_0x5b361c(0x126)]);},Spriteset_Battle['prototype'][_0x4adfe0(0xb80)]=function(){const _0x105170=_0x4adfe0;this[_0x105170(0x126)][_0x105170(0xb52)]=$gameScreen['weatherType'](),this[_0x105170(0x126)]['power']=$gameScreen[_0x105170(0x277)]();},Game_Interpreter[_0x4adfe0(0x6ec)]['command236']=function(_0x7e6031){const _0x1e515d=_0x4adfe0;$gameScreen[_0x1e515d(0x42f)](_0x7e6031[0x0],_0x7e6031[0x1],_0x7e6031[0x2]);if(_0x7e6031[0x3])this['wait'](_0x7e6031[0x2]);return!![];},VisuMZ['BattleCore'][_0x4adfe0(0x2a0)]=Game_Interpreter['prototype']['command283'],Game_Interpreter[_0x4adfe0(0x6ec)][_0x4adfe0(0x4fe)]=function(_0x434941){const _0x107e2f=_0x4adfe0;if(SceneManager[_0x107e2f(0xcfa)]())return SceneManager[_0x107e2f(0x726)][_0x107e2f(0x898)][_0x107e2f(0x6d2)](_0x434941[0x0],_0x434941[0x1]),!![];else{if('MIcRz'===_0x107e2f(0x992))_0x30ed2d[_0x107e2f(0xbcc)](_0xb54128,_0x30a78f);else return VisuMZ[_0x107e2f(0xa98)]['Game_Interpreter_command283'][_0x107e2f(0x61e)](this,_0x434941);}},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x516)]=function(_0x1151fa,_0x57379e){const _0x340731=_0x4adfe0;_0x1151fa[_0x340731(0x932)]=_0x57379e;},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x6d2)]=function(_0x51a71f,_0x27cde3){const _0x56199e=_0x4adfe0;_0x51a71f=_0x51a71f||'',_0x27cde3=_0x27cde3||'';_0x51a71f===''&&_0x27cde3===''&&(_0x51a71f=this[_0x56199e(0x846)]['battleback1Name'](),_0x27cde3=this[_0x56199e(0xb2b)][_0x56199e(0x974)]());const _0x59f853=ImageManager[_0x56199e(0x273)](_0x51a71f),_0x1ec86d=ImageManager[_0x56199e(0xa29)](_0x27cde3);_0x59f853['addLoadListener'](this[_0x56199e(0x231)][_0x56199e(0xb0e)](this,this[_0x56199e(0x846)],this[_0x56199e(0xb2b)],_0x59f853,_0x1ec86d));},Spriteset_Battle['prototype'][_0x4adfe0(0x231)]=function(_0x4f9eae,_0x18641f,_0x5c73b1,_0x4ab3e8){const _0x1997e8=_0x4adfe0;_0x4ab3e8[_0x1997e8(0x5c5)](this[_0x1997e8(0x880)]['bind'](this,_0x4f9eae,_0x18641f,_0x5c73b1,_0x4ab3e8));},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x880)]=function(_0x5bfd9a,_0x4b85ac,_0x1ced77,_0x28f9b8){const _0x57ce28=_0x4adfe0;_0x5bfd9a[_0x57ce28(0x932)]=_0x1ced77,_0x4b85ac[_0x57ce28(0x932)]=_0x28f9b8,_0x5bfd9a[_0x57ce28(0xf4)](),_0x4b85ac['adjustPosition']();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x247)]=Spriteset_Battle['prototype'][_0x4adfe0(0xae8)],Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xae8)]=function(){const _0x122917=_0x4adfe0;VisuMZ[_0x122917(0xa98)]['Spriteset_Battle_createBattleField']['call'](this),this[_0x122917(0x15c)]();},Spriteset_Battle['prototype'][_0x4adfe0(0x15c)]=function(){const _0x21f626=_0x4adfe0;this[_0x21f626(0xa61)](),this['createUIContainer'](),this[_0x21f626(0x453)](),this['createDamageContainer'](),this[_0x21f626(0xce3)]();},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xa61)]=function(){const _0x17759e=_0x4adfe0;this[_0x17759e(0xbd8)]=new Sprite(),this[_0x17759e(0x4b5)]['addChild'](this[_0x17759e(0xbd8)]);},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x453)]=function(){const _0xcfb1b=_0x4adfe0;this[_0xcfb1b(0x347)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?_0xcfb1b(0x679)===_0xcfb1b(0x811)?this[_0xcfb1b(0x8ea)]=null:this[_0xcfb1b(0x607)](this['_animationContainer']):this[_0xcfb1b(0x4b5)][_0xcfb1b(0x607)](this[_0xcfb1b(0x347)]);},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xccf)]=function(){const _0x1e91a5=_0x4adfe0;this['_damageContainer']=new Sprite(),this[_0x1e91a5(0x6c3)]['x']=this[_0x1e91a5(0x4b5)]['x'],this['_damageContainer']['y']=this['_battleField']['y'],this[_0x1e91a5(0x607)](this['_damageContainer']);},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xce3)]=function(){const _0x11f1e5=_0x4adfe0;if(!this['isFlipped']())return;this['_battlerContainer'][_0x11f1e5(0xfc)]['x']=-0x1,this[_0x11f1e5(0xbd8)]['x']=this[_0x11f1e5(0x4b5)][_0x11f1e5(0x1e2)],this['_uiContainer']['scale']['x']=-0x1,this['_uiContainer']['x']=this[_0x11f1e5(0x4b5)][_0x11f1e5(0x1e2)],this[_0x11f1e5(0x347)][_0x11f1e5(0xfc)]['x']=-0x1,this['_animationContainer']['x']=this[_0x11f1e5(0x4b5)][_0x11f1e5(0x1e2)],this['_damageContainer']['scale']['x']=-0x1,this[_0x11f1e5(0x6c3)]['x']=this[_0x11f1e5(0x4b5)]['x']+this['_battleField']['width'];},Spriteset_Battle[_0x4adfe0(0x6ec)]['createEnemies']=function(){const _0x287d02=_0x4adfe0;Imported[_0x287d02(0x56a)]&&this[_0x287d02(0x371)]()&&this[_0x287d02(0x4f8)]();const _0x2f0662=$gameTroop[_0x287d02(0x42b)](),_0x11ef16=[];for(const _0x2c06dd of _0x2f0662){_0x11ef16[_0x287d02(0x98e)](new Sprite_Enemy(_0x2c06dd));}_0x11ef16[_0x287d02(0x712)](this[_0x287d02(0xb45)][_0x287d02(0xb0e)](this));for(const _0x4e38f3 of _0x11ef16){if(_0x287d02(0x21e)==='XVBsl')return!![];else this[_0x287d02(0xbd8)][_0x287d02(0x607)](_0x4e38f3);}this[_0x287d02(0x487)]=_0x11ef16;},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x4fc)]=function(){const _0xbb9556=_0x4adfe0;this[_0xbb9556(0x5a4)]=[];for(let _0x5335cd=0x0;_0x5335cd<$gameParty['maxBattleMembers']();_0x5335cd++){const _0x10d819=$gameParty[_0xbb9556(0xc7b)]()[_0x5335cd],_0x4e818d=new Sprite_Actor();_0x4e818d['moveToStartPositionBattleCore'](_0x10d819),_0x4e818d[_0xbb9556(0x6ad)](_0x10d819),_0x4e818d[_0xbb9556(0x9e6)](),this['_actorSprites'][_0xbb9556(0x98e)](_0x4e818d),this[_0xbb9556(0xbd8)][_0xbb9556(0x607)](_0x4e818d);}},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x648)]=function(_0x41ff93,_0xed7ee3,_0x3508a0,_0x578d02){const _0x41da1a=_0x4adfe0,_0x3cdb56=this[_0x41da1a(0xaad)](_0xed7ee3),_0x476616=new(_0x3cdb56?Sprite_AnimationMV:Sprite_Animation)(),_0x414635=this['makeTargetSprites'](_0x41ff93);this['animationShouldMirror'](_0x41ff93[0x0])&&(_0x41da1a(0x45a)!==_0x41da1a(0x408)?_0x3508a0=!_0x3508a0:this[_0x41da1a(0x9be)]=_0x41da1a(0x8bf)),_0x476616[_0x41da1a(0xb63)]=_0x41ff93,_0x476616[_0x41da1a(0x9ac)](_0x414635,_0xed7ee3,_0x3508a0,_0x578d02),this[_0x41da1a(0x574)](_0x476616);},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x574)]=function(_0x3da369){const _0x176b72=_0x4adfe0;this[_0x176b72(0x542)](_0x3da369)?(this[_0x176b72(0x545)]()[_0x176b72(0x607)](_0x3da369),_0x3da369[_0x176b72(0xa27)]=!![]):_0x176b72(0xb21)!==_0x176b72(0xb21)?this[_0x176b72(0x66b)]():(this[_0x176b72(0x347)][_0x176b72(0x607)](_0x3da369),Spriteset_Battle[_0x176b72(0xcae)]&&('mAoRW'===_0x176b72(0xa85)?(_0x11a1d4[_0x176b72(0xa98)]['Game_Battler_clearMotion'][_0x176b72(0x61e)](this),this[_0x176b72(0x396)]()):(this[_0x176b72(0x347)]['x']=this[_0x176b72(0xad7)]['x'],this['_animationContainer']['y']=this['_effectsContainer']['y']))),this[_0x176b72(0xc13)]['push'](_0x3da369);},Spriteset_Battle[_0x4adfe0(0x6ec)]['isAnimationShownOnBattlePortrait']=function(_0x276e97){const _0x2dba11=_0x4adfe0;if(!_0x276e97)return![];if(!_0x276e97[_0x2dba11(0xbb9)])return![];if(!_0x276e97[_0x2dba11(0xb63)][0x0])return![];if(_0x276e97[_0x2dba11(0xb63)][0x0][_0x2dba11(0x771)]&&!_0x276e97[_0x2dba11(0xb63)][0x0][_0x2dba11(0x771)]())return![];if($gameSystem[_0x2dba11(0x1bc)]())return![];if(!this[_0x2dba11(0x545)]())return![];if(_0x276e97[_0x2dba11(0xab3)]===Sprite_Animation){if(_0x276e97[_0x2dba11(0xbb9)][_0x2dba11(0xa65)]!==0x0)return![];}else{if(_0x276e97[_0x2dba11(0xab3)]===Sprite_AnimationMV){if(_0x276e97[_0x2dba11(0xbb9)][_0x2dba11(0x2a7)]===0x3)return![];}}return!![];const _0x4fe0bf=Window_BattleStatus[_0x2dba11(0x6ec)][_0x2dba11(0xca7)]();return['xp',_0x2dba11(0xcac)][_0x2dba11(0x8e7)](_0x4fe0bf);},Spriteset_Battle['prototype'][_0x4adfe0(0x545)]=function(){const _0x923dc8=_0x4adfe0;if(!SceneManager[_0x923dc8(0x726)])return null;if(!SceneManager[_0x923dc8(0x726)][_0x923dc8(0x326)])return null;if(!SceneManager[_0x923dc8(0x726)][_0x923dc8(0x326)]['_effectsContainer'])return null;return SceneManager[_0x923dc8(0x726)][_0x923dc8(0x326)][_0x923dc8(0xad7)];},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x403)]=function(_0x13e31){const _0x4b8b69=_0x4adfe0;this[_0x4b8b69(0xb76)](_0x13e31);for(const _0x20c417 of _0x13e31[_0x4b8b69(0xb63)]){if(_0x20c417[_0x4b8b69(0x9fe)]){if('uSxgy'!=='uSxgy'){_0x5ab936(_0x4b8b69(0x79c)),_0x21de73[_0x4b8b69(0x162)]();return;}else _0x20c417[_0x4b8b69(0x9fe)]();}}_0x13e31[_0x4b8b69(0x6ab)]();},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xb76)]=function(_0x2dfa87){const _0x208f74=_0x4adfe0;this['isAnimationShownOnBattlePortrait'](_0x2dfa87)?this[_0x208f74(0x545)]()[_0x208f74(0xc4e)](_0x2dfa87):this[_0x208f74(0x347)][_0x208f74(0xc4e)](_0x2dfa87);this['_effectsContainer'][_0x208f74(0xc4e)](_0x2dfa87),this[_0x208f74(0x347)]['removeChild'](_0x2dfa87),this[_0x208f74(0xc13)][_0x208f74(0xb6e)](_0x2dfa87);if(this[_0x208f74(0x1d4)])this[_0x208f74(0x1d4)][_0x208f74(0xb6e)](_0x2dfa87);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x1b5)]=Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xbf0)],Spriteset_Battle['prototype'][_0x4adfe0(0xbf0)]=function(){const _0x2a4c97=_0x4adfe0;VisuMZ[_0x2a4c97(0xa98)][_0x2a4c97(0x1b5)][_0x2a4c97(0x61e)](this),this[_0x2a4c97(0x25e)]();},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x25e)]=function(){const _0x4aa556=_0x4adfe0;this['_battlerContainer'][_0x4aa556(0x3be)]['sort'](this[_0x4aa556(0x757)][_0x4aa556(0xb0e)](this)),this[_0x4aa556(0xc2a)]();if(!this[_0x4aa556(0xbd8)])return;this[_0x4aa556(0xbd8)][_0x4aa556(0x2c6)]=this[_0x4aa556(0x52b)]();},Spriteset_Battle[_0x4adfe0(0x6ec)]['compareBattlerSprites']=function(_0x380de7,_0x2abced){const _0x4eb928=_0x4adfe0;if(VisuMZ['BattleCore'][_0x4eb928(0x5bc)][_0x4eb928(0x2e2)][_0x4eb928(0x920)]){if('SaLsF'==='SaLsF'){if(_0x380de7[_0x4eb928(0x26e)]&&_0x2abced['_battler']){if(_0x4eb928(0x9c6)!==_0x4eb928(0x2dd)){if(_0x380de7['_battler'][_0x4eb928(0x771)]()&&_0x2abced[_0x4eb928(0x26e)][_0x4eb928(0x13b)]()){if(_0x4eb928(0x8ca)!==_0x4eb928(0x8ca))_0xccba68[_0x4eb928(0xa98)][_0x4eb928(0x1bd)][_0x4eb928(0x61e)](this,_0xb07553),this[_0x4eb928(0x1ea)](_0x3a60db);else return 0x1;}else{if(_0x2abced['_battler'][_0x4eb928(0x771)]()&&_0x380de7[_0x4eb928(0x26e)]['isEnemy']())return-0x1;}}else{this['removeAnimationFromContainer'](_0x4e8b69);for(const _0x2c212a of _0x4187fb[_0x4eb928(0xb63)]){_0x2c212a[_0x4eb928(0x9fe)]&&_0x2c212a[_0x4eb928(0x9fe)]();}_0x15d666[_0x4eb928(0x6ab)]();}}}else{this['_borderPortraitSprite'][_0x4eb928(0x415)]=this[_0x4eb928(0xb69)]();const _0x549702=_0x1f8d61[_0x4eb928(0xcf8)](),_0xb5b6aa=_0x549702?_0x549702['getBattlePortraitFilename']()||'':'';if(_0x549702===this[_0x4eb928(0x815)][_0x4eb928(0xcf8)]&&_0xb5b6aa===this[_0x4eb928(0x815)][_0x4eb928(0xa14)])return;this[_0x4eb928(0x815)][_0x4eb928(0xcf8)]=_0x549702||this[_0x4eb928(0x815)][_0x4eb928(0xcf8)],this['_borderPortraitSprite'][_0x4eb928(0xa14)]=_0xb5b6aa;if(!_0x549702)return;else{if(_0xb5b6aa===''){this[_0x4eb928(0x815)][_0x4eb928(0x932)]=_0x2dd6ad[_0x4eb928(0xc4d)],this[_0x4eb928(0x815)]['lastFilename']='';return;}else{const _0x4c1f71=_0x5b5c0d[_0x4eb928(0xc53)](_0xb5b6aa);this[_0x4eb928(0x815)][_0x4eb928(0x2c6)]=0x0,_0x4c1f71['addLoadListener'](this[_0x4eb928(0x2e6)]['bind'](this,_0x4c1f71));}}}}if(_0x380de7[_0x4eb928(0x984)]!==_0x2abced['_baseY']){if(_0x4eb928(0x438)!=='ylwTb')return _0x380de7[_0x4eb928(0x984)]-_0x2abced[_0x4eb928(0x984)];else _0x219045[_0x4eb928(0xabf)]();}else return _0x2abced[_0x4eb928(0x100)]-_0x380de7[_0x4eb928(0x100)];},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xc2a)]=function(){const _0x54fa0a=_0x4adfe0;if(!VisuMZ['BattleCore'][_0x54fa0a(0x5bc)][_0x54fa0a(0x2e2)]['PrioritySortActive'])return;const _0x464204=BattleManager['_subject'];if(_0x464204){if(_0x464204[_0x54fa0a(0x771)]()&&!$gameSystem[_0x54fa0a(0x1bc)]())return;const _0x3a73b5=_0x464204[_0x54fa0a(0xc66)]();if(_0x3a73b5&&_0x464204[_0x54fa0a(0x771)]())this[_0x54fa0a(0xbd8)]['addChild'](_0x3a73b5);}},Spriteset_Battle['prototype']['processEscape']=function(){const _0x63e5ff=_0x4adfe0;for(const _0x2eacaa of $gameParty[_0x63e5ff(0x66d)]()){if(!_0x2eacaa)continue;if(!_0x2eacaa[_0x63e5ff(0xc66)]())continue;_0x2eacaa[_0x63e5ff(0xc66)]()[_0x63e5ff(0xb2d)]=!![],_0x2eacaa[_0x63e5ff(0xc66)]()['retreat']();}},Spriteset_Battle[_0x4adfe0(0x6ec)]['createUIContainer']=function(){const _0x4b1806=_0x4adfe0;this[_0x4b1806(0x3bf)]=new Sprite(),Spriteset_Battle[_0x4b1806(0xcae)]?this[_0x4b1806(0x607)](this[_0x4b1806(0x3bf)]):this[_0x4b1806(0x4b5)]['addChild'](this['_uiContainer']),SceneManager[_0x4b1806(0x726)][_0x4b1806(0x3bf)]=this['_uiContainer'];},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x314)]=function(){const _0x1e3dd7=_0x4adfe0;if(VisuMZ['BattleCore']['Settings'][_0x1e3dd7(0x30b)]['NameLegacy'])return;this[_0x1e3dd7(0x794)]=new Sprite(),BattleManager['addChildToUiContainer'](this[_0x1e3dd7(0x794)]);for(const _0x1478a4 of this['_enemySprites']){const _0x146a04=new Sprite_EnemyName();this[_0x1e3dd7(0x794)][_0x1e3dd7(0x607)](_0x146a04),_0x146a04['linkSprite'](_0x1478a4);}},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x65d)]=function(){const _0x1e18db=_0x4adfe0;if(!this['_damageContainer'])return;if(!this[_0x1e18db(0x3bf)])return;const _0x4f4591=Spriteset_Battle[_0x1e18db(0xcae)]?this[_0x1e18db(0x6c3)]['x']:0x0,_0x7d3ade=Spriteset_Battle[_0x1e18db(0xcae)]?this[_0x1e18db(0x6c3)]['y']:0x0,_0x38fc3b=Imported[_0x1e18db(0x3cb)]?this[_0x1e18db(0x4b5)]['x']:0x0,_0x9e6cba=Imported[_0x1e18db(0x3cb)]?this[_0x1e18db(0x4b5)]['y']:0x0;this[_0x1e18db(0x3bf)]['x']=_0x4f4591+_0x38fc3b,this['_uiContainer']['y']=_0x7d3ade+_0x9e6cba;},BattleManager[_0x4adfe0(0x82f)]=function(_0x59bd9a){const _0x5405f2=_0x4adfe0;if(!SceneManager[_0x5405f2(0x726)][_0x5405f2(0x3bf)])return;SceneManager[_0x5405f2(0x726)][_0x5405f2(0x3bf)][_0x5405f2(0x607)](_0x59bd9a);},Spriteset_Battle['prototype'][_0x4adfe0(0x52b)]=function(){return 0xff;},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xaba)]=function(){return![];},Spriteset_Battle['prototype'][_0x4adfe0(0x19e)]=function(){const _0xc388ef=_0x4adfe0;return this['battlerSprites']()[_0xc388ef(0x3b9)](_0x19c263=>_0x19c263['isFloating']());},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x543)]=function(){const _0x8d0ee0=_0x4adfe0;return this['battlerSprites']()[_0x8d0ee0(0x3b9)](_0x3c265e=>_0x3c265e[_0x8d0ee0(0x14d)]());},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0xcb9)]=function(){const _0x279376=_0x4adfe0;return this[_0x279376(0x499)]()[_0x279376(0x3b9)](_0x5f4964=>_0x5f4964[_0x279376(0x810)]());},Spriteset_Battle[_0x4adfe0(0x6ec)]['isAnyoneSkewing']=function(){const _0x2d3b56=_0x4adfe0;return this[_0x2d3b56(0x499)]()['some'](_0x12e85b=>_0x12e85b[_0x2d3b56(0x77c)]());},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x6fa)]=function(){const _0x1c1c0d=_0x4adfe0;return this[_0x1c1c0d(0x499)]()[_0x1c1c0d(0x3b9)](_0x14abb0=>_0x14abb0['isSpinning']());},Spriteset_Battle[_0x4adfe0(0x6ec)][_0x4adfe0(0x254)]=function(){const _0x2fd6f3=_0x4adfe0;return this['battlerSprites']()[_0x2fd6f3(0x3b9)](_0x2a21c2=>_0x2a21c2[_0x2fd6f3(0xb3e)]());},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x723)]=Window_ItemList[_0x4adfe0(0x6ec)]['maxCols'],Window_ItemList['prototype'][_0x4adfe0(0x78a)]=function(){const _0x223462=_0x4adfe0;return SceneManager['isSceneBattle']()?SceneManager[_0x223462(0x726)]['battleLayoutStyle']()===_0x223462(0x2a2)?VisuMZ[_0x223462(0xa98)]['Settings'][_0x223462(0x22d)]['SkillItemBorderCols']:VisuMZ['BattleCore'][_0x223462(0x5bc)][_0x223462(0x22d)]['SkillItemStandardCols']:VisuMZ[_0x223462(0xa98)][_0x223462(0x723)]['call'](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x7ae)]=Window_SkillList['prototype'][_0x4adfe0(0x78a)],Window_SkillList['prototype']['maxCols']=function(){const _0x36d8e9=_0x4adfe0;if(SceneManager[_0x36d8e9(0xcfa)]()){if(SceneManager[_0x36d8e9(0x726)]['battleLayoutStyle']()===_0x36d8e9(0x2a2)){if(_0x36d8e9(0x84e)===_0x36d8e9(0x703)){if(!_0x2672db)return![];if(!_0x11df17[_0x36d8e9(0xbb9)])return![];if(!_0x51391e[_0x36d8e9(0xb63)][0x0])return![];if(_0x5da5a9[_0x36d8e9(0xb63)][0x0]['isActor']&&!_0x56a983[_0x36d8e9(0xb63)][0x0]['isActor']())return![];if(_0x55c023[_0x36d8e9(0x1bc)]())return![];if(!this[_0x36d8e9(0x545)]())return![];if(_0x56b644[_0x36d8e9(0xab3)]===_0x46c998){if(_0xd7fdc9[_0x36d8e9(0xbb9)][_0x36d8e9(0xa65)]!==0x0)return![];}else{if(_0x5c0e94[_0x36d8e9(0xab3)]===_0x3fc67c){if(_0x15e822[_0x36d8e9(0xbb9)][_0x36d8e9(0x2a7)]===0x3)return![];}}return!![];const _0x49dc07=_0x2a2b34[_0x36d8e9(0x6ec)][_0x36d8e9(0xca7)]();return['xp',_0x36d8e9(0xcac)][_0x36d8e9(0x8e7)](_0x49dc07);}else return VisuMZ['BattleCore'][_0x36d8e9(0x5bc)][_0x36d8e9(0x22d)][_0x36d8e9(0x24c)];}else return VisuMZ[_0x36d8e9(0xa98)][_0x36d8e9(0x5bc)][_0x36d8e9(0x22d)][_0x36d8e9(0x2c5)];}else{if(_0x36d8e9(0x99d)!=='UoPvc')!_0x83389a[_0x36d8e9(0xa98)][_0x36d8e9(0x5bc)]['BattleLog'][_0x36d8e9(0x1ac)]?this[_0x36d8e9(0x98e)](_0x36d8e9(0x8f2),_0x1a77c8):_0x30ff77[_0x36d8e9(0xa98)][_0x36d8e9(0x735)][_0x36d8e9(0x61e)](this,_0x4f0b2b);else return VisuMZ[_0x36d8e9(0xa98)][_0x36d8e9(0x7ae)][_0x36d8e9(0x61e)](this);}},VisuMZ['BattleCore'][_0x4adfe0(0xc91)]=Window_Options[_0x4adfe0(0x6ec)][_0x4adfe0(0x9a1)],Window_Options[_0x4adfe0(0x6ec)]['addGeneralOptions']=function(){const _0x200d66=_0x4adfe0;VisuMZ['BattleCore']['Window_Options_addGeneralOptions'][_0x200d66(0x61e)](this),this[_0x200d66(0x77a)](),this[_0x200d66(0x925)]();},Window_Options[_0x4adfe0(0x6ec)][_0x4adfe0(0x77a)]=function(){const _0x41354a=_0x4adfe0;VisuMZ[_0x41354a(0xa98)]['Settings'][_0x41354a(0x936)][_0x41354a(0x431)]&&(this[_0x41354a(0x5ad)](),this[_0x41354a(0x3f5)]());},Window_Options[_0x4adfe0(0x6ec)][_0x4adfe0(0x925)]=function(){const _0x315ceb=_0x4adfe0;if(!VisuMZ['BattleCore'][_0x315ceb(0x5bc)][_0x315ceb(0x1f0)][_0x315ceb(0x45d)])return;const _0x236ee0=TextManager['visualHpGauge'],_0x542a5f='visualHpGauge';this[_0x315ceb(0x3bc)](_0x236ee0,_0x542a5f);},Window_Options[_0x4adfe0(0x6ec)][_0x4adfe0(0x5ad)]=function(){const _0x1d22df=_0x4adfe0,_0x43a0ac=TextManager['autoBattleStart'],_0x1f9467='autoBattleAtStart';this[_0x1d22df(0x3bc)](_0x43a0ac,_0x1f9467);},Window_Options['prototype']['addBattleCoreAutoBattleStyleCommand']=function(){const _0x42046b=_0x4adfe0,_0x3091a0=TextManager['autoBattleStyle'],_0x4d57b4=_0x42046b(0x797);this[_0x42046b(0x3bc)](_0x3091a0,_0x4d57b4);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xf1)]=Window_Options[_0x4adfe0(0x6ec)][_0x4adfe0(0x6a2)],Window_Options[_0x4adfe0(0x6ec)][_0x4adfe0(0x6a2)]=function(_0x11ff94){const _0x4a07da=_0x4adfe0,_0x492e62=this[_0x4a07da(0x9b1)](_0x11ff94);if(_0x492e62==='autoBattleUseSkills'){if(_0x4a07da(0x3b0)===_0x4a07da(0xad3)){const _0x245c57=0xa,_0x23ce77=0x12c*_0x245c57,_0x8c1f8=0x1e*_0x245c57;this[_0x4a07da(0x1d2)](_0x23ce77,0x0,_0x8c1f8);}else return this[_0x4a07da(0x23a)]();}else return VisuMZ[_0x4a07da(0xa98)][_0x4a07da(0xf1)]['call'](this,_0x11ff94);},Window_Options[_0x4adfe0(0x6ec)][_0x4adfe0(0x23a)]=function(){const _0x1607fe=_0x4adfe0,_0x3d0e67=VisuMZ['BattleCore'][_0x1607fe(0x5bc)][_0x1607fe(0x936)],_0x2e0dd4=this[_0x1607fe(0xa63)](_0x1607fe(0x797));return _0x2e0dd4?_0x3d0e67[_0x1607fe(0x8ed)]:_0x3d0e67['StyleOFF'];},Window_ShopStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x787)]=function(){const _0x5855fd=_0x4adfe0,_0x39be83=DataManager[_0x5855fd(0x400)](this[_0x5855fd(0x9df)]),_0x3d1e51=VisuMZ['DamageStyles'][_0x39be83];if(!_0x3d1e51)return this[_0x5855fd(0xca8)]();const _0x55877b=_0x5855fd(0x7d0)[_0x5855fd(0x31d)](this[_0x5855fd(0x9df)][_0x5855fd(0x87d)]['type']),_0x7dea0f=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x5855fd(0x9df)][_0x5855fd(0x87d)][_0x5855fd(0xb52)]];return _0x3d1e51[_0x55877b][_0x5855fd(0x31d)](_0x7dea0f);},Window_ShopStatus[_0x4adfe0(0x6ec)]['getItemDamageAmountTextBattleCore']=function(){const _0x855e22=_0x4adfe0,_0x4c4a28=DataManager['getDamageStyle'](this[_0x855e22(0x9df)]),_0x325457=VisuMZ[_0x855e22(0x10e)][_0x4c4a28];if(!_0x325457)return this[_0x855e22(0xc06)]();return _0x325457[_0x855e22(0x5b7)][_0x855e22(0x61e)](this);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x8db)]=Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)],Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)]=function(_0x47f6d4){const _0x4c9744=_0x4adfe0;VisuMZ['BattleCore'][_0x4c9744(0x8db)][_0x4c9744(0x61e)](this,_0x47f6d4),this['createCommandNameWindow'](_0x47f6d4);},Window_PartyCommand['prototype'][_0x4adfe0(0x1ea)]=function(_0x1ce49a){const _0x124488=_0x4adfe0,_0x4c3395=new Rectangle(0x0,0x0,_0x1ce49a[_0x124488(0x1e2)],_0x1ce49a[_0x124488(0x6a1)]);this[_0x124488(0x1d3)]=new Window_Base(_0x4c3395),this[_0x124488(0x1d3)][_0x124488(0x2c6)]=0x0,this[_0x124488(0x607)](this[_0x124488(0x1d3)]),this[_0x124488(0x606)]();},Window_PartyCommand[_0x4adfe0(0x6ec)]['callUpdateHelp']=function(){const _0x38a4cc=_0x4adfe0;Window_Command['prototype'][_0x38a4cc(0x1c7)]['call'](this);if(this[_0x38a4cc(0x1d3)])this['updateCommandNameWindow']();},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x606)]=function(){const _0x3f4659=_0x4adfe0,_0x227808=this[_0x3f4659(0x1d3)];_0x227808[_0x3f4659(0x17f)][_0x3f4659(0x465)]();const _0x14c861=this[_0x3f4659(0xc2b)](this[_0x3f4659(0x721)]());if(_0x14c861===_0x3f4659(0x639)&&this['maxItems']()>0x0){if(_0x3f4659(0xc83)===_0x3f4659(0xc83)){const _0x57d739=this['itemLineRect'](this[_0x3f4659(0x721)]());let _0xa0bb14=this['commandName'](this['index']());_0xa0bb14=_0xa0bb14[_0x3f4659(0x335)](/\\I\[(\d+)\]/gi,''),_0x227808[_0x3f4659(0x218)](),this[_0x3f4659(0x1f1)](_0xa0bb14,_0x57d739),this['commandNameWindowDrawText'](_0xa0bb14,_0x57d739),this['commandNameWindowCenter'](_0xa0bb14,_0x57d739);}else{if(!_0xdf9f6a[_0x3f4659(0x1bc)]())return![];return![];}}},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x1f1)]=function(_0x4cce56,_0x38b08b){},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x9c8)]=function(_0x5dc180,_0x60fd86){const _0x4241b1=_0x4adfe0,_0x5474b3=this['_commandNameWindow'];_0x5474b3[_0x4241b1(0xafa)](_0x5dc180,0x0,_0x60fd86['y'],_0x5474b3['innerWidth'],_0x4241b1(0x379));},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xb4a)]=function(_0x363a6e,_0x4a06a9){const _0x3a6421=_0x4adfe0,_0x20a611=this[_0x3a6421(0x1d3)],_0x48160e=$gameSystem[_0x3a6421(0xc21)](),_0x3f6dcd=_0x4a06a9['x']+Math['floor'](_0x4a06a9[_0x3a6421(0x1e2)]/0x2)+_0x48160e;_0x20a611['x']=_0x20a611[_0x3a6421(0x1e2)]/-0x2+_0x3f6dcd,_0x20a611['y']=Math[_0x3a6421(0xa55)](_0x4a06a9[_0x3a6421(0x6a1)]/0x2);},Window_PartyCommand[_0x4adfe0(0x6ec)]['makeCommandList']=function(){const _0x4892af=_0x4adfe0;this['addFightCommand'](),this['addAutoBattleCommand'](),this[_0x4892af(0x923)](),this[_0x4892af(0x8a5)](),this['addEscapeCommand']();},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xa1c)]=function(){const _0x23a5f1=_0x4adfe0,_0x5541c3=this['commandStyle'](),_0x5503b5=VisuMZ[_0x23a5f1(0xa98)][_0x23a5f1(0x5bc)]['PartyCmd'][_0x23a5f1(0x4c9)],_0x344b58=_0x5541c3===_0x23a5f1(0x530)?TextManager[_0x23a5f1(0x633)]:'\x5cI[%1]%2'[_0x23a5f1(0x31d)](_0x5503b5,TextManager[_0x23a5f1(0x633)]),_0x56fb77=this[_0x23a5f1(0xa8e)]();this[_0x23a5f1(0x3bc)](_0x344b58,'fight',_0x56fb77);},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xa8e)]=function(){return!![];},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xbda)]=function(){const _0x3dfe36=_0x4adfe0;if(!this[_0x3dfe36(0x67e)]())return;const _0x5cb75c=this['commandStyle'](),_0x146d5c=VisuMZ[_0x3dfe36(0xa98)][_0x3dfe36(0x5bc)][_0x3dfe36(0xa9e)][_0x3dfe36(0x289)],_0x4f9b4d=_0x5cb75c===_0x3dfe36(0x530)?TextManager[_0x3dfe36(0xa34)]:_0x3dfe36(0x329)['format'](_0x146d5c,TextManager[_0x3dfe36(0xa34)]),_0x563dde=this[_0x3dfe36(0xa00)]();this['addCommand'](_0x4f9b4d,_0x3dfe36(0xa34),_0x563dde);},Window_PartyCommand[_0x4adfe0(0x6ec)]['isAutoBattleCommandAdded']=function(){const _0x3fa13e=_0x4adfe0;return VisuMZ[_0x3fa13e(0xa98)][_0x3fa13e(0x5bc)][_0x3fa13e(0xa9e)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xa00)]=function(){return!![];},Window_PartyCommand[_0x4adfe0(0x6ec)]['addCustomCommands']=function(){},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x8a5)]=function(){const _0x3940f3=_0x4adfe0;if(!this[_0x3940f3(0xa73)]())return;const _0xfc21fa=this['commandStyle'](),_0x3cf724=VisuMZ[_0x3940f3(0xa98)][_0x3940f3(0x5bc)]['PartyCmd'][_0x3940f3(0x821)],_0x4e1160=_0xfc21fa==='text'?TextManager[_0x3940f3(0x51e)]:'\x5cI[%1]%2'[_0x3940f3(0x31d)](_0x3cf724,TextManager['options']),_0x4a843a=this[_0x3940f3(0x2db)]();this['addCommand'](_0x4e1160,_0x3940f3(0x51e),_0x4a843a);},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xa73)]=function(){const _0x534d65=_0x4adfe0;return VisuMZ[_0x534d65(0xa98)]['Settings'][_0x534d65(0xa9e)][_0x534d65(0x4a5)];},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x2db)]=function(){return!![];},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x692)]=function(){const _0x2bde54=_0x4adfe0,_0x4c992d=this[_0x2bde54(0x2c4)](),_0x544a30=VisuMZ[_0x2bde54(0xa98)][_0x2bde54(0x5bc)]['PartyCmd'][_0x2bde54(0x847)],_0x43ac9d=_0x4c992d==='text'?TextManager[_0x2bde54(0x946)]:_0x2bde54(0x329)['format'](_0x544a30,TextManager[_0x2bde54(0x946)]),_0x2b0eb5=this[_0x2bde54(0x5ba)]();this['addCommand'](_0x43ac9d,_0x2bde54(0x946),_0x2b0eb5);},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x5ba)]=function(){const _0x378b4f=_0x4adfe0;return BattleManager[_0x378b4f(0xaaf)]();},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x11b)]=function(){const _0x3aff37=_0x4adfe0;return VisuMZ['BattleCore']['Settings'][_0x3aff37(0xa9e)][_0x3aff37(0x141)];},Window_PartyCommand[_0x4adfe0(0x6ec)]['drawItem']=function(_0x388fe4){const _0x4fd07c=_0x4adfe0,_0x3b1a9c=this[_0x4fd07c(0xc2b)](_0x388fe4);if(_0x3b1a9c===_0x4fd07c(0x579))_0x4fd07c(0x899)!==_0x4fd07c(0x43f)?this[_0x4fd07c(0xb61)](_0x388fe4):(_0x5195e9[_0x4fd07c(0x6ec)][_0x4fd07c(0x9e6)]['call'](this),this[_0x4fd07c(0x8cb)](),this[_0x4fd07c(0x89c)]());else{if(_0x3b1a9c==='icon'){if('XfaFq'!==_0x4fd07c(0x7de))this[_0x4fd07c(0x36b)](_0x388fe4);else{const _0x252ade=this[_0x4fd07c(0xacc)];return _0x252ade[_0x4fd07c(0x634)](/ACTOR/i)?this[_0x4fd07c(0x6e8)]()[_0x4fd07c(0x985)]():this['opponentsUnit']()['trueRandomTarget']();}}else Window_Command[_0x4fd07c(0x6ec)][_0x4fd07c(0x23d)][_0x4fd07c(0x61e)](this,_0x388fe4);}},Window_PartyCommand[_0x4adfe0(0x6ec)]['commandStyle']=function(){const _0x2cdfd7=_0x4adfe0;return VisuMZ[_0x2cdfd7(0xa98)]['Settings']['PartyCmd'][_0x2cdfd7(0x791)];},Window_PartyCommand[_0x4adfe0(0x6ec)]['commandStyleCheck']=function(_0x167bc6){const _0x479b84=_0x4adfe0;if(_0x167bc6<0x0)return _0x479b84(0x530);const _0x452415=this[_0x479b84(0x2c4)]();if(_0x452415!==_0x479b84(0x249))return _0x452415;else{if(this[_0x479b84(0xbf9)]()>0x0){if(_0x479b84(0x35c)!==_0x479b84(0x35c))this['_battleCoreBattleStartEvent']=!![],_0x1b28a2[_0x479b84(0xe3)](_0x141368[_0x479b84(0x959)]),_0x5d7120[_0x479b84(0x334)](),_0x3cef2a[_0x479b84(0x398)][_0x479b84(0x942)]=!![];else{const _0x17985d=this[_0x479b84(0xacb)](_0x167bc6);if(_0x17985d[_0x479b84(0x634)](/\\I\[(\d+)\]/i)){if('nmCjH'==='GrOzt'){let _0x2e93f2=_0x34deae['value'](_0x1b8bd3['VariableDmg']);_0x2c4067[_0x479b84(0x4f3)]>0x0&&(_0x2e93f2+=_0x8fe052[_0x479b84(0x6b7)](_0x1e9906[_0x479b84(0x4f3)])),_0x42606b[_0x479b84(0x8b3)](_0x369a42[_0x479b84(0x718)],_0x2e93f2);}else{const _0x3d0a5a=this[_0x479b84(0x6f8)](_0x167bc6),_0x39d100=this['textSizeEx'](_0x17985d)[_0x479b84(0x1e2)];return _0x39d100<=_0x3d0a5a[_0x479b84(0x1e2)]?_0x479b84(0x69f)===_0x479b84(0x69f)?_0x479b84(0x579):this[_0x479b84(0x5e6)]():_0x479b84(0x639);}}}}}return'text';},Window_PartyCommand[_0x4adfe0(0x6ec)]['drawItemStyleIconText']=function(_0x4fa249){const _0x58486d=_0x4adfe0,_0x3f6e65=this[_0x58486d(0x6f8)](_0x4fa249),_0x19bfb8=this[_0x58486d(0xacb)](_0x4fa249),_0x1089ac=this['textSizeEx'](_0x19bfb8)[_0x58486d(0x1e2)];this[_0x58486d(0x475)](this[_0x58486d(0x28c)](_0x4fa249));const _0x514b36=this[_0x58486d(0x11b)]();if(_0x514b36===_0x58486d(0x9ee))this['drawTextEx'](_0x19bfb8,_0x3f6e65['x']+_0x3f6e65[_0x58486d(0x1e2)]-_0x1089ac,_0x3f6e65['y'],_0x1089ac);else{if(_0x514b36===_0x58486d(0x379)){if(_0x58486d(0x168)!==_0x58486d(0x235)){const _0x35cab0=_0x3f6e65['x']+Math['floor']((_0x3f6e65[_0x58486d(0x1e2)]-_0x1089ac)/0x2);this[_0x58486d(0x9c2)](_0x19bfb8,_0x35cab0,_0x3f6e65['y'],_0x1089ac);}else return _0x588d09[_0x58486d(0xa98)][_0x58486d(0xc33)][_0x58486d(0x61e)](this,_0x1cbac3);}else _0x58486d(0x419)==='WwLwt'?_0x185d03[_0x58486d(0x552)]([_0x3d38e9]):this[_0x58486d(0x9c2)](_0x19bfb8,_0x3f6e65['x'],_0x3f6e65['y'],_0x1089ac);}},Window_PartyCommand[_0x4adfe0(0x6ec)]['drawItemStyleIcon']=function(_0x457f2c){const _0x522849=_0x4adfe0;this[_0x522849(0xacb)](_0x457f2c)[_0x522849(0x634)](/\\I\[(\d+)\]/i);const _0x75e54c=Number(RegExp['$1'])||0x0,_0x5063c7=this[_0x522849(0x6f8)](_0x457f2c),_0x498735=_0x5063c7['x']+Math[_0x522849(0xa55)]((_0x5063c7[_0x522849(0x1e2)]-ImageManager[_0x522849(0x99e)])/0x2),_0x52db45=_0x5063c7['y']+(_0x5063c7[_0x522849(0x6a1)]-ImageManager['iconHeight'])/0x2;this[_0x522849(0x222)](_0x75e54c,_0x498735,_0x52db45);},Window_PartyCommand[_0x4adfe0(0x6ec)]['hide']=function(){},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x325)]=function(){const _0x2e8238=_0x4adfe0;Window_Command['prototype'][_0x2e8238(0x325)][_0x2e8238(0x61e)](this);const _0x37a4f8=this[_0x2e8238(0xca7)]();if(_0x37a4f8===_0x2e8238(0x2a2)){if(_0x2e8238(0x7d8)!==_0x2e8238(0x7d8))return this[_0x2e8238(0x147)]()?_0x277ed8['BattleCore'][_0x2e8238(0x5bc)][_0x2e8238(0x2e2)][_0x2e8238(0xb50)]:_0x5b7556[_0x2e8238(0xa98)]['Settings'][_0x2e8238(0x30b)][_0x2e8238(0xb50)];else this[_0x2e8238(0x66b)]();}},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xca7)]=function(){const _0x1d5fde=_0x4adfe0;if(this[_0x1d5fde(0x43c)])return this[_0x1d5fde(0x43c)];return this['_battleLayoutStyle']=SceneManager['_scene'][_0x1d5fde(0xca7)](),this[_0x1d5fde(0x43c)];},Window_PartyCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x2c8)]=function(){const _0x13e246=_0x4adfe0,_0x153bdd=VisuMZ[_0x13e246(0xa98)][_0x13e246(0x5bc)]['PartyCmd'],_0x3e780f=this[_0x13e246(0x86b)]();switch(_0x3e780f){case _0x13e246(0x633):this[_0x13e246(0xa2b)][_0x13e246(0x52e)](_0x153bdd[_0x13e246(0xed)]);break;case _0x13e246(0xa34):this[_0x13e246(0xa2b)]['setText'](_0x153bdd[_0x13e246(0x182)]);break;case _0x13e246(0x51e):this[_0x13e246(0xa2b)][_0x13e246(0x52e)](_0x153bdd[_0x13e246(0xc0a)]);break;case _0x13e246(0x946):this[_0x13e246(0xa2b)][_0x13e246(0x52e)](_0x153bdd[_0x13e246(0x853)]);break;default:this[_0x13e246(0xa2b)]['setText']('');break;}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x1bd)]=Window_ActorCommand['prototype'][_0x4adfe0(0xb7d)],Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)]=function(_0x513d62){const _0x741f53=_0x4adfe0;VisuMZ['BattleCore']['Window_ActorCommand_initialize']['call'](this,_0x513d62),this[_0x741f53(0x1ea)](_0x513d62);},Window_ActorCommand[_0x4adfe0(0x6ec)]['createCommandNameWindow']=function(_0x5cd7f3){const _0x3a55ef=_0x4adfe0,_0x2af643=new Rectangle(0x0,0x0,_0x5cd7f3[_0x3a55ef(0x1e2)],_0x5cd7f3[_0x3a55ef(0x6a1)]);this[_0x3a55ef(0x1d3)]=new Window_Base(_0x2af643),this[_0x3a55ef(0x1d3)]['opacity']=0x0,this[_0x3a55ef(0x607)](this[_0x3a55ef(0x1d3)]),this[_0x3a55ef(0x606)]();},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x1c7)]=function(){const _0x8340ab=_0x4adfe0;Window_Command['prototype'][_0x8340ab(0x1c7)][_0x8340ab(0x61e)](this);if(this[_0x8340ab(0x1d3)])this[_0x8340ab(0x606)]();},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x606)]=function(){const _0x4e4ce3=_0x4adfe0,_0x88d2d2=this[_0x4e4ce3(0x1d3)];_0x88d2d2[_0x4e4ce3(0x17f)][_0x4e4ce3(0x465)]();const _0x430f4c=this[_0x4e4ce3(0xc2b)](this[_0x4e4ce3(0x721)]());if(_0x430f4c===_0x4e4ce3(0x639)&&this[_0x4e4ce3(0xbf9)]()>0x0){const _0x1a66dc=this[_0x4e4ce3(0x6f8)](this[_0x4e4ce3(0x721)]());let _0x37f9c5=this[_0x4e4ce3(0xacb)](this[_0x4e4ce3(0x721)]());_0x37f9c5=_0x37f9c5[_0x4e4ce3(0x335)](/\\I\[(\d+)\]/gi,''),_0x88d2d2['resetFontSettings'](),this['commandNameWindowDrawBackground'](_0x37f9c5,_0x1a66dc),this[_0x4e4ce3(0x9c8)](_0x37f9c5,_0x1a66dc),this[_0x4e4ce3(0xb4a)](_0x37f9c5,_0x1a66dc);}},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x1f1)]=function(_0x183d9a,_0x357517){},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x9c8)]=function(_0x2af30d,_0x4dc3cd){const _0x381737=_0x4adfe0,_0x28a29e=this['_commandNameWindow'];_0x28a29e[_0x381737(0xafa)](_0x2af30d,0x0,_0x4dc3cd['y'],_0x28a29e[_0x381737(0xc90)],_0x381737(0x379));},Window_ActorCommand[_0x4adfe0(0x6ec)]['commandNameWindowCenter']=function(_0xc6ed92,_0x3da215){const _0x17b8f9=_0x4adfe0,_0x6daeec=this[_0x17b8f9(0x1d3)],_0x5e4d8e=$gameSystem[_0x17b8f9(0xc21)](),_0x23867e=_0x3da215['x']+Math[_0x17b8f9(0xa55)](_0x3da215[_0x17b8f9(0x1e2)]/0x2)+_0x5e4d8e;_0x6daeec['x']=_0x6daeec[_0x17b8f9(0x1e2)]/-0x2+_0x23867e,_0x6daeec['y']=Math[_0x17b8f9(0xa55)](_0x3da215[_0x17b8f9(0x6a1)]/0x2);},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xa64)]=function(){const _0xc407d1=_0x4adfe0;if(!this['_actor'])return;const _0x281441=this[_0xc407d1(0x33e)]['battleCommands']();for(const _0x370001 of _0x281441){if(_0xc407d1(0x677)!==_0xc407d1(0x677)){if(this['isForAnyone']())return!![];return![];}else this['makeBattleCommand'](_0x370001['toUpperCase']()[_0xc407d1(0xb83)]());}},Window_ActorCommand[_0x4adfe0(0x6ec)]['makeBattleCommand']=function(_0x494e63){const _0x1e3d04=_0x4adfe0;if(_0x494e63===_0x1e3d04(0x348)){if('heEfJ'===_0x1e3d04(0x956)){if(!_0x591d4d[_0x1e3d04(0xcfa)]())return;const _0x4fea4a=_0x5b615f[_0x1e3d04(0x964)];_0x4fea4a[_0x1e3d04(0xa48)]();}else this[_0x1e3d04(0x244)]();}[_0x1e3d04(0x51f),'SKILLS']['includes'](_0x494e63)&&(_0x1e3d04(0xec)===_0x1e3d04(0xec)?this[_0x1e3d04(0xc45)]():_0x19fd4c=_0x27ddf4>=_0xf346d?_0xe4e043:_0x2dc56e);if(_0x494e63==='GUARD'){if(_0x1e3d04(0x10f)!==_0x1e3d04(0x5fd))this['addGuardCommand']();else return _0x1f2f4b['push'](...this[_0x1e3d04(0x6e8)]()[_0x1e3d04(0x66d)]()['filter'](_0x34e5f3=>_0x34e5f3!==this[_0x1e3d04(0x92f)]())),this[_0x1e3d04(0xa05)](_0x40135a);}if(_0x494e63===_0x1e3d04(0x97f)){if(_0x1e3d04(0x836)!==_0x1e3d04(0x8ad))this[_0x1e3d04(0x502)]();else{if(!_0x3bd637[_0x1e3d04(0x726)])return null;if(!_0x34aee9['_scene'][_0x1e3d04(0x326)])return null;if(!_0x21f866['_scene'][_0x1e3d04(0x326)]['_effectsContainer'])return null;return _0x9ccdae[_0x1e3d04(0x726)][_0x1e3d04(0x326)][_0x1e3d04(0xad7)];}}_0x494e63===_0x1e3d04(0x34f)&&this[_0x1e3d04(0x692)]();_0x494e63==='AUTO\x20BATTLE'&&this[_0x1e3d04(0xbda)]();if(_0x494e63[_0x1e3d04(0x634)](/STYPE: (\d+)/i)){const _0x3c99a0=Number(RegExp['$1']);this[_0x1e3d04(0x339)](_0x3c99a0);}else{if(_0x494e63[_0x1e3d04(0x634)](/STYPE: (.*)/i)){const _0x37b264=DataManager[_0x1e3d04(0x612)](RegExp['$1']);this['addSkillTypeCommand'](_0x37b264);}}_0x494e63===_0x1e3d04(0x49c)&&this[_0x1e3d04(0x224)]();if(_0x494e63[_0x1e3d04(0x634)](/SKILL: (\d+)/i)){const _0x153c65=Number(RegExp['$1']);this[_0x1e3d04(0x981)]($dataSkills[_0x153c65]);}else{if(_0x494e63['match'](/SKILL: (.*)/i)){if(_0x1e3d04(0x23f)===_0x1e3d04(0xc6a)){const _0x13b8ec=_0x14245b[_0x1e3d04(0xc5f)]('['+_0x4ab5ae['$1']['match'](/\d+/g)+']');for(const _0x346326 of _0x13b8ec){if(_0x2f180a['value'](_0x346326))return![];}return!![];}else{const _0x50e29c=DataManager['getSkillIdWithName'](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x50e29c]);}}}_0x494e63===_0x1e3d04(0x300)&&Imported[_0x1e3d04(0x830)]&&this[_0x1e3d04(0x4d0)](),[_0x1e3d04(0x11d),_0x1e3d04(0xc2e)][_0x1e3d04(0x5d0)](_0x494e63)&&Imported[_0x1e3d04(0xc82)]&&(_0x1e3d04(0x514)!==_0x1e3d04(0x852)?this[_0x1e3d04(0xb78)]():(_0x30aa6c[_0x1e3d04(0x6ec)]['initialize'][_0x1e3d04(0x61e)](this,_0x3ac4a3),this['setBackgroundType'](this[_0x1e3d04(0xcef)]()),this[_0x1e3d04(0xcab)]())),_0x494e63===_0x1e3d04(0x832)&&Imported['VisuMZ_2_WeaponSwapSystem']&&this[_0x1e3d04(0x6db)](!![]),_0x494e63===_0x1e3d04(0xaf9)&&Imported[_0x1e3d04(0x104)]&&this[_0x1e3d04(0x64f)]();},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x244)]=function(){const _0x30d466=_0x4adfe0,_0x13fa70=$dataSkills[this[_0x30d466(0x33e)][_0x30d466(0x6fd)]()];if(!_0x13fa70)return;if(!this[_0x30d466(0xbbe)](_0x13fa70))return;const _0xddb8cf=this[_0x30d466(0x2c4)](),_0x2647af=DataManager[_0x30d466(0x382)](_0x13fa70),_0x58cfab=DataManager['battleCommandIcon'](_0x13fa70),_0x4fb312=_0xddb8cf==='text'?_0x2647af:_0x30d466(0x329)['format'](_0x58cfab,_0x2647af);this[_0x30d466(0x3bc)](_0x4fb312,_0x30d466(0xc64),this[_0x30d466(0x33e)][_0x30d466(0x64c)]());},Window_ActorCommand['prototype'][_0x4adfe0(0x9e9)]=function(){const _0x13f7d2=_0x4adfe0,_0x32f859=$dataSkills[this[_0x13f7d2(0x33e)][_0x13f7d2(0xc01)]()];if(!_0x32f859)return;if(!this['canAddSkillCommand'](_0x32f859))return;const _0x129bc3=this['commandStyle'](),_0x19052a=DataManager[_0x13f7d2(0x382)](_0x32f859),_0xed33a0=DataManager[_0x13f7d2(0x1ab)](_0x32f859),_0x2902b0=_0x129bc3==='text'?_0x19052a:'\x5cI[%1]%2'[_0x13f7d2(0x31d)](_0xed33a0,_0x19052a);this[_0x13f7d2(0x3bc)](_0x2902b0,'guard',this[_0x13f7d2(0x33e)]['canGuard']());},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x502)]=function(){const _0x41d073=_0x4adfe0,_0x3a9804=this['commandStyle'](),_0x4199c4=VisuMZ['BattleCore']['Settings'][_0x41d073(0x35b)][_0x41d073(0x372)],_0x17855c=_0x3a9804===_0x41d073(0x530)?TextManager[_0x41d073(0x28e)]:_0x41d073(0x329)[_0x41d073(0x31d)](_0x4199c4,TextManager[_0x41d073(0x28e)]),_0x2c9a67=this['isItemCommandEnabled']();this[_0x41d073(0x3bc)](_0x17855c,'item',_0x2c9a67);},Window_ActorCommand['prototype']['isItemCommandEnabled']=function(){const _0x141d34=_0x4adfe0;return this[_0x141d34(0x33e)]&&this[_0x141d34(0x33e)][_0x141d34(0x1e1)]();},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xc45)]=function(){const _0x1ea358=_0x4adfe0,_0x3af7ab=this[_0x1ea358(0x33e)][_0x1ea358(0x3ca)]();for(const _0x4638b4 of _0x3af7ab){_0x1ea358(0x9d2)!==_0x1ea358(0x9d2)?_0x289560=_0x197b75[_0x1ea358(0xa2d)](_0x7c719f):this[_0x1ea358(0x339)](_0x4638b4);}},Window_ActorCommand['prototype']['addSkillTypeCommand']=function(_0x369542){const _0x3d5d09=_0x4adfe0;let _0x4a56ef=$dataSystem['skillTypes'][_0x369542];if(!_0x4a56ef)return;let _0x5ccf97=_0x4a56ef;const _0x1d5426=this[_0x3d5d09(0x2c4)]();if(_0x1d5426===_0x3d5d09(0x530)){if(_0x3d5d09(0x654)===_0x3d5d09(0x98a)){const _0x163fbc=_0x5de977['prototype'][_0x3d5d09(0xca7)]();[_0x3d5d09(0x93f),_0x3d5d09(0xc26),_0x3d5d09(0xcac),'border'][_0x3d5d09(0x5d0)](_0x163fbc)&&(this[_0x3d5d09(0x2c6)]=0x0);}else _0x5ccf97=_0x5ccf97[_0x3d5d09(0x335)](/\x1I\[(\d+)\]/gi,''),_0x5ccf97=_0x5ccf97['replace'](/\\I\[(\d+)\]/gi,'');}else{if(!_0x4a56ef[_0x3d5d09(0x634)](/\\I\[(\d+)\]/i)){const _0x4fbe50=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x3d5d09(0x4f9)]['Settings'][_0x3d5d09(0x252)]:VisuMZ['BattleCore'][_0x3d5d09(0x5bc)][_0x3d5d09(0x35b)],_0xae65d5=$dataSystem[_0x3d5d09(0x14b)]['includes'](_0x369542),_0x458153=_0xae65d5?_0x4fbe50[_0x3d5d09(0x666)]:_0x4fbe50[_0x3d5d09(0x5c0)];_0x5ccf97='\x5cI[%1]%2'[_0x3d5d09(0x31d)](_0x458153,_0x4a56ef);}}this[_0x3d5d09(0x3bc)](_0x5ccf97,_0x3d5d09(0x7f2),!![],_0x369542);},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x224)]=function(){const _0x3c96bc=_0x4adfe0,_0x4d34f0=this['_actor']['skillTypes'](),_0x412ef7=this[_0x3c96bc(0x33e)][_0x3c96bc(0x792)]();for(const _0x1e2941 of _0x412ef7){if(!_0x1e2941)continue;if(Imported[_0x3c96bc(0x120)]){if(_0x3c96bc(0x565)!==_0x3c96bc(0xb03)){if(this[_0x3c96bc(0x101)](_0x1e2941))continue;if(this[_0x3c96bc(0x603)](_0x1e2941))continue;}else this[_0x3c96bc(0x737)]=this['_activeWeaponSlot']||0x0,this['_activeWeaponSlot']++,this[_0x3c96bc(0xc42)]={};}else{if(!_0x4d34f0[_0x3c96bc(0x5d0)](_0x1e2941[_0x3c96bc(0x707)]))continue;}this[_0x3c96bc(0x981)](_0x1e2941);}},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x101)]=function(_0x3657e9){const _0x1f68d1=_0x4adfe0,_0x2a50aa=this[_0x1f68d1(0x33e)]['skillTypes'](),_0x16c340=_0x2a50aa[_0x1f68d1(0xcd9)](_0xfa408b=>DataManager[_0x1f68d1(0x432)](_0x3657e9)[_0x1f68d1(0x5d0)](_0xfa408b));return _0x16c340['length']<=0x0;},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x603)]=function(_0xf06ac2){const _0x6918c8=_0x4adfe0;if(Imported[_0x6918c8(0x120)]){if(_0x6918c8(0x40f)!==_0x6918c8(0x722)){if(VisuMZ[_0x6918c8(0x4f9)]['version']>=1.24){if(this['_actor']){if('sFCBP'===_0x6918c8(0x6b4)){if(!VisuMZ['SkillsStatesCore']['CheckVisibleBattleNotetags'](this[_0x6918c8(0x33e)],_0xf06ac2))return!![];if(!VisuMZ[_0x6918c8(0x4f9)][_0x6918c8(0x490)](this['_actor'],_0xf06ac2))return!![];if(!VisuMZ[_0x6918c8(0x4f9)][_0x6918c8(0xc80)](this[_0x6918c8(0x33e)],_0xf06ac2))return!![];}else return this['item']()?_0x4d7a05['BattleCore'][_0x6918c8(0x4cf)][_0x6918c8(0x61e)](this):0x0;}}else{if(!Window_SkillList[_0x6918c8(0x6ec)]['checkShowHideBattleNotetags'][_0x6918c8(0x61e)](this,_0xf06ac2))return!![];if(!Window_SkillList[_0x6918c8(0x6ec)][_0x6918c8(0xc6c)][_0x6918c8(0x61e)](this,_0xf06ac2))return!![];if(!Window_SkillList['prototype']['checkShowHideSkillNotetags']['call'](this,_0xf06ac2))return!![];}}else this[_0x6918c8(0x743)]['x']=_0x141a33[_0x6918c8(0x1e2)]*0xa,this['_windowLayer']['y']=_0x55dcca['height']*0xa;}return![];},Window_ActorCommand['prototype']['addSingleSkillCommand']=function(_0x208811){const _0x65ddc3=_0x4adfe0;if(!_0x208811)return;if(!this[_0x65ddc3(0xbbe)](_0x208811))return;const _0x26ef4c=this['commandStyle'](),_0x192ca9=DataManager[_0x65ddc3(0x382)](_0x208811),_0x46f281=DataManager[_0x65ddc3(0x1ab)](_0x208811),_0xde01e3=_0x26ef4c===_0x65ddc3(0x530)?_0x192ca9:_0x65ddc3(0x329)[_0x65ddc3(0x31d)](_0x46f281,_0x192ca9),_0x2632aa=this[_0x65ddc3(0x33e)]['canUse'](_0x208811);this[_0x65ddc3(0x3bc)](_0xde01e3,_0x65ddc3(0x869),_0x2632aa,_0x208811['id']);},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xbbe)]=function(_0x31746c){const _0x48fcc0=_0x4adfe0,_0x3a2ab8=_0x31746c['note'];if(_0x3a2ab8[_0x48fcc0(0x634)](/<COMMAND REQUIRE LEARN>/i)){if(_0x48fcc0(0x7a4)===_0x48fcc0(0x537))_0x3e1d5c=_0x3dba0d>=_0x1ba9ad?_0x35d3e1:_0x4cc7d1;else{if(!this[_0x48fcc0(0x33e)][_0x48fcc0(0xc34)](_0x31746c['id']))return![];}}if(_0x3a2ab8['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x48fcc0(0x33e)][_0x48fcc0(0xa3b)](_0x31746c['id']))return![];}const _0x4b5b2d=VisuMZ[_0x48fcc0(0xa98)]['createKeyJS'](_0x31746c,_0x48fcc0(0x82a));if(VisuMZ[_0x48fcc0(0xa98)]['JS'][_0x4b5b2d]){if(!VisuMZ[_0x48fcc0(0xa98)]['JS'][_0x4b5b2d]['call'](this,this[_0x48fcc0(0x33e)],_0x31746c))return![];}return VisuMZ['BattleCore'][_0x48fcc0(0x1d7)](_0x31746c);},VisuMZ['BattleCore'][_0x4adfe0(0x1d7)]=function(_0x52b0ce){const _0x8defe9=_0x4adfe0,_0x242be8=_0x52b0ce[_0x8defe9(0x15d)];if(_0x242be8[_0x8defe9(0x634)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x50eab0=JSON['parse']('['+RegExp['$1'][_0x8defe9(0x634)](/\d+/g)+']');for(const _0x217c31 of _0x50eab0){if(!$gameSwitches[_0x8defe9(0x965)](_0x217c31))return![];}return!![];}if(_0x242be8[_0x8defe9(0x634)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x8defe9(0xbd1)===_0x8defe9(0xb6f)){if(!_0xd89092['isSceneBattle']())return;if(!_0x381a79['VisuMZ_3_VisualCutinEffect'])return;_0x1c5b4e[_0x8defe9(0x360)](_0x3dbca7,_0x265a52);const _0x538efb=_0x45587c[_0x8defe9(0xb52)][_0x8defe9(0xc1b)]()[_0x8defe9(0xb83)]();_0x28e497['_scene'][_0x8defe9(0x139)](_0x538efb);const _0x5b3e71=_0x3a69d3[_0x8defe9(0x781)]();_0x5b3e71&&_0x274aee[_0x8defe9(0x450)]&&_0x5b3e71['setWaitMode'](_0x8defe9(0x206));}else{const _0x10836b=JSON[_0x8defe9(0xc5f)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2a724a of _0x10836b){if(!$gameSwitches[_0x8defe9(0x965)](_0x2a724a))return![];}return!![];}}if(_0x242be8[_0x8defe9(0x634)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x8defe9(0xb7a)!=='yJYSN'){const _0x338c1f=JSON[_0x8defe9(0xc5f)]('['+RegExp['$1'][_0x8defe9(0x634)](/\d+/g)+']');for(const _0x5cdd93 of _0x338c1f){if(_0x8defe9(0xc96)===_0x8defe9(0xc96)){if($gameSwitches[_0x8defe9(0x965)](_0x5cdd93))return!![];}else{if(this['_currentActor'][_0x8defe9(0xa70)]())return;this['finishActorInput'](),this[_0x8defe9(0x96c)](),!this[_0x8defe9(0x48b)]&&!this[_0x8defe9(0xfb)]&&_0xdcac45['_scene'][_0x8defe9(0x39f)]();}}return![];}else{if(this[_0x8defe9(0xca7)]()===_0x8defe9(0x2a2))return this[_0x8defe9(0x1e5)]();else return this[_0x8defe9(0xc97)]()?this[_0x8defe9(0x5e6)]():_0x10cf94[_0x8defe9(0xa98)][_0x8defe9(0x4b3)]['call'](this);}}if(_0x242be8[_0x8defe9(0x634)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x8defe9(0x8f5)===_0x8defe9(0x297))_0x12cafa[_0x8defe9(0x98e)](_0x8defe9(0x3ea),_0x281486);else{const _0x3fd96c=JSON[_0x8defe9(0xc5f)]('['+RegExp['$1'][_0x8defe9(0x634)](/\d+/g)+']');for(const _0x5743af of _0x3fd96c){if(!$gameSwitches[_0x8defe9(0x965)](_0x5743af))return!![];}return![];}}if(_0x242be8[_0x8defe9(0x634)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('YNRDG'!==_0x8defe9(0x482))return _0x3fb707[_0x8defe9(0xa98)][_0x8defe9(0xcb8)][_0x8defe9(0x61e)](this);else{const _0x4ab522=JSON[_0x8defe9(0xc5f)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x5bb9fb of _0x4ab522){if(!$gameSwitches[_0x8defe9(0x965)](_0x5bb9fb))return!![];}return![];}}if(_0x242be8[_0x8defe9(0x634)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x37fd91=JSON[_0x8defe9(0xc5f)]('['+RegExp['$1'][_0x8defe9(0x634)](/\d+/g)+']');for(const _0x427e6c of _0x37fd91){if($gameSwitches[_0x8defe9(0x965)](_0x427e6c))return![];}return!![];}return!![];},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x692)]=function(){const _0x26f75c=_0x4adfe0,_0x57bb82=this[_0x26f75c(0x2c4)](),_0xe22fc=VisuMZ[_0x26f75c(0xa98)]['Settings'][_0x26f75c(0xa9e)][_0x26f75c(0x847)],_0x4b8a3d=_0x57bb82==='text'?TextManager[_0x26f75c(0x946)]:'\x5cI[%1]%2'['format'](_0xe22fc,TextManager[_0x26f75c(0x946)]),_0x353bd2=this['isEscapeCommandEnabled']();this[_0x26f75c(0x3bc)](_0x4b8a3d,_0x26f75c(0x946),_0x353bd2);},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x5ba)]=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xbda)]=function(){const _0x48f98a=_0x4adfe0,_0x34042b=this['commandStyle'](),_0x4224b8=VisuMZ[_0x48f98a(0xa98)][_0x48f98a(0x5bc)][_0x48f98a(0xa9e)][_0x48f98a(0x289)],_0x41f01c=_0x34042b==='text'?TextManager[_0x48f98a(0xa34)]:'\x5cI[%1]%2'[_0x48f98a(0x31d)](_0x4224b8,TextManager[_0x48f98a(0xa34)]),_0x30ec68=this['isAutoBattleCommandEnabled']();this[_0x48f98a(0x3bc)](_0x41f01c,_0x48f98a(0xa34),_0x30ec68);},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xa00)]=function(){return!![];},Window_ActorCommand['prototype'][_0x4adfe0(0x11b)]=function(){const _0x5a56ae=_0x4adfe0;return VisuMZ[_0x5a56ae(0xa98)][_0x5a56ae(0x5bc)]['ActorCmd'][_0x5a56ae(0x141)];},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x23d)]=function(_0x54c2a6){const _0x5b84ea=_0x4adfe0,_0x1dbd5a=this[_0x5b84ea(0xc2b)](_0x54c2a6);if(_0x1dbd5a===_0x5b84ea(0x579))this[_0x5b84ea(0xb61)](_0x54c2a6);else _0x1dbd5a===_0x5b84ea(0x639)?'cdNgw'==='cdNgw'?this['drawItemStyleIcon'](_0x54c2a6):_0x2e9f4e[_0x5b84ea(0x376)]=!_0x57e18a[_0x5b84ea(0x376)]:Window_Command[_0x5b84ea(0x6ec)][_0x5b84ea(0x23d)][_0x5b84ea(0x61e)](this,_0x54c2a6);this[_0x5b84ea(0xa3d)](_0x54c2a6);},Window_ActorCommand['prototype'][_0x4adfe0(0x2c4)]=function(){const _0x41212c=_0x4adfe0;return VisuMZ[_0x41212c(0xa98)][_0x41212c(0x5bc)]['ActorCmd'][_0x41212c(0x791)];},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xc2b)]=function(_0x24ce67){const _0x2df944=_0x4adfe0;if(_0x24ce67<0x0)return'text';const _0x8921ad=this['commandStyle']();if(_0x8921ad!=='auto')return _0x8921ad;else{if(this[_0x2df944(0xbf9)]()>0x0){const _0x100654=this[_0x2df944(0xacb)](_0x24ce67);if(_0x100654[_0x2df944(0x634)](/\\I\[(\d+)\]/i)){if('oMaqy'===_0x2df944(0x1a6)){if(_0x27d573['SkillsStatesCore'][_0x2df944(0xcc9)]>=1.24){if(this['_actor']){if(!_0x2c4215[_0x2df944(0x4f9)]['CheckVisibleBattleNotetags'](this[_0x2df944(0x33e)],_0x5b22d2))return!![];if(!_0x17e3ad['SkillsStatesCore'][_0x2df944(0x490)](this[_0x2df944(0x33e)],_0x1ca512))return!![];if(!_0x233c60[_0x2df944(0x4f9)][_0x2df944(0xc80)](this[_0x2df944(0x33e)],_0x2b5d0a))return!![];}}else{if(!_0x552e92[_0x2df944(0x6ec)]['checkShowHideBattleNotetags']['call'](this,_0x53d7bc))return!![];if(!_0x2e1813[_0x2df944(0x6ec)][_0x2df944(0xc6c)]['call'](this,_0x74289e))return!![];if(!_0x159007[_0x2df944(0x6ec)][_0x2df944(0x8b7)][_0x2df944(0x61e)](this,_0x36c6e7))return!![];}}else{const _0x4f3c78=this[_0x2df944(0x6f8)](_0x24ce67),_0x4082a8=this['textSizeEx'](_0x100654)[_0x2df944(0x1e2)];if(_0x4082a8<=_0x4f3c78[_0x2df944(0x1e2)]){if(_0x2df944(0xcc0)===_0x2df944(0x584))_0x5255c1=_0x3e22cc[_0x2df944(0x20d)](_0x45eed8),_0x90e8db[_0x2df944(0xa98)][_0x2df944(0x7ea)][_0x2df944(0x61e)](this,_0x840503,_0x467422,_0x54a071),_0x5aa15a[_0x2df944(0x12f)]&&this['initElementStatusCore'](),this[_0x2df944(0x521)](),this[_0x2df944(0x7aa)](),_0x3886b8[_0x2df944(0x12f)]&&this[_0x2df944(0xbbb)]();else return _0x2df944(0x579);}else{if(_0x2df944(0x268)===_0x2df944(0x59d)){if(_0x331690==='victory')this[_0x2df944(0x63a)]=!![];if(this[_0x2df944(0x26e)]&&this['_battler'][_0x2df944(0xc5a)]()){this['_motion']=_0x3cbd41[_0x2df944(0x7d5)][_0x2df944(0x539)];return;}const _0x247877=_0x32fb39[_0x2df944(0x7d5)][_0x3138f9];this['_motion']=_0x247877,this[_0x2df944(0x966)]=0x0,this[_0x2df944(0x433)]=0x0;}else return _0x2df944(0x639);}}}}}return _0x2df944(0x530);},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xb61)]=function(_0x45a4af){const _0x5044bf=_0x4adfe0,_0x28e886=this['itemLineRect'](_0x45a4af),_0x3812d9=this[_0x5044bf(0xacb)](_0x45a4af),_0x1bf199=this[_0x5044bf(0xa88)](_0x3812d9)[_0x5044bf(0x1e2)];this[_0x5044bf(0x475)](this[_0x5044bf(0x28c)](_0x45a4af));const _0x142f86=this[_0x5044bf(0x11b)]();if(_0x142f86===_0x5044bf(0x9ee))this[_0x5044bf(0x9c2)](_0x3812d9,_0x28e886['x']+_0x28e886['width']-_0x1bf199,_0x28e886['y'],_0x1bf199);else{if(_0x142f86==='center'){if('BUntj'==='zlQWK')return _0x4eaa86[_0x1dce34];else{const _0x5f38df=_0x28e886['x']+Math[_0x5044bf(0xa55)]((_0x28e886['width']-_0x1bf199)/0x2);this[_0x5044bf(0x9c2)](_0x3812d9,_0x5f38df,_0x28e886['y'],_0x1bf199);}}else this['drawTextEx'](_0x3812d9,_0x28e886['x'],_0x28e886['y'],_0x1bf199);}},Window_ActorCommand['prototype'][_0x4adfe0(0x36b)]=function(_0x3ede50){const _0x5e549b=_0x4adfe0;this[_0x5e549b(0xacb)](_0x3ede50)[_0x5e549b(0x634)](/\\I\[(\d+)\]/i);const _0x5d43b3=Number(RegExp['$1'])||0x0,_0x332d55=this[_0x5e549b(0x6f8)](_0x3ede50),_0x54ff83=_0x332d55['x']+Math[_0x5e549b(0xa55)]((_0x332d55[_0x5e549b(0x1e2)]-ImageManager['iconWidth'])/0x2),_0x28ef96=_0x332d55['y']+(_0x332d55[_0x5e549b(0x6a1)]-ImageManager['iconHeight'])/0x2;this['drawIcon'](_0x5d43b3,_0x54ff83,_0x28ef96);},Window_ActorCommand[_0x4adfe0(0x6ec)]['drawSingleSkillCost']=function(_0x2d02a2){const _0x26ccf8=_0x4adfe0;if(!(VisuMZ[_0x26ccf8(0xa98)][_0x26ccf8(0x5bc)][_0x26ccf8(0x35b)][_0x26ccf8(0x673)]??!![]))return;const _0x3433b5=this[_0x26ccf8(0x9b1)](_0x2d02a2);if(![_0x26ccf8(0xc64),_0x26ccf8(0x664),'singleSkill'][_0x26ccf8(0x5d0)](_0x3433b5))return;const _0x23e3d3=this['itemLineRect'](_0x2d02a2);let _0x44d50f=null;if(_0x3433b5===_0x26ccf8(0xc64))_0x26ccf8(0x48a)===_0x26ccf8(0x48a)?_0x44d50f=$dataSkills[this['_actor'][_0x26ccf8(0x6fd)]()]:this[_0x26ccf8(0x91c)]=_0x1d3a5d(_0x3eb865['$1']);else{if(_0x3433b5===_0x26ccf8(0x664)){if('mfoEd'!==_0x26ccf8(0xfe))_0x44d50f=$dataSkills[this[_0x26ccf8(0x33e)]['guardSkillId']()];else{const _0x1a1e94=new _0x2ce6ea();_0x1a1e94[_0x26ccf8(0x932)]=_0x444690['loadSystem'](_0x5eff5c[_0x26ccf8(0x924)]),_0x1a1e94['x']=_0x54243e[_0x26ccf8(0x2b4)]||0x0,_0x1a1e94['y']=_0x485073[_0x26ccf8(0x5d9)]||0x0,this['addChild'](_0x1a1e94),this[_0x26ccf8(0x6e3)]=_0x1a1e94;}}else _0x44d50f=$dataSkills[this[_0x26ccf8(0x352)][_0x2d02a2][_0x26ccf8(0xb2a)]];}this[_0x26ccf8(0x615)](this[_0x26ccf8(0x33e)],_0x44d50f,_0x23e3d3['x'],_0x23e3d3['y'],_0x23e3d3[_0x26ccf8(0x1e2)]);},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x615)]=function(_0x15018b,_0x51c92a,_0xb25d1e,_0x44e2ee,_0xb9bee8){const _0x17c981=_0x4adfe0;if(!_0x51c92a)return;Imported[_0x17c981(0x120)]?Window_Command[_0x17c981(0x6ec)][_0x17c981(0x615)][_0x17c981(0x61e)](this,_0x15018b,_0x51c92a,_0xb25d1e,_0x44e2ee,_0xb9bee8):Window_SkillList['prototype'][_0x17c981(0x615)][_0x17c981(0x61e)](this,_0x51c92a,_0xb25d1e,_0x44e2ee,_0xb9bee8);},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e8)]=function(){},Window_ActorCommand[_0x4adfe0(0x6ec)]['activate']=function(){const _0x54762f=_0x4adfe0;Window_Command['prototype']['activate'][_0x54762f(0x61e)](this);const _0x29b1b6=this[_0x54762f(0xca7)]();_0x29b1b6===_0x54762f(0x2a2)&&(_0x54762f(0x839)!==_0x54762f(0x839)?this[_0x54762f(0x418)]()&&_0x3eb88c[_0x54762f(0xa98)]['Sprite_Battler_startMove'][_0x54762f(0x61e)](this,_0xe4358b,_0x27d279,_0xeb63ce):this[_0x54762f(0x66b)]());},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0xca7)]=function(){const _0x15cc9b=_0x4adfe0;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x15cc9b(0x43c)]=SceneManager[_0x15cc9b(0x726)][_0x15cc9b(0xca7)](),this[_0x15cc9b(0x43c)];},VisuMZ['BattleCore'][_0x4adfe0(0x3c7)]=Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x9ac)],Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x9ac)]=function(_0x2d7713){const _0x26af89=_0x4adfe0,_0x3a73c2=this[_0x26af89(0xca7)]();if(_0x2d7713&&['xp',_0x26af89(0xcac)][_0x26af89(0x5d0)](_0x3a73c2)){if(_0x26af89(0x395)==='EfVeE'){_0x113656[_0x26af89(0xa98)][_0x26af89(0x799)][_0x26af89(0x61e)](this);if(!_0x447312[_0x26af89(0xcfa)]())return;if(this['_animation'][_0x26af89(0x2a7)]===0x3)this['x']=_0x21e732[_0x26af89(0xb95)](_0x41e626[_0x26af89(0xcc7)]/0x2),this['y']=_0x4dd4f2[_0x26af89(0xb95)](_0xa494b[_0x26af89(0x468)]/0x2);else{if(this[_0x26af89(0xa27)])return;}}else this[_0x26af89(0x807)](_0x2d7713);}else{if(_0x2d7713&&[_0x26af89(0x2a2)][_0x26af89(0x5d0)](_0x3a73c2)){if(_0x26af89(0xe2)==='ClWeH')this['resizeWindowBorderStyle'](_0x2d7713),this[_0x26af89(0x66b)]();else{if(!_0x3c0670[_0x26af89(0xcfa)]())return![];if(!_0x377fd2)return![];if(!_0x5a34e5[_0x26af89(0x28e)]())return![];if(_0x51ed85['item']()[_0x26af89(0x15d)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(_0x358412[_0x26af89(0xbae)](_0x10a6e8[_0x26af89(0x28e)]()))return!![];return![];}}}VisuMZ[_0x26af89(0xa98)][_0x26af89(0x3c7)][_0x26af89(0x61e)](this,_0x2d7713),_0x2d7713&&$gameTroop[_0x26af89(0x66d)]()[_0x26af89(0xa59)]>0x0&&_0x2d7713[_0x26af89(0xc66)]()&&_0x2d7713[_0x26af89(0xc66)]()[_0x26af89(0xabb)]();},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x807)]=function(_0x525f3b){const _0x353134=_0x4adfe0,_0x1d7f6d=VisuMZ[_0x353134(0xa98)][_0x353134(0x5bc)][_0x353134(0x22d)][_0x353134(0x76b)],_0x30f88d=Math[_0x353134(0xb95)](Graphics[_0x353134(0xcc7)]/0x3),_0x4c8ab3=Math[_0x353134(0xb95)](Graphics[_0x353134(0xcc7)]/$gameParty['battleMembers']()['length']),_0x40ab7d=Math[_0x353134(0x7a0)](Math['min'](_0x30f88d,_0x4c8ab3),_0x1d7f6d),_0x1a57d9=this['fittingHeight'](VisuMZ[_0x353134(0xa98)][_0x353134(0x5bc)][_0x353134(0x22d)]['XPActorCommandLines']),_0x3dedc1=Math[_0x353134(0xa55)]((Graphics[_0x353134(0xcc7)]-Graphics[_0x353134(0x1e2)])/0x2),_0x204eb7=Graphics[_0x353134(0xcc7)]-_0x3dedc1,_0x126964=(Math[_0x353134(0xb95)](_0x4c8ab3*_0x525f3b[_0x353134(0x721)]())+Math[_0x353134(0xb95)]((_0x4c8ab3-_0x40ab7d)/0x2))[_0x353134(0x548)](_0x3dedc1,_0x204eb7-_0x40ab7d),_0x2435e2=Math['round'](SceneManager[_0x353134(0x726)][_0x353134(0x326)]['y']-_0x1a57d9);this[_0x353134(0x119)](_0x126964,_0x2435e2,_0x40ab7d,_0x1a57d9),this[_0x353134(0xc0e)](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x276)]=function(_0x324236){const _0x31dbd5=_0x4adfe0,_0x19f7e1=SceneManager[_0x31dbd5(0x726)]['partyCommandWindowRectBorderStyle']();this['move'](_0x19f7e1['x'],_0x19f7e1['y'],_0x19f7e1[_0x31dbd5(0x1e2)],_0x19f7e1[_0x31dbd5(0x6a1)]),this[_0x31dbd5(0xc0e)](),this[_0x31dbd5(0x1c0)](0x0);},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x758)]=function(){const _0x1f6d84=_0x4adfe0;if(this[_0x1f6d84(0x746)]){const _0x33b980=this[_0x1f6d84(0x746)][_0x1f6d84(0x932)],_0x223032=this[_0x1f6d84(0x1e2)]-0x8,_0x4df664=this[_0x1f6d84(0x6a1)],_0xdd5af=this[_0x1f6d84(0x581)],_0x319263=ColorManager[_0x1f6d84(0x54f)](),_0x1967ee=ColorManager['dimColor2']();this[_0x1f6d84(0x746)]['x']=0x4,_0x33b980[_0x1f6d84(0xc8c)](_0x223032,_0x4df664),_0x33b980['gradientFillRect'](0x0,0x0,_0x223032,_0xdd5af,_0x1967ee,_0x319263,!![]),_0x33b980[_0x1f6d84(0x976)](0x0,_0xdd5af,_0x223032,_0x4df664-_0xdd5af*0x2,_0x319263),_0x33b980[_0x1f6d84(0x793)](0x0,_0x4df664-_0xdd5af,_0x223032,_0xdd5af,_0x319263,_0x1967ee,!![]),this[_0x1f6d84(0x746)][_0x1f6d84(0xb0f)](0x0,0x0,_0x223032,_0x4df664);}},Window_ActorCommand['prototype'][_0x4adfe0(0x2c8)]=function(){const _0x37b6e8=_0x4adfe0;if(!this[_0x37b6e8(0x33e)])return;const _0x1d7ce8=VisuMZ[_0x37b6e8(0xa98)]['Settings']['ActorCmd'],_0x2acc05=this[_0x37b6e8(0x86b)]();switch(_0x2acc05){case _0x37b6e8(0xc64):this[_0x37b6e8(0xa15)]($dataSkills[this[_0x37b6e8(0x33e)][_0x37b6e8(0x6fd)]()]);break;case _0x37b6e8(0x664):this[_0x37b6e8(0xa15)]($dataSkills[this[_0x37b6e8(0x33e)][_0x37b6e8(0xc01)]()]);break;case _0x37b6e8(0x7f2):const _0x14085f=_0x1d7ce8[_0x37b6e8(0xc70)],_0x2976fc=_0x14085f[_0x37b6e8(0x31d)]($dataSystem[_0x37b6e8(0x3ca)][this[_0x37b6e8(0x19b)]()]);this[_0x37b6e8(0xa2b)][_0x37b6e8(0x52e)](_0x2976fc);break;case _0x37b6e8(0x869):this[_0x37b6e8(0xa15)]($dataSkills[this[_0x37b6e8(0x19b)]()]);break;case _0x37b6e8(0x28e):this[_0x37b6e8(0xa2b)]['setText'](_0x1d7ce8['HelpItem']);break;case _0x37b6e8(0x946):this[_0x37b6e8(0xa2b)][_0x37b6e8(0x52e)](_0x1d7ce8[_0x37b6e8(0x853)]);break;case _0x37b6e8(0xa34):this[_0x37b6e8(0xa2b)]['setText'](_0x1d7ce8['HelpAutoBattle']);break;default:this[_0x37b6e8(0xa2b)]['setText']('');break;}},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x672)]=function(){const _0x2c89a9=_0x4adfe0;this['forceSelect'](0x0);if(this[_0x2c89a9(0x33e)]&&ConfigManager[_0x2c89a9(0xc7c)]){if(_0x2c89a9(0x7f0)==='bIskL'){const _0x14b2fd=this['_actor'][_0x2c89a9(0x246)]();this['selectSymbol'](_0x14b2fd);if(_0x14b2fd===_0x2c89a9(0x7f2)){if('wXTQL'!==_0x2c89a9(0xb02)){_0x27f40f+=_0x11ac45['x']-this[_0x2c89a9(0x6c0)]();const _0x1af831=_0x55f12d[_0x2c89a9(0x6ff)]()*0x3/0x4;_0x29937d=_0x48bd9f['y']+_0x1af831,_0x4dc30c=_0x48c691[_0x2c89a9(0x258)](_0x4bd8a9,_0x2207d3['y']+this['y']-this[_0x2c89a9(0x6a1)]+_0x1af831);}else{const _0x456929=this[_0x2c89a9(0x33e)][_0x2c89a9(0xf5)]();if(_0x456929){const _0x2065e1=this[_0x2c89a9(0x17c)](_0x2c89a9(0x7f2),_0x456929[_0x2c89a9(0x707)]);this[_0x2c89a9(0x165)](_0x2065e1||0x0);}}}else{if(_0x14b2fd==='singleSkill'){const _0x3ec12e=this[_0x2c89a9(0x33e)]['lastBattleSkill']();if(_0x3ec12e){const _0x540849=this[_0x2c89a9(0x17c)]('singleSkill',_0x3ec12e['id']);this[_0x2c89a9(0x165)](_0x540849||0x0);}}}}else _0x1cca3f+=_0x8d935b[_0x2c89a9(0x6b7)](_0x12f053['hpDamage']);}},Window_ActorCommand[_0x4adfe0(0x6ec)][_0x4adfe0(0x17c)]=function(_0x4d4907,_0x46e83a){const _0x464e66=_0x4adfe0;return this['_list']['findIndex'](_0x4a7734=>_0x4a7734[_0x464e66(0x594)]===_0x4d4907&&_0x4a7734[_0x464e66(0xb2a)]===_0x46e83a);},VisuMZ[_0x4adfe0(0xa98)]['Window_BattleStatus_initialize']=Window_BattleStatus['prototype'][_0x4adfe0(0xb7d)],Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)]=function(_0x1b1c0f){const _0x108beb=_0x4adfe0;VisuMZ[_0x108beb(0xa98)]['Window_BattleStatus_initialize']['call'](this,_0x1b1c0f),this['initBattleCore'](),this[_0x108beb(0x9e7)]();},Window_BattleStatus['prototype'][_0x4adfe0(0xca7)]=function(){const _0x5558fb=_0x4adfe0;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x5558fb(0x43c)]=SceneManager[_0x5558fb(0x726)][_0x5558fb(0xca7)](),this[_0x5558fb(0x43c)];},Window_BattleStatus['prototype']['initBattleCore']=function(){const _0x7fbeb6=_0x4adfe0;this[_0x7fbeb6(0x5fe)]=this['isFrameVisible']();const _0x4d95b2=VisuMZ['BattleCore'][_0x7fbeb6(0x5bc)]['BattleLayout'];_0x4d95b2['StatusWindowSkinHide']&&(this[_0x7fbeb6(0x2c6)]=0x0);},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x9db)]=function(){const _0x4fdb7e=_0x4adfe0,_0x18cef8=VisuMZ[_0x4fdb7e(0xa98)][_0x4fdb7e(0x5bc)][_0x4fdb7e(0x22d)];if(_0x18cef8[_0x4fdb7e(0xbb3)])return!![];const _0x5a0d71=this['battleLayoutStyle']();switch(_0x5a0d71){case _0x4fdb7e(0xc26):case'border':return!![];break;case _0x4fdb7e(0x93f):case'xp':case _0x4fdb7e(0xcac):default:return![];break;}},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0xc1f)]=function(){const _0x578d10=_0x4adfe0;if(this[_0x578d10(0x9db)]()){if(_0x578d10(0x65a)==='nJSwu')_0x5f11e4[_0x578d10(0xa98)]['Spriteset_Battle_createLowerLayer'][_0x578d10(0x61e)](this),this[_0x578d10(0x4df)](),this[_0x578d10(0x314)]();else return 0x0;}else{if(_0x578d10(0xb1a)!==_0x578d10(0x69d))return 0xa;else{if(_0x3707dd[_0x56132a[_0x578d10(0xba4)]]){const _0x511ae9=_0x397040[_0x578d10(0xba4)],_0x41e1ec=_0x5350e4['x'],_0x436369=_0x1103ba['y'],_0x2983cd=new _0x13dd96(_0x511ae9,_0x41e1ec,_0x436369);_0x3ab7d3[_0x578d10(0xa2f)]&&_0x2983cd['hide'](),this['_enemies']['push'](_0x2983cd);}}}},Window_BattleStatus['prototype']['maxCols']=function(){const _0x2fb170=_0x4adfe0,_0x13189e=this[_0x2fb170(0xca7)]();switch(_0x13189e){case _0x2fb170(0xc26):return 0x1;break;case'xp':case _0x2fb170(0xcac):return $gameParty[_0x2fb170(0xc7b)]()['length'];break;case _0x2fb170(0x93f):default:return $gameParty[_0x2fb170(0xb70)]();break;}},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x907)]=function(){const _0x318547=_0x4adfe0,_0x41946f=this[_0x318547(0xca7)]();switch(_0x41946f){case _0x318547(0xc26):return Window_StatusBase[_0x318547(0x6ec)]['itemHeight'][_0x318547(0x61e)](this);break;case'default':case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0x4adfe0(0x488)]=function(){const _0x1d3f2d=_0x4adfe0,_0x42b7c8=this['battleLayoutStyle']();switch(_0x42b7c8){case _0x1d3f2d(0xc26):return Window_StatusBase['prototype'][_0x1d3f2d(0x488)]['call'](this);break;case _0x1d3f2d(0x93f):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x632)]=function(){const _0x3b0a58=_0x4adfe0;this[_0x3b0a58(0x9db)]()?Window_StatusBase['prototype']['updatePadding'][_0x3b0a58(0x61e)](this):_0x3b0a58(0x79a)!=='gLIZj'?this[_0x3b0a58(0x581)]=0x8:_0x5e890d[_0x3b0a58(0x98e)](this[_0x3b0a58(0xad9)]()[_0x3b0a58(0x985)]());},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x739)]=function(){const _0x5aa5b0=_0x4adfe0,_0x24bbec=VisuMZ[_0x5aa5b0(0xa98)][_0x5aa5b0(0x5bc)][_0x5aa5b0(0x22d)];if(_0x24bbec['StatusWindowSkinFilename'])this[_0x5aa5b0(0x7b5)]=ImageManager[_0x5aa5b0(0x7fd)](_0x24bbec[_0x5aa5b0(0xbb3)]);else{if(_0x5aa5b0(0x5ea)!==_0x5aa5b0(0x5ea)){let _0x957668=_0x203ce0(_0x1a692f['$1']);while(_0x957668--){_0x13eaf3[_0x5aa5b0(0x98e)](this['opponentsUnit']()['trueRandomTarget']());}return this[_0x5aa5b0(0xa05)](_0x41cf38);}else Window_StatusBase[_0x5aa5b0(0x6ec)]['loadWindowskin']['call'](this);}},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0xbeb)]=function(_0x562df3){const _0x3ef58a=_0x4adfe0,_0x33cc0a=VisuMZ[_0x3ef58a(0xa98)][_0x3ef58a(0x5bc)][_0x3ef58a(0x22d)];if(_0x33cc0a[_0x3ef58a(0x154)])return;Window_StatusBase[_0x3ef58a(0x6ec)][_0x3ef58a(0xbeb)][_0x3ef58a(0x61e)](this,_0x562df3);},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x7b3)]=function(){const _0x67e466=_0x4adfe0;this[_0x67e466(0x621)]=!![];},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e6)]=function(){const _0x237943=_0x4adfe0;Window_StatusBase['prototype'][_0x237943(0x9e6)]['call'](this),this[_0x237943(0x6ac)](),this[_0x237943(0x1f8)]();if(this[_0x237943(0xca7)]()===_0x237943(0x2a2))this[_0x237943(0x3d2)]();},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x6ac)]=function(){const _0xd95532=_0x4adfe0;if($gameTemp[_0xd95532(0x84a)]())this[_0xd95532(0x534)](),this[_0xd95532(0x621)]=![],$gameTemp['clearBattleRefreshRequest']();else this['_requestRefresh']&&(_0xd95532(0xa16)===_0xd95532(0xa16)?(this[_0xd95532(0x621)]=![],this[_0xd95532(0xcab)](),this[_0xd95532(0x951)]()):this[_0xd95532(0xce2)][_0xd95532(0x977)]());},Window_BattleStatus[_0x4adfe0(0x6ec)]['show']=function(){const _0x84432a=_0x4adfe0;Window_StatusBase[_0x84432a(0x6ec)][_0x84432a(0x454)][_0x84432a(0x61e)](this);if(!$gameSystem[_0x84432a(0x1bc)]())this[_0x84432a(0xcab)]();},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e8)]=function(){const _0x6330ca=_0x4adfe0;if(this[_0x6330ca(0xab3)]===Window_BattleStatus)return;Window_StatusBase[_0x6330ca(0x6ec)][_0x6330ca(0x9e8)][_0x6330ca(0x61e)](this);},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0xcdf)]=function(_0xd28df6){const _0x49294a=_0x4adfe0,_0xbc1233=this[_0x49294a(0xca7)]();switch(_0xbc1233){case'xp':case'portrait':break;case'default':case _0x49294a(0xc26):case _0x49294a(0x2a2):default:return Window_StatusBase[_0x49294a(0x6ec)][_0x49294a(0xcdf)]['call'](this,_0xd28df6);break;}},VisuMZ['BattleCore'][_0x4adfe0(0x556)]=Window_BattleStatus['prototype'][_0x4adfe0(0x66c)],Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x66c)]=function(_0x4b7acc){const _0x18e6c9=_0x4adfe0,_0x1be551=this[_0x18e6c9(0xca7)]();switch(_0x1be551){case _0x18e6c9(0xc26):this[_0x18e6c9(0x19f)](_0x4b7acc);break;case'xp':this[_0x18e6c9(0xa09)](_0x4b7acc);break;case _0x18e6c9(0xcac):this[_0x18e6c9(0x196)](_0x4b7acc);break;case _0x18e6c9(0x93f):case _0x18e6c9(0x2a2):default:VisuMZ[_0x18e6c9(0xa98)][_0x18e6c9(0x556)][_0x18e6c9(0x61e)](this,_0x4b7acc);break;}},Window_BattleStatus['prototype'][_0x4adfe0(0x13d)]=function(_0x2bd29a){const _0x44f788=_0x4adfe0,_0x4de5ee=this['battleLayoutStyle']();if(!$gameSystem[_0x44f788(0x1bc)]())this['centerFrontViewSprite'](_0x2bd29a);switch(_0x4de5ee){case'list':this['drawItemStatusListStyle'](_0x2bd29a);break;case'xp':case'portrait':case'default':case _0x44f788(0x2a2):default:this[_0x44f788(0xc4c)](_0x2bd29a);break;}},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0xc4f)]=function(){const _0x5cf948=_0x4adfe0,_0x237395=this['battleLayoutStyle']();if(['xp']['includes'](_0x237395)&&!$gameSystem[_0x5cf948(0x1bc)]()){this[_0x5cf948(0x651)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x5cf948(0x6ec)][_0x5cf948(0xc4f)]['call'](this);},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x47c)]=function(_0xb1fd7a){const _0xaecae6=_0x4adfe0,_0x2bd1f1=this[_0xaecae6(0xcf8)](_0xb1fd7a)[_0xaecae6(0xc66)]();if(!_0x2bd1f1)return;const _0x4b4d61=this[_0xaecae6(0xca7)](),_0xc800b4=this[_0xaecae6(0x8a8)](_0xb1fd7a);let _0xb4f4d1=Math[_0xaecae6(0xb95)](_0xc800b4['x']+_0xc800b4[_0xaecae6(0x1e2)]/0x2)+this['padding'];if([_0xaecae6(0xc26)][_0xaecae6(0x5d0)](_0x4b4d61)){if(_0xaecae6(0x8bb)!=='efsaG')_0xb4f4d1=_0xc800b4[_0xaecae6(0x1e2)]/$gameParty[_0xaecae6(0xc7b)]()['length'],_0xb4f4d1*=_0xb1fd7a,_0xb4f4d1+=_0xc800b4['width']/$gameParty['battleMembers']()[_0xaecae6(0xa59)]/0x2;else{if(this[_0xaecae6(0x147)]())this[_0xaecae6(0x671)][_0xaecae6(0x995)](_0x300fe5);}}let _0x4d8d8c=Math[_0xaecae6(0xb95)](this['frontviewSpriteY'](_0xb1fd7a,_0x2bd1f1,_0xc800b4));_0x2bd1f1[_0xaecae6(0xc63)](_0xb4f4d1,_0x4d8d8c),this[_0xaecae6(0x844)](_0x2bd1f1,0x1),_0x2bd1f1[_0xaecae6(0x454)](),this['updateEffectsContainer'](),this[_0xaecae6(0x951)]();},Window_BattleStatus['prototype'][_0x4adfe0(0x975)]=function(_0x954c37,_0x3822e4,_0x331d95){const _0x13b5d5=_0x4adfe0,_0x4da663=VisuMZ[_0x13b5d5(0xa98)][_0x13b5d5(0x5bc)]['BattleLayout'],_0x182778=this[_0x13b5d5(0xca7)]();if(_0x182778==='xp'){if(_0x13b5d5(0xb17)!=='ksjWt'){this[_0x13b5d5(0x165)](_0x3ea55f);if(_0x33e6c0[_0x13b5d5(0xb1f)]()){const _0x47de9a=_0x11b548[_0x13b5d5(0x42b)]()[_0x1543e8],_0x184066=_0x5bc064[_0x13b5d5(0xce2)]['indexOf'](_0x47de9a);_0x184066>=0x0&&(_0x135282[_0x13b5d5(0x165)](_0x184066),_0x3290da['processOk']());}}else{const _0x1dcb45=_0x4da663[_0x13b5d5(0x5e3)];switch(_0x1dcb45[_0x13b5d5(0xc1b)]()[_0x13b5d5(0xb83)]()){case _0x13b5d5(0xce6):return _0x331d95['height']-_0x3822e4[_0x13b5d5(0xb7f)][_0x13b5d5(0x6a1)]/0x4;break;case'center':const _0x6c2bb4=_0x4da663[_0x13b5d5(0x43e)];return(_0x331d95[_0x13b5d5(0x6a1)]+(_0x3822e4[_0x13b5d5(0x6a1)]||_0x6c2bb4))/0x2;break;case _0x13b5d5(0x1f6):return 0x0;case _0x13b5d5(0xa23):default:return this[_0x13b5d5(0x8cf)](_0x331d95);break;}}}else{if(_0x182778==='portrait'){}}return _0x3822e4[_0x13b5d5(0x6a1)];},Sprite_Name['prototype'][_0x4adfe0(0x5b0)]=function(){return 0x24;},Sprite_Name[_0x4adfe0(0x6ec)][_0x4adfe0(0x8fe)]=function(){const _0x3611dc=_0x4adfe0,_0x2bbf71=this[_0x3611dc(0xa23)](),_0x14f3e2=this[_0x3611dc(0x73d)](),_0x10b8ed=this[_0x3611dc(0x5b0)]();this[_0x3611dc(0xa83)](),this[_0x3611dc(0x932)][_0x3611dc(0x465)](),this[_0x3611dc(0x932)]['drawTextTopAligned'](_0x2bbf71,0x4,0x0,_0x14f3e2,_0x10b8ed,_0x3611dc(0x1a3));},Bitmap['prototype'][_0x4adfe0(0x130)]=function(_0x155c27,_0x23b536,_0x486118,_0x5aeae9,_0x2e39e7,_0x12d9db){const _0x20b90d=_0x4adfe0,_0x583902=this[_0x20b90d(0xb38)],_0x32671a=_0x583902[_0x20b90d(0xaef)];_0x5aeae9=_0x5aeae9||0xffffffff;let _0xaf4a55=_0x23b536,_0x32f94e=Math[_0x20b90d(0xb95)](_0x486118+0x18/0x2+this[_0x20b90d(0x459)]*0.35);_0x12d9db==='center'&&(_0xaf4a55+=_0x5aeae9/0x2),_0x12d9db==='right'&&(_0xaf4a55+=_0x5aeae9),_0x583902['save'](),_0x583902[_0x20b90d(0x4e5)]=this['_makeFontNameText'](),_0x583902[_0x20b90d(0x3b1)]=_0x12d9db,_0x583902['textBaseline']='alphabetic',_0x583902['globalAlpha']=0x1,this[_0x20b90d(0xbd9)](_0x155c27,_0xaf4a55,_0x32f94e,_0x5aeae9),_0x583902['globalAlpha']=_0x32671a,this[_0x20b90d(0xe4)](_0x155c27,_0xaf4a55,_0x32f94e,_0x5aeae9),_0x583902['restore'](),this[_0x20b90d(0xbd5)]['update']();},Window_BattleStatus['prototype'][_0x4adfe0(0x8cf)]=function(_0x2e1dca){const _0x37054b=_0x4adfe0;return this[_0x37054b(0x83f)](_0x2e1dca)-this[_0x37054b(0x9bf)]();},Window_BattleStatus['prototype'][_0x4adfe0(0x19f)]=function(_0x587f34){const _0x314d66=_0x4adfe0;if(!VisuMZ[_0x314d66(0xa98)][_0x314d66(0x5bc)]['BattleLayout'][_0x314d66(0x495)])return;const _0x548a5b=this[_0x314d66(0xcf8)](_0x587f34),_0x585f41=this[_0x314d66(0x8a8)](_0x587f34);_0x585f41[_0x314d66(0x1e2)]=ImageManager[_0x314d66(0x8c1)],_0x585f41['height']-=0x2,this['drawActorFace'](_0x548a5b,_0x585f41['x']+0x1,_0x585f41['y']+0x1,_0x585f41[_0x314d66(0x1e2)],_0x585f41[_0x314d66(0x6a1)]);},Window_BattleStatus[_0x4adfe0(0x6ec)]['drawItemStatusListStyle']=function(_0x43b8a3){const _0x3eca15=_0x4adfe0,_0x17fa2f=VisuMZ[_0x3eca15(0xa98)]['Settings']['BattleLayout'],_0x2a9b6a=$dataSystem[_0x3eca15(0xc3a)]?0x4:0x3,_0x4bdfe4=_0x2a9b6a*0x80+(_0x2a9b6a-0x1)*0x8+0x4,_0x1cb2a0=this['actor'](_0x43b8a3),_0x3ac438=this[_0x3eca15(0x8a8)](_0x43b8a3);let _0x27ecfc=_0x3ac438['x']+this[_0x3eca15(0x581)];if(_0x17fa2f[_0x3eca15(0x495)])_0x3eca15(0x29a)===_0x3eca15(0x411)?this[_0x3eca15(0x637)]():_0x27ecfc=_0x3ac438['x']+ImageManager[_0x3eca15(0x8c1)]+0x8;else{if(_0x3eca15(0x5d2)!==_0x3eca15(0x5d2)){if(!this['canMove']())return;if(!this[_0x3eca15(0x593)])return;if(this[_0x3eca15(0xf0)]===_0x215e1e)return;this[_0x3eca15(0xf0)]=_0x3b772e,this['_angleDuration']=_0x4af8c2,this[_0x3eca15(0x2f3)]=_0x39bb24,this[_0x3eca15(0xb88)]=_0x196ccf||_0x3eca15(0x525),this['_angleRevertOnFinish']=_0x278d0a,this[_0x3eca15(0x117)]===_0x3a78d4&&(this[_0x3eca15(0x117)]=!![]),_0x4bbbe5<=0x0&&(this[_0x3eca15(0x7f3)]=_0x2d7f9c,this[_0x3eca15(0x117)]&&(this[_0x3eca15(0xf0)]=0x0,this[_0x3eca15(0x7f3)]=0x0));}else _0x27ecfc+=ImageManager[_0x3eca15(0x99e)];}const _0x575755=Math['round'](Math[_0x3eca15(0x258)](_0x3ac438['x']+_0x3ac438[_0x3eca15(0x1e2)]-_0x4bdfe4,_0x27ecfc)),_0x51f099=Math[_0x3eca15(0xb95)](_0x3ac438['y']+(_0x3ac438[_0x3eca15(0x6a1)]-Sprite_Name[_0x3eca15(0x6ec)][_0x3eca15(0x5b0)]())/0x2),_0x1f6cbc=Math[_0x3eca15(0xb95)](_0x575755-ImageManager[_0x3eca15(0x99e)]/0x2-0x4),_0x30e7b5=Math[_0x3eca15(0xb95)](_0x3ac438['y']+(_0x3ac438[_0x3eca15(0x6a1)]-ImageManager[_0x3eca15(0x3e4)])/0x2+ImageManager[_0x3eca15(0x3e4)]/0x2);let _0x3765ea=_0x575755+0x88;const _0x1b1531=_0x51f099;this[_0x3eca15(0x3ef)](_0x1cb2a0,_0x575755-0x4+(_0x17fa2f[_0x3eca15(0x6cd)]||0x0),_0x51f099+(_0x17fa2f[_0x3eca15(0x498)]||0x0)),this[_0x3eca15(0x8e5)](_0x1cb2a0,_0x575755+(_0x17fa2f[_0x3eca15(0x7a3)]||0x0),_0x51f099+(_0x17fa2f[_0x3eca15(0xc3b)]||0x0)),this['placeStateIcon'](_0x1cb2a0,_0x1f6cbc+(_0x17fa2f[_0x3eca15(0x3d3)]||0x0),_0x30e7b5+(_0x17fa2f['StateIconOffsetY']||0x0)),this[_0x3eca15(0x678)](_0x1cb2a0,'hp',_0x3765ea+0x88*0x0+(_0x17fa2f[_0x3eca15(0x3a7)]||0x0),_0x1b1531+(_0x17fa2f['HpGaugeOffsetY']||0x0)),this[_0x3eca15(0x678)](_0x1cb2a0,'mp',_0x3765ea+0x88*0x1+(_0x17fa2f[_0x3eca15(0x71f)]||0x0),_0x1b1531+(_0x17fa2f[_0x3eca15(0x41b)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x3eca15(0x678)](_0x1cb2a0,'tp',_0x3765ea+0x88*0x2+(_0x17fa2f[_0x3eca15(0x699)]||0x0),_0x1b1531+(_0x17fa2f[_0x3eca15(0xc4a)]||0x0));},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0xa09)]=function(_0x465d0f){const _0x8af3dc=_0x4adfe0;if(!$gameSystem['isSideView']())return;VisuMZ[_0x8af3dc(0xa98)][_0x8af3dc(0x556)][_0x8af3dc(0x61e)](this,_0x465d0f);},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0xc4c)]=function(_0xa8848e){const _0x2969c6=_0x4adfe0,_0x4c820a=VisuMZ[_0x2969c6(0xa98)][_0x2969c6(0x5bc)]['BattleLayout'],_0x506be3=this[_0x2969c6(0xcf8)](_0xa8848e),_0x26b104=this[_0x2969c6(0x8a8)](_0xa8848e),_0x256323=Math[_0x2969c6(0xb95)](_0x26b104['x']+(_0x26b104[_0x2969c6(0x1e2)]-0x80)/0x2),_0x500031=this['nameY'](_0x26b104);let _0x46990d=_0x256323-ImageManager[_0x2969c6(0x99e)]/0x2-0x4,_0xf74971=_0x500031+ImageManager[_0x2969c6(0x3e4)]/0x2;_0x46990d-ImageManager[_0x2969c6(0x99e)]/0x2<_0x26b104['x']&&(_0x2969c6(0x56d)!==_0x2969c6(0xc22)?(_0x46990d=_0x256323+ImageManager[_0x2969c6(0x99e)]/0x2-0x4,_0xf74971=_0x500031-ImageManager['iconHeight']/0x2):(this[_0x2969c6(0xa6e)]=this[_0x2969c6(0xa6e)]??0x1,this[_0x2969c6(0x219)]=this[_0x2969c6(0x219)]??0x1,this[_0x2969c6(0xb7f)][_0x2969c6(0xfc)]['x']=this[_0x2969c6(0x593)][_0x2969c6(0xfc)]['x']*this[_0x2969c6(0xa6e)],this[_0x2969c6(0xb7f)][_0x2969c6(0xfc)]['y']=this[_0x2969c6(0x593)]['scale']['y']*this[_0x2969c6(0x219)]));const _0x3760dd=_0x256323,_0x38682a=this['basicGaugesY'](_0x26b104);this['placeTimeGauge'](_0x506be3,_0x256323+(_0x4c820a[_0x2969c6(0x6cd)]||0x0),_0x500031+(_0x4c820a['TpbGaugeOffsetY']||0x0)),this['placeActorName'](_0x506be3,_0x256323+(_0x4c820a['NameOffsetX']||0x0),_0x500031+(_0x4c820a[_0x2969c6(0xc3b)]||0x0)),this[_0x2969c6(0x435)](_0x506be3,_0x46990d+(_0x4c820a[_0x2969c6(0x3d3)]||0x0),_0xf74971+(_0x4c820a[_0x2969c6(0xc3d)]||0x0)),this[_0x2969c6(0x678)](_0x506be3,'hp',_0x3760dd+(_0x4c820a[_0x2969c6(0x3a7)]||0x0),_0x38682a+(_0x4c820a[_0x2969c6(0x52c)]||0x0)),this[_0x2969c6(0x678)](_0x506be3,'mp',_0x3760dd+(_0x4c820a[_0x2969c6(0x71f)]||0x0),_0x38682a+this[_0x2969c6(0x9bf)]()+(_0x4c820a[_0x2969c6(0x41b)]||0x0)),$dataSystem[_0x2969c6(0xc3a)]&&this[_0x2969c6(0x678)](_0x506be3,'tp',_0x3760dd+(_0x4c820a[_0x2969c6(0x699)]||0x0),_0x38682a+this['gaugeLineHeight']()*0x2+(_0x4c820a[_0x2969c6(0xc4a)]||0x0));},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0xb97)]=function(_0x2e0be5){const _0x5c0074=_0x4adfe0;if(!VisuMZ[_0x5c0074(0xa98)][_0x5c0074(0x5bc)][_0x5c0074(0x22d)][_0x5c0074(0x967)])return![];if(_0x2e0be5[_0x5c0074(0x507)]())return!![];return Imported[_0x5c0074(0x2a6)]&&_0x2e0be5[_0x5c0074(0x7ca)]();},Game_Actor[_0x4adfe0(0x6ec)][_0x4adfe0(0x43d)]=function(){const _0x55903a=_0x4adfe0;if(this[_0x55903a(0xcf8)]()[_0x55903a(0x15d)][_0x55903a(0x634)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()['note'][_0x55903a(0x634)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x4adfe0(0x6ec)]['getBattlePortraitOffsetY']=function(){const _0x41f1b3=_0x4adfe0;if(this[_0x41f1b3(0xcf8)]()[_0x41f1b3(0x15d)][_0x41f1b3(0x634)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x41f1b3(0x15d)][_0x41f1b3(0x634)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x196)]=function(_0x25b971){const _0x18ebc9=_0x4adfe0,_0x52d1f7=this['actor'](_0x25b971);if(this['showPortraits'](_0x52d1f7)){if(_0x18ebc9(0x685)==='yedvs')return this['allBattleMembers']()[_0x18ebc9(0xcd9)](_0x3b1109=>_0x3b1109[_0x18ebc9(0xa38)]());else{const _0x5c9cef='actor%1-portrait'[_0x18ebc9(0x31d)](_0x52d1f7[_0x18ebc9(0xb79)]()),_0x47a982=this[_0x18ebc9(0x7c7)](_0x5c9cef,Sprite),_0x3ea610=_0x52d1f7[_0x18ebc9(0x4e2)]();_0x3ea610!==''?_0x18ebc9(0x40a)===_0x18ebc9(0x18c)?(_0x4718d8['x']=_0x316bb7['x']+_0x2de6bf[_0x18ebc9(0xb87)]*_0xfa9658,_0x1e5f66['y']=_0x2f807a['y']+_0x16c04d['PopupShiftY']):_0x47a982['bitmap']=ImageManager[_0x18ebc9(0xc53)](_0x3ea610):_0x47a982[_0x18ebc9(0x932)]=ImageManager[_0x18ebc9(0xc4d)];const _0x5c26eb=this[_0x18ebc9(0x8a8)](_0x25b971);_0x47a982[_0x18ebc9(0x893)]['x']=0.5,_0x47a982[_0x18ebc9(0x893)]['y']=0x1;let _0x13df25=Math[_0x18ebc9(0xb95)](_0x5c26eb['x']+_0x5c26eb[_0x18ebc9(0x1e2)]/0x2)+this[_0x18ebc9(0x581)];_0x13df25+=_0x52d1f7[_0x18ebc9(0x43d)]();let _0x1f359c=Math[_0x18ebc9(0xb95)](this[_0x18ebc9(0x6a1)]);_0x1f359c+=_0x52d1f7[_0x18ebc9(0x340)](),_0x47a982['move'](_0x13df25,_0x1f359c);const _0x318c04=VisuMZ[_0x18ebc9(0xa98)][_0x18ebc9(0x5bc)][_0x18ebc9(0x22d)][_0x18ebc9(0x7a5)];_0x47a982[_0x18ebc9(0xfc)]['x']=_0x318c04,_0x47a982[_0x18ebc9(0xfc)]['y']=_0x318c04,_0x47a982['show']();}}else{const _0x57f784=this['faceRect'](_0x25b971);this['drawActorFace'](_0x52d1f7,_0x57f784['x'],_0x57f784['y'],_0x57f784[_0x18ebc9(0x1e2)],_0x57f784[_0x18ebc9(0x6a1)]);}},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x7c7)]=function(_0x205be0,_0x5a80ca){const _0x3e5ab5=_0x4adfe0,_0x331a2d=this[_0x3e5ab5(0x901)];if(_0x331a2d[_0x205be0])return _0x3e5ab5(0xe6)!=='lLjau'?_0x331a2d[_0x205be0]:_0x1c1f6f[_0x3e5ab5(0xa98)][_0x3e5ab5(0x5bc)]['BattleLayout'][_0x3e5ab5(0x24c)];else{if(_0x3e5ab5(0x6e5)===_0x3e5ab5(0x17a))return!![];else{const _0x28cad3=new _0x5a80ca();return _0x331a2d[_0x205be0]=_0x28cad3,this[_0x3e5ab5(0x4b2)](_0x28cad3),this[_0x3e5ab5(0x4b2)](this[_0x3e5ab5(0x600)]),_0x28cad3;}}},Window_BattleStatus[_0x4adfe0(0x6ec)]['_createClientArea']=function(){const _0x16b803=_0x4adfe0;this[_0x16b803(0x384)](),this['_createEffectsContainer'](),Window_StatusBase[_0x16b803(0x6ec)][_0x16b803(0x91e)][_0x16b803(0x61e)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x384)]=function(){const _0x4ec7bd=_0x4adfe0;this[_0x4ec7bd(0x600)]=new Sprite(),this[_0x4ec7bd(0x600)][_0x4ec7bd(0x5de)]=[new PIXI[(_0x4ec7bd(0x5de))]['AlphaFilter']()],this[_0x4ec7bd(0x600)][_0x4ec7bd(0x44c)]=new Rectangle(),this[_0x4ec7bd(0x600)]['move'](this[_0x4ec7bd(0x517)],this[_0x4ec7bd(0x517)]),this[_0x4ec7bd(0x607)](this[_0x4ec7bd(0x600)]);},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x4c3)]=function(){const _0x5674dc=_0x4adfe0;this[_0x5674dc(0xad7)]=new Sprite(),this[_0x5674dc(0x607)](this[_0x5674dc(0xad7)]);},Window_BattleStatus['prototype'][_0x4adfe0(0xc40)]=function(){const _0x39afcf=_0x4adfe0;this[_0x39afcf(0xad7)]&&this[_0x39afcf(0x607)](this[_0x39afcf(0xad7)]);},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x8dd)]=function(){const _0x55f90c=_0x4adfe0;this[_0x55f90c(0x6c3)]=new Sprite(),this[_0x55f90c(0x607)](this[_0x55f90c(0x6c3)]);},Window_BattleStatus['prototype'][_0x4adfe0(0x8a0)]=function(){const _0x57f96e=_0x4adfe0;this['_cursorSprite']=new Sprite();for(let _0x4ec261=0x0;_0x4ec261<0x9;_0x4ec261++){if(_0x57f96e(0x4d2)===_0x57f96e(0x97d))return this[_0x57f96e(0x41e)]();else this[_0x57f96e(0x439)][_0x57f96e(0x607)](new Sprite());}this[_0x57f96e(0x600)][_0x57f96e(0x607)](this[_0x57f96e(0x439)]);},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x1d6)]=function(){const _0x2cd2f6=_0x4adfe0;Window_StatusBase['prototype'][_0x2cd2f6(0x1d6)][_0x2cd2f6(0x61e)](this),this[_0x2cd2f6(0x3aa)]();},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x3aa)]=function(){const _0x38fb46=_0x4adfe0,_0x4588d0=this[_0x38fb46(0x517)];this[_0x38fb46(0x600)]['move'](_0x4588d0,_0x4588d0),this['_cursorArea']['x']=_0x4588d0-this[_0x38fb46(0x738)]['x'],this[_0x38fb46(0x600)]['y']=_0x4588d0-this[_0x38fb46(0x738)]['y'];if(this[_0x38fb46(0xc90)]>0x0&&this[_0x38fb46(0x83b)]>0x0){if(_0x38fb46(0x378)===_0x38fb46(0x3dd)){let _0x583b77=(_0x589634[_0x38fb46(0x7ff)]*_0x478eee[_0x38fb46(0x6b2)]+_0x1f75ef[_0x38fb46(0x4e7)])*_0x319212[_0x38fb46(0xa86)];_0x583b77=this['disperseDamage'](_0x583b77),this[_0x38fb46(0x7f9)]()&&(_0x583b77*=this[_0x38fb46(0x92f)]()['pha']),_0x583b77=_0x3e0f26['floor'](_0x583b77),_0x583b77!==0x0&&(_0x434eea[_0x38fb46(0x78e)](_0x583b77),this['makeSuccess'](_0x112718));}else this[_0x38fb46(0x600)][_0x38fb46(0x415)]=this[_0x38fb46(0x9e0)]();}else this[_0x38fb46(0x600)][_0x38fb46(0x415)]=![];},Window_BattleStatus[_0x4adfe0(0x6ec)]['_updateFilterArea']=function(){const _0x354e80=_0x4adfe0;Window_StatusBase[_0x354e80(0x6ec)][_0x354e80(0x7bb)][_0x354e80(0x61e)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0xb3c)]=function(){const _0x5c386d=_0x4adfe0,_0x17aaf9=this[_0x5c386d(0x600)][_0x5c386d(0x837)]['apply'](new Point(0x0,0x0)),_0x59f6a3=this[_0x5c386d(0x600)]['filterArea'];_0x59f6a3['x']=_0x17aaf9['x']+this['origin']['x'],_0x59f6a3['y']=_0x17aaf9['y']+this[_0x5c386d(0x738)]['y'],_0x59f6a3[_0x5c386d(0x1e2)]=this[_0x5c386d(0xc90)],_0x59f6a3[_0x5c386d(0x6a1)]=this[_0x5c386d(0x83b)];},Window_BattleStatus[_0x4adfe0(0x6ec)]['refreshActorPortrait']=function(_0x1a5414){const _0x4fe098=_0x4adfe0;if(this['battleLayoutStyle']()!==_0x4fe098(0xcac))return;this['drawItemImagePortraitStyle'](_0x1a5414['index']());},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x5df)]=function(_0xe9c4e6,_0x2a13c4){const _0x2e487f=_0x4adfe0;if(!this[_0x2e487f(0x6c3)])return;if(!_0xe9c4e6)return;if(!_0x2a13c4)return;const _0x26e098=this['itemRect'](_0x2a13c4['index']());_0x26e098['x']+=_0x26e098[_0x2e487f(0x1e2)]/0x2+this[_0x2e487f(0x581)],_0xe9c4e6['x']=_0x26e098['x'],_0xe9c4e6['y']=_0x26e098['y'],this[_0x2e487f(0x6c3)]['addChild'](_0xe9c4e6);},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0xc50)]=function(_0x96de69){const _0x1883c1=_0x4adfe0;if(!this[_0x1883c1(0x6c3)])return;if(!_0x96de69)return;this[_0x1883c1(0x6c3)][_0x1883c1(0xc4e)](_0x96de69);},Window_BattleStatus[_0x4adfe0(0x6ec)]['updateBorderStyle']=function(){const _0x418e0f=_0x4adfe0;if(!this[_0x418e0f(0x943)]())return;if(!this[_0x418e0f(0x815)])this[_0x418e0f(0x5ec)]();this['prepareBorderActor'](),this['updateBorderSprite']();},Window_BattleStatus[_0x4adfe0(0x6ec)]['isBorderStylePortraitShown']=function(){const _0x37ee29=_0x4adfe0;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x37ee29(0xcfa)]())return![];return VisuMZ['BattleCore'][_0x37ee29(0x5bc)][_0x37ee29(0x22d)][_0x37ee29(0xb3f)];},Window_BattleStatus['prototype']['createBorderStylePortraitSprite']=function(){const _0x3e3483=_0x4adfe0;this[_0x3e3483(0x815)]=new Sprite();const _0x21b47b=SceneManager[_0x3e3483(0x726)],_0x21c9d8=_0x21b47b['children'][_0x3e3483(0x766)](_0x21b47b[_0x3e3483(0x743)]);_0x21b47b[_0x3e3483(0x844)](this[_0x3e3483(0x815)],_0x21c9d8),this[_0x3e3483(0x815)][_0x3e3483(0x893)]['x']=0.5,this[_0x3e3483(0x815)][_0x3e3483(0x893)]['y']=0x1;const _0x135be2=VisuMZ[_0x3e3483(0xa98)][_0x3e3483(0x5bc)][_0x3e3483(0x22d)][_0x3e3483(0x6e7)];this[_0x3e3483(0x815)][_0x3e3483(0xfc)]['x']=_0x135be2,this[_0x3e3483(0x815)]['scale']['y']=_0x135be2,this[_0x3e3483(0x815)]['y']=this['y']+this[_0x3e3483(0x6a1)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0x4adfe0(0x6ec)]['isBorderPortraitSpriteVisible']=function(){const _0x4f31b4=_0x4adfe0;return BattleManager[_0x4f31b4(0x613)]();},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x63c)]=function(){const _0x208ff0=_0x4adfe0;this[_0x208ff0(0x815)]['visible']=this[_0x208ff0(0xb69)]();const _0x23de93=BattleManager['actor'](),_0x5326cb=_0x23de93?_0x23de93['getBattlePortraitFilename']()||'':'';if(_0x23de93===this[_0x208ff0(0x815)]['actor']&&_0x5326cb===this['_borderPortraitSprite'][_0x208ff0(0xa14)])return;this[_0x208ff0(0x815)][_0x208ff0(0xcf8)]=_0x23de93||this[_0x208ff0(0x815)]['actor'],this[_0x208ff0(0x815)]['lastFilename']=_0x5326cb;if(!_0x23de93){if(_0x208ff0(0x557)==='QqkJU')this[_0x208ff0(0x98e)](_0x208ff0(0xccc),_0x14d014);else return;}else{if(_0x5326cb===''){this[_0x208ff0(0x815)][_0x208ff0(0x932)]=ImageManager[_0x208ff0(0xc4d)],this['_borderPortraitSprite'][_0x208ff0(0xa14)]='';return;}else{if(_0x208ff0(0x6b3)!==_0x208ff0(0x6b3)){const _0x52962e=this[_0x208ff0(0xb82)]();this[_0x208ff0(0xb9c)]=![],_0x52962e&&this['_deathStateApplied']&&this[_0x208ff0(0xc43)](),this[_0x208ff0(0xb16)]=![],this['refresh'](),this['isDead']()&&_0x52962e&&(this[_0x208ff0(0xccc)](),this[_0x208ff0(0x47e)]());}else{const _0x37d3c1=ImageManager[_0x208ff0(0xc53)](_0x5326cb);this[_0x208ff0(0x815)][_0x208ff0(0x2c6)]=0x0,_0x37d3c1[_0x208ff0(0x5c5)](this[_0x208ff0(0x2e6)][_0x208ff0(0xb0e)](this,_0x37d3c1));}}}},Window_BattleStatus[_0x4adfe0(0x6ec)]['processBorderActor']=function(_0x5d7929){const _0x43ba66=_0x4adfe0;this[_0x43ba66(0xa10)]=0x14,this[_0x43ba66(0x815)][_0x43ba66(0x932)]=_0x5d7929;SceneManager['_scene'][_0x43ba66(0x3cc)]()?(this[_0x43ba66(0x815)]['x']=0x0,this[_0x43ba66(0xbdf)]=Math[_0x43ba66(0x37b)](_0x5d7929[_0x43ba66(0x1e2)]/0x2)):(this[_0x43ba66(0x815)]['x']=this['width'],this[_0x43ba66(0xbdf)]=this['width']*0x3/0x4);this[_0x43ba66(0x815)][_0x43ba66(0x2c6)]=0x0,this[_0x43ba66(0x815)]['y']=this['y']+this['height'];const _0x3f448d=BattleManager[_0x43ba66(0xcf8)]();_0x3f448d&&(_0x43ba66(0x5d5)!==_0x43ba66(0xcaf)?(this[_0x43ba66(0xbdf)]+=_0x3f448d['getBattlePortraitOffsetX'](),this[_0x43ba66(0x815)]['y']+=_0x3f448d['getBattlePortraitOffsetY']()):this[_0x43ba66(0x898)][_0x43ba66(0x9e6)]());},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x6f6)]=function(){const _0x240b41=_0x4adfe0;if(this[_0x240b41(0xa10)]>0x0){if(_0x240b41(0x322)!==_0x240b41(0x322)){const _0x101cba=_0x22828e[_0x240b41(0xa98)][_0x240b41(0x5bc)][_0x240b41(0x6d9)];if(_0x101cba&&_0x101cba[_0x240b41(0xbc1)])return _0x101cba['jsOneForOne'][_0x240b41(0x61e)](this);this[_0x240b41(0x1e2)]=_0x34ed8a[_0x240b41(0x1e2)],this[_0x240b41(0x6a1)]=_0x2aa9f4[_0x240b41(0x6a1)];const _0x33138f=0x1;this['scale']['x']=_0x33138f,this[_0x240b41(0xfc)]['y']=_0x33138f,this['x']=0x0,this['y']=0x0;}else{const _0x4f1aac=this[_0x240b41(0xa10)],_0x54226e=this[_0x240b41(0x815)];_0x54226e['x']=(_0x54226e['x']*(_0x4f1aac-0x1)+this[_0x240b41(0xbdf)])/_0x4f1aac,_0x54226e[_0x240b41(0x2c6)]=(_0x54226e[_0x240b41(0x2c6)]*(_0x4f1aac-0x1)+0xff)/_0x4f1aac,this[_0x240b41(0xa10)]--;}}},Window_BattleStatus['prototype']['updateEffectContainers']=function(){const _0x596c21=_0x4adfe0;return;if(this[_0x596c21(0xad7)]){if(_0x596c21(0x940)!==_0x596c21(0x940))return this[_0x596c21(0x6a1)]*this[_0x596c21(0x25d)]();else this[_0x596c21(0xad7)]['x']=this['x'],this['_effectsContainer']['y']=this['y'];}this[_0x596c21(0x6c3)]&&(this[_0x596c21(0x6c3)]['x']=this['x'],this[_0x596c21(0x6c3)]['y']=this['y']);},Window_BattleStatus[_0x4adfe0(0x6ec)]['createAttachmentSprites']=function(){const _0x3a7296=_0x4adfe0,_0x2b902e=VisuMZ['BattleCore'][_0x3a7296(0x5bc)][_0x3a7296(0x22d)];if(_0x2b902e['StatusWindowAttachmentBack']){const _0x3a9a51=new Sprite();_0x3a9a51[_0x3a7296(0x932)]=ImageManager[_0x3a7296(0x7fd)](_0x2b902e[_0x3a7296(0x952)]),_0x3a9a51['x']=_0x2b902e[_0x3a7296(0x174)]||0x0,_0x3a9a51['y']=_0x2b902e[_0x3a7296(0xb72)]||0x0,this[_0x3a7296(0x4b2)](_0x3a9a51),this[_0x3a7296(0x195)]=_0x3a9a51;}if(_0x2b902e[_0x3a7296(0x924)]){if(_0x3a7296(0x169)===_0x3a7296(0x8a2)){if(!_0x4fc4e4[_0x3a7296(0xa98)][_0x3a7296(0x5bc)][_0x3a7296(0x109)][_0x3a7296(0x2d3)])return;_0x40d93e[_0x3a7296(0xa98)][_0x3a7296(0x234)][_0x3a7296(0x61e)](this,_0x2c156a);}else{const _0x14883a=new Sprite();_0x14883a[_0x3a7296(0x932)]=ImageManager['loadSystem'](_0x2b902e[_0x3a7296(0x924)]),_0x14883a['x']=_0x2b902e['StatusWindowAttachmentFrontOffsetX']||0x0,_0x14883a['y']=_0x2b902e[_0x3a7296(0x5d9)]||0x0,this['addChild'](_0x14883a),this['_frontAttachmentSprite']=_0x14883a;}}},Window_BattleStatus[_0x4adfe0(0x6ec)][_0x4adfe0(0x951)]=function(){const _0x4a25a5=_0x4adfe0;if(this[_0x4a25a5(0x6e3)]){if(_0x4a25a5(0x421)==='slkGM')this['addChild'](this[_0x4a25a5(0x6e3)]);else{if(_0x2339f3[_0x4a25a5(0x15d)][_0x4a25a5(0x634)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x26f63f=_0x31ba73(_0x1a7b2f['$1'])['split'](/[\r\n]+/)['remove'](''),_0x29508b=this[_0x4a25a5(0x5e9)](_0x26f63f);_0x218fdf=this[_0x4a25a5(0xbe2)](_0x29508b)||_0x3054ce,_0x4384d2=_0x3e79c0[_0x4a25a5(0x20d)](_0x4b7ea9);}}}this[_0x4a25a5(0x195)]&&this[_0x4a25a5(0x4b2)](this[_0x4a25a5(0x195)]);},Window_BattleActor[_0x4adfe0(0x6ec)][_0x4adfe0(0x719)]=function(){const _0x12be56=_0x4adfe0;return this[_0x12be56(0x481)]();},Window_BattleActor[_0x4adfe0(0x6ec)][_0x4adfe0(0x481)]=function(){const _0x1b47b9=_0x4adfe0,_0x2999aa=BattleManager[_0x1b47b9(0xc15)]();if(!_0x2999aa)return!![];if(!_0x2999aa[_0x1b47b9(0x28e)]())return!![];const _0x2e61cc=this['actor'](this[_0x1b47b9(0x721)]()),_0x18a1d0=_0x2999aa['item']()[_0x1b47b9(0x15d)];if(_0x2999aa['isForNotUser']()){if(_0x2e61cc===BattleManager[_0x1b47b9(0xcf8)]())return![];}if(_0x2999aa[_0x1b47b9(0x471)]()){if(!_0x2e61cc[_0x1b47b9(0xc5a)]())return![];}if(_0x2999aa[_0x1b47b9(0xc95)]()){if(!_0x2e61cc['isAlive']())return![];}return!![];},Window_BattleActor['prototype'][_0x4adfe0(0x343)]=function(_0xb190dc){const _0x476924=_0x4adfe0;this[_0x476924(0x57e)]=_0xb190dc;},VisuMZ['BattleCore']['Window_BattleActor_processTouch']=Window_BattleActor[_0x4adfe0(0x6ec)][_0x4adfe0(0x309)],Window_BattleActor[_0x4adfe0(0x6ec)][_0x4adfe0(0x309)]=function(){const _0x6eb9e5=_0x4adfe0;Window_BattleStatus[_0x6eb9e5(0x6ec)][_0x6eb9e5(0x309)][_0x6eb9e5(0x61e)](this),this[_0x6eb9e5(0x57e)]?this[_0x6eb9e5(0x896)]():VisuMZ[_0x6eb9e5(0xa98)][_0x6eb9e5(0x6bd)][_0x6eb9e5(0x61e)](this);},Window_BattleActor[_0x4adfe0(0x6ec)][_0x4adfe0(0x896)]=function(){const _0x3e1413=_0x4adfe0,_0x1b3f1d=SceneManager[_0x3e1413(0x726)][_0x3e1413(0x6a7)];if(!_0x1b3f1d)return;this[_0x3e1413(0x6d7)]=![];const _0x4e86a2=this[_0x3e1413(0x42a)]();if(_0x4e86a2>=0x0){this[_0x3e1413(0x165)](_0x4e86a2);if(TouchInput[_0x3e1413(0xb1f)]()){const _0x4fbea7=$gameParty['members']()[_0x4e86a2],_0x52a190=_0x1b3f1d[_0x3e1413(0xce2)][_0x3e1413(0x766)](_0x4fbea7);_0x52a190>=0x0&&(_0x1b3f1d['select'](_0x52a190),_0x1b3f1d[_0x3e1413(0x62a)]());}}},Window_BattleActor[_0x4adfe0(0x6ec)]['_makeCursorAlpha']=function(){const _0x3315a2=_0x4adfe0;if(this[_0x3315a2(0x57e)]){if(_0x3315a2(0x705)==='dRdCY')this[_0x3315a2(0xac6)]++,this['active']=!![];else{_0x41b85a('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x5169ab['exit']();return;}}const _0x2227f8=Window_BattleStatus['prototype']['_makeCursorAlpha']['call'](this);return this[_0x3315a2(0x57e)]&&(this['active']=![]),_0x2227f8;},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xb77)]=Window_BattleActor[_0x4adfe0(0x6ec)][_0x4adfe0(0x454)],Window_BattleActor[_0x4adfe0(0x6ec)][_0x4adfe0(0x454)]=function(){const _0x35a200=_0x4adfe0;VisuMZ[_0x35a200(0xa98)][_0x35a200(0xb77)][_0x35a200(0x61e)](this);const _0x2084f1=BattleManager[_0x35a200(0xc15)]();if(_0x2084f1){if(_0x35a200(0x16e)===_0x35a200(0x16e)){const _0x17c20c=$gameParty[_0x35a200(0x66d)]();if(_0x2084f1['canSingleOrMultipleSelect']()&&_0x17c20c[_0x35a200(0xa59)]>0x1){if(_0x35a200(0x5f9)!==_0x35a200(0x213))this[_0x35a200(0x85b)](_0x35a200(0x891),this[_0x35a200(0x668)][_0x35a200(0xb0e)](this));else{if(!_0x17b3b2)return![];return _0x29e05a[_0x35a200(0x6e8)]()===this[_0x35a200(0x6e8)]();}}}else{if(this['isActor']()){const _0x4b4261=this[_0x35a200(0x37d)]();if(_0x4b4261[_0x35a200(0xa59)]>0x0){const _0x120fbe=_0x4b4261[_0x40fd69];if(_0x120fbe)_0x34bced=this[_0x35a200(0x970)]()['indexOf'](_0x120fbe);}}this['_activeWeaponSlot']=_0x501448||0x0,this[_0x35a200(0xc42)]={};}}},VisuMZ[_0x4adfe0(0xa98)]['Window_BattleActor_hide']=Window_BattleActor[_0x4adfe0(0x6ec)]['hide'],Window_BattleActor[_0x4adfe0(0x6ec)]['hide']=function(){const _0x45a095=_0x4adfe0;VisuMZ[_0x45a095(0xa98)][_0x45a095(0x22a)][_0x45a095(0x61e)](this),delete this[_0x45a095(0xa8b)][_0x45a095(0x9e4)],delete this[_0x45a095(0xa8b)][_0x45a095(0x891)];},Window_BattleActor[_0x4adfe0(0x6ec)][_0x4adfe0(0x668)]=function(){const _0x4a5f6a=_0x4adfe0,_0x17c31f=BattleManager['inputtingAction']();if(_0x17c31f)_0x17c31f['setTargetBattlerKey'](_0x4a5f6a(0x8c6));this[_0x4a5f6a(0x62a)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x753)]=Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)],Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)]=function(_0x456edd){const _0x46feff=_0x4adfe0;this[_0x46feff(0x31a)]=null,VisuMZ[_0x46feff(0xa98)][_0x46feff(0x753)]['call'](this,_0x456edd);if(Imported[_0x46feff(0x854)]){if(VisuMZ[_0x46feff(0xc9d)][_0x46feff(0xcc9)]<1.12){if('SqIqK'===_0x46feff(0x6c7)){let _0x421aed='';_0x421aed+=_0x46feff(0xc1e),_0x421aed+=_0x46feff(0x772),_0x421aed+=_0x46feff(0x809),alert(_0x421aed),SceneManager[_0x46feff(0x162)]();}else this['windowskin']=_0xa8b8d8[_0x46feff(0x7fd)](_0x4475f0[_0x46feff(0xbb3)]);}}},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x78a)]=function(){const _0x27946f=_0x4adfe0;return this[_0x27946f(0xbf9)]();},VisuMZ['BattleCore']['Window_BattleEnemy_show']=Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x454)],Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x454)]=function(){const _0x5c78a8=_0x4adfe0;VisuMZ['BattleCore'][_0x5c78a8(0xc68)][_0x5c78a8(0x61e)](this),this['y']=Graphics['height']*0xa,this['meetsSelectFrontviewActorConditions']()&&this[_0x5c78a8(0x788)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x6e1)]=Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e8)],Window_BattleEnemy['prototype'][_0x4adfe0(0x9e8)]=function(){const _0x33988b=_0x4adfe0;VisuMZ['BattleCore']['Window_BattleEnemy_hide'][_0x33988b(0x61e)](this),$gameParty[_0x33988b(0x165)](null),delete this[_0x33988b(0xa8b)][_0x33988b(0x9e4)],delete this['_handlers'][_0x33988b(0x891)];},Window_BattleEnemy['prototype'][_0x4adfe0(0xc92)]=function(){const _0x1716ff=_0x4adfe0;let _0x2ef25d=$gameTroop['aliveMembers']();const _0xa49ec=BattleManager['inputtingAction']();if(_0xa49ec){if(_0x1716ff(0x19c)===_0x1716ff(0x8e8))_0x2624ed['changeCtbChargeTime'](_0x528538);else{_0xa49ec[_0x1716ff(0x4ab)]()&&_0x2ef25d[_0x1716ff(0xa59)]>0x1&&this['setHandler']('pageup',this[_0x1716ff(0x4da)][_0x1716ff(0xb0e)](this));if(_0xa49ec[_0x1716ff(0x93c)]()){const _0x5fbe21=$gameParty[_0x1716ff(0x66d)]();_0x2ef25d=_0x2ef25d[_0x1716ff(0x197)](_0x5fbe21),_0xa49ec[_0x1716ff(0x4ab)]()&&_0x5fbe21[_0x1716ff(0xa59)]>0x1&&this[_0x1716ff(0x85b)]('pagedown',this[_0x1716ff(0x668)][_0x1716ff(0xb0e)](this));}}}return _0x2ef25d;},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xcab)]=function(){const _0x4224fc=_0x4adfe0;this[_0x4224fc(0xce2)]=this[_0x4224fc(0xc92)](),this[_0x4224fc(0x61d)](),Window_Selectable[_0x4224fc(0x6ec)][_0x4224fc(0xcab)]['call'](this);},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x61d)]=function(){const _0x3275ec=_0x4adfe0;this['_enemies'][_0x3275ec(0x712)]((_0x233d32,_0x14ef2f)=>{const _0x5f1b85=_0x3275ec;if(_0x233d32[_0x5f1b85(0x771)]()!==_0x14ef2f[_0x5f1b85(0x771)]()){if('DLOBP'!==_0x5f1b85(0x284))return 0x0;else{if(_0x233d32[_0x5f1b85(0x13b)]())return-0x1;if(_0x14ef2f[_0x5f1b85(0x13b)]())return 0x1;}}if(_0x233d32[_0x5f1b85(0x771)]()&&_0x14ef2f[_0x5f1b85(0x771)]())return _0x233d32[_0x5f1b85(0x721)]()-_0x14ef2f[_0x5f1b85(0x721)]();if(_0x233d32['battler']()['_baseX']===_0x14ef2f['battler']()[_0x5f1b85(0x49e)])return _0x233d32['battler']()['_baseY']-_0x14ef2f['battler']()[_0x5f1b85(0x984)];else{if(_0x5f1b85(0x865)!==_0x5f1b85(0x76e))return _0x233d32[_0x5f1b85(0xc66)]()['_baseX']-_0x14ef2f[_0x5f1b85(0xc66)]()[_0x5f1b85(0x49e)];else{const _0x5d6111=_0x8b2b21(_0xdb807e['$1'])['split'](/[\r\n]+/)['remove'](''),_0x5e1a83=_0x164b01[_0x5f1b85(0x5e9)](_0x5d6111);_0x1b106c['wtypeId']=_0x16c91b['getWtypeIdWithName'](_0x5e1a83);}}}),SceneManager[_0x3275ec(0x2dc)]()&&(_0x3275ec(0x87a)!==_0x3275ec(0x13e)?this[_0x3275ec(0xce2)][_0x3275ec(0x977)]():(_0x85ea09*=-0x1,_0x49e8c1*=-0x1));},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x370)]=function(){const _0x306a9a=_0x4adfe0,_0x43ff26=VisuMZ[_0x306a9a(0xa98)][_0x306a9a(0x5bc)][_0x306a9a(0x30b)];_0x43ff26['LastSelected']?this[_0x306a9a(0xbfa)]():this['autoSelectPriority']();},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0xbfa)]=function(){const _0x2b2fc9=_0x4adfe0,_0x214c1b=BattleManager['inputtingAction']();if(_0x214c1b&&_0x214c1b[_0x2b2fc9(0x93c)]()){if(_0x214c1b[_0x2b2fc9(0x6f2)]()){if(this[_0x2b2fc9(0x2ba)]&&this['_enemies'][_0x2b2fc9(0x5d0)](this[_0x2b2fc9(0x2ba)])){if(_0x2b2fc9(0x2ed)===_0x2b2fc9(0x11a))_0x2f8af3+=_0x3e621d,_0x36fbcf+=_0x4de528;else{const _0x5b0084=this[_0x2b2fc9(0xce2)][_0x2b2fc9(0x766)](this[_0x2b2fc9(0x2ba)]);return this[_0x2b2fc9(0x1b7)](_0x5b0084);}}else return this[_0x2b2fc9(0xada)]();}}if(this['_lastEnemy']&&this[_0x2b2fc9(0xce2)][_0x2b2fc9(0x5d0)](this[_0x2b2fc9(0x31a)])){const _0x440428=this[_0x2b2fc9(0xce2)]['indexOf'](this[_0x2b2fc9(0x31a)]);this[_0x2b2fc9(0x1b7)](_0x440428);}else this[_0x2b2fc9(0xada)]();},Window_BattleEnemy['prototype'][_0x4adfe0(0xada)]=function(){const _0x3a97a3=_0x4adfe0,_0x85c0c6=BattleManager[_0x3a97a3(0xc15)]();if(_0x85c0c6&&_0x85c0c6[_0x3a97a3(0x93c)]()){const _0x23035a=$gameParty[_0x3a97a3(0x66d)]()[0x0];let _0x43f590=this[_0x3a97a3(0xce2)][_0x3a97a3(0x766)](_0x23035a);const _0x29f778=_0x85c0c6[_0x3a97a3(0x28e)]()[_0x3a97a3(0x178)];if(_0x29f778[_0x3a97a3(0x634)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this['forceSelect'](_0x43f590);return;}else{if(_0x29f778[_0x3a97a3(0x634)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this['forceSelect'](_0x43f590-0x1);return;}}}const _0x50b03b=VisuMZ[_0x3a97a3(0xa98)][_0x3a97a3(0x5bc)][_0x3a97a3(0x30b)];let _0x3ca39c=![];$gameSystem[_0x3a97a3(0x1bc)]()?_0x3ca39c=_0x50b03b[_0x3a97a3(0x827)]:_0x3a97a3(0x5d3)!==_0x3a97a3(0x874)?_0x3ca39c=_0x50b03b['FrontViewSelect']:_0x4cad2b['setWaitMode'](_0x3a97a3(0x281)),this[_0x3a97a3(0x1b7)](_0x3ca39c?this['maxItems']()-0x1:0x0);},Window_BattleEnemy['prototype'][_0x4adfe0(0xa81)]=function(){const _0x23ea55=_0x4adfe0;Window_Selectable[_0x23ea55(0x6ec)][_0x23ea55(0xa81)][_0x23ea55(0x61e)](this);if(this[_0x23ea55(0x85f)]()['isEnemy']())this['_lastEnemy']=this[_0x23ea55(0x85f)]();if(this[_0x23ea55(0x85f)]()[_0x23ea55(0x771)]())this[_0x23ea55(0x2ba)]=this[_0x23ea55(0x85f)]();},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x165)]=function(_0x571c5f){const _0x4122b5=_0x4adfe0;Window_Selectable[_0x4122b5(0x6ec)][_0x4122b5(0x165)][_0x4122b5(0x61e)](this,_0x571c5f),$gameTroop[_0x4122b5(0x165)](this[_0x4122b5(0x85f)]()),$gameParty[_0x4122b5(0x165)](this[_0x4122b5(0x85f)]());if(!this[_0x4122b5(0x85f)]())return;if(this[_0x4122b5(0x54b)]()){if(_0x4122b5(0x5ac)==='DYGvS'){const _0xed4b2e=SceneManager['_scene'][_0x4122b5(0xce9)];this[_0x4122b5(0x85f)]()[_0x4122b5(0x771)]()?_0xed4b2e[_0x4122b5(0x165)](this[_0x4122b5(0x85f)]()[_0x4122b5(0x721)]()):_0xed4b2e['deselect']();}else _0x274d6a[_0x4122b5(0xcde)]*=-0x1;}},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x54b)]=function(){const _0x4f56ba=_0x4adfe0;if(!this['visible'])return![];if($gameSystem[_0x4f56ba(0x1bc)]())return![];const _0xac320a=SceneManager[_0x4f56ba(0x726)][_0x4f56ba(0xca7)](),_0x1dbab3=['default',_0x4f56ba(0xc26),'xp','portrait',_0x4f56ba(0x2a2)];return _0x1dbab3[_0x4f56ba(0x5d0)](_0xac320a);},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x788)]=function(){const _0x333837=_0x4adfe0,_0x3c0fbf=SceneManager['_scene'][_0x333837(0xce9)];_0x3c0fbf[_0x333837(0x454)](),_0x3c0fbf[_0x333837(0x343)](!![]),_0x3c0fbf['refresh'](),_0x3c0fbf['deselect']();const _0x36928d=SceneManager[_0x333837(0x726)][_0x333837(0xca7)](),_0x2e318e=['xp',_0x333837(0xcac),_0x333837(0x2a2)];if(_0x2e318e[_0x333837(0x5d0)](_0x36928d)){if(_0x333837(0x6f9)===_0x333837(0x1c6)){const _0x48482d=this[_0x333837(0xc2b)](_0x5e9755);if(_0x48482d===_0x333837(0x579))this[_0x333837(0xb61)](_0xd0709e);else _0x48482d==='icon'?this['drawItemStyleIcon'](_0x1cf62c):_0x48324c['prototype'][_0x333837(0x23d)]['call'](this,_0x2fdbe3);}else{const _0x38f41b=SceneManager[_0x333837(0x726)][_0x333837(0x326)];_0x38f41b[_0x333837(0xfc)]['y']=0x0;}}},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x1c9)]=function(){const _0x8c742e=_0x4adfe0,_0x57b4b7=SceneManager['_scene'][_0x8c742e(0xce9)];_0x57b4b7[_0x8c742e(0x9e8)](),_0x57b4b7[_0x8c742e(0x343)](![]),_0x57b4b7[_0x8c742e(0x330)]();const _0x478aaf=SceneManager[_0x8c742e(0x726)][_0x8c742e(0x326)];_0x478aaf['scale']['y']=0x1;},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x4da)]=function(){const _0x2f4514=_0x4adfe0,_0x4b6797=BattleManager[_0x2f4514(0xc15)]();if(_0x4b6797)_0x4b6797[_0x2f4514(0x3ba)]('all\x20enemies');this[_0x2f4514(0x62a)]();},Window_BattleEnemy[_0x4adfe0(0x6ec)]['selectAllActors']=function(){const _0x1d5642=_0x4adfe0,_0x56f3b7=BattleManager[_0x1d5642(0xc15)]();if(_0x56f3b7)_0x56f3b7['setTargetBattlerKey'](_0x1d5642(0x8c6));this[_0x1d5642(0x62a)]();},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x719)]=function(){const _0x363e26=_0x4adfe0;return this[_0x363e26(0x481)]();},Window_BattleEnemy[_0x4adfe0(0x6ec)][_0x4adfe0(0x481)]=function(){const _0x50f31c=_0x4adfe0,_0x56bec5=BattleManager[_0x50f31c(0xc15)]();if(!_0x56bec5)return!![];if(!_0x56bec5[_0x50f31c(0x28e)]())return!![];const _0x4fb141=this[_0x50f31c(0x85f)](),_0x56f8c3=_0x56bec5[_0x50f31c(0x28e)]()[_0x50f31c(0x15d)];if(_0x56bec5[_0x50f31c(0x285)]()){if(_0x4fb141===BattleManager[_0x50f31c(0xcf8)]())return![];}return!![];},Window_BattleItem[_0x4adfe0(0x6ec)][_0x4adfe0(0x5d0)]=function(_0x220f56){const _0x5f5c0f=_0x4adfe0;if(!_0x220f56)return![];return _0x220f56[_0x5f5c0f(0x2c0)]===0x0||_0x220f56[_0x5f5c0f(0x2c0)]===0x1;};function Window_AutoBattleCancel(){const _0x133c5a=_0x4adfe0;this[_0x133c5a(0xb7d)](...arguments);}Window_AutoBattleCancel[_0x4adfe0(0x6ec)]=Object['create'](Window_Base[_0x4adfe0(0x6ec)]),Window_AutoBattleCancel['prototype'][_0x4adfe0(0xab3)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x4adfe0(0x6ec)]['initialize']=function(_0x303e68){const _0x31c41b=_0x4adfe0;Window_Base[_0x31c41b(0x6ec)][_0x31c41b(0xb7d)][_0x31c41b(0x61e)](this,_0x303e68),this[_0x31c41b(0x1c0)](this[_0x31c41b(0xcef)]()),this[_0x31c41b(0xcab)]();},Window_AutoBattleCancel[_0x4adfe0(0x6ec)][_0x4adfe0(0xcef)]=function(){const _0x5ab325=_0x4adfe0;return VisuMZ['BattleCore'][_0x5ab325(0x5bc)][_0x5ab325(0x936)]['AutoBattleBgType'];},Window_AutoBattleCancel[_0x4adfe0(0x6ec)][_0x4adfe0(0xcab)]=function(){const _0x5f3aa2=_0x4adfe0;this[_0x5f3aa2(0x17f)]['clear']();const _0x33d89e=VisuMZ[_0x5f3aa2(0xa98)]['Settings'][_0x5f3aa2(0x936)][_0x5f3aa2(0x70f)],_0x3e9c4e=_0x33d89e[_0x5f3aa2(0x31d)](this[_0x5f3aa2(0xacf)](),this['cancelButtonText']()),_0x57c96c=this[_0x5f3aa2(0xa88)](_0x3e9c4e)[_0x5f3aa2(0x1e2)],_0x3d7a39=Math[_0x5f3aa2(0xa55)]((this[_0x5f3aa2(0xc90)]-_0x57c96c)/0x2);this[_0x5f3aa2(0x9c2)](_0x3e9c4e,_0x3d7a39,0x0,_0x57c96c);},Window_AutoBattleCancel[_0x4adfe0(0x6ec)]['okButtonText']=function(){const _0x5422ed=_0x4adfe0;if(Imported[_0x5422ed(0x56a)]){if(_0x5422ed(0xb94)!==_0x5422ed(0xb94)){if(!this[_0x5422ed(0x418)]())return;if(!this[_0x5422ed(0x593)])return;if(this[_0x5422ed(0xa67)]===_0x294801&&this[_0x5422ed(0x16c)]===_0x4c76c2)return;this[_0x5422ed(0xa67)]=_0x106b8d,this['_targetSkewY']=_0x1395ce,this[_0x5422ed(0x25a)]=_0x234b2d,this[_0x5422ed(0xc5c)]=_0x2025f8,this['_skewEasing']=_0x2bc05b||_0x5422ed(0x525),_0x307c42<=0x0&&(this[_0x5422ed(0x593)]['skew']['x']=this[_0x5422ed(0xa67)],this['_distortionSprite']['skew']['y']=this[_0x5422ed(0x16c)]);}else return TextManager[_0x5422ed(0x1ae)]('ok');}else return VisuMZ[_0x5422ed(0xa98)][_0x5422ed(0x5bc)][_0x5422ed(0x936)][_0x5422ed(0x15e)];},Window_AutoBattleCancel['prototype'][_0x4adfe0(0x635)]=function(){const _0x22f876=_0x4adfe0;if(Imported['VisuMZ_0_CoreEngine']){if(_0x22f876(0x106)!==_0x22f876(0x8cc))return TextManager['getInputButtonString'](_0x22f876(0x12c));else{if(!_0x1afa0f[_0x22f876(0xcfa)]())return;const _0x16ca22=_0x46234d['getLastPluginCommandInterpreter']();if(!_0x16ca22)return;_0x16ca22[_0x22f876(0x98c)](_0x22f876(0xa02));}}else{if(_0x22f876(0x5bf)==='GYPnA')return VisuMZ[_0x22f876(0xa98)][_0x22f876(0x5bc)][_0x22f876(0x936)][_0x22f876(0xbcb)];else this[_0x22f876(0xafe)]('wait');}},Window_AutoBattleCancel[_0x4adfe0(0x6ec)]['update']=function(){const _0x5e2bef=_0x4adfe0;Window_Base['prototype'][_0x5e2bef(0x9e6)][_0x5e2bef(0x61e)](this),this['updateVisibility'](),this['updateCancel']();},Window_AutoBattleCancel[_0x4adfe0(0x6ec)]['updateVisibility']=function(){const _0xd19246=_0x4adfe0;this[_0xd19246(0x415)]=BattleManager[_0xd19246(0xc2f)];},Window_AutoBattleCancel[_0x4adfe0(0x6ec)][_0x4adfe0(0x89c)]=function(){const _0x4775cc=_0x4adfe0;if(!BattleManager[_0x4775cc(0xc2f)])return;(Input['isTriggered']('ok')||Input[_0x4775cc(0xb1d)](_0x4775cc(0x12c))||TouchInput[_0x4775cc(0xb1f)]()||TouchInput[_0x4775cc(0xb96)]())&&(SoundManager['playCancel'](),BattleManager[_0x4775cc(0xc2f)]=![],Input[_0x4775cc(0x465)](),TouchInput[_0x4775cc(0x465)]());};function Window_EnemyName(){const _0x85e02=_0x4adfe0;this[_0x85e02(0xb7d)](...arguments);}Window_EnemyName[_0x4adfe0(0x6ec)]=Object['create'](Window_StatusBase[_0x4adfe0(0x6ec)]),Window_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0xab3)]=Window_EnemyName,Window_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0xb7d)]=function(_0x190e66){const _0x237a51=_0x4adfe0;this[_0x237a51(0xcff)]=_0x190e66,this[_0x237a51(0xa82)]='';const _0xe94c44=new Rectangle(0x0,0x0,Graphics[_0x237a51(0xcc7)],this[_0x237a51(0x6ff)]()*0x4);Window_StatusBase[_0x237a51(0x6ec)][_0x237a51(0xb7d)]['call'](this,_0xe94c44),this['setBackgroundType'](0x2),this[_0x237a51(0x3f7)]=0x0;},Window_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x632)]=function(){this['padding']=0x0;},Window_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x85f)]=function(){const _0x190654=_0x4adfe0;return $gameTroop['members']()[this[_0x190654(0xcff)]];},Window_EnemyName[_0x4adfe0(0x6ec)]['update']=function(){const _0x528423=_0x4adfe0;Window_StatusBase[_0x528423(0x6ec)][_0x528423(0x9e6)][_0x528423(0x61e)](this),this[_0x528423(0x85f)]()&&this[_0x528423(0x85f)]()[_0x528423(0xa23)]()!==this[_0x528423(0xa82)]&&(this[_0x528423(0xa82)]=this[_0x528423(0x85f)]()[_0x528423(0xa23)](),this['refresh']()),this[_0x528423(0x8fb)](),this['updatePosition']();},Window_EnemyName[_0x4adfe0(0x6ec)]['updateOpacity']=function(){const _0x27a23=_0x4adfe0;if(!this[_0x27a23(0x85f)]()){if(this['contentsOpacity']>0x0)this[_0x27a23(0x3f7)]-=0x10;}else{if(this[_0x27a23(0x85f)]()[_0x27a23(0xc5a)]()){if(this[_0x27a23(0x3f7)]>0x0)this[_0x27a23(0x3f7)]-=0x10;}else{if(SceneManager['_scene'][_0x27a23(0x6a7)]&&SceneManager[_0x27a23(0x726)][_0x27a23(0x6a7)][_0x27a23(0x27e)]&&SceneManager['_scene']['_enemyWindow'][_0x27a23(0xce2)][_0x27a23(0x5d0)](this[_0x27a23(0x85f)]())){if(this[_0x27a23(0x3f7)]<0xff)this[_0x27a23(0x3f7)]+=0x10;}else this[_0x27a23(0x3f7)]>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x1e0)]=function(){const _0x51ceb9=_0x4adfe0;if(!this[_0x51ceb9(0x85f)]())return;if(SceneManager[_0x51ceb9(0x2dc)]())_0x51ceb9(0x6c8)===_0x51ceb9(0x7e4)?(_0x145457+=_0x5db51d[_0x51ceb9(0x2e2)][_0x51ceb9(0x909)]||0x0,_0x262f19+=_0x39ae55[_0x51ceb9(0x2e2)]['OffsetY']||0x0):this['x']=Graphics[_0x51ceb9(0xcc7)]-this[_0x51ceb9(0x85f)]()[_0x51ceb9(0xc66)]()['_baseX'];else{if('sibZC'===_0x51ceb9(0x99f))this['x']=this['enemy']()['battler']()['_baseX'];else{if(this[_0x51ceb9(0x58c)]())_0x3eca50[_0x51ceb9(0xa98)]['Sprite_Enemy_updateCollapse'][_0x51ceb9(0x61e)](this);}}this['x']-=Math[_0x51ceb9(0xb95)](this['width']/0x2),this['y']=this[_0x51ceb9(0x85f)]()['battler']()['_baseY']-Math[_0x51ceb9(0xb95)](this[_0x51ceb9(0x6ff)]()*1.5);const _0x547ed9=VisuMZ[_0x51ceb9(0xa98)][_0x51ceb9(0x5bc)][_0x51ceb9(0x30b)];this['x']+=_0x547ed9[_0x51ceb9(0x7a3)]||0x0,this['y']+=_0x547ed9['NameOffsetY']||0x0;},Window_EnemyName[_0x4adfe0(0x6ec)][_0x4adfe0(0x218)]=function(){const _0x56fbec=_0x4adfe0;Window_Base[_0x56fbec(0x6ec)][_0x56fbec(0x218)][_0x56fbec(0x61e)](this),this[_0x56fbec(0x17f)]['fontSize']=VisuMZ['BattleCore'][_0x56fbec(0x5bc)][_0x56fbec(0x30b)]['NameFontSize'];},Window_EnemyName['prototype']['refresh']=function(){const _0x5f2220=_0x4adfe0;Window_StatusBase[_0x5f2220(0x6ec)][_0x5f2220(0xcab)][_0x5f2220(0x61e)](this),this[_0x5f2220(0x17f)]['clear']();if(!this[_0x5f2220(0x85f)]())return;this[_0x5f2220(0x903)]();},Window_EnemyName['prototype'][_0x4adfe0(0x903)]=function(){const _0x537cad=_0x4adfe0;this[_0x537cad(0xa82)]=this['enemy']()[_0x537cad(0xa23)]();const _0x76b3f1=this[_0x537cad(0xa88)](this[_0x537cad(0xa82)])[_0x537cad(0x1e2)],_0x4d652f=Math[_0x537cad(0xb95)]((this['innerWidth']-_0x76b3f1)/0x2);this[_0x537cad(0x9c2)](this['_text'],_0x4d652f,0x0,_0x76b3f1+0x8);},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x958)]=function(){const _0x2c15d6=_0x4adfe0;return VisuMZ[_0x2c15d6(0xa98)][_0x2c15d6(0x5bc)]['BattleLog'][_0x2c15d6(0xb64)];},Window_BattleLog[_0x4adfe0(0x6ec)]['messageSpeed']=function(){const _0x5e3ca7=_0x4adfe0;return VisuMZ[_0x5e3ca7(0xa98)][_0x5e3ca7(0x5bc)][_0x5e3ca7(0x109)][_0x5e3ca7(0x9ed)];},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x931)]=function(){const _0x5daa9d=_0x4adfe0;return VisuMZ[_0x5daa9d(0xa98)][_0x5daa9d(0x5bc)][_0x5daa9d(0x109)][_0x5daa9d(0xb84)];},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x1db)]=function(){return![];},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x700)]=function(_0x36414e,_0x258257){const _0xc4709b=_0x4adfe0;this[_0xc4709b(0x6f5)](_0xc4709b(0x622)),BattleManager[_0xc4709b(0x123)](_0x36414e,_0x258257),this[_0xc4709b(0x115)]();},Window_BattleLog['prototype'][_0x4adfe0(0x622)]=function(){const _0x8cfb0b=_0x4adfe0;this[_0x8cfb0b(0x115)]();},Window_BattleLog['prototype']['push']=function(_0x12ffd6){const _0x2763a9=_0x4adfe0,_0x582bf2=Array['prototype'][_0x2763a9(0x7bc)][_0x2763a9(0x61e)](arguments,0x1),_0x4684d8={'name':_0x12ffd6,'params':_0x582bf2},_0x1f91bc=this[_0x2763a9(0x710)][_0x2763a9(0x2f7)](_0x58b2a5=>_0x58b2a5[_0x2763a9(0xa23)])['indexOf']('actionSplicePoint');_0x1f91bc>=0x0?this[_0x2763a9(0x710)][_0x2763a9(0x3d4)](_0x1f91bc,0x0,_0x4684d8):this['_methods']['push'](_0x4684d8);},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x6f5)]=function(_0x392944){const _0x490bb4=_0x4adfe0,_0x162855=Array[_0x490bb4(0x6ec)][_0x490bb4(0x7bc)][_0x490bb4(0x61e)](arguments,0x1);this['_methods'][_0x490bb4(0x6f5)]({'name':_0x392944,'params':_0x162855});},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x26d)]=function(){const _0x4c89ac=_0x4adfe0;if(!$gameTemp[_0x4c89ac(0x7b7)]())return;console[_0x4c89ac(0x1ce)](this['_methods'][_0x4c89ac(0x2f7)](_0x5b59f7=>_0x5b59f7[_0x4c89ac(0xa23)])[_0x4c89ac(0x9a2)]('\x0a'));},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xb0b)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xcab)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xcab)]=function(){const _0x385abe=_0x4adfe0;this[_0x385abe(0x621)]=!![];},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x7f6)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e6)],Window_BattleLog['prototype']['update']=function(){const _0x364a55=_0x4adfe0;VisuMZ[_0x364a55(0xa98)][_0x364a55(0x7f6)][_0x364a55(0x61e)](this);if(this[_0x364a55(0x621)])this[_0x364a55(0x88b)]();},Window_BattleLog[_0x4adfe0(0x6ec)]['processRefresh']=function(){const _0x56f83b=_0x4adfe0;this['_requestRefresh']=![],VisuMZ[_0x56f83b(0xa98)][_0x56f83b(0xb0b)]['call'](this);},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x5c8)]=function(_0x4534d8){const _0x18e1c3=_0x4adfe0;let _0x55b5cd=VisuMZ[_0x18e1c3(0xa98)][_0x18e1c3(0x5bc)][_0x18e1c3(0x109)][_0x18e1c3(0x4b8)][_0x18e1c3(0xc1b)]()['trim'](),_0x38e2e7=this[_0x18e1c3(0xc0f)][_0x4534d8];if(_0x38e2e7[_0x18e1c3(0x634)](/<LEFT>/i)){if('KqlAN'!==_0x18e1c3(0xc6e)){const _0x3e9f3d=_0xe9df0c['note'];if(_0x3e9f3d[_0x18e1c3(0x634)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x22c3e2(_0x233144['$1'])*0.01;else{if(_0x3e9f3d[_0x18e1c3(0x634)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x2901f8(_0x1773d1['$1'])||0x0;}}else _0x55b5cd=_0x18e1c3(0x1a3);}else{if(_0x38e2e7[_0x18e1c3(0x634)](/<CENTER>/i))_0x55b5cd='center';else _0x38e2e7[_0x18e1c3(0x634)](/<RIGHT>/i)&&(_0x55b5cd='right');}_0x38e2e7=_0x38e2e7['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x38e2e7=_0x38e2e7[_0x18e1c3(0x335)](/\\I\[0\]/gi,'');const _0x15d68b=this[_0x18e1c3(0x38e)](_0x4534d8);this['contents'][_0x18e1c3(0x10b)](_0x15d68b['x'],_0x15d68b['y'],_0x15d68b[_0x18e1c3(0x1e2)],_0x15d68b[_0x18e1c3(0x6a1)]);const _0x50e5b8=this[_0x18e1c3(0xa88)](_0x38e2e7)['width'];let _0x5da24c=_0x15d68b['x'];if(_0x55b5cd==='center')_0x5da24c+=(_0x15d68b[_0x18e1c3(0x1e2)]-_0x50e5b8)/0x2;else _0x55b5cd===_0x18e1c3(0x9ee)&&(_0x5da24c+=_0x15d68b[_0x18e1c3(0x1e2)]-_0x50e5b8);this['drawTextEx'](_0x38e2e7,_0x5da24c,_0x15d68b['y'],_0x50e5b8+0x8);},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x46f)]=function(_0x2ac515){const _0x43231b=_0x4adfe0;this[_0x43231b(0xc0f)]['push'](_0x2ac515),this[_0x43231b(0xcab)](),this[_0x43231b(0x115)]();},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x762)]=function(){const _0x232761=_0x4adfe0;let _0x117c79=![];switch(this[_0x232761(0x515)]){case'effect':_0x117c79=this['_spriteset'][_0x232761(0xca5)]();break;case _0x232761(0xcfb):_0x117c79=this[_0x232761(0x898)][_0x232761(0x921)]();break;case _0x232761(0x5ee):_0x117c79=this[_0x232761(0x898)][_0x232761(0x35d)]();break;case _0x232761(0x497):_0x117c79=this[_0x232761(0x898)]['isAnyoneFloating']();break;case'jump':_0x117c79=this['_spriteset'][_0x232761(0x543)]();break;case'opacity':_0x117c79=this['_spriteset']['isAnyoneChangingOpacity']();break;}return!_0x117c79&&(this[_0x232761(0x515)]=''),_0x117c79;},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x67c)]=function(){const _0x4e480f=_0x4adfe0;this[_0x4e480f(0x98c)](_0x4e480f(0x5ee));},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x8ec)]=function(){const _0x183392=_0x4adfe0;this['setWaitMode'](_0x183392(0x497));},Window_BattleLog['prototype'][_0x4adfe0(0x57d)]=function(){const _0x4719fb=_0x4adfe0;this[_0x4719fb(0x98c)](_0x4719fb(0x14f));},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xa6a)]=function(){const _0x473917=_0x4adfe0;this[_0x473917(0x98c)](_0x473917(0x2c6));},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xb75)]=function(){const _0x225c95=_0x4adfe0,_0x283328=VisuMZ[_0x225c95(0xa98)][_0x225c95(0x5bc)][_0x225c95(0x109)];if(!_0x283328['StartTurnShow'])return;this[_0x225c95(0x98e)]('addText',_0x283328[_0x225c95(0x14e)][_0x225c95(0x31d)]($gameTroop[_0x225c95(0x53d)]())),this[_0x225c95(0x98e)](_0x225c95(0x4e4),_0x283328[_0x225c95(0x597)]),this[_0x225c95(0x98e)](_0x225c95(0x465));},Window_BattleLog['prototype'][_0x4adfe0(0x80a)]=function(_0x2e05e9,_0x25af7e,_0x9b450d){const _0x35f74c=_0x4adfe0;this[_0x35f74c(0x3ce)](_0x25af7e)?BattleManager[_0x35f74c(0x8ff)]():_0x35f74c(0x6b6)===_0x35f74c(0xe1)?(_0x2e4c54[_0x35f74c(0x6ec)]['update']['call'](this),this[_0x35f74c(0x85f)]()&&this[_0x35f74c(0x85f)]()[_0x35f74c(0xa23)]()!==this[_0x35f74c(0xa82)]&&(this[_0x35f74c(0xa82)]=this[_0x35f74c(0x85f)]()[_0x35f74c(0xa23)](),this['refresh']()),this[_0x35f74c(0x8fb)](),this[_0x35f74c(0x1e0)]()):this[_0x35f74c(0x9f4)](_0x2e05e9,_0x25af7e,_0x9b450d);},Window_BattleLog[_0x4adfe0(0x6ec)]['isCustomActionSequence']=function(_0x469672){const _0x569081=_0x4adfe0;if(!SceneManager['isSceneBattle']())return![];if(!_0x469672)return![];if(!_0x469672['item']())return![];if(_0x469672['item']()[_0x569081(0x15d)][_0x569081(0x634)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x569081(0xbae)](_0x469672[_0x569081(0x28e)]()))return!![];return![];},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x9f4)]=function(_0x1f2801,_0x5d00fe,_0x424479){const _0x429e8a=_0x4adfe0,_0x5486e6=_0x5d00fe['item']();this[_0x429e8a(0x890)](_0x1f2801,_0x5d00fe,_0x424479),this[_0x429e8a(0xbe1)](_0x1f2801,_0x5d00fe,_0x424479),this['finishActionSet'](_0x1f2801,_0x5d00fe,_0x424479);},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xc60)]=function(_0x9b7fb9,_0x5b64c6){const _0x27e500=_0x4adfe0,_0x5dfb87=VisuMZ['BattleCore'][_0x27e500(0x5bc)][_0x27e500(0x109)];_0x5dfb87[_0x27e500(0x720)]&&this[_0x27e500(0x98e)]('addText',_0x27e500(0x8ce)[_0x27e500(0x31d)](DataManager[_0x27e500(0x4ee)](_0x5b64c6)));if(DataManager[_0x27e500(0x1e7)](_0x5b64c6)){if(_0x27e500(0x665)===_0x27e500(0x665)){if(_0x5dfb87[_0x27e500(0x533)])this[_0x27e500(0x4bb)](_0x5b64c6[_0x27e500(0xcdb)],_0x9b7fb9,_0x5b64c6);if(_0x5dfb87[_0x27e500(0x467)])this['displayItemMessage'](_0x5b64c6[_0x27e500(0x98b)],_0x9b7fb9,_0x5b64c6);}else return!![];}else{if(_0x5dfb87[_0x27e500(0x64e)])this['displayItemMessage'](TextManager['useItem'],_0x9b7fb9,_0x5b64c6);}},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x890)]=function(_0x3d7404,_0x24d28f,_0x3493c2){const _0x4afc0d=_0x4adfe0,_0x4f2a96=_0x24d28f[_0x4afc0d(0x28e)]();this['displayAction'](_0x3d7404,_0x4f2a96),this[_0x4afc0d(0x98e)](_0x4afc0d(0x7e0),_0x3d7404,_0x3493c2,!![]),this[_0x4afc0d(0x98e)]('performActionStart',_0x3d7404,_0x24d28f),this[_0x4afc0d(0x98e)](_0x4afc0d(0xbca)),this[_0x4afc0d(0x98e)](_0x4afc0d(0xa72),_0x3d7404,_0x24d28f),this['push'](_0x4afc0d(0x67c));},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xbe1)]=function(_0x9e4682,_0x5da011,_0x2ef48b){const _0x195f6a=_0x4adfe0;if(this['isMeleeSingleTargetAction'](_0x5da011))this[_0x195f6a(0x690)](_0x9e4682,_0x5da011,_0x2ef48b);else{if(this[_0x195f6a(0x8d2)](_0x5da011))this[_0x195f6a(0xc9b)](_0x9e4682,_0x5da011,_0x2ef48b);else _0x5da011[_0x195f6a(0xc37)]()?this[_0x195f6a(0x257)](_0x9e4682,_0x5da011,_0x2ef48b):this['wholeActionSet'](_0x9e4682,_0x5da011,_0x2ef48b);}},Window_BattleLog[_0x4adfe0(0x6ec)]['addMeleeReturnActionSet']=function(_0x935f77,_0x1b1091,_0x49dc16,_0x1998ba){const _0x57dc02=_0x4adfe0;if(_0x1b1091){const _0x1e63cd=_0x935f77[_0x57dc02(0xc66)]();this[_0x57dc02(0x98e)](_0x57dc02(0x420),[_0x935f77],_0x49dc16,_0x1998ba),this[_0x57dc02(0x98e)](_0x57dc02(0x427),_0x935f77,_0x1e63cd[_0x57dc02(0xc0d)],_0x1e63cd[_0x57dc02(0x5e7)],_0x1998ba,![],_0x57dc02(0x525)),this[_0x57dc02(0x98e)](_0x57dc02(0xb04),[_0x935f77],_0x57dc02(0x385)),this[_0x57dc02(0x98e)]('waitForMovement'),this[_0x57dc02(0x98e)](_0x57dc02(0xb04),[_0x935f77],'walk');}},Window_BattleLog['prototype'][_0x4adfe0(0x1e9)]=function(_0x266626){const _0x1ee01c=_0x4adfe0;if(!_0x266626[_0x1ee01c(0x8be)]())return![];if(!_0x266626[_0x1ee01c(0x2e9)]())return![];if(!_0x266626[_0x1ee01c(0xac1)]())return![];return VisuMZ['BattleCore'][_0x1ee01c(0x5bc)]['ActionSequence'][_0x1ee01c(0xb12)];},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x690)]=function(_0x305c9f,_0x2ef2db,_0x1ecfe5){const _0x243830=_0x4adfe0,_0x56689c=_0x305c9f[_0x243830(0xc32)]()[_0x243830(0xb52)]<0x2,_0x1eb91d=0x14,_0x291bbd=0x30;let _0x34e898=!![];_0x1ecfe5[_0x243830(0xa59)]>0x0&&_0x305c9f[_0x243830(0x771)]()===_0x1ecfe5[0x0]['isActor']()&&(_0x34e898=![]);_0x56689c&&_0x34e898&&('TrYsJ'===_0x243830(0x724)?(this['push'](_0x243830(0x420),[_0x305c9f],_0x291bbd,_0x1eb91d),this[_0x243830(0x98e)](_0x243830(0x40d),_0x305c9f,_0x1ecfe5,_0x243830(0x6bf),_0x1eb91d,!![],'Linear',!![]),this[_0x243830(0x98e)](_0x243830(0xb04),[_0x305c9f],_0x243830(0x526)),this[_0x243830(0x98e)](_0x243830(0xbca))):(_0xa7c901[_0x243830(0xa98)][_0x243830(0x294)][_0x243830(0x61e)](this,_0x10a269,_0xcecfb3),this[_0x243830(0x115)]()));let _0x50804a=_0x2ef2db['isAttack']()?this[_0x243830(0x69e)](_0x305c9f):0x1;for(let _0x58a4ab=0x0;_0x58a4ab<_0x50804a;_0x58a4ab++){_0x2ef2db['isAttack']()&&_0x305c9f['isActor']()&&this['push'](_0x243830(0x9d8),_0x305c9f,_0x58a4ab),_0x2ef2db[_0x243830(0x28e)]()[_0x243830(0x49f)]<0x0?this[_0x243830(0x257)](_0x305c9f,_0x2ef2db,_0x1ecfe5):this['wholeActionSet'](_0x305c9f,_0x2ef2db,_0x1ecfe5);}_0x2ef2db[_0x243830(0x74c)]()&&_0x305c9f[_0x243830(0x771)]()&&this[_0x243830(0x98e)](_0x243830(0x3ea),_0x305c9f),this[_0x243830(0x98e)](_0x243830(0x7e0),_0x305c9f,_0x1ecfe5,![]),this[_0x243830(0x9ba)](_0x305c9f,_0x56689c,_0x291bbd,_0x1eb91d);},Window_BattleLog[_0x4adfe0(0x6ec)]['isMeleeMultiTargetAction']=function(_0x41c404){const _0x41ba30=_0x4adfe0;if(!_0x41c404[_0x41ba30(0x8be)]())return![];if(!_0x41c404[_0x41ba30(0xc44)]())return![];if(!_0x41c404['isForOpponent']())return![];return VisuMZ['BattleCore']['Settings'][_0x41ba30(0x5f6)][_0x41ba30(0x7af)];},Window_BattleLog[_0x4adfe0(0x6ec)]['autoMeleeMultiTargetActionSet']=function(_0x38bfc1,_0x3b5eca,_0x112f73){const _0x51c102=_0x4adfe0,_0x25c30e=_0x38bfc1['getAttackMotion']()['type']<0x2,_0xefc385=0x14,_0x1ae79f=0x30;if(_0x25c30e){this['push'](_0x51c102(0x420),[_0x38bfc1],_0x1ae79f,_0xefc385);const _0x13d6b7=_0x112f73[_0x51c102(0xa59)]>0x1?_0x51c102(0x436):_0x51c102(0x6bf);this[_0x51c102(0x98e)](_0x51c102(0x40d),_0x38bfc1,_0x112f73,_0x13d6b7,_0xefc385,!![],'Linear',!![]),this[_0x51c102(0x98e)](_0x51c102(0xb04),[_0x38bfc1],_0x51c102(0x526)),this['push'](_0x51c102(0xbca));}let _0x3461e7=_0x3b5eca[_0x51c102(0x74c)]()?this[_0x51c102(0x69e)](_0x38bfc1):0x1;for(let _0x54b0cb=0x0;_0x54b0cb<_0x3461e7;_0x54b0cb++){if(_0x3b5eca[_0x51c102(0x74c)]()&&_0x38bfc1[_0x51c102(0x771)]()){if(_0x51c102(0x935)===_0x51c102(0x935))this['push'](_0x51c102(0x9d8),_0x38bfc1,_0x54b0cb);else{const _0x268697=this['context'],_0x52c786=_0x268697[_0x51c102(0xaef)];_0x4c2fb4=_0x341af8||0xffffffff;let _0x138d74=_0x4cd0ba,_0x1f4d8d=_0x43055f['round'](_0x166366+0x18/0x2+this[_0x51c102(0x459)]*0.35);_0x4e3b13==='center'&&(_0x138d74+=_0x520131/0x2),_0x1028f9===_0x51c102(0x9ee)&&(_0x138d74+=_0x5b8af0),_0x268697[_0x51c102(0x313)](),_0x268697[_0x51c102(0x4e5)]=this['_makeFontNameText'](),_0x268697['textAlign']=_0x32f24d,_0x268697[_0x51c102(0xcd4)]=_0x51c102(0xbb5),_0x268697['globalAlpha']=0x1,this[_0x51c102(0xbd9)](_0x16c55e,_0x138d74,_0x1f4d8d,_0x32a3d0),_0x268697[_0x51c102(0xaef)]=_0x52c786,this['_drawTextBody'](_0x59be64,_0x138d74,_0x1f4d8d,_0x21093e),_0x268697[_0x51c102(0xb31)](),this[_0x51c102(0xbd5)][_0x51c102(0x9e6)]();}}this[_0x51c102(0x60e)](_0x38bfc1,_0x3b5eca,_0x112f73);}if(_0x3b5eca['isAttack']()&&_0x38bfc1[_0x51c102(0x771)]()){if(_0x51c102(0x6c4)!==_0x51c102(0x6c4))return this['isForOpponentBattleCore']();else this['push'](_0x51c102(0x3ea),_0x38bfc1);}this[_0x51c102(0x98e)](_0x51c102(0x7e0),_0x38bfc1,_0x112f73,![]),this[_0x51c102(0x9ba)](_0x38bfc1,_0x25c30e,_0x1ae79f,_0xefc385);},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x257)]=function(_0x5ebb80,_0x307d47,_0x12857f){const _0x40075c=_0x4adfe0,_0x23b1d6=_0x307d47['item']();for(const _0x260395 of _0x12857f){if(!_0x260395)continue;this[_0x40075c(0x98e)](_0x40075c(0x870),_0x5ebb80,_0x307d47),this['push']('waitCount',Sprite_Battler[_0x40075c(0x9ab)]),this['push'](_0x40075c(0x22e),_0x5ebb80,[_0x260395],_0x23b1d6[_0x40075c(0x49f)]),this[_0x40075c(0x98e)](_0x40075c(0x4e4),0x18),this[_0x40075c(0x98e)](_0x40075c(0x700),_0x5ebb80,_0x260395);}},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x60e)]=function(_0x444b95,_0x27dffe,_0x251861){const _0x17470f=_0x4adfe0,_0x3195af=_0x27dffe[_0x17470f(0x28e)]();let _0x40bc03=_0x27dffe[_0x17470f(0x74c)]()?0x1+_0x444b95[_0x17470f(0x567)]():0x1;while(_0x40bc03--){this['push']('performAction',_0x444b95,_0x27dffe),this['push'](_0x17470f(0x4e4),Sprite_Battler['_motionSpeed']),this['push']('showAnimation',_0x444b95,_0x251861[_0x17470f(0xaed)](),_0x3195af[_0x17470f(0x49f)]),this[_0x17470f(0x98e)](_0x17470f(0x67c));}for(const _0x3ab865 of _0x251861){if(!_0x3ab865)continue;this['push']('actionEffect',_0x444b95,_0x3ab865);}},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x8a1)]=function(_0x25dd31,_0x2dd3fd,_0x3e3f74){const _0x1fd7a3=_0x4adfe0,_0x495d89=_0x2dd3fd['item']();this[_0x1fd7a3(0x98e)]('applyImmortal',_0x25dd31,_0x3e3f74,![]),this['push'](_0x1fd7a3(0x596)),this[_0x1fd7a3(0x98e)]('waitForEffect'),this[_0x1fd7a3(0x98e)]('clear'),this[_0x1fd7a3(0x98e)](_0x1fd7a3(0xad5),_0x25dd31),this[_0x1fd7a3(0x98e)](_0x1fd7a3(0xbca));},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xb30)]=function(_0x5cc4b5){},VisuMZ[_0x4adfe0(0xa98)]['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x8b9)],Window_BattleLog['prototype'][_0x4adfe0(0x8b9)]=function(_0x502561){const _0x3ad095=_0x4adfe0;if(!VisuMZ[_0x3ad095(0xa98)][_0x3ad095(0x5bc)][_0x3ad095(0x109)]['ShowCurrentState'])return;VisuMZ['BattleCore'][_0x3ad095(0x501)]['call'](this,_0x502561);},Window_BattleLog[_0x4adfe0(0x6ec)]['displayCounter']=function(_0x1bae41){const _0x1a0cfe=_0x4adfe0;this['push'](_0x1a0cfe(0x41f),_0x1bae41);VisuMZ[_0x1a0cfe(0xa98)][_0x1a0cfe(0x5bc)][_0x1a0cfe(0x5f6)][_0x1a0cfe(0x9d5)]&&(_0x1a0cfe(0xbac)===_0x1a0cfe(0xbac)?this[_0x1a0cfe(0x98e)]('showAnimation',_0x1bae41,[BattleManager[_0x1a0cfe(0x48b)]],-0x1):_0x58b22e['performAttack']());if(!VisuMZ[_0x1a0cfe(0xa98)][_0x1a0cfe(0x5bc)][_0x1a0cfe(0x109)][_0x1a0cfe(0x8d1)])return;this[_0x1a0cfe(0x98e)]('addText',TextManager[_0x1a0cfe(0xbf3)][_0x1a0cfe(0x31d)](_0x1bae41[_0x1a0cfe(0xa23)]()));},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x5d8)]=function(_0x524e88){const _0x171d54=_0x4adfe0;this['push'](_0x171d54(0xbff),_0x524e88);if(!VisuMZ[_0x171d54(0xa98)][_0x171d54(0x5bc)]['BattleLog'][_0x171d54(0x77d)])return;this['push'](_0x171d54(0x46f),TextManager[_0x171d54(0xc5e)]['format'](_0x524e88['name']()));},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x73a)]=function(_0x2b71d8,_0x5a7a51){const _0x153700=_0x4adfe0;if(VisuMZ[_0x153700(0xa98)][_0x153700(0x5bc)][_0x153700(0x5f6)][_0x153700(0xc71)]){const _0x5a54d6=_0x5a7a51['item']();this[_0x153700(0x98e)](_0x153700(0x22e),_0x2b71d8,[_0x2b71d8],_0x5a54d6['animationId']);}},Window_BattleLog[_0x4adfe0(0x6ec)]['displaySubstitute']=function(_0x26e9e3,_0x317486){const _0x5f6fdd=_0x4adfe0;this[_0x5f6fdd(0x98e)](_0x5f6fdd(0xa06),_0x26e9e3,_0x317486);if(!VisuMZ[_0x5f6fdd(0xa98)][_0x5f6fdd(0x5bc)]['BattleLog'][_0x5f6fdd(0xc36)])return;const _0x1b0206=_0x26e9e3['name'](),_0x241223=TextManager[_0x5f6fdd(0x4aa)][_0x5f6fdd(0x31d)](_0x1b0206,_0x317486[_0x5f6fdd(0xa23)]());this[_0x5f6fdd(0x98e)](_0x5f6fdd(0x46f),_0x241223);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xa18)]=Window_BattleLog[_0x4adfe0(0x6ec)]['displayActionResults'],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x5aa)]=function(_0x3f1b3f,_0xf05c64){const _0x127ef1=_0x4adfe0;VisuMZ[_0x127ef1(0xa98)]['Window_BattleLog_displayActionResults'][_0x127ef1(0x61e)](this,_0x3f1b3f,_0xf05c64);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xb5b)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x83a)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x83a)]=function(_0x5164fd){const _0x5d4451=_0x4adfe0;if(!VisuMZ[_0x5d4451(0xa98)][_0x5d4451(0x5bc)][_0x5d4451(0x109)][_0x5d4451(0x79d)])return;VisuMZ['BattleCore'][_0x5d4451(0xb5b)][_0x5d4451(0x61e)](this,_0x5164fd);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x234)]=Window_BattleLog[_0x4adfe0(0x6ec)]['displayCritical'],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x851)]=function(_0x33d9f4){const _0x1b8ac8=_0x4adfe0;if(!VisuMZ[_0x1b8ac8(0xa98)][_0x1b8ac8(0x5bc)][_0x1b8ac8(0x109)][_0x1b8ac8(0x2d3)])return;VisuMZ[_0x1b8ac8(0xa98)]['Window_BattleLog_displayCritical'][_0x1b8ac8(0x61e)](this,_0x33d9f4);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x735)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x5fb)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x5fb)]=function(_0x10660d){const _0x45d02a=_0x4adfe0;!VisuMZ[_0x45d02a(0xa98)][_0x45d02a(0x5bc)][_0x45d02a(0x109)][_0x45d02a(0x1ac)]?this['push']('performMiss',_0x10660d):VisuMZ['BattleCore'][_0x45d02a(0x735)]['call'](this,_0x10660d);},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x60d)]=Window_BattleLog[_0x4adfe0(0x6ec)]['displayEvasion'],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x22b)]=function(_0x2dc40f){const _0x4b8ab0=_0x4adfe0;!VisuMZ[_0x4b8ab0(0xa98)][_0x4b8ab0(0x5bc)][_0x4b8ab0(0x109)]['ShowMissEvasion']?_0x2dc40f[_0x4b8ab0(0x393)]()[_0x4b8ab0(0x2f5)]?this['push']('performEvasion',_0x2dc40f):this[_0x4b8ab0(0x98e)](_0x4b8ab0(0x587),_0x2dc40f):VisuMZ[_0x4b8ab0(0xa98)]['Window_BattleLog_displayEvasion'][_0x4b8ab0(0x61e)](this,_0x2dc40f);},Window_BattleLog[_0x4adfe0(0x6ec)]['displayHpDamage']=function(_0x5e76e9){const _0x56ce07=_0x4adfe0;if(_0x5e76e9[_0x56ce07(0x393)]()[_0x56ce07(0xaf7)]){_0x5e76e9[_0x56ce07(0x242)]=0x0;_0x5e76e9[_0x56ce07(0x393)]()[_0x56ce07(0x4f3)]>0x0&&!_0x5e76e9[_0x56ce07(0x393)]()[_0x56ce07(0x90c)]&&(_0x56ce07(0xa89)!=='rDbUw'?(_0x5e76e9[_0x56ce07(0x242)]=_0x5e76e9[_0x56ce07(0x393)]()['hpDamage'],this[_0x56ce07(0x98e)](_0x56ce07(0xbfb),_0x5e76e9)):this['requestMotion'](_0x56ce07(0x28e)));_0x5e76e9[_0x56ce07(0x393)]()[_0x56ce07(0x4f3)]<0x0&&this[_0x56ce07(0x98e)](_0x56ce07(0x32f),_0x5e76e9);if(VisuMZ[_0x56ce07(0xa98)][_0x56ce07(0x5bc)][_0x56ce07(0x109)][_0x56ce07(0x1ff)]){if('Gekvy'===_0x56ce07(0x302)){const _0x3a614d=_0x2b4dd7['BattleCore']['Settings']['BattleLog'];_0x3a614d['ActionCenteredName']&&this[_0x56ce07(0x98e)](_0x56ce07(0x46f),'<CENTER>%1'['format'](_0x1208d5[_0x56ce07(0x4ee)](_0x565e59)));if(_0x1c62d8[_0x56ce07(0x1e7)](_0x1654d2)){if(_0x3a614d[_0x56ce07(0x533)])this[_0x56ce07(0x4bb)](_0x1482bc[_0x56ce07(0xcdb)],_0x32a7d1,_0x3b392a);if(_0x3a614d[_0x56ce07(0x467)])this[_0x56ce07(0x4bb)](_0x455276[_0x56ce07(0x98b)],_0xf7e026,_0x27ff43);}else{if(_0x3a614d['ActionItemMsg'])this['displayItemMessage'](_0x399a6f[_0x56ce07(0x6af)],_0x140d1e,_0x43a910);}}else this[_0x56ce07(0x98e)](_0x56ce07(0x46f),this[_0x56ce07(0x725)](_0x5e76e9));}}},VisuMZ[_0x4adfe0(0xa98)]['Window_BattleLog_displayMpDamage']=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xcb2)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xcb2)]=function(_0x599268){const _0x85ddd7=_0x4adfe0;if(!VisuMZ['BattleCore'][_0x85ddd7(0x5bc)]['BattleLog']['ShowMpDmg'])return;VisuMZ[_0x85ddd7(0xa98)][_0x85ddd7(0x205)][_0x85ddd7(0x61e)](this,_0x599268);},VisuMZ[_0x4adfe0(0xa98)]['Window_BattleLog_displayTpDamage']=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x7b6)],Window_BattleLog[_0x4adfe0(0x6ec)]['displayTpDamage']=function(_0x373363){const _0x3a3193=_0x4adfe0;if(!VisuMZ[_0x3a3193(0xa98)]['Settings'][_0x3a3193(0x109)][_0x3a3193(0x4c5)])return;VisuMZ[_0x3a3193(0xa98)][_0x3a3193(0x986)]['call'](this,_0x373363);},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x18e)]=function(_0x1a8b2c){const _0x55c166=_0x4adfe0;_0x1a8b2c[_0x55c166(0x393)]()[_0x55c166(0xc85)]()&&(this[_0x55c166(0x98e)](_0x55c166(0xa48)),this[_0x55c166(0xbf6)](_0x1a8b2c),this[_0x55c166(0x8e0)](_0x1a8b2c),this['push']('waitForNewLine'));},Window_BattleLog[_0x4adfe0(0x6ec)]['displayAddedStates']=function(_0x114015){const _0x482e9d=_0x4adfe0,_0x2ce7ec=_0x114015[_0x482e9d(0x393)](),_0x422173=_0x2ce7ec['addedStateObjects']();for(const _0x39d7a5 of _0x422173){const _0x1ac420=_0x114015[_0x482e9d(0x771)]()?_0x39d7a5[_0x482e9d(0xcdb)]:_0x39d7a5['message2'];_0x1ac420&&VisuMZ[_0x482e9d(0xa98)][_0x482e9d(0x5bc)][_0x482e9d(0x109)][_0x482e9d(0x25f)]&&(this[_0x482e9d(0x98e)](_0x482e9d(0x20a)),this[_0x482e9d(0x98e)]('popBaseLine'),this[_0x482e9d(0x98e)](_0x482e9d(0xa48)),this[_0x482e9d(0x98e)]('addText',_0x1ac420[_0x482e9d(0x31d)](_0x114015[_0x482e9d(0xa23)]())),this[_0x482e9d(0x98e)]('wait')),_0x39d7a5['id']===_0x114015['deathStateId']()&&this['push'](_0x482e9d(0xccc),_0x114015);}},Window_BattleLog['prototype'][_0x4adfe0(0x20a)]=function(){},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x5da)]=function(_0x124e4f){const _0xa98118=_0x4adfe0;if(!VisuMZ[_0xa98118(0xa98)]['Settings']['BattleLog'][_0xa98118(0x8b5)])return;const _0x28e6e6=_0x124e4f[_0xa98118(0x393)](),_0x476791=_0x28e6e6[_0xa98118(0x7c4)]();for(const _0x4adf48 of _0x476791){if(_0xa98118(0x5a3)===_0xa98118(0x43b))return _0x10150c[_0xa98118(0xc66)]()[_0xa98118(0x49e)]-_0x3206aa[_0xa98118(0xc66)]()[_0xa98118(0x49e)];else _0x4adf48[_0xa98118(0xbd3)]&&(this[_0xa98118(0x98e)]('fnordRemovedStates'),this[_0xa98118(0x98e)]('popBaseLine'),this[_0xa98118(0x98e)](_0xa98118(0xa48)),this[_0xa98118(0x98e)](_0xa98118(0x46f),_0x4adf48['message4'][_0xa98118(0x31d)](_0x124e4f['name']())),this['push'](_0xa98118(0x733)));}},Window_BattleLog[_0x4adfe0(0x6ec)]['fnordRemovedStates']=function(){},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x8e0)]=function(_0x33ba4b){const _0x45a58d=_0x4adfe0,_0x8585ba=VisuMZ['BattleCore'][_0x45a58d(0x5bc)]['BattleLog'],_0x274683=_0x33ba4b[_0x45a58d(0x393)]();if(_0x8585ba[_0x45a58d(0x540)])this['displayBuffs'](_0x33ba4b,_0x274683[_0x45a58d(0xc12)],TextManager[_0x45a58d(0xcc8)]);if(_0x8585ba[_0x45a58d(0x458)])this[_0x45a58d(0x71c)](_0x33ba4b,_0x274683[_0x45a58d(0xcf5)],TextManager[_0x45a58d(0x37c)]);if(_0x8585ba[_0x45a58d(0x652)])this['displayBuffs'](_0x33ba4b,_0x274683[_0x45a58d(0xc4b)],TextManager[_0x45a58d(0xcd8)]);},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x71c)]=function(_0x4e8cac,_0x5aced3,_0x21eaeb){const _0x4aab71=_0x4adfe0;for(const _0x501b66 of _0x5aced3){if(_0x4aab71(0x5ca)===_0x4aab71(0xcd7)){const _0x316505=_0x527e11(_0x24b873['$1']);this[_0x4aab71(0x981)](_0x2b3cc3[_0x316505]);}else{const _0x586ea2=_0x21eaeb[_0x4aab71(0x31d)](_0x4e8cac[_0x4aab71(0xa23)](),TextManager[_0x4aab71(0x4ae)](_0x501b66));this[_0x4aab71(0x98e)](_0x4aab71(0x1d5)),this[_0x4aab71(0x98e)]('pushBaseLine'),this[_0x4aab71(0x98e)](_0x4aab71(0x46f),_0x586ea2),this[_0x4aab71(0x98e)]('wait');}}},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x3b7)]=Window_BattleLog['prototype'][_0x4adfe0(0x465)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x465)]=function(){const _0x3f97a8=_0x4adfe0;VisuMZ[_0x3f97a8(0xa98)]['Window_BattleLog_clear'][_0x3f97a8(0x61e)](this),this['callNextMethod']();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x9b2)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xa48)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xa48)]=function(){const _0xe141dc=_0x4adfe0;VisuMZ['BattleCore'][_0xe141dc(0x9b2)][_0xe141dc(0x61e)](this),this['callNextMethod']();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xcc1)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x1d5)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x1d5)]=function(){const _0x1f9960=_0x4adfe0;VisuMZ[_0x1f9960(0xa98)][_0x1f9960(0xcc1)][_0x1f9960(0x61e)](this),this[_0x1f9960(0x88b)](),this[_0x1f9960(0x115)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5e1)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xaff)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xaff)]=function(_0x5bc477){const _0x24a26f=_0x4adfe0;VisuMZ['BattleCore'][_0x24a26f(0x5e1)][_0x24a26f(0x61e)](this,_0x5bc477),this[_0x24a26f(0x115)]();},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x596)]=function(){const _0x3c9836=_0x4adfe0;let _0x3fc2f5=0x0;this[_0x3c9836(0x96b)][_0x3c9836(0xa59)]>0x0&&(_0x3fc2f5=this[_0x3c9836(0x96b)][this['_baseLineStack'][_0x3c9836(0xa59)]-0x1]),this[_0x3c9836(0xc0f)][_0x3c9836(0xa59)]>_0x3fc2f5?this[_0x3c9836(0x733)]():_0x3c9836(0xae4)!==_0x3c9836(0x356)?this[_0x3c9836(0x115)]():this[_0x3c9836(0x230)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x294)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x7cc)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x7cc)]=function(_0x6e2800,_0x564caa){const _0x2781cf=_0x4adfe0;VisuMZ[_0x2781cf(0xa98)]['Window_BattleLog_performActionStart'][_0x2781cf(0x61e)](this,_0x6e2800,_0x564caa),this[_0x2781cf(0x115)]();},VisuMZ['BattleCore'][_0x4adfe0(0x45f)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x870)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x870)]=function(_0x5b6afc,_0x37f2aa){const _0x3d3666=_0x4adfe0;VisuMZ[_0x3d3666(0xa98)][_0x3d3666(0x45f)][_0x3d3666(0x61e)](this,_0x5b6afc,_0x37f2aa),this[_0x3d3666(0x115)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x210)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xad5)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xad5)]=function(_0x3ff6f5){const _0x451035=_0x4adfe0;VisuMZ[_0x451035(0xa98)]['Window_BattleLog_performActionEnd'][_0x451035(0x61e)](this,_0x3ff6f5);for(const _0x5580a8 of BattleManager[_0x451035(0x601)]()){if(!_0x5580a8)continue;if(_0x5580a8[_0x451035(0xc5a)]())continue;_0x5580a8[_0x451035(0x930)]();}this['callNextMethod']();},VisuMZ['BattleCore'][_0x4adfe0(0xaf6)]=Window_BattleLog['prototype'][_0x4adfe0(0xbfb)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xbfb)]=function(_0x523289){const _0xe7d63c=_0x4adfe0;VisuMZ[_0xe7d63c(0xa98)][_0xe7d63c(0xaf6)]['call'](this,_0x523289),this[_0xe7d63c(0x115)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x92c)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x8f2)],Window_BattleLog['prototype'][_0x4adfe0(0x8f2)]=function(_0x48f2e9){const _0x53108e=_0x4adfe0;VisuMZ[_0x53108e(0xa98)][_0x53108e(0x92c)][_0x53108e(0x61e)](this,_0x48f2e9),this['callNextMethod']();},VisuMZ['BattleCore'][_0x4adfe0(0x5b3)]=Window_BattleLog['prototype'][_0x4adfe0(0x32f)],Window_BattleLog[_0x4adfe0(0x6ec)]['performRecovery']=function(_0x15d26c){const _0x40e154=_0x4adfe0;VisuMZ[_0x40e154(0xa98)][_0x40e154(0x5b3)][_0x40e154(0x61e)](this,_0x15d26c),this[_0x40e154(0x115)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5c9)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x4f1)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x4f1)]=function(_0x46fd4d){const _0x351d8a=_0x4adfe0;VisuMZ[_0x351d8a(0xa98)][_0x351d8a(0x5c9)]['call'](this,_0x46fd4d),this[_0x351d8a(0x115)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x523)]=Window_BattleLog[_0x4adfe0(0x6ec)]['performMagicEvasion'],Window_BattleLog[_0x4adfe0(0x6ec)]['performMagicEvasion']=function(_0x2a0b1c){const _0x36277e=_0x4adfe0;VisuMZ['BattleCore']['Window_BattleLog_performMagicEvasion'][_0x36277e(0x61e)](this,_0x2a0b1c),this[_0x36277e(0x115)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0xa43)]=Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x41f)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x41f)]=function(_0x48a51c){const _0x328739=_0x4adfe0;VisuMZ[_0x328739(0xa98)][_0x328739(0xa43)][_0x328739(0x61e)](this,_0x48a51c),this[_0x328739(0x115)]();},VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x4ba)]=Window_BattleLog['prototype'][_0x4adfe0(0xbff)],Window_BattleLog[_0x4adfe0(0x6ec)]['performReflection']=function(_0x12e796){const _0x95f733=_0x4adfe0;VisuMZ[_0x95f733(0xa98)][_0x95f733(0x4ba)][_0x95f733(0x61e)](this,_0x12e796),this[_0x95f733(0x115)]();},VisuMZ['BattleCore'][_0x4adfe0(0x6a8)]=Window_BattleLog['prototype'][_0x4adfe0(0xa06)],Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xa06)]=function(_0x38def8,_0x4a2ac1){const _0x149fbc=_0x4adfe0;VisuMZ[_0x149fbc(0xa98)][_0x149fbc(0x6a8)][_0x149fbc(0x61e)](this,_0x38def8,_0x4a2ac1),this['callNextMethod']();},VisuMZ['BattleCore'][_0x4adfe0(0x689)]=Window_BattleLog['prototype']['performCollapse'],Window_BattleLog['prototype']['performCollapse']=function(_0x4ebba8){const _0x37acb6=_0x4adfe0;VisuMZ[_0x37acb6(0xa98)][_0x37acb6(0x689)][_0x37acb6(0x61e)](this,_0x4ebba8),this[_0x37acb6(0x115)]();},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xa72)]=function(_0xdf2ac9,_0x365eab){const _0xb7752c=_0x4adfe0;_0xdf2ac9[_0xb7752c(0xa72)](_0x365eab),this[_0xb7752c(0x115)]();},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x86d)]=function(_0x582ed0,_0x379804){const _0x3f52d8=_0x4adfe0,_0x5d394c=_0x582ed0[_0x3f52d8(0x512)]();if(_0x5d394c<=0x0){if('udFcX'!=='BqGXi')SoundManager[_0x3f52d8(0xea)]();else{if(this[_0x3f52d8(0xab3)]===_0x136420)return;_0x999f17[_0x3f52d8(0x6ec)][_0x3f52d8(0x9e8)][_0x3f52d8(0x61e)](this);}}else this['showNormalAnimation'](_0x379804,_0x5d394c);},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x7e0)]=function(_0x49b5f8,_0x397ebe,_0x3c5cdc){const _0x2c562b=_0x4adfe0,_0x3a93f9=[_0x49b5f8][_0x2c562b(0x197)](_0x397ebe);for(const _0x27c77a of _0x3a93f9){if(_0x2c562b(0x443)!==_0x2c562b(0xceb)){if(!_0x27c77a)continue;_0x27c77a[_0x2c562b(0xa9f)](_0x3c5cdc);}else{if(_0x42a14c===_0x581a5a[_0x2c562b(0xcf8)]())return;if(_0x544454===_0x98fe65[_0x2c562b(0x48b)])return;if(_0x5a2b13[_0x2c562b(0xc66)]())_0x3b7931['battler']()['stepBack']();}}this[_0x2c562b(0x115)]();},Window_BattleLog[_0x4adfe0(0x6ec)]['waitCount']=function(_0x54ca45){const _0xcee9da=_0x4adfe0;this[_0xcee9da(0x586)]=_0x54ca45;},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0xb04)]=function(_0x20da63,_0x487374){const _0x31c018=_0x4adfe0;for(const _0x558d88 of _0x20da63){if(_0x31c018(0x687)!=='LysHF'){const _0x398010=_0xa88fd5(_0x402c4d['$1']),_0x57385a=_0x974fb5[_0x31c018(0xa98)]['createKeyJS'](_0x4482ab,_0x31c018(0x114));_0x590c9d[_0x31c018(0xa98)][_0x31c018(0x9cb)](_0x398010,_0x57385a);}else{if(!_0x558d88)continue;_0x558d88['requestMotion'](_0x487374);}}this[_0x31c018(0x115)]();},Window_BattleLog[_0x4adfe0(0x6ec)]['performMoveToPoint']=function(_0x3cf7f5,_0x4c1c66,_0x4f0281,_0x96ff58,_0x5108b4,_0x11ffc0){const _0x15e4fd=_0x4adfe0;_0x3cf7f5[_0x15e4fd(0x9e5)](_0x4c1c66,_0x4f0281,_0x96ff58,_0x5108b4,_0x11ffc0,-0x1),this['callNextMethod']();},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x40d)]=function(_0x5edadf,_0x41426e,_0x59005d,_0x19bc81,_0x1276e5,_0x126dfa,_0x5e8446){const _0xac2e7b=_0x4adfe0,_0x5aafb3=Math['min'](..._0x41426e[_0xac2e7b(0x2f7)](_0x100240=>_0x100240['battler']()[_0xac2e7b(0x49e)]-_0x100240[_0xac2e7b(0xc66)]()[_0xac2e7b(0x5be)]()/0x2)),_0x42d117=Math['max'](..._0x41426e[_0xac2e7b(0x2f7)](_0x19a77f=>_0x19a77f[_0xac2e7b(0xc66)]()[_0xac2e7b(0x49e)]+_0x19a77f['battler']()[_0xac2e7b(0x5be)]()/0x2)),_0x55d8f3=Math[_0xac2e7b(0x258)](..._0x41426e['map'](_0x513009=>_0x513009[_0xac2e7b(0xc66)]()[_0xac2e7b(0x984)]-_0x513009[_0xac2e7b(0xc66)]()[_0xac2e7b(0xabd)]())),_0x27098d=Math['max'](..._0x41426e[_0xac2e7b(0x2f7)](_0x2bb02c=>_0x2bb02c[_0xac2e7b(0xc66)]()[_0xac2e7b(0x984)])),_0x3e1ee8=_0x41426e[_0xac2e7b(0xcd9)](_0x421c3f=>_0x421c3f[_0xac2e7b(0x771)]())[_0xac2e7b(0xa59)],_0x34e368=_0x41426e[_0xac2e7b(0xcd9)](_0x5db1b2=>_0x5db1b2['isEnemy']())[_0xac2e7b(0xa59)];let _0x3c85ce=0x0,_0x355272=0x0;if(_0x59005d[_0xac2e7b(0x634)](/front/i))'vuHec'===_0xac2e7b(0x19d)?_0x3c85ce=_0x3e1ee8>=_0x34e368?_0x5aafb3:_0x42d117:_0x1b1098[_0xac2e7b(0xa98)]['JS'][_0x3fe6a6][_0xac2e7b(0x61e)](this,this,this,_0x444213,0x0);else{if(_0x59005d['match'](/middle/i))_0x3c85ce=(_0x5aafb3+_0x42d117)/0x2,_0x5e8446=-0x1;else{if(_0x59005d[_0xac2e7b(0x634)](/back/i)){if('ZRxrk'!==_0xac2e7b(0x97a)){const _0x36f1d1=this['_additionalSprites'];if(_0x36f1d1[_0x400c00])return _0x36f1d1[_0x1b4237];else{const _0x12f4ba=new _0x58047f();return _0x36f1d1[_0x23a64c]=_0x12f4ba,this[_0xac2e7b(0x4b2)](_0x12f4ba),this[_0xac2e7b(0x4b2)](this[_0xac2e7b(0x600)]),_0x12f4ba;}}else _0x3c85ce=_0x3e1ee8>=_0x34e368?_0x42d117:_0x5aafb3;}}}if(_0x59005d['match'](/head/i))_0xac2e7b(0x947)===_0xac2e7b(0x947)?_0x355272=_0x55d8f3:(_0x2769f2['BattleCore'][_0xac2e7b(0x442)][_0xac2e7b(0x61e)](this),this[_0xac2e7b(0x207)](),this[_0xac2e7b(0x62f)]());else{if(_0x59005d['match'](/center/i)){_0x355272=(_0x55d8f3+_0x27098d)/0x2;if(_0x5edadf[_0xac2e7b(0xc66)]())_0x355272+=_0x5edadf['battler']()[_0xac2e7b(0x6a1)]/0x2;}else _0x59005d['match'](/base/i)&&(_0x355272=_0x27098d);}_0x5edadf[_0xac2e7b(0x9e5)](_0x3c85ce,_0x355272,_0x19bc81,_0x1276e5,_0x126dfa,_0x5e8446),this[_0xac2e7b(0x115)]();},Window_BattleLog[_0x4adfe0(0x6ec)][_0x4adfe0(0x420)]=function(_0x169aba,_0x523335,_0x2739e0){const _0x1b6dcc=_0x4adfe0;for(const _0x295677 of _0x169aba){if(_0x1b6dcc(0xb48)!==_0x1b6dcc(0xb48))for(const _0x1115e9 of _0x83a1f4){_0x1115e9[_0x1b6dcc(0x634)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x7434a4=_0x15f740(_0x21c57e['$1']),_0x4f7d89=_0x61d3a2(_0x15f6c6['$2']),_0x537add=_0x4f7d89===0x1?this[_0x1b6dcc(0xa6c)]:this['_regionBattleback2'],_0x52fdb6=_0x221443(_0x5cf24b['$3']);_0x537add[_0x7434a4]=_0x52fdb6;}else{if(!_0x295677)continue;_0x295677['jumpBattler'](_0x523335,_0x2739e0);}}this['callNextMethod']();};function Window_BattleMultiTarget(){const _0x5f4da4=_0x4adfe0;this[_0x5f4da4(0xb7d)](...arguments);}Window_BattleMultiTarget['prototype']=Object[_0x4adfe0(0x3c4)](Window_Command[_0x4adfe0(0x6ec)]),Window_BattleMultiTarget[_0x4adfe0(0x6ec)][_0x4adfe0(0xab3)]=Window_BattleMultiTarget,VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5bc)][_0x4adfe0(0x3e1)]=VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5bc)][_0x4adfe0(0x3e1)]||{},Window_BattleMultiTarget[_0x4adfe0(0xb39)]=VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5bc)][_0x4adfe0(0x3e1)][_0x4adfe0(0x152)]??0x118,Window_BattleMultiTarget[_0x4adfe0(0x406)]=VisuMZ[_0x4adfe0(0xa98)]['Settings'][_0x4adfe0(0x3e1)]['BgType']??0x2,Window_BattleMultiTarget[_0x4adfe0(0x1c1)]=VisuMZ[_0x4adfe0(0xa98)]['Settings'][_0x4adfe0(0x3e1)]['ShowButton']??!![],Window_BattleMultiTarget[_0x4adfe0(0x7b0)]=VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5bc)][_0x4adfe0(0x3e1)][_0x4adfe0(0x151)]??_0x4adfe0(0x761),Window_BattleMultiTarget[_0x4adfe0(0x4c0)]=VisuMZ['BattleCore'][_0x4adfe0(0x5bc)][_0x4adfe0(0x3e1)][_0x4adfe0(0x2cd)]??'All\x20Enemies',Window_BattleMultiTarget['ACTOR_OFFSET_X']=VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5bc)][_0x4adfe0(0x3e1)][_0x4adfe0(0x1ef)]??0x0,Window_BattleMultiTarget[_0x4adfe0(0xca6)]=VisuMZ[_0x4adfe0(0xa98)]['Settings'][_0x4adfe0(0x3e1)]['ActorOffsetY']??0x0,Window_BattleMultiTarget[_0x4adfe0(0x74d)]=VisuMZ['BattleCore']['Settings'][_0x4adfe0(0x3e1)][_0x4adfe0(0x864)]??0x0,Window_BattleMultiTarget[_0x4adfe0(0x532)]=VisuMZ[_0x4adfe0(0xa98)][_0x4adfe0(0x5bc)][_0x4adfe0(0x3e1)][_0x4adfe0(0x748)]??0x0,Window_BattleMultiTarget['prototype'][_0x4adfe0(0xb7d)]=function(_0x2f2da6,_0x2edf8a){const _0x4cd5d3=_0x4adfe0;this[_0x4cd5d3(0x831)]=_0x2edf8a,Window_Command[_0x4cd5d3(0x6ec)][_0x4cd5d3(0xb7d)]['call'](this,_0x2f2da6),this[_0x4cd5d3(0x1c0)](Window_BattleMultiTarget[_0x4cd5d3(0x406)]),this[_0x4cd5d3(0x6a9)](),this['hide'](),this[_0x4cd5d3(0x330)]();},Window_BattleMultiTarget['prototype'][_0x4adfe0(0x742)]=function(){const _0x5aab20=_0x4adfe0;return this[_0x5aab20(0x831)];},Window_BattleMultiTarget[_0x4adfe0(0x6ec)][_0x4adfe0(0xa64)]=function(){const _0x3a4c63=_0x4adfe0;let _0x5021b4=this[_0x3a4c63(0x742)]()?Window_BattleMultiTarget[_0x3a4c63(0x7b0)]:Window_BattleMultiTarget[_0x3a4c63(0x4c0)];if(Imported['VisuMZ_0_CoreEngine']&&Window_BattleMultiTarget[_0x3a4c63(0x1c1)]){if('TTHzI'!==_0x3a4c63(0x6d4)){this[_0x3a4c63(0xc8d)]=this[_0x3a4c63(0x742)]()?_0x3a4c63(0x891):_0x3a4c63(0x9e4),this[_0x3a4c63(0x5ce)]=TextManager[_0x3a4c63(0x1ae)](this[_0x3a4c63(0xc8d)]);const _0x22ba16=VisuMZ[_0x3a4c63(0xaa0)]['Settings'][_0x3a4c63(0x241)][_0x3a4c63(0x42e)];_0x5021b4=_0x22ba16[_0x3a4c63(0x31d)](this[_0x3a4c63(0x5ce)],_0x5021b4);}else this[_0x3a4c63(0xada)]();}this[_0x3a4c63(0x3bc)](_0x5021b4,_0x3a4c63(0x11e));},Window_BattleMultiTarget[_0x4adfe0(0x6ec)][_0x4adfe0(0x23d)]=function(_0x3af0b7){const _0x597320=_0x4adfe0,_0x2c0d3f=this[_0x597320(0x6f8)](_0x3af0b7);this['resetTextColor'](),this[_0x597320(0x475)](this[_0x597320(0x28c)](_0x3af0b7));const _0x2a562b=this[_0x597320(0xacb)](_0x3af0b7),_0x3993e9=this[_0x597320(0xa88)](_0x2a562b)[_0x597320(0x1e2)],_0x19b5bd=_0x2c0d3f['x']+Math['floor']((_0x2c0d3f[_0x597320(0x1e2)]-_0x3993e9)/0x2);this['drawTextEx'](_0x2a562b,_0x19b5bd,_0x2c0d3f['y'],_0x2c0d3f['width']);},Window_BattleMultiTarget[_0x4adfe0(0x6ec)][_0x4adfe0(0x9e6)]=function(){const _0x44a5a0=_0x4adfe0;Window_Command[_0x44a5a0(0x6ec)]['update'][_0x44a5a0(0x61e)](this),this[_0x44a5a0(0x8cb)](),this[_0x44a5a0(0x31f)]();},Window_BattleMultiTarget['prototype'][_0x4adfe0(0x8cb)]=function(){const _0x1741c2=_0x4adfe0;this[_0x1741c2(0x415)]=this[_0x1741c2(0xce4)]();},Window_BattleMultiTarget[_0x4adfe0(0x6ec)][_0x4adfe0(0xce4)]=function(){const _0x102c30=_0x4adfe0,_0x4aa136=BattleManager[_0x102c30(0xc15)](),_0xee0bb5=_0x4aa136&&_0x4aa136[_0x102c30(0x4ab)]();if(!_0xee0bb5)return![];const _0x5ab852=SceneManager[_0x102c30(0x726)];if(this[_0x102c30(0x742)]()){if(_0x5ab852[_0x102c30(0xce9)][_0x102c30(0x27e)]&&_0x5ab852['_actorWindow'][_0x102c30(0xa8b)][_0x102c30(0x891)])return!![];if(_0x5ab852['_enemyWindow'][_0x102c30(0x27e)]&&_0x5ab852['_enemyWindow'][_0x102c30(0xa8b)]['pagedown'])return!![];}else{if(_0x5ab852[_0x102c30(0x6a7)][_0x102c30(0x27e)]&&_0x5ab852[_0x102c30(0x6a7)][_0x102c30(0xa8b)][_0x102c30(0x9e4)])return!![];}return![];},Window_BattleMultiTarget[_0x4adfe0(0x6ec)][_0x4adfe0(0x31f)]=function(){const _0x457c39=_0x4adfe0;if(!Imported[_0x457c39(0x56a)])return;this[_0x457c39(0x5ce)]!==TextManager[_0x457c39(0x1ae)](this['_buttonKey'])&&this[_0x457c39(0xcab)]();},Window_BattleMultiTarget['prototype']['processTouch']=function(){const _0x504a50=_0x4adfe0;if(this[_0x504a50(0x415)]&&TouchInput[_0x504a50(0xb1f)]()){if(_0x504a50(0xb27)!=='XkuTr'){if(!this[_0x504a50(0x6c3)])return;if(!_0x14d015)return;this['_damageContainer'][_0x504a50(0xc4e)](_0x37d2a2);}else{const _0x40de2d=this[_0x504a50(0x42a)]();if(_0x40de2d>=0x0){const _0x5cb227=this['forActor']()?'pagedown':_0x504a50(0x9e4);Input[_0x504a50(0x9d1)](_0x5cb227);}}}};