//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.81;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.81] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.81: February 15, 2024
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Angle
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x12d94d=_0x2ae6;(function(_0x159808,_0x5ec736){const _0x2720ca=_0x2ae6,_0x51d524=_0x159808();while(!![]){try{const _0x5d9571=parseInt(_0x2720ca(0x4e6))/0x1*(parseInt(_0x2720ca(0x2af))/0x2)+parseInt(_0x2720ca(0x5ac))/0x3+-parseInt(_0x2720ca(0x92c))/0x4*(-parseInt(_0x2720ca(0x4de))/0x5)+-parseInt(_0x2720ca(0x9fe))/0x6*(parseInt(_0x2720ca(0x54c))/0x7)+-parseInt(_0x2720ca(0x1bb))/0x8*(-parseInt(_0x2720ca(0x777))/0x9)+parseInt(_0x2720ca(0x830))/0xa*(parseInt(_0x2720ca(0xb21))/0xb)+-parseInt(_0x2720ca(0xb0d))/0xc;if(_0x5d9571===_0x5ec736)break;else _0x51d524['push'](_0x51d524['shift']());}catch(_0x363f95){_0x51d524['push'](_0x51d524['shift']());}}}(_0x5935,0x6aba8));var label=_0x12d94d(0xadf),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x12d94d(0xd0e)](function(_0x594234){const _0x210471=_0x12d94d;return _0x594234['status']&&_0x594234[_0x210471(0x6dd)][_0x210471(0x511)]('['+label+']');})[0x0];VisuMZ[label][_0x12d94d(0xb08)]=VisuMZ[label][_0x12d94d(0xb08)]||{},VisuMZ[_0x12d94d(0x2ec)]=function(_0x48d892,_0x582307){const _0x776a5a=_0x12d94d;for(const _0x3fa1ce in _0x582307){if(_0x776a5a(0x8e4)===_0x776a5a(0x8e4)){if(_0x3fa1ce[_0x776a5a(0x214)](/(.*):(.*)/i)){const _0x23d30b=String(RegExp['$1']),_0x22957f=String(RegExp['$2'])[_0x776a5a(0x97e)]()[_0x776a5a(0xc39)]();let _0x2b9870,_0xa46cb1,_0x11323d;switch(_0x22957f){case'NUM':_0x2b9870=_0x582307[_0x3fa1ce]!==''?Number(_0x582307[_0x3fa1ce]):0x0;break;case _0x776a5a(0xb82):_0xa46cb1=_0x582307[_0x3fa1ce]!==''?JSON[_0x776a5a(0xb79)](_0x582307[_0x3fa1ce]):[],_0x2b9870=_0xa46cb1['map'](_0x53f142=>Number(_0x53f142));break;case _0x776a5a(0x927):_0x2b9870=_0x582307[_0x3fa1ce]!==''?eval(_0x582307[_0x3fa1ce]):null;break;case _0x776a5a(0x3a7):_0xa46cb1=_0x582307[_0x3fa1ce]!==''?JSON['parse'](_0x582307[_0x3fa1ce]):[],_0x2b9870=_0xa46cb1['map'](_0x117b7d=>eval(_0x117b7d));break;case _0x776a5a(0xcad):_0x2b9870=_0x582307[_0x3fa1ce]!==''?JSON[_0x776a5a(0xb79)](_0x582307[_0x3fa1ce]):'';break;case _0x776a5a(0xca5):_0xa46cb1=_0x582307[_0x3fa1ce]!==''?JSON[_0x776a5a(0xb79)](_0x582307[_0x3fa1ce]):[],_0x2b9870=_0xa46cb1[_0x776a5a(0x43b)](_0x1c54a6=>JSON[_0x776a5a(0xb79)](_0x1c54a6));break;case _0x776a5a(0x500):_0x2b9870=_0x582307[_0x3fa1ce]!==''?new Function(JSON[_0x776a5a(0xb79)](_0x582307[_0x3fa1ce])):new Function(_0x776a5a(0x45d));break;case _0x776a5a(0x2eb):_0xa46cb1=_0x582307[_0x3fa1ce]!==''?JSON[_0x776a5a(0xb79)](_0x582307[_0x3fa1ce]):[],_0x2b9870=_0xa46cb1[_0x776a5a(0x43b)](_0x53ca08=>new Function(JSON['parse'](_0x53ca08)));break;case _0x776a5a(0x57c):_0x2b9870=_0x582307[_0x3fa1ce]!==''?String(_0x582307[_0x3fa1ce]):'';break;case _0x776a5a(0x85e):_0xa46cb1=_0x582307[_0x3fa1ce]!==''?JSON[_0x776a5a(0xb79)](_0x582307[_0x3fa1ce]):[],_0x2b9870=_0xa46cb1[_0x776a5a(0x43b)](_0x41d230=>String(_0x41d230));break;case _0x776a5a(0xde):_0x11323d=_0x582307[_0x3fa1ce]!==''?JSON[_0x776a5a(0xb79)](_0x582307[_0x3fa1ce]):{},_0x48d892[_0x23d30b]={},VisuMZ[_0x776a5a(0x2ec)](_0x48d892[_0x23d30b],_0x11323d);continue;case _0x776a5a(0x7eb):_0xa46cb1=_0x582307[_0x3fa1ce]!==''?JSON['parse'](_0x582307[_0x3fa1ce]):[],_0x2b9870=_0xa46cb1[_0x776a5a(0x43b)](_0x22ba36=>VisuMZ[_0x776a5a(0x2ec)]({},JSON[_0x776a5a(0xb79)](_0x22ba36)));break;default:continue;}_0x48d892[_0x23d30b]=_0x2b9870;}}else return _0x5aaa99[_0x776a5a(0xc83)]()?_0x3b622a[_0x776a5a(0x8c9)]()[_0x776a5a(0x29c)]||0x1:0x1;}return _0x48d892;},(_0x1906a4=>{const _0x513368=_0x12d94d,_0x110f9c=_0x1906a4[_0x513368(0x536)];for(const _0x123ab4 of dependencies){if(_0x513368(0x2bc)!=='MiHlL'){if(!Imported[_0x123ab4]){if(_0x513368(0xa5b)!=='zPhlc')this['_enemies'][_0x513368(0x739)]();else{alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x513368(0x3d0)](_0x110f9c,_0x123ab4)),SceneManager[_0x513368(0xa82)]();break;}}}else this[_0x513368(0x73)]['bitmap'][_0x513368(0x563)]!==this[_0x513368(0x78b)][_0x513368(0x828)]()&&(this['_mainSprite'][_0x513368(0x222)][_0x513368(0x563)]=this[_0x513368(0x78b)][_0x513368(0x828)]());}const _0x38f1d1=_0x1906a4[_0x513368(0x6dd)];if(_0x38f1d1[_0x513368(0x214)](/\[Version[ ](.*?)\]/i)){if(_0x513368(0xaef)===_0x513368(0x2f4))_0x3fe8d7=_0x376256[_0x513368(0x24f)](_0x34f1f8);else{const _0x49bf34=Number(RegExp['$1']);_0x49bf34!==VisuMZ[label][_0x513368(0xa0d)]&&(alert(_0x513368(0x6d3)[_0x513368(0x3d0)](_0x110f9c,_0x49bf34)),SceneManager['exit']());}}if(_0x38f1d1[_0x513368(0x214)](/\[Tier[ ](\d+)\]/i)){if(_0x513368(0xbfe)===_0x513368(0x9b6))this[_0x513368(0x374)]=new _0x311649(),this[_0x513368(0xe4)][_0x513368(0xa26)](this[_0x513368(0x374)]);else{const _0x5b7f7b=Number(RegExp['$1']);_0x5b7f7b<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x513368(0x3d0)](_0x110f9c,_0x5b7f7b,tier)),SceneManager[_0x513368(0xa82)]()):tier=Math['max'](_0x5b7f7b,tier);}}VisuMZ[_0x513368(0x2ec)](VisuMZ[label][_0x513368(0xb08)],_0x1906a4['parameters']);})(pluginData),VisuMZ[_0x12d94d(0xd16)]=function(_0x9132f8){const _0x1263b6=_0x12d94d;let _0x3ab01f=[];for(const _0x309dcd of _0x9132f8){_0x3ab01f=_0x3ab01f['concat'](VisuMZ[_0x1263b6(0x187)](_0x309dcd));}return _0x3ab01f[_0x1263b6(0xd0e)](_0x47c1ba=>_0x47c1ba);},VisuMZ[_0x12d94d(0x187)]=function(_0x4e90df){const _0x3ba861=_0x12d94d,_0x1b22e0=BattleManager[_0x3ba861(0xbee)]()[_0x3ba861(0xd0e)](_0x14fc5a=>_0x14fc5a&&_0x14fc5a[_0x3ba861(0x66e)]()),_0x1263f0=BattleManager[_0x3ba861(0xa37)],_0x34fd3b=BattleManager[_0x3ba861(0x4e5)],_0xc21eb7=BattleManager[_0x3ba861(0x3c0)]?BattleManager['_allTargets'][_0x3ba861(0x195)](0x0):_0x1b22e0;_0x4e90df=_0x4e90df[_0x3ba861(0x541)]()[_0x3ba861(0xc39)]();if(_0x4e90df==='user')return[_0x1263f0];else{if(_0x4e90df===_0x3ba861(0x8ac))return[_0x34fd3b];else{if(_0x4e90df===_0x3ba861(0x916)){if(_0x34fd3b){if(_0x3ba861(0x5f2)!==_0x3ba861(0x5f2))this[_0x3ba861(0xa83)][_0x3ba861(0xa26)](new _0x50b476());else{const _0x2ca6b7=_0xc21eb7[_0x3ba861(0x86f)](_0x34fd3b);return _0x2ca6b7>=0x0?[_0xc21eb7[_0x2ca6b7-0x1]||_0x34fd3b]:[_0x34fd3b];}}}else{if(_0x4e90df==='text\x20target'){if(_0x34fd3b){const _0x2307c4=_0xc21eb7[_0x3ba861(0x86f)](_0x34fd3b);return _0x2307c4>=0x0?[_0xc21eb7[_0x2307c4+0x1]||_0x34fd3b]:[_0x34fd3b];}}else{if(_0x4e90df===_0x3ba861(0x669))return _0xc21eb7;else{if(_0x4e90df===_0x3ba861(0xb5d))return[_0x1263f0][_0x3ba861(0xa0b)](_0xc21eb7);else{if(_0x4e90df===_0x3ba861(0xb9c))return _0x1b22e0[_0x3ba861(0xd0e)](_0x15f309=>_0x15f309!==_0x1263f0&&!_0xc21eb7[_0x3ba861(0x511)](_0x15f309)&&_0x15f309['notFocusValid']());else{if(_0x4e90df==='special')return[VisuMZ['GetActionSequenceSpecialTarget']()];else{if(_0x4e90df['match'](/SPECIAL (.*)>/i)){const _0x4fe428=String(RegExp['$1'])[_0x3ba861(0x5db)](',')['map'](_0x47a835=>_0x47a835[_0x3ba861(0xc39)]());return[VisuMZ[_0x3ba861(0xc77)](_0x4fe428)];}}}}}}}}}if(_0x1263f0){if(_0x3ba861(0x1a8)!==_0x3ba861(0x106)){if(_0x4e90df===_0x3ba861(0xa1)){if(_0x3ba861(0xb8d)!==_0x3ba861(0xb8d))_0x4962ae[_0x3ba861(0x4e9)][_0x3ba861(0x36f)][_0x3ba861(0xba3)](this),this[_0x3ba861(0x32f)]();else return _0x1263f0['friendsUnit']()[_0x3ba861(0xafe)]();}else{if(_0x4e90df==='alive\x20friends\x20not\x20user')return _0x1263f0['friendsUnit']()['aliveMembers']()[_0x3ba861(0xd0e)](_0x40bd19=>_0x40bd19!==_0x1263f0);else{if(_0x4e90df===_0x3ba861(0xba1)){if('dRVsc'!=='BhfDV')return _0x1263f0[_0x3ba861(0x73c)]()['aliveMembers']()[_0x3ba861(0xd0e)](_0xb33249=>_0xb33249!==_0x34fd3b);else{if(!_0x2aca42[_0x3ba861(0x701)]())return;const _0x290297=this[_0x3ba861(0x9b8)]();if(!_0x290297)return;_0x290297['startGrow'](_0x1afd48,_0x100e14,_0x25052f,_0x27ed9d);}}else{if(_0x4e90df==='dead\x20friends'){if('FrcvN'!==_0x3ba861(0xa84))this['_targetBattlerKey']=_0x3b534c[_0x3ba861(0x541)]()['trim']();else return _0x1263f0[_0x3ba861(0x73c)]()[_0x3ba861(0x1cf)]();}else{if(_0x4e90df[_0x3ba861(0x214)](/FRIEND INDEX (\d+)/i)){if(_0x3ba861(0x502)!==_0x3ba861(0x502)){const _0x5390ae=_0x484860(_0x51d277['$1'])['split'](/[\r\n]+/)[_0x3ba861(0x8fc)](''),_0x5e9bef=_0xc084d0[_0x3ba861(0x329)](_0x5390ae);_0x3738be['wtypeId']=_0x44c70f[_0x3ba861(0x14f)](_0x5e9bef);}else{const _0x5e9b20=Number(RegExp['$1']);return[_0x1263f0[_0x3ba861(0x73c)]()[_0x3ba861(0x5b8)]()[_0x5e9b20]];}}}}}}if(_0x4e90df===_0x3ba861(0xab3)){if(_0x3ba861(0x5af)==='xdjPb'){if(this[_0x3ba861(0xa77)]<=0x0)return;const _0x2c5cc7=this['_floatDuration'],_0x49fce4=this['_floatWholeDuration'],_0x5bd591=this[_0x3ba861(0x35a)];_0x5d47f4['VisuMZ_0_CoreEngine']?this[_0x3ba861(0x383)]=this[_0x3ba861(0x1da)](this['_floatHeight'],this['_targetFloatHeight'],_0x2c5cc7,_0x49fce4,_0x5bd591):this[_0x3ba861(0x383)]=(this[_0x3ba861(0x383)]*(_0x2c5cc7-0x1)+this[_0x3ba861(0xc8a)])/_0x2c5cc7;this['_floatDuration']--;if(this[_0x3ba861(0xa77)]<=0x0)this[_0x3ba861(0x7ac)]();}else return _0x1263f0[_0x3ba861(0x297)]()[_0x3ba861(0xafe)]();}else{if(_0x4e90df==='alive\x20opponents\x20not\x20target'){if(_0x3ba861(0x21a)==='afcET')return _0x1263f0[_0x3ba861(0x297)]()[_0x3ba861(0xafe)]()[_0x3ba861(0xd0e)](_0x51692e=>_0x51692e!==_0x34fd3b);else _0xf01c07=_0x2f098f;}else{if(_0x4e90df===_0x3ba861(0x47e))return _0x1263f0[_0x3ba861(0x297)]()[_0x3ba861(0x1cf)]();else{if(_0x4e90df[_0x3ba861(0x214)](/OPPONENT INDEX (\d+)/i)){const _0x42ffa2=Number(RegExp['$1']);return[_0x1263f0[_0x3ba861(0x297)]()[_0x3ba861(0x5b8)]()[_0x42ffa2]];}}}}}else{_0x1de3a4[_0x3ba861(0xadf)][_0x3ba861(0xa1f)]['call'](this);if(this[_0x3ba861(0xc7)]()['note'][_0x3ba861(0x214)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x3ba861(0xc7)]()['note'][_0x3ba861(0x214)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x3f4a70['_commonEventQueue']=[]),_0x52a351[_0x3ba861(0xbdd)](this[_0x3ba861(0xc7)]())&&(_0x352857[_0x3ba861(0x84e)]=[]);}}if(_0x4e90df===_0x3ba861(0x5e5))return $gameParty['aliveMembers']();else{if(_0x4e90df===_0x3ba861(0x475))return $gameParty[_0x3ba861(0xafe)]()[_0x3ba861(0xd0e)](_0x713a74=>_0x713a74!==_0x1263f0);else{if(_0x4e90df===_0x3ba861(0xc6e)){if('Kafyo'!==_0x3ba861(0x1a3))return $gameParty[_0x3ba861(0xafe)]()[_0x3ba861(0xd0e)](_0x28efde=>_0x28efde!==_0x34fd3b);else _0x1b791b=_0x36aaba;}else{if(_0x4e90df===_0x3ba861(0x405)){if(_0x3ba861(0xc2b)!==_0x3ba861(0x114))return $gameParty[_0x3ba861(0x1cf)]();else{const _0x4a5e68=this['item']()[_0x3ba861(0xbad)];return _0x4a5e68['match'](/(?:RAND|RANDOM)/i);}}else{if(_0x4e90df['match'](/ACTOR INDEX (\d+)/i)){const _0x22e802=Number(RegExp['$1']);return[$gameParty[_0x3ba861(0x5b8)]()[_0x22e802]];}else{if(_0x4e90df[_0x3ba861(0x214)](/ACTOR ID (\d+)/i)){if('ZFVzs'===_0x3ba861(0x8d8)){const _0xc07be4=Number(RegExp['$1']);return[$gameActors[_0x3ba861(0xaa2)](_0xc07be4)];}else _0x468df8['prepareCustomActionSequence']();}}}}}}if(_0x4e90df===_0x3ba861(0xb8))return $gameTroop[_0x3ba861(0xafe)]();else{if(_0x4e90df===_0x3ba861(0x96c)){if(_0x3ba861(0xeb)!==_0x3ba861(0xeb))this['startMotion']('sleep');else return $gameTroop[_0x3ba861(0xafe)]()[_0x3ba861(0xd0e)](_0x198524=>_0x198524!==_0x1263f0);}else{if(_0x4e90df===_0x3ba861(0x2b8))return $gameTroop['aliveMembers']()[_0x3ba861(0xd0e)](_0x873930=>_0x873930!==_0x34fd3b);else{if(_0x4e90df==='dead\x20enemies')return $gameTroop['deadMembers']();else{if(_0x4e90df[_0x3ba861(0x214)](/ENEMY INDEX (\d+)/i)){const _0x4cffa=Number(RegExp['$1']);return[$gameTroop[_0x3ba861(0x5b8)]()[_0x4cffa]];}else{if(_0x4e90df[_0x3ba861(0x214)](/ENEMY ID (\d+)/i)){if(_0x3ba861(0xa8d)!==_0x3ba861(0xa8d))this[_0x3ba861(0x9a8)]=this[_0x3ba861(0x1da)](this['opacity'],this[_0x3ba861(0xaf5)],_0x54fb3d,_0x4f68d4,_0xebaf04);else{const _0x24f209=Number(RegExp['$1']);return $gameTroop[_0x3ba861(0xafe)]()['filter'](_0x3c7c2f=>_0x3c7c2f[_0x3ba861(0xa81)]()===_0x24f209);}}}}}}}if(_0x4e90df==='alive\x20battlers'){if('VjEak'!=='VjEak'){if(!_0x5109bb['isSceneBattle']())return;if(!_0x4f0b7a[_0x3ba861(0x857)])return;const _0x3a80d4=_0x585d52[_0x3ba861(0x664)]();if(!_0x3a80d4)return;_0x3a80d4[_0x3ba861(0xb30)](_0x3ba861(0x9f2));}else return _0x1b22e0[_0x3ba861(0xd0e)](_0x3f050e=>_0x3f050e[_0x3ba861(0x3b5)]());}else{if(_0x4e90df===_0x3ba861(0xcfe)){if(_0x3ba861(0x136)!==_0x3ba861(0xc53))return _0x1b22e0[_0x3ba861(0xd0e)](_0x2859ef=>_0x2859ef[_0x3ba861(0x3b5)]()&&_0x2859ef!==_0x1263f0);else{if(!this[_0x3ba861(0xcc3)])return;this[_0x3ba861(0xcc3)]['y']=this[_0x3ba861(0x59e)]-this['y']-0x2;}}else{if(_0x4e90df==='alive\x20battlers\x20not\x20target')return _0x1b22e0['filter'](_0x12940e=>_0x12940e[_0x3ba861(0x3b5)]()&&_0x12940e!==_0x34fd3b);else{if(_0x4e90df===_0x3ba861(0x143))return _0x1b22e0[_0x3ba861(0xd0e)](_0x4596db=>_0x4596db['isDead']());}}}return[];},VisuMZ[_0x12d94d(0x8ed)]=function(){const _0x10f366=_0x12d94d;return BattleManager[_0x10f366(0x4e5)];},VisuMZ[_0x12d94d(0xc77)]=function(_0x18f84f){return BattleManager['_target'];},PluginManager[_0x12d94d(0xc10)](pluginData['name'],'ActSeq_Set_SetupAction',_0x441244=>{const _0x3c6c68=_0x12d94d;if(!SceneManager[_0x3c6c68(0xb92)]())return;VisuMZ['ConvertParams'](_0x441244,_0x441244);const _0x46782c=$gameTemp['getLastPluginCommandInterpreter'](),_0x1bec01=BattleManager[_0x3c6c68(0x5ef)],_0xd615da=BattleManager[_0x3c6c68(0xa37)],_0x8e7bac=BattleManager[_0x3c6c68(0x3c0)]?BattleManager[_0x3c6c68(0x3c0)][_0x3c6c68(0x195)](0x0):[],_0x4ba4b7=BattleManager[_0x3c6c68(0xf5)];if(!_0x46782c||!_0x1bec01||!_0xd615da)return;if(!_0x1bec01[_0x3c6c68(0xc7)]())return;if(_0x441244[_0x3c6c68(0x730)])_0x4ba4b7[_0x3c6c68(0xc74)](_0xd615da,_0x1bec01[_0x3c6c68(0xc7)]());_0x441244[_0x3c6c68(0xc48)]&&_0x4ba4b7[_0x3c6c68(0xbce)](_0x3c6c68(0x581),_0xd615da,_0x8e7bac,!![]);if(_0x441244[_0x3c6c68(0x170)])_0x4ba4b7[_0x3c6c68(0xbce)](_0x3c6c68(0xa36),_0xd615da,_0x1bec01);if(_0x441244['WaitForMovement'])_0x4ba4b7[_0x3c6c68(0xbce)](_0x3c6c68(0x522));if(_0x441244[_0x3c6c68(0x403)])_0x4ba4b7['push'](_0x3c6c68(0x984),_0xd615da,_0x1bec01);if(_0x441244[_0x3c6c68(0x49f)])_0x4ba4b7['push'](_0x3c6c68(0x158));_0x46782c[_0x3c6c68(0xb30)](_0x3c6c68(0x54d));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x609),_0x15e4d0=>{const _0x3d9344=_0x12d94d;if(!SceneManager[_0x3d9344(0xb92)]())return;VisuMZ[_0x3d9344(0x2ec)](_0x15e4d0,_0x15e4d0);const _0x4381a3=$gameTemp[_0x3d9344(0x664)](),_0x421a66=BattleManager[_0x3d9344(0x5ef)],_0x4eac5f=BattleManager[_0x3d9344(0xa37)],_0x45fbae=BattleManager[_0x3d9344(0x3c0)]?BattleManager[_0x3d9344(0x3c0)][_0x3d9344(0x195)](0x0):[],_0x18c705=BattleManager['_logWindow'],_0xa6c62a=_0x15e4d0[_0x3d9344(0xb54)]??![];if(!_0x4381a3||!_0x421a66||!_0x4eac5f)return;if(!_0x421a66['item']())return;let _0x30bc6b=_0xa6c62a?_0x18c705[_0x3d9344(0x8ba)](_0x4eac5f):0x1;for(let _0x2c9ff9=0x0;_0x2c9ff9<_0x30bc6b;_0x2c9ff9++){_0xa6c62a&&_0x4eac5f[_0x3d9344(0xc83)]()&&_0x18c705[_0x3d9344(0xbce)](_0x3d9344(0x115),_0x4eac5f,_0x2c9ff9);if(_0x15e4d0['PerformAction'])_0x18c705[_0x3d9344(0xbce)](_0x3d9344(0x8f4),_0x4eac5f,_0x421a66);if(_0x15e4d0[_0x3d9344(0x9b5)]>0x0)_0x18c705['push'](_0x3d9344(0x699),_0x15e4d0[_0x3d9344(0x9b5)]);if(_0x15e4d0[_0x3d9344(0x764)])_0x18c705['push'](_0x3d9344(0x735),_0x4eac5f,_0x45fbae,_0x421a66[_0x3d9344(0xc7)]()[_0x3d9344(0x8b7)]);if(_0x15e4d0['WaitForAnimation'])_0x18c705[_0x3d9344(0xbce)]('waitForAnimation');for(const _0x50578d of _0x45fbae){if('GVhzV'!=='GVhzV')_0x3f19d5['x']=_0x44891b['x']+_0x4ec453[_0x3d9344(0x108)]*_0x3f8437,_0xfd6244['y']=_0x438911['y']+_0x550b33[_0x3d9344(0x367)];else{if(!_0x50578d)continue;if(_0x15e4d0[_0x3d9344(0xb25)])_0x18c705['push'](_0x3d9344(0x81b),_0x4eac5f,_0x50578d);}}}_0xa6c62a&&_0x4eac5f[_0x3d9344(0xc83)]()&&(_0x3d9344(0x171)===_0x3d9344(0x171)?_0x18c705[_0x3d9344(0xbce)](_0x3d9344(0xac9),_0x4eac5f):_0x309bd0[_0x3d9344(0xadf)][_0x3d9344(0x635)]['call'](this));if(_0x15e4d0[_0x3d9344(0xc48)])_0x18c705['push'](_0x3d9344(0x581),_0x4eac5f,_0x45fbae,![]);_0x4381a3[_0x3d9344(0xb30)](_0x3d9344(0x54d));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0xc1e),_0x54f8f1=>{const _0x4f8871=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x54f8f1,_0x54f8f1);const _0xbdea19=$gameTemp[_0x4f8871(0x664)](),_0x47f301=BattleManager[_0x4f8871(0x5ef)],_0x1b2213=BattleManager[_0x4f8871(0xa37)],_0x458ddf=BattleManager['_allTargets']?BattleManager[_0x4f8871(0x3c0)][_0x4f8871(0x195)](0x0):[],_0x12e870=BattleManager[_0x4f8871(0xf5)],_0x4a5c0b=_0x54f8f1[_0x4f8871(0xb54)]??![];if(!_0xbdea19||!_0x47f301||!_0x1b2213)return;if(!_0x47f301['item']())return;let _0x244f37=_0x4a5c0b?_0x12e870['getDualWieldTimes'](_0x1b2213):0x1;for(let _0x3309b1=0x0;_0x3309b1<_0x244f37;_0x3309b1++){if(_0x4f8871(0xb5c)!=='XdQvZ')for(const _0x286611 of _0x458ddf){if(!_0x286611)continue;_0x4a5c0b&&_0x1b2213['isActor']()&&_0x12e870[_0x4f8871(0xbce)](_0x4f8871(0x115),_0x1b2213,_0x3309b1);if(_0x54f8f1[_0x4f8871(0xd1f)])_0x12e870[_0x4f8871(0xbce)](_0x4f8871(0x8f4),_0x1b2213,_0x47f301);if(_0x54f8f1[_0x4f8871(0xcb7)]>0x0)_0x12e870[_0x4f8871(0xbce)]('waitCount',_0x54f8f1[_0x4f8871(0xcb7)]);if(_0x54f8f1[_0x4f8871(0x764)])_0x12e870['push']('showAnimation',_0x1b2213,[_0x286611],_0x47f301[_0x4f8871(0xc7)]()['animationId']);if(_0x54f8f1[_0x4f8871(0x5da)]>0x0)_0x12e870[_0x4f8871(0xbce)]('waitCount',_0x54f8f1[_0x4f8871(0x5da)]);if(_0x54f8f1['ActionEffect'])_0x12e870[_0x4f8871(0xbce)]('actionEffect',_0x1b2213,_0x286611);}else{if(!_0x247948['isSceneBattle']())return;if(!_0x405493[_0x4f8871(0x663)])return;_0xc0b22d['ConvertParams'](_0x2fa005,_0x1e8179);const _0xe6226b=_0x33a686['_action'],_0xf56f6e=_0x105ee8[_0x4f8871(0xb40)];if(!_0xe6226b)return;_0xe6226b[_0x4f8871(0x63c)]=_0xf56f6e;}}_0x4a5c0b&&_0x1b2213['isActor']()&&_0x12e870[_0x4f8871(0xbce)](_0x4f8871(0xac9),_0x1b2213);if(_0x54f8f1['ApplyImmortal'])_0x12e870[_0x4f8871(0xbce)]('applyImmortal',_0x1b2213,_0x458ddf,![]);_0xbdea19[_0x4f8871(0xb30)]('battlelog');}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Set_FinishAction',_0x34be17=>{const _0x2399ab=_0x12d94d;if(!SceneManager[_0x2399ab(0xb92)]())return;VisuMZ[_0x2399ab(0x2ec)](_0x34be17,_0x34be17);const _0xd26636=$gameTemp[_0x2399ab(0x664)](),_0x134c6e=BattleManager[_0x2399ab(0x5ef)],_0x245d33=BattleManager['_subject'],_0x1beb20=BattleManager[_0x2399ab(0x3c0)]?BattleManager[_0x2399ab(0x3c0)][_0x2399ab(0x195)](0x0):[],_0x4d291f=BattleManager[_0x2399ab(0xf5)];if(!_0xd26636||!_0x134c6e||!_0x245d33)return;if(!_0x134c6e[_0x2399ab(0xc7)]())return;if(_0x34be17[_0x2399ab(0xc48)])_0x4d291f[_0x2399ab(0xbce)](_0x2399ab(0x581),_0x245d33,_0x1beb20,![]);if(_0x34be17[_0x2399ab(0x2c7)])_0x4d291f[_0x2399ab(0xbce)](_0x2399ab(0x9f4));if(_0x34be17[_0x2399ab(0x8a8)])_0x4d291f['push'](_0x2399ab(0x97));if(_0x34be17[_0x2399ab(0x906)])_0x4d291f[_0x2399ab(0xbce)](_0x2399ab(0x4ef));if(_0x34be17[_0x2399ab(0x854)])_0x4d291f['push'](_0x2399ab(0x75d),_0x245d33);if(_0x34be17[_0x2399ab(0xcce)])_0x4d291f[_0x2399ab(0xbce)](_0x2399ab(0x522));_0xd26636[_0x2399ab(0xb30)](_0x2399ab(0x54d));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],'ActSeq_ChangeAngle',_0x369902=>{const _0x15a4c9=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x369902,_0x369902);const _0x54d490=$gameTemp[_0x15a4c9(0x664)](),_0x15fba0=_0x369902[_0x15a4c9(0xaf4)];if(!_0x54d490)return;$gameScreen[_0x15a4c9(0xc6b)](_0x369902[_0x15a4c9(0x953)],_0x369902['Duration'],_0x369902[_0x15a4c9(0x7fd)]);if(_0x15fba0)_0x54d490['setWaitMode'](_0x15a4c9(0x49c));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x1bf),_0x263651=>{const _0x35fcdc=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x263651,_0x263651);const _0x59ac56=$gameTemp['getLastPluginCommandInterpreter'](),_0x2d2ffc=_0x263651[_0x35fcdc(0xaf4)];if(!_0x59ac56)return;$gameScreen['setBattleAngle'](0x0,_0x263651[_0x35fcdc(0x227)],_0x263651[_0x35fcdc(0x7fd)]);if(_0x2d2ffc)_0x59ac56[_0x35fcdc(0xb30)](_0x35fcdc(0x49c));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Angle_WaitForAngle',_0x46b170=>{const _0x357e07=_0x12d94d;if(!SceneManager[_0x357e07(0xb92)]())return;if(!Imported[_0x357e07(0x857)])return;const _0x423944=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x423944)return;_0x423944[_0x357e07(0xb30)](_0x357e07(0x49c));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0xae),_0x1c54c3=>{const _0x9cc7cb=_0x12d94d;if(!SceneManager[_0x9cc7cb(0xb92)]())return;VisuMZ[_0x9cc7cb(0x2ec)](_0x1c54c3,_0x1c54c3);const _0x277f5c=$gameTemp[_0x9cc7cb(0x664)](),_0x5ea1d7=BattleManager[_0x9cc7cb(0x5ef)],_0xd0c07b=BattleManager[_0x9cc7cb(0xa37)],_0x4000db=VisuMZ[_0x9cc7cb(0xd16)](_0x1c54c3[_0x9cc7cb(0xc0)]),_0x2c8154=_0x1c54c3[_0x9cc7cb(0x131)],_0x20caec=BattleManager[_0x9cc7cb(0xf5)];if(!_0x277f5c||!_0x5ea1d7||!_0xd0c07b)return;if(!_0x5ea1d7[_0x9cc7cb(0xc7)]())return;let _0x50a8ca=_0x5ea1d7[_0x9cc7cb(0xc7)]()['animationId'];if(_0x50a8ca<0x0)_0x50a8ca=_0xd0c07b['attackAnimationId1']();$gameTemp['requestAnimation'](_0x4000db,_0x50a8ca,_0x2c8154);if(_0x1c54c3[_0x9cc7cb(0x49f)]){if(_0x9cc7cb(0x2e1)!=='ZLHXP'){const _0xd4fd55=_0x3ab2e0[_0x9cc7cb(0xafe)]();_0x33179c=_0x458c96[_0x9cc7cb(0xa0b)](_0xd4fd55),_0x2fb01b[_0x9cc7cb(0x790)]()&&_0xd4fd55['length']>0x1&&this['setHandler'](_0x9cc7cb(0x7da),this[_0x9cc7cb(0x976)][_0x9cc7cb(0xb99)](this));}else _0x277f5c[_0x9cc7cb(0xb30)]('battleAnimation');}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x452),_0x1d9cca=>{const _0x6ffc7f=_0x12d94d;if(!SceneManager[_0x6ffc7f(0xb92)]())return;VisuMZ[_0x6ffc7f(0x2ec)](_0x1d9cca,_0x1d9cca);const _0xd51863=$gameTemp[_0x6ffc7f(0x664)](),_0xfb6fd5=BattleManager[_0x6ffc7f(0xa37)],_0x1031a3=VisuMZ['CreateActionSequenceTargets'](_0x1d9cca[_0x6ffc7f(0xc0)]),_0x3f38e=_0x1d9cca['Mirror'],_0x207cdb=BattleManager[_0x6ffc7f(0xf5)];if(!_0xd51863||!_0xfb6fd5)return;const _0x962869=_0xfb6fd5[_0x6ffc7f(0x9d1)]();$gameTemp[_0x6ffc7f(0x58d)](_0x1031a3,_0x962869,_0x3f38e);if(_0x1d9cca['WaitForAnimation']){if(_0x6ffc7f(0xa79)!==_0x6ffc7f(0x85a))_0xd51863[_0x6ffc7f(0xb30)](_0x6ffc7f(0x2c1));else{if(_0x5cf6ec['battleCameraData']()[_0x6ffc7f(0x203)]>0x0)return!![];this[_0x6ffc7f(0x6ea)]='';}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x2c4),_0x1b301d=>{const _0xa2b707=_0x12d94d;if(!SceneManager[_0xa2b707(0xb92)]())return;VisuMZ[_0xa2b707(0x2ec)](_0x1b301d,_0x1b301d);const _0x3a24ae=_0x32f474[_0xa2b707(0xb46)](_0x1b301d[_0xa2b707(0x9be)]);if(_0x3a24ae<=0x0)return;const _0x1f0604=$gameTemp[_0xa2b707(0x664)](),_0x32f474=BattleManager['_subject'],_0x52e233=VisuMZ['CreateActionSequenceTargets'](_0x1b301d[_0xa2b707(0xc0)]),_0x408e46=_0x1b301d['Mirror'],_0x107639=BattleManager[_0xa2b707(0xf5)];if(!_0x1f0604||!_0x32f474)return;$gameTemp[_0xa2b707(0x58d)](_0x52e233,_0x3a24ae,_0x408e46),_0x1b301d[_0xa2b707(0x49f)]&&_0x1f0604['setWaitMode'](_0xa2b707(0x2c1));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x1a9),_0x35b449=>{const _0x114d29=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x114d29(0x2ec)](_0x35b449,_0x35b449);const _0x36f29d=$gameTemp[_0x114d29(0x664)](),_0x16495d=VisuMZ['CreateActionSequenceTargets'](_0x35b449['Targets']),_0x4bfcc9=_0x35b449[_0x114d29(0x523)];let _0x26ca5a=0x0;switch(_0x4bfcc9[_0x114d29(0x97e)]()[_0x114d29(0xc39)]()){case'!':case _0x114d29(0x177):_0x26ca5a=0x1;break;case'?':case'QUESTION':_0x26ca5a=0x2;break;case _0x114d29(0xc11):case _0x114d29(0x15b):case _0x114d29(0xb55):case _0x114d29(0x652):case _0x114d29(0x446):_0x26ca5a=0x3;break;case _0x114d29(0xb83):case _0x114d29(0xbcb):_0x26ca5a=0x4;break;case _0x114d29(0xc4f):_0x26ca5a=0x5;break;case'SWEAT':_0x26ca5a=0x6;break;case _0x114d29(0x11e):case'ANNOYED':case _0x114d29(0x7ad):_0x26ca5a=0x7;break;case _0x114d29(0x5a4):case _0x114d29(0x7a0):_0x26ca5a=0x8;break;case'LIGHT':case _0x114d29(0x640):case _0x114d29(0x4ff):case _0x114d29(0x85):case _0x114d29(0x10e):_0x26ca5a=0x9;break;case'Z':case'ZZ':case _0x114d29(0x85c):case'SLEEP':_0x26ca5a=0xa;break;case _0x114d29(0x7d2):_0x26ca5a=0xb;break;case _0x114d29(0xc5f):_0x26ca5a=0xc;break;case _0x114d29(0xa06):_0x26ca5a=0xd;break;case'USER-DEFINED\x204':_0x26ca5a=0xe;break;case _0x114d29(0xd1):_0x26ca5a=0xf;break;}for(const _0x3acc90 of _0x16495d){if(!_0x3acc90)continue;$gameTemp[_0x114d29(0xcde)](_0x3acc90,_0x26ca5a);}_0x35b449[_0x114d29(0x9dc)]&&_0x36f29d&&(_0x36f29d[_0x114d29(0x48a)](0x1),_0x36f29d['setWaitMode'](_0x114d29(0x350)));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x79a),_0x535ab1=>{const _0x1881c9=_0x12d94d;if(!SceneManager[_0x1881c9(0xb92)]())return;if(!Imported[_0x1881c9(0x1cb)])return;VisuMZ[_0x1881c9(0x2ec)](_0x535ab1,_0x535ab1);const _0xd3118a=$gameTemp[_0x1881c9(0x664)](),_0x32b5d6=VisuMZ[_0x1881c9(0xd16)](_0x535ab1[_0x1881c9(0xc0)]),_0x6253e3=_0x535ab1[_0x1881c9(0xaeb)];for(const _0x252493 of _0x32b5d6){if(!_0x252493)continue;$gameTemp[_0x1881c9(0xcde)](_0x252493,[_0x6253e3]);}_0x535ab1['WaitComplete']&&_0xd3118a&&(_0xd3118a[_0x1881c9(0x48a)](0x1),_0xd3118a['setWaitMode'](_0x1881c9(0x350)));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0xa6c),_0xe7ecd9=>{const _0x447c6d=_0x12d94d;if(!SceneManager[_0x447c6d(0xb92)]())return;if(!Imported[_0x447c6d(0x1cb)])return;VisuMZ[_0x447c6d(0x2ec)](_0xe7ecd9,_0xe7ecd9);const _0x212c48=$gameTemp['getLastPluginCommandInterpreter'](),_0x2835f2=VisuMZ[_0x447c6d(0xd16)](_0xe7ecd9[_0x447c6d(0xc0)]),_0xee14e8=Math[_0x447c6d(0x2e3)](Number(_0xe7ecd9[_0x447c6d(0x14d)]||0x0),Number(_0xe7ecd9['endIcon']||0x0)),_0x4b2c31=Math['max'](Number(_0xe7ecd9[_0x447c6d(0x14d)]||0x0),Number(_0xe7ecd9[_0x447c6d(0x556)]||0x0)),_0x15cf40=[];for(let _0x40baab=_0xee14e8;_0x40baab<=_0x4b2c31;_0x40baab++){_0x15cf40['push'](_0x40baab);}for(const _0xe022d3 of _0x2835f2){if('CGfTz'==='MGRUW'){if(!this[_0x447c6d(0x3e8)]())return;const _0x5d02e8=this[_0x447c6d(0x86b)](),_0x42e1c8=_0x27be74[_0x447c6d(0xadf)]['Settings'][_0x447c6d(0xa88)][_0x447c6d(0x5c1)],_0x4d783d=_0x5d02e8===_0x447c6d(0x1e6)?_0x5c5b14[_0x447c6d(0x7f7)]:_0x447c6d(0x3ae)[_0x447c6d(0x3d0)](_0x42e1c8,_0x3740ba[_0x447c6d(0x7f7)]),_0x3fddff=this[_0x447c6d(0xc4d)]();this[_0x447c6d(0xb0a)](_0x4d783d,_0x447c6d(0x7f7),_0x3fddff);}else{if(!_0xe022d3)continue;$gameTemp[_0x447c6d(0xcde)](_0xe022d3,_0x15cf40);}}if(_0xe7ecd9[_0x447c6d(0x9dc)]&&_0x212c48){if('PBjru'!==_0x447c6d(0x1eb))_0x212c48[_0x447c6d(0x48a)](0x1),_0x212c48[_0x447c6d(0xb30)](_0x447c6d(0x350));else{if(!_0xfee470['isSideView']())return;const _0x241f93=this[_0x447c6d(0x9b8)]();if(!_0x241f93)return;_0x241f93[_0x447c6d(0xadd)](_0x28f4af,_0xcbb4fc,_0xab4f2d);}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x932),_0x3151d0=>{const _0x307b65=_0x12d94d;if(!SceneManager[_0x307b65(0xb92)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x307b65(0x2ec)](_0x3151d0,_0x3151d0);const _0x4bab24=$gameTemp[_0x307b65(0x664)](),_0x57b6be=VisuMZ[_0x307b65(0xd16)](_0x3151d0[_0x307b65(0xc0)]),_0x5c0ed2=_0x3151d0[_0x307b65(0x322)];for(const _0x2adaf2 of _0x57b6be){if(!_0x2adaf2)continue;$gameTemp[_0x307b65(0xcde)](_0x2adaf2,_0x5c0ed2);}if(_0x3151d0[_0x307b65(0x9dc)]&&_0x4bab24){if('vRvWm'===_0x307b65(0xcb1)){if(!this['_battler'])return;if(!this['_hpGaugeSprite'])return;const _0x598b49=_0x41c477[_0x307b65(0xadf)][_0x307b65(0xb08)][_0x307b65(0x757)],_0x355491=this[_0x307b65(0x137)];_0x355491[_0x307b65(0x9bf)]=this[_0x307b65(0xca0)]();const _0x2c852b=_0x598b49[_0x307b65(0x211)],_0x268b1b=_0x598b49['OffsetY'];_0x355491['x']=_0x2c852b,_0x355491['x']+=this[_0x307b65(0x78b)]['battleUIOffsetX'](),_0x355491['y']=-this[_0x307b65(0xd17)]+_0x268b1b,_0x355491['y']+=this[_0x307b65(0x78b)][_0x307b65(0x8a)](),_0x2fefaa[_0x307b65(0x36c)]&&_0x1b2a68[_0x307b65(0x592)][_0x307b65(0x372)]&&(_0x355491['x']+=this['x'],_0x355491['y']+=this['y']);}else _0x4bab24['wait'](0x1),_0x4bab24[_0x307b65(0xb30)]('battleBalloon');}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x647),_0x2b4924=>{const _0x52f2b0=_0x12d94d;if(!SceneManager[_0x52f2b0(0xb92)]())return;VisuMZ[_0x52f2b0(0x2ec)](_0x2b4924,_0x2b4924);const _0x35af35=$gameTemp[_0x52f2b0(0x664)](),_0x5bc0ab=BattleManager[_0x52f2b0(0x5ef)],_0x1fc93b=_0x2b4924['Mirror'],_0x3352c2=VisuMZ['CreateActionSequenceTargets'](_0x2b4924[_0x52f2b0(0xc0)]);if(!_0x35af35||!_0x5bc0ab)return;if(!_0x5bc0ab[_0x52f2b0(0xc7)]())return;for(const _0x47b6c2 of _0x3352c2){if(!_0x47b6c2)continue;_0x47b6c2[_0x52f2b0(0x984)](_0x5bc0ab,_0x1fc93b);}if(_0x2b4924[_0x52f2b0(0x49f)])_0x35af35[_0x52f2b0(0xb30)](_0x52f2b0(0x2c1));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x258),_0x5e21b9=>{const _0x3f43e0=_0x12d94d;VisuMZ['ConvertParams'](_0x5e21b9,_0x5e21b9);const _0x1d3d9d=$gameTemp[_0x3f43e0(0x664)](),_0xaaff13=VisuMZ[_0x3f43e0(0xd16)](_0x5e21b9[_0x3f43e0(0xc0)]),_0x27caa7=_0x5e21b9[_0x3f43e0(0xcb2)];if(!_0x27caa7)return;for(const _0x463a53 of _0xaaff13){if(!_0x463a53)continue;if(!_0x463a53[_0x3f43e0(0xc83)]())continue;_0x463a53[_0x3f43e0(0x6bc)](_0x27caa7);}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x2c5),_0x4dab62=>{const _0x358d2f=_0x12d94d;if(!SceneManager[_0x358d2f(0xb92)]())return;VisuMZ[_0x358d2f(0x2ec)](_0x4dab62,_0x4dab62);const _0x556448=$gameTemp[_0x358d2f(0x664)](),_0x23b55b=BattleManager[_0x358d2f(0xa37)],_0x201ffe=VisuMZ[_0x358d2f(0xd16)](_0x4dab62[_0x358d2f(0xc0)]),_0x24b68b=_0x4dab62[_0x358d2f(0x131)];if(!_0x556448||!_0x23b55b)return;const _0x564052=$dataSkilles[_0x23b55b[_0x358d2f(0x302)]()],_0x59ee3c=_0x564052[_0x358d2f(0x8b7)];$gameTemp[_0x358d2f(0x58d)](_0x201ffe,_0x59ee3c,_0x24b68b),_0x4dab62[_0x358d2f(0x49f)]&&_0x556448['setWaitMode']('battleAnimation');}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x9c9),_0x3e1d79=>{const _0x1bbbf9=_0x12d94d;if(!SceneManager[_0x1bbbf9(0xb92)]())return;VisuMZ[_0x1bbbf9(0x2ec)](_0x3e1d79,_0x3e1d79);const _0x5025d9=$gameTemp['getLastPluginCommandInterpreter'](),_0x2ed71a=VisuMZ[_0x1bbbf9(0xd16)](_0x3e1d79[_0x1bbbf9(0xc0)]),_0x13ea85=Number(_0x3e1d79['ItemID']||0x1),_0x22616a=$dataItems[_0x13ea85],_0x545e07=_0x3e1d79[_0x1bbbf9(0x131)];if(!_0x5025d9)return;if(!_0x22616a)return;let _0x2d9486=_0x22616a['animationId'];$gameTemp[_0x1bbbf9(0x58d)](_0x2ed71a,_0x2d9486,_0x545e07),_0x3e1d79[_0x1bbbf9(0x49f)]&&(_0x1bbbf9(0x2c0)==='NAUog'?_0x185ae4=_0x4ecbc7>=_0x2d14ef?_0x499099:_0x145d05:_0x5025d9['setWaitMode']('battleAnimation'));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Animation_PlayAtCoordinate',_0x1201b9=>{const _0x44bbf2=_0x12d94d;if(!SceneManager[_0x44bbf2(0x592)])return;if(!SceneManager[_0x44bbf2(0x592)][_0x44bbf2(0x372)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x44bbf2(0x2ec)](_0x1201b9,_0x1201b9);const _0x55e31e=$gameTemp[_0x44bbf2(0x664)](),_0x35b215=Math[_0x44bbf2(0x1d0)](_0x1201b9['pointX']),_0x2dbf97=Math[_0x44bbf2(0x1d0)](_0x1201b9[_0x44bbf2(0xb7b)]);$gameTemp[_0x44bbf2(0x971)](_0x35b215,_0x2dbf97,_0x1201b9[_0x44bbf2(0xa97)],_0x1201b9[_0x44bbf2(0x131)],_0x1201b9[_0x44bbf2(0x625)]),_0x1201b9[_0x44bbf2(0x9dc)]&&_0x55e31e&&(SceneManager[_0x44bbf2(0x592)][_0x44bbf2(0x372)][_0x44bbf2(0x1fb)](),_0x55e31e[_0x44bbf2(0xb30)](_0x44bbf2(0x2c1)));}),PluginManager['registerCommand'](pluginData['name'],_0x12d94d(0xc56),_0x34f37e=>{const _0x1db77e=_0x12d94d;if(!SceneManager[_0x1db77e(0xb92)]())return;VisuMZ[_0x1db77e(0x2ec)](_0x34f37e,_0x34f37e);const _0x977c30=$gameTemp['getLastPluginCommandInterpreter'](),_0xb728fc=VisuMZ[_0x1db77e(0xd16)](_0x34f37e['Targets']),_0x49583d=_0x34f37e['AnimationID'],_0x3bc2ef=_0x34f37e['Mirror'];if(!_0x977c30)return;$gameTemp['requestAnimation'](_0xb728fc,_0x49583d,_0x3bc2ef);if(_0x34f37e['WaitForAnimation'])_0x977c30['setWaitMode'](_0x1db77e(0x2c1));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0xa54),_0x2a97ab=>{const _0x146521=_0x12d94d;if(!SceneManager[_0x146521(0xb92)]())return;VisuMZ[_0x146521(0x2ec)](_0x2a97ab,_0x2a97ab);const _0x157644=$gameTemp[_0x146521(0x664)](),_0x2358fd=VisuMZ[_0x146521(0xd16)](_0x2a97ab[_0x146521(0xc0)]),_0x11ecd1=Number(_0x2a97ab['AnimationID'])||0x1,_0x2e20c4=_0x2a97ab[_0x146521(0x131)];if(!_0x157644)return;$gameTemp[_0x146521(0x58d)](_0x2358fd,_0x11ecd1,_0x2e20c4);if(_0x2a97ab[_0x146521(0x49f)])_0x157644[_0x146521(0xb30)](_0x146521(0x2c1));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x53f),_0x18b60a=>{const _0x455db2=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x455db2(0x2ec)](_0x18b60a,_0x18b60a);const _0x4460c4=$gameTemp[_0x455db2(0x664)](),_0x5c0c8a=VisuMZ[_0x455db2(0xd16)](_0x18b60a['Targets']),_0x59bedd=Number(_0x18b60a[_0x455db2(0xd08)]||0x1),_0x36da11=$dataSkills[_0x59bedd],_0x5e9865=_0x18b60a[_0x455db2(0x131)];if(!_0x4460c4)return;if(!_0x36da11)return;let _0x549b73=_0x36da11[_0x455db2(0x8b7)];$gameTemp[_0x455db2(0x58d)](_0x5c0c8a,_0x549b73,_0x5e9865),_0x18b60a[_0x455db2(0x49f)]&&_0x4460c4[_0x455db2(0xb30)](_0x455db2(0x2c1));}),PluginManager['registerCommand'](pluginData['name'],_0x12d94d(0xa78),_0x542893=>{const _0x2b8fb8=_0x12d94d;if(!SceneManager[_0x2b8fb8(0xb92)]())return;const _0x445765=$gameTemp[_0x2b8fb8(0x664)]();if(!_0x445765)return;_0x445765['setWaitMode'](_0x2b8fb8(0x2c1));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x3f9),_0x28129c=>{const _0x3835d7=_0x12d94d;if(!SceneManager[_0x3835d7(0xb92)]())return;VisuMZ[_0x3835d7(0x2ec)](_0x28129c,_0x28129c);const _0x15e5b9=BattleManager['_logWindow'],_0x59bb9d=_0x28129c[_0x3835d7(0x844)]&&Imported[_0x3835d7(0x3a6)];_0x15e5b9[_0x3835d7(0x767)](_0x28129c[_0x3835d7(0x90e)]),_0x59bb9d&&Imported[_0x3835d7(0x3a6)]&&(_0x3835d7(0xa53)!==_0x3835d7(0x7e8)?$gameSystem[_0x3835d7(0x368)](_0x28129c[_0x3835d7(0x90e)]||'',_0x28129c['CombatLogIcon']||0x0):(_0x1f0e34+=_0x10cffa,_0x506d74+=_0x3ee8ff));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xd5),_0x1c4ee2=>{const _0x1d26de=_0x12d94d;if(!SceneManager[_0x1d26de(0xb92)]())return;const _0x2b772b=BattleManager[_0x1d26de(0xf5)];_0x2b772b[_0x1d26de(0x4ef)]();}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x20c),_0x887478=>{const _0x31ef66=_0x12d94d;if(!SceneManager['isSceneBattle']())return;const _0x450259=$gameTemp[_0x31ef66(0x664)](),_0x2504a3=BattleManager[_0x31ef66(0x5ef)],_0x29fb62=BattleManager['_subject'],_0x362fb4=BattleManager[_0x31ef66(0xf5)];if(!_0x450259||!_0x2504a3||!_0x29fb62)return;if(!_0x2504a3[_0x31ef66(0xc7)]())return;_0x362fb4['displayAction'](_0x29fb62,_0x2504a3[_0x31ef66(0xc7)]()),_0x450259[_0x31ef66(0xb30)]('battlelog');}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x9e3),_0x514b38=>{const _0x22c119=_0x12d94d;if(!SceneManager[_0x22c119(0xb92)]())return;const _0x26dd4e=BattleManager[_0x22c119(0xf5)];_0x26dd4e[_0x22c119(0x82c)]();}),PluginManager['registerCommand'](pluginData['name'],_0x12d94d(0x167),_0x45c5c0=>{const _0x508ba8=_0x12d94d;if(!SceneManager['isSceneBattle']())return;const _0x9bdff5=BattleManager[_0x508ba8(0xf5)];_0x9bdff5[_0x508ba8(0x36a)]();}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_BattleLog_Refresh',_0x1eb695=>{const _0x370f2a=_0x12d94d;if(!SceneManager[_0x370f2a(0xb92)]())return;const _0x5baf8d=BattleManager['_logWindow'];_0x5baf8d['refresh']();}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x40f),_0x33a067=>{const _0x4751b3=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x33a067,_0x33a067),SceneManager[_0x4751b3(0x592)]['setVisibleUI'](_0x33a067[_0x4751b3(0xcc1)]);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x608),_0x1dff8c=>{const _0xcc0a61=_0x12d94d;if(!SceneManager[_0xcc0a61(0xb92)]())return;const _0xf26f6b=$gameTemp[_0xcc0a61(0x664)]();_0xf26f6b[_0xcc0a61(0xb30)](_0xcc0a61(0x54d));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0xacb),_0x22239b=>{const _0x57ffe3=_0x12d94d;if(!SceneManager[_0x57ffe3(0xb92)]())return;const _0x5a8417=$gameTemp['getLastPluginCommandInterpreter'](),_0x1185bd=BattleManager[_0x57ffe3(0xf5)];_0x1185bd[_0x57ffe3(0x9f4)](),_0x5a8417[_0x57ffe3(0xb30)](_0x57ffe3(0x54d));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x16f),_0x36e322=>{const _0x13100c=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x13100c(0x857)])return;VisuMZ[_0x13100c(0x2ec)](_0x36e322,_0x36e322);const _0x1dc385=$gameScreen[_0x13100c(0x63b)]();_0x1dc385[_0x13100c(0x7e3)]=_0x36e322[_0x13100c(0x90d)];}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x27a),_0x3f68f2=>{const _0xea31b=_0x12d94d;if(!SceneManager[_0xea31b(0xb92)]())return;if(!Imported[_0xea31b(0x857)])return;VisuMZ[_0xea31b(0x2ec)](_0x3f68f2,_0x3f68f2);const _0x2a86d3=$gameTemp[_0xea31b(0x664)](),_0xa546f=_0x3f68f2[_0xea31b(0x8c0)];$gameScreen[_0xea31b(0x438)](_0x3f68f2['FocusX'],_0x3f68f2[_0xea31b(0x915)],_0x3f68f2['Duration'],_0x3f68f2['EasingType']);if(_0xa546f)_0x2a86d3[_0xea31b(0xb30)](_0xea31b(0x9f2));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x6ed),_0x5269d1=>{const _0x473b79=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x473b79(0x857)])return;VisuMZ[_0x473b79(0x2ec)](_0x5269d1,_0x5269d1);const _0x51ed47=$gameTemp['getLastPluginCommandInterpreter'](),_0x5ae813=VisuMZ[_0x473b79(0xd16)](_0x5269d1[_0x473b79(0xc0)]),_0x490375=_0x5269d1[_0x473b79(0x8c0)];$gameScreen[_0x473b79(0x243)](_0x5ae813,_0x5269d1[_0x473b79(0x227)],_0x5269d1[_0x473b79(0x7fd)]);if(_0x490375)_0x51ed47[_0x473b79(0xb30)](_0x473b79(0x9f2));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x147),_0x18adb7=>{const _0xeb7ef4=_0x12d94d;if(!SceneManager[_0xeb7ef4(0xb92)]())return;if(!Imported[_0xeb7ef4(0x857)])return;VisuMZ[_0xeb7ef4(0x2ec)](_0x18adb7,_0x18adb7);const _0x541c30=$gameTemp['getLastPluginCommandInterpreter'](),_0x49b0a0=_0x18adb7[_0xeb7ef4(0x8c0)];$gameScreen['setBattleCameraOffset'](_0x18adb7['OffsetX'],_0x18adb7[_0xeb7ef4(0x75f)],_0x18adb7[_0xeb7ef4(0x227)],_0x18adb7[_0xeb7ef4(0x7fd)]);if(_0x49b0a0)_0x541c30['setWaitMode'](_0xeb7ef4(0x9f2));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x410),_0x573b47=>{const _0x4205f7=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4205f7(0x857)])return;VisuMZ[_0x4205f7(0x2ec)](_0x573b47,_0x573b47);const _0x25986a=$gameTemp[_0x4205f7(0x664)](),_0x3e0253=_0x573b47[_0x4205f7(0x612)],_0x8211da=_0x573b47['ResetOffset'],_0x2c6513=_0x573b47[_0x4205f7(0x8c0)];if(_0x3e0253){if(_0x4205f7(0x5e0)===_0x4205f7(0x5e0)){const _0x40e22c=Math['round'](Graphics[_0x4205f7(0xa80)]/0x2),_0x2a805b=Math[_0x4205f7(0x1d0)](Graphics[_0x4205f7(0xd17)]/0x2);$gameScreen[_0x4205f7(0x438)](_0x40e22c,_0x2a805b,_0x573b47[_0x4205f7(0x227)],_0x573b47['EasingType']);}else{let _0x15e04b=0x1;if(_0x5e612d&&_0x16a93e[_0x4205f7(0x222)])_0x15e04b=_0x56d36b['bitmap'][_0x4205f7(0xa80)];let _0x2cbe2e=0x1;if(this['bitmap'])_0x2cbe2e=this['bitmap'][_0x4205f7(0xd17)];_0x20e74e[_0x4205f7(0x422)](0x0,0x0,_0x15e04b,_0x2cbe2e);}}_0x8211da&&$gameScreen[_0x4205f7(0x163)](0x0,0x0,_0x573b47[_0x4205f7(0x227)],_0x573b47[_0x4205f7(0x7fd)]);if(_0x2c6513)_0x25986a[_0x4205f7(0xb30)](_0x4205f7(0x9f2));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x6ec),_0x4a6e08=>{const _0x88ece8=_0x12d94d;if(!SceneManager[_0x88ece8(0xb92)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x3d7a58=$gameTemp[_0x88ece8(0x664)]();if(!_0x3d7a58)return;_0x3d7a58[_0x88ece8(0xb30)](_0x88ece8(0x9f2));}),VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x908)]=function(_0x12536d){const _0x4b9e7f=_0x12d94d;_0x12536d[_0x4b9e7f(0x610)]='';const _0x1f9a12=VisuMZ[_0x4b9e7f(0x4db)]['CreateCutinSettings'](_0x12536d),_0xab916d=VisuMZ[_0x4b9e7f(0xd16)](_0x12536d[_0x4b9e7f(0xc0)])[0x0]||null;if(_0xab916d){_0x1f9a12[_0x4b9e7f(0x610)]=_0xab916d[_0x4b9e7f(0xa21)](),_0x1f9a12[_0x4b9e7f(0x3cc)]=_0xab916d['visualCutinPortraitIndex'](),_0x1f9a12[_0x4b9e7f(0xabe)]=_0xab916d[_0x4b9e7f(0xad2)](),_0x1f9a12['portraitType']=_0xab916d[_0x4b9e7f(0x26b)]();if(_0xab916d[_0x4b9e7f(0x2c3)]()){if(_0x4b9e7f(0x280)!==_0x4b9e7f(0x280))return this[_0x4b9e7f(0xad)]()?this['_enemy'][_0x4b9e7f(0x73d)]():!![];else _0xab916d['flipVisualCutinHorz']()&&(_0x4b9e7f(0x845)!==_0x4b9e7f(0x9e8)?_0x1f9a12['portraitFlipHorz']=!_0x1f9a12[_0x4b9e7f(0xc76)]:_0x1d411a[_0x4b9e7f(0xf2)](_0x4b9e7f(0x386))),_0xab916d['flipVisualCutinVert']()&&(_0x1f9a12[_0x4b9e7f(0x2be)]=!_0x1f9a12[_0x4b9e7f(0x2be)]),_0x1f9a12[_0x4b9e7f(0x141)]==='svActor'&&(_0x1f9a12[_0x4b9e7f(0xc76)]=!_0x1f9a12['portraitFlipHorz']),_0x12536d[_0x4b9e7f(0x8b3)]['parallaxScrollXinvertEnemy']&&(_0x1f9a12[_0x4b9e7f(0x156)]*=-0x1),_0x12536d['ExtraSettings']['parallaxScrollYinvertEnemy']&&('VdMcv'!==_0x4b9e7f(0x7a2)?_0x1f9a12[_0x4b9e7f(0x5d6)]*=-0x1:(_0x2f4d10+=_0x1370b9,_0x401f14+=_0x42b10c)),_0x1f9a12[_0x4b9e7f(0x19e)]+=_0x12536d['ExtraSettings'][_0x4b9e7f(0x286)]??0x0;}}return _0x1f9a12;},PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Cutin_AddVisualCutinEffect',_0x8ee5e2=>{const _0x51ac9d=_0x12d94d;if(!SceneManager[_0x51ac9d(0xb92)]())return;if(!Imported[_0x51ac9d(0xb6c)])return;VisuMZ[_0x51ac9d(0x2ec)](_0x8ee5e2,_0x8ee5e2);const _0x520039=VisuMZ[_0x51ac9d(0xadf)][_0x51ac9d(0x908)](_0x8ee5e2);SceneManager[_0x51ac9d(0x592)]['startVisualCutin'](_0x520039);const _0x45ab23=$gameTemp[_0x51ac9d(0x664)]();if(_0x45ab23&&_0x8ee5e2[_0x51ac9d(0x56a)]){if(_0x51ac9d(0x193)==='iBGoW')return![];else _0x45ab23['setWaitMode']('cutinEnter');}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xbab),_0xf48180=>{const _0x385df5=_0x12d94d;if(!SceneManager[_0x385df5(0xb92)]())return;if(!Imported[_0x385df5(0xb6c)])return;VisuMZ[_0x385df5(0x2ec)](_0xf48180,_0xf48180),SceneManager[_0x385df5(0x592)][_0x385df5(0xa2a)]();const _0x3dc019=$gameTemp[_0x385df5(0x664)]();_0x3dc019&&_0xf48180[_0x385df5(0x668)]&&_0x3dc019[_0x385df5(0xb30)](_0x385df5(0x6fa));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x1af),_0x1b9c69=>{const _0x1e44dc=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1e44dc(0xb6c)])return;VisuMZ[_0x1e44dc(0x2ec)](_0x1b9c69,_0x1b9c69);const _0x2f41ad=_0x1b9c69[_0x1e44dc(0x360)]['toLowerCase']()[_0x1e44dc(0xc39)]();SceneManager[_0x1e44dc(0x592)][_0x1e44dc(0x478)](_0x2f41ad);const _0x434ca7=$gameTemp[_0x1e44dc(0x664)]();_0x434ca7&&_0x1b9c69[_0x1e44dc(0x668)]&&_0x434ca7['setWaitMode'](_0x1e44dc(0x6fa));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x464),_0x30daff=>{const _0x2cae5d=_0x12d94d;if(!SceneManager[_0x2cae5d(0xb92)]())return;if(!Imported[_0x2cae5d(0xb6c)])return;const _0x4013c9=$gameTemp[_0x2cae5d(0x664)]();_0x4013c9['setWaitMode']('cutinEnter');}),PluginManager['registerCommand'](pluginData['name'],_0x12d94d(0x82b),_0xf99c8=>{const _0x1738c3=_0x12d94d;if(!SceneManager[_0x1738c3(0xb92)]())return;if(!Imported[_0x1738c3(0xb6c)])return;const _0x3e7e60=$gameTemp['getLastPluginCommandInterpreter']();_0x3e7e60[_0x1738c3(0xb30)]('cutinExit');}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x347),_0x7ebff6=>{const _0x359bf0=_0x12d94d;if(!SceneManager[_0x359bf0(0xb92)]())return;if(!Imported[_0x359bf0(0x2b4)])return;VisuMZ[_0x359bf0(0x2ec)](_0x7ebff6,_0x7ebff6);const _0x148311=VisuMZ[_0x359bf0(0xd16)](_0x7ebff6['Targets']),_0x326aff=_0x7ebff6[_0x359bf0(0x7f0)]['toLowerCase']()[_0x359bf0(0xc39)]();for(const _0x466938 of _0x148311){if(!_0x466938)continue;_0x466938[_0x359bf0(0x164)](_0x326aff);}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xc4b),_0x35e1de=>{const _0x21527b=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x21527b(0x2b4)])return;VisuMZ[_0x21527b(0x2ec)](_0x35e1de,_0x35e1de);const _0x35d235=VisuMZ[_0x21527b(0xd16)](_0x35e1de[_0x21527b(0xc0)]),_0x5cd8ca=_0x35e1de[_0x21527b(0xc41)];for(const _0x2299ad of _0x35d235){if(_0x21527b(0xca9)===_0x21527b(0xca9)){if(!_0x2299ad)continue;_0x2299ad['dragonbonesData']()[_0x21527b(0xa96)]=_0x5cd8ca;}else _0x1e401f[_0x21527b(0x592)]['updateBattleProcess']();}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x8ea),_0x4aaeb9=>{const _0x2f2c1d=_0x12d94d;if(!SceneManager[_0x2f2c1d(0xb92)]())return;if(!Imported[_0x2f2c1d(0x663)])return;VisuMZ[_0x2f2c1d(0x2ec)](_0x4aaeb9,_0x4aaeb9);const _0x2e6e53=BattleManager[_0x2f2c1d(0x5ef)],_0x23630a=_0x4aaeb9[_0x2f2c1d(0xb40)];if(!_0x2e6e53)return;_0x2e6e53['_battleCoreAddedElements']=_0x23630a;}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x514),_0x270a9b=>{const _0x2a4a7a=_0x12d94d;if(!SceneManager[_0x2a4a7a(0xb92)]())return;if(!Imported[_0x2a4a7a(0x663)])return;const _0x1b85cb=BattleManager['_action'];if(!_0x1b85cb)return;_0x1b85cb[_0x2a4a7a(0x3c9)]();}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x980),_0x5e0c6f=>{const _0x3d1491=_0x12d94d;if(!SceneManager[_0x3d1491(0xb92)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ['ConvertParams'](_0x5e0c6f,_0x5e0c6f);const _0xfa3b64=BattleManager[_0x3d1491(0x5ef)],_0x5b07fd=_0x5e0c6f[_0x3d1491(0xb40)];if(!_0xfa3b64)return;_0xfa3b64[_0x3d1491(0x46d)]=_0x5b07fd;}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x48e),_0x2711a3=>{const _0xdc23d1=_0x12d94d;if(!SceneManager[_0xdc23d1(0xb92)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x56b134=BattleManager[_0xdc23d1(0x5ef)];if(!_0x56b134)return;_0x56b134[_0xdc23d1(0x517)]=!![];}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0xa08),_0x456c59=>{const _0x4fb90c=_0x12d94d;VisuMZ[_0x4fb90c(0x6ae)]['ActSeq_Grid_ActionAnimationAtNode'](_0x456c59);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Grid_AddPassiveStatesToNode',_0x5d15fd=>{const _0x31422e=_0x12d94d;VisuMZ[_0x31422e(0x6ae)][_0x31422e(0xb74)](_0x5d15fd);}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x4fc),_0xb61e6c=>{const _0x218acc=_0x12d94d;VisuMZ[_0x218acc(0x6ae)][_0x218acc(0x4fc)](_0xb61e6c);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Grid_AnimationIDAtNode',_0x31c7a0=>{const _0x43e6b0=_0x12d94d;VisuMZ[_0x43e6b0(0x6ae)][_0x43e6b0(0x575)](_0x31c7a0);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x41d),_0x53f4a6=>{const _0x1a4004=_0x12d94d;VisuMZ[_0x1a4004(0x6ae)][_0x1a4004(0x41d)](_0x53f4a6);}),PluginManager['registerCommand'](pluginData['name'],_0x12d94d(0x643),_0x10c77b=>{const _0x4f62d7=_0x12d94d;VisuMZ[_0x4f62d7(0x6ae)][_0x4f62d7(0x643)](_0x10c77b);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xa1b),_0x3e5065=>{const _0x35354f=_0x12d94d;VisuMZ['BattleGridSystem'][_0x35354f(0xa1b)](_0x3e5065);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Grid_MoveTargetsInDirection',_0x215f36=>{const _0x18cacf=_0x12d94d;VisuMZ['BattleGridSystem'][_0x18cacf(0x58f)](_0x215f36);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x7f),_0x4d0014=>{const _0x11f56f=_0x12d94d;VisuMZ[_0x11f56f(0x6ae)][_0x11f56f(0x7f)](_0x4d0014);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x35c),_0x438dc3=>{const _0x40e6e4=_0x12d94d;VisuMZ[_0x40e6e4(0x6ae)][_0x40e6e4(0x35c)](_0x438dc3);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xbe7),_0xf1e7bb=>{const _0x33054d=_0x12d94d;VisuMZ[_0x33054d(0x6ae)][_0x33054d(0xbe7)](_0xf1e7bb);}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],'ActSeq_Grid_RemoveTriggerFromNode',_0x4ea69e=>{const _0x5a6b5d=_0x12d94d;VisuMZ[_0x5a6b5d(0x6ae)][_0x5a6b5d(0x948)](_0x4ea69e);}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x533),_0x5722a6=>{const _0x169346=_0x12d94d;VisuMZ[_0x169346(0x6ae)]['ActSeq_Grid_TeleportToNode'](_0x5722a6);}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x827),_0x118f50=>{const _0x2d1865=_0x12d94d;VisuMZ[_0x2d1865(0x6ae)][_0x2d1865(0x827)](_0x118f50);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x34f),_0x359b58=>{const _0x44070b=_0x12d94d;if(!Imported[_0x44070b(0x4d5)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x44070b(0x2ec)](_0x359b58,_0x359b58);const _0x1d091f=VisuMZ[_0x44070b(0xd16)](_0x359b58[_0x44070b(0xc0)]);for(const _0x4e4578 of _0x1d091f){if(!_0x4e4578)continue;_0x4e4578[_0x44070b(0x2de)](_0x44070b(0xa00)),_0x4e4578[_0x44070b(0x2de)](_0x44070b(0xa61)),_0x4e4578[_0x44070b(0x2de)]('tv'),_0x4e4578['clearHorrorEffects']();}$gamePlayer[_0x44070b(0x498)]();}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xb5),_0x421ff2=>{const _0x26381d=_0x12d94d;if(!Imported[_0x26381d(0x4d5)])return;if(!SceneManager[_0x26381d(0xb92)]())return;VisuMZ['ConvertParams'](_0x421ff2,_0x421ff2);const _0x338105=VisuMZ[_0x26381d(0xd16)](_0x421ff2[_0x26381d(0xc0)]),_0x334439='glitch';_0x421ff2[_0x26381d(0x555)]=Math[_0x26381d(0xbeb)](_0x421ff2[_0x26381d(0xc6f)]/0x2),_0x421ff2[_0x26381d(0x2f9)]=_0x421ff2['slices'],_0x421ff2[_0x26381d(0xc28)]=!![];for(const _0x3d47d4 of _0x338105){if(_0x26381d(0xfc)===_0x26381d(0xba7))return this[_0x26381d(0x596)][_0x26381d(0xa3a)]();else{if(!_0x3d47d4)continue;_0x3d47d4[_0x26381d(0x6c8)](_0x334439,_0x421ff2);}}$gamePlayer['refresh']();}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xae2),_0x36ee75=>{const _0x372018=_0x12d94d;if(!Imported[_0x372018(0x4d5)])return;if(!SceneManager[_0x372018(0xb92)]())return;VisuMZ[_0x372018(0x2ec)](_0x36ee75,_0x36ee75);const _0x582f27=VisuMZ[_0x372018(0xd16)](_0x36ee75[_0x372018(0xc0)]);for(const _0x2ae0c7 of _0x582f27){if(_0x372018(0xaae)!==_0x372018(0xaae))this[_0x372018(0x3e4)](_0x372018(0xb01));else{if(!_0x2ae0c7)continue;_0x2ae0c7['removeHorrorEffect'](_0x372018(0xa61));}}$gamePlayer[_0x372018(0x498)]();}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x870),_0xc5dbe4=>{const _0x225f87=_0x12d94d;if(!Imported[_0x225f87(0x4d5)])return;if(!SceneManager[_0x225f87(0xb92)]())return;VisuMZ[_0x225f87(0x2ec)](_0xc5dbe4,_0xc5dbe4);const _0x2f8e77=VisuMZ['CreateActionSequenceTargets'](_0xc5dbe4[_0x225f87(0xc0)]),_0x4777d1=_0x225f87(0xa00);for(const _0x4f7cb9 of _0x2f8e77){if(_0x225f87(0x8a4)===_0x225f87(0x191)){const _0x48d8fe=this[_0x225f87(0xac6)][_0x225f87(0x63d)]();if(_0x48d8fe){const _0x262787=this[_0x225f87(0x185)](_0x225f87(0xc70),_0x48d8fe['id']);this['select'](_0x262787||0x0);}}else{if(!_0x4f7cb9)continue;_0x4f7cb9[_0x225f87(0x6c8)](_0x4777d1,_0xc5dbe4);}}$gamePlayer[_0x225f87(0x498)]();}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x40b),_0x20578b=>{const _0x40defb=_0x12d94d;if(!Imported[_0x40defb(0x4d5)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x20578b,_0x20578b);const _0x67893e=VisuMZ[_0x40defb(0xd16)](_0x20578b[_0x40defb(0xc0)]);for(const _0x656a56 of _0x67893e){if(_0x40defb(0xbdb)===_0x40defb(0xbdb)){if(!_0x656a56)continue;_0x656a56[_0x40defb(0x2de)](_0x40defb(0xa00));}else this['isAnimationShownOnBattlePortrait'](_0x172e9b)?(this['battleStatusWindowAnimationContainer']()[_0x40defb(0xa26)](_0x3fd13b),_0x4680dc[_0x40defb(0x5b2)]=!![]):(this[_0x40defb(0x45a)][_0x40defb(0xa26)](_0x4fa6c9),_0x2c26b9[_0x40defb(0x36c)]&&(this['_animationContainer']['x']=this[_0x40defb(0x70a)]['x'],this[_0x40defb(0x45a)]['y']=this['_effectsContainer']['y'])),this[_0x40defb(0x99f)]['push'](_0x57f9bd);}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x1e2),_0x5692da=>{const _0x3b228e=_0x12d94d;if(!Imported[_0x3b228e(0x4d5)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3b228e(0x2ec)](_0x5692da,_0x5692da);const _0x1052a7=VisuMZ[_0x3b228e(0xd16)](_0x5692da[_0x3b228e(0xc0)]),_0x4934d2='tv';for(const _0x31998f of _0x1052a7){if(!_0x31998f)continue;_0x31998f[_0x3b228e(0x6c8)](_0x4934d2,_0x5692da);}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x538),_0x431200=>{const _0x1ed9cf=_0x12d94d;if(!Imported[_0x1ed9cf(0x4d5)])return;if(!SceneManager[_0x1ed9cf(0xb92)]())return;VisuMZ['ConvertParams'](_0x431200,_0x431200);const _0x45dae6=VisuMZ[_0x1ed9cf(0xd16)](_0x431200[_0x1ed9cf(0xc0)]);for(const _0x5b953b of _0x45dae6){if(!_0x5b953b)continue;_0x5b953b[_0x1ed9cf(0x2de)]('tv');}$gamePlayer['refresh']();}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xa99),_0x3de07a=>{const _0x541c52=_0x12d94d;if(!Imported[_0x541c52(0x3fa)])return;const _0x5470eb=SceneManager[_0x541c52(0x592)][_0x541c52(0x372)];if(!_0x5470eb)return;if(VisuMZ[_0x541c52(0x8c4)][_0x541c52(0xa0d)]<=1.04){alert(_0x541c52(0x5cf)),SceneManager['exit']();return;}VisuMZ[_0x541c52(0x2ec)](_0x3de07a,_0x3de07a);const _0x5bc657=_0x3de07a['Enable'];_0x5470eb[_0x541c52(0x1e9)](_0x5bc657);}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x421),_0x295c94=>{const _0x55c033=_0x12d94d;if(!SceneManager[_0x55c033(0xb92)]())return;if(!Imported[_0x55c033(0x3fa)])return;const _0x5204c7=SceneManager[_0x55c033(0x592)][_0x55c033(0x372)];if(!_0x5204c7)return;VisuMZ['ConvertParams'](_0x295c94,_0x295c94);const _0xb1b5e1=_0x295c94[_0x55c033(0x12d)]||0x1,_0x541ab7=_0x295c94[_0x55c033(0x227)]||0x1,_0x23f9d0=_0x295c94[_0x55c033(0x7fd)]||_0x55c033(0x148);_0x5204c7[_0x55c033(0x19d)](_0xb1b5e1,_0x541ab7,_0x23f9d0);}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0xc0a),_0x11169e=>{const _0x68f843=_0x12d94d;if(!Imported[_0x68f843(0x3fa)])return;const _0x401b15=SceneManager[_0x68f843(0x592)][_0x68f843(0x372)];if(!_0x401b15)return;if(VisuMZ[_0x68f843(0x8c4)]['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x11169e,_0x11169e);const _0x4010d4=_0x11169e[_0x68f843(0x8cf)];_0x401b15[_0x68f843(0xb00)](_0x4010d4);}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x743),_0x2cb01c=>{const _0x1de515=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1de515(0x3fa)])return;const _0x2fd799=SceneManager['_scene'][_0x1de515(0x372)];if(!_0x2fd799)return;VisuMZ[_0x1de515(0x2ec)](_0x2cb01c,_0x2cb01c);const _0x10b1b8=Number(_0x2cb01c['Angle'])||0x0,_0x4d4d7e=Number(_0x2cb01c[_0x1de515(0x611)]),_0x49293d=_0x2cb01c[_0x1de515(0x227)]||0x1,_0x41f04a=_0x2cb01c[_0x1de515(0x7fd)]||'Linear';_0x2fd799[_0x1de515(0x38f)](_0x10b1b8,_0x4d4d7e,_0x49293d,_0x41f04a);}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x6a2),_0x217830=>{const _0x5f248e=_0x12d94d;if(!SceneManager[_0x5f248e(0xb92)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3e0932=SceneManager[_0x5f248e(0x592)]['_spriteset'];if(!_0x3e0932)return;VisuMZ[_0x5f248e(0x2ec)](_0x217830,_0x217830);const _0x55474e=Number(_0x217830[_0x5f248e(0x953)])||0x0,_0x5b0c24=Number(_0x217830['Rate']),_0x43847b=_0x217830['Duration']||0x1,_0x54f777=_0x217830[_0x5f248e(0x7fd)]||_0x5f248e(0x148),_0x37e8f8=VisuMZ[_0x5f248e(0xd16)](_0x217830[_0x5f248e(0xc0)]);for(const _0x4c024f of _0x37e8f8){if('oStsf'===_0x5f248e(0xa11)){if(!_0x4c024f)continue;if(!_0x4c024f['battler']())continue;_0x4c024f[_0x5f248e(0x9b8)]()[_0x5f248e(0x38f)](_0x55474e,_0x5b0c24,_0x43847b,_0x54f777);}else return _0x23d59b[_0x5f248e(0x2ce)][_0x5f248e(0xba3)](this,_0x2265a7);}}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x8e8),_0xec5525=>{const _0xcdeec5=_0x12d94d;if(!SceneManager[_0xcdeec5(0xb92)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0xcdeec5(0x2ec)](_0xec5525,_0xec5525);const _0x2ad2d9={'delay':_0xec5525[_0xcdeec5(0x74a)],'duration':_0xec5525[_0xcdeec5(0x534)],'hue':_0xec5525[_0xcdeec5(0x91d)],'opacityStart':_0xec5525[_0xcdeec5(0x5e8)],'tone':_0xec5525['tone'],'visible':!![]},_0x3bc1cc=VisuMZ['CreateActionSequenceTargets'](_0xec5525[_0xcdeec5(0xc0)]);for(const _0x41acd3 of _0x3bc1cc){if(!_0x41acd3)continue;_0x41acd3[_0xcdeec5(0xb8c)](_0x2ad2d9);}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x3cb),_0x9df2f6=>{const _0x1234d9=_0x12d94d;if(!SceneManager[_0x1234d9(0xb92)]())return;if(!Imported[_0x1234d9(0x3fa)])return;VisuMZ[_0x1234d9(0x2ec)](_0x9df2f6,_0x9df2f6);const _0x20d547=VisuMZ['CreateActionSequenceTargets'](_0x9df2f6[_0x1234d9(0xc0)]);for(const _0x49c3bd of _0x20d547){if(!_0x49c3bd)continue;_0x49c3bd[_0x1234d9(0x6ab)]();}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Impact_Negative',_0x535e09=>{const _0x52e9da=_0x12d94d;if(!Imported[_0x52e9da(0x3fa)])return;const _0x35ad86=SceneManager['_scene'][_0x52e9da(0x372)];if(!_0x35ad86)return;if(VisuMZ[_0x52e9da(0x8c4)][_0x52e9da(0xa0d)]<=1.04){alert(_0x52e9da(0x5cf)),SceneManager[_0x52e9da(0xa82)]();return;}VisuMZ[_0x52e9da(0x2ec)](_0x535e09,_0x535e09);const _0x2f9669=_0x535e09[_0x52e9da(0x8cf)];_0x35ad86[_0x52e9da(0x284)](_0x2f9669);}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],'ActSeq_Impact_Oversaturate',_0x3c87fe=>{const _0x4316c9=_0x12d94d;if(!Imported[_0x4316c9(0x3fa)])return;const _0x1dc142=SceneManager[_0x4316c9(0x592)][_0x4316c9(0x372)];if(!_0x1dc142)return;if(VisuMZ[_0x4316c9(0x8c4)]['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x4316c9(0xa82)]();return;}VisuMZ['ConvertParams'](_0x3c87fe,_0x3c87fe);const _0x200b73=_0x3c87fe[_0x4316c9(0x8cf)];_0x1dc142[_0x4316c9(0x399)](_0x200b73);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x81f),_0x2a1c47=>{const _0x3ae6c2=_0x12d94d;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x13037e=SceneManager[_0x3ae6c2(0x592)][_0x3ae6c2(0x372)];if(!_0x13037e)return;VisuMZ[_0x3ae6c2(0x2ec)](_0x2a1c47,_0x2a1c47);const _0x954d58=_0x2a1c47['X']||0x0,_0x1ba0d9=_0x2a1c47['Y']||0x0,_0x5593c5=_0x2a1c47['Amp']||0x0,_0x34dcf9=_0x2a1c47[_0x3ae6c2(0x8d0)]||0x0,_0x5b4c76=_0x2a1c47[_0x3ae6c2(0x227)]||0x1;_0x13037e[_0x3ae6c2(0x3e2)](_0x954d58,_0x1ba0d9,_0x5593c5,_0x34dcf9,_0x5b4c76);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x750),_0x35d0c8=>{const _0x2bafb8=_0x12d94d;if(!SceneManager[_0x2bafb8(0xb92)]())return;if(!Imported[_0x2bafb8(0x3fa)])return;const _0x24ec8a=SceneManager[_0x2bafb8(0x592)][_0x2bafb8(0x372)];if(!_0x24ec8a)return;VisuMZ['ConvertParams'](_0x35d0c8,_0x35d0c8);const _0x4802a0=VisuMZ[_0x2bafb8(0xd16)](_0x35d0c8['Targets']),_0x1c76ea=_0x35d0c8[_0x2bafb8(0x819)],_0x2af621=_0x35d0c8[_0x2bafb8(0x211)]||0x0,_0x446b92=_0x35d0c8[_0x2bafb8(0x75f)]||0x0,_0x26d6ec=_0x35d0c8['Amp']||0x0,_0x3abb2f=_0x35d0c8['Wave']||0x0,_0x3ad847=_0x35d0c8['Duration']||0x1;for(const _0x2c9c10 of _0x4802a0){if(_0x2bafb8(0xa2b)===_0x2bafb8(0xa2b)){if(!_0x2c9c10)continue;if(!_0x2c9c10[_0x2bafb8(0x9b8)]())continue;const _0x102148=_0x2c9c10['battler']();let _0x726d9e=_0x102148['_baseX'],_0x25a98a=_0x102148[_0x2bafb8(0x59e)];_0x726d9e+=(Graphics[_0x2bafb8(0xa80)]-Graphics['boxWidth'])/0x2,_0x25a98a+=(Graphics[_0x2bafb8(0xd17)]-Graphics[_0x2bafb8(0xf6)])/0x2;if(_0x1c76ea[_0x2bafb8(0x214)](/front/i))'IisLS'==='vCPht'?(_0x403350[_0x2bafb8(0xadf)][_0x2bafb8(0xcfd)][_0x2bafb8(0xba3)](this),this[_0x2bafb8(0x97b)]()):_0x726d9e+=(_0x2c9c10[_0x2bafb8(0x2c3)]()?0x1:-0x1)*_0x102148[_0x2bafb8(0xc6a)]()/0x2;else _0x1c76ea[_0x2bafb8(0x214)](/back/i)&&(_0x726d9e+=(_0x2c9c10[_0x2bafb8(0x2c3)]()?-0x1:0x1)*_0x102148[_0x2bafb8(0xc6a)]()/0x2);if(_0x1c76ea[_0x2bafb8(0x214)](/head/i))_0x25a98a-=_0x102148[_0x2bafb8(0x782)]();else _0x1c76ea['match'](/center/i)&&(_0x2bafb8(0x472)!==_0x2bafb8(0x472)?(this[_0x2bafb8(0x866)]=![],this['_autoBattle']=_0x53bfa5[_0x2bafb8(0x506)],this[_0x2bafb8(0x6e6)]=![],this[_0x2bafb8(0x371)](_0x2bafb8(0x1b5)),_0x59d441[_0x2bafb8(0xadf)][_0x2bafb8(0x858)][_0x2bafb8(0xba3)](this),this[_0x2bafb8(0x371)](_0x2bafb8(0xa33))):_0x25a98a-=_0x102148[_0x2bafb8(0x782)]()/0x2);_0x726d9e+=_0x2af621,_0x25a98a+=_0x446b92,_0x24ec8a[_0x2bafb8(0x3e2)](_0x726d9e,_0x25a98a,_0x26d6ec,_0x3abb2f,_0x3ad847);}else{const _0x47ccf5=this[_0x2bafb8(0x2c8)](_0x238125);if(_0x47ccf5[_0x2bafb8(0x214)](/\\I\[(\d+)\]/i)){const _0x4b0236=this['itemLineRect'](_0x32211f),_0x544bf7=this[_0x2bafb8(0x467)](_0x47ccf5)[_0x2bafb8(0xa80)];return _0x544bf7<=_0x4b0236[_0x2bafb8(0xa80)]?_0x2bafb8(0xb50):_0x2bafb8(0x4cd);}}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x2cf),_0x2ed417=>{const _0x3d1eb1=_0x12d94d;if(!SceneManager[_0x3d1eb1(0xb92)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4e1e7c=SceneManager[_0x3d1eb1(0x592)]['_spriteset'];if(!_0x4e1e7c)return;VisuMZ[_0x3d1eb1(0x2ec)](_0x2ed417,_0x2ed417);const _0x1fcaeb=VisuMZ[_0x3d1eb1(0xd16)](_0x2ed417['Targets']),_0x34b2d2=_0x2ed417[_0x3d1eb1(0x819)],_0x39ddf2=_0x2ed417[_0x3d1eb1(0x211)]||0x0,_0x317ff8=_0x2ed417[_0x3d1eb1(0x75f)]||0x0,_0x3ab54f=_0x2ed417['Amp']||0x0,_0x180695=_0x2ed417[_0x3d1eb1(0x8d0)]||0x0,_0x3f2c9e=_0x2ed417[_0x3d1eb1(0x227)]||0x1,_0x523e9c=Math[_0x3d1eb1(0x2e3)](..._0x1fcaeb[_0x3d1eb1(0x43b)](_0x52f987=>_0x52f987[_0x3d1eb1(0x9b8)]()[_0x3d1eb1(0x3f5)]-_0x52f987[_0x3d1eb1(0x9b8)]()[_0x3d1eb1(0xc6a)]()/0x2)),_0x15c887=Math[_0x3d1eb1(0x660)](..._0x1fcaeb[_0x3d1eb1(0x43b)](_0x14e694=>_0x14e694[_0x3d1eb1(0x9b8)]()['_baseX']+_0x14e694[_0x3d1eb1(0x9b8)]()['mainSpriteWidth']()/0x2)),_0x234af8=Math[_0x3d1eb1(0x2e3)](..._0x1fcaeb[_0x3d1eb1(0x43b)](_0x1d7830=>_0x1d7830['battler']()[_0x3d1eb1(0x59e)]-_0x1d7830[_0x3d1eb1(0x9b8)]()[_0x3d1eb1(0x782)]())),_0x224f3a=Math['max'](..._0x1fcaeb[_0x3d1eb1(0x43b)](_0x5565cb=>_0x5565cb['battler']()[_0x3d1eb1(0x59e)])),_0x2a2fc0=_0x1fcaeb[_0x3d1eb1(0xd0e)](_0x3c49d3=>_0x3c49d3[_0x3d1eb1(0xc83)]())['length'],_0x55030e=_0x1fcaeb[_0x3d1eb1(0xd0e)](_0x275cad=>_0x275cad[_0x3d1eb1(0x2c3)]())[_0x3d1eb1(0x29c)];let _0x594ff9=0x0,_0x1fd3a2=0x0;if(_0x34b2d2[_0x3d1eb1(0x214)](/front/i))_0x594ff9=_0x2a2fc0>=_0x55030e?_0x523e9c:_0x15c887;else{if(_0x34b2d2[_0x3d1eb1(0x214)](/middle/i))_0x594ff9=(_0x523e9c+_0x15c887)/0x2,melee=-0x1;else _0x34b2d2[_0x3d1eb1(0x214)](/back/i)&&(_0x3d1eb1(0x9d8)===_0x3d1eb1(0x1dd)?this[_0x3d1eb1(0x5a9)](_0x3145d6,_0x49f4db,_0x587d87):_0x594ff9=_0x2a2fc0>=_0x55030e?_0x15c887:_0x523e9c);}if(_0x34b2d2[_0x3d1eb1(0x214)](/head/i))_0x1fd3a2=_0x234af8;else{if(_0x34b2d2[_0x3d1eb1(0x214)](/center/i)){if(_0x3d1eb1(0x317)===_0x3d1eb1(0x4d4)){const _0x10e2b8=this[_0x3d1eb1(0x78b)][_0x3d1eb1(0xd21)];this[_0x3d1eb1(0x527)]=_0x7564a3['MOTIONS'][_0x10e2b8[_0x3d1eb1(0xbc6)]],this[_0x3d1eb1(0x800)]=_0x10e2b8[_0x3d1eb1(0x236)];const _0x44b64b=this[_0x3d1eb1(0x6a9)];_0x44b64b[_0x3d1eb1(0x91f)](_0x10e2b8[_0x3d1eb1(0x5cd)],_0x10e2b8[_0x3d1eb1(0x236)]),this['adjustWeaponSpriteOffset']();}else _0x1fd3a2=(_0x234af8+_0x224f3a)/0x2;}else{if(_0x34b2d2[_0x3d1eb1(0x214)](/base/i)){if('trFEh'!==_0x3d1eb1(0x762))return _0x4769d7[_0x3d1eb1(0x4e5)];else _0x1fd3a2=_0x224f3a;}}}_0x594ff9+=(Graphics['width']-Graphics[_0x3d1eb1(0x807)])/0x2,_0x1fd3a2+=(Graphics[_0x3d1eb1(0xd17)]-Graphics[_0x3d1eb1(0xf6)])/0x2,_0x594ff9+=_0x39ddf2,_0x1fd3a2+=_0x317ff8,_0x4e1e7c[_0x3d1eb1(0x3e2)](_0x594ff9,_0x1fd3a2,_0x3ab54f,_0x180695,_0x3f2c9e);}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0xc23),_0x383b53=>{const _0x4c3fee=_0x12d94d;if(!Imported[_0x4c3fee(0x3fa)])return;const _0x48b9c7=SceneManager[_0x4c3fee(0x592)][_0x4c3fee(0x372)];if(!_0x48b9c7)return;if(VisuMZ[_0x4c3fee(0x8c4)]['version']<=1.04){alert(_0x4c3fee(0x5cf)),SceneManager[_0x4c3fee(0xa82)]();return;}VisuMZ[_0x4c3fee(0x2ec)](_0x383b53,_0x383b53);const _0x32c288=$gameTemp['getLastPluginCommandInterpreter'](),_0x520984=Math[_0x4c3fee(0x660)](0.01,_0x383b53[_0x4c3fee(0x124)]);$gameTemp[_0x4c3fee(0x823)](_0x520984,_0x32c288);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xb51),_0x2cf78f=>{const _0x34276d=_0x12d94d;if(!Imported[_0x34276d(0x3fa)])return;const _0x2f273e=SceneManager[_0x34276d(0x592)][_0x34276d(0x372)];if(!_0x2f273e)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){alert(_0x34276d(0x5cf)),SceneManager[_0x34276d(0xa82)]();return;}VisuMZ['ConvertParams'](_0x2cf78f,_0x2cf78f);const _0x49e49a=$gameTemp[_0x34276d(0x664)](),_0x5db5d0=_0x2cf78f['ms']||0x1;VisuMZ[_0x34276d(0x8c4)]['freezeTime'](_0x5db5d0,_0x49e49a);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Impact_ZoomBlurPoint',_0x294dc2=>{const _0x3a058a=_0x12d94d;if(!Imported[_0x3a058a(0x3fa)])return;const _0x3bb6c7=SceneManager[_0x3a058a(0x592)][_0x3a058a(0x372)];if(!_0x3bb6c7)return;VisuMZ[_0x3a058a(0x2ec)](_0x294dc2,_0x294dc2);const _0x44b3fe=_0x294dc2['X']||0x0,_0x45d2e4=_0x294dc2['Y']||0x0,_0x5a5444=_0x294dc2[_0x3a058a(0x8f7)]||0x0,_0x392b82=_0x294dc2[_0x3a058a(0x128)]||0x0,_0x1f5272=_0x294dc2[_0x3a058a(0x227)]||0x1,_0x31d15b=_0x294dc2[_0x3a058a(0x7fd)]||_0x3a058a(0x148);_0x3bb6c7[_0x3a058a(0x4e8)](_0x5a5444,_0x44b3fe,_0x45d2e4,_0x392b82,_0x1f5272,_0x31d15b);}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x86e),_0x24c701=>{const _0x3f3146=_0x12d94d;if(!Imported[_0x3f3146(0x3fa)])return;const _0x51ff18=SceneManager[_0x3f3146(0x592)][_0x3f3146(0x372)];if(!_0x51ff18)return;VisuMZ[_0x3f3146(0x2ec)](_0x24c701,_0x24c701);const _0x315050=VisuMZ[_0x3f3146(0xd16)](_0x24c701[_0x3f3146(0xc0)]),_0x317bae=_0x24c701['TargetLocation'],_0x569812=_0x24c701[_0x3f3146(0x211)]||0x0,_0x1af3e3=_0x24c701[_0x3f3146(0x75f)]||0x0,_0x223fda=_0x24c701[_0x3f3146(0x8f7)]||0x0,_0x5e393e=_0x24c701[_0x3f3146(0x128)]||0x0,_0x264a0c=_0x24c701[_0x3f3146(0x227)]||0x1,_0x214454=_0x24c701[_0x3f3146(0x7fd)]||'Linear',_0x4a0a85=Math[_0x3f3146(0x2e3)](..._0x315050[_0x3f3146(0x43b)](_0x2bff9e=>_0x2bff9e[_0x3f3146(0x9b8)]()[_0x3f3146(0x3f5)]-_0x2bff9e[_0x3f3146(0x9b8)]()[_0x3f3146(0xc6a)]()/0x2)),_0x579164=Math[_0x3f3146(0x660)](..._0x315050[_0x3f3146(0x43b)](_0x54339b=>_0x54339b[_0x3f3146(0x9b8)]()[_0x3f3146(0x3f5)]+_0x54339b['battler']()[_0x3f3146(0xc6a)]()/0x2)),_0x3b8de7=Math[_0x3f3146(0x2e3)](..._0x315050[_0x3f3146(0x43b)](_0x1ed3c9=>_0x1ed3c9['battler']()[_0x3f3146(0x59e)]-_0x1ed3c9[_0x3f3146(0x9b8)]()[_0x3f3146(0x782)]())),_0x45944e=Math['max'](..._0x315050[_0x3f3146(0x43b)](_0x3d72ad=>_0x3d72ad['battler']()[_0x3f3146(0x59e)])),_0x530f65=_0x315050[_0x3f3146(0xd0e)](_0xa5dac1=>_0xa5dac1[_0x3f3146(0xc83)]())[_0x3f3146(0x29c)],_0x3b1426=_0x315050[_0x3f3146(0xd0e)](_0x354247=>_0x354247[_0x3f3146(0x2c3)]())[_0x3f3146(0x29c)];let _0x298125=0x0,_0x4a4df2=0x0;if(_0x317bae['match'](/front/i)){if('izCCd'==='izCCd')_0x298125=_0x530f65>=_0x3b1426?_0x4a0a85:_0x579164;else{let _0x4da0e9=0x0;if(this[_0x3f3146(0x67b)]&&this[_0x3f3146(0xc50)]!==_0x626236){const _0x19cf15=this[_0x3f3146(0x67b)][_0x3f3146(0xc3b)]['y'];_0x4da0e9-=(_0x19cf15-0x1)*this[_0x3f3146(0xd17)];}return _0x4da0e9;}}else{if(_0x317bae[_0x3f3146(0x214)](/middle/i)){if('sWkZV'===_0x3f3146(0x1c9)){if(!_0x49c1ec[_0x3f3146(0xb92)]())return;if(!_0x4cb7fd['VisuMZ_2_BattleSystemPTB'])return;if(!_0x3c5d1e[_0x3f3146(0x2ca)]())return;_0x657fac[_0x3f3146(0x2ec)](_0x3fc0bf,_0x298515);const _0x2b7ad2=_0x5c8f1b[_0x3f3146(0xa37)][_0x3f3146(0x73c)]();let _0x30a08e=_0x4eb5a7[_0x3f3146(0x6e1)],_0x2e130c=_0x124f7c[_0x3f3146(0x3af)];_0x2b7ad2[_0x3f3146(0x867)](_0x30a08e),_0x2b7ad2[_0x3f3146(0x77d)](_0x2e130c);}else _0x298125=(_0x4a0a85+_0x579164)/0x2,melee=-0x1;}else{if(_0x317bae[_0x3f3146(0x214)](/back/i)){if(_0x3f3146(0x863)!==_0x3f3146(0x36e))_0x298125=_0x530f65>=_0x3b1426?_0x579164:_0x4a0a85;else{const _0x548c5a=this['weapons']();_0x5b3b4b=_0x548c5a[_0x28e207]?_0x548c5a[_0xf5e9c4][_0x3f3146(0xa58)]:0x0;}}}}if(_0x317bae[_0x3f3146(0x214)](/head/i))_0x3f3146(0x79e)===_0x3f3146(0x79e)?_0x4a4df2=_0x3b8de7:_0x1b8128[_0x3f3146(0x2d3)][_0x3f3146(0xa0d)]<1.11&&(_0x8e43c4(_0x535d0c['format'](_0x3f3146(0x1b1))),_0x1d8cca[_0x3f3146(0xa82)]());else{if(_0x317bae[_0x3f3146(0x214)](/center/i))_0x4a4df2=(_0x3b8de7+_0x45944e)/0x2;else{if(_0x317bae['match'](/base/i)){if(_0x3f3146(0x83a)!=='FonyD')_0x4a4df2=_0x45944e;else{if(!this[_0x3f3146(0x55b)]())return;const _0x13453a=this[_0x3f3146(0x86b)](),_0x121dd8=_0x579cc1['BattleCore']['Settings']['PartyCmd'][_0x3f3146(0x63f)],_0x29f9c9=_0x13453a===_0x3f3146(0x1e6)?_0x473b6c[_0x3f3146(0xb7e)]:_0x3f3146(0x3ae)[_0x3f3146(0x3d0)](_0x121dd8,_0x1978d4[_0x3f3146(0xb7e)]),_0x2669ab=this[_0x3f3146(0x499)]();this[_0x3f3146(0xb0a)](_0x29f9c9,'options',_0x2669ab);}}}}_0x298125+=(Graphics['width']-Graphics[_0x3f3146(0x807)])/0x2,_0x4a4df2+=(Graphics[_0x3f3146(0xd17)]-Graphics['boxHeight'])/0x2,_0x298125+=_0x569812,_0x4a4df2+=_0x1af3e3,_0x51ff18['setupZoomBlurImpactFilter'](_0x223fda,_0x298125,_0x4a4df2,_0x5e393e,_0x264a0c,_0x214454);}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x8da),_0x223d55=>{const _0x2f53dc=_0x12d94d;if(!Imported[_0x2f53dc(0x3fa)])return;const _0x58d1bb=SceneManager[_0x2f53dc(0x592)][_0x2f53dc(0x372)];if(!_0x58d1bb)return;if(VisuMZ[_0x2f53dc(0x8c4)][_0x2f53dc(0xa0d)]<=1.05){if(_0x2f53dc(0x4ad)==='ssLDJ'){const _0x58a185=_0x52fa4d(_0x15e88a['$1']);return[_0x1b849d[_0x2f53dc(0x5b8)]()[_0x58a185]];}else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x2f53dc(0xa82)]();return;}}VisuMZ['ConvertParams'](_0x223d55,_0x223d55);const _0x265282=VisuMZ[_0x2f53dc(0xd16)](_0x223d55[_0x2f53dc(0xc0)]),_0x27e07c={'filename':_0x223d55[_0x2f53dc(0xcb2)],'horzCells':_0x223d55[_0x2f53dc(0x20d)]||0x1,'vertCells':_0x223d55['vertCells']||0x1,'frameDelay':_0x223d55[_0x2f53dc(0x308)]||0x1,'smooth':_0x223d55['smooth']||![],'anchorX':_0x223d55['anchorX']||0x0,'anchorY':_0x223d55[_0x2f53dc(0x4c6)]||0x0,'offsetX':_0x223d55['offsetX']||0x0,'offsetY':_0x223d55[_0x2f53dc(0x5c3)]||0x0};for(const _0x385257 of _0x265282){if(!_0x385257)continue;if(!_0x385257[_0x2f53dc(0x9b8)]())continue;_0x385257[_0x2f53dc(0x9b8)]()[_0x2f53dc(0xc80)](_0x27e07c);}const _0x5e21f2=$gameTemp[_0x2f53dc(0x664)]();if(_0x5e21f2){if('wrXPu'===_0x2f53dc(0x4b4))_0x5e21f2[_0x2f53dc(0xb30)](_0x2f53dc(0xbe2));else{const _0x2b1b3e=_0x9ad956[_0x2f53dc(0xadf)][_0x2f53dc(0xb08)]['BattlebackScale'];if(_0x2b1b3e&&_0x2b1b3e[_0x2f53dc(0x2e5)])return _0x2b1b3e[_0x2f53dc(0x2e5)][_0x2f53dc(0xba3)](this);this[_0x2f53dc(0xa80)]=_0x13e388['width'],this[_0x2f53dc(0xd17)]=_0x305cbc[_0x2f53dc(0xd17)];const _0x50b48d=_0x32092c[_0x2f53dc(0x660)](0x1,this[_0x2f53dc(0xa80)]/this[_0x2f53dc(0x222)][_0x2f53dc(0xa80)]),_0x102bfc=_0x136aa5[_0x2f53dc(0x660)](0x1,this[_0x2f53dc(0xd17)]/this['bitmap'][_0x2f53dc(0xd17)]),_0x465dfe=_0x4a47e4['max'](_0x50b48d,_0x102bfc);this[_0x2f53dc(0xc3b)]['x']=_0x465dfe,this[_0x2f53dc(0xc3b)]['y']=_0x465dfe,this['x']=(_0x4d5db6[_0x2f53dc(0xa80)]-this[_0x2f53dc(0xa80)])/0x2,this['y']=_0x146b19['height']-this['height'];}}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0xc9),_0x4b0d52=>{const _0x20a82c=_0x12d94d;if(!Imported[_0x20a82c(0x3fa)])return;const _0x70bf90=SceneManager[_0x20a82c(0x592)][_0x20a82c(0x372)];if(!_0x70bf90)return;if(VisuMZ[_0x20a82c(0x8c4)][_0x20a82c(0xa0d)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x20a82c(0xa82)]();return;}VisuMZ[_0x20a82c(0x2ec)](_0x4b0d52,_0x4b0d52);const _0x2f3efe=VisuMZ[_0x20a82c(0xd16)](_0x4b0d52['Targets']);for(const _0x558020 of _0x2f3efe){if(_0x20a82c(0x3b9)!==_0x20a82c(0x75b)){if(!_0x558020)continue;if(!_0x558020[_0x20a82c(0x9b8)]())continue;_0x558020[_0x20a82c(0x9b8)]()[_0x20a82c(0x5ea)]();}else return this[_0x20a82c(0x17b)]||0x0;}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x905),_0x2a47e7=>{const _0x3a8760=_0x12d94d;if(!Imported[_0x3a8760(0x3fa)])return;const _0x6f3039=SceneManager['_scene']['_spriteset'];if(!_0x6f3039)return;if(VisuMZ[_0x3a8760(0x8c4)][_0x3a8760(0xa0d)]<=1.05){if(_0x3a8760(0x4ed)!==_0x3a8760(0x86)){alert(_0x3a8760(0x5cf)),SceneManager['exit']();return;}else return!![];}VisuMZ[_0x3a8760(0x2ec)](_0x2a47e7,_0x2a47e7);const _0x185ff3=VisuMZ[_0x3a8760(0xd16)](_0x2a47e7['Targets']),_0x458cbb=_0x2a47e7[_0x3a8760(0x531)];for(const _0x4635f9 of _0x185ff3){if(_0x3a8760(0x3c4)==='sWHuZ'){if(!_0x305a81[_0x3a8760(0xba9)](_0x1e3cf2))return!![];}else{if(!_0x4635f9)continue;if(!_0x4635f9[_0x3a8760(0x9b8)]())continue;_0x4635f9[_0x3a8760(0x9b8)]()[_0x3a8760(0x649)](_0x458cbb);}}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x157),_0xc7ccc9=>{const _0x2d624f=_0x12d94d;if(!SceneManager['isSceneBattle']())return;const _0x3fc37c=$gameTemp[_0x2d624f(0x664)]();if(!_0x3fc37c)return;_0x3fc37c['setWaitMode']('battleInjectAni');}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x72),_0x2ba175=>{const _0x403342=_0x12d94d;if(!SceneManager[_0x403342(0xb92)]())return;VisuMZ[_0x403342(0x2ec)](_0x2ba175,_0x2ba175);const _0xac0564=$gameTemp['getLastPluginCommandInterpreter'](),_0x2ddc4e=BattleManager[_0x403342(0x5ef)],_0x2f5a46=BattleManager[_0x403342(0xa37)],_0x3284a7=BattleManager[_0x403342(0xf5)];if(!_0xac0564||!_0x2ddc4e||!_0x2f5a46)return;if(!_0x2ddc4e[_0x403342(0xc7)]())return;const _0x39a509=VisuMZ[_0x403342(0xd16)](_0x2ba175[_0x403342(0xc0)]);for(const _0x4b93f9 of _0x39a509){if(!_0x4b93f9)continue;_0x3284a7[_0x403342(0xbce)]('actionEffect',_0x2f5a46,_0x4b93f9);}_0xac0564['setWaitMode'](_0x403342(0x54d));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x930),_0x34af83=>{const _0x3a7087=_0x12d94d;if(!SceneManager[_0x3a7087(0xb92)]())return;if(!Imported['VisuMZ_3_ActiveChainSkills'])return;$gameTemp[_0x3a7087(0x5ad)]=!![];}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x917),_0x25557c=>{const _0x250c82=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x250c82(0x2ec)](_0x25557c,_0x25557c);const _0x359b60=[_0x250c82(0xae4),_0x250c82(0x6a0),_0x250c82(0x224),'DEF',_0x250c82(0x376),'MDF',_0x250c82(0xc1f),'LUK'],_0x4f8cd4=_0x25557c[_0x250c82(0x69f)],_0x8bd029=_0x25557c[_0x250c82(0x64d)],_0x11838a=_0x25557c[_0x250c82(0x13a)],_0x39dd14=VisuMZ[_0x250c82(0xd16)](_0x25557c[_0x250c82(0xc0)]);for(const _0x1b815f of _0x39dd14){if(!_0x1b815f)continue;for(const _0x5540d1 of _0x4f8cd4){const _0x2edee4=_0x359b60[_0x250c82(0x86f)](_0x5540d1[_0x250c82(0x97e)]()[_0x250c82(0xc39)]());_0x2edee4>=0x0&&_0x2edee4<=0x7&&_0x1b815f[_0x250c82(0xb52)](_0x2edee4,_0x11838a);}for(const _0x3fd1d6 of _0x8bd029){const _0x262c57=_0x359b60[_0x250c82(0x86f)](_0x3fd1d6[_0x250c82(0x97e)]()['trim']());_0x262c57>=0x0&&_0x262c57<=0x7&&_0x1b815f[_0x250c82(0x61b)](_0x262c57,_0x11838a);}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x9e6),_0x5fd153=>{const _0x53ee64=_0x12d94d;if(!SceneManager[_0x53ee64(0xb92)]())return;VisuMZ[_0x53ee64(0x2ec)](_0x5fd153,_0x5fd153);const _0x23e285=_0x5fd153[_0x53ee64(0x263)],_0x135e7e=VisuMZ['CreateActionSequenceTargets'](_0x5fd153['Targets']);for(const _0x3f8eb0 of _0x135e7e){if(!_0x3f8eb0)continue;for(const _0x5e48b6 of _0x23e285){if(_0x53ee64(0x8c)==='lONeb')_0x3f8eb0[_0x53ee64(0x8d)](_0x5e48b6);else{let _0x3efad6=_0x33ddc9(_0x480615['$1']);while(_0x3efad6--){const _0x4ba725=_0x13939c[_0x53ee64(0xbec)](0x2)===0x0?this[_0x53ee64(0x297)]():this['friendsUnit']();_0x597903[_0x53ee64(0xbce)](_0x4ba725[_0x53ee64(0xcd8)]());}return this[_0x53ee64(0x7bd)](_0x379750);}}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xcba),_0x53b49b=>{const _0x1a4c8b=_0x12d94d;if(!SceneManager[_0x1a4c8b(0xb92)]())return;VisuMZ[_0x1a4c8b(0x2ec)](_0x53b49b,_0x53b49b);const _0x4a6731=BattleManager[_0x1a4c8b(0x5ef)],_0x28aa3d={'arPenRate':_0x53b49b[_0x1a4c8b(0x9b0)],'arPenFlat':_0x53b49b['ArPenFlat'],'arRedRate':_0x53b49b[_0x1a4c8b(0xb64)],'arRedFlat':_0x53b49b[_0x1a4c8b(0x4f3)]};_0x4a6731[_0x1a4c8b(0x7d5)]=_0x28aa3d;}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x494),_0x4f44cd=>{const _0x38846e=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x38846e(0xac4)])return;VisuMZ[_0x38846e(0x2ec)](_0x4f44cd,_0x4f44cd);const _0x817033=VisuMZ[_0x38846e(0xd16)](_0x4f44cd[_0x38846e(0xc0)]),_0x42f29f=_0x4f44cd[_0x38846e(0x19a)]||0x1;for(const _0x57ef19 of _0x817033){if(!_0x57ef19)continue;if(!_0x57ef19[_0x38846e(0x2c3)]())continue;_0x57ef19[_0x38846e(0x638)](_0x42f29f);}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0xc67),_0x199f92=>{const _0x36a00d=_0x12d94d;if(!SceneManager[_0x36a00d(0xb92)]())return;if(!Imported[_0x36a00d(0x550)])return;if(!BattleManager[_0x36a00d(0x560)]())return;VisuMZ['ConvertParams'](_0x199f92,_0x199f92);const _0x20ac02=VisuMZ[_0x36a00d(0xd16)](_0x199f92[_0x36a00d(0xc0)]),_0x252052=_0x199f92[_0x36a00d(0x7a5)],_0x99ef92=_0x199f92['ChargeRate'],_0x2b3792=_0x199f92[_0x36a00d(0x6e9)];for(const _0x419423 of _0x20ac02){if(_0x36a00d(0x904)!==_0x36a00d(0x765)){if(!_0x419423)continue;if(_0x419423[_0x36a00d(0xa40)]())_0x419423['changeAtbChargeTime'](_0x252052);else{if(_0x419423[_0x36a00d(0x572)]()){if(_0x36a00d(0x94)!=='wewTC'){_0x419423['changeAtbCastTime'](_0x99ef92);if(_0x2b3792)_0x419423[_0x36a00d(0x8ff)]();}else{if(!_0x2f26c7[_0x36a00d(0x3fa)])return;const _0x32370f=_0x2c5e47[_0x36a00d(0x592)][_0x36a00d(0x372)];if(!_0x32370f)return;if(_0x428b33[_0x36a00d(0x8c4)][_0x36a00d(0xa0d)]<=1.04){_0x1983e0(_0x36a00d(0x5cf)),_0xe6e156[_0x36a00d(0xa82)]();return;}_0x52b60b['ConvertParams'](_0x3355c3,_0x8329bd);const _0x4f19cb=_0x3ce1b5['getLastPluginCommandInterpreter'](),_0x22bdc6=_0x1117f0['ms']||0x1;_0xfc5c1c[_0x36a00d(0x8c4)][_0x36a00d(0x54e)](_0x22bdc6,_0x4f19cb);}}}}else{const _0xba0ec1=this[_0x36a00d(0xc7)]()[_0x36a00d(0xbad)];return _0xba0ec1['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x878),_0x5e7692=>{const _0x3df509=_0x12d94d;if(!SceneManager[_0x3df509(0xb92)]())return;if(!Imported[_0x3df509(0x8a3)])return;VisuMZ['ConvertParams'](_0x5e7692,_0x5e7692);const _0x5ad34d=VisuMZ[_0x3df509(0xd16)](_0x5e7692[_0x3df509(0xc0)]),_0x18b4ca=_0x5e7692['BoostPoints'];for(const _0x428fae of _0x5ad34d){if('SiAdw'!=='SiAdw')return _0x5ab697[_0x3df509(0xadf)][_0x3df509(0xb08)][_0x3df509(0xa88)][_0x3df509(0x9bb)];else{if(!_0x428fae)continue;_0x428fae['gainStoredBoostPoints'](_0x18b4ca);}}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x90b),_0x2a3d71=>{const _0x2275e0=_0x12d94d;if(!SceneManager[_0x2275e0(0xb92)]())return;if(!Imported[_0x2275e0(0x8a3)])return;if(!BattleManager[_0x2275e0(0xa37)])return;VisuMZ[_0x2275e0(0x2ec)](_0x2a3d71,_0x2a3d71);const _0x488c85=_0x2a3d71[_0x2275e0(0x512)];$gameVariables[_0x2275e0(0xa1d)](_0x488c85,BattleManager['_subject']['toUseBoostPoints']());}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],'ActSeq_Mechanics_BreakShieldChange',_0x361865=>{const _0xf33374=_0x12d94d;if(!SceneManager[_0xf33374(0xb92)]())return;if(!Imported[_0xf33374(0x6eb)])return;VisuMZ[_0xf33374(0x2ec)](_0x361865,_0x361865);const _0xc15461=VisuMZ[_0xf33374(0xd16)](_0x361865[_0xf33374(0xc0)]),_0x511633=_0x361865[_0xf33374(0x3ce)];for(const _0xd5c76 of _0xc15461){if(!_0xd5c76)continue;if(_0xd5c76[_0xf33374(0xa39)]())continue;if(!_0xd5c76['isAffectedByBreakShield']())continue;_0xd5c76[_0xf33374(0x636)](_0x511633);}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0xbc0),_0x517e13=>{const _0x2c86da=_0x12d94d;if(!SceneManager[_0x2c86da(0xb92)]())return;if(!Imported[_0x2c86da(0x6eb)])return;VisuMZ[_0x2c86da(0x2ec)](_0x517e13,_0x517e13);const _0x87dec0=VisuMZ[_0x2c86da(0xd16)](_0x517e13['Targets']);for(const _0x39f4a4 of _0x87dec0){if(!_0x39f4a4)continue;if(_0x39f4a4[_0x2c86da(0xa39)]())continue;if(!_0x39f4a4[_0x2c86da(0x37f)]())continue;_0x39f4a4[_0x2c86da(0x123)]();}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x3f6),_0x5c7801=>{const _0x2ad026=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2ad026(0x45b)])return;if(!BattleManager[_0x2ad026(0x4f7)]())return;VisuMZ['ConvertParams'](_0x5c7801,_0x5c7801);const _0xab71f9=VisuMZ['CreateActionSequenceTargets'](_0x5c7801[_0x2ad026(0xc0)]),_0x1f4952=_0x5c7801[_0x2ad026(0x42d)];for(const _0x92cb55 of _0xab71f9){if(!_0x92cb55)continue;_0x92cb55['gainBravePoints'](_0x1f4952);}}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0xcb0),_0x3635aa=>{const _0x111efc=_0x12d94d;if(!SceneManager[_0x111efc(0xb92)]())return;VisuMZ[_0x111efc(0x2ec)](_0x3635aa,_0x3635aa);const _0x2cfe62=$gameTemp[_0x111efc(0x664)](),_0x5589d1=BattleManager['_action'],_0x386641=BattleManager[_0x111efc(0xa37)];if(!_0x2cfe62||!_0x5589d1||!_0x386641)return;if(!_0x5589d1[_0x111efc(0xc7)]())return;const _0x266280=VisuMZ[_0x111efc(0xd16)](_0x3635aa['Targets']);for(const _0x1cae64 of _0x266280){if(!_0x1cae64)continue;if(_0x3635aa[_0x111efc(0x753)]){if(_0x111efc(0x6d0)!=='SvlvU')_0x1cae64[_0x111efc(0xc4a)](),_0x1cae64[_0x111efc(0x8d)](_0x1cae64[_0x111efc(0xbbb)]());else return this[_0x111efc(0x7b4)]();}_0x1cae64['isDeathStateAffected']()&&_0x1cae64[_0x111efc(0xa7)]();}_0x2cfe62[_0x111efc(0xb30)]('battleEffect');}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x936),_0x31f4f6=>{const _0x500c00=_0x12d94d;if(!SceneManager[_0x500c00(0xb92)]())return;if(!Imported[_0x500c00(0x483)])return;if(!BattleManager[_0x500c00(0x270)]())return;VisuMZ[_0x500c00(0x2ec)](_0x31f4f6,_0x31f4f6);const _0x277c47=VisuMZ[_0x500c00(0xd16)](_0x31f4f6[_0x500c00(0xc0)]),_0x53a6e5=_0x31f4f6[_0x500c00(0x290)];for(const _0x5f379a of _0x277c47){if('wKSoH'==='HRYwz'){if(_0x3692db[_0x500c00(0x296)]&&_0xe816dc[_0x500c00(0xbbc)]!==_0x54e95b)return _0x2fab3a['uiInputPosition'];else{if(this[_0x500c00(0xbb9)]()===_0x500c00(0xb2d))return![];else{return _0x4f213a[_0x500c00(0x4e9)][_0x500c00(0x37a)][_0x500c00(0xba3)](this);;}}}else{if(!_0x5f379a)continue;_0x5f379a['changeTurnOrderByCTB'](_0x53a6e5);}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Mechanics_CtbSpeed',_0x112d7a=>{const _0xb98f4=_0x12d94d;if(!SceneManager[_0xb98f4(0xb92)]())return;if(!Imported[_0xb98f4(0x483)])return;if(!BattleManager[_0xb98f4(0x270)]())return;VisuMZ['ConvertParams'](_0x112d7a,_0x112d7a);const _0x12f98e=VisuMZ[_0xb98f4(0xd16)](_0x112d7a['Targets']),_0x20dd4b=_0x112d7a[_0xb98f4(0x7a5)],_0x496e0a=_0x112d7a[_0xb98f4(0x7a5)];for(const _0x40b6db of _0x12f98e){if(_0xb98f4(0x67c)===_0xb98f4(0x67c)){if(!_0x40b6db)continue;if(_0x40b6db[_0xb98f4(0x267)]===_0xb98f4(0xc90))_0x40b6db[_0xb98f4(0x1c0)](_0x20dd4b);else _0x40b6db['_tpbState']===_0xb98f4(0xad3)&&_0x40b6db[_0xb98f4(0x6d6)](_0x496e0a);}else{const _0x58964c=_0x5a8f78[_0xb98f4(0xced)](_0x1ec980['x'],_0x386752['y']);if(this['_regionBattleback1']&&this[_0xb98f4(0xbfa)][_0x58964c])return this[_0xb98f4(0xbfa)][_0x58964c];}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Mechanics_CustomDmgFormula',_0x25fc1e=>{const _0x3cf791=_0x12d94d;if(!SceneManager[_0x3cf791(0xb92)]())return;VisuMZ[_0x3cf791(0x2ec)](_0x25fc1e,_0x25fc1e);const _0x3858eb=BattleManager['_action'];if(!_0x3858eb)return;let _0xfef99c=_0x25fc1e[_0x3cf791(0x2ce)];_0x3858eb[_0x3cf791(0xc4e)](_0xfef99c);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Mechanics_DamagePopup',_0x2786d8=>{const _0x1fe3c7=_0x12d94d;if(!SceneManager[_0x1fe3c7(0xb92)]())return;VisuMZ[_0x1fe3c7(0x2ec)](_0x2786d8,_0x2786d8);const _0x11d788=VisuMZ[_0x1fe3c7(0xd16)](_0x2786d8[_0x1fe3c7(0xc0)]);for(const _0x5940a1 of _0x11d788){if('lYhLj'==='lYhLj'){if(!_0x5940a1)continue;if(_0x5940a1[_0x1fe3c7(0x3f1)]())_0x5940a1[_0x1fe3c7(0x466)]();}else _0x515fc1[_0x1fe3c7(0x99b)](_0x1fe3c7(0x79f));}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x39e),_0x10303e=>{const _0x180bde=_0x12d94d;if(!SceneManager[_0x180bde(0xb92)]())return;VisuMZ[_0x180bde(0x2ec)](_0x10303e,_0x10303e);const _0x16487c=$gameTemp[_0x180bde(0x664)](),_0x2dfc24=BattleManager[_0x180bde(0xa37)],_0xe95b03=_0x10303e[_0x180bde(0x21f)];if(!_0x16487c)return;if(!_0x2dfc24)return;_0x2dfc24&&_0x2dfc24[_0x180bde(0xb91)]()&&_0xe95b03['toUpperCase']()[_0x180bde(0xc39)]()!=='UNTITLED'&&_0x16487c[_0x180bde(0xc78)]([_0xe95b03]);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xbef),_0x36acc7=>{const _0x142fa3=_0x12d94d;if(!SceneManager[_0x142fa3(0xb92)]())return;VisuMZ[_0x142fa3(0x2ec)](_0x36acc7,_0x36acc7);const _0x24be3b=$gameTemp[_0x142fa3(0x664)](),_0xbd3654=BattleManager[_0x142fa3(0xf5)];if(!_0x24be3b)return;const _0x3f1cb3=VisuMZ['CreateActionSequenceTargets'](_0x36acc7[_0x142fa3(0x121)]),_0x5ae7a2=VisuMZ['CreateActionSequenceTargets'](_0x36acc7[_0x142fa3(0xc0)]);for(const _0x548e82 of _0x3f1cb3){if(_0x142fa3(0x8fa)!==_0x142fa3(0x8fa))this[_0x142fa3(0x9fa)]()?delete _0x322302['_handlers'][_0x142fa3(0x75c)]:_0x3f0270[_0x142fa3(0xa4c)](_0x142fa3(0x75c),this[_0x142fa3(0x159)][_0x142fa3(0xb99)](this));else for(const _0x559019 of _0x5ae7a2){if(_0x142fa3(0x52b)!=='oiYVK'){if(!_0x559019)continue;const _0x2a4a84=$dataSkills[_0x548e82[_0x142fa3(0x8a2)]()];_0xbd3654[_0x142fa3(0xbce)]('emulateActionEffect',_0x548e82,_0x559019,_0x2a4a84);}else _0x46543e=new _0x550ba3();}}_0x24be3b[_0x142fa3(0xb30)](_0x142fa3(0x54d));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xa8b),_0xf846a2=>{const _0x4d02c7=_0x12d94d;if(!SceneManager[_0x4d02c7(0xb92)]())return;VisuMZ[_0x4d02c7(0x2ec)](_0xf846a2,_0xf846a2);const _0x55053b=$gameTemp[_0x4d02c7(0x664)](),_0x5bce01=BattleManager[_0x4d02c7(0xf5)];if(!_0x55053b)return;const _0x65e73b=VisuMZ[_0x4d02c7(0xd16)](_0xf846a2[_0x4d02c7(0x121)]),_0x1089bb=VisuMZ[_0x4d02c7(0xd16)](_0xf846a2['Targets']);for(const _0x907f56 of _0x65e73b){for(const _0x3c7e9b of _0x1089bb){if(!_0x3c7e9b)continue;const _0x3766b9=$dataSkills[_0x907f56['guardSkillId']()];_0x5bce01[_0x4d02c7(0xbce)]('emulateActionEffect',_0x907f56,_0x3c7e9b,_0x3766b9);}}_0x55053b[_0x4d02c7(0xb30)](_0x4d02c7(0x54d));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xc9a),_0x399bc1=>{const _0x936b91=_0x12d94d;if(!SceneManager[_0x936b91(0xb92)]())return;VisuMZ[_0x936b91(0x2ec)](_0x399bc1,_0x399bc1);const _0x34dd04=$gameTemp[_0x936b91(0x664)](),_0xab53da=BattleManager[_0x936b91(0xf5)],_0x5ae00b=Number(_0x399bc1[_0x936b91(0xbf7)]||0x1),_0x2dab8b=$dataItems[_0x5ae00b];if(!_0x34dd04)return;if(!_0x2dab8b)return;const _0x2bab12=VisuMZ[_0x936b91(0xd16)](_0x399bc1['Users']),_0x399798=VisuMZ[_0x936b91(0xd16)](_0x399bc1[_0x936b91(0xc0)]);for(const _0x3d9a8e of _0x2bab12){for(const _0x1ea2ce of _0x399798){if(_0x936b91(0x21b)==='KonvO'){if(!_0x1ea2ce)continue;_0xab53da[_0x936b91(0xbce)](_0x936b91(0x93c),_0x3d9a8e,_0x1ea2ce,_0x2dab8b);}else _0x1a7a74[_0x936b91(0xadf)]['JS'][_0x353ce2][_0x936b91(0xba3)](this,this,this,_0x493445,0x0);}}_0x34dd04[_0x936b91(0xb30)](_0x936b91(0x54d));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x3bf),_0xf84f42=>{const _0x44129e=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x44129e(0x2ec)](_0xf84f42,_0xf84f42);let _0x36cb63=Number(_0xf84f42[_0x44129e(0xd08)]||0x0);if(_0x36cb63<=0x0){if('nrzlv'===_0x44129e(0x3fc)){const _0x589a92=BattleManager[_0x44129e(0x5ef)];if(_0x589a92&&_0x589a92[_0x44129e(0x226)]())_0x36cb63=_0x589a92[_0x44129e(0xc7)]()['id'];else{if(_0x44129e(0x384)===_0x44129e(0x23e)){let _0x345c8f=_0x3d017f['skillTypes'][_0xfb42e7];if(!_0x345c8f)return;let _0x57af84=_0x345c8f;const _0x42414c=this[_0x44129e(0x86b)]();if(_0x42414c===_0x44129e(0x1e6))_0x57af84=_0x57af84[_0x44129e(0xae8)](/\x1I\[(\d+)\]/gi,''),_0x57af84=_0x57af84[_0x44129e(0xae8)](/\\I\[(\d+)\]/gi,'');else{if(!_0x345c8f[_0x44129e(0x214)](/\\I\[(\d+)\]/i)){const _0x510e54=_0x363f92['VisuMZ_1_SkillsStatesCore']?_0x288e3e[_0x44129e(0x51b)][_0x44129e(0xb08)][_0x44129e(0x961)]:_0x51374c[_0x44129e(0xadf)]['Settings']['ActorCmd'],_0x1ef176=_0x5ea1ab['magicSkills']['includes'](_0x18f1c9),_0x3b5950=_0x1ef176?_0x510e54['IconStypeMagic']:_0x510e54[_0x44129e(0xbc9)];_0x57af84=_0x44129e(0x3ae)[_0x44129e(0x3d0)](_0x3b5950,_0x345c8f);}}this['addCommand'](_0x57af84,_0x44129e(0x7e1),!![],_0x5defc7);}else return;}}else{if(!_0x3ff8fa[_0x44129e(0xb92)]())return;if(!_0x191b10[_0x44129e(0x663)])return;const _0x194e9a=_0x24dd0a[_0x44129e(0x5ef)];if(!_0x194e9a)return;_0x194e9a[_0x44129e(0x517)]=!![];}}const _0x30b016=$dataSkills[_0x36cb63];if(!_0x30b016)return;const _0x16d0f5=VisuMZ[_0x44129e(0xd16)](_0xf84f42['Users']);for(const _0x2bca8a of _0x16d0f5){_0x2bca8a['paySkillCost'](_0x30b016);}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x8c3),_0x228f11=>{const _0x16dacf=_0x12d94d;if(!SceneManager[_0x16dacf(0xb92)]())return;VisuMZ[_0x16dacf(0x2ec)](_0x228f11,_0x228f11);const _0x62b144=$gameTemp[_0x16dacf(0x664)](),_0x5374fe=BattleManager[_0x16dacf(0xf5)],_0x1d8f37=Number(_0x228f11['SkillID']||0x1),_0x2161b6=$dataSkills[_0x1d8f37];if(!_0x62b144)return;if(!_0x2161b6)return;const _0x5a2dfa=VisuMZ[_0x16dacf(0xd16)](_0x228f11[_0x16dacf(0x121)]),_0x4b63df=VisuMZ[_0x16dacf(0xd16)](_0x228f11[_0x16dacf(0xc0)]);for(const _0xbecea6 of _0x5a2dfa){for(const _0x29952d of _0x4b63df){if(_0x16dacf(0x6a5)!==_0x16dacf(0x6a5))_0x197435=_0x565ea7[_0x16dacf(0xadf)][_0x16dacf(0x2a9)][_0x16dacf(0xba3)](this);else{if(!_0x29952d)continue;_0x5374fe[_0x16dacf(0xbce)]('emulateActionEffect',_0xbecea6,_0x29952d,_0x2161b6);}}}_0x62b144[_0x16dacf(0xb30)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x3b4),_0x332943=>{const _0x3342f4=_0x12d94d;if(!SceneManager[_0x3342f4(0xb92)]())return;VisuMZ['ConvertParams'](_0x332943,_0x332943);const _0x59c1bd=VisuMZ[_0x3342f4(0xd16)](_0x332943['Targets']);for(const _0x71d965 of _0x59c1bd){if(!_0x71d965)continue;if(!_0x71d965[_0x3342f4(0x2c3)]())continue;_0x71d965[_0x3342f4(0x691)]();}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x2ef),_0x140eb0=>{const _0x2a539e=_0x12d94d;if(!SceneManager[_0x2a539e(0xb92)]())return;if(!Imported[_0x2a539e(0x248)])return;if(!BattleManager[_0x2a539e(0xd2b)]())return;VisuMZ[_0x2a539e(0x2ec)](_0x140eb0,_0x140eb0);const _0x4269d7=_0x140eb0[_0x2a539e(0x15d)];BattleManager[_0x2a539e(0xa37)]&&BattleManager[_0x2a539e(0xa37)]['friendsUnit']()[_0x2a539e(0x889)](_0x4269d7);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x1f5),_0x4a3455=>{const _0xe6a317=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xe6a317(0xb35)])return;if(!BattleManager[_0xe6a317(0x6b4)]())return;VisuMZ[_0xe6a317(0x2ec)](_0x4a3455,_0x4a3455);const _0x13ef74=_0x4a3455[_0xe6a317(0x15d)];if(BattleManager[_0xe6a317(0xa37)]){if('GzkuN'!==_0xe6a317(0x951))BattleManager[_0xe6a317(0xa37)][_0xe6a317(0x73c)]()[_0xe6a317(0x338)](_0x13ef74);else return;}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x455),_0xbc28ee=>{const _0x5695dd=_0x12d94d;if(!SceneManager[_0x5695dd(0xb92)]())return;VisuMZ[_0x5695dd(0x2ec)](_0xbc28ee,_0xbc28ee);const _0x1f49dd=VisuMZ[_0x5695dd(0xd16)](_0xbc28ee[_0x5695dd(0xc0)]),_0x2a6ac4=_0xbc28ee[_0x5695dd(0xa92)],_0x2ae447=_0xbc28ee['HP_Flat'],_0x30d65e=_0xbc28ee['MP_Rate'],_0x4004d4=_0xbc28ee[_0x5695dd(0x624)],_0x2000ce=_0xbc28ee[_0x5695dd(0x1c8)],_0x577974=_0xbc28ee[_0x5695dd(0x7fe)],_0x43b3c9=_0xbc28ee[_0x5695dd(0x672)];for(const _0x49038c of _0x1f49dd){if(_0x5695dd(0xd4)!=='YiPtY')this[_0x5695dd(0x9a8)]+=0x10;else{if(!_0x49038c)continue;const _0x5d6ee7=_0x49038c['isAlive'](),_0x41f241=Math[_0x5695dd(0x1d0)](_0x2a6ac4*_0x49038c[_0x5695dd(0xcdb)]+_0x2ae447),_0x143f2f=Math[_0x5695dd(0x1d0)](_0x30d65e*_0x49038c[_0x5695dd(0x51d)]+_0x4004d4),_0x49af73=Math[_0x5695dd(0x1d0)](_0x2000ce*_0x49038c[_0x5695dd(0x9f9)]()+_0x577974);if(_0x41f241!==0x0)_0x49038c[_0x5695dd(0xa45)](_0x41f241);if(_0x143f2f!==0x0)_0x49038c[_0x5695dd(0xca6)](_0x143f2f);if(_0x49af73!==0x0)_0x49038c['gainTp'](_0x49af73);if(_0x43b3c9)_0x49038c[_0x5695dd(0x466)]();if(_0x5d6ee7&&_0x49038c['isDead']()){if(_0x5695dd(0x196)===_0x5695dd(0x196))_0x49038c[_0x5695dd(0xa7)]();else{const _0x1dfb3a=_0x2eac40[_0x5695dd(0xb34)](this[_0x5695dd(0x32b)]()['id']);if(_0x1dfb3a[_0x5695dd(0x214)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x34e8ba=_0x265cac['$1']['split'](',')[_0x5695dd(0x43b)](_0x1b0d96=>_0x3f0e2a(_0x1b0d96));this['checkExtendTroopCompatibility'](),this[_0x5695dd(0xe6)](_0x34e8ba);}}}}}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x622),_0x17389d=>{const _0x10ab40=_0x12d94d;if(!SceneManager[_0x10ab40(0xb92)]())return;VisuMZ['ConvertParams'](_0x17389d,_0x17389d);const _0x523fa5=VisuMZ[_0x10ab40(0xd16)](_0x17389d[_0x10ab40(0xc0)]);for(const _0x3e32de of _0x523fa5){if(!_0x3e32de)continue;_0x3e32de[_0x10ab40(0x326)](_0x17389d[_0x10ab40(0xc9f)]);}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Mechanics_Multipliers',_0x425b1f=>{const _0x53b0cb=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x53b0cb(0x2ec)](_0x425b1f,_0x425b1f);const _0x50a888=BattleManager[_0x53b0cb(0x5ef)],_0x47a196={'criticalHitRate':_0x425b1f[_0x53b0cb(0xb3b)],'criticalHitFlat':_0x425b1f[_0x53b0cb(0x5e1)],'criticalDmgRate':_0x425b1f[_0x53b0cb(0x71c)],'criticalDmgFlat':_0x425b1f[_0x53b0cb(0xa9d)],'damageRate':_0x425b1f['DamageRate'],'damageFlat':_0x425b1f[_0x53b0cb(0x30f)],'hitRate':_0x425b1f[_0x53b0cb(0x685)],'hitFlat':_0x425b1f[_0x53b0cb(0x85b)]};_0x50a888['_multipliers']=_0x47a196;}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],'ActSeq_Mechanics_OnceParallel',_0x117ac8=>{const _0x405988=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x405988(0x2ec)](_0x117ac8,_0x117ac8);const _0x2e8642=_0x117ac8[_0x405988(0xcd7)];SceneManager[_0x405988(0x592)][_0x405988(0xa4b)](_0x2e8642);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xb3c),_0x5b7c6f=>{const _0xe62d31=_0x12d94d;if(!SceneManager[_0xe62d31(0xb92)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0xe62d31(0xacf)]())return;VisuMZ[_0xe62d31(0x2ec)](_0x5b7c6f,_0x5b7c6f);const _0xa35926=VisuMZ[_0xe62d31(0xd16)](_0x5b7c6f[_0xe62d31(0xc0)]);for(const _0xa6f68a of _0xa35926){if(!_0xa6f68a)continue;let _0x13005a=_0x5b7c6f[_0xe62d31(0x8bf)],_0x2a55e9=_0x5b7c6f[_0xe62d31(0x7d4)],_0x25a556=_0x5b7c6f[_0xe62d31(0x37d)];if(BattleManager['_actionBattlers'][_0xe62d31(0x511)](_0xa6f68a)){if(_0xe62d31(0x989)==='zXDdN')return _0x27bc3b[_0xe62d31(0xadf)][_0xe62d31(0xb08)][_0xe62d31(0xa50)][_0xe62d31(0x172)]['call'](this);else _0x13005a+=_0x25a556;}else _0x2a55e9+=_0x25a556;BattleManager[_0xe62d31(0x5be)](_0xa6f68a,-_0x13005a,![]),BattleManager[_0xe62d31(0x5be)](_0xa6f68a,-_0x2a55e9,!![]);}}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0xd07),_0x146bcb=>{const _0x5618d6=_0x12d94d;if(!SceneManager[_0x5618d6(0xb92)]())return;if(!Imported[_0x5618d6(0x826)])return;if(!BattleManager[_0x5618d6(0x2ca)]())return;VisuMZ[_0x5618d6(0x2ec)](_0x146bcb,_0x146bcb);const _0x5dadd5=BattleManager[_0x5618d6(0xa37)]['friendsUnit'](),_0x51c08d=_0x146bcb[_0x5618d6(0x53b)],_0x4b10a8=_0x146bcb[_0x5618d6(0xce4)]||'unchanged',_0x24c595=_0x146bcb[_0x5618d6(0x1cd)]||_0x5618d6(0x779),_0x3dcc1a=_0x146bcb[_0x5618d6(0x74c)]||0x0,_0x44a634=_0x146bcb[_0x5618d6(0xb7c)]||0x0;(_0x5dadd5[_0x5618d6(0x733)]()||_0x51c08d)&&(_0x51c08d&&(_0x5dadd5[_0x5618d6(0xabd)]=_0x5dadd5[_0x5618d6(0xabd)]||{},_0x5dadd5['_ptbActionCost'][_0x5618d6(0xc38)]=0x0),_0x5dadd5[_0x5618d6(0x970)](_0x4b10a8,_0x24c595,_0x3dcc1a,_0x44a634));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Mechanics_PtbConvert',_0x92f1e8=>{const _0x403662=_0x12d94d;if(!SceneManager[_0x403662(0xb92)]())return;if(!Imported[_0x403662(0x826)])return;if(!BattleManager[_0x403662(0x2ca)]())return;VisuMZ[_0x403662(0x2ec)](_0x92f1e8,_0x92f1e8);const _0x485151=BattleManager[_0x403662(0xa37)][_0x403662(0x73c)]();let _0x2a3674=Math[_0x403662(0x660)](_0x92f1e8[_0x403662(0x6c1)],0x0),_0x4f363a=_0x485151['getFullActionsPTB'](),_0x401d87=_0x485151[_0x403662(0x45e)]();while(_0x2a3674--){if(_0x403662(0x6c4)!==_0x403662(0x6c4))return this[_0x403662(0xbb4)]&&this[_0x403662(0xbb4)]['hasSvBattler']();else{if(_0x4f363a<=0x0&&_0x401d87<=0x0)break;else{if(_0x4f363a>0x0){if(_0x403662(0xb12)!==_0x403662(0xb12))return this['getMenuImage']();else _0x4f363a--,_0x401d87++;}else _0x401d87--;}}}_0x485151[_0x403662(0x88e)](_0x4f363a),_0x485151[_0x403662(0x33f)](_0x401d87);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x97a),_0x1826d1=>{const _0x4061a4=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4061a4(0x826)])return;if(!BattleManager[_0x4061a4(0x2ca)]())return;VisuMZ[_0x4061a4(0x2ec)](_0x1826d1,_0x1826d1);const _0x5844b7=BattleManager[_0x4061a4(0xa37)][_0x4061a4(0x73c)]();let _0x26f604=_0x1826d1['FullActions'],_0x107bc3=_0x1826d1[_0x4061a4(0x3af)];_0x5844b7[_0x4061a4(0x867)](_0x26f604),_0x5844b7[_0x4061a4(0x77d)](_0x107bc3);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x770),_0x1a6a9c=>{const _0x5a5cd7=_0x12d94d;if(!SceneManager[_0x5a5cd7(0xb92)]())return;VisuMZ[_0x5a5cd7(0x2ec)](_0x1a6a9c,_0x1a6a9c);const _0x49b16c=[_0x5a5cd7(0xae4),'MAXMP',_0x5a5cd7(0x224),_0x5a5cd7(0x68d),'MAT',_0x5a5cd7(0xa3c),_0x5a5cd7(0xc1f),_0x5a5cd7(0x33d)],_0x3a4eb7=_0x1a6a9c[_0x5a5cd7(0x69f)],_0x457778=_0x1a6a9c[_0x5a5cd7(0x64d)],_0x59a543=VisuMZ['CreateActionSequenceTargets'](_0x1a6a9c['Targets']);for(const _0x33284c of _0x59a543){if(!_0x33284c)continue;for(const _0x31ee91 of _0x3a4eb7){const _0x11e6ad=_0x49b16c[_0x5a5cd7(0x86f)](_0x31ee91[_0x5a5cd7(0x97e)]()[_0x5a5cd7(0xc39)]());if(_0x11e6ad>=0x0&&_0x11e6ad<=0x7&&_0x33284c[_0x5a5cd7(0x382)](_0x11e6ad)){if(_0x5a5cd7(0xb3e)!==_0x5a5cd7(0x3bd))_0x33284c[_0x5a5cd7(0x7ef)](_0x11e6ad);else return this[_0x5a5cd7(0xd17)]*this[_0x5a5cd7(0x708)]();}}for(const _0x3c2151 of _0x457778){const _0x448548=_0x49b16c[_0x5a5cd7(0x86f)](_0x3c2151[_0x5a5cd7(0x97e)]()[_0x5a5cd7(0xc39)]());_0x448548>=0x0&&_0x448548<=0x7&&_0x33284c[_0x5a5cd7(0x265)](_0x448548)&&('aLRFp'!==_0x5a5cd7(0x51e)?_0x1d03bb[_0x5a5cd7(0xcd3)]([this],_0x4c4c8b):_0x33284c[_0x5a5cd7(0x7ef)](_0x448548));}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x850),_0xa1c7f7=>{const _0x1952dc=_0x12d94d;if(!SceneManager[_0x1952dc(0xb92)]())return;VisuMZ[_0x1952dc(0x2ec)](_0xa1c7f7,_0xa1c7f7);const _0x3ea70e=_0xa1c7f7['States'],_0x5606b8=VisuMZ[_0x1952dc(0xd16)](_0xa1c7f7['Targets']);for(const _0x4fb1e6 of _0x5606b8){if(!_0x4fb1e6)continue;for(const _0x3ad36f of _0x3ea70e){_0x4fb1e6[_0x1952dc(0x7d6)](_0x3ad36f);}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xa41),_0x18fe7a=>{const _0x2641e2=_0x12d94d;if(!SceneManager[_0x2641e2(0xb92)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0x2641e2(0x2ec)](_0x18fe7a,_0x18fe7a);const _0x39e24e=VisuMZ[_0x2641e2(0xd16)](_0x18fe7a[_0x2641e2(0xc0)]),_0x32168c=Number(_0x18fe7a['StateID']),_0x1a40aa=Number(_0x18fe7a['Turns']),_0x1ee106=_0x18fe7a[_0x2641e2(0x69a)];for(const _0x147a67 of _0x39e24e){if('tzhdx'!=='lcHUh'){if(!_0x147a67)continue;_0x1ee106&&!_0x147a67[_0x2641e2(0x74b)](_0x32168c)?'UZkzR'===_0x2641e2(0x9f8)?_0x16076d['command119']([_0x28cdd8]):(_0x147a67['addState'](_0x32168c),_0x147a67[_0x2641e2(0xc35)](_0x32168c,_0x1a40aa)):_0x147a67[_0x2641e2(0xd03)](_0x32168c,_0x1a40aa);}else _0x2922b9[_0x2641e2(0xadf)][_0x2641e2(0x1a2)][_0x2641e2(0xba3)](this);}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x3cd),_0x1075fd=>{const _0x1492d4=_0x12d94d;if(!SceneManager[_0x1492d4(0xb92)]())return;if(!Imported[_0x1492d4(0x86a)])return;VisuMZ[_0x1492d4(0x2ec)](_0x1075fd,_0x1075fd);const _0x49aec2=VisuMZ[_0x1492d4(0xd16)](_0x1075fd[_0x1492d4(0xc0)]),_0x29ca9c=Number(_0x1075fd[_0x1492d4(0xc1a)]),_0x490342=Math[_0x1492d4(0x660)](Number(_0x1075fd['Turns']),0x0),_0x31777b=_0x1075fd['AutoAddState'];for(const _0x3f96e9 of _0x49aec2){if(_0x1492d4(0x5fd)===_0x1492d4(0x5fd)){if(!_0x3f96e9)continue;_0x31777b&&!_0x3f96e9[_0x1492d4(0x74b)](_0x29ca9c)&&(_0x1492d4(0xc33)!==_0x1492d4(0xc33)?_0x5ea104[_0x1492d4(0x6ae)][_0x1492d4(0xa08)](_0x297ed5):_0x3f96e9[_0x1492d4(0x8d)](_0x29ca9c)),_0x3f96e9[_0x1492d4(0xc35)](_0x29ca9c,_0x490342);}else{const _0x414413=this[_0x1492d4(0x2c8)](_0x4cbf5b);if(_0x414413[_0x1492d4(0x214)](/\\I\[(\d+)\]/i)){const _0x3ccfe6=this[_0x1492d4(0x8b5)](_0x5c8264),_0x27b89f=this[_0x1492d4(0x467)](_0x414413)[_0x1492d4(0xa80)];return _0x27b89f<=_0x3ccfe6[_0x1492d4(0xa80)]?_0x1492d4(0xb50):_0x1492d4(0x4cd);}}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xc5a),_0x33e17f=>{const _0x101dff=_0x12d94d;if(!SceneManager[_0x101dff(0xb92)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x101dff(0x294)]())return;VisuMZ[_0x101dff(0x2ec)](_0x33e17f,_0x33e17f);const _0x4df5bb=_0x33e17f[_0x101dff(0x991)],_0x2baa1d=VisuMZ['CreateActionSequenceTargets'](_0x33e17f['Targets']),_0x40c2aa=_0x33e17f[_0x101dff(0x379)],_0x57444a=_0x33e17f['Exploiter'],_0x2fb125=_0x33e17f[_0x101dff(0x337)],_0x1aba0b=BattleManager[_0x101dff(0x5ef)];if(_0x4df5bb)for(const _0x3896c8 of _0x2baa1d){if(!_0x3896c8)continue;if(_0x3896c8===user)continue;if(_0x40c2aa)_0x3896c8[_0x101dff(0x24b)](![]);_0x3896c8[_0x101dff(0x41a)](BattleManager[_0x101dff(0xa37)],_0x1aba0b);}if(_0x57444a&&BattleManager['_subject']){if(_0x2fb125)BattleManager[_0x101dff(0xa37)][_0x101dff(0x24b)](![]);const _0x522c57=_0x2baa1d[0x0];BattleManager['performSTBExploiter'](_0x522c57,_0x1aba0b);}}),PluginManager['registerCommand'](pluginData['name'],_0x12d94d(0x848),_0x4034e1=>{const _0x31dcf5=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x31dcf5(0x100)])return;if(!BattleManager[_0x31dcf5(0x294)]())return;VisuMZ[_0x31dcf5(0x2ec)](_0x4034e1,_0x4034e1);const _0x519b41=_0x4034e1[_0x31dcf5(0x16c)];if(BattleManager[_0x31dcf5(0xa37)]){if(_0x31dcf5(0xadb)==='BjwYq'){if(this[_0x31dcf5(0x41e)]())return;this[_0x31dcf5(0x465)](),this[_0x31dcf5(0x6a9)][_0x31dcf5(0x5bb)](_0x40949c),this[_0x31dcf5(0xac6)][_0x31dcf5(0xd10)]();}else BattleManager['_subject'][_0x31dcf5(0xc5d)](_0x519b41);}}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],'ActSeq_Mechanics_StbRemoveExcessActions',_0x49ad24=>{const _0x3af132=_0x12d94d;if(!SceneManager[_0x3af132(0xb92)]())return;if(!Imported[_0x3af132(0x100)])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0x49ad24,_0x49ad24);let _0x1a33fd=_0x49ad24[_0x3af132(0x16c)];if(BattleManager[_0x3af132(0xa37)]){BattleManager[_0x3af132(0xa37)][_0x3af132(0xcd2)]=BattleManager[_0x3af132(0xa37)][_0x3af132(0xcd2)]||[];while(_0x1a33fd--){if(BattleManager[_0x3af132(0xa37)][_0x3af132(0xcd2)][_0x3af132(0x29c)]<=0x0)break;BattleManager[_0x3af132(0xa37)]['_actions'][_0x3af132(0xa3a)]();}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x4d0),_0xd4aedc=>{const _0x2bcdb1=_0x12d94d;if(!SceneManager[_0x2bcdb1(0xb92)]())return;if(!Imported[_0x2bcdb1(0x6f1)])return;VisuMZ[_0x2bcdb1(0x2ec)](_0xd4aedc,_0xd4aedc);const _0x234e27=VisuMZ[_0x2bcdb1(0xd16)](_0xd4aedc[_0x2bcdb1(0xc0)]),_0x1a683c=_0xd4aedc[_0x2bcdb1(0xd28)];for(const _0x278657 of _0x234e27){if(!_0x278657)continue;if(!_0x278657[_0x2bcdb1(0xc83)]())continue;_0x278657[_0x2bcdb1(0x853)](_0x1a683c);}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x7ab),_0x29a954=>{const _0x571521=_0x12d94d;if(!SceneManager[_0x571521(0xb92)]())return;VisuMZ[_0x571521(0x2ec)](_0x29a954,_0x29a954);const _0x705d29=VisuMZ[_0x571521(0xd16)](_0x29a954[_0x571521(0xc0)]),_0x3b2d09=_0x29a954['Text'],_0x4fd47d={'textColor':ColorManager[_0x571521(0x8ae)](_0x29a954[_0x571521(0x30e)]),'flashColor':_0x29a954[_0x571521(0x219)],'flashDuration':_0x29a954[_0x571521(0x3c8)]};for(const _0x4d363f of _0x705d29){if(!_0x4d363f)continue;_0x4d363f[_0x571521(0x873)](_0x3b2d09,_0x4fd47d);}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x4aa),_0x22e5e1=>{const _0x21a999=_0x12d94d;if(!SceneManager[_0x21a999(0xb92)]())return;VisuMZ['ConvertParams'](_0x22e5e1,_0x22e5e1);const _0x113346=VisuMZ[_0x21a999(0xd16)](_0x22e5e1[_0x21a999(0xc0)]);let _0x541579=$gameVariables[_0x21a999(0xba9)](_0x22e5e1['Variable']);if(Imported[_0x21a999(0x564)]&&_0x22e5e1[_0x21a999(0x7e9)]){if(_0x21a999(0x8af)===_0x21a999(0x8af))_0x541579=VisuMZ[_0x21a999(0x6ff)](_0x541579);else{const _0x4b5911=_0xb86cce[_0x21a999(0xb79)]('['+_0x2040c9['$1'][_0x21a999(0x214)](/\d+/g)+']');for(const _0x5025eb of _0x4b5911){if(_0x3dcb1c[_0x21a999(0xba9)](_0x5025eb))return![];}return!![];}}const _0x30fc3f=String(_0x541579),_0x580a1f={'textColor':ColorManager[_0x21a999(0x8ae)](_0x22e5e1[_0x21a999(0x30e)]),'flashColor':_0x22e5e1['FlashColor'],'flashDuration':_0x22e5e1[_0x21a999(0x3c8)]};for(const _0x3c80bb of _0x113346){if('ShwwJ'===_0x21a999(0x2c2)){const _0x17297d=_0x1a78f6['note'];if(_0x17297d[_0x21a999(0x214)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x304f39(_0x37473a['$1'])*0.01;else{if(_0x17297d[_0x21a999(0x214)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0xf3ab86(_0x29560d['$1'])||0x0;}}else{if(!_0x3c80bb)continue;_0x3c80bb[_0x21a999(0x873)](_0x30fc3f,_0x580a1f);}}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x5aa),_0x510988=>{const _0x2d1597=_0x12d94d;if(!SceneManager[_0x2d1597(0xb92)]())return;const _0xdb4c48=$gameTemp[_0x2d1597(0x664)]();if(!_0xdb4c48)return;_0xdb4c48['setWaitMode'](_0x2d1597(0x332));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x25f),_0x3962c2=>{const _0x56b7e9=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x56b7e9(0x2ec)](_0x3962c2,_0x3962c2);const _0x1276bb=VisuMZ['CreateActionSequenceTargets'](_0x3962c2[_0x56b7e9(0xc0)]);for(const _0x24ef51 of _0x1276bb){if(!_0x24ef51)continue;_0x24ef51[_0x56b7e9(0x749)]();}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x824),_0x1f137c=>{const _0x40442a=_0x12d94d;if(!SceneManager[_0x40442a(0xb92)]())return;VisuMZ[_0x40442a(0x2ec)](_0x1f137c,_0x1f137c);const _0x5aee58=VisuMZ[_0x40442a(0xd16)](_0x1f137c[_0x40442a(0xc0)]),_0x89c943=_0x1f137c['MotionType'][_0x40442a(0x541)]()[_0x40442a(0xc39)]();let _0x13caf5=_0x1f137c[_0x40442a(0xa7e)];const _0x36b226=_0x1f137c[_0x40442a(0xc81)];![_0x40442a(0x695),_0x40442a(0x573),'swing',_0x40442a(0xaf7)][_0x40442a(0x511)](_0x89c943)&&(_0x13caf5=![]);for(const _0x37f75b of _0x5aee58){if(!_0x37f75b)continue;_0x37f75b[_0x40442a(0x813)](_0x89c943,_0x13caf5,_0x36b226);}}),PluginManager['registerCommand'](pluginData['name'],_0x12d94d(0x949),_0xf4af66=>{const _0xcdf4d0=_0x12d94d;if(!SceneManager[_0xcdf4d0(0xb92)]())return;VisuMZ[_0xcdf4d0(0x2ec)](_0xf4af66,_0xf4af66);const _0x25b017=VisuMZ[_0xcdf4d0(0xd16)](_0xf4af66[_0xcdf4d0(0xc0)]),_0x5c8f91=_0xf4af66[_0xcdf4d0(0x617)][_0xcdf4d0(0x541)]()[_0xcdf4d0(0xc39)](),_0x1d0c03=_0xf4af66[_0xcdf4d0(0xa7e)];for(const _0x376a1d of _0x25b017){if(_0xcdf4d0(0xca7)===_0xcdf4d0(0xca7)){if(!_0x376a1d)continue;_0x376a1d[_0xcdf4d0(0x83f)]=_0x1d0c03;if(_0x5c8f91[_0xcdf4d0(0x214)](/ATTACK[ ](\d+)/i)){if(_0xcdf4d0(0x94f)===_0xcdf4d0(0x94f))_0x376a1d[_0xcdf4d0(0xfd)](Number(RegExp['$1']));else{this[_0xcdf4d0(0xd24)]=0x14,this['_borderPortraitSprite'][_0xcdf4d0(0x222)]=_0x13ff46;_0x5bc387[_0xcdf4d0(0x592)]['isRightInputMode']()?(this[_0xcdf4d0(0x551)]['x']=0x0,this[_0xcdf4d0(0x249)]=_0x50d978[_0xcdf4d0(0xbeb)](_0x5dc7da[_0xcdf4d0(0xa80)]/0x2)):(this[_0xcdf4d0(0x551)]['x']=this[_0xcdf4d0(0xa80)],this[_0xcdf4d0(0x249)]=this['width']*0x3/0x4);this[_0xcdf4d0(0x551)][_0xcdf4d0(0x9a8)]=0x0,this[_0xcdf4d0(0x551)]['y']=this['y']+this[_0xcdf4d0(0xd17)];const _0x35bba3=_0x4bc102[_0xcdf4d0(0xaa2)]();_0x35bba3&&(this[_0xcdf4d0(0x249)]+=_0x35bba3['getBattlePortraitOffsetX'](),this[_0xcdf4d0(0x551)]['y']+=_0x35bba3[_0xcdf4d0(0xbd9)]());}}else _0x5c8f91===_0xcdf4d0(0x695)?'Kzukx'!=='QCwXF'?_0x376a1d[_0xcdf4d0(0x111)]():this[_0xcdf4d0(0x3e4)](_0xcdf4d0(0x4fa)):_0x376a1d['requestMotion'](_0x5c8f91);if(!_0x1d0c03)_0x376a1d['startWeaponAnimation'](0x0);else{if(_0x1d0c03&&[_0xcdf4d0(0x573),_0xcdf4d0(0xb29),_0xcdf4d0(0xb3a)][_0xcdf4d0(0x511)](_0x5c8f91)){}}_0x376a1d[_0xcdf4d0(0x83f)]=undefined;}else{const _0x408042=new _0xd54d5e(0x0,0x0,_0x214bfe[_0xcdf4d0(0xa80)],_0x56a85b[_0xcdf4d0(0xd17)]);this[_0xcdf4d0(0x760)]=new _0x2c87fd(_0x408042),this[_0xcdf4d0(0x760)][_0xcdf4d0(0x9a8)]=0x0,this['addChild'](this[_0xcdf4d0(0x760)]),this[_0xcdf4d0(0x46f)]();}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xad6),_0x3f8d0d=>{const _0x580e34=_0x12d94d;if(!SceneManager[_0x580e34(0xb92)]())return;VisuMZ['ConvertParams'](_0x3f8d0d,_0x3f8d0d);const _0x2a8e4d=BattleManager[_0x580e34(0x5ef)];if(!_0x2a8e4d)return;if(!_0x2a8e4d[_0x580e34(0xc7)]())return;const _0x1a9fbd=VisuMZ[_0x580e34(0xd16)](_0x3f8d0d[_0x580e34(0xc0)]);for(const _0x24a45c of _0x1a9fbd){if('pIsOk'!==_0x580e34(0x759)){if(_0x2ce059[_0x580e34(0xa48)]())return![];}else{if(!_0x24a45c)continue;_0x24a45c[_0x580e34(0x8f4)](_0x2a8e4d);}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xcdc),_0x27c292=>{const _0x32ab37=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x32ab37(0x2ec)](_0x27c292,_0x27c292);const _0x173632=VisuMZ[_0x32ab37(0xd16)](_0x27c292[_0x32ab37(0xc0)]);for(const _0x3aa30c of _0x173632){if(!_0x3aa30c)continue;if(!_0x3aa30c[_0x32ab37(0x9b8)]())continue;_0x3aa30c[_0x32ab37(0x9b8)]()[_0x32ab37(0x5a1)]();}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Motion_WaitMotionFrame',_0x38b28d=>{const _0x3db5ed=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3db5ed(0x2ec)](_0x38b28d,_0x38b28d);const _0x199808=$gameTemp['getLastPluginCommandInterpreter'](),_0x58d697=_0x38b28d[_0x3db5ed(0x210)]*Sprite_Battler['_motionSpeed'];_0x199808[_0x3db5ed(0x48a)](_0x58d697);}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],'ActSeq_Movement_BattleStep',_0x46dafd=>{const _0x2a65d8=_0x12d94d;if(!SceneManager[_0x2a65d8(0xb92)]())return;VisuMZ['ConvertParams'](_0x46dafd,_0x46dafd);const _0x408077=$gameTemp[_0x2a65d8(0x664)](),_0x4e3a5f=BattleManager[_0x2a65d8(0x5ef)];if(!_0x408077||!_0x4e3a5f)return;if(!_0x4e3a5f[_0x2a65d8(0xc7)]())return;const _0x2bde12=VisuMZ[_0x2a65d8(0xd16)](_0x46dafd[_0x2a65d8(0xc0)]);for(const _0x45fe61 of _0x2bde12){if(_0x2a65d8(0x7d1)!==_0x2a65d8(0x740)){if(!_0x45fe61)continue;_0x45fe61[_0x2a65d8(0xa36)](_0x4e3a5f);}else return _0x6ce145['boxWidth'];}if(_0x46dafd[_0x2a65d8(0xcce)])_0x408077[_0x2a65d8(0xb30)](_0x2a65d8(0x5ca));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Movement_HomeMoveBy',_0x2c96ca=>{const _0x4a1837=_0x12d94d;if(!SceneManager[_0x4a1837(0xb92)]())return;if(!$gameSystem[_0x4a1837(0x701)]())return;VisuMZ[_0x4a1837(0x2ec)](_0x2c96ca,_0x2c96ca);const _0x2fbc0c=$gameTemp[_0x4a1837(0x664)](),_0x4c4fbb=VisuMZ[_0x4a1837(0xd16)](_0x2c96ca[_0x4a1837(0xc0)]),_0x346a50=_0x2c96ca[_0x4a1837(0xa9f)],_0x40bd9f=_0x2c96ca[_0x4a1837(0xb1c)],_0x104474=_0x2c96ca['DistanceY'],_0x56db3b=_0x2c96ca['Duration'],_0x19c798=_0x2c96ca[_0x4a1837(0xab7)],_0x123fb5=_0x2c96ca[_0x4a1837(0x7fd)],_0x17385b=_0x2c96ca[_0x4a1837(0x617)],_0x3ad3c3=_0x2c96ca[_0x4a1837(0xcce)];if(!_0x2fbc0c)return;for(const _0x4a1bf6 of _0x4c4fbb){if(!_0x4a1bf6)continue;let _0x992ace=_0x40bd9f,_0x450048=_0x104474;if(_0x346a50[_0x4a1837(0x214)](/horz/i))_0x992ace*=_0x4a1bf6[_0x4a1837(0xc83)]()?-0x1:0x1;if(_0x346a50[_0x4a1837(0x214)](/vert/i))_0x450048*=_0x4a1bf6['isActor']()?-0x1:0x1;_0x4a1bf6['moveBattlerHomeDistance'](_0x992ace,_0x450048,_0x56db3b,_0x19c798,_0x123fb5),_0x4a1bf6[_0x4a1837(0x484)](_0x17385b);}if(_0x3ad3c3)_0x2fbc0c['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData['name'],_0x12d94d(0xa5a),_0x4fa65d=>{const _0xb39fc0=_0x12d94d;if(!SceneManager[_0xb39fc0(0xb92)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0xb39fc0(0x2ec)](_0x4fa65d,_0x4fa65d);const _0x246aa6=$gameTemp[_0xb39fc0(0x664)](),_0x102e66=VisuMZ[_0xb39fc0(0xd16)](_0x4fa65d[_0xb39fc0(0xc0)]),_0x5d88df=_0x4fa65d[_0xb39fc0(0xd23)],_0x371b4c=_0x4fa65d[_0xb39fc0(0x211)],_0x4fad5e=_0x4fa65d[_0xb39fc0(0x75f)],_0x578a8f=_0x4fa65d['Duration'],_0x4c2c1d=_0x4fa65d[_0xb39fc0(0xab7)],_0x24cd85=_0x4fa65d[_0xb39fc0(0x7fd)],_0x583d5f=_0x4fa65d['MotionType'],_0x5ce99e=_0x4fa65d[_0xb39fc0(0xcce)];if(!_0x246aa6)return;for(const _0x2a3b6f of _0x102e66){if(_0xb39fc0(0xbba)!=='nROiV'){if(_0x2b4fb1[_0xb39fc0(0x269)]){if(_0x3119fd[_0xb39fc0(0x140)][_0xb39fc0(0xa0d)]<1.19){let _0x23d98c='';_0x23d98c+=_0xb39fc0(0xd2),_0x23d98c+=_0xb39fc0(0x71b),_0x23d98c+=_0xb39fc0(0x1d1),_0x1d1595(_0x23d98c),_0x79259e[_0xb39fc0(0xa82)]();}}return this[_0xb39fc0(0x729)]=-0x1,_0xbe78e2[_0xb39fc0(0xbce)](...this[_0xb39fc0(0x822)]()),this[_0xb39fc0(0x7bd)](_0x308cbf);}else{if(!_0x2a3b6f)continue;const _0x1f0792=_0x4fa65d['DestinationJS'](_0x2a3b6f)||{'x':0x0,'y':0x0};let _0x32ec82=_0x1f0792['x'],_0x5eb7cc=_0x1f0792['y'];if(_0x5d88df[_0xb39fc0(0x214)](/none/i))_0x32ec82+=_0x371b4c,_0x5eb7cc+=_0x4fad5e;else{if(_0x5d88df[_0xb39fc0(0x214)](/horz/i)&&_0x5d88df[_0xb39fc0(0x214)](/vert/i))_0x32ec82+=_0x2a3b6f[_0xb39fc0(0xc83)]()?-_0x371b4c:_0x371b4c,_0x5eb7cc+=_0x2a3b6f[_0xb39fc0(0xc83)]()?-_0x4fad5e:_0x4fad5e;else{if(_0x5d88df['match'](/horz/i))_0x32ec82+=_0x2a3b6f[_0xb39fc0(0xc83)]()?-_0x371b4c:_0x371b4c,_0x5eb7cc+=_0x4fad5e;else _0x5d88df['match'](/vert/i)&&(_0x32ec82+=_0x371b4c,_0x5eb7cc+=_0x2a3b6f['isActor']()?-_0x4fad5e:_0x4fad5e);}}_0x2a3b6f[_0xb39fc0(0xbb0)](_0x32ec82,_0x5eb7cc,_0x578a8f,_0x4c2c1d,_0x24cd85,-0x1),_0x2a3b6f['requestMotion'](_0x583d5f);}}if(_0x5ce99e)_0x246aa6[_0xb39fc0(0xb30)](_0xb39fc0(0x5ca));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x7b6),_0x47b7ef=>{const _0x3a7904=_0x12d94d;if(!SceneManager[_0x3a7904(0xb92)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x3a7904(0x2ec)](_0x47b7ef,_0x47b7ef);const _0x5e5780=$gameTemp[_0x3a7904(0x664)](),_0xa26aca=VisuMZ[_0x3a7904(0xd16)](_0x47b7ef[_0x3a7904(0xc0)]),_0x269be2=_0x47b7ef[_0x3a7904(0xd27)],_0x359f9e=_0x47b7ef[_0x3a7904(0xd23)],_0x58b45e=_0x47b7ef[_0x3a7904(0x211)],_0x12a6dc=_0x47b7ef[_0x3a7904(0x75f)],_0x4ea4bd=_0x47b7ef['Duration'],_0x4fff66=_0x47b7ef[_0x3a7904(0xab7)],_0xe9d134=_0x47b7ef['EasingType'],_0x549cb1=_0x47b7ef[_0x3a7904(0x617)],_0x3e3e5f=_0x47b7ef[_0x3a7904(0xcce)];if(!_0x5e5780)return;for(const _0xd89472 of _0xa26aca){if(!_0xd89472)continue;let _0x44c458=_0xd89472[_0x3a7904(0x9b8)]()[_0x3a7904(0x3f5)],_0x1b7b0c=_0xd89472['battler']()[_0x3a7904(0x59e)];if(_0x269be2[_0x3a7904(0x214)](/home/i))_0x44c458=_0xd89472[_0x3a7904(0x9b8)]()[_0x3a7904(0xb94)],_0x1b7b0c=_0xd89472[_0x3a7904(0x9b8)]()[_0x3a7904(0xc55)];else{if(_0x269be2[_0x3a7904(0x214)](/center/i))_0x44c458=Graphics[_0x3a7904(0x807)]/0x2,_0x1b7b0c=Graphics[_0x3a7904(0xf6)]/0x2;else _0x269be2[_0x3a7904(0x214)](/point (\d+), (\d+)/i)&&('VFKgK'!==_0x3a7904(0x4f5)?(_0x20814f[_0x3a7904(0x4e9)][_0x3a7904(0x87b)][_0x3a7904(0xba3)](this),this[_0x3a7904(0xaaf)]()&&this['hasSvBattler']()&&this[_0x3a7904(0x484)](_0x3a7904(0x1df)),_0x3dc451[_0x3a7904(0xd11)]()):(_0x44c458=Number(RegExp['$1']),_0x1b7b0c=Number(RegExp['$2'])));}if(_0x359f9e['match'](/none/i))_0x44c458+=_0x58b45e,_0x1b7b0c+=_0x12a6dc;else{if(_0x359f9e[_0x3a7904(0x214)](/horz/i)&&_0x359f9e[_0x3a7904(0x214)](/vert/i)){if('nXEdS'!==_0x3a7904(0xc8c))_0x44c458+=_0xd89472['isActor']()?-_0x58b45e:_0x58b45e,_0x1b7b0c+=_0xd89472[_0x3a7904(0xc83)]()?-_0x12a6dc:_0x12a6dc;else return _0x50493c(_0x17a3a3['$1'])*0.01;}else{if(_0x359f9e[_0x3a7904(0x214)](/horz/i))_0x44c458+=_0xd89472[_0x3a7904(0xc83)]()?-_0x58b45e:_0x58b45e,_0x1b7b0c+=_0x12a6dc;else _0x359f9e[_0x3a7904(0x214)](/vert/i)&&(_0x44c458+=_0x58b45e,_0x1b7b0c+=_0xd89472[_0x3a7904(0xc83)]()?-_0x12a6dc:_0x12a6dc);}}_0xd89472['moveBattlerHomeToPoint'](_0x44c458,_0x1b7b0c,_0x4ea4bd,_0x4fff66,_0xe9d134,-0x1),_0xd89472[_0x3a7904(0x484)](_0x549cb1);}if(_0x3e3e5f)_0x5e5780['setWaitMode'](_0x3a7904(0x5ca));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Movement_HomeMoveToTarget',_0x59ab50=>{const _0x212893=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x212893(0x701)]())return;VisuMZ['ConvertParams'](_0x59ab50,_0x59ab50);const _0x3d0fd0=$gameTemp['getLastPluginCommandInterpreter'](),_0x22e13c=VisuMZ['CreateActionSequenceTargets'](_0x59ab50[_0x212893(0x77a)]),_0x43251f=VisuMZ[_0x212893(0xd16)](_0x59ab50[_0x212893(0xc98)]),_0x1f570c=_0x59ab50[_0x212893(0x819)];let _0x52ab7c=_0x59ab50['MeleeDistance'];const _0x1b5cd4=_0x59ab50['OffsetAdjust'],_0x40fea6=_0x59ab50[_0x212893(0x211)],_0x4be5b1=_0x59ab50[_0x212893(0x75f)],_0x19129b=_0x59ab50[_0x212893(0x227)],_0x985be9=_0x59ab50[_0x212893(0xab7)],_0x13d4d0=_0x59ab50['EasingType'],_0x170293=_0x59ab50[_0x212893(0x617)],_0x1cd651=_0x59ab50[_0x212893(0xcce)],_0xf6d8a3=Math[_0x212893(0x2e3)](..._0x43251f['map'](_0x555bb2=>_0x555bb2[_0x212893(0x9b8)]()['_baseX']-_0x555bb2[_0x212893(0x9b8)]()[_0x212893(0xc6a)]()/0x2)),_0x3438e2=Math[_0x212893(0x660)](..._0x43251f[_0x212893(0x43b)](_0x554884=>_0x554884[_0x212893(0x9b8)]()[_0x212893(0x3f5)]+_0x554884[_0x212893(0x9b8)]()[_0x212893(0xc6a)]()/0x2)),_0x52045e=Math[_0x212893(0x2e3)](..._0x43251f[_0x212893(0x43b)](_0x3bb4d0=>_0x3bb4d0[_0x212893(0x9b8)]()[_0x212893(0x59e)]-_0x3bb4d0['battler']()[_0x212893(0x782)]())),_0x233781=Math['max'](..._0x43251f[_0x212893(0x43b)](_0x423621=>_0x423621[_0x212893(0x9b8)]()[_0x212893(0x59e)])),_0x3aef92=_0x43251f[_0x212893(0xd0e)](_0x384a38=>_0x384a38[_0x212893(0xc83)]())[_0x212893(0x29c)],_0x36d854=_0x43251f[_0x212893(0xd0e)](_0x5c6d8f=>_0x5c6d8f[_0x212893(0x2c3)]())['length'];let _0x482651=0x0,_0x20e67d=0x0;if(_0x1f570c['match'](/front/i)){if(_0x212893(0x613)===_0x212893(0x5ec))return!![];else _0x482651=_0x3aef92>=_0x36d854?_0xf6d8a3:_0x3438e2;}else{if(_0x1f570c[_0x212893(0x214)](/middle/i))_0x482651=(_0xf6d8a3+_0x3438e2)/0x2,_0x52ab7c=-0x1;else _0x1f570c[_0x212893(0x214)](/back/i)&&('BdNgL'==='baayP'?_0x5a8cad[_0x212893(0x6ae)]['ActSeq_Grid_ClearPassiveStatesFromNode'](_0x50e852):_0x482651=_0x3aef92>=_0x36d854?_0x3438e2:_0xf6d8a3);}if(_0x1f570c[_0x212893(0x214)](/head/i))_0x20e67d=_0x52045e;else{if(_0x1f570c['match'](/center/i)){if(_0x212893(0x333)!==_0x212893(0x333)){const _0x18c0ec=this[_0x212893(0x8b5)](_0xd9c16e),_0x552ebc=this[_0x212893(0x467)](_0x41a088)[_0x212893(0xa80)];return _0x552ebc<=_0x18c0ec[_0x212893(0xa80)]?_0x212893(0xb50):_0x212893(0x4cd);}else _0x20e67d=(_0x52045e+_0x233781)/0x2;}else _0x1f570c[_0x212893(0x214)](/base/i)&&(_0x20e67d=_0x233781);}if(!_0x3d0fd0)return;for(const _0x2f3de9 of _0x22e13c){if(!_0x2f3de9)continue;let _0x551b63=_0x482651,_0x4981c8=_0x20e67d;if(_0x1b5cd4[_0x212893(0x214)](/none/i))_0x551b63+=_0x40fea6,_0x4981c8+=_0x4be5b1;else{if(_0x1b5cd4[_0x212893(0x214)](/horz/i)&&_0x1b5cd4[_0x212893(0x214)](/vert/i))_0x551b63+=_0x2f3de9[_0x212893(0xc83)]()?-_0x40fea6:_0x40fea6,_0x4981c8+=_0x2f3de9[_0x212893(0xc83)]()?-_0x4be5b1:_0x4be5b1;else{if(_0x1b5cd4['match'](/horz/i)){if('YIPLU'===_0x212893(0xd00)){this[_0x212893(0x461)]&&(this[_0x212893(0xbdf)]++,this[_0x212893(0x4ca)]=!![]);const _0x275ca2=_0x47e790[_0x212893(0x4e9)][_0x212893(0xa63)]['call'](this);return this[_0x212893(0x461)]&&(this['active']=![]),_0x275ca2;}else _0x551b63+=_0x2f3de9['isActor']()?-_0x40fea6:_0x40fea6,_0x4981c8+=_0x4be5b1;}else _0x1b5cd4[_0x212893(0x214)](/vert/i)&&(_0x551b63+=_0x40fea6,_0x4981c8+=_0x2f3de9[_0x212893(0xc83)]()?-_0x4be5b1:_0x4be5b1);}}_0x2f3de9[_0x212893(0xbb0)](_0x551b63,_0x4981c8,_0x19129b,_0x985be9,_0x13d4d0,_0x52ab7c),_0x2f3de9[_0x212893(0x484)](_0x170293);}if(_0x1cd651)_0x3d0fd0[_0x212893(0xb30)]('battleMove');}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x768),_0xbbce7b=>{const _0x49b612=_0x12d94d;if(!SceneManager[_0x49b612(0xb92)]())return;if(!$gameSystem[_0x49b612(0x701)]())return;VisuMZ[_0x49b612(0x2ec)](_0xbbce7b,_0xbbce7b);const _0x3ad7f2=VisuMZ['CreateActionSequenceTargets'](_0xbbce7b[_0x49b612(0xc0)]);let _0xbbbbc3=_0xbbce7b[_0x49b612(0x80b)][_0x49b612(0x214)](/back/i);for(const _0xd2acc8 of _0x3ad7f2){if(_0x49b612(0x300)!==_0x49b612(0xbf2)){if(!_0xd2acc8)continue;if(_0xbbce7b[_0x49b612(0x80b)]['match'](/rand/i))_0xbbbbc3=Math['randomInt'](0x2);_0xd2acc8[_0x49b612(0x654)](!!_0xbbbbc3);}else _0x48afd3['prototype'][_0x49b612(0xb16)][_0x49b612(0xba3)](this,_0x2f1893);}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Movement_FaceJsPoint',_0x3b63ab=>{const _0x1a49fe=_0x12d94d;if(!SceneManager[_0x1a49fe(0xb92)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1a49fe(0x2ec)](_0x3b63ab,_0x3b63ab);const _0x147327=VisuMZ[_0x1a49fe(0xd16)](_0x3b63ab['Targets']),_0x2f71e9=_0x3b63ab['FaceAway'];for(const _0x391183 of _0x147327){if(!_0x391183)continue;const _0x449fb5=_0x3b63ab['PointJS'](_0x391183)||{'x':0x0,'y':0x0};let _0x281679=_0x449fb5['x'],_0x5911f1=_0x449fb5['y'];_0x391183['setBattlerFacePoint'](Math[_0x1a49fe(0x1d0)](_0x281679),Math[_0x1a49fe(0x1d0)](_0x5911f1),!!_0x2f71e9);}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x1ab),_0x25b7d7=>{const _0xb4d719=_0x12d94d;if(!SceneManager[_0xb4d719(0xb92)]())return;if(!$gameSystem[_0xb4d719(0x701)]())return;VisuMZ['ConvertParams'](_0x25b7d7,_0x25b7d7);const _0x436f52=VisuMZ[_0xb4d719(0xd16)](_0x25b7d7[_0xb4d719(0xc0)]);let _0x1e7768=_0x25b7d7[_0xb4d719(0x25c)];const _0x17fe0e=_0x25b7d7['FaceAway'];for(const _0x4d4589 of _0x436f52){if(!_0x4d4589)continue;let _0x367d95=_0x4d4589['battler']()[_0xb4d719(0x3f5)],_0x109d26=_0x4d4589[_0xb4d719(0x9b8)]()[_0xb4d719(0x59e)];if(_0x1e7768[_0xb4d719(0x214)](/home/i))_0xb4d719(0xa31)===_0xb4d719(0x1de)?(_0x1a4b56[_0xb4d719(0xadf)][_0xb4d719(0xb48)][_0xb4d719(0xba3)](this),_0x446578[_0xb4d719(0xadf)][_0xb4d719(0xb08)][_0xb4d719(0x757)]['ShowActorGauge']&&this[_0xb4d719(0x8e9)]()):(_0x367d95=_0x4d4589[_0xb4d719(0x9b8)]()[_0xb4d719(0xb94)],_0x109d26=_0x4d4589[_0xb4d719(0x9b8)]()[_0xb4d719(0xc55)]);else{if(_0x1e7768['match'](/center/i))_0x367d95=Graphics[_0xb4d719(0x807)]/0x2,_0x109d26=Graphics['boxHeight']/0x2;else _0x1e7768[_0xb4d719(0x214)](/point (\d+), (\d+)/i)&&(_0x367d95=Number(RegExp['$1']),_0x109d26=Number(RegExp['$2']));}_0x4d4589['setBattlerFacePoint'](Math[_0xb4d719(0x1d0)](_0x367d95),Math[_0xb4d719(0x1d0)](_0x109d26),!!_0x17fe0e);}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Movement_FaceTarget',_0x31c948=>{const _0x44dba0=_0x12d94d;if(!SceneManager[_0x44dba0(0xb92)]())return;if(!$gameSystem[_0x44dba0(0x701)]())return;VisuMZ[_0x44dba0(0x2ec)](_0x31c948,_0x31c948);const _0x5d1e0c=VisuMZ[_0x44dba0(0xd16)](_0x31c948[_0x44dba0(0x77a)]),_0x220acd=VisuMZ['CreateActionSequenceTargets'](_0x31c948[_0x44dba0(0xc98)]),_0x452948=_0x220acd[_0x44dba0(0x43b)](_0x422bd5=>_0x422bd5&&_0x422bd5[_0x44dba0(0x9b8)]()?_0x422bd5['battler']()['_baseX']:0x0)/(_0x220acd[_0x44dba0(0x29c)]||0x1),_0x19d131=_0x220acd[_0x44dba0(0x43b)](_0xbecf0=>_0xbecf0&&_0xbecf0['battler']()?_0xbecf0[_0x44dba0(0x9b8)]()['_baseY']:0x0)/(_0x220acd[_0x44dba0(0x29c)]||0x1),_0xc7cb85=_0x31c948[_0x44dba0(0x336)];for(const _0x9c1719 of _0x5d1e0c){if(_0x44dba0(0x910)!==_0x44dba0(0x910))_0x32c2d4&&_0xea0fd2[_0x44dba0(0xc83)]()&&_0x1b77b8[_0x44dba0(0x880)](_0x5ad93b),this[_0x44dba0(0x769)]();else{if(!_0x9c1719)continue;_0x9c1719['setBattlerFacePoint'](Math[_0x44dba0(0x1d0)](_0x452948),Math[_0x44dba0(0x1d0)](_0x19d131),!!_0xc7cb85);}}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xb2),_0x2d5072=>{const _0x262fc4=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2d5072,_0x2d5072);const _0x276e43=$gameTemp[_0x262fc4(0x664)](),_0x2a5647=VisuMZ[_0x262fc4(0xd16)](_0x2d5072['Targets']),_0x102125=_0x2d5072[_0x262fc4(0xc84)],_0x261b67=_0x2d5072['Duration'],_0x29e7f7=_0x2d5072['EasingType'],_0x375da7=_0x2d5072['WaitForFloat'];if(!_0x276e43)return;for(const _0xf4b111 of _0x2a5647){if(_0x262fc4(0x9b2)===_0x262fc4(0x9b2)){if(!_0xf4b111)continue;_0xf4b111[_0x262fc4(0x2a2)](_0x102125,_0x261b67,_0x29e7f7);}else{if(!_0x45f397[_0x262fc4(0xb92)]())return;if(!_0x4e8844['VisuMZ_3_ActSeqCamera'])return;_0x4c8f67[_0x262fc4(0x2ec)](_0x4a3837,_0x3bde53);const _0x235399=_0x17f54e['getLastPluginCommandInterpreter'](),_0x61aa5f=_0x3a46e7[_0x262fc4(0xb81)];if(!_0x235399)return;_0x399f3d[_0x262fc4(0xcc5)](0x0,0x0,_0x39a0bf[_0x262fc4(0x227)],_0x231d37[_0x262fc4(0x7fd)]);if(_0x61aa5f)_0x235399[_0x262fc4(0xb30)](_0x262fc4(0xb6e));}}if(_0x375da7)_0x276e43[_0x262fc4(0xb30)](_0x262fc4(0x59f));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x9ea),_0xc61ee9=>{const _0x16727f=_0x12d94d;if(!SceneManager[_0x16727f(0xb92)]())return;VisuMZ[_0x16727f(0x2ec)](_0xc61ee9,_0xc61ee9);const _0x4bfc51=$gameTemp[_0x16727f(0x664)]();if(!_0x4bfc51)return;const _0x481f9c=VisuMZ[_0x16727f(0xd16)](_0xc61ee9['Targets']);for(const _0x16be9a of _0x481f9c){if(!_0x16be9a)continue;_0x16be9a[_0x16727f(0x2b9)]();}if(BattleManager[_0x16727f(0xa37)]){if(_0x16727f(0xc6)===_0x16727f(0xc6))BattleManager[_0x16727f(0xa37)][_0x16727f(0x75d)]();else return![];}if(_0xc61ee9[_0x16727f(0xcce)])_0x4bfc51[_0x16727f(0xb30)](_0x16727f(0x5ca));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x599),_0xb1e7c=>{const _0xf9644a=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xf9644a(0x2ec)](_0xb1e7c,_0xb1e7c);const _0x2246fd=$gameTemp[_0xf9644a(0x664)](),_0x5a0b21=VisuMZ[_0xf9644a(0xd16)](_0xb1e7c[_0xf9644a(0xc0)]),_0x5a3c53=_0xb1e7c[_0xf9644a(0xc84)],_0x981cd6=_0xb1e7c[_0xf9644a(0x227)],_0x395b71=_0xb1e7c['WaitForJump'];if(!_0x2246fd)return;for(const _0x4d3434 of _0x5a0b21){if(!_0x4d3434)continue;_0x4d3434['jumpBattler'](_0x5a3c53,_0x981cd6);}if(_0x395b71)_0x2246fd[_0xf9644a(0xb30)](_0xf9644a(0x8dc));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],'ActSeq_Movement_MoveBy',_0x3ba4d1=>{const _0x536dd5=_0x12d94d;if(!SceneManager[_0x536dd5(0xb92)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x536dd5(0x2ec)](_0x3ba4d1,_0x3ba4d1);const _0x3ad081=$gameTemp['getLastPluginCommandInterpreter'](),_0x1d4251=VisuMZ[_0x536dd5(0xd16)](_0x3ba4d1[_0x536dd5(0xc0)]),_0x691496=_0x3ba4d1[_0x536dd5(0xa9f)],_0x4f8c70=_0x3ba4d1[_0x536dd5(0xb1c)],_0x4fcd33=_0x3ba4d1[_0x536dd5(0x6bf)],_0x27564d=_0x3ba4d1[_0x536dd5(0x227)],_0x4ad1e8=_0x3ba4d1['FaceDirection'],_0x2372e1=_0x3ba4d1[_0x536dd5(0x7fd)],_0x225362=_0x3ba4d1['MotionType'],_0x107e6b=_0x3ba4d1[_0x536dd5(0xcce)];if(!_0x3ad081)return;for(const _0x37f225 of _0x1d4251){if(!_0x37f225)continue;let _0x39b846=_0x4f8c70,_0xcd4816=_0x4fcd33;if(_0x691496[_0x536dd5(0x214)](/horz/i))_0x39b846*=_0x37f225[_0x536dd5(0xc83)]()?-0x1:0x1;if(_0x691496[_0x536dd5(0x214)](/vert/i))_0xcd4816*=_0x37f225[_0x536dd5(0xc83)]()?-0x1:0x1;_0x37f225[_0x536dd5(0x6ee)](_0x39b846,_0xcd4816,_0x27564d,_0x4ad1e8,_0x2372e1),_0x37f225[_0x536dd5(0x484)](_0x225362);}if(_0x107e6b)_0x3ad081['setWaitMode']('battleMove');}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x58c),_0xd02bbb=>{const _0x181976=_0x12d94d;if(!SceneManager[_0x181976(0xb92)]())return;if(!$gameSystem[_0x181976(0x701)]())return;VisuMZ['ConvertParams'](_0xd02bbb,_0xd02bbb);const _0x19dd7e=$gameTemp[_0x181976(0x664)](),_0x2f0466=VisuMZ[_0x181976(0xd16)](_0xd02bbb[_0x181976(0xc0)]),_0x587ab5=_0xd02bbb[_0x181976(0xd23)],_0x49b1b5=_0xd02bbb['OffsetX'],_0x4ddc68=_0xd02bbb[_0x181976(0x75f)],_0x53f65f=_0xd02bbb[_0x181976(0x227)],_0x5d0a8b=_0xd02bbb['FaceDirection'],_0x5e5ada=_0xd02bbb[_0x181976(0x7fd)],_0x4e651d=_0xd02bbb[_0x181976(0x617)],_0x4f8e4c=_0xd02bbb[_0x181976(0xcce)];if(!_0x19dd7e)return;for(const _0xaac9d8 of _0x2f0466){if(_0x181976(0xbb1)!==_0x181976(0xbb1)){_0x2b4cd3[_0x181976(0x4e9)][_0x181976(0x8f4)][_0x181976(0xba3)](this,_0x3215cd);if(this[_0x181976(0xad)]())this[_0x181976(0x81)](_0x44dc95);}else{if(!_0xaac9d8)continue;const _0x2ffb9f=_0xd02bbb[_0x181976(0x73e)](_0xaac9d8)||{'x':0x0,'y':0x0};let _0x143ce2=_0x2ffb9f['x'],_0x16cede=_0x2ffb9f['y'];if(_0x587ab5[_0x181976(0x214)](/none/i)){if(_0x181976(0x239)===_0x181976(0x239))_0x143ce2+=_0x49b1b5,_0x16cede+=_0x4ddc68;else{const _0x507c1f=_0x441250[_0x181976(0x4a8)](this[_0x181976(0x504)]),_0x2407ea=_0x3f8d96[_0x181976(0x659)][_0x507c1f];if(!_0x2407ea)return this['getItemDamageAmountTextOriginal']();return _0x2407ea[_0x181976(0x5e4)][_0x181976(0xba3)](this);}}else{if(_0x587ab5['match'](/horz/i)&&_0x587ab5[_0x181976(0x214)](/vert/i)){if(_0x181976(0x65b)===_0x181976(0x8f9))return this[_0x181976(0x404)]()&&!this['isCustomBattleScope']()?this[_0x181976(0x804)]():_0xe5a0b0[_0x181976(0xadf)][_0x181976(0x33e)][_0x181976(0xba3)](this);else _0x143ce2+=_0xaac9d8[_0x181976(0xc83)]()?-_0x49b1b5:_0x49b1b5,_0x16cede+=_0xaac9d8[_0x181976(0xc83)]()?-_0x4ddc68:_0x4ddc68;}else{if(_0x587ab5[_0x181976(0x214)](/horz/i))_0x143ce2+=_0xaac9d8['isActor']()?-_0x49b1b5:_0x49b1b5,_0x16cede+=_0x4ddc68;else _0x587ab5[_0x181976(0x214)](/vert/i)&&(_0x181976(0xbbd)!==_0x181976(0x4ac)?(_0x143ce2+=_0x49b1b5,_0x16cede+=_0xaac9d8[_0x181976(0xc83)]()?-_0x4ddc68:_0x4ddc68):(_0xf8370a[_0x181976(0xadf)][_0x181976(0xc29)][_0x181976(0xba3)](this),this[_0x181976(0x521)](),this['updateUiContainerPosition'](),this[_0x181976(0x25e)](),this['updateBattleBalloons']()));}}_0xaac9d8[_0x181976(0xc5c)](_0x143ce2,_0x16cede,_0x53f65f,_0x5d0a8b,_0x5e5ada,-0x1),_0xaac9d8[_0x181976(0x484)](_0x4e651d);}}if(_0x4f8e4c)_0x19dd7e[_0x181976(0xb30)](_0x181976(0x5ca));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],'ActSeq_Movement_MoveToPoint',_0x3929d5=>{const _0x364305=_0x12d94d;if(!SceneManager[_0x364305(0xb92)]())return;if(!$gameSystem[_0x364305(0x701)]())return;VisuMZ[_0x364305(0x2ec)](_0x3929d5,_0x3929d5);const _0x383fe0=$gameTemp['getLastPluginCommandInterpreter'](),_0x22bd1d=VisuMZ[_0x364305(0xd16)](_0x3929d5[_0x364305(0xc0)]),_0x535fcc=_0x3929d5['Destination'],_0x3378ae=_0x3929d5[_0x364305(0xd23)],_0x1d3fbb=_0x3929d5[_0x364305(0x211)],_0x15837c=_0x3929d5[_0x364305(0x75f)],_0x408f7e=_0x3929d5[_0x364305(0x227)],_0x243fbc=_0x3929d5[_0x364305(0xab7)],_0x5aa5ac=_0x3929d5[_0x364305(0x7fd)],_0x47cf04=_0x3929d5[_0x364305(0x617)],_0x2be2eb=_0x3929d5[_0x364305(0xcce)];if(!_0x383fe0)return;for(const _0xf0b7dc of _0x22bd1d){if(!_0xf0b7dc)continue;let _0x43eb20=_0xf0b7dc[_0x364305(0x9b8)]()[_0x364305(0x3f5)],_0x3b746d=_0xf0b7dc['battler']()[_0x364305(0x59e)];if(_0x535fcc[_0x364305(0x214)](/home/i)){if(_0x364305(0xaab)!==_0x364305(0x3a2))_0x43eb20=_0xf0b7dc[_0x364305(0x9b8)]()[_0x364305(0xb94)],_0x3b746d=_0xf0b7dc[_0x364305(0x9b8)]()[_0x364305(0xc55)];else{let _0xddd6aa=0x0;this['_baseLineStack'][_0x364305(0x29c)]>0x0&&(_0xddd6aa=this[_0x364305(0x5d5)][this['_baseLineStack'][_0x364305(0x29c)]-0x1]),this[_0x364305(0x1f8)]['length']>_0xddd6aa?this[_0x364305(0x48a)]():this[_0x364305(0x769)]();}}else{if(_0x535fcc[_0x364305(0x214)](/center/i))_0x43eb20=Graphics[_0x364305(0x807)]/0x2,_0x3b746d=Graphics[_0x364305(0xf6)]/0x2;else _0x535fcc[_0x364305(0x214)](/point (\d+), (\d+)/i)&&(_0x43eb20=Number(RegExp['$1']),_0x3b746d=Number(RegExp['$2']));}if(_0x3378ae['match'](/none/i))_0x43eb20+=_0x1d3fbb,_0x3b746d+=_0x15837c;else{if(_0x3378ae['match'](/horz/i)&&_0x3378ae[_0x364305(0x214)](/vert/i))_0x43eb20+=_0xf0b7dc[_0x364305(0xc83)]()?-_0x1d3fbb:_0x1d3fbb,_0x3b746d+=_0xf0b7dc[_0x364305(0xc83)]()?-_0x15837c:_0x15837c;else{if(_0x3378ae[_0x364305(0x214)](/horz/i))_0x43eb20+=_0xf0b7dc[_0x364305(0xc83)]()?-_0x1d3fbb:_0x1d3fbb,_0x3b746d+=_0x15837c;else _0x3378ae[_0x364305(0x214)](/vert/i)&&(_0x364305(0x847)!=='afLmZ'?_0x47ca2b['note']+='<CUSTOM\x20ACTION\x20SEQUENCE>':(_0x43eb20+=_0x1d3fbb,_0x3b746d+=_0xf0b7dc[_0x364305(0xc83)]()?-_0x15837c:_0x15837c));}}_0xf0b7dc[_0x364305(0xc5c)](_0x43eb20,_0x3b746d,_0x408f7e,_0x243fbc,_0x5aa5ac,-0x1),_0xf0b7dc[_0x364305(0x484)](_0x47cf04);}if(_0x2be2eb)_0x383fe0[_0x364305(0xb30)](_0x364305(0x5ca));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Movement_MoveToTarget',_0x434612=>{const _0x1ce800=_0x12d94d;if(!SceneManager[_0x1ce800(0xb92)]())return;if(!$gameSystem[_0x1ce800(0x701)]())return;VisuMZ[_0x1ce800(0x2ec)](_0x434612,_0x434612);const _0x142de7=$gameTemp[_0x1ce800(0x664)](),_0xde4bdd=VisuMZ[_0x1ce800(0xd16)](_0x434612[_0x1ce800(0x77a)]),_0x121bee=VisuMZ[_0x1ce800(0xd16)](_0x434612[_0x1ce800(0xc98)]),_0x5ba943=_0x434612['TargetLocation'];let _0x21898e=_0x434612[_0x1ce800(0x9ec)];const _0x4dda77=_0x434612[_0x1ce800(0xd23)],_0x4a76c0=_0x434612['OffsetX'],_0x248381=_0x434612[_0x1ce800(0x75f)],_0x5cab6a=_0x434612[_0x1ce800(0x227)],_0x5ad925=_0x434612[_0x1ce800(0xab7)],_0x1a5420=_0x434612['EasingType'],_0x34ec28=_0x434612['MotionType'],_0x3acae1=_0x434612[_0x1ce800(0xcce)],_0x59420d=Math[_0x1ce800(0x2e3)](..._0x121bee[_0x1ce800(0x43b)](_0x3d83c6=>_0x3d83c6['battler']()['_baseX']-_0x3d83c6['battler']()[_0x1ce800(0xc6a)]()/0x2)),_0x1bed86=Math[_0x1ce800(0x660)](..._0x121bee[_0x1ce800(0x43b)](_0x22eb34=>_0x22eb34[_0x1ce800(0x9b8)]()[_0x1ce800(0x3f5)]+_0x22eb34[_0x1ce800(0x9b8)]()[_0x1ce800(0xc6a)]()/0x2)),_0x6bf229=Math[_0x1ce800(0x2e3)](..._0x121bee[_0x1ce800(0x43b)](_0x2268e3=>_0x2268e3[_0x1ce800(0x9b8)]()[_0x1ce800(0x59e)]-_0x2268e3[_0x1ce800(0x9b8)]()[_0x1ce800(0x782)]())),_0x5506d4=Math[_0x1ce800(0x660)](..._0x121bee['map'](_0x2a5244=>_0x2a5244[_0x1ce800(0x9b8)]()[_0x1ce800(0x59e)])),_0x317ffa=_0x121bee['filter'](_0xd660d7=>_0xd660d7[_0x1ce800(0xc83)]())[_0x1ce800(0x29c)],_0x4603bd=_0x121bee[_0x1ce800(0xd0e)](_0x412f7c=>_0x412f7c[_0x1ce800(0x2c3)]())[_0x1ce800(0x29c)];let _0x13cdde=0x0,_0x11d83d=0x0;if(_0x5ba943['match'](/front/i))_0x13cdde=_0x317ffa>=_0x4603bd?_0x59420d:_0x1bed86;else{if(_0x5ba943[_0x1ce800(0x214)](/middle/i)){if(_0x1ce800(0x820)===_0x1ce800(0x5d7))return this[_0x1ce800(0xba2)][_0x1ce800(0xa3a)]();else _0x13cdde=(_0x59420d+_0x1bed86)/0x2,_0x21898e=-0x1;}else _0x5ba943['match'](/back/i)&&(_0x13cdde=_0x317ffa>=_0x4603bd?_0x1bed86:_0x59420d);}if(_0x5ba943[_0x1ce800(0x214)](/head/i))_0x11d83d=_0x6bf229;else{if(_0x5ba943['match'](/center/i)){if(_0x1ce800(0x2df)===_0x1ce800(0x8f5)){this['forceSelect'](_0x43970b-0x1);return;}else _0x11d83d=(_0x6bf229+_0x5506d4)/0x2;}else _0x5ba943['match'](/base/i)&&(_0x1ce800(0x99c)!==_0x1ce800(0x99c)?this[_0x1ce800(0x5a1)]():_0x11d83d=_0x5506d4);}if(!_0x142de7)return;for(const _0x16d1ab of _0xde4bdd){if(_0x1ce800(0x6e8)==='ypfei')return this[_0x1ce800(0xc89)]()[_0x1ce800(0x7ba)][_0x1ce800(0x214)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0xcdd7da(_0x2827b9['$1'])[_0x1ce800(0x5db)](/[\r\n]+/):_0x4a315f[_0x1ce800(0xadf)][_0x1ce800(0xb08)][_0x1ce800(0x9d9)][_0x1ce800(0xbff)];else{if(!_0x16d1ab)continue;let _0x4dab15=_0x13cdde,_0xdfd698=_0x11d83d;if(_0x4dda77['match'](/none/i))_0x1ce800(0x2bf)===_0x1ce800(0x2bf)?(_0x4dab15+=_0x4a76c0,_0xdfd698+=_0x248381):(this[_0x1ce800(0xcbc)][_0x1ce800(0x9ed)](),this[_0x1ce800(0x14e)][_0x1ce800(0x165)](),this[_0x1ce800(0x42f)][_0x1ce800(0x288)]());else{if(_0x4dda77['match'](/horz/i)&&_0x4dda77['match'](/vert/i))_0x1ce800(0xc99)===_0x1ce800(0xc99)?(_0x4dab15+=_0x16d1ab[_0x1ce800(0xc83)]()?-_0x4a76c0:_0x4a76c0,_0xdfd698+=_0x16d1ab['isActor']()?-_0x248381:_0x248381):_0x5130a5=_0x3eddbf[this[_0x1ce800(0xac6)][_0x1ce800(0x302)]()];else{if(_0x4dda77[_0x1ce800(0x214)](/horz/i)){if(_0x1ce800(0xa2)===_0x1ce800(0xcaf))return this[_0x1ce800(0xaa8)]()[_0x1ce800(0x1ba)];else _0x4dab15+=_0x16d1ab[_0x1ce800(0xc83)]()?-_0x4a76c0:_0x4a76c0,_0xdfd698+=_0x248381;}else _0x4dda77[_0x1ce800(0x214)](/vert/i)&&('wBtSU'==='wBtSU'?(_0x4dab15+=_0x4a76c0,_0xdfd698+=_0x16d1ab['isActor']()?-_0x248381:_0x248381):this[_0x1ce800(0x313)]());}}_0x16d1ab[_0x1ce800(0xc5c)](_0x4dab15,_0xdfd698,_0x5cab6a,_0x5ad925,_0x1a5420,_0x21898e),_0x16d1ab[_0x1ce800(0x484)](_0x34ec28);}}if(_0x3acae1)_0x142de7[_0x1ce800(0xb30)](_0x1ce800(0x5ca));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],'ActSeq_Movement_Opacity',_0x1c817b=>{const _0x459fba=_0x12d94d;if(!SceneManager[_0x459fba(0xb92)]())return;VisuMZ['ConvertParams'](_0x1c817b,_0x1c817b);const _0x55d6e8=$gameTemp[_0x459fba(0x664)](),_0x3b0cbb=VisuMZ[_0x459fba(0xd16)](_0x1c817b[_0x459fba(0xc0)]),_0x1fad98=_0x1c817b['Opacity'],_0x464418=_0x1c817b[_0x459fba(0x227)],_0x163f1a=_0x1c817b['EasingType'],_0x23759d=_0x1c817b['WaitForOpacity'];if(!_0x55d6e8)return;for(const _0x52bcbc of _0x3b0cbb){if(!_0x52bcbc)continue;_0x52bcbc['changeBattlerOpacity'](_0x1fad98,_0x464418,_0x163f1a);}if(_0x23759d)_0x55d6e8[_0x459fba(0xb30)](_0x459fba(0x29b));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x16b),_0xdf1286=>{const _0x338532=_0x12d94d;if(!SceneManager[_0x338532(0xb92)]())return;VisuMZ[_0x338532(0x2ec)](_0xdf1286,_0xdf1286);const _0x3437c6=$gameTemp[_0x338532(0x664)](),_0x45fee0=VisuMZ[_0x338532(0xd16)](_0xdf1286[_0x338532(0xc0)]),_0x2d1347=_0xdf1286[_0x338532(0x9ef)],_0x343911=_0xdf1286[_0x338532(0x93a)],_0x24e308=_0xdf1286[_0x338532(0x227)],_0x59667b=_0xdf1286['EasingType'],_0x4a4337=_0xdf1286['WaitForScale'];if(!_0x3437c6)return;for(const _0x408072 of _0x45fee0){if(!_0x408072)continue;_0x408072[_0x338532(0x621)](_0x2d1347,_0x343911,_0x24e308,_0x59667b);}if(_0x4a4337)_0x3437c6['setWaitMode']('battleGrow');}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x960),_0x388c86=>{const _0x2c86b7=_0x12d94d;if(!SceneManager[_0x2c86b7(0xb92)]())return;VisuMZ['ConvertParams'](_0x388c86,_0x388c86);const _0xf1a62b=$gameTemp[_0x2c86b7(0x664)](),_0x36d6b1=VisuMZ['CreateActionSequenceTargets'](_0x388c86['Targets']),_0x4cea91=_0x388c86['SkewX'],_0x29c7be=_0x388c86[_0x2c86b7(0x6bb)],_0xe8568d=_0x388c86[_0x2c86b7(0x227)],_0x146f4a=_0x388c86['EasingType'],_0x94b545=_0x388c86['WaitForSkew'];if(!_0xf1a62b)return;for(const _0x5b5df3 of _0x36d6b1){if(!_0x5b5df3)continue;_0x5b5df3[_0x2c86b7(0x4a4)](_0x4cea91,_0x29c7be,_0xe8568d,_0x146f4a);}if(_0x94b545)_0xf1a62b['setWaitMode'](_0x2c86b7(0x9c3));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xbe9),_0x61443c=>{const _0x5138c2=_0x12d94d;if(!SceneManager[_0x5138c2(0xb92)]())return;VisuMZ['ConvertParams'](_0x61443c,_0x61443c);const _0x43783d=$gameTemp[_0x5138c2(0x664)](),_0x2a9283=VisuMZ[_0x5138c2(0xd16)](_0x61443c['Targets']),_0x5c3fd9=_0x61443c[_0x5138c2(0x953)],_0x9b1b95=_0x61443c[_0x5138c2(0x227)],_0xb800eb=_0x61443c[_0x5138c2(0x7fd)],_0x4a91c0=_0x61443c['RevertAngle'],_0x36f386=_0x61443c[_0x5138c2(0x186)];if(!_0x43783d)return;for(const _0x153040 of _0x2a9283){if(!_0x153040)continue;_0x153040[_0x5138c2(0x40c)](_0x5c3fd9,_0x9b1b95,_0xb800eb,_0x4a91c0);}if(_0x36f386)_0x43783d['setWaitMode'](_0x5138c2(0x1c4));}),PluginManager['registerCommand'](pluginData['name'],_0x12d94d(0x343),_0x20912a=>{const _0x9122f5=_0x12d94d;if(!SceneManager[_0x9122f5(0xb92)]())return;const _0x23ff7f=$gameTemp[_0x9122f5(0x664)]();if(!_0x23ff7f)return;_0x23ff7f['setWaitMode'](_0x9122f5(0x59f));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0xc05),_0xa3e65d=>{const _0x5d4a6a=_0x12d94d;if(!SceneManager[_0x5d4a6a(0xb92)]())return;const _0x1e75c5=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1e75c5)return;_0x1e75c5[_0x5d4a6a(0xb30)](_0x5d4a6a(0x8dc));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xca4),_0x5f4436=>{const _0x16cb88=_0x12d94d;if(!SceneManager['isSceneBattle']())return;const _0x5a2d15=$gameTemp[_0x16cb88(0x664)]();if(!_0x5a2d15)return;_0x5a2d15[_0x16cb88(0xb30)]('battleMove');}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x377),_0x181655=>{const _0x42a1dc=_0x12d94d;if(!SceneManager[_0x42a1dc(0xb92)]())return;const _0x2d207d=$gameTemp[_0x42a1dc(0x664)]();if(!_0x2d207d)return;_0x2d207d['setWaitMode'](_0x42a1dc(0x29b));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x797),_0x170f81=>{const _0x5ca158=_0x12d94d;if(!SceneManager[_0x5ca158(0xb92)]())return;const _0x1d9a71=$gameTemp[_0x5ca158(0x664)]();if(!_0x1d9a71)return;_0x1d9a71[_0x5ca158(0xb30)](_0x5ca158(0x784));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x9df),_0x119741=>{const _0x9d2de1=_0x12d94d;if(!SceneManager[_0x9d2de1(0xb92)]())return;const _0x2e6665=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2e6665)return;_0x2e6665[_0x9d2de1(0xb30)]('battleSpriteSkew');}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x8cd),_0x29ca65=>{const _0x2b6708=_0x12d94d;if(!SceneManager[_0x2b6708(0xb92)]())return;const _0x2eb40c=$gameTemp[_0x2b6708(0x664)]();if(!_0x2eb40c)return;_0x2eb40c[_0x2b6708(0xb30)](_0x2b6708(0x1c4));}),VisuMZ[_0x12d94d(0xadf)]['CheckActSeqProjectileVersion']=function(){const _0x202cf7=_0x12d94d;if(!Imported[_0x202cf7(0x966)])return;if(VisuMZ[_0x202cf7(0xef)][_0x202cf7(0xa0d)]<1.08){if(_0x202cf7(0x964)===_0x202cf7(0x964)){let _0x473cf4='';_0x473cf4+=_0x202cf7(0x84),_0x473cf4+='in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.',alert(_0x473cf4),SceneManager[_0x202cf7(0xa82)]();}else{_0x386f00[_0x202cf7(0x4e9)][_0x202cf7(0x288)]['call'](this);const _0x54f046=this[_0x202cf7(0xbb9)]();_0x54f046===_0x202cf7(0xb2d)&&this[_0x202cf7(0xb89)]();}}},PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xd02),_0x3ff2d8=>{const _0x2fe2f7=_0x12d94d;if(!SceneManager[_0x2fe2f7(0xb92)]())return;if(!Imported[_0x2fe2f7(0x966)])return;VisuMZ[_0x2fe2f7(0x2ec)](_0x3ff2d8,_0x3ff2d8),VisuMZ[_0x2fe2f7(0xadf)]['CheckActSeqProjectileVersion']();const _0x29c00b=$gameTemp['getLastPluginCommandInterpreter'](),_0x5edade=_0x3ff2d8[_0x2fe2f7(0x55e)];if(!_0x29c00b)return;const _0x9d27c3=BattleManager[_0x2fe2f7(0x372)];if(!_0x9d27c3)return;_0x9d27c3[_0x2fe2f7(0x598)](_0x3ff2d8);if(_0x5edade)_0x29c00b[_0x2fe2f7(0xb30)](_0x2fe2f7(0x903));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],'ActSeq_Projectile_Icon',_0x42b473=>{const _0x3f1930=_0x12d94d;if(!SceneManager[_0x3f1930(0xb92)]())return;if(!Imported[_0x3f1930(0x966)])return;VisuMZ[_0x3f1930(0x2ec)](_0x42b473,_0x42b473),VisuMZ['BattleCore']['CheckActSeqProjectileVersion']();const _0x2ac13b=$gameTemp[_0x3f1930(0x664)](),_0x5ce933=_0x42b473[_0x3f1930(0x55e)];if(!_0x2ac13b)return;const _0x1c19ac=BattleManager[_0x3f1930(0x372)];if(!_0x1c19ac)return;_0x1c19ac[_0x3f1930(0x598)](_0x42b473);if(_0x5ce933)_0x2ac13b[_0x3f1930(0xb30)](_0x3f1930(0x903));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0xb71),_0x388984=>{const _0x38d8b6=_0x12d94d;if(!SceneManager[_0x38d8b6(0xb92)]())return;if(!Imported[_0x38d8b6(0x966)])return;VisuMZ['ConvertParams'](_0x388984,_0x388984),VisuMZ[_0x38d8b6(0xadf)][_0x38d8b6(0x293)]();const _0x1dcb4d=$gameTemp['getLastPluginCommandInterpreter'](),_0x2f0bb1=_0x388984[_0x38d8b6(0x55e)];if(!_0x1dcb4d)return;const _0x43e898=BattleManager[_0x38d8b6(0x372)];if(!_0x43e898)return;_0x43e898[_0x38d8b6(0x598)](_0x388984);if(_0x2f0bb1)_0x1dcb4d[_0x38d8b6(0xb30)](_0x38d8b6(0x903));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x693),_0x19ebc9=>{const _0x59e7a7=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x59e7a7(0x857)])return;VisuMZ[_0x59e7a7(0x2ec)](_0x19ebc9,_0x19ebc9);const _0x497f39=$gameTemp[_0x59e7a7(0x664)](),_0x224d72=_0x19ebc9[_0x59e7a7(0xb81)];if(!_0x497f39)return;$gameScreen['setBattleSkew'](_0x19ebc9[_0x59e7a7(0xcd5)],_0x19ebc9[_0x59e7a7(0x6bb)],_0x19ebc9[_0x59e7a7(0x227)],_0x19ebc9['EasingType']);if(_0x224d72)_0x497f39[_0x59e7a7(0xb30)](_0x59e7a7(0xb6e));}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0x6c3),_0x30d125=>{const _0x1fa976=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1fa976(0x857)])return;VisuMZ['ConvertParams'](_0x30d125,_0x30d125);const _0x51c7b7=$gameTemp[_0x1fa976(0x664)](),_0x156153=_0x30d125[_0x1fa976(0xb81)];if(!_0x51c7b7)return;$gameScreen[_0x1fa976(0xcc5)](0x0,0x0,_0x30d125[_0x1fa976(0x227)],_0x30d125[_0x1fa976(0x7fd)]);if(_0x156153)_0x51c7b7['setWaitMode'](_0x1fa976(0xb6e));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x189),_0xb4fd02=>{const _0x178687=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x178687(0x857)])return;const _0x262f71=$gameTemp[_0x178687(0x664)]();if(!_0x262f71)return;_0x262f71[_0x178687(0xb30)](_0x178687(0xb6e));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xc8b),_0xac0e30=>{const _0x3f52d8=_0x12d94d;if(!SceneManager[_0x3f52d8(0xb92)]())return;VisuMZ[_0x3f52d8(0x2ec)](_0xac0e30,_0xac0e30);const _0x55194b=$gameTemp[_0x3f52d8(0x664)](),_0x286b55=_0xac0e30['Index'],_0x2c655e=_0xac0e30[_0x3f52d8(0x21f)];if(!_0x55194b)return;BattleManager[_0x3f52d8(0x729)]=_0x286b55,BattleManager['_target']=BattleManager[_0x3f52d8(0x3c0)]?BattleManager[_0x3f52d8(0x3c0)][BattleManager[_0x3f52d8(0x729)]]||null:null;if(BattleManager[_0x3f52d8(0x4e5)]&&_0x2c655e[_0x3f52d8(0x97e)]()[_0x3f52d8(0xc39)]()!==_0x3f52d8(0x3be)){if(_0x3f52d8(0x56e)===_0x3f52d8(0x56e))_0x55194b[_0x3f52d8(0xc78)]([_0x2c655e]);else return _0x4182a7(_0x1dee1c['$1'])[_0x3f52d8(0x5db)](/[\r\n]+/);}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x688),_0xd90925=>{const _0x306ff1=_0x12d94d;if(!SceneManager[_0x306ff1(0xb92)]())return;VisuMZ['ConvertParams'](_0xd90925,_0xd90925);const _0x308b8e=$gameTemp[_0x306ff1(0x664)](),_0x112a5f=_0xd90925[_0x306ff1(0x21f)];if(!_0x308b8e)return;BattleManager[_0x306ff1(0x729)]++,BattleManager['_target']=BattleManager[_0x306ff1(0x3c0)][BattleManager[_0x306ff1(0x729)]]||null,BattleManager['_target']&&_0x112a5f[_0x306ff1(0x97e)]()[_0x306ff1(0xc39)]()!=='UNTITLED'&&_0x308b8e[_0x306ff1(0xc78)]([_0x112a5f]);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x6ca),_0x4f8ed9=>{const _0x4c8aeb=_0x12d94d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4c8aeb(0x2ec)](_0x4f8ed9,_0x4f8ed9);const _0x228f58=$gameTemp[_0x4c8aeb(0x664)](),_0x5387d6=_0x4f8ed9[_0x4c8aeb(0x21f)];if(!_0x228f58)return;BattleManager[_0x4c8aeb(0x729)]--,BattleManager[_0x4c8aeb(0x4e5)]=BattleManager[_0x4c8aeb(0x3c0)][BattleManager[_0x4c8aeb(0x729)]]||null,BattleManager['_target']&&_0x5387d6[_0x4c8aeb(0x97e)]()[_0x4c8aeb(0xc39)]()!==_0x4c8aeb(0x3be)&&_0x228f58[_0x4c8aeb(0xc78)]([_0x5387d6]);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x5f0),_0x4446b4=>{const _0x184d22=_0x12d94d;if(!SceneManager[_0x184d22(0xb92)]())return;VisuMZ[_0x184d22(0x2ec)](_0x4446b4,_0x4446b4);const _0x564441=$gameTemp[_0x184d22(0x664)](),_0x18c5d8=_0x4446b4[_0x184d22(0x84b)],_0x15665c=_0x4446b4[_0x184d22(0x21f)];if(!_0x564441)return;const _0x5653a1=BattleManager[_0x184d22(0x729)];for(;;){if(_0x184d22(0x6f8)===_0x184d22(0xb90)){if(_0x1c781d)_0x107166[_0x184d22(0xa37)][_0x184d22(0x24b)](![]);const _0x55899b=_0x3fee1e[0x0];_0x3f8808['performSTBExploiter'](_0x55899b,_0x2a981e);}else{BattleManager['_targetIndex']=Math[_0x184d22(0xbec)](BattleManager[_0x184d22(0x3c0)][_0x184d22(0x29c)]);if(!_0x18c5d8)break;if(BattleManager['_targetIndex']!==_0x5653a1)break;if(BattleManager['_allTargets'][_0x184d22(0x29c)]<=0x1){if(_0x184d22(0xb1b)===_0x184d22(0xb1b)){BattleManager[_0x184d22(0x729)]=0x0;break;}else _0x296d1f[_0x184d22(0x7ef)](_0x2dc682);}}}BattleManager[_0x184d22(0x4e5)]=BattleManager[_0x184d22(0x3c0)][BattleManager[_0x184d22(0x729)]]||null,BattleManager[_0x184d22(0x4e5)]&&_0x15665c['toUpperCase']()[_0x184d22(0xc39)]()!=='UNTITLED'&&_0x564441[_0x184d22(0xc78)]([_0x15665c]);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0xc65),_0x41e20e=>{const _0x1de582=_0x12d94d;if(!SceneManager[_0x1de582(0xb92)]())return;if(!Imported[_0x1de582(0xad7)])return;if(!ConfigManager[_0x1de582(0x631)])return;VisuMZ[_0x1de582(0x2ec)](_0x41e20e,_0x41e20e);const _0x142df9=VisuMZ[_0x1de582(0xd16)](_0x41e20e['Targets']);let _0x119420=_0x41e20e['VoiceLine']||'';for(const _0xdba019 of _0x142df9){if(!_0xdba019)continue;_0xdba019[_0x1de582(0x4b9)](_0x119420);}}),PluginManager['registerCommand'](pluginData[_0x12d94d(0x536)],_0x12d94d(0xbfb),_0x166ff5=>{const _0xddcb8=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xddcb8(0xad7)])return;if(!ConfigManager[_0xddcb8(0x631)])return;VisuMZ[_0xddcb8(0x2ec)](_0x166ff5,_0x166ff5);const _0x2d7833=VisuMZ[_0xddcb8(0xd16)](_0x166ff5[_0xddcb8(0xc0)]);let _0x2e318d=(_0x166ff5[_0xddcb8(0xa73)]||'')+(_0x166ff5[_0xddcb8(0xc51)]||'');for(const _0x5b1fa9 of _0x2d7833){if(!_0x5b1fa9)continue;_0x5b1fa9[_0xddcb8(0x4b9)](_0x2e318d);}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x99d),_0x2d7820=>{const _0x44d2bf=_0x12d94d;if(!SceneManager[_0x44d2bf(0xb92)]())return;VisuMZ[_0x44d2bf(0x2ec)](_0x2d7820,_0x2d7820);const _0x2cd150=VisuMZ[_0x44d2bf(0xd16)](_0x2d7820['Targets']);for(const _0x4d362f of _0x2cd150){if(!_0x4d362f)continue;if(!_0x4d362f[_0x44d2bf(0xc83)]())continue;_0x4d362f[_0x44d2bf(0x587)]();}}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x5bd),_0x493e9f=>{const _0x1074fa=_0x12d94d;if(!SceneManager[_0x1074fa(0xb92)]())return;VisuMZ[_0x1074fa(0x2ec)](_0x493e9f,_0x493e9f);const _0x456f77=$gameTemp[_0x1074fa(0x664)]();let _0x595847=![];const _0x30d140=_0x493e9f['JumpToLabel'],_0x3e37b4=VisuMZ[_0x1074fa(0xd16)](_0x493e9f[_0x1074fa(0xc0)]);for(const _0x285fee of _0x3e37b4){if(_0x1074fa(0x795)!==_0x1074fa(0x2db)){if(!_0x285fee)continue;if(!_0x285fee['isActor']())continue;_0x285fee[_0x1074fa(0xa8c)](),_0x285fee[_0x1074fa(0x8c9)]()['length']>0x0?_0x595847=!![]:_0x285fee[_0x1074fa(0x587)]();}else{const _0x3f1bf9=this[_0x1074fa(0x8b5)](_0x4ca18f),_0x1ccf4a=this['commandName'](_0x1a86f4),_0x4559b0=this['textSizeEx'](_0x1ccf4a)[_0x1074fa(0xa80)];this['changePaintOpacity'](this[_0x1074fa(0xae6)](_0x1a8a27));const _0x14da75=this[_0x1074fa(0xc69)]();if(_0x14da75===_0x1074fa(0x963))this[_0x1074fa(0x786)](_0x1ccf4a,_0x3f1bf9['x']+_0x3f1bf9[_0x1074fa(0xa80)]-_0x4559b0,_0x3f1bf9['y'],_0x4559b0);else{if(_0x14da75===_0x1074fa(0xae7)){const _0x50efe3=_0x3f1bf9['x']+_0xcf981c[_0x1074fa(0x28f)]((_0x3f1bf9[_0x1074fa(0xa80)]-_0x4559b0)/0x2);this[_0x1074fa(0x786)](_0x1ccf4a,_0x50efe3,_0x3f1bf9['y'],_0x4559b0);}else this[_0x1074fa(0x786)](_0x1ccf4a,_0x3f1bf9['x'],_0x3f1bf9['y'],_0x4559b0);}}}_0x595847&&_0x30d140['toUpperCase']()[_0x1074fa(0xc39)]()!==_0x1074fa(0x3be)&&_0x456f77['command119']([_0x30d140]);}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],'ActSeq_Weapon_SetActiveWeapon',_0x260e35=>{const _0x4c55aa=_0x12d94d;if(!SceneManager[_0x4c55aa(0xb92)]())return;VisuMZ[_0x4c55aa(0x2ec)](_0x260e35,_0x260e35);let _0x4604c3=_0x260e35['SlotID'];_0x4604c3--,_0x4604c3=Math[_0x4c55aa(0x660)](_0x4604c3,0x0);const _0x2ce836=VisuMZ[_0x4c55aa(0xd16)](_0x260e35[_0x4c55aa(0xc0)]);for(const _0xb0e202 of _0x2ce836){if(!_0xb0e202)continue;if(!_0xb0e202['isActor']())continue;_0xb0e202[_0x4c55aa(0x880)](_0x4604c3);}}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0x70f),_0x83222a=>{const _0x18b7ce=_0x12d94d;if(!SceneManager[_0x18b7ce(0xb92)]())return;if(!Imported[_0x18b7ce(0x857)])return;VisuMZ[_0x18b7ce(0x2ec)](_0x83222a,_0x83222a);const _0x2f5824=$gameTemp['getLastPluginCommandInterpreter'](),_0x13252e=_0x83222a[_0x18b7ce(0x577)];if(!_0x2f5824)return;$gameScreen[_0x18b7ce(0x943)](_0x83222a['Scale'],_0x83222a[_0x18b7ce(0x227)],_0x83222a[_0x18b7ce(0x7fd)]);if(_0x13252e)_0x2f5824[_0x18b7ce(0xb30)](_0x18b7ce(0xb3f));}),PluginManager[_0x12d94d(0xc10)](pluginData[_0x12d94d(0x536)],_0x12d94d(0x4bc),_0x2c3381=>{const _0x55a6b1=_0x12d94d;if(!SceneManager[_0x55a6b1(0xb92)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x55a6b1(0x2ec)](_0x2c3381,_0x2c3381);const _0x48984f=$gameTemp[_0x55a6b1(0x664)](),_0x55d1db=_0x2c3381[_0x55a6b1(0x577)];if(!_0x48984f)return;$gameScreen[_0x55a6b1(0x943)](0x1,_0x2c3381[_0x55a6b1(0x227)],_0x2c3381[_0x55a6b1(0x7fd)]);if(_0x55d1db)_0x48984f[_0x55a6b1(0xb30)](_0x55a6b1(0xb3f));}),PluginManager[_0x12d94d(0xc10)](pluginData['name'],_0x12d94d(0xcc0),_0x5b65af=>{const _0x393884=_0x12d94d;if(!SceneManager[_0x393884(0xb92)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0xea44ec=$gameTemp[_0x393884(0x664)]();if(!_0xea44ec)return;_0xea44ec[_0x393884(0xb30)](_0x393884(0xb3f));}),VisuMZ['BattleCore'][_0x12d94d(0x5ed)]=Scene_Boot['prototype']['onDatabaseLoaded'],Scene_Boot[_0x12d94d(0x4e9)][_0x12d94d(0xc1d)]=function(){const _0x5c89e7=_0x12d94d;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x5c89e7(0xcd6)](),this[_0x5c89e7(0xc5e)](),this[_0x5c89e7(0xc1b)](),VisuMZ['BattleCore']['Scene_Boot_onDatabaseLoaded'][_0x5c89e7(0xba3)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x5c89e7(0x62f)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x5c89e7(0x50f)]();},Scene_Boot['prototype'][_0x12d94d(0xc0d)]=function(){const _0x4bf4f1=_0x12d94d;if(VisuMZ[_0x4bf4f1(0x69b)])return;this[_0x4bf4f1(0x646)](),this[_0x4bf4f1(0x285)](),this[_0x4bf4f1(0x97d)]();},Scene_Boot[_0x12d94d(0x4e9)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0xbd10e9=_0x12d94d,_0x56e3ed=$dataSystem[_0xbd10e9(0x2a6)][_0xbd10e9(0x29c)];for(let _0x2fe27d=0x0;_0x2fe27d<_0x56e3ed;_0x2fe27d++){if(_0xbd10e9(0x428)!==_0xbd10e9(0x428)){if(!_0x3691f2[_0xbd10e9(0xb92)]())return;if(!_0xfccde9['VisuMZ_2_BattleSystemETB'])return;if(!_0x4e934a[_0xbd10e9(0xd2b)]())return;_0x3777aa[_0xbd10e9(0x2ec)](_0x396ba8,_0x3a3a47);const _0x4a975d=_0x58b4b9[_0xbd10e9(0x15d)];_0xb6ae[_0xbd10e9(0xa37)]&&_0x3c5103[_0xbd10e9(0xa37)][_0xbd10e9(0x73c)]()[_0xbd10e9(0x889)](_0x4a975d);}else{const _0x4502bd=$dataSystem[_0xbd10e9(0xa14)][_0x2fe27d];if(_0x4502bd)continue;$dataSystem['attackMotions'][_0x2fe27d]={'type':0x1,'weaponImageId':0x1};}}},Scene_Boot[_0x12d94d(0x4e9)][_0x12d94d(0xcd6)]=function(){const _0x56480b=_0x12d94d,_0xcf11de=VisuMZ[_0x56480b(0xadf)][_0x56480b(0xb08)];_0xcf11de['Damage']['PopupPosition']===undefined&&(_0xcf11de[_0x56480b(0x89b)][_0x56480b(0x6f5)]='base'),_0xcf11de[_0x56480b(0x58b)][_0x56480b(0x3d8)]===undefined&&(_0xcf11de[_0x56480b(0x58b)][_0x56480b(0x3d8)]=![]),_0xcf11de[_0x56480b(0x1ec)]['SmoothImage']===undefined&&(_0xcf11de[_0x56480b(0x1ec)][_0x56480b(0x3d8)]=!![]),_0xcf11de['Actor'][_0x56480b(0x7f4)]===undefined&&(_0xcf11de[_0x56480b(0x58b)][_0x56480b(0x7f4)]=![]),_0xcf11de['Actor'][_0x56480b(0x42e)]===undefined&&(_0xcf11de[_0x56480b(0x58b)][_0x56480b(0x42e)]=!![]);},VisuMZ['DamageStyles']={},Scene_Boot[_0x12d94d(0x4e9)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x29f7bb=_0x12d94d;for(const _0x12386a of VisuMZ[_0x29f7bb(0xadf)]['Settings']['Damage'][_0x29f7bb(0x51c)]){if(!_0x12386a)continue;const _0x5a5f07=_0x12386a['Name']['toUpperCase']()[_0x29f7bb(0xc39)]();VisuMZ[_0x29f7bb(0x659)][_0x5a5f07]=_0x12386a;}},VisuMZ[_0x12d94d(0xadf)]['RegExp']={},Scene_Boot[_0x12d94d(0x4e9)][_0x12d94d(0xc1b)]=function(){const _0x1e2200=_0x12d94d,_0xe574cc=VisuMZ['BattleCore'][_0x1e2200(0xe9)],_0x218a4e=_0x1e2200(0xac1),_0x21ea1e=[[_0x1e2200(0x3c5),_0x1e2200(0x2b0)],[_0x1e2200(0xccf),'POST-']],_0x5315f7=[[_0x1e2200(0x205),_0x1e2200(0xb85)],[_0x1e2200(0xc7f),_0x1e2200(0x370)]],_0x436b2b=[['',''],[_0x1e2200(0x6b9),'AS\x20USER'],[_0x1e2200(0x45c),_0x1e2200(0x9f0)]];for(const _0x5211c6 of _0x5315f7){for(const _0x207ad6 of _0x436b2b){for(const _0x772e2e of _0x21ea1e){if(_0x1e2200(0x401)!==_0x1e2200(0xc14)){const _0x26c25c=_0x5211c6[0x0]['format'](_0x772e2e[0x0],_0x207ad6[0x0]),_0x4d2077=_0x5211c6[0x1][_0x1e2200(0x3d0)](_0x772e2e[0x1],_0x207ad6[0x1])[_0x1e2200(0xc39)](),_0x48fffd=new RegExp(_0x218a4e[_0x1e2200(0x3d0)](_0x4d2077),'i');_0xe574cc[_0x26c25c]=_0x48fffd;}else{if(!_0x3ad1e8['isSceneBattle']())return!![];const _0x4f6c2c=[_0x1e2200(0xa49),_0x1e2200(0x683)];return _0x4f6c2c[_0x1e2200(0x511)](_0x112a7d[_0x1e2200(0x536)]);}}}}const _0x1712e6=[[_0x1e2200(0xfa),_0x1e2200(0xb10)],[_0x1e2200(0xb02),'JS\x20%1END\x20ACTION']];for(const _0x47bd48 of _0x1712e6){for(const _0x22126a of _0x21ea1e){const _0x250307=_0x47bd48[0x0]['format'](_0x22126a[0x0]),_0x2f14c7=_0x47bd48[0x1]['format'](_0x22126a[0x1]),_0x50b6d7=new RegExp(_0x218a4e[_0x1e2200(0x3d0)](_0x2f14c7),'i');_0xe574cc[_0x250307]=_0x50b6d7;}}const _0x5a296=[[_0x1e2200(0x887),'JS\x20%1START\x20BATTLE'],[_0x1e2200(0x4c3),_0x1e2200(0x5f5)],[_0x1e2200(0x86c),'JS\x20BATTLE\x20VICTORY'],[_0x1e2200(0xa57),_0x1e2200(0x216)],[_0x1e2200(0x64b),_0x1e2200(0xcd1)],[_0x1e2200(0x92d),_0x1e2200(0x58a)],['%1StartTurnJS',_0x1e2200(0x1ad)],[_0x1e2200(0x144),_0x1e2200(0x61f)],[_0x1e2200(0x61e),_0x1e2200(0x712)]];for(const _0x126cc9 of _0x5a296){if(_0x1e2200(0xcf7)==='TetLQ')return!![];else for(const _0x5d0c68 of _0x21ea1e){const _0x2c8d5a=_0x126cc9[0x0][_0x1e2200(0x3d0)](_0x5d0c68[0x0]),_0xd5108e=_0x126cc9[0x1][_0x1e2200(0x3d0)](_0x5d0c68[0x1]),_0x5dfe30=new RegExp(_0x218a4e[_0x1e2200(0x3d0)](_0xd5108e),'i');_0xe574cc[_0x2c8d5a]=_0x5dfe30;}}},Scene_Boot['prototype'][_0x12d94d(0x646)]=function(){const _0x327687=_0x12d94d,_0x22f3e1=$dataSkills['concat']($dataItems);for(const _0x5cf1de of _0x22f3e1){if(_0x327687(0x8c1)===_0x327687(0x8c1)){if(!_0x5cf1de)continue;VisuMZ[_0x327687(0xadf)][_0x327687(0x225)](_0x5cf1de);}else _0x106aea+=_0x55b0c4,_0xaef4b+=_0x342984;}},Scene_Boot[_0x12d94d(0x4e9)][_0x12d94d(0x285)]=function(){const _0x1d8dd3=_0x12d94d,_0x464f80=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x4c1016 of _0x464f80){if(!_0x4c1016)continue;VisuMZ['BattleCore'][_0x1d8dd3(0x5f4)](_0x4c1016);}},Scene_Boot[_0x12d94d(0x4e9)][_0x12d94d(0x62f)]=function(){const _0x53431b=_0x12d94d,_0x367232=VisuMZ[_0x53431b(0xadf)][_0x53431b(0xb08)][_0x53431b(0x9d2)][_0x53431b(0xbe0)],_0x10a5c9=[];for(const _0x2b1f1a of _0x367232){const _0x30453a=$dataTroops[_0x2b1f1a];if(_0x30453a)_0x10a5c9[_0x53431b(0xbce)](JsonEx[_0x53431b(0xb77)](_0x30453a));}for(const _0x4fda4d of $dataTroops){if(!_0x4fda4d)continue;for(const _0x372a2d of _0x10a5c9){if(_0x53431b(0x2da)===_0x53431b(0x415)){if(this[_0x53431b(0xd24)]>0x0){const _0x730482=this[_0x53431b(0xd24)],_0x244494=this[_0x53431b(0x551)];_0x244494['x']=(_0x244494['x']*(_0x730482-0x1)+this['_borderPortraitTargetX'])/_0x730482,_0x244494[_0x53431b(0x9a8)]=(_0x244494['opacity']*(_0x730482-0x1)+0xff)/_0x730482,this[_0x53431b(0xd24)]--;}}else{if(_0x372a2d['id']===_0x4fda4d['id'])continue;_0x4fda4d[_0x53431b(0xa22)]=_0x4fda4d[_0x53431b(0xa22)][_0x53431b(0xa0b)](_0x372a2d[_0x53431b(0xa22)]);}}}},Scene_Boot['prototype'][_0x12d94d(0x2fd)]=function(){const _0x2b1b78=_0x12d94d,_0x4012ef=VisuMZ[_0x2b1b78(0xadf)][_0x2b1b78(0xb08)]['Mechanics'];if(_0x4012ef[_0x2b1b78(0x4c9)]>0x0&&$dataCommonEvents[_0x4012ef[_0x2b1b78(0x4c9)]]){const _0x210c59=$dataCommonEvents[_0x4012ef[_0x2b1b78(0x4c9)]],_0x271508=_0x210c59[_0x2b1b78(0x7e4)]['length']-0x2,_0x2d3153=_0x210c59[_0x2b1b78(0x7e4)][_0x271508];if(_0x2d3153&&_0x2d3153['code']!==0xe6){const _0x522d66={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3f51be=_0x210c59[_0x2b1b78(0x7e4)]['pop']();_0x210c59[_0x2b1b78(0x7e4)][_0x2b1b78(0x29d)](_0x522d66),_0x210c59['list'][_0x2b1b78(0x29d)](_0x3f51be);}}},Scene_Boot[_0x12d94d(0x4e9)][_0x12d94d(0x50f)]=function(){const _0x46240f=_0x12d94d;VisuMZ[_0x46240f(0xadf)]['CreateCommonEventKeys'](),VisuMZ[_0x46240f(0xadf)][_0x46240f(0x43d)]($dataSkills),VisuMZ[_0x46240f(0xadf)][_0x46240f(0x43d)]($dataItems);},VisuMZ['BattleCore']['CreateCommonEventKeys']=function(){const _0x4d1944=_0x12d94d;VisuMZ['BattleCore'][_0x4d1944(0x463)]={};for(const _0x29d989 of $dataCommonEvents){if(!_0x29d989)continue;if(_0x29d989[_0x4d1944(0x536)][_0x4d1944(0x214)](/\[(.*)\]/i)){let _0x46c657=String(RegExp['$1'])[_0x4d1944(0xae8)](/,/g,'')[_0x4d1944(0x97e)]()[_0x4d1944(0xc39)]();VisuMZ[_0x4d1944(0xadf)][_0x4d1944(0x463)][_0x46c657]=_0x29d989['id'];}}},VisuMZ[_0x12d94d(0xadf)]['BindCommonEventKeysForGroup']=function(_0x373e4d){const _0x832fc9=_0x12d94d;for(const _0x41bb32 of _0x373e4d){if(!_0x41bb32)continue;VisuMZ[_0x832fc9(0xadf)][_0x832fc9(0x535)](_0x41bb32);}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x535)]=function(_0x256bf4){const _0x471de8=_0x12d94d;if(!_0x256bf4)return;if(!_0x256bf4[_0x471de8(0x84d)])return;VisuMZ['BattleCore'][_0x471de8(0x463)]=VisuMZ['BattleCore'][_0x471de8(0x463)]||{};const _0x4be3f5=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x5cf7ec=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x46f8e2=[];const _0x581820=_0x256bf4[_0x471de8(0x7ba)]['match'](_0x4be3f5);if(_0x581820){for(const _0x597a8b of _0x581820){_0x597a8b[_0x471de8(0x214)](_0x4be3f5);const _0x52be9f=String(RegExp['$1'])['split'](',')['map'](_0x48799a=>String(_0x48799a)['toUpperCase']()[_0x471de8(0xc39)]());_0x46f8e2=_0x46f8e2[_0x471de8(0xa0b)](_0x52be9f);}!_0x256bf4[_0x471de8(0x7ba)][_0x471de8(0x214)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x256bf4[_0x471de8(0x7ba)]+=_0x471de8(0x993));;}if(_0x256bf4[_0x471de8(0x7ba)]['match'](_0x5cf7ec)){if('qasjQ'!=='xdoHF'){const _0x2b1907=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x471de8(0x43b)](_0x1b2254=>String(_0x1b2254)[_0x471de8(0x97e)]()[_0x471de8(0xc39)]());_0x46f8e2=_0x46f8e2['concat'](_0x2b1907);!_0x256bf4[_0x471de8(0x7ba)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x256bf4[_0x471de8(0x7ba)]+=_0x471de8(0x993));;}else{_0x2a26a0['prototype']['show'][_0x471de8(0xba3)](this);if(!_0x4eaefa[_0x471de8(0x701)]())this[_0x471de8(0x498)]();}}for(const _0x258903 of _0x46f8e2){if(VisuMZ[_0x471de8(0xadf)][_0x471de8(0x463)][_0x258903]){const _0x4e57ad=VisuMZ['BattleCore'][_0x471de8(0x463)][_0x258903],_0x2d071a={'code':0x2c,'dataId':_0x4e57ad,'value1':0x1,'value2':0x0};_0x256bf4['effects'][_0x471de8(0xbce)](_0x2d071a);}}},Scene_Boot[_0x12d94d(0x4e9)][_0x12d94d(0x97d)]=function(){const _0x447d5b=_0x12d94d,_0x156f45=$dataSkills[_0x447d5b(0xa0b)]($dataItems);for(const _0x34373c of _0x156f45){if(!_0x34373c)continue;VisuMZ[_0x447d5b(0xadf)][_0x447d5b(0x3eb)](_0x34373c);}},VisuMZ['BattleCore'][_0x12d94d(0xbf0)]=VisuMZ[_0x12d94d(0xbf0)],VisuMZ['ParseActorNotetags']=function(_0x42b43e){const _0x12db71=_0x12d94d;if(VisuMZ['BattleCore'][_0x12db71(0xbf0)]){if(_0x12db71(0xc52)!==_0x12db71(0xc52)){const _0x5515b8=_0x9808c8[_0x12db71(0xb77)](_0x70039);_0x5515b8['missed']=![],_0x5515b8[_0x12db71(0xc2)]=![],_0x5515b8[_0x12db71(0xb11)]=![],this[_0x12db71(0x596)][_0x12db71(0xbce)](_0x5515b8);}else VisuMZ[_0x12db71(0xadf)][_0x12db71(0xbf0)][_0x12db71(0xba3)](this,_0x42b43e);}VisuMZ[_0x12db71(0xadf)]['Parse_Notetags_TraitObjects'](_0x42b43e);},VisuMZ[_0x12d94d(0xadf)]['ParseClassNotetags']=VisuMZ[_0x12d94d(0xada)],VisuMZ[_0x12d94d(0xada)]=function(_0x26ac87){const _0x5fe11a=_0x12d94d;VisuMZ[_0x5fe11a(0xadf)][_0x5fe11a(0xada)]&&(_0x5fe11a(0xcca)==='dcVgn'?(_0x48865f=_0x31cd84[_0x5fe11a(0xae8)](/\x1I\[(\d+)\]/gi,''),_0x414e9b=_0x153d35[_0x5fe11a(0xae8)](/\\I\[(\d+)\]/gi,'')):VisuMZ[_0x5fe11a(0xadf)][_0x5fe11a(0xada)][_0x5fe11a(0xba3)](this,_0x26ac87)),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x26ac87);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x23f)]=VisuMZ[_0x12d94d(0x23f)],VisuMZ[_0x12d94d(0x23f)]=function(_0x2973a8){const _0x30229d=_0x12d94d;if(VisuMZ[_0x30229d(0xadf)][_0x30229d(0x23f)]){if(_0x30229d(0x537)!==_0x30229d(0x7de))VisuMZ[_0x30229d(0xadf)]['ParseSkillNotetags'][_0x30229d(0xba3)](this,_0x2973a8);else{const _0x43d53c=_0x252db3[_0x30229d(0xcec)][0x0];if(_0x43d53c[_0x30229d(0x214)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}VisuMZ[_0x30229d(0xadf)][_0x30229d(0x225)](_0x2973a8),VisuMZ[_0x30229d(0xadf)]['Parse_Notetags_Targets'](_0x2973a8);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xbb)]=VisuMZ[_0x12d94d(0xbb)],VisuMZ[_0x12d94d(0xbb)]=function(_0x206b3a){const _0x21a7de=_0x12d94d;VisuMZ['BattleCore'][_0x21a7de(0xbb)]&&VisuMZ[_0x21a7de(0xadf)][_0x21a7de(0xbb)][_0x21a7de(0xba3)](this,_0x206b3a),VisuMZ[_0x21a7de(0xadf)][_0x21a7de(0x225)](_0x206b3a),VisuMZ['BattleCore']['Parse_Notetags_Targets'](_0x206b3a);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x95f)]=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x12d94d(0x95f)]=function(_0x1e48d6){const _0x1fe1e5=_0x12d94d;VisuMZ[_0x1fe1e5(0xadf)][_0x1fe1e5(0x95f)]&&VisuMZ[_0x1fe1e5(0xadf)][_0x1fe1e5(0x95f)][_0x1fe1e5(0xba3)](this,_0x1e48d6),VisuMZ[_0x1fe1e5(0xadf)][_0x1fe1e5(0x5f4)](_0x1e48d6);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x1b0)]=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x12d94d(0x1b0)]=function(_0x2d7504){const _0x10d079=_0x12d94d;VisuMZ[_0x10d079(0xadf)][_0x10d079(0x1b0)]&&(_0x10d079(0x355)==='hIkkG'?_0x25e16a=_0x16afa7[_0x10d079(0x11b)]:VisuMZ[_0x10d079(0xadf)][_0x10d079(0x1b0)][_0x10d079(0xba3)](this,_0x2d7504)),VisuMZ['BattleCore'][_0x10d079(0x5f4)](_0x2d7504);},VisuMZ['BattleCore'][_0x12d94d(0x9fd)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x12d94d(0x9fd)]=function(_0xd246af){const _0x15cdea=_0x12d94d;if(VisuMZ['BattleCore']['ParseEnemyNotetags']){if(_0x15cdea(0x110)===_0x15cdea(0x110))VisuMZ[_0x15cdea(0xadf)]['ParseEnemyNotetags']['call'](this,_0xd246af);else{if(!_0x2b8c57[_0x15cdea(0xb92)]())return;const _0x1f8b14=_0x4c8754['getLastPluginCommandInterpreter'](),_0x200dbc=_0xecbb83['_logWindow'];_0x200dbc[_0x15cdea(0x9f4)](),_0x1f8b14[_0x15cdea(0xb30)](_0x15cdea(0x54d));}}VisuMZ['BattleCore'][_0x15cdea(0x5f4)](_0xd246af);},VisuMZ[_0x12d94d(0xadf)]['ParseStateNotetags']=VisuMZ[_0x12d94d(0xc87)],VisuMZ['ParseStateNotetags']=function(_0x2de0a1){const _0x288ff1=_0x12d94d;VisuMZ['BattleCore'][_0x288ff1(0xc87)]&&('lDbjw'!==_0x288ff1(0x107)?VisuMZ['BattleCore'][_0x288ff1(0xc87)][_0x288ff1(0xba3)](this,_0x2de0a1):(_0x5e15a1[_0x288ff1(0x4e9)][_0x288ff1(0xba4)][_0x288ff1(0xba3)](this),this['updateLink'](),this[_0x288ff1(0xa8e)](),this[_0x288ff1(0xc04)](),this['updateOpacity']())),VisuMZ['BattleCore'][_0x288ff1(0x5f4)](_0x2de0a1);},VisuMZ['BattleCore'][_0x12d94d(0x225)]=function(_0x3c0990){const _0x1d2058=_0x12d94d,_0x5c56a6=[_0x1d2058(0x66f),_0x1d2058(0xbde),'PreDamageJS',_0x1d2058(0x2d7),_0x1d2058(0x3bb),_0x1d2058(0x911),_0x1d2058(0xb41),_0x1d2058(0x79f)];for(const _0x8c2837 of _0x5c56a6){_0x1d2058(0x835)!=='suTKj'?VisuMZ['BattleCore'][_0x1d2058(0x479)](_0x3c0990,_0x8c2837):this[_0x1d2058(0x816)]='xp';}const _0x1a816a=_0x3c0990[_0x1d2058(0x7ba)];_0x1a816a[_0x1d2058(0x214)](/<ALWAYS CRITICAL/i)&&(_0x3c0990[_0x1d2058(0x1df)][_0x1d2058(0x433)]=!![]),_0x1a816a['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x3c0990[_0x1d2058(0x413)]=Math[_0x1d2058(0x660)](0x1,Number(RegExp['$1']))),_0x1a816a['match'](/<TARGET:[ ](.*)>/i)&&(_0x3c0990[_0x1d2058(0xbad)]=String(RegExp['$1'])[_0x1d2058(0x97e)]()[_0x1d2058(0xc39)]());},VisuMZ['BattleCore'][_0x12d94d(0x5f4)]=function(_0x568925){const _0x588900=_0x12d94d,_0x2a629c=['PreApplyAsUserJS',_0x588900(0x62d),_0x588900(0xbe4),_0x588900(0xc16),_0x588900(0xa30),_0x588900(0x1d2),_0x588900(0x13d),_0x588900(0x7a4),'PreStartActionJS',_0x588900(0x911),'PreEndActionJS',_0x588900(0x79f),'PreStartBattleJS',_0x588900(0xa33),_0x588900(0x27e),_0x588900(0xb0b),_0x588900(0x86c),'BattleDefeatJS',_0x588900(0x64b),_0x588900(0x92d),'PreStartTurnJS',_0x588900(0x9f7),'PreEndTurnJS',_0x588900(0xa89),'PreRegenerateJS',_0x588900(0xab9)];for(const _0x4250fa of _0x2a629c){VisuMZ['BattleCore']['createJS'](_0x568925,_0x4250fa);}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x3eb)]=function(_0x524bb4){const _0x439775=_0x12d94d,_0x4942a1=_0x524bb4[_0x439775(0x7ba)];if(_0x4942a1['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0xc44338=String(RegExp['$1']),_0x4997d=VisuMZ[_0x439775(0xadf)][_0x439775(0x365)](_0x524bb4,'Targets');VisuMZ[_0x439775(0xadf)][_0x439775(0x88f)](_0xc44338,_0x4997d);}if(_0x4942a1[_0x439775(0x214)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x439775(0x7f9)!==_0x439775(0x7f9)){if(!_0x8cc28[_0x439775(0xb92)]())return;_0x10456c['ConvertParams'](_0x5565b2,_0x3b96aa);const _0x38f50a=_0x43907f[_0x439775(0x664)](),_0x45e5a1=_0x4fcf36['_subject'],_0x591f84=_0x372415[_0x439775(0xd16)](_0x504e0b[_0x439775(0xc0)]),_0x234495=_0xb09ff['Mirror'],_0x655a34=_0x4f9d3e[_0x439775(0xf5)];if(!_0x38f50a||!_0x45e5a1)return;const _0x539dd3=_0x45e5a1[_0x439775(0x9d1)]();_0x4fed52[_0x439775(0x58d)](_0x591f84,_0x539dd3,_0x234495),_0x850804['WaitForAnimation']&&_0x38f50a[_0x439775(0xb30)](_0x439775(0x2c1));}else{const _0x4df107=String(RegExp['$1']),_0x33abc8=VisuMZ[_0x439775(0xadf)]['createKeyJS'](_0x524bb4,_0x439775(0x41f));VisuMZ[_0x439775(0xadf)]['createCommandVisibleJS'](_0x4df107,_0x33abc8);}}},VisuMZ[_0x12d94d(0xadf)]['JS']={},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x479)]=function(_0x374fc4,_0x194179){const _0x214e9b=_0x12d94d,_0x23e35f=_0x374fc4['note'];if(_0x23e35f[_0x214e9b(0x214)](VisuMZ['BattleCore']['RegExp'][_0x194179])){const _0x3f4911=RegExp['$1'],_0x5c1020=_0x214e9b(0x1fc)['format'](_0x3f4911),_0x3b25ce=VisuMZ[_0x214e9b(0xadf)][_0x214e9b(0x365)](_0x374fc4,_0x194179);VisuMZ[_0x214e9b(0xadf)]['JS'][_0x3b25ce]=new Function(_0x5c1020);}},VisuMZ['BattleCore'][_0x12d94d(0x365)]=function(_0xe7075c,_0x11d548){const _0x12f4d8=_0x12d94d;if(VisuMZ['createKeyJS'])return VisuMZ[_0x12f4d8(0x365)](_0xe7075c,_0x11d548);let _0x4f3b36='';if($dataActors[_0x12f4d8(0x511)](_0xe7075c))_0x4f3b36=_0x12f4d8(0x477)[_0x12f4d8(0x3d0)](_0xe7075c['id'],_0x11d548);if($dataClasses[_0x12f4d8(0x511)](_0xe7075c))_0x4f3b36=_0x12f4d8(0x4c5)[_0x12f4d8(0x3d0)](_0xe7075c['id'],_0x11d548);if($dataSkills[_0x12f4d8(0x511)](_0xe7075c))_0x4f3b36='Skill-%1-%2'[_0x12f4d8(0x3d0)](_0xe7075c['id'],_0x11d548);if($dataItems['includes'](_0xe7075c))_0x4f3b36=_0x12f4d8(0xa32)[_0x12f4d8(0x3d0)](_0xe7075c['id'],_0x11d548);if($dataWeapons[_0x12f4d8(0x511)](_0xe7075c))_0x4f3b36=_0x12f4d8(0x7ee)[_0x12f4d8(0x3d0)](_0xe7075c['id'],_0x11d548);if($dataArmors[_0x12f4d8(0x511)](_0xe7075c))_0x4f3b36=_0x12f4d8(0xc4c)[_0x12f4d8(0x3d0)](_0xe7075c['id'],_0x11d548);if($dataEnemies[_0x12f4d8(0x511)](_0xe7075c))_0x4f3b36=_0x12f4d8(0xcac)[_0x12f4d8(0x3d0)](_0xe7075c['id'],_0x11d548);if($dataStates[_0x12f4d8(0x511)](_0xe7075c))_0x4f3b36=_0x12f4d8(0x874)[_0x12f4d8(0x3d0)](_0xe7075c['id'],_0x11d548);return _0x4f3b36;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x88f)]=function(_0x596eb2,_0x27093c){const _0x88b107=_0x12d94d,_0x2e6a1c=_0x88b107(0xbb2)['format'](_0x596eb2);VisuMZ[_0x88b107(0xadf)]['JS'][_0x27093c]=new Function(_0x2e6a1c);},VisuMZ['BattleCore'][_0x12d94d(0xa69)]=function(_0x56550f,_0x3e4712){const _0x433cb4=_0x12d94d,_0x527729=_0x433cb4(0xa90)[_0x433cb4(0x3d0)](_0x56550f);VisuMZ[_0x433cb4(0xadf)]['JS'][_0x3e4712]=new Function(_0x527729);},TextManager[_0x12d94d(0x7f7)]=VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0xa88)][_0x12d94d(0x2d8)],TextManager['autoBattleStart']=VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0xa50)][_0x12d94d(0x287)],TextManager[_0x12d94d(0x5f8)]=VisuMZ['BattleCore']['Settings']['AutoBattle'][_0x12d94d(0x74e)],TextManager[_0x12d94d(0x351)]=VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0x757)]['Name'],ColorManager['getColor']=function(_0x16cf8c){const _0x592335=_0x12d94d;return _0x16cf8c=String(_0x16cf8c),_0x16cf8c['match'](/#(.*)/i)?_0x592335(0x4c2)['format'](String(RegExp['$1'])):this['textColor'](Number(_0x16cf8c));},DataManager['getDamageStyle']=function(_0x7e4a9e){const _0x2c4721=_0x12d94d;if(_0x7e4a9e[_0x2c4721(0x7ba)][_0x2c4721(0x214)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x4b5cc3=String(RegExp['$1'])[_0x2c4721(0x97e)]()[_0x2c4721(0xc39)]();if(_0x4b5cc3===_0x2c4721(0x554))return _0x2c4721(0x554);if(VisuMZ[_0x2c4721(0x659)][_0x4b5cc3])return _0x4b5cc3;}const _0xcb0706=VisuMZ[_0x2c4721(0xadf)][_0x2c4721(0xb08)]['Damage'][_0x2c4721(0xa6b)][_0x2c4721(0x97e)]()['trim']();if(VisuMZ[_0x2c4721(0x659)][_0xcb0706])return _0xcb0706;return _0x2c4721(0x554);},DataManager[_0x12d94d(0x8ef)]=function(_0x13d962){const _0x3cb7b4=_0x12d94d;_0x13d962=_0x13d962['toUpperCase']()[_0x3cb7b4(0xc39)](),this[_0x3cb7b4(0x242)]=this[_0x3cb7b4(0x242)]||{};if(this['_stypeIDs'][_0x13d962])return this['_stypeIDs'][_0x13d962];for(let _0x5f10f7=0x1;_0x5f10f7<0x64;_0x5f10f7++){if(!$dataSystem['skillTypes'][_0x5f10f7])continue;let _0x565b7e=$dataSystem[_0x3cb7b4(0x634)][_0x5f10f7][_0x3cb7b4(0x97e)]()['trim']();_0x565b7e=_0x565b7e[_0x3cb7b4(0xae8)](/\x1I\[(\d+)\]/gi,''),_0x565b7e=_0x565b7e[_0x3cb7b4(0xae8)](/\\I\[(\d+)\]/gi,''),this[_0x3cb7b4(0x242)][_0x565b7e]=_0x5f10f7;}return this[_0x3cb7b4(0x242)][_0x13d962]||0x0;},DataManager[_0x12d94d(0x5b9)]=function(_0x1855c3){const _0x58db68=_0x12d94d;_0x1855c3=_0x1855c3['toUpperCase']()[_0x58db68(0xc39)](),this[_0x58db68(0xc49)]=this[_0x58db68(0xc49)]||{};if(this['_skillIDs'][_0x1855c3])return this[_0x58db68(0xc49)][_0x1855c3];for(const _0x50e32a of $dataSkills){if(!_0x50e32a)continue;this[_0x58db68(0xc49)][_0x50e32a[_0x58db68(0x536)][_0x58db68(0x97e)]()[_0x58db68(0xc39)]()]=_0x50e32a['id'];}return this[_0x58db68(0xc49)][_0x1855c3]||0x0;},DataManager['getEnemyIdWithName']=function(_0xbda6ab){const _0x44dbee=_0x12d94d;_0xbda6ab=_0xbda6ab[_0x44dbee(0x97e)]()[_0x44dbee(0xc39)](),this[_0x44dbee(0x6f6)]=this['_enemyIDs']||{};if(this[_0x44dbee(0x6f6)][_0xbda6ab])return this[_0x44dbee(0x6f6)][_0xbda6ab];for(const _0x707250 of $dataEnemies){if(!_0x707250)continue;this[_0x44dbee(0x6f6)][_0x707250[_0x44dbee(0x536)][_0x44dbee(0x97e)]()[_0x44dbee(0xc39)]()]=_0x707250['id'];}return this[_0x44dbee(0x6f6)][_0xbda6ab]||0x0;},DataManager[_0x12d94d(0x14f)]=function(_0x1e4d61){const _0x386108=_0x12d94d;_0x1e4d61=_0x1e4d61['toUpperCase']()[_0x386108(0xc39)](),this[_0x386108(0x289)]=this[_0x386108(0x289)]||{};if(this[_0x386108(0x289)][_0x1e4d61])return this[_0x386108(0x289)][_0x1e4d61];for(let _0x4ccd65=0x1;_0x4ccd65<0x64;_0x4ccd65++){if(_0x386108(0x7db)===_0x386108(0x7db)){if(!$dataSystem[_0x386108(0x2a6)][_0x4ccd65])continue;let _0x3eff41=$dataSystem[_0x386108(0x2a6)][_0x4ccd65][_0x386108(0x97e)]()['trim']();_0x3eff41=_0x3eff41[_0x386108(0xae8)](/\x1I\[(\d+)\]/gi,''),_0x3eff41=_0x3eff41[_0x386108(0xae8)](/\\I\[(\d+)\]/gi,''),this[_0x386108(0x289)][_0x3eff41]=_0x4ccd65;}else _0x179025[_0x386108(0x96e)]()?_0x6de537[_0x386108(0x4e9)][_0x386108(0x335)][_0x386108(0xba3)](this):_0x24418b[_0x386108(0xadf)][_0x386108(0x9ca)][_0x386108(0xba3)](this);}return this[_0x386108(0x289)][_0x386108(0x771)]=0x0,this[_0x386108(0x289)][_0x1e4d61]||0x0;},DataManager[_0x12d94d(0x35e)]=function(_0x10b5d5){const _0x4d01c5=_0x12d94d,_0x59774d=_0x4d01c5(0x3ae);let _0x3de436=_0x10b5d5[_0x4d01c5(0x8e7)],_0xea873e=_0x10b5d5[_0x4d01c5(0x536)];const _0x31984c=_0x10b5d5['note'];return _0x31984c[_0x4d01c5(0x214)](/<DISPLAY ICON: (\d+)>/i)&&(_0x4d01c5(0x540)!=='LqSim'?this[_0x4d01c5(0x78b)][_0x4d01c5(0xaaf)]()&&this[_0x4d01c5(0x39f)]():_0x3de436=Number(RegExp['$1'])),_0x31984c[_0x4d01c5(0x214)](/<DISPLAY TEXT: (.*)>/i)&&(_0x4d01c5(0x528)!==_0x4d01c5(0x528)?(_0x9da187[_0x4d01c5(0xadf)][_0x4d01c5(0xb08)][_0x4d01c5(0x757)]['ShowEnemyGauge']&&this['createHpGaugeSprite'](),_0x1b42bf[_0x4d01c5(0xadf)][_0x4d01c5(0x3ef)][_0x4d01c5(0xba3)](this)):_0xea873e=String(RegExp['$1'])),_0x59774d[_0x4d01c5(0x3d0)](_0x3de436,_0xea873e);},DataManager['battleCommandName']=function(_0x17deab){const _0x3e3de6=_0x12d94d;return _0x17deab[_0x3e3de6(0x7ba)][_0x3e3de6(0x214)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x17deab[_0x3e3de6(0x536)];},DataManager[_0x12d94d(0xed)]=function(_0xf8af44){const _0x55ce1f=_0x12d94d;return _0xf8af44['note'][_0x55ce1f(0x214)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0xf8af44[_0x55ce1f(0x8e7)];},DataManager[_0x12d94d(0x1ef)]=function(_0x5665bc){const _0xefaff4=_0x12d94d,_0x13e3ef=$dataEnemies[_0x5665bc];if(_0x13e3ef){if('CitKN'==='CitKN'){if(_0x13e3ef['note'][_0xefaff4(0x214)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0xefaff4(0x6f0)!==_0xefaff4(0x4ea)){const _0x1eb455=String(RegExp['$1'])[_0xefaff4(0x5db)](/[\r\n]+/)['remove'](''),_0xe160ad=this[_0xefaff4(0x329)](_0x1eb455);_0x5665bc=this['getEnemyIdWithName'](_0xe160ad)||_0x5665bc,_0x5665bc=DataManager['swapEnemyIDs'](_0x5665bc);}else{if(!_0x24461c[_0xefaff4(0xc7e)]())return![];if(!_0x2075ea[_0xefaff4(0x713)]())return![];if(!_0x5cd514[_0xefaff4(0xc21)]())return![];return _0x3a84d9[_0xefaff4(0xadf)][_0xefaff4(0xb08)][_0xefaff4(0x3dd)][_0xefaff4(0x482)];}}}else!_0x1a541d['isDeathStateAffected']()&&(_0x2ee63b[_0xefaff4(0xaa1)](_0x28a767[0x2],_0x2fdece[0x3]),_0x2d580a[_0xefaff4(0xaa1)](_0x2105b2));}return _0x5665bc;},DataManager[_0x12d94d(0x329)]=function(_0x318aa8){const _0x570970=_0x12d94d;let _0x58026d=0x0;const _0x3af0ff={};for(const _0x53678a of _0x318aa8){if(_0x570970(0x4b2)!==_0x570970(0x7c1)){if(_0x53678a[_0x570970(0x214)](/(.*):[ ](\d+)/i)){if(_0x570970(0x202)===_0x570970(0x202)){const _0x5bc714=String(RegExp['$1'])[_0x570970(0xc39)](),_0x20de5c=Number(RegExp['$2']);_0x3af0ff[_0x5bc714]=_0x20de5c,_0x58026d+=_0x20de5c;}else _0x56e8c2+=_0x5e98f1[_0x570970(0xc83)]()?-_0x444bb:_0x2e736e,_0x54f9e9+=_0x4f696c;}else{if(_0x53678a[_0x570970(0x214)](/(.*):[ ](\d+\.?\d+)/i)){const _0x5f40da=String(RegExp['$1'])['trim'](),_0x3604df=Number(RegExp['$2']);_0x3af0ff[_0x5f40da]=_0x3604df,_0x58026d+=_0x3604df;}else _0x53678a!==''&&(_0x570970(0x150)===_0x570970(0x150)?(_0x3af0ff[_0x53678a]=0x1,_0x58026d++):this[_0x570970(0x1f6)]['x']=_0x3af133[_0x570970(0xa80)]-(_0x5975ea[_0x570970(0xa80)]-_0x57705e['boxWidth'])/0x2-this[_0x570970(0x1f6)][_0x570970(0xa80)]-0x4);}}else{if(!_0x15ea99[_0x570970(0xb92)]())return;const _0xe203de=_0x357ff6[_0x570970(0x664)]();if(!_0xe203de)return;_0xe203de['setWaitMode'](_0x570970(0x784));}}if(_0x58026d<=0x0)return'';let _0x4e5478=Math[_0x570970(0x89)]()*_0x58026d;for(const _0x4c77ba in _0x3af0ff){_0x4e5478-=_0x3af0ff[_0x4c77ba];if(_0x4e5478<=0x0)return _0x4c77ba;}return'';},DataManager[_0x12d94d(0xbdd)]=function(_0x273f8b){const _0x3486fb=_0x12d94d;if(!_0x273f8b)return![];if(!VisuMZ[_0x3486fb(0xadf)][_0x3486fb(0xb08)][_0x3486fb(0x3dd)][_0x3486fb(0x255)])return![];if(_0x273f8b[_0x3486fb(0x7ba)][_0x3486fb(0x214)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x273f8b[_0x3486fb(0x7ba)][_0x3486fb(0x214)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x178303 of _0x273f8b['effects']){if(_0x3486fb(0x10f)===_0x3486fb(0x10f)){if(!_0x178303)continue;if(_0x178303[_0x3486fb(0x6af)]===Game_Action[_0x3486fb(0x650)])return!![];}else{const _0x5230e7=this[_0x3486fb(0x54f)][_0x3486fb(0xa3a)](),_0x4b18a9=_0x5230e7[0x0];return _0x4b18a9[_0x3486fb(0xcd2)]=_0x4b18a9[_0x3486fb(0xcd2)]||[],_0x4b18a9[_0x3486fb(0xcd2)][0x0]=_0x5230e7[0x1],_0x4b18a9;}}return![];},DataManager[_0x12d94d(0xb34)]=function(_0x2bd433){const _0x3ebb4a=_0x12d94d,_0x38ba28=$dataTroops[_0x2bd433];if(!_0x38ba28)return'';let _0x2c51b3='';_0x2c51b3+=_0x38ba28[_0x3ebb4a(0x536)];for(const _0x3d45cf of _0x38ba28[_0x3ebb4a(0xa22)]){if(_0x3ebb4a(0x60a)!==_0x3ebb4a(0x60a))_0x224615[_0x3ebb4a(0x84e)]=[];else for(const _0x51ea9a of _0x3d45cf[_0x3ebb4a(0x7e4)]){_0x3ebb4a(0x891)===_0x3ebb4a(0x891)?[0x6c,0x198]['includes'](_0x51ea9a['code'])&&(_0x3ebb4a(0x99a)===_0x3ebb4a(0x328)?this[_0x3ebb4a(0x644)](0x1):(_0x2c51b3+='\x0a',_0x2c51b3+=_0x51ea9a[_0x3ebb4a(0xcec)][0x0])):this[_0x3ebb4a(0xca3)]['svAnchorY']=_0x3ae0ea[_0x3ebb4a(0x4e9)][_0x3ebb4a(0x687)][_0x3ebb4a(0xba3)](this);}}return _0x2c51b3;},ConfigManager[_0x12d94d(0x506)]=ConfigManager[_0x12d94d(0x506)]??![],ConfigManager[_0x12d94d(0xbe8)]=ConfigManager[_0x12d94d(0xbe8)]??![],ConfigManager[_0x12d94d(0x351)]=ConfigManager[_0x12d94d(0x351)]??!![],VisuMZ[_0x12d94d(0xadf)]['ConfigManager_makeData']=ConfigManager[_0x12d94d(0x4ec)],ConfigManager[_0x12d94d(0x4ec)]=function(){const _0x2f0d7d=_0x12d94d,_0x468a50=VisuMZ[_0x2f0d7d(0xadf)][_0x2f0d7d(0x4b3)][_0x2f0d7d(0xba3)](this);return _0x468a50[_0x2f0d7d(0x506)]=this['autoBattleAtStart'],_0x468a50['autoBattleUseSkills']=this[_0x2f0d7d(0xbe8)],_0x468a50[_0x2f0d7d(0x351)]=this[_0x2f0d7d(0x351)],_0x468a50;},VisuMZ['BattleCore'][_0x12d94d(0xc3)]=ConfigManager[_0x12d94d(0xb1e)],ConfigManager[_0x12d94d(0xb1e)]=function(_0x495a29){const _0x222dd4=_0x12d94d;VisuMZ['BattleCore'][_0x222dd4(0xc3)]['call'](this,_0x495a29);if('autoBattleAtStart'in _0x495a29)this['autoBattleAtStart']=_0x495a29['autoBattleAtStart'];else{if(_0x222dd4(0x3e6)!==_0x222dd4(0x3e6))return this[_0x222dd4(0x596)]['pop']();else this[_0x222dd4(0x506)]=![];}_0x222dd4(0xbe8)in _0x495a29?this[_0x222dd4(0xbe8)]=_0x495a29[_0x222dd4(0xbe8)]:this[_0x222dd4(0xbe8)]=![],_0x222dd4(0x351)in _0x495a29?_0x222dd4(0x627)===_0x222dd4(0x65f)?this[_0x222dd4(0xa7f)]():this[_0x222dd4(0x351)]=_0x495a29[_0x222dd4(0x351)]:this[_0x222dd4(0x351)]=!![];},ImageManager[_0x12d94d(0x9dd)]=ImageManager[_0x12d94d(0x9dd)]||0x9,ImageManager[_0x12d94d(0x3fd)]=ImageManager[_0x12d94d(0x3fd)]||0x6,VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xbe3)]=BattleManager[_0x12d94d(0x5bb)],BattleManager['setup']=function(_0x4df4ca,_0x13e6f6,_0x72e2ce){const _0x1c98b8=_0x12d94d;VisuMZ['BattleCore']['BattleManager_setup'][_0x1c98b8(0xba3)](this,_0x4df4ca,_0x13e6f6,_0x72e2ce),this[_0x1c98b8(0x46a)]={};},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xcb3)]=BattleManager[_0x12d94d(0x7e6)],BattleManager['initMembers']=function(){const _0x415bdd=_0x12d94d;VisuMZ[_0x415bdd(0xadf)]['BattleManager_initMembers'][_0x415bdd(0xba3)](this),this[_0x415bdd(0x54f)]=[];},BattleManager[_0x12d94d(0x6b0)]=function(){const _0x10c7b1=_0x12d94d;if(!SceneManager[_0x10c7b1(0xb92)]())return;const _0x2c66fb=SceneManager[_0x10c7b1(0x592)][_0x10c7b1(0xcbc)];if(_0x2c66fb)_0x2c66fb['requestRefresh']();},BattleManager[_0x12d94d(0x958)]=function(){const _0x3e5836=_0x12d94d;if(BattleManager[_0x3e5836(0xcda)]())return _0x3e5836(0x18c);return _0x3e5836(0xa02);},BattleManager[_0x12d94d(0x14b)]=function(_0x4de858){const _0x3397e8=_0x12d94d;return _0x4de858=_0x4de858[_0x3397e8(0x97e)]()['trim'](),this['battleSys']()===_0x4de858;},BattleManager[_0x12d94d(0x66d)]=function(){const _0x5098c8=_0x12d94d;return this[_0x5098c8(0x14b)](_0x5098c8(0xa02));},BattleManager['isTurnBased']=function(){return this['isDTB']();},BattleManager[_0x12d94d(0x4cf)]=function(){const _0x52a930=_0x12d94d;return!this[_0x52a930(0xc91)]();},BattleManager[_0x12d94d(0x76)]=function(){const _0x548171=_0x12d94d;return!this[_0x548171(0xc91)]()&&!this[_0x548171(0x4cf)]();},BattleManager[_0x12d94d(0xbe)]=function(_0x230f11){const _0xb80781=_0x12d94d;this[_0xb80781(0x46a)]=this[_0xb80781(0x46a)]||{};if(this[_0xb80781(0x46a)][_0x230f11]!==undefined)return this[_0xb80781(0x46a)][_0x230f11];this['_battlerKeyCache'][_0x230f11]=null;const _0x23ecf8=this[_0xb80781(0xbee)](),_0x2cd8bc=_0x23ecf8[_0xb80781(0x97c)](_0x257d52=>_0x257d52['battlerKey']()===_0x230f11);if(_0x2cd8bc)this[_0xb80781(0x46a)][_0x230f11]=_0x2cd8bc;return this[_0xb80781(0x46a)][_0x230f11];},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x245)]=function(){const _0x97e84b=_0x12d94d;return _0x97e84b(0x215)['format'](this[_0x97e84b(0xc83)]()?_0x97e84b(0xaa2):_0x97e84b(0x673),this['name']());},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x305)]=function(_0x520d54){const _0x255b35=_0x12d94d;if(this[_0x255b35(0x737)]!=='')return;if(typeof _0x520d54===_0x255b35(0x304)){if('kwwoj'===_0x255b35(0x102)){this['_flashColor']=_0x327cd0[_0x255b35(0xcf5)]||[0x0,0x0,0x0,0x0],this[_0x255b35(0x10c)]=_0x41cf9c[_0x255b35(0xb77)](this[_0x255b35(0x10c)]),this[_0x255b35(0xb86)]=_0x1099cd[_0x255b35(0x5a5)]||0x0;const _0x2cdbb1=this[_0x255b35(0x1ff)](),_0x39a2bd=_0x1d5e43[_0x255b35(0x28f)](_0x2cdbb1*0x1e),_0x3d99c8=this[_0x255b35(0x6de)](_0x39a2bd,_0x2cdbb1);_0x3d99c8['bitmap'][_0x255b35(0x809)]=_0x20e878[_0x255b35(0x8ae)](_0xc0b5a7['textColor']),_0x3d99c8[_0x255b35(0x222)][_0x255b35(0x89d)](_0x165e38,0x0,0x0,_0x39a2bd,_0x2cdbb1,_0x255b35(0xae7)),_0x3d99c8['dy']=0x0;}else this[_0x255b35(0x737)]=_0x520d54[_0x255b35(0x541)]()[_0x255b35(0xc39)]();}else _0x255b35(0xbb5)===_0x255b35(0xbb5)?this[_0x255b35(0x737)]=_0x520d54[_0x255b35(0x245)]():(this['_homeX']=(this['_homeX']*(_0x561f4f-0x1)+this[_0x255b35(0x8ca)])/_0x43bfce,this['_homeY']=(this['_homeY']*(_0x156f7c-0x1)+this[_0x255b35(0x947)])/_0x3c34af);},Game_Action[_0x12d94d(0x4e9)]['getBattlerKeyTargets']=function(){const _0x3d1ade=_0x12d94d;return[this[_0x3d1ade(0xaf6)]()];},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xaf6)]=function(){const _0x206b1c=_0x12d94d,_0x263b2c=this[_0x206b1c(0x737)]||'',_0x224aad=BattleManager[_0x206b1c(0xbe)](_0x263b2c);if(!_0x224aad)return this[_0x206b1c(0x32d)]();if(!_0x224aad['isAlive']())return this[_0x206b1c(0x32d)]();return _0x224aad;},Game_Action[_0x12d94d(0x4e9)]['getBattlerKeyTargetReplacement']=function(){const _0x251bf8=_0x12d94d,_0x1f23e0=this['_targetBattlerKey'];return _0x1f23e0[_0x251bf8(0x214)](/ACTOR/i)?this['friendsUnit']()['trueRandomTarget']():this[_0x251bf8(0x297)]()[_0x251bf8(0xcd8)]();},BattleManager['selectedBattlers']=function(){const _0x10d134=_0x12d94d;return this[_0x10d134(0xbee)]()['filter'](_0x35534a=>_0x35534a['isSelected']());},BattleManager[_0x12d94d(0x371)]=function(_0x45664a){const _0x2bda54=_0x12d94d;_0x45664a===_0x2bda54(0x86c)&&(this[_0x2bda54(0x6e6)]=!![]),$gameParty[_0x2bda54(0x371)](_0x45664a),$gameTroop['processBattleCoreJS'](_0x45664a);},VisuMZ['BattleCore'][_0x12d94d(0x858)]=BattleManager[_0x12d94d(0x553)],BattleManager[_0x12d94d(0x553)]=function(){const _0xafa2f2=_0x12d94d;this[_0xafa2f2(0x866)]=![],this[_0xafa2f2(0x342)]=ConfigManager[_0xafa2f2(0x506)],this[_0xafa2f2(0x6e6)]=![],this[_0xafa2f2(0x371)](_0xafa2f2(0x1b5)),VisuMZ[_0xafa2f2(0xadf)][_0xafa2f2(0x858)][_0xafa2f2(0xba3)](this),this['processBattleCoreJS'](_0xafa2f2(0xa33));},BattleManager[_0x12d94d(0x6db)]=function(_0x58149a){const _0x2ed2cf=_0x12d94d,_0x49ee61=VisuMZ['BattleCore']['Settings'][_0x2ed2cf(0x9d2)];_0x58149a!==_0x2ed2cf(0x76f)&&_0x49ee61[_0x2ed2cf(0xc71)]&&VisuMZ[_0x2ed2cf(0xadf)][_0x2ed2cf(0x738)](_0x49ee61[_0x2ed2cf(0xc71)])&&$gameTemp[_0x2ed2cf(0xb9f)](_0x49ee61['BattleEndEvent']);const _0x58d602='%1Event'['format'](_0x58149a);_0x49ee61[_0x58d602]&&VisuMZ[_0x2ed2cf(0xadf)][_0x2ed2cf(0x738)](_0x49ee61[_0x58d602])&&$gameTemp[_0x2ed2cf(0xb9f)](_0x49ee61[_0x58d602]);},VisuMZ[_0x12d94d(0xadf)]['BattleManager_checkBattleEnd']=BattleManager[_0x12d94d(0x7a9)],BattleManager[_0x12d94d(0x7a9)]=function(){const _0x2a9870=_0x12d94d;if(this[_0x2a9870(0xae9)]===_0x2a9870(0x67a)){if($gameTemp[_0x2a9870(0xa48)]())return![];}return VisuMZ['BattleCore'][_0x2a9870(0x46b)][_0x2a9870(0xba3)](this);},VisuMZ['BattleCore']['BattleManager_processVictory']=BattleManager['processVictory'],BattleManager[_0x12d94d(0xd26)]=function(){const _0x2b291d=_0x12d94d;this[_0x2b291d(0x6e6)]=!![],this[_0x2b291d(0x371)](_0x2b291d(0x86c)),VisuMZ[_0x2b291d(0xadf)][_0x2b291d(0xb5b)][_0x2b291d(0xba3)](this),this[_0x2b291d(0x6db)](_0x2b291d(0x12c));},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x6df)]=BattleManager[_0x12d94d(0x179)],BattleManager[_0x12d94d(0x179)]=function(){const _0x2c9f98=_0x12d94d;this[_0x2c9f98(0x6e6)]=!![],VisuMZ['BattleCore'][_0x2c9f98(0x6df)][_0x2c9f98(0xba3)](this);},VisuMZ['BattleCore'][_0x12d94d(0x36d)]=BattleManager[_0x12d94d(0x84f)],BattleManager[_0x12d94d(0x84f)]=function(){const _0x1870c6=_0x12d94d;this[_0x1870c6(0x6e6)]=!![],this[_0x1870c6(0x371)](_0x1870c6(0xa57)),VisuMZ[_0x1870c6(0xadf)]['BattleManager_processDefeat']['call'](this),this[_0x1870c6(0x6db)]('Defeat');},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x15a)]=BattleManager['endBattle'],BattleManager[_0x12d94d(0xb6b)]=function(_0x4a2e3e){const _0x2ab65f=_0x12d94d;this['_endBattle']=!![],this[_0x2ab65f(0x342)]=![],this[_0x2ab65f(0x371)](_0x2ab65f(0x27e)),VisuMZ[_0x2ab65f(0xadf)][_0x2ab65f(0x15a)][_0x2ab65f(0xba3)](this,_0x4a2e3e),this['processBattleCoreJS'](_0x2ab65f(0xb0b));},VisuMZ['BattleCore'][_0x12d94d(0xb2c)]=BattleManager[_0x12d94d(0x32a)],BattleManager['startTurn']=function(){const _0x4fe88f=_0x12d94d;if(this['isTurnBased']())this[_0x4fe88f(0x371)](_0x4fe88f(0x9b3));VisuMZ[_0x4fe88f(0xadf)][_0x4fe88f(0xb2c)][_0x4fe88f(0xba3)](this);if(this[_0x4fe88f(0xc91)]())this[_0x4fe88f(0x371)](_0x4fe88f(0x9f7));},BattleManager[_0x12d94d(0x810)]=function(){const _0x217847=_0x12d94d,_0x5db0c2=this[_0x217847(0xa37)],_0x42792f=_0x5db0c2[_0x217847(0x5bf)]();_0x42792f?_0x217847(0x4a9)!==_0x217847(0x574)?(_0x42792f['prepare'](),_0x42792f[_0x217847(0x4ee)]()?(this[_0x217847(0x648)](),_0x5db0c2[_0x217847(0x431)]()):(_0x5db0c2[_0x217847(0x431)](),this[_0x217847(0x246)]())):(this[_0x217847(0x637)](),this[_0x217847(0xcd6)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x217847(0xc1b)](),_0x262cc0[_0x217847(0xadf)][_0x217847(0x5ed)][_0x217847(0xba3)](this),this[_0x217847(0xc0d)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x217847(0x2fd)](),this[_0x217847(0x50f)]()):(this[_0x217847(0x246)](),this[_0x217847(0xa37)]=null);},VisuMZ['BattleCore']['BattleManager_startAction']=BattleManager[_0x12d94d(0x648)],BattleManager[_0x12d94d(0x648)]=function(){const _0x5efee2=_0x12d94d,_0x2fbcb6=this[_0x5efee2(0xa37)][_0x5efee2(0x5bf)](),_0x5d283c=this[_0x5efee2(0xa37)];if(_0x2fbcb6&&_0x2fbcb6[_0x5efee2(0xc1)]()===_0x5d283c){if(_0x5efee2(0x453)!==_0x5efee2(0x453)){if(!_0x4e07b5[_0x5efee2(0xb92)]())return;if(!_0x54ba60[_0x5efee2(0x966)])return;_0x14831a[_0x5efee2(0x2ec)](_0x1ff44f,_0x8c4bee),_0x32ccff[_0x5efee2(0xadf)][_0x5efee2(0x293)]();const _0x36079a=_0x42727c[_0x5efee2(0x664)](),_0x5e7bff=_0xf76759[_0x5efee2(0x55e)];if(!_0x36079a)return;const _0x172822=_0x9e17b9[_0x5efee2(0x372)];if(!_0x172822)return;_0x172822[_0x5efee2(0x598)](_0x3f3132);if(_0x5e7bff)_0x36079a[_0x5efee2(0xb30)](_0x5efee2(0x903));}else _0x2fbcb6[_0x5efee2(0x99b)](_0x5efee2(0x3bb));}VisuMZ[_0x5efee2(0xadf)][_0x5efee2(0x22e)][_0x5efee2(0xba3)](this);if(_0x2fbcb6&&_0x2fbcb6[_0x5efee2(0xc1)]()===_0x5d283c){if(_0x5efee2(0x954)!==_0x5efee2(0x4fb))_0x2fbcb6['actionBattleCoreJS'](_0x5efee2(0x911));else{if(!_0x1ecf21[_0x5efee2(0xb92)]())return;const _0x4a1734=_0x5b1f2a[_0x5efee2(0xf5)];_0x4a1734[_0x5efee2(0x82c)]();}}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x95e)]=BattleManager[_0x12d94d(0x246)],BattleManager[_0x12d94d(0x246)]=function(){const _0x2f30d4=_0x12d94d,_0x42f87d=this[_0x2f30d4(0x5ef)],_0x2aca6d=this['_subject'];_0x42f87d&&_0x42f87d!==this[_0x2f30d4(0x580)]&&_0x42f87d[_0x2f30d4(0xc1)]()===_0x2aca6d&&_0x42f87d[_0x2f30d4(0x99b)](_0x2f30d4(0xb41)),this[_0x2f30d4(0xa37)]?VisuMZ[_0x2f30d4(0xadf)][_0x2f30d4(0x95e)][_0x2f30d4(0xba3)](this):this[_0x2f30d4(0xae9)]=_0x2f30d4(0x67a),_0x42f87d&&_0x42f87d!==this[_0x2f30d4(0x580)]&&_0x42f87d[_0x2f30d4(0xc1)]()===_0x2aca6d&&_0x42f87d['actionBattleCoreJS'](_0x2f30d4(0x79f)),this[_0x2f30d4(0xc3d)](this[_0x2f30d4(0xbee)]()),this[_0x2f30d4(0x580)]=this['_action'];},BattleManager[_0x12d94d(0xc3d)]=function(_0x19704e){const _0x72efa0=_0x12d94d;for(const _0x380ce6 of _0x19704e){if(!_0x380ce6)continue;if(!_0x380ce6[_0x72efa0(0x9b8)]())continue;_0x380ce6[_0x72efa0(0x9b8)]()[_0x72efa0(0x5a1)]();}},BattleManager[_0x12d94d(0xb23)]=function(){const _0x341687=_0x12d94d;!this['_logWindow'][_0x341687(0x5df)]()&&this[_0x341687(0x246)]();},Game_Battler[_0x12d94d(0x4e9)]['onAllActionsEnd']=function(){const _0x127e11=_0x12d94d;this[_0x127e11(0xb69)]();if(Imported[_0x127e11(0x86a)]){const _0x34ba9b=VisuMZ['SkillsStatesCore'][_0x127e11(0xb08)][_0x127e11(0x263)];_0x34ba9b&&_0x34ba9b['ActionEndUpdate']===![]&&this[_0x127e11(0x644)](0x1);}else this[_0x127e11(0x644)](0x1);this[_0x127e11(0xb8b)]();},BattleManager['makeEscapeRatio']=function(){const _0x4676f0=_0x12d94d;this[_0x4676f0(0xba6)]=VisuMZ[_0x4676f0(0xadf)][_0x4676f0(0xb08)][_0x4676f0(0x9d2)][_0x4676f0(0xb78)][_0x4676f0(0xba3)](this);},VisuMZ['BattleCore'][_0x12d94d(0x792)]=BattleManager['onEscapeSuccess'],BattleManager[_0x12d94d(0x751)]=function(){const _0x155103=_0x12d94d;this[_0x155103(0x371)](_0x155103(0x64b)),BattleManager[_0x155103(0x372)]['processEscape'](),VisuMZ['BattleCore']['BattleManager_onEscapeSuccess'][_0x155103(0xba3)](this),this[_0x155103(0x6db)](_0x155103(0x6dc));},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x493)]=BattleManager[_0x12d94d(0xad5)],BattleManager[_0x12d94d(0xad5)]=function(){const _0x525208=_0x12d94d;this['processBattleCoreJS'](_0x525208(0x92d));const _0x3cb72a=this[_0x525208(0xba6)];VisuMZ[_0x525208(0xadf)][_0x525208(0x493)][_0x525208(0xba3)](this),this[_0x525208(0xba6)]=_0x3cb72a+VisuMZ[_0x525208(0xadf)][_0x525208(0xb08)][_0x525208(0x9d2)][_0x525208(0x552)][_0x525208(0xba3)](this),this[_0x525208(0x3b8)]=![],this[_0x525208(0x6db)](_0x525208(0x76f));},BattleManager['displayStartMessages']=function(){const _0x51133d=_0x12d94d;let _0x34fc9c=![];if(this[_0x51133d(0x57e)]()){if(_0x51133d(0xc46)!=='jbktQ')for(const _0x2f7c47 of $gameTroop['enemyNames']()){this[_0x51133d(0xf5)][_0x51133d(0xbce)](_0x51133d(0x767),TextManager[_0x51133d(0xc96)][_0x51133d(0x3d0)](_0x2f7c47)),this[_0x51133d(0xf5)][_0x51133d(0xbce)](_0x51133d(0x48a)),_0x34fc9c=!![];}else{if(!_0x45ad50[_0x51133d(0xb92)]())return;const _0x306b87=_0x386b74[_0x51133d(0x592)][_0x51133d(0xcbc)];if(_0x306b87)_0x306b87['requestRefresh']();}}if(this[_0x51133d(0x9aa)])this[_0x51133d(0xf5)][_0x51133d(0xbce)]('addText',TextManager[_0x51133d(0x6aa)]['format']($gameParty[_0x51133d(0x536)]())),this[_0x51133d(0xf5)][_0x51133d(0xbce)](_0x51133d(0x48a));else{if(this[_0x51133d(0xb6)]){if('KreEL'!=='KreEL')return _0x104601['BattleCore'][_0x51133d(0x773)][_0x51133d(0xba3)](this,_0x3fb66f);else this['_logWindow'][_0x51133d(0xbce)]('addText',TextManager[_0x51133d(0x7f2)][_0x51133d(0x3d0)]($gameParty[_0x51133d(0x536)]())),this[_0x51133d(0xf5)][_0x51133d(0xbce)](_0x51133d(0x48a));}}_0x34fc9c&&(this[_0x51133d(0xf5)]['push'](_0x51133d(0x48a)),this[_0x51133d(0xf5)][_0x51133d(0xbce)](_0x51133d(0x4ef))),this[_0x51133d(0xcda)]()&&this[_0x51133d(0x470)]()&&(this[_0x51133d(0x451)]=![]);},BattleManager[_0x12d94d(0x57e)]=function(){const _0x1e8fb7=_0x12d94d;if(BattleManager[_0x1e8fb7(0x342)])return![];return VisuMZ[_0x1e8fb7(0xadf)][_0x1e8fb7(0xb08)][_0x1e8fb7(0x1ec)][_0x1e8fb7(0x52f)];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xc61)]=BattleManager[_0x12d94d(0x6f7)],BattleManager[_0x12d94d(0x6f7)]=function(){const _0x5aecd1=_0x12d94d;VisuMZ[_0x5aecd1(0xadf)][_0x5aecd1(0xc61)]['call'](this),this[_0x5aecd1(0x66d)]()&&this[_0x5aecd1(0x470)]()&&!this[_0x5aecd1(0xb6)]&&$gameParty[_0x5aecd1(0x80f)]()&&this['selectNextCommand']();},BattleManager[_0x12d94d(0x470)]=function(){const _0x3364cc=_0x12d94d;return VisuMZ['BattleCore']['Settings'][_0x3364cc(0xa88)][_0x3364cc(0xab)];},BattleManager['checkTpbInputOpen']=function(){const _0xad679=_0x12d94d;this['isPartyTpbInputtable']()&&this[_0xad679(0x16d)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x72e)]=Scene_Battle[_0x12d94d(0x4e9)]['startActorCommandSelection'],Scene_Battle['prototype'][_0x12d94d(0x9a6)]=function(){const _0x5bb8ba=_0x12d94d;VisuMZ[_0x5bb8ba(0xadf)]['Scene_Battle_startActorCommandSelection'][_0x5bb8ba(0xba3)](this),BattleManager[_0x5bb8ba(0xcda)]()&&BattleManager[_0x5bb8ba(0x451)]&&('qvPMY'!==_0x5bb8ba(0x24a)?(BattleManager['_tpbNeedsPartyCommand']=![],this[_0x5bb8ba(0x159)]()):(_0x9ac92a['x']+=this['x'],_0x81973f['y']+=this['y']));},BattleManager['emulateAction']=function(_0x455504,_0x3803e2,_0x26678d){const _0x4b0404=_0x12d94d;if(!_0x26678d)return;if(!_0x455504)return;if(!_0x3803e2)return;const _0xbfd1cb=this[_0x4b0404(0x5ef)];this['_action']=new Game_Action(_0x455504);if(DataManager['isItem'](_0x26678d))this['_action'][_0x4b0404(0x942)](_0x26678d['id']);if(DataManager[_0x4b0404(0x226)](_0x26678d))this[_0x4b0404(0x5ef)][_0x4b0404(0xc7d)](_0x26678d['id']);if(this[_0x4b0404(0x5ef)][_0x4b0404(0xc7)]())BattleManager[_0x4b0404(0x34e)](_0x455504,_0x3803e2);this[_0x4b0404(0x5ef)]=_0xbfd1cb;},BattleManager[_0x12d94d(0xa3e)]=function(_0xa5f876,_0x52cfeb){const _0x4e29ea=_0x12d94d;this[_0x4e29ea(0x5ef)]['_reflectionTarget']=_0x52cfeb,this[_0x4e29ea(0xf5)][_0x4e29ea(0x223)](_0x52cfeb),this['_logWindow'][_0x4e29ea(0x3e0)](_0xa5f876,this[_0x4e29ea(0x5ef)]),this['_action'][_0x4e29ea(0xa8a)](_0xa5f876),this[_0x4e29ea(0xf5)][_0x4e29ea(0x896)](_0xa5f876,_0xa5f876);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x909)]=BattleManager[_0x12d94d(0x40d)],BattleManager['makeActionOrders']=function(){const _0x4d7846=_0x12d94d;VisuMZ[_0x4d7846(0xadf)][_0x4d7846(0x909)][_0x4d7846(0xba3)](this),this[_0x4d7846(0xba2)]=this[_0x4d7846(0xba2)][_0x4d7846(0xd0e)](_0x2b80b3=>_0x2b80b3&&_0x2b80b3['isAppeared']());},VisuMZ['BattleCore']['BattleManager_updatePhase']=BattleManager[_0x12d94d(0x6fe)],BattleManager[_0x12d94d(0x6fe)]=function(_0xf634a4){const _0x5be62c=_0x12d94d;if(this[_0x5be62c(0xae9)]===_0x5be62c(0x497))this['updateCustomActionSequence']();else{if(this['_phase']===_0x5be62c(0xaa1)){if('XzNwB'===_0x5be62c(0x4f9))this[_0x5be62c(0xf1)]();else return _0x1c6968[_0x5be62c(0xadf)][_0x5be62c(0xb08)][_0x5be62c(0x883)][_0x5be62c(0x8c6)];}else{if('phbwQ'!==_0x5be62c(0x169))return this[_0x5be62c(0x946)]=this['_lineHeight']||_0x19fc1c[_0x5be62c(0x4e9)][_0x5be62c(0x33c)]()||0x24,this[_0x5be62c(0x946)]*0x4;else VisuMZ[_0x5be62c(0xadf)]['BattleManager_updatePhase']['call'](this,_0xf634a4);}}},BattleManager[_0x12d94d(0x5fa)]=function(){const _0x1add7d=_0x12d94d;this[_0x1add7d(0x3c0)]=this[_0x1add7d(0x5d4)][_0x1add7d(0x195)](0x0),this['_targetIndex']=0x0,this[_0x1add7d(0x4e5)]=this[_0x1add7d(0x3c0)][0x0]||null,this[_0x1add7d(0xae9)]=_0x1add7d(0x497);},BattleManager[_0x12d94d(0x876)]=function(){const _0xabe850=_0x12d94d;!this['updateEventMain']()&&!this['_logWindow'][_0xabe850(0x5df)]()&&(this[_0xabe850(0xae9)]=_0xabe850(0x2ba));},BattleManager[_0x12d94d(0xaa1)]=function(_0x2bacf1){const _0x44487e=_0x12d94d;this[_0x44487e(0xba2)][_0x44487e(0x8fc)](_0x2bacf1);if(_0x2bacf1===this[_0x44487e(0xa37)])return;const _0x43a64e=JsonEx[_0x44487e(0xb77)](_0x2bacf1[_0x44487e(0x5bf)]());this[_0x44487e(0x54f)][_0x44487e(0xbce)]([_0x2bacf1,_0x43a64e]);},BattleManager['processForcedAction']=function(){},BattleManager[_0x12d94d(0x259)]=function(){const _0x33efd6=_0x12d94d;if(this[_0x33efd6(0xcda)]())this[_0x33efd6(0xae9)]=_0x33efd6(0x67a);else this[_0x33efd6(0x54f)][_0x33efd6(0x29c)]>0x0?this[_0x33efd6(0xae9)]='turn':_0x33efd6(0x68f)!==_0x33efd6(0x68f)?(_0x530ee5['BattleCore'][_0x33efd6(0x72e)][_0x33efd6(0xba3)](this),_0x27bfd9[_0x33efd6(0xcda)]()&&_0x5eb50e['_tpbNeedsPartyCommand']&&(_0x192abd[_0x33efd6(0x451)]=![],this['actorCommandCancelTPB']())):this['startInput']();},BattleManager[_0x12d94d(0x901)]=function(){const _0x2924d1=_0x12d94d,_0x52d574=this[_0x2924d1(0xa37)];_0x52d574&&this[_0x2924d1(0xcda)]()&&_0x52d574['setActionState'](_0x2924d1(0x386));for(;;){if(_0x2924d1(0x503)!==_0x2924d1(0xac7)){const _0x5642f7=this[_0x2924d1(0x15f)]();if(!_0x5642f7){if(_0x2924d1(0x73a)==='LDMyS')return null;else _0xefc01d['scope']=_0x2881ff(_0x592b6e['$1'])[_0x2924d1(0x97e)]()[_0x2924d1(0xc39)]();}if(_0x5642f7[_0x2924d1(0x181)]()&&_0x5642f7[_0x2924d1(0x3b5)]()){if(_0x2924d1(0x4e1)===_0x2924d1(0x4e1))return _0x5642f7;else _0x49a889+=_0x4b0108;}}else{let _0x4c0325=_0x2b5d6f(_0x5aa8dc['$1']);while(_0x4c0325--){_0x14f4d7[_0x2924d1(0xbce)](this[_0x2924d1(0x73c)]()['trueRandomTarget']());}return this[_0x2924d1(0x7bd)](_0x3aff90);}}},BattleManager[_0x12d94d(0x15f)]=function(){const _0x3fc967=_0x12d94d;if(this['_forcedBattlers'][_0x3fc967(0x29c)]>0x0){const _0x339585=this[_0x3fc967(0x54f)]['shift'](),_0x539c3c=_0x339585[0x0];return _0x539c3c[_0x3fc967(0xcd2)]=_0x539c3c[_0x3fc967(0xcd2)]||[],_0x539c3c['_actions'][0x0]=_0x339585[0x1],_0x539c3c;}else return this['_actionBattlers'][_0x3fc967(0xa3a)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x8fb)]=Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xaa1)],Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xaa1)]=function(_0x2deaf7,_0x40ac39){const _0x1cae5f=_0x12d94d;VisuMZ['BattleCore'][_0x1cae5f(0x8fb)][_0x1cae5f(0xba3)](this,_0x2deaf7,_0x40ac39),this[_0x1cae5f(0xcd2)][this['_actions'][_0x1cae5f(0x29c)]-0x1][_0x1cae5f(0x75a)]=!![];},Game_Interpreter['prototype'][_0x12d94d(0x28d)]=function(_0x46b1d3){return this['iterateBattler'](_0x46b1d3[0x0],_0x46b1d3[0x1],_0xd4d81d=>{const _0x47d6fb=_0x2ae6;if(_0x47d6fb(0xa25)!==_0x47d6fb(0x3ca))!_0xd4d81d['isDeathStateAffected']()&&(_0x47d6fb(0x686)===_0x47d6fb(0x686)?(_0xd4d81d['forceAction'](_0x46b1d3[0x2],_0x46b1d3[0x3]),BattleManager['forceAction'](_0xd4d81d)):(this[_0x47d6fb(0x866)]=!![],this[_0x47d6fb(0x342)]=![],this['processBattleCoreJS'](_0x47d6fb(0x27e)),_0x39769c[_0x47d6fb(0xadf)][_0x47d6fb(0x15a)][_0x47d6fb(0xba3)](this,_0x207849),this[_0x47d6fb(0x371)](_0x47d6fb(0xb0b))));else{const _0x29f467=_0x4719e6['makeDeepCopy'](_0x35ff7f);_0x29f467['hpAffected']=![],_0x29f467[_0x47d6fb(0xa23)]=0x0,this['_damagePopupArray'][_0x47d6fb(0xbce)](_0x29f467);}}),!![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x3e7)]=Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x7b8)],Game_Battler['prototype']['makeSpeed']=function(){const _0x5d28d=_0x12d94d;VisuMZ[_0x5d28d(0xadf)][_0x5d28d(0x3e7)][_0x5d28d(0xba3)](this);if(this[_0x5d28d(0xcd2)][_0x5d28d(0x29c)]<=0x0){if('oJAkU'===_0x5d28d(0x584))return _0x438757[_0x5d28d(0xca1)][_0x5d28d(0xb08)][_0x5d28d(0xd2c)][_0x5d28d(0xb8e)];else this['_speed']=Number[_0x5d28d(0x690)];}},BattleManager[_0x12d94d(0x4f2)]=function(){const _0x24ec7b=_0x12d94d;if(VisuMZ['BattleCore'][_0x24ec7b(0xb08)][_0x24ec7b(0x89b)]['EndBattlePopups']??!![])return![];return SceneManager[_0x24ec7b(0xb92)]()&&this[_0x24ec7b(0x6e6)];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xc8e)]=BattleManager[_0x12d94d(0x16d)],BattleManager['selectNextCommand']=function(){const _0x47eab2=_0x12d94d;this[_0x47eab2(0xcda)]()?this[_0x47eab2(0x2f2)]():VisuMZ[_0x47eab2(0xadf)][_0x47eab2(0xc8e)][_0x47eab2(0xba3)](this);},BattleManager[_0x12d94d(0x2f2)]=function(){const _0x202aa3=_0x12d94d;if(this[_0x202aa3(0x6b5)]){if(_0x202aa3(0x93b)!=='zinjP'){if(this[_0x202aa3(0x6b5)][_0x202aa3(0x16d)]())return;this[_0x202aa3(0x1f1)](),this[_0x202aa3(0x412)](),!this[_0x202aa3(0xa37)]&&!this['_currentActor']&&SceneManager[_0x202aa3(0x592)][_0x202aa3(0x395)]();}else{const _0x3f154d=_0x12ce51[_0x202aa3(0x19c)],_0x31b637=this['calcWindowHeight'](0x1,!![]);let _0x2f0dbb=_0x1249b6?_0x445038[_0x202aa3(0x807)]-_0x3f154d:0x0;_0x2f0dbb+=_0x5379df?_0x2aea0c[_0x202aa3(0x5b1)]:_0x40d20b['ENEMY_OFFSET_X'];const _0x550d2f=[_0x202aa3(0x340)]['includes'](this[_0x202aa3(0xbb9)]())?0x0:this[_0x202aa3(0xcbc)][_0x202aa3(0xd17)];let _0x337e1=_0x43613e[_0x202aa3(0xf6)]-_0x550d2f-_0x31b637;return _0x337e1+=_0x2cc115?_0x186874['ACTOR_OFFSET_Y']:_0xcc9a54[_0x202aa3(0x888)],new _0x4654cc(_0x2f0dbb,_0x337e1,_0x3f154d,_0x31b637);}}else!this['_subject']&&('NVfVT'===_0x202aa3(0x176)?this[_0x202aa3(0x3e4)](_0x202aa3(0xb01)):this[_0x202aa3(0x22d)]());},BattleManager['checkTpbInputClose']=function(){const _0x17d326=_0x12d94d;(!this[_0x17d326(0x9a4)]()||this[_0x17d326(0x6ba)]())&&(this[_0x17d326(0x2ae)]&&(_0x17d326(0xb67)!==_0x17d326(0x9e9)?!$gameParty[_0x17d326(0xc73)]()[_0x17d326(0x511)](this[_0x17d326(0x2ae)])&&(this[_0x17d326(0x2ae)]=null):(_0x12ad83[_0x17d326(0xadf)]['CreateCommonEventKeys'](),_0x97d43d[_0x17d326(0xadf)][_0x17d326(0x43d)](_0x1cd489),_0x3f55ec[_0x17d326(0xadf)][_0x17d326(0x43d)](_0x3ae8b2))),!this['_tpbSceneChangeCacheActor']?_0x17d326(0x5d3)===_0x17d326(0xba8)?this[_0x17d326(0x262)](!![]):(this[_0x17d326(0x16a)](),this[_0x17d326(0x6b5)]=null,this[_0x17d326(0x3b8)]=![]):this[_0x17d326(0x1ea)]());},BattleManager[_0x12d94d(0x1ea)]=function(){const _0x1b5387=_0x12d94d;!$gameParty['battleMembers']()[_0x1b5387(0x511)](this[_0x1b5387(0x2ae)])&&('CiCZW'===_0x1b5387(0x9c8)?(this[_0x1b5387(0xd15)]=0x0,this[_0x1b5387(0xc25)]=0x0):this[_0x1b5387(0x2ae)]=null);if(this[_0x1b5387(0x2ae)]){if(_0x1b5387(0x31a)!==_0x1b5387(0x2d4))this[_0x1b5387(0x6b5)]=this[_0x1b5387(0x2ae)],this[_0x1b5387(0x6b5)][_0x1b5387(0x267)]=_0x1b5387(0xaf9),this[_0x1b5387(0x3b8)]=!![],this['_tpbSceneChangeCacheActor']=null;else{if(_0x4c211e[_0x1b5387(0x372)][_0x1b5387(0x42a)]())return!![];this[_0x1b5387(0x6ea)]='';}}else _0x1b5387(0x14c)===_0x1b5387(0x791)?(_0x5b3588[_0x1b5387(0xadf)][_0x1b5387(0x922)]['call'](this),_0x551556['clearForcedGameTroopSettingsBattleCore']()):(this[_0x1b5387(0x16a)](),this[_0x1b5387(0x6b5)]=null,this[_0x1b5387(0x3b8)]=![]);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x7a7)]=BattleManager[_0x12d94d(0xd6)],BattleManager[_0x12d94d(0xd6)]=function(){const _0xf81d0=_0x12d94d;if(this[_0xf81d0(0xae9)]===_0xf81d0(0x497))return this[_0xf81d0(0xcfc)]();else{if(_0xf81d0(0x6f4)!==_0xf81d0(0x6f4))_0x35be22[_0xf81d0(0xadf)]['Scene_Battle_terminate']['call'](this);else return VisuMZ[_0xf81d0(0xadf)][_0xf81d0(0x7a7)][_0xf81d0(0xba3)](this);}},BattleManager[_0x12d94d(0xcfc)]=function(){return this['isActiveTpb']();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x21d)]=BattleManager[_0x12d94d(0x16a)],BattleManager['cancelActorInput']=function(){const _0x1ae5d0=_0x12d94d;if(this[_0x1ae5d0(0xcda)]()&&this['_phase']===_0x1ae5d0(0x439)){if('Siyxo'!=='Siyxo'){if(this[_0x1ae5d0(0x8dd)]!==_0x59eda6)return this[_0x1ae5d0(0x8dd)];return this[_0x1ae5d0(0xc3e)](),this[_0x1ae5d0(0x8dd)];}else this[_0x1ae5d0(0x6b5)]=null;}VisuMZ[_0x1ae5d0(0xadf)][_0x1ae5d0(0x21d)][_0x1ae5d0(0xba3)](this);},VisuMZ[_0x12d94d(0xadf)]['BattleManager_inputtingAction']=BattleManager[_0x12d94d(0x17e)],BattleManager[_0x12d94d(0x17e)]=function(){const _0x9a460e=_0x12d94d,_0x2bd78b=this[_0x9a460e(0x6b5)];if(_0x2bd78b&&!_0x2bd78b[_0x9a460e(0x17e)]()){if(_0x9a460e(0x7b5)===_0x9a460e(0x7b5)){const _0x36eeeb=_0x2bd78b[_0x9a460e(0x1ce)];_0x2bd78b[_0x9a460e(0xcd2)][_0x36eeeb]=new Game_Action(_0x2bd78b);}else _0x5aea47['prototype'][_0x9a460e(0x72d)][_0x9a460e(0xba3)](this);}return VisuMZ['BattleCore'][_0x9a460e(0x5a0)][_0x9a460e(0xba3)](this);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x548)]=BattleManager[_0x12d94d(0x103)],BattleManager[_0x12d94d(0x103)]=function(_0x3cf100){const _0x287da7=_0x12d94d;if(this[_0x287da7(0x5ef)]['isForFriend']())return![];return VisuMZ[_0x287da7(0xadf)][_0x287da7(0x548)][_0x287da7(0xba3)](this,_0x3cf100);},SceneManager[_0x12d94d(0xb92)]=function(){const _0xac7584=_0x12d94d;return this[_0xac7584(0x592)]&&this[_0xac7584(0x592)]['constructor']===Scene_Battle;},SceneManager[_0x12d94d(0xc5)]=function(){const _0x495f01=_0x12d94d;return Spriteset_Battle[_0x495f01(0x4e9)][_0x495f01(0x856)]();},SceneManager['isPreviousSceneBattleTransitionable']=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x30bc46=_0x12d94d;if(SceneManager[_0x30bc46(0xb59)](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0xe17fe){const _0x101601=_0x12d94d;if(!SceneManager[_0x101601(0xb92)]())return!![];const _0x501ddb=[_0x101601(0xa49),_0x101601(0x683)];return _0x501ddb['includes'](_0xe17fe['name']);},VisuMZ[_0x12d94d(0xadf)]['SceneManager_push']=SceneManager['push'],SceneManager['push']=function(_0x136455){const _0x22fb50=_0x12d94d;if(!SceneManager[_0x22fb50(0x363)](_0x136455))return this['displayBattleCoreTransitionErrorMsg'](_0x136455);VisuMZ[_0x22fb50(0xadf)]['SceneManager_push'][_0x22fb50(0xba3)](this,_0x136455);},SceneManager[_0x12d94d(0x79d)]=function(_0x255a32){const _0x3079c0=_0x12d94d;if(!$gameTemp['isPlaytest']())return;if(this[_0x3079c0(0x2ee)])return;this[_0x3079c0(0x2ee)]=!![];let _0x3dd659='';_0x3dd659+=_0x3079c0(0x430),_0x3dd659+=_0x3079c0(0x487)[_0x3079c0(0x3d0)](_0x255a32[_0x3079c0(0x536)]),alert(_0x3dd659);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x155)]=Game_Temp['prototype']['initialize'],Game_Temp[_0x12d94d(0x4e9)][_0x12d94d(0x8df)]=function(){const _0x3a1ceb=_0x12d94d;VisuMZ['BattleCore'][_0x3a1ceb(0x155)]['call'](this),this[_0x3a1ceb(0x161)]=[];},VisuMZ['BattleCore']['Game_Temp_requestAnimation']=Game_Temp['prototype'][_0x12d94d(0x58d)],Game_Temp[_0x12d94d(0x4e9)]['requestAnimation']=function(_0x5c2010,_0x372ded,_0x474896){const _0x43aab3=_0x12d94d;_0x5c2010=_0x5c2010[_0x43aab3(0xd0e)]((_0xc02cc4,_0x23804d,_0x8371b7)=>_0x8371b7[_0x43aab3(0x86f)](_0xc02cc4)===_0x23804d);if(SceneManager['isSceneBattle']()&&SceneManager[_0x43aab3(0xc5)]()){if(_0x43aab3(0x78a)!==_0x43aab3(0x78a)){this[_0x43aab3(0xc2e)](0x0,0x0,0x0,0x0);return;}else _0x474896=!_0x474896;}VisuMZ['BattleCore']['Game_Temp_requestAnimation'][_0x43aab3(0xba3)](this,_0x5c2010,_0x372ded,_0x474896),SceneManager[_0x43aab3(0xb92)]()&&(_0x43aab3(0x3f4)===_0x43aab3(0x7e7)?_0x58705a[_0x43aab3(0xbce)](this[_0x43aab3(0x297)]()[_0x43aab3(0xcd8)]()):BattleManager[_0x43aab3(0x372)][_0x43aab3(0x8a6)]());},Game_Temp['prototype'][_0x12d94d(0x8b8)]=function(_0x164491){const _0x4b5d1d=_0x12d94d;this[_0x4b5d1d(0xa24)]=_0x164491;},Game_Temp[_0x12d94d(0x4e9)]['getLastPluginCommandInterpreter']=function(){const _0x3e1dec=_0x12d94d;return this[_0x3e1dec(0xa24)];},Game_Temp[_0x12d94d(0x4e9)][_0x12d94d(0x45f)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp['prototype'][_0x12d94d(0x8c8)]=function(_0x2102c2){const _0x21bb47=_0x12d94d;if($gameMap&&$dataMap&&$dataMap['note']){if(_0x21bb47(0xb2f)!==_0x21bb47(0x235))this[_0x21bb47(0x1b8)]($dataMap[_0x21bb47(0x7ba)]);else{const _0x39b027=_0x24d25d[_0x21bb47(0xadf)][_0x21bb47(0xb08)][_0x21bb47(0x1ec)];_0x39b027['LastSelected']?this[_0x21bb47(0xc6d)]():this['autoSelectPriority']();}}const _0x3b3f51=$dataTroops[_0x2102c2];if(_0x3b3f51){if(_0x21bb47(0xb6d)===_0x21bb47(0x47b))this[_0x21bb47(0x6d8)](_0x6e1db1,_0x4c0299,_0x330a76);else{let _0xd2e636=DataManager[_0x21bb47(0xb34)](_0x3b3f51['id']);this[_0x21bb47(0x1b8)](_0xd2e636);}}},Game_Temp[_0x12d94d(0x4e9)][_0x12d94d(0x1b8)]=function(_0x1a4cf9){const _0x121b71=_0x12d94d;if(!_0x1a4cf9)return;if(_0x1a4cf9[_0x121b71(0x214)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x3bc1fb=String(RegExp['$1']);if(_0x3bc1fb[_0x121b71(0x214)](/DEFAULT/i)){if(_0x121b71(0xc9d)===_0x121b71(0xc9d))this[_0x121b71(0x816)]=_0x121b71(0x818);else return _0x2edf80['spriteId']-_0x2a0bd0[_0x121b71(0x803)];}else{if(_0x3bc1fb[_0x121b71(0x214)](/LIST/i))_0x121b71(0x794)!==_0x121b71(0xaed)?this[_0x121b71(0x816)]=_0x121b71(0x7e4):this[_0x121b71(0x111)]();else{if(_0x3bc1fb[_0x121b71(0x214)](/XP/i))_0x121b71(0x3ec)!==_0x121b71(0x72a)?this['_forcedBattleLayout']='xp':_0x324b6f[_0x121b71(0xb30)](_0x121b71(0x2c1));else{if(_0x3bc1fb[_0x121b71(0x214)](/PORTRAIT/i)){if(_0x121b71(0x250)==='Nkzco'){const _0x5a589b=_0x3bb9a0[_0x121b71(0x3d0)](_0x4fcb47[_0x121b71(0x536)](),_0x1ef16b['param'](_0x24f2cf));this['push'](_0x121b71(0x82c)),this['push'](_0x121b71(0x36a)),this['push'](_0x121b71(0x767),_0x5a589b),this[_0x121b71(0xbce)]('wait');}else this[_0x121b71(0x816)]='portrait';}else{if(_0x3bc1fb['match'](/BORDER/i))this[_0x121b71(0x816)]='border';else{if(_0x3bc1fb[_0x121b71(0x214)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(_0x121b71(0xa01)!==_0x121b71(0xd0c)){if(Imported[_0x121b71(0x8a1)])_0x121b71(0xb17)!=='baQvh'?this[_0x121b71(0x351)]=!![]:this['_forcedBattleLayout']='sideview_ui';else{if('ribpV'===_0x121b71(0xa3f)){_0x227883[_0x121b71(0x4e9)][_0x121b71(0x59c)]['call'](this);const _0x23c925=this[_0x121b71(0xac6)][_0x121b71(0xa34)]();this['_battlerName']!==_0x23c925&&(this[_0x121b71(0x174)]=_0x23c925,this['_mainSprite'][_0x121b71(0x222)]=_0x29e7ac[_0x121b71(0x1d5)](_0x23c925)),this['_mainSprite']&&this[_0x121b71(0x73)][_0x121b71(0x222)]&&this[_0x121b71(0x78b)]&&(this[_0x121b71(0x73)][_0x121b71(0x222)][_0x121b71(0x563)]!==this[_0x121b71(0x78b)][_0x121b71(0x828)]()&&(this[_0x121b71(0x73)][_0x121b71(0x222)]['smooth']=this[_0x121b71(0x78b)][_0x121b71(0x828)]()));}else this[_0x121b71(0x816)]='default';}}else{if(this[_0x121b71(0x404)]()&&!this['isCustomBattleScope']()){const _0x483af2=this['item']()[_0x121b71(0xbad)];return _0x483af2[_0x121b71(0x214)](/(?:ENEMY|FOE)/i)&&_0x483af2[_0x121b71(0x214)](/OR/i)&&_0x483af2[_0x121b71(0x214)](/(?:ALLY|FRIEND)/i);}else return![];}}else{if(_0x3bc1fb[_0x121b71(0x214)](/(?:FRONTVIEW UI|FRONTVIEW)/i)){if(_0x121b71(0x23c)===_0x121b71(0x306)){const _0x5d0156=this[_0x121b71(0xaa8)]()[_0x121b71(0xa58)]||0x0,_0x3c4e39=_0x244ec2[_0x121b71(0xa14)][_0x5d0156];_0x3c4e39&&this[_0x121b71(0x25b)](_0x3c4e39['weaponImageId']);}else{if(Imported[_0x121b71(0xa6a)]){if('pkdKa'==='cNCwc')return this[_0x121b71(0xbfa)][_0x5221ad];else this[_0x121b71(0x816)]=_0x121b71(0x340);}else this['_forcedBattleLayout']=_0x121b71(0x818);}}}}}}}}}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x398)]=Game_Temp[_0x12d94d(0x4e9)][_0x12d94d(0x920)],Game_Temp[_0x12d94d(0x4e9)][_0x12d94d(0x920)]=function(_0x317fa0,_0x58240c){const _0x1d26a5=_0x12d94d;if(SceneManager['isSceneBattle']()){if(_0x1d26a5(0x39d)===_0x1d26a5(0x703)){this[_0x1d26a5(0xb4c)]=this[_0x1d26a5(0x673)]()['name']();const _0xfe36f6=this[_0x1d26a5(0x467)](this[_0x1d26a5(0xb4c)])[_0x1d26a5(0xa80)],_0x145c63=_0x1d7441[_0x1d26a5(0x1d0)]((this[_0x1d26a5(0xa98)]-_0xfe36f6)/0x2);this[_0x1d26a5(0x786)](this[_0x1d26a5(0xb4c)],_0x145c63,0x0,_0xfe36f6+0x8);}else this[_0x1d26a5(0xcde)](_0x317fa0,_0x58240c);}else{if(_0x1d26a5(0x27b)===_0x1d26a5(0x24c)){const _0x307471=this[_0x1d26a5(0x86b)](),_0x3976ca=_0x4b4810[_0x1d26a5(0xadf)][_0x1d26a5(0xb08)][_0x1d26a5(0x9d9)][_0x1d26a5(0x42b)],_0x35b0e6=_0x307471===_0x1d26a5(0x1e6)?_0x13bd0f[_0x1d26a5(0xc7)]:_0x1d26a5(0x3ae)['format'](_0x3976ca,_0x46d046[_0x1d26a5(0xc7)]),_0x5b6a6a=this[_0x1d26a5(0x9a5)]();this[_0x1d26a5(0xb0a)](_0x35b0e6,_0x1d26a5(0xc7),_0x5b6a6a);}else VisuMZ[_0x1d26a5(0xadf)][_0x1d26a5(0x398)][_0x1d26a5(0xba3)](this,_0x317fa0,_0x58240c);}},Game_Temp[_0x12d94d(0x4e9)][_0x12d94d(0xcde)]=function(_0x322c14,_0x46c981){const _0x2a8846=_0x12d94d,_0x3c16ea={'target':_0x322c14,'balloonId':_0x46c981};this['_battleBalloonQueue']=this[_0x2a8846(0x161)]||[],this['_battleBalloonQueue'][_0x2a8846(0xbce)](_0x3c16ea);},Game_Temp[_0x12d94d(0x4e9)][_0x12d94d(0xa3b)]=function(){const _0xa3b65c=_0x12d94d;return this[_0xa3b65c(0x161)]=this[_0xa3b65c(0x161)]||[],this[_0xa3b65c(0x161)][_0xa3b65c(0xa3a)]();},Game_Temp[_0x12d94d(0x4e9)]['clearBattleBalloons']=function(){const _0x13e152=_0x12d94d;this[_0x13e152(0x161)]=[];},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x605)]=function(){const _0x3143a0=_0x12d94d;if(this['_battleBalloonSprites']===undefined){if(_0x3143a0(0x411)==='NqBrk')return _0x546553['BattleCore'][_0x3143a0(0xb70)][_0x3143a0(0xba3)](this);else this[_0x3143a0(0xa59)]=[];}for(const _0x58b6cd of this[_0x3143a0(0xa59)]){!_0x58b6cd['isPlaying']()&&(_0x3143a0(0x6e7)!=='nuCZL'?(_0x4d8e3e[_0x3143a0(0x4e9)][_0x3143a0(0x8f4)][_0x3143a0(0xba3)](this,_0x403317),this['performActionMotions'](_0x3eef8a)):this[_0x3143a0(0xafb)](_0x58b6cd));}this[_0x3143a0(0x20b)]();},Spriteset_Battle['prototype']['processBattleBalloonRequests']=function(){const _0x6e837b=_0x12d94d;for(;;){if(_0x6e837b(0x30c)!==_0x6e837b(0x4bf)){const _0x428dfe=$gameTemp[_0x6e837b(0xa3b)]();if(_0x428dfe)this[_0x6e837b(0x48d)](_0x428dfe);else{if(_0x6e837b(0x495)===_0x6e837b(0x495))break;else{if(!_0x5a2d0d[_0x6e837b(0xb92)]())return;if(!_0x319ce2[_0x6e837b(0x857)])return;const _0x2e8b1b=_0x106237['getLastPluginCommandInterpreter']();if(!_0x2e8b1b)return;_0x2e8b1b[_0x6e837b(0xb30)](_0x6e837b(0xb6e));}}}else this[_0x6e837b(0x101)]=new _0x2865a1(),_0x2a59c0['ANTI_TINT_UI']?this[_0x6e837b(0xa26)](this['_uiContainer']):this[_0x6e837b(0xe4)][_0x6e837b(0xa26)](this['_uiContainer']),_0x180eb0[_0x6e837b(0x592)]['_uiContainer']=this[_0x6e837b(0x101)];}},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x48d)]=function(_0x178d1e){const _0x4aff48=_0x12d94d,_0x14bdcc=this['findTargetSprite'](_0x178d1e[_0x4aff48(0x89a)]);if(_0x14bdcc){let _0x2b14fd=null;if(Imported['VisuMZ_4_IconBalloons']&&Array[_0x4aff48(0x8e)](_0x178d1e[_0x4aff48(0x18b)])){if(_0x4aff48(0x346)!==_0x4aff48(0x18e))_0x2b14fd=new Sprite_IconBalloon();else return _0x3ed7de[_0x4aff48(0x592)][_0x4aff48(0x14e)]&&_0x4a074a[_0x4aff48(0x592)][_0x4aff48(0x14e)]['active']&&_0x2dd077[_0x4aff48(0x592)][_0x4aff48(0x14e)]['_enemies'][_0x4aff48(0x511)](this['_battler']);}else'AOzaq'===_0x4aff48(0xc3c)?_0x2b14fd=new Sprite_Balloon():(this[_0x4aff48(0xcc3)]=new _0x3c0993(),this[_0x4aff48(0xcc3)]['bitmap']=_0x1be7b4['loadSystem']('Shadow2'),this[_0x4aff48(0xcc3)][_0x4aff48(0x222)]['smooth']=_0x52bb53['BattleCore']['Settings'][_0x4aff48(0x58b)]['SmoothImage'],this[_0x4aff48(0xcc3)][_0x4aff48(0x2cc)]['x']=0.5,this[_0x4aff48(0xcc3)][_0x4aff48(0x2cc)]['y']=0.5,this[_0x4aff48(0xcc3)]['y']=-0x2,this['_shadowSprite'][_0x4aff48(0x9bf)]=![],this[_0x4aff48(0xa26)](this['_shadowSprite']));_0x2b14fd[_0x4aff48(0x796)]=_0x178d1e[_0x4aff48(0x89a)],_0x2b14fd[_0x4aff48(0x4e5)]=_0x14bdcc,_0x2b14fd[_0x4aff48(0x4e5)]['_character']=_0x14bdcc,_0x2b14fd[_0x4aff48(0x5bb)](_0x14bdcc,_0x178d1e[_0x4aff48(0x18b)]),BattleManager[_0x4aff48(0x1fd)](_0x2b14fd),this[_0x4aff48(0xa59)][_0x4aff48(0xbce)](_0x2b14fd);}},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xafb)]=function(_0x150c48){const _0x3afe7a=_0x12d94d;this['_battleBalloonSprites']['remove'](_0x150c48),BattleManager[_0x3afe7a(0xae3)](_0x150c48),_0x150c48[_0x3afe7a(0x9b7)]();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x8e1)]=function(_0x30bbed,_0x1c9b9c){},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xbbe)]=function(){return![];},Spriteset_Battle[_0x12d94d(0x4e9)]['isAnyBattleBalloonPlaying']=function(){const _0x578ac0=_0x12d94d;return this[_0x578ac0(0xa59)]=this[_0x578ac0(0xa59)]||[],this[_0x578ac0(0xa59)][_0x578ac0(0x29c)]>0x0;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x30a)]=Game_System[_0x12d94d(0x4e9)][_0x12d94d(0x8df)],Game_System[_0x12d94d(0x4e9)]['initialize']=function(){const _0x473a2a=_0x12d94d;VisuMZ[_0x473a2a(0xadf)][_0x473a2a(0x30a)][_0x473a2a(0xba3)](this),this['initBattleCore']();},Game_System[_0x12d94d(0x4e9)][_0x12d94d(0x23d)]=function(){const _0x3f1ef7=_0x12d94d;this[_0x3f1ef7(0xc06)]=this[_0x3f1ef7(0xc06)]||[];},Game_System[_0x12d94d(0x4e9)][_0x12d94d(0x443)]=function(){const _0x27a0d1=_0x12d94d;if(this[_0x27a0d1(0xc06)]===undefined)this[_0x27a0d1(0x23d)]();return this[_0x27a0d1(0xc06)];},Game_System[_0x12d94d(0x4e9)][_0x12d94d(0x6d7)]=function(_0x355351){const _0x38cb18=_0x12d94d;if(this[_0x38cb18(0xc06)]===undefined)this[_0x38cb18(0x23d)]();if(!_0x355351)return;if(this[_0x38cb18(0xc06)][_0x38cb18(0x511)](_0x355351))return;this['_defeatedEnemies'][_0x38cb18(0xbce)](_0x355351),this[_0x38cb18(0xc06)][_0x38cb18(0xd0a)]((_0x49629f,_0x186118)=>_0x49629f-_0x186118);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x260)]=Game_BattlerBase[_0x12d94d(0x4e9)]['addNewState'],Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x1fa)]=function(_0x34863c){const _0x5f2fb7=_0x12d94d,_0x5b456d=this['isAlive'](),_0x3daf41=this[_0x5f2fb7(0x8fd)]();VisuMZ[_0x5f2fb7(0xadf)][_0x5f2fb7(0x260)][_0x5f2fb7(0xba3)](this,_0x34863c);if(this[_0x5f2fb7(0x2c3)]()&&_0x5b456d&&this[_0x5f2fb7(0xb91)]()){if(_0x5f2fb7(0xb97)==='WnJtY')this['_visualHpGauge_JustDied']=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x5f2fb7(0x6d7)](this['enemyId']());else{if(!_0x21f5e9[_0x5f2fb7(0xb92)]())return;if(!_0x46c8a4['VisuMZ_3_ActSeqImpact'])return;const _0x535f09=_0x4b9926['_scene'][_0x5f2fb7(0x372)];if(!_0x535f09)return;_0x284004['ConvertParams'](_0x1a039f,_0x60ab4f);const _0x58508f=_0xc07755[_0x5f2fb7(0x12d)]||0x1,_0x2efea9=_0x3e95e5[_0x5f2fb7(0x227)]||0x1,_0x5d2470=_0x246d84[_0x5f2fb7(0x7fd)]||_0x5f2fb7(0x148);_0x535f09['setupRgbSplitImpactFilter'](_0x58508f,_0x2efea9,_0x5d2470);}}if(SceneManager[_0x5f2fb7(0xb92)]()&&_0x3daf41!==this[_0x5f2fb7(0x8fd)]()){if(_0x5f2fb7(0x5c2)==='tHlvp'){if(this[_0x5f2fb7(0x9b8)]()){if(_0x5f2fb7(0x1e4)!==_0x5f2fb7(0x1e4)){if(!this[_0x5f2fb7(0x9bf)])return![];if(_0x451a8d[_0x5f2fb7(0x701)]())return![];const _0x39c1a2=_0x46d0c1[_0x5f2fb7(0x592)][_0x5f2fb7(0xbb9)](),_0x2d48af=[_0x5f2fb7(0x818),'list','xp','portrait',_0x5f2fb7(0xb2d)];return _0x2d48af[_0x5f2fb7(0x511)](_0x39c1a2);}else this['battler']()[_0x5f2fb7(0x5a1)]();}}else{let _0x445a42='';_0x445a42+=_0x5f2fb7(0xd2),_0x445a42+=_0x5f2fb7(0x71b),_0x445a42+=_0x5f2fb7(0x1d1),_0x3cefd4(_0x445a42),_0x374a90[_0x5f2fb7(0xa82)]();}}},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x4f0)]=function(){const _0x7a011f=_0x12d94d;return $gameSystem[_0x7a011f(0x443)]()[_0x7a011f(0x511)](this[_0x7a011f(0x95d)]);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x95a)]=Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x3b2)],Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x3b2)]=function(_0xaebdaf){const _0xcc6183=_0x12d94d;VisuMZ['BattleCore'][_0xcc6183(0x95a)][_0xcc6183(0xba3)](this,_0xaebdaf),this[_0xcc6183(0x2c3)]()&&_0xaebdaf===this[_0xcc6183(0xbbb)]()&&this[_0xcc6183(0x3b5)]()&&(this['_visualHpGauge_JustDied']=![]),!this['_tempActor']&&!this[_0xcc6183(0x2e4)]&&SceneManager[_0xcc6183(0xb92)]()&&this[_0xcc6183(0x747)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x95)]=Game_Action[_0x12d94d(0x4e9)]['clear'],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x4ef)]=function(){const _0x4faf8f=_0x12d94d;VisuMZ[_0x4faf8f(0xadf)][_0x4faf8f(0x95)][_0x4faf8f(0xba3)](this),this[_0x4faf8f(0x7d5)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x4faf8f(0x6e5)]=_0x4faf8f(0x818),this[_0x4faf8f(0x1f4)]();},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x1f4)]=function(){const _0x58566c=_0x12d94d;this[_0x58566c(0x737)]='';},VisuMZ[_0x12d94d(0xadf)]['Game_Action_setSubject']=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x6b8)],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x6b8)]=function(_0x4b373a){const _0x1ceecb=_0x12d94d;VisuMZ[_0x1ceecb(0xadf)][_0x1ceecb(0x56c)][_0x1ceecb(0xba3)](this,_0x4b373a),this[_0x1ceecb(0x1f4)]();},VisuMZ['BattleCore'][_0x12d94d(0x116)]=Game_Action[_0x12d94d(0x4e9)]['setSkill'],Game_Action['prototype'][_0x12d94d(0xc7d)]=function(_0x22768d){const _0x35d223=_0x12d94d;VisuMZ[_0x35d223(0xadf)][_0x35d223(0x116)]['call'](this,_0x22768d),this['clearTargetBattlerKey']();},VisuMZ['BattleCore'][_0x12d94d(0xd12)]=Game_Action['prototype'][_0x12d94d(0x942)],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x942)]=function(_0x13aa4d){const _0x2e0dc8=_0x12d94d;VisuMZ[_0x2e0dc8(0xadf)][_0x2e0dc8(0xd12)][_0x2e0dc8(0xba3)](this,_0x13aa4d),this['clearTargetBattlerKey']();},Game_Action[_0x12d94d(0x4e9)]['makeDamageValue']=function(_0xbdb9a4,_0x262a56){const _0x34c7a3=_0x12d94d;return VisuMZ[_0x34c7a3(0xadf)][_0x34c7a3(0xb08)]['Damage'][_0x34c7a3(0x87f)]['call'](this,_0xbdb9a4,_0x262a56);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xca)]=function(_0x4c01fa,_0x463a6e){const _0x3269b5=_0x12d94d;return VisuMZ[_0x3269b5(0xadf)][_0x3269b5(0xb08)]['Damage'][_0x3269b5(0xd22)][_0x3269b5(0xba3)](this,_0x4c01fa,_0x463a6e);},Game_Action['prototype'][_0x12d94d(0x77c)]=function(_0xe69a4e,_0x5e12c0){const _0x1e9b63=_0x12d94d;return VisuMZ[_0x1e9b63(0xadf)][_0x1e9b63(0xb08)]['Damage']['GuardFormulaJS'][_0x1e9b63(0xba3)](this,_0xe69a4e,_0x5e12c0);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x655)]=Game_Action[_0x12d94d(0x4e9)]['itemHit'],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x72b)]=function(_0x1e6cdb){const _0x2c447c=_0x12d94d,_0x11b1f3=this['item']()['note'];if(_0x11b1f3[_0x2c447c(0x214)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x11b1f3[_0x2c447c(0x214)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0x2c447c(0x394)!==_0x2c447c(0x394))_0xe0f07c[_0x2c447c(0xadf)][_0x2c447c(0xd8)][_0x2c447c(0xba3)](this,_0x48d09b),this[_0x2c447c(0x769)]();else return Number(RegExp['$1'])/0x64;}else{let _0x4eecf6=VisuMZ['BattleCore'][_0x2c447c(0x655)][_0x2c447c(0xba3)](this,_0x1e6cdb);return _0x4eecf6=this[_0x2c447c(0xafd)][_0x2c447c(0x6e0)]*_0x4eecf6+this[_0x2c447c(0xafd)][_0x2c447c(0x307)],_0x4eecf6;}}},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x277)]=function(_0x5d5a8c){const _0x35fd23=_0x12d94d;if(!this['item']()[_0x35fd23(0x1df)]['critical'])return 0x0;let _0x597099=VisuMZ[_0x35fd23(0xadf)]['Settings']['Damage'][_0x35fd23(0x448)]['call'](this,_0x5d5a8c);return _0x597099=this[_0x35fd23(0xafd)][_0x35fd23(0x450)]*_0x597099+this[_0x35fd23(0xafd)][_0x35fd23(0xce1)],_0x597099;},Game_Action['prototype'][_0x12d94d(0xa55)]=function(_0x32423b){const _0x316cb4=_0x12d94d;return _0x32423b=VisuMZ[_0x316cb4(0xadf)][_0x316cb4(0xb08)][_0x316cb4(0x89b)][_0x316cb4(0x736)][_0x316cb4(0xba3)](this,_0x32423b),_0x32423b=this['_multipliers'][_0x316cb4(0xaa5)]*_0x32423b+this[_0x316cb4(0xafd)][_0x316cb4(0x3f2)],_0x32423b;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x773)]=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x459)],Game_Action['prototype']['evalDamageFormula']=function(_0x4f9cba){const _0x492146=_0x12d94d;if(this[_0x492146(0x6e5)]!==_0x492146(0x818))return this[_0x492146(0xbd4)](_0x4f9cba);else return DataManager[_0x492146(0x4a8)](this['item']())===_0x492146(0x554)?VisuMZ[_0x492146(0xadf)][_0x492146(0x773)][_0x492146(0xba3)](this,_0x4f9cba):this['evalDamageFormulaBattleCore'](_0x4f9cba);},Game_Action[_0x12d94d(0x4e9)]['setCustomDamageFormula']=function(_0x3a9406){this['_customDamageFormula']=_0x3a9406;},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xbd4)]=function(_0x39bee7){const _0x472057=_0x12d94d,_0x425cdf=this[_0x472057(0xc7)](),_0x5e7500=_0x425cdf['damage'][_0x472057(0x788)];_0x425cdf[_0x472057(0x1df)][_0x472057(0x788)]=this[_0x472057(0x6e5)];let _0x451bb8=VisuMZ[_0x472057(0xadf)][_0x472057(0x773)][_0x472057(0xba3)](this,_0x39bee7);return _0x425cdf[_0x472057(0x1df)][_0x472057(0x788)]=_0x5e7500,_0x451bb8;},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xc42)]=function(){const _0xcd61a8=_0x12d94d;if(this[_0xcd61a8(0xc7)]()['note'][_0xcd61a8(0x214)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x12c073=String(RegExp['$1'])['toUpperCase']()['trim']();return _0x12c073;}return _0xcd61a8(0x554);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x198)]=function(_0x2e2509){const _0x357261=_0x12d94d,_0x4d4a9e=DataManager[_0x357261(0x4a8)](this[_0x357261(0xc7)]()),_0x3a0217=VisuMZ[_0x357261(0x659)][_0x4d4a9e];try{return _0x3a0217['Formula'][_0x357261(0xba3)](this,_0x2e2509);}catch(_0x3b1969){if(_0x357261(0x785)===_0x357261(0x785)){if($gameTemp[_0x357261(0x4d6)]())console['log'](_0x3b1969);return VisuMZ[_0x357261(0xadf)][_0x357261(0x773)][_0x357261(0xba3)](this);}else this[_0x357261(0xcb)]=this['applyEasing'](this[_0x357261(0xcb)],this['_targetGrowX'],_0x455561,_0x340cf9,_0x4b1a80),this[_0x357261(0x665)]=this[_0x357261(0x1da)](this['_growY'],this[_0x357261(0xb68)],_0x421be7,_0x49fb35,_0x2e3f66);}},Game_Action[_0x12d94d(0x4e9)]['applyArmorModifiers']=function(_0x18f6c6,_0x8d68b2){const _0x2bddd0=_0x12d94d;if(this[_0x2bddd0(0x5c4)]())return _0x8d68b2;const _0x5bcfbb=this[_0x2bddd0(0xc1)](),_0x3149f8=_0x18f6c6;let _0x46d5b7=[],_0xbb7d89=[];_0x46d5b7[_0x2bddd0(0xbce)](this[_0x2bddd0(0x7d5)][_0x2bddd0(0x7be)],this[_0x2bddd0(0x7d5)][_0x2bddd0(0x8b9)]),_0xbb7d89[_0x2bddd0(0xbce)](this[_0x2bddd0(0x7d5)][_0x2bddd0(0x7ce)],this['_armorPenetration'][_0x2bddd0(0xaf2)]);const _0x2b44b5=this[_0x2bddd0(0xc7e)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3fac9a=this[_0x2bddd0(0xc7e)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x335125=this[_0x2bddd0(0xc7e)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x39b222=this[_0x2bddd0(0xc7e)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x46d5b7=_0x46d5b7[_0x2bddd0(0xa0b)](_0x3149f8['traitObjects']()[_0x2bddd0(0x43b)](_0x47a751=>_0x47a751&&_0x47a751[_0x2bddd0(0x7ba)]['match'](_0x2b44b5)?Number(RegExp['$1']):0x0)),_0xbb7d89=_0xbb7d89['concat'](_0x3149f8[_0x2bddd0(0x999)]()[_0x2bddd0(0x43b)](_0x30b3bb=>_0x30b3bb&&_0x30b3bb[_0x2bddd0(0x7ba)][_0x2bddd0(0x214)](_0x3fac9a)?Number(RegExp['$1'])/0x64:0x0)),_0x46d5b7=_0x46d5b7[_0x2bddd0(0xa0b)](_0x5bcfbb[_0x2bddd0(0x999)]()['map'](_0x5c7ae4=>_0x5c7ae4&&_0x5c7ae4[_0x2bddd0(0x7ba)][_0x2bddd0(0x214)](_0x335125)?Number(RegExp['$1']):0x0)),_0xbb7d89=_0xbb7d89['concat'](_0x5bcfbb[_0x2bddd0(0x999)]()[_0x2bddd0(0x43b)](_0x32c4f1=>_0x32c4f1&&_0x32c4f1['note']['match'](_0x39b222)?Number(RegExp['$1'])/0x64:0x0));if(this[_0x2bddd0(0xc7)]()[_0x2bddd0(0x7ba)][_0x2bddd0(0x214)](_0x335125)){if(_0x2bddd0(0xb37)===_0x2bddd0(0xb37))_0x46d5b7[_0x2bddd0(0xbce)](Number(RegExp['$1']));else return this[_0x2bddd0(0x50b)]();}return this['item']()['note']['match'](_0x39b222)&&_0xbb7d89[_0x2bddd0(0xbce)](Number(RegExp['$1'])),_0x8d68b2=_0x46d5b7['reduce']((_0x540096,_0x4399a1)=>_0x540096-_0x4399a1,_0x8d68b2),_0x8d68b2>0x0&&(_0x8d68b2=_0xbb7d89['reduce']((_0x54a268,_0x2244f1)=>_0x54a268*(0x1-_0x2244f1),_0x8d68b2)),_0x8d68b2;},VisuMZ[_0x12d94d(0xadf)]['Game_Action_executeDamage']=Game_Action[_0x12d94d(0x4e9)]['executeDamage'],Game_Action['prototype'][_0x12d94d(0xb6f)]=function(_0x14edbb,_0xfdc3b1){const _0x208a65=_0x12d94d;_0xfdc3b1=_0xfdc3b1*this[_0x208a65(0xafd)]['damageRate'],_0xfdc3b1+=this[_0x208a65(0xafd)][_0x208a65(0x13e)]*(_0xfdc3b1>=0x0?0x1:-0x1),_0xfdc3b1=this[_0x208a65(0x4a7)](_0x208a65(0x505),_0x14edbb,_0xfdc3b1,![]),_0xfdc3b1=this[_0x208a65(0x7e5)](_0xfdc3b1),_0xfdc3b1=Math['round'](_0xfdc3b1),this['_executedValue']=_0xfdc3b1,this[_0x208a65(0x321)]=this['_totalValue']||0x0,this[_0x208a65(0x321)]+=_0xfdc3b1,VisuMZ[_0x208a65(0xadf)][_0x208a65(0x744)]['call'](this,_0x14edbb,_0xfdc3b1),this[_0x208a65(0x4a7)](_0x208a65(0x4dd),_0x14edbb,_0xfdc3b1,!![]);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x7e5)]=function(_0x135280){const _0x53b3bd=_0x12d94d;if(this[_0x53b3bd(0xaa9)]())return _0x135280;return _0x135280=this[_0x53b3bd(0xb4)](_0x135280),_0x135280=this['applyHardDamageCap'](_0x135280),_0x135280;},Game_Action[_0x12d94d(0x4e9)]['isBypassDamageCap']=function(){const _0x1145e7=_0x12d94d,_0x2dc27c=/<BYPASS DAMAGE CAP>/i;if(this[_0x1145e7(0xc7)]()[_0x1145e7(0x7ba)]['match'](_0x2dc27c))return!![];if(this['subject']()[_0x1145e7(0x999)]()['some'](_0x20ba39=>_0x20ba39&&_0x20ba39[_0x1145e7(0x7ba)]['match'](_0x2dc27c)))return!![];return!VisuMZ[_0x1145e7(0xadf)][_0x1145e7(0xb08)][_0x1145e7(0x89b)]['EnableDamageCap'];},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xb4)]=function(_0x320920){const _0xc5e813=_0x12d94d;if(!VisuMZ[_0xc5e813(0xadf)]['Settings'][_0xc5e813(0x89b)][_0xc5e813(0xd04)])return _0x320920;const _0x17bec1=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0xc5e813(0x7ba)][_0xc5e813(0x214)](_0x17bec1))return _0x320920;if(this[_0xc5e813(0xc1)]()[_0xc5e813(0x999)]()[_0xc5e813(0x97f)](_0x2c2dca=>_0x2c2dca&&_0x2c2dca[_0xc5e813(0x7ba)]['match'](_0x17bec1)))return _0x320920;const _0xb41c77=_0x320920<0x0?-0x1:0x1;_0x320920=Math[_0xc5e813(0xc19)](_0x320920);let _0xed33cb=this[_0xc5e813(0xc1)]()[_0xc5e813(0x681)]();this[_0xc5e813(0xc7)]()['note'][_0xc5e813(0x214)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0xc5e813(0x8d3)===_0xc5e813(0x8d3)?_0xed33cb+=Number(RegExp['$1'])/0x64:_0x5b4a84=_0x1d0570);_0xed33cb=_0xed33cb[_0xc5e813(0xa2d)](0.01,0x1);const _0x17e04c=this[_0xc5e813(0x832)](),_0x5378cb=_0xed33cb*_0x17e04c;if(_0x320920>_0x5378cb&&_0x17e04c>_0x5378cb){_0x320920-=_0x5378cb;const _0x51ca22=VisuMZ[_0xc5e813(0xadf)][_0xc5e813(0xb08)][_0xc5e813(0x89b)]['DefaultSoftScaler'],_0x2662cd=Math[_0xc5e813(0x660)](0x1-_0x320920/((_0x17e04c-_0x5378cb)*_0x51ca22+_0x320920),0.01);_0x320920*=_0x2662cd,_0x320920+=_0x5378cb;}return _0x320920*_0xb41c77;},Game_Action[_0x12d94d(0x4e9)]['getHardDamageCap']=function(){const _0x490104=_0x12d94d;return this[_0x490104(0xc7)]()[_0x490104(0x7ba)][_0x490104(0x214)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x490104(0xc1)]()[_0x490104(0x104)]();},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x54b)]=function(_0x5b3614){const _0x2e122a=_0x12d94d;console[_0x2e122a(0xdd)](_0x5b3614);let _0x33d7eb=this[_0x2e122a(0x832)]();return _0x5b3614[_0x2e122a(0xa2d)](-_0x33d7eb,_0x33d7eb);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x7e2)]=function(){const _0x2a26a5=_0x12d94d;if(!this['item']())return![];if(!$gameParty[_0x2a26a5(0x208)]())return![];return(this[_0x2a26a5(0xc7)]()['note']||'')[_0x2a26a5(0x214)](/<DISPERSE DAMAGE>/i);},Game_Action['prototype'][_0x12d94d(0x4d8)]=function(_0x4def0b){const _0x4b65f0=_0x12d94d;if(this[_0x4b65f0(0x7e2)]()){if('EFCSe'!==_0x4b65f0(0x2cd))return _0x5800bb['attackMotions'][0x0];else{let _0x8d7fde=BattleManager[_0x4b65f0(0x5d4)];_0x4def0b/=_0x8d7fde['length'],this[_0x4b65f0(0xcfb)]()&&(_0x4b65f0(0x9c7)!==_0x4b65f0(0x44d)?_0x4def0b*=this['subject']()[_0x4b65f0(0x8a9)]()+0x1:(_0x5dbdda[_0x4b65f0(0xadf)][_0x4b65f0(0x23f)]&&_0x2623c0[_0x4b65f0(0xadf)]['ParseSkillNotetags'][_0x4b65f0(0xba3)](this,_0x1561b4),_0x470629[_0x4b65f0(0xadf)][_0x4b65f0(0x225)](_0x5ef5a1),_0x43b2bd['BattleCore'][_0x4b65f0(0x3eb)](_0x2b3108))),_0x4def0b=_0x4def0b>0x0?Math['ceil'](_0x4def0b):Math['floor'](_0x4def0b);}}return _0x4def0b;},VisuMZ[_0x12d94d(0xadf)]['Game_Action_makeDamageValueDisperse']=Game_Action[_0x12d94d(0x4e9)]['makeDamageValue'],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xa65)]=function(_0x58a1ce,_0x3ae828){const _0x15e138=_0x12d94d;let _0x3c5bc2=VisuMZ['BattleCore'][_0x15e138(0x13c)][_0x15e138(0xba3)](this,_0x58a1ce,_0x3ae828);return this[_0x15e138(0x4d8)](_0x3c5bc2);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x5ce)]=function(_0xa5f497,_0x596621){const _0x1deaad=_0x12d94d;let _0x6db025=(_0xa5f497[_0x1deaad(0xcdb)]*_0x596621[_0x1deaad(0x5e6)]+_0x596621[_0x1deaad(0x409)])*_0xa5f497[_0x1deaad(0x29e)];_0x6db025=this[_0x1deaad(0x4d8)](_0x6db025);if(this[_0x1deaad(0x65d)]()){if(_0x1deaad(0x865)!==_0x1deaad(0xc17))_0x6db025*=this['subject']()[_0x1deaad(0x8c5)];else{const _0x1ed629=this[_0x1deaad(0x727)];if(_0x1ed629[_0x197fd8])return _0x1ed629[_0x5af00c];else{const _0x2cc27b=new _0x206236();return _0x1ed629[_0x109c4b]=_0x2cc27b,this[_0x1deaad(0x26f)](_0x2cc27b),this['addChildToBack'](this[_0x1deaad(0x9ae)]),_0x2cc27b;}}}_0x6db025=Math['floor'](_0x6db025),_0x6db025!==0x0&&(_0xa5f497[_0x1deaad(0xa45)](_0x6db025),this['makeSuccess'](_0xa5f497));},Game_Action['prototype'][_0x12d94d(0x80d)]=function(_0x2b5014,_0xe50349){const _0x4eb8fc=_0x12d94d;let _0x1c3412=(_0x2b5014[_0x4eb8fc(0x51d)]*_0xe50349[_0x4eb8fc(0x5e6)]+_0xe50349[_0x4eb8fc(0x409)])*_0x2b5014[_0x4eb8fc(0x29e)];_0x1c3412=this[_0x4eb8fc(0x4d8)](_0x1c3412),this[_0x4eb8fc(0x65d)]()&&(_0x4eb8fc(0x860)===_0x4eb8fc(0xbd3)?_0x3f5fd2[_0x4eb8fc(0xbce)](_0x4eb8fc(0x581),_0x428b2c,_0x55f1fd,!![]):_0x1c3412*=this[_0x4eb8fc(0xc1)]()[_0x4eb8fc(0x8c5)]),_0x1c3412=Math[_0x4eb8fc(0x28f)](_0x1c3412),_0x1c3412!==0x0&&('arNFD'===_0x4eb8fc(0xad9)?(_0x5956d6[_0x4eb8fc(0xadf)][_0x4eb8fc(0x8ee)][_0x4eb8fc(0xba3)](this),this[_0x4eb8fc(0xaf1)]()):(_0x2b5014[_0x4eb8fc(0xca6)](_0x1c3412),this[_0x4eb8fc(0xaa7)](_0x2b5014)));},Game_Action[_0x12d94d(0x4e9)]['itemEffectGainTp']=function(_0x5e6047,_0x57b060){const _0x2550d7=_0x12d94d;let _0x2227d6=Math[_0x2550d7(0x28f)](_0x57b060[_0x2550d7(0x5e6)]);_0x2227d6=this[_0x2550d7(0x4d8)](_0x2227d6),_0x2227d6!==0x0&&(_0x5e6047[_0x2550d7(0x119)](_0x2227d6),this[_0x2550d7(0xaa7)](_0x5e6047));},VisuMZ['BattleCore']['Game_Action_apply']=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xa8a)],Game_Action[_0x12d94d(0x4e9)]['apply']=function(_0x38a55a){const _0x37ce70=_0x12d94d;this['applyBattleCoreJS'](_0x37ce70(0xc37),_0x38a55a,0x0,!![]),VisuMZ[_0x37ce70(0xadf)][_0x37ce70(0x15c)][_0x37ce70(0xba3)](this,_0x38a55a),this[_0x37ce70(0x4a7)](_0x37ce70(0x44f),_0x38a55a,this[_0x37ce70(0xab1)]||0x0,!![]),this[_0x37ce70(0x78d)](_0x38a55a);},Game_Action['prototype'][_0x12d94d(0x4a7)]=function(_0x35ae10,_0x5933ca,_0x476471,_0x2db6cd){const _0x21607c=_0x12d94d;if(this[_0x21607c(0x2e4)]||this[_0x21607c(0x180)])return;_0x476471=_0x476471||0x0;const _0x56d62d=_0x476471,_0x5b2485=VisuMZ[_0x21607c(0xadf)][_0x21607c(0xb08)][_0x21607c(0x9d2)],_0x4a503f=_0x35ae10[_0x21607c(0x3d0)]('');if(_0x5b2485[_0x4a503f]){if('RFrup'==='RFrup'){_0x476471=_0x5b2485[_0x4a503f]['call'](this,_0x476471,_0x5933ca);if(_0x2db6cd)_0x476471=_0x56d62d;}else{this['removeAnimationFromContainer'](_0x39a1c3);for(const _0x49997e of _0x38e6fd[_0x21607c(0x323)]){_0x49997e[_0x21607c(0xbfc)]&&_0x49997e[_0x21607c(0xbfc)]();}_0x56312b['destroy']();}}let _0x4f7ff6=VisuMZ[_0x21607c(0xadf)]['createKeyJS'](this[_0x21607c(0xc7)](),_0x35ae10[_0x21607c(0x3d0)](''));if(VisuMZ[_0x21607c(0xadf)]['JS'][_0x4f7ff6]){if(_0x21607c(0x8ce)!==_0x21607c(0x8ce))return _0xc26969[_0x21607c(0xadf)]['Game_Interpreter_command283'][_0x21607c(0xba3)](this,_0x5c75a1);else{_0x476471=VisuMZ[_0x21607c(0xadf)]['JS'][_0x4f7ff6][_0x21607c(0xba3)](this,this[_0x21607c(0xc1)](),_0x5933ca,this[_0x21607c(0xc7)](),_0x476471);if(_0x2db6cd)_0x476471=_0x56d62d;}}for(const _0x56e0f3 of this[_0x21607c(0xc1)]()[_0x21607c(0x999)]()){if(!_0x56e0f3)continue;_0x4f7ff6=VisuMZ[_0x21607c(0xadf)][_0x21607c(0x365)](_0x56e0f3,_0x35ae10['format'](_0x21607c(0x6b9)));if(VisuMZ[_0x21607c(0xadf)]['JS'][_0x4f7ff6]){_0x476471=VisuMZ[_0x21607c(0xadf)]['JS'][_0x4f7ff6][_0x21607c(0xba3)](this,this[_0x21607c(0xc1)](),_0x5933ca,_0x56e0f3,_0x476471);if(_0x2db6cd)_0x476471=_0x56d62d;}}for(const _0x458344 of _0x5933ca[_0x21607c(0x999)]()){if(!_0x458344)continue;_0x4f7ff6=VisuMZ[_0x21607c(0xadf)][_0x21607c(0x365)](_0x458344,_0x35ae10['format']('AsTarget'));if(VisuMZ[_0x21607c(0xadf)]['JS'][_0x4f7ff6]){if(_0x21607c(0x52d)!==_0x21607c(0x842)){_0x476471=VisuMZ[_0x21607c(0xadf)]['JS'][_0x4f7ff6][_0x21607c(0xba3)](this,this['subject'](),_0x5933ca,_0x458344,_0x476471);if(_0x2db6cd)_0x476471=_0x56d62d;}else{if(!_0x3bd932[_0x21607c(0xb92)]())return;if(!_0x12e497[_0x21607c(0x857)])return;_0x433cac['ConvertParams'](_0x3cf8bf,_0x10526f);const _0x5862c6=_0x299d65[_0x21607c(0x664)](),_0x52d065=_0x3ebe11[_0x21607c(0x612)],_0x27964f=_0x2bb266[_0x21607c(0x275)],_0xebb311=_0x37559a[_0x21607c(0x8c0)];if(_0x52d065){const _0x3bd4e9=_0xcb446d[_0x21607c(0x1d0)](_0x2d2179[_0x21607c(0xa80)]/0x2),_0x5d6ea0=_0x1e4174[_0x21607c(0x1d0)](_0x103357[_0x21607c(0xd17)]/0x2);_0x102a80[_0x21607c(0x438)](_0x3bd4e9,_0x5d6ea0,_0x25e416['Duration'],_0x41cadd['EasingType']);}_0x27964f&&_0x25f235[_0x21607c(0x163)](0x0,0x0,_0x593ff8[_0x21607c(0x227)],_0x5525a1[_0x21607c(0x7fd)]);if(_0xebb311)_0x5862c6[_0x21607c(0xb30)]('battleCamera');}}}return _0x476471;},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x99b)]=function(_0x5e4553){const _0x1bad0d=_0x12d94d,_0x55e07f=this['_totalValue']||0x0,_0x3fa1d7=VisuMZ[_0x1bad0d(0xadf)][_0x1bad0d(0xb08)][_0x1bad0d(0x9d2)],_0x1a0716=_0x5e4553[_0x1bad0d(0x3d0)]('');_0x3fa1d7[_0x1a0716]&&_0x3fa1d7[_0x1a0716][_0x1bad0d(0xba3)](this,_0x55e07f);let _0x15ff14=VisuMZ[_0x1bad0d(0xadf)][_0x1bad0d(0x365)](this[_0x1bad0d(0xc7)](),_0x5e4553);if(VisuMZ['BattleCore']['JS'][_0x15ff14]){if(_0x1bad0d(0xb9d)!==_0x1bad0d(0xb9d))return _0x515f8e=_0x325806[_0x1bad0d(0xadf)][_0x1bad0d(0xb08)][_0x1bad0d(0x89b)]['CriticalHitMultiplier'][_0x1bad0d(0xba3)](this,_0xa65a73),_0x44f8ac=this['_multipliers'][_0x1bad0d(0xaa5)]*_0x283eb4+this[_0x1bad0d(0xafd)][_0x1bad0d(0x3f2)],_0x4d056d;else VisuMZ['BattleCore']['JS'][_0x15ff14][_0x1bad0d(0xba3)](this,this[_0x1bad0d(0xc1)](),this[_0x1bad0d(0xc1)](),this['item'](),_0x55e07f);}for(const _0x3065d0 of this[_0x1bad0d(0xc1)]()[_0x1bad0d(0x999)]()){if(!_0x3065d0)continue;_0x15ff14=VisuMZ[_0x1bad0d(0xadf)][_0x1bad0d(0x365)](_0x3065d0,_0x5e4553);if(VisuMZ[_0x1bad0d(0xadf)]['JS'][_0x15ff14]){if('EHfrJ'!==_0x1bad0d(0x7c4))VisuMZ[_0x1bad0d(0xadf)]['JS'][_0x15ff14]['call'](this,this[_0x1bad0d(0xc1)](),this[_0x1bad0d(0xc1)](),_0x3065d0,_0x55e07f);else{if(this[_0x1bad0d(0x2b7)]())return![];if(this['isAlive']()&&this['isAppeared']())return!![];if(this[_0x1bad0d(0x2c3)]()&&this[_0x1bad0d(0xad)]()){if(this[_0x1bad0d(0xb91)]()&&this['allowCollapse']())return![];}else{if(this[_0x1bad0d(0xb91)]())return![];}return!![];}}}},Game_Action[_0x12d94d(0x4e9)]['speed']=function(){const _0x539b01=_0x12d94d;return VisuMZ[_0x539b01(0xadf)]['Settings']['Mechanics'][_0x539b01(0xa27)][_0x539b01(0xba3)](this);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x9f5)]=function(){const _0x3365bb=_0x12d94d;return VisuMZ[_0x3365bb(0xadf)][_0x3365bb(0xb08)][_0x3365bb(0x9d2)][_0x3365bb(0xe0)];},Game_Action['prototype'][_0x12d94d(0x117)]=function(){const _0x269299=_0x12d94d;if(this[_0x269299(0x737)]===_0x269299(0x105))return![];if(this[_0x269299(0x737)]===_0x269299(0x1be))return![];if(!this[_0x269299(0xc7)]())return![];return this[_0x269299(0xc7)]()[_0x269299(0x7ba)]['match'](/<JS TARGETS>/i);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x404)]=function(){const _0x33254b=_0x12d94d;if(this[_0x33254b(0x737)]===_0x33254b(0x105))return![];if(this[_0x33254b(0x737)]===_0x33254b(0x1be))return![];if(!this[_0x33254b(0x474)]&&this[_0x33254b(0xc1)]()[_0x33254b(0x9b)]())return![];if(this[_0x33254b(0x117)]())return!![];if(!this['item']())return![];return typeof this['item']()['scope']===_0x33254b(0x304);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x90a)]=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xc21)],Game_Action[_0x12d94d(0x4e9)]['isForOpponent']=function(){const _0x35a756=_0x12d94d;if(this['_targetBattlerKey']===_0x35a756(0x105))return![];if(this[_0x35a756(0x737)]==='all\x20enemies')return!![];if(this[_0x35a756(0x404)]()&&!this[_0x35a756(0x117)]()){if(_0x35a756(0x5f1)===_0x35a756(0x5f1))return this[_0x35a756(0x200)]();else _0x6aad65=(_0x2be1ac+_0x575f99)/0x2;}else return VisuMZ['BattleCore'][_0x35a756(0x90a)][_0x35a756(0xba3)](this);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x200)]=function(){const _0x4c57b9=_0x12d94d,_0x26d188=this[_0x4c57b9(0xc7)]()['scope'];if(_0x26d188[_0x4c57b9(0x214)](/ANY/i))return!![];return _0x26d188[_0x4c57b9(0x214)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x1e0)]=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xcf9)],Game_Action[_0x12d94d(0x4e9)]['isForFriend']=function(){const _0x417660=_0x12d94d;if(this['_targetBattlerKey']===_0x417660(0x105))return!![];if(this['_targetBattlerKey']===_0x417660(0x1be))return![];if(this[_0x417660(0x404)]()&&!this['isCustomBattleScope']())return this['isForFriendBattleCore']();else{if('dBeQx'!=='Jnbcp')return VisuMZ[_0x417660(0xadf)][_0x417660(0x1e0)]['call'](this);else _0x20e297['BattleCore'][_0x417660(0x9fd)]&&_0x5a7730['BattleCore'][_0x417660(0x9fd)][_0x417660(0xba3)](this,_0x33c916),_0x280069[_0x417660(0xadf)][_0x417660(0x5f4)](_0x14c91d);}},Game_Action['prototype']['isForFriendBattleCore']=function(){const _0x35b90d=_0x12d94d,_0x8e2f24=this[_0x35b90d(0xc7)]()[_0x35b90d(0xbad)];return _0x8e2f24[_0x35b90d(0x214)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action['prototype'][_0x12d94d(0xcb5)]=function(){const _0x2d7903=_0x12d94d;if(this[_0x2d7903(0x404)]()&&!this['isCustomBattleScope']()){if(_0x2d7903(0xc7c)===_0x2d7903(0xc7c)){const _0x30090a=this[_0x2d7903(0xc7)]()[_0x2d7903(0xbad)];return _0x30090a['match'](/(?:ENEMY|FOE)/i)&&_0x30090a['match'](/OR/i)&&_0x30090a[_0x2d7903(0x214)](/(?:ALLY|FRIEND)/i);}else this[_0x2d7903(0x3e4)]('guard');}else return![];},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x4b8)]=function(){const _0x110b2f=_0x12d94d;if(this['isForAnyone']()){const _0x27f576=this[_0x110b2f(0xc7)]()[_0x110b2f(0xbad)];if(_0x27f576[_0x110b2f(0x214)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x71d)]=function(){const _0x35c63c=_0x12d94d;if(this[_0x35c63c(0xcb5)]()){if('OGaRi'==='OGaRi'){const _0x2c630e=this['item']()[_0x35c63c(0xbad)];if(_0x2c630e[_0x35c63c(0x214)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}else return this[_0x35c63c(0x5bf)]()&&this[_0x35c63c(0x5bf)]()[_0x35c63c(0xc7)]()&&!this['currentAction']()[_0x35c63c(0x276)]();}return![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb70)]=Game_Action[_0x12d94d(0x4e9)]['isForAliveFriend'],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xc27)]=function(){const _0x25eda1=_0x12d94d;if(this[_0x25eda1(0x737)]===_0x25eda1(0x105))return!![];if(this['isBattleCoreTargetScope']()&&!this[_0x25eda1(0x117)]()){if(_0x25eda1(0x7b1)!==_0x25eda1(0x7b1))this[_0x25eda1(0x9ae)][_0x25eda1(0x9bf)]=this['isOpen']();else return this[_0x25eda1(0x1b4)]();}else return VisuMZ[_0x25eda1(0xadf)][_0x25eda1(0xb70)]['call'](this);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x591)]=Game_Action['prototype'][_0x12d94d(0x2e7)],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x2e7)]=function(){const _0x46b741=_0x12d94d;if(this[_0x46b741(0x737)]===_0x46b741(0x105))return VisuMZ[_0x46b741(0xadf)][_0x46b741(0x591)][_0x46b741(0xba3)](this);return VisuMZ[_0x46b741(0xadf)][_0x46b741(0x591)][_0x46b741(0xba3)](this);},Game_Action['prototype'][_0x12d94d(0x1b4)]=function(){const _0x70f4ee=_0x12d94d;if(this[_0x70f4ee(0xcb5)]())return!![];return![];},Game_Action[_0x12d94d(0x4e9)]['isForNotUser']=function(){const _0x2809da=_0x12d94d;return this[_0x2809da(0xc7)]()&&this[_0x2809da(0xc7)]()[_0x2809da(0x7ba)][_0x2809da(0x214)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore']['Game_Action_isForOne']=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xae5)],Game_Action[_0x12d94d(0x4e9)]['isForOne']=function(){const _0x52d70b=_0x12d94d;if(this['_targetBattlerKey']===_0x52d70b(0x105))return![];if(this[_0x52d70b(0x737)]===_0x52d70b(0x1be))return![];if(this['isBattleCoreTargetScope']()&&!this[_0x52d70b(0x117)]()){if(_0x52d70b(0x62a)!==_0x52d70b(0xa7b))return this[_0x52d70b(0x489)]();else _0x3841be=this[_0x52d70b(0x90)]();}else return VisuMZ[_0x52d70b(0xadf)][_0x52d70b(0xa5d)][_0x52d70b(0xba3)](this);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x489)]=function(){if(this['isForAnyone']())return!![];return![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xa2e)]=Game_Action['prototype'][_0x12d94d(0x2a1)],Game_Action['prototype'][_0x12d94d(0x2a1)]=function(){const _0x3bdadf=_0x12d94d;if(this[_0x3bdadf(0x737)]===_0x3bdadf(0x105))return![];if(this[_0x3bdadf(0x737)]===_0x3bdadf(0x1be))return![];if(this[_0x3bdadf(0x404)]()&&!this[_0x3bdadf(0x117)]()){if(_0x3bdadf(0xa09)!==_0x3bdadf(0xa09)){if(_0x1f611c[_0x3bdadf(0xadf)][_0x3bdadf(0xb08)][_0x3bdadf(0x89b)][_0x3bdadf(0x303)]??!![])return![];return _0x54aa6d['isSceneBattle']()&&this['_endingBattle'];}else return this[_0x3bdadf(0x898)]();}else{if('oATaK'===_0x3bdadf(0x1cc))_0x894e30[_0x3bdadf(0x8d)](_0x35e939),_0x40c327[_0x3bdadf(0xc35)](_0x57377c,_0xf2370c);else return VisuMZ[_0x3bdadf(0xadf)][_0x3bdadf(0xa2e)][_0x3bdadf(0xba3)](this);}},Game_Action['prototype'][_0x12d94d(0x898)]=function(){const _0x5707f2=_0x12d94d,_0x16fba0=this[_0x5707f2(0xc7)]()[_0x5707f2(0xbad)];return _0x16fba0[_0x5707f2(0x214)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xbb8)]=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x713)],Game_Action[_0x12d94d(0x4e9)]['isForAll']=function(){const _0x243e13=_0x12d94d;if(this[_0x243e13(0x737)]===_0x243e13(0x105))return!![];if(this['_targetBattlerKey']===_0x243e13(0x1be))return!![];return VisuMZ['BattleCore'][_0x243e13(0xbb8)][_0x243e13(0xba3)](this);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x790)]=function(){const _0x3dd815=_0x12d94d;if(!this[_0x3dd815(0xc7)]())return![];if(this[_0x3dd815(0x2e7)]())return![];return(this[_0x3dd815(0xc7)]()['note']||'')[_0x3dd815(0x214)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x12d94d(0xadf)]['Game_Action_testApply']=Game_Action[_0x12d94d(0x4e9)]['testApply'],Game_Action['prototype'][_0x12d94d(0xbb3)]=function(_0x5c79e6){const _0x53d96f=_0x12d94d;if(this[_0x53d96f(0x352)]()&&_0x5c79e6===this[_0x53d96f(0xc1)]())return![];return VisuMZ[_0x53d96f(0xadf)][_0x53d96f(0x895)][_0x53d96f(0xba3)](this,_0x5c79e6);},VisuMZ['BattleCore']['Game_Action_itemTargetCandidates']=Game_Action['prototype'][_0x12d94d(0xc9c)],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xc9c)]=function(){const _0x4514fe=_0x12d94d,_0x165ed6=VisuMZ[_0x4514fe(0xadf)][_0x4514fe(0x2ea)][_0x4514fe(0xba3)](this);if(this[_0x4514fe(0x352)]())_0x165ed6['remove'](this['subject']());return _0x165ed6;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x33e)]=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x2f8)],Game_Action['prototype'][_0x12d94d(0x2f8)]=function(){const _0x3f02a4=_0x12d94d;return this['isBattleCoreTargetScope']()&&!this[_0x3f02a4(0x117)]()?this[_0x3f02a4(0x804)]():VisuMZ[_0x3f02a4(0xadf)]['Game_Action_needsSelection'][_0x3f02a4(0xba3)](this);},Game_Action[_0x12d94d(0x4e9)]['needsSelectionBattleCore']=function(){const _0x57e90a=_0x12d94d,_0x1ca0c6=this[_0x57e90a(0xc7)]()[_0x57e90a(0xbad)];if(_0x1ca0c6[_0x57e90a(0x214)](/RANDOM/i))return![];if(_0x1ca0c6[_0x57e90a(0x214)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x1ca0c6[_0x57e90a(0x214)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x1ca0c6[_0x57e90a(0x214)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x1ca0c6[_0x57e90a(0x214)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x57e90a(0xadf)][_0x57e90a(0x33e)][_0x57e90a(0xba3)](this);},VisuMZ['BattleCore'][_0x12d94d(0x2a9)]=Game_Action['prototype'][_0x12d94d(0x9c5)],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x9c5)]=function(){const _0x56ce08=_0x12d94d;let _0x4815e2=[];if(this['isBattleCoreTargetScope']()){if(_0x56ce08(0x24d)!==_0x56ce08(0x24d)){_0x4ffb2e(_0x56ce08(0x5cf)),_0x1b64e8[_0x56ce08(0xa82)]();return;}else this['isCustomBattleScope']()?_0x4815e2=this['makeTargetsBattleCoreJS']():_0x4815e2=this[_0x56ce08(0xcab)]();}else _0x4815e2=VisuMZ[_0x56ce08(0xadf)][_0x56ce08(0x2a9)]['call'](this);return _0x4815e2=this[_0x56ce08(0xa0f)](_0x4815e2),_0x4815e2;},Game_Action[_0x12d94d(0x4e9)]['isSubjectValidForAnyoneSelect']=function(){const _0x5a9223=_0x12d94d;return this[_0x5a9223(0xc1)]()[_0x5a9223(0xc83)]()&&!this['subject']()[_0x5a9223(0x5dc)]();},Game_Action[_0x12d94d(0x4e9)]['makeTargetsBattleCoreJS']=function(){const _0x151b61=_0x12d94d,_0x52f613=VisuMZ[_0x151b61(0xadf)][_0x151b61(0x365)](this['item'](),_0x151b61(0xc0));if(VisuMZ[_0x151b61(0xadf)]['JS'][_0x52f613]){targets=VisuMZ['BattleCore'][_0x151b61(0x2a9)]['call'](this);const _0x18eb2e=VisuMZ[_0x151b61(0xadf)][_0x151b61(0x365)](this[_0x151b61(0xc7)](),_0x151b61(0xc0));return targets=VisuMZ[_0x151b61(0xadf)]['JS'][_0x18eb2e][_0x151b61(0xba3)](this,this[_0x151b61(0xc1)](),targets),this[_0x151b61(0x7bd)](targets);}return this[_0x151b61(0xcab)]();},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xcab)]=function(){const _0x4ff8b8=_0x12d94d;let _0x40e391=[];const _0x4feade=String(this[_0x4ff8b8(0xc7)]()['scope']);if(this['isForAnyoneFocusOpponents']())return this[_0x4ff8b8(0xb22)]()?(_0x40e391=this['getBattlerKeyTargets'](),this['repeatTargets'](_0x40e391)):(this['_targetIndex']=-0x1,_0x40e391[_0x4ff8b8(0xbce)](...this['targetsForOpponents']()),this[_0x4ff8b8(0x7bd)](_0x40e391));if(this[_0x4ff8b8(0x4b8)]()){if(this[_0x4ff8b8(0xb22)]())return _0x40e391=this['getBattlerKeyTargets'](),this[_0x4ff8b8(0x7bd)](_0x40e391);else{if(_0x4ff8b8(0x207)==='OmaKj')return 0x0;else{if(Imported[_0x4ff8b8(0x269)]){if('EmlBQ'!==_0x4ff8b8(0xaf3)){if(VisuMZ['BattleAI'][_0x4ff8b8(0xa0d)]<1.19){if(_0x4ff8b8(0x89f)!==_0x4ff8b8(0x89f))return this[_0x4ff8b8(0x4bd)]();else{let _0x456f3f='';_0x456f3f+='VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20',_0x456f3f+=_0x4ff8b8(0x71b),_0x456f3f+=_0x4ff8b8(0x1d1),alert(_0x456f3f),SceneManager[_0x4ff8b8(0xa82)]();}}}else this[_0x4ff8b8(0x16d)]();}return this[_0x4ff8b8(0x729)]=-0x1,_0x40e391[_0x4ff8b8(0xbce)](...this['targetsForFriends']()),this[_0x4ff8b8(0x7bd)](_0x40e391);}}}if(_0x4feade[_0x4ff8b8(0x214)](/(\d+) RANDOM ANY/i)){if(_0x4ff8b8(0xf8)!==_0x4ff8b8(0xf8))_0x29dcb1=_0x12b659;else{let _0x421e78=Number(RegExp['$1']);while(_0x421e78--){if(_0x4ff8b8(0x92e)===_0x4ff8b8(0x14a))this['addGuardCommand']();else{const _0x247059=Math[_0x4ff8b8(0xbec)](0x2)===0x0?this[_0x4ff8b8(0x297)]():this[_0x4ff8b8(0x73c)]();_0x40e391['push'](_0x247059[_0x4ff8b8(0xcd8)]());}}return this[_0x4ff8b8(0x7bd)](_0x40e391);}}if(_0x4feade[_0x4ff8b8(0x214)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x4e04d7=Number(RegExp['$1']);while(_0x4e04d7--){_0x40e391[_0x4ff8b8(0xbce)](this[_0x4ff8b8(0x297)]()[_0x4ff8b8(0xcd8)]());}return this[_0x4ff8b8(0x7bd)](_0x40e391);}if(_0x4feade[_0x4ff8b8(0x214)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x260e73=Number(RegExp['$1']);while(_0x260e73--){_0x40e391[_0x4ff8b8(0xbce)](this['friendsUnit']()['trueRandomTarget']());}return this[_0x4ff8b8(0x7bd)](_0x40e391);}if(_0x4feade[_0x4ff8b8(0x214)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x4ff8b8(0x9e1)!==_0x4ff8b8(0xf0))return _0x40e391[_0x4ff8b8(0xbce)](...this['friendsUnit']()[_0x4ff8b8(0xafe)]()[_0x4ff8b8(0xd0e)](_0x3eb174=>_0x3eb174!==this[_0x4ff8b8(0xc1)]())),this[_0x4ff8b8(0x7bd)](_0x40e391);else{let _0xe7faa7=_0x4ff8b8(0x2a0);if(this[_0x4ff8b8(0x71a)](_0xe7faa7))return this[_0x4ff8b8(0xca3)][_0xe7faa7];return this[_0x4ff8b8(0xca3)][_0xe7faa7]=this[_0x4ff8b8(0xcbd)](this[_0x4ff8b8(0xaa2)]()),this[_0x4ff8b8(0xca3)][_0xe7faa7];}}return VisuMZ[_0x4ff8b8(0xadf)][_0x4ff8b8(0x2a9)][_0x4ff8b8(0xba3)](this);},Game_Action['prototype'][_0x12d94d(0xb0f)]=function(_0x16c54e){const _0x8419ed=_0x12d94d,_0x2b1818=[];for(let _0x17e0e4=0x0;_0x17e0e4<this['numTargets']();_0x17e0e4++){if(_0x8419ed(0x8c2)===_0x8419ed(0x27d)){if(!_0x4ede24[_0x8419ed(0xb92)]())return;const _0x19a04d=_0x24faed[_0x8419ed(0xf5)];_0x19a04d[_0x8419ed(0x4ef)]();}else _0x2b1818['push'](_0x16c54e[_0x8419ed(0xcd8)]());}return _0x2b1818;},Game_Action['prototype'][_0x12d94d(0xa0f)]=function(_0x4d453e){const _0x3eb5c8=_0x12d94d;if(!this[_0x3eb5c8(0xc7)]())return _0x4d453e;const _0x2fac29=this[_0x3eb5c8(0xc7)]()[_0x3eb5c8(0x7ba)];if(this['isForNotUser']()){this['isForAll']()&&(_0x3eb5c8(0x89e)!=='IZtlA'?_0x4d453e[_0x3eb5c8(0x8fc)](this[_0x3eb5c8(0xc1)]()):this[_0x3eb5c8(0x5a9)](_0x2eabed,_0x32dc10,_0x26350b));if(_0x4d453e[_0x3eb5c8(0x511)](this[_0x3eb5c8(0xc1)]())){if(_0x3eb5c8(0x697)!==_0x3eb5c8(0x697)){const _0x500edc=this[_0x3eb5c8(0x760)],_0xff0e02=_0x2c8e05[_0x3eb5c8(0x4b0)](),_0x30f6c0=_0x55ae9d['x']+_0x254fc[_0x3eb5c8(0x28f)](_0x20b337[_0x3eb5c8(0xa80)]/0x2)+_0xff0e02;_0x500edc['x']=_0x500edc[_0x3eb5c8(0xa80)]/-0x2+_0x30f6c0,_0x500edc['y']=_0x8b6c1b['floor'](_0x2fe783[_0x3eb5c8(0xd17)]/0x2);}else{const _0x1321a0=this[_0x3eb5c8(0x73c)]()[_0x3eb5c8(0xafe)]()[_0x3eb5c8(0x8fc)](this[_0x3eb5c8(0xc1)]());if(_0x1321a0[_0x3eb5c8(0x29c)]>0x0){_0x1321a0['sort']((_0x10e301,_0x3e0a15)=>_0x10e301['hpRate']()-_0x3e0a15[_0x3eb5c8(0x78c)]());while(_0x4d453e[_0x3eb5c8(0x511)](this[_0x3eb5c8(0xc1)]())){const _0x3c8c25=_0x4d453e[_0x3eb5c8(0x86f)](this[_0x3eb5c8(0xc1)]());_0x4d453e[_0x3c8c25]=_0x1321a0[Math['randomInt'](_0x1321a0[_0x3eb5c8(0x29c)])];}}else{if(_0x3eb5c8(0xbc4)!==_0x3eb5c8(0xbc4)){const _0x3a7075=_0x405e24(_0x74eeb0['$1']),_0x40089c=_0x469868[_0x3eb5c8(0xadf)][_0x3eb5c8(0x365)](_0x129ef1,_0x3eb5c8(0xc0));_0x166c0b[_0x3eb5c8(0xadf)][_0x3eb5c8(0x88f)](_0x3a7075,_0x40089c);}else _0x4d453e[_0x3eb5c8(0x8fc)](this['subject']());}}}}return _0x4d453e;},VisuMZ[_0x12d94d(0xadf)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x12d94d(0x4e9)]['itemEffectAddAttackState'],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x96)]=function(_0x57394e,_0x44185a){const _0x4c965b=_0x12d94d;VisuMZ['BattleCore']['Game_Action_itemEffectAddAttackState'][_0x4c965b(0xba3)](this,_0x57394e,_0x44185a);if(!_0x57394e[_0x4c965b(0x606)]())return;for(const _0x38770b of this[_0x4c965b(0xc1)]()[_0x4c965b(0x96b)]()){if(_0x38770b===_0x57394e['deathStateId']()){if(_0x4c965b(0x802)!==_0x4c965b(0x802))_0x27ee00[_0x4c965b(0xbce)](this[_0x4c965b(0x73c)]()['trueRandomTarget']());else{let _0x2ed998=_0x44185a['value1'];_0x2ed998*=_0x57394e['stateRate'](_0x38770b),_0x2ed998*=this[_0x4c965b(0xc1)]()[_0x4c965b(0xa20)](_0x38770b),_0x2ed998*=this[_0x4c965b(0x623)](_0x57394e);if(Math[_0x4c965b(0x89)]()<_0x2ed998){if('JFiKN'===_0x4c965b(0x79c))_0x57394e[_0x4c965b(0x4ba)]=!![],this[_0x4c965b(0xaa7)](_0x57394e);else{if(_0x42c41e===_0xb26709[_0x4c965b(0xaa2)]())return![];}}}}}},VisuMZ['BattleCore'][_0x12d94d(0x88c)]=Game_Action[_0x12d94d(0x4e9)]['itemEffectAddNormalState'],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xbe1)]=function(_0x505e35,_0x4e9a2a){const _0x309c94=_0x12d94d;VisuMZ[_0x309c94(0xadf)][_0x309c94(0x88c)][_0x309c94(0xba3)](this,_0x505e35,_0x4e9a2a);if(!_0x505e35[_0x309c94(0x606)]())return;if(_0x4e9a2a[_0x309c94(0x4e4)]!==_0x505e35[_0x309c94(0xbbb)]())return;let _0x38f4ba=_0x4e9a2a[_0x309c94(0x5e6)];!this[_0x309c94(0x5c4)]()&&(_0x38f4ba*=_0x505e35[_0x309c94(0xf3)](_0x4e9a2a[_0x309c94(0x4e4)]),_0x38f4ba*=this[_0x309c94(0x623)](_0x505e35)),Math[_0x309c94(0x89)]()<_0x38f4ba&&('fBlNv'===_0x309c94(0x7cc)?(_0x505e35[_0x309c94(0x4ba)]=!![],this[_0x309c94(0xaa7)](_0x505e35)):_0x3804f4[_0x309c94(0x99b)](_0x309c94(0x3bb)));},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xa5f)]=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x247)],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x247)]=function(){const _0x5a63b6=_0x12d94d;VisuMZ[_0x5a63b6(0xadf)][_0x5a63b6(0xa5f)]['call'](this),this['applyGlobalCommonEventNotetags'](),this[_0x5a63b6(0xab4)]();},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x339)]=function(){const _0x3fadd7=_0x12d94d;if(!SceneManager[_0x3fadd7(0xb92)]())return;const _0x22b8f6=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x5bde55=this['item']()[_0x3fadd7(0x7ba)][_0x3fadd7(0x214)](_0x22b8f6);if(_0x5bde55)for(const _0x569cdb of _0x5bde55){if(_0x3fadd7(0x11f)!==_0x3fadd7(0xadc)){if(!_0x569cdb)continue;_0x569cdb[_0x3fadd7(0x214)](_0x22b8f6);const _0x3e6c8c=String(RegExp['$1'])[_0x3fadd7(0x5db)](',')[_0x3fadd7(0x43b)](_0x62b90b=>String(_0x62b90b)[_0x3fadd7(0xc39)]()),_0x3a82bc=_0x3e6c8c[_0x3fadd7(0x43b)](_0x24019c=>DataManager['getCommonEventIdWithName'](_0x24019c));for(const _0x550677 of _0x3a82bc){const _0x2ecf9c=$dataCommonEvents[_0x550677];_0x2ecf9c&&$gameTemp[_0x3fadd7(0xb9f)](_0x550677);}}else this[_0x3fadd7(0x7fc)]=_0x16ae37[_0x3fadd7(0x690)];}},DataManager[_0x12d94d(0x628)]=function(_0x23dceb){const _0x2a98ae=_0x12d94d;_0x23dceb=_0x23dceb[_0x2a98ae(0x97e)]()['trim'](),this[_0x2a98ae(0x8e5)]=this['_commonEventIDs']||{};if(this[_0x2a98ae(0x8e5)][_0x23dceb])return this[_0x2a98ae(0x8e5)][_0x23dceb];for(const _0x132071 of $dataCommonEvents){if(_0x2a98ae(0x76d)!==_0x2a98ae(0xbf)){if(!_0x132071)continue;let _0x38dc00=_0x132071[_0x2a98ae(0x536)];_0x38dc00=_0x38dc00['replace'](/\x1I\[(\d+)\]/gi,''),_0x38dc00=_0x38dc00['replace'](/\\I\[(\d+)\]/gi,''),this[_0x2a98ae(0x8e5)][_0x38dc00[_0x2a98ae(0x97e)]()[_0x2a98ae(0xc39)]()]=_0x132071['id'];}else _0x2d971b=_0x20e4c5>=_0x307a3b?_0x15d2ad:_0x2bdf50;}return this[_0x2a98ae(0x8e5)][_0x23dceb]||0x0;},Game_Action[_0x12d94d(0x4e9)]['resetResultSwitches']=function(){const _0x337097=_0x12d94d;if(!SceneManager[_0x337097(0xb92)]())return;const _0xf8b546=VisuMZ['BattleCore']['Settings'][_0x337097(0x9d2)];if(_0xf8b546[_0x337097(0x986)]){if('pTtkg'!==_0x337097(0x345))$gameSwitches[_0x337097(0xa1d)](_0xf8b546[_0x337097(0x986)],![]);else{if(_0xf8223c[_0x337097(0x360)]===0x0)this['requestMotion']('thrust');else{if(_0x188a8f[_0x337097(0x360)]===0x1)this[_0x337097(0x484)](_0x337097(0xb29));else _0x572c9c[_0x337097(0x360)]===0x2&&this[_0x337097(0x484)](_0x337097(0xaf7));}}}_0xf8b546[_0x337097(0xa38)]&&$gameSwitches[_0x337097(0xa1d)](_0xf8b546[_0x337097(0xa38)],![]);if(_0xf8b546[_0x337097(0x139)]){if(_0x337097(0x2e0)==='iwSDZ')$gameVariables[_0x337097(0xa1d)](_0xf8b546['VariableDmg'],0x0);else{if(_0x2378c6[_0x337097(0x4f2)]())return;const _0x56ebfb=_0xdc2970[_0x337097(0xadf)][_0x337097(0xb08)][_0x337097(0x89b)],_0x22502c=new _0x3cc6f4();_0x22502c[_0x337097(0x1c6)]=_0x56ebfb[_0x337097(0x11c)],this[_0x337097(0x18d)](_0x22502c),_0x22502c[_0x337097(0x5bb)](this[_0x337097(0x78b)]),_0x22502c[_0x337097(0xd0d)](this[_0x337097(0x78b)]),this[_0x337097(0x69d)](_0x22502c);}}if(_0xf8b546[_0x337097(0x68c)]){if(_0x337097(0x825)===_0x337097(0x825))$gameVariables[_0x337097(0xa1d)](_0xf8b546[_0x337097(0x68c)],0x0);else{this[_0x337097(0xbfa)]={},this[_0x337097(0x298)]={};if(!_0x4b6af8)return;const _0x2e3a94=_0x529be1[_0x337097(0x7ba)];if(!_0x2e3a94)return;const _0x262496=_0x2e3a94['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x262496)for(const _0x341a66 of _0x262496){_0x341a66[_0x337097(0x214)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x2ebbfd=_0xe46ba4(_0x3c29da['$1']),_0x23e28b=_0x44997c(_0x327e45['$2']),_0x485e4c=_0x23e28b===0x1?this[_0x337097(0xbfa)]:this['_regionBattleback2'],_0x363330=_0x20bec8(_0x55462e['$3']);_0x485e4c[_0x2ebbfd]=_0x363330;}}}},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x78d)]=function(_0x2b4c26){const _0x2d0dc2=_0x12d94d;if(!SceneManager[_0x2d0dc2(0xb92)]())return;if(!_0x2b4c26)return;const _0x3672f4=_0x2b4c26['result'](),_0x276f21=VisuMZ[_0x2d0dc2(0xadf)][_0x2d0dc2(0xb08)][_0x2d0dc2(0x9d2)];if(_0x276f21['SwitchCritical']&&_0x3672f4[_0x2d0dc2(0x433)]){if(_0x2d0dc2(0x808)!==_0x2d0dc2(0x808)){const _0x533794=new _0x15d6ec(0x0,0x0,_0x3d9f14[_0x2d0dc2(0xa80)],_0xae4f40[_0x2d0dc2(0xd17)]);this['_commandNameWindow']=new _0x4b86fe(_0x533794),this['_commandNameWindow'][_0x2d0dc2(0x9a8)]=0x0,this['addChild'](this[_0x2d0dc2(0x760)]),this[_0x2d0dc2(0x46f)]();}else $gameSwitches['setValue'](_0x276f21['SwitchCritical'],!![]);}_0x276f21[_0x2d0dc2(0xa38)]&&(_0x3672f4[_0x2d0dc2(0x22c)]||_0x3672f4[_0x2d0dc2(0xc2)])&&$gameSwitches['setValue'](_0x276f21[_0x2d0dc2(0xa38)],!![]);if(_0x276f21[_0x2d0dc2(0x139)]){let _0x15819d=$gameVariables[_0x2d0dc2(0xba9)](_0x276f21['VariableDmg']);_0x3672f4['hpDamage']>0x0&&(_0x15819d+=Math[_0x2d0dc2(0xc19)](_0x3672f4[_0x2d0dc2(0xc0b)])),$gameVariables[_0x2d0dc2(0xa1d)](_0x276f21[_0x2d0dc2(0x139)],_0x15819d);}if(_0x276f21['VariableHeal']){let _0x36a98e=$gameVariables[_0x2d0dc2(0xba9)](_0x276f21[_0x2d0dc2(0x68c)]);_0x3672f4['hpDamage']<0x0&&(_0x2d0dc2(0x22f)!=='dQfFG'?this[_0x2d0dc2(0x201)]=_0x534c99:_0x36a98e+=Math[_0x2d0dc2(0xc19)](_0x3672f4[_0x2d0dc2(0xc0b)])),$gameVariables[_0x2d0dc2(0xa1d)](_0x276f21[_0x2d0dc2(0x68c)],_0x36a98e);}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x973)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ['BattleCore']['Game_Action_executeHpDamage']=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x939)],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x939)]=function(_0x38b1db,_0x264b23){const _0x2325a4=_0x12d94d;VisuMZ[_0x2325a4(0xadf)][_0x2325a4(0x68a)]['call'](this,_0x38b1db,_0x264b23);!this[_0x2325a4(0x440)]()&&_0x38b1db&&_0x38b1db[_0x2325a4(0xd1e)]()['hpDamage']>0x0&&this['performLifeSteal']('HP',_0x38b1db,_0x38b1db[_0x2325a4(0xd1e)]()[_0x2325a4(0xc0b)]);if(_0x38b1db){if(_0x2325a4(0x7cb)==='DzqSi'){if(this['_targetBattlerKey']==='all\x20actors')return![];if(this[_0x2325a4(0x737)]===_0x2325a4(0x1be))return![];if(!this['item']())return![];return this[_0x2325a4(0xc7)]()[_0x2325a4(0x7ba)][_0x2325a4(0x214)](/<JS TARGETS>/i);}else{this[_0x2325a4(0x783)]=this[_0x2325a4(0x783)]||{};const _0x12bf87=_0x38b1db[_0x2325a4(0x245)]();this['_executeHpDamage'][_0x12bf87]=_0x264b23;}}},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x1e3)]=function(_0x1df477){const _0x1fe350=_0x12d94d;this[_0x1fe350(0x783)]=this[_0x1fe350(0x783)]||{};const _0x10ccb0=_0x1df477[_0x1fe350(0x245)]();return this[_0x1fe350(0x783)][_0x10ccb0]||0x0;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb27)]=Game_Action['prototype']['executeMpDamage'],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0xc86)]=function(_0x28456d,_0x3fca2c){const _0x33a778=_0x12d94d;VisuMZ[_0x33a778(0xadf)][_0x33a778(0xb27)][_0x33a778(0xba3)](this,_0x28456d,_0x3fca2c);if(!this[_0x33a778(0x440)]()&&_0x28456d&&_0x28456d['result']()[_0x33a778(0xa23)]>0x0){if(_0x33a778(0xbca)!==_0x33a778(0xbca))return _0x2db80f['BattleCore'][_0x33a778(0xb08)][_0x33a778(0x1ec)][_0x33a778(0x5c5)];else this[_0x33a778(0x8b1)]('MP',_0x28456d,_0x28456d[_0x33a778(0xd1e)]()[_0x33a778(0xa23)]);}},Game_Action[_0x12d94d(0x4e9)]['performLifeSteal']=function(_0x185bf9,_0x1c759d,_0x341de4){const _0x18234e=_0x12d94d;_0x185bf9=_0x185bf9[_0x18234e(0x97e)]()[_0x18234e(0xc39)]();const _0x175d8e=this[_0x18234e(0x109)](_0x185bf9,_0x1c759d);if(_0x175d8e<=0x0)return;const _0x4de712=Math['round'](_0x341de4*_0x175d8e);if(_0x4de712<=0x0)return;let _0x3a2d2e=this[_0x18234e(0xc1)]();if(this[_0x18234e(0xb09)])_0x3a2d2e=this[_0x18234e(0xb09)];const _0x53a746=_0x1c759d[_0x18234e(0xb62)](_0x185bf9)?-0x1:0x1;if(_0x185bf9==='HP')_0x3a2d2e[_0x18234e(0xa45)](_0x53a746*_0x4de712);if(_0x185bf9==='MP')_0x3a2d2e['gainMp'](_0x53a746*_0x4de712);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x109)]=function(_0x55a089,_0x2b1e4d){const _0x38272e=_0x12d94d;if(this['isCancelLifeSteal'](_0x55a089))return 0x0;if(this[_0x38272e(0xc1)]()[_0x38272e(0x98d)](_0x55a089))return 0x0;if(_0x2b1e4d[_0x38272e(0x8f8)](_0x55a089))return 0x0;let _0x2c86b1=0x0;return _0x2c86b1+=this[_0x38272e(0x27f)](_0x55a089),_0x2c86b1+=this[_0x38272e(0xc1)]()[_0x38272e(0x109)](_0x55a089,this[_0x38272e(0xc7)]()[_0x38272e(0x9e5)]),_0x2c86b1['clamp'](0x0,0x1);},Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x311)]=function(_0x5c3bf7){const _0x5033ed=_0x12d94d;_0x5c3bf7=_0x5c3bf7[_0x5033ed(0x97e)]()[_0x5033ed(0xc39)]();const _0x32717f=VisuMZ[_0x5033ed(0xadf)][_0x5033ed(0x973)],_0x5d436e=this[_0x5033ed(0xc7)]()[_0x5033ed(0x7ba)]||'';if(_0x5d436e['match'](_0x32717f[_0x5033ed(0x1aa)])){if(_0x5033ed(0xab0)!==_0x5033ed(0x5d0))return!![];else this[_0x5033ed(0x3e4)](_0x5033ed(0x982));}if(_0x5c3bf7==='HP'&&_0x5d436e['match'](_0x32717f[_0x5033ed(0x549)])){if(_0x5033ed(0x565)===_0x5033ed(0x16e)){return _0x349e3a[_0x5033ed(0x4e9)][_0x5033ed(0x37a)][_0x5033ed(0xba3)](this);;}else return!![];}if(_0x5c3bf7==='MP'&&_0x5d436e[_0x5033ed(0x214)](_0x32717f[_0x5033ed(0xbc2)]))return'digyi'===_0x5033ed(0x952)?_0x4f8b35[_0x5033ed(0x4e9)]['damageOffsetX'][_0x5033ed(0xba3)](this):!![];return![];},Game_Action[_0x12d94d(0x4e9)]['itemLifeStealRate']=function(_0x4c5df4){const _0x3a978a=_0x12d94d,_0x57f7f4=VisuMZ[_0x3a978a(0xadf)][_0x3a978a(0x973)],_0x402e83=this['item']()[_0x3a978a(0x7ba)]||'';_0x4c5df4=_0x4c5df4[_0x3a978a(0x97e)]()[_0x3a978a(0xc39)]();const _0x2eda3a=_0x402e83[_0x3a978a(0x214)](_0x57f7f4[_0x3a978a(0x349)]);if(_0x2eda3a){if(_0x3a978a(0x476)===_0x3a978a(0x8ab)){_0x273bd9-=_0x3fffc1[_0x3c9cb6];if(_0x1c2e75<=0x0)return _0x4f899c;}else for(const _0x46b55d of _0x2eda3a){_0x46b55d[_0x3a978a(0x214)](_0x57f7f4[_0x3a978a(0x349)]);const _0x25fe88=String(RegExp['$1'])[_0x3a978a(0x97e)]()[_0x3a978a(0xc39)](),_0x131f8b=Number(RegExp['$2'])*0.01;if(_0x25fe88!==_0x4c5df4)continue;return _0x131f8b;}}return 0x0;},Game_BattlerBase['prototype']['lifeStealRate']=function(_0x7fc07f,_0x4dc9a9){const _0x1f201b=_0x12d94d,_0x2e8392=VisuMZ[_0x1f201b(0xadf)][_0x1f201b(0x973)];let _0x2f29b5=0x0;_0x7fc07f=_0x7fc07f[_0x1f201b(0x97e)]()[_0x1f201b(0xc39)]();for(const _0x141bb5 of this['traitObjects']()){if(!_0x141bb5)continue;const _0x5cb8c3=_0x141bb5[_0x1f201b(0x7ba)]||'',_0x3af0b0=_0x5cb8c3['match'](_0x2e8392[_0x1f201b(0xc2a)]);if(_0x3af0b0)for(const _0x56fc74 of _0x3af0b0){_0x56fc74[_0x1f201b(0x214)](_0x2e8392[_0x1f201b(0xc2a)]);const _0x58acbc=String(RegExp['$1'])[_0x1f201b(0x97e)]()[_0x1f201b(0xc39)](),_0x2b583a=String(RegExp['$2']),_0x3a478f=Number(RegExp['$3'])*0.01;if(_0x58acbc!==_0x7fc07f)continue;if(_0x4dc9a9===Game_Action[_0x1f201b(0x50e)]&&_0x2b583a[_0x1f201b(0x214)](/CERTAIN/i))_0x2f29b5+=_0x3a478f;else{if(_0x4dc9a9===Game_Action[_0x1f201b(0x87)]&&_0x2b583a['match'](/PHYS/i))_0x2f29b5+=_0x3a478f;else _0x4dc9a9===Game_Action[_0x1f201b(0x1bc)]&&_0x2b583a['match'](/MAGIC/i)&&(_0x2f29b5+=_0x3a478f);}}}return _0x2f29b5;},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x98d)]=function(_0x5e8098){const _0x3d06a8=_0x12d94d;_0x5e8098=_0x5e8098[_0x3d06a8(0x97e)]()[_0x3d06a8(0xc39)]();const _0x58cf00=VisuMZ['BattleCore']['LifeStealRegExp'];for(const _0x49f090 of this[_0x3d06a8(0x999)]()){if(!_0x49f090)continue;const _0x1d4b96=_0x49f090[_0x3d06a8(0x7ba)]||'';if(_0x1d4b96[_0x3d06a8(0x214)](_0x58cf00[_0x3d06a8(0xd3)])){if(_0x3d06a8(0xc8d)===_0x3d06a8(0xc8d))return!![];else _0xc3f159+=_0x5a3c7f,_0x1664aa+=_0x4952ec[_0x3d06a8(0xc83)]()?-_0x36c5ca:_0x15fd12;}if(_0x5e8098==='HP'&&_0x1d4b96[_0x3d06a8(0x214)](_0x58cf00['disarmHpLifeSteal']))return!![];if(_0x5e8098==='MP'&&_0x1d4b96[_0x3d06a8(0x214)](_0x58cf00[_0x3d06a8(0x271)]))return!![];}return![];},Game_BattlerBase['prototype'][_0x12d94d(0xb62)]=function(_0x3e3478){const _0x311673=_0x12d94d;_0x3e3478=_0x3e3478[_0x311673(0x97e)]()[_0x311673(0xc39)]();const _0xbe5aae=VisuMZ[_0x311673(0xadf)][_0x311673(0x973)];for(const _0x14bfaf of this[_0x311673(0x999)]()){if(_0x311673(0x513)!==_0x311673(0x513))return this[_0x311673(0x66d)]();else{if(!_0x14bfaf)continue;const _0x343697=_0x14bfaf[_0x311673(0x7ba)]||'';if(_0x343697[_0x311673(0x214)](_0xbe5aae[_0x311673(0x32c)]))return _0x311673(0x99)!==_0x311673(0x99)?_0x492396[_0x311673(0xadf)]['Settings']['Enemy'][_0x311673(0x98a)]||_0x2b0877[_0x311673(0x839)]():!![];if(_0x3e3478==='HP'&&_0x343697[_0x311673(0x214)](_0xbe5aae[_0x311673(0x61c)])){if('xiVLH'!=='tvrtf')return!![];else{const _0x29d28a=_0x1befc0['BattleCore']['Settings']['Mechanics'],_0x3e492b=_0x29d28a['BattleStartEvent'];_0x3e492b&&_0x2fee55[_0x311673(0xadf)][_0x311673(0x738)](_0x3e492b)&&(this[_0x311673(0x787)]=!![],_0x23fcdb[_0x311673(0xb9f)](_0x29d28a[_0x311673(0x4c9)]),_0x1d7808[_0x311673(0x745)](),_0x5f52eb[_0x311673(0x46e)][_0x311673(0xd7)]=!![]),_0x29d28a[_0x311673(0xc26)]>0x0&&(this[_0x311673(0x481)]=!![]);}}if(_0x3e3478==='MP'&&_0x343697[_0x311673(0x214)](_0xbe5aae['negativeMpLifeSteal'])){if('tGhZJ'===_0x311673(0x881))return!![];else{const _0x5131f=this[_0x311673(0x501)]();this[_0x311673(0x25b)](_0x5131f);}}}}return![];},Game_BattlerBase['prototype'][_0x12d94d(0x8f8)]=function(_0x138258){const _0x1bab9e=_0x12d94d;_0x138258=_0x138258['toUpperCase']()[_0x1bab9e(0xc39)]();const _0x5ac343=VisuMZ[_0x1bab9e(0xadf)][_0x1bab9e(0x973)];for(const _0x3b078e of this[_0x1bab9e(0x999)]()){if(_0x1bab9e(0xcef)==='AYCCX'){if(!_0x3b078e)continue;const _0x44fbce=_0x3b078e[_0x1bab9e(0x7ba)]||'';if(_0x44fbce[_0x1bab9e(0x214)](_0x5ac343['guardLifeSteal']))return!![];if(_0x138258==='HP'&&_0x44fbce['match'](_0x5ac343['guardHpLifeSteal'])){if(_0x1bab9e(0x18a)!=='HPRTX')_0xd66ab7[_0x1bab9e(0xadf)]['Settings'][_0x1bab9e(0x1ec)][_0x1bab9e(0x1b9)]&&(this[_0x1bab9e(0xc18)]=new _0x22d334(),this[_0x1bab9e(0xa26)](this[_0x1bab9e(0xc18)]));else return!![];}if(_0x138258==='MP'&&_0x44fbce[_0x1bab9e(0x214)](_0x5ac343['guardMpLifeSteal']))return!![];}else{if(!_0x3d74a6[_0x1bab9e(0xb92)]())return;_0x478db0[_0x1bab9e(0x2ec)](_0x3ce183,_0x27086e);const _0x69b44b=_0x5caa7e[_0x1bab9e(0x5ef)],_0x382453={'arPenRate':_0x598021[_0x1bab9e(0x9b0)],'arPenFlat':_0x1a4980[_0x1bab9e(0x55f)],'arRedRate':_0x26dad3[_0x1bab9e(0xb64)],'arRedFlat':_0x5a8248['ArRedFlat']};_0x69b44b[_0x1bab9e(0x7d5)]=_0x382453;}}return![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x4c4)]=Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x7e6)],Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x7e6)]=function(){const _0x3d3d25=_0x12d94d;VisuMZ[_0x3d3d25(0xadf)][_0x3d3d25(0x4c4)][_0x3d3d25(0xba3)](this),this[_0x3d3d25(0x6ce)]();},Game_BattlerBase[_0x12d94d(0x4e9)]['initMembersBattleCore']=function(){this['_immortal']=![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x99e)]=Game_BattlerBase['prototype'][_0x12d94d(0x498)],Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x498)]=function(){const _0x44f7bc=_0x12d94d;this[_0x44f7bc(0xca3)]={},VisuMZ[_0x44f7bc(0xadf)][_0x44f7bc(0x99e)][_0x44f7bc(0xba3)](this);},Game_BattlerBase['prototype']['checkCacheKey']=function(_0x201948){const _0x3b8d78=_0x12d94d;return this['_cache']=this['_cache']||{},this[_0x3b8d78(0xca3)][_0x201948]!==undefined;},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x104)]=function(){const _0x5a0544=_0x12d94d;if(this['_cache'][_0x5a0544(0x104)]!==undefined)return this[_0x5a0544(0xca3)]['hardDamageCap'];const _0x3324df=/<DAMAGE CAP:[ ](\d+)>/i,_0x4ace01=this[_0x5a0544(0x999)]()['map'](_0x58b8b1=>_0x58b8b1&&_0x58b8b1[_0x5a0544(0x7ba)]['match'](_0x3324df)?Number(RegExp['$1']):0x0);let _0x2673ea=_0x4ace01[_0x5a0544(0x29c)]>0x0?Math[_0x5a0544(0x660)](..._0x4ace01):0x0;if(_0x2673ea<=0x0)_0x2673ea=VisuMZ[_0x5a0544(0xadf)][_0x5a0544(0xb08)]['Damage'][_0x5a0544(0x868)];return this[_0x5a0544(0xca3)][_0x5a0544(0x104)]=_0x2673ea,this['_cache'][_0x5a0544(0x104)];},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x681)]=function(){const _0x543e32=_0x12d94d;if(this[_0x543e32(0xca3)][_0x543e32(0xaff)]!==undefined)return this[_0x543e32(0xca3)][_0x543e32(0xaff)];let _0xf65e63=VisuMZ['BattleCore'][_0x543e32(0xb08)][_0x543e32(0x89b)][_0x543e32(0xcc4)];const _0x1cd19e=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0xeaffd9=this[_0x543e32(0x999)]()[_0x543e32(0x43b)](_0x3561a1=>_0x3561a1&&_0x3561a1['note'][_0x543e32(0x214)](_0x1cd19e)?Number(RegExp['$1'])/0x64:0x0);return _0xf65e63=_0xeaffd9['reduce']((_0x3ae416,_0x4360a9)=>_0x3ae416+_0x4360a9,_0xf65e63),this[_0x543e32(0xca3)][_0x543e32(0xaff)]=_0xf65e63,this[_0x543e32(0xca3)][_0x543e32(0xaff)][_0x543e32(0xa2d)](0.01,0x1);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x6b2)]=Game_BattlerBase['prototype'][_0x12d94d(0xd19)],Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0xd19)]=function(){const _0x57ad8c=_0x12d94d;VisuMZ[_0x57ad8c(0xadf)][_0x57ad8c(0x6b2)]['call'](this);if(SceneManager[_0x57ad8c(0xb92)]()){if(_0x57ad8c(0x47f)===_0x57ad8c(0xb0))return this[_0x57ad8c(0x7b4)]();else this[_0x57ad8c(0x484)](_0x57ad8c(0xb01));}},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x9b8)]=function(){const _0x2214b2=_0x12d94d;if(!SceneManager[_0x2214b2(0xb92)]())return null;if(!SceneManager['_scene'][_0x2214b2(0x372)])return null;return SceneManager[_0x2214b2(0x592)][_0x2214b2(0x372)][_0x2214b2(0x4a0)](this);},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x9ab)]=function(){const _0x26ae69=_0x12d94d;return VisuMZ[_0x26ae69(0xadf)]['Settings']['Actor']['AnchorX'];},Game_BattlerBase['prototype'][_0x12d94d(0x687)]=function(){const _0x53a404=_0x12d94d;return VisuMZ['BattleCore'][_0x53a404(0xb08)][_0x53a404(0x58b)]['AnchorY'];},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x657)]=function(){const _0x34d4ef=_0x12d94d;if(this['isActor']&&this['isActor']()){if(_0x34d4ef(0x899)!=='BOFoJ'){const _0x58e48f=_0x56bf03[_0x34d4ef(0xc5)]()?-0x1:0x1;let _0x1f3e7b=this[_0x34d4ef(0x3f5)];_0x1f3e7b+=this[_0x34d4ef(0x162)]();let _0x4564f8=this['_baseY'];const _0x3d03b6=this[_0x34d4ef(0x67b)]['scale']['y'];_0x4564f8+=this[_0x34d4ef(0x91c)]();const _0xa8dca7=_0x1bc273[_0x34d4ef(0x592)][_0x34d4ef(0xcbc)];if(_0xa8dca7&&this[_0x34d4ef(0x8e6)]===_0xa8dca7){_0x1f3e7b+=_0xa8dca7['x']-this['damageOffsetX']();const _0x3c5b82=_0xa8dca7[_0x34d4ef(0x33c)]()*0x3/0x4;_0x4564f8=_0xa8dca7['y']+_0x3c5b82,_0x4564f8=_0x2dd438[_0x34d4ef(0x2e3)](_0x4564f8,_0xa8dca7['y']+this['y']-this['height']+_0x3c5b82);}_0x37da6d['x']=_0x3349d3[_0x34d4ef(0x1d0)](_0x1f3e7b+this['damageOffsetX']()*_0x58e48f),_0x3bd873['y']=_0x97039a[_0x34d4ef(0x1d0)](_0x4564f8+this['damageOffsetY']());}else return VisuMZ[_0x34d4ef(0xadf)][_0x34d4ef(0xb08)][_0x34d4ef(0x58b)]['Shadow'];}else return VisuMZ[_0x34d4ef(0xadf)]['Settings'][_0x34d4ef(0x1ec)][_0x34d4ef(0x852)];},Game_BattlerBase[_0x12d94d(0x4e9)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x2a0)]=function(){return 0x0;},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x8a)]=function(){return 0x0;},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0xcbd)]=function(_0x1cccbb){const _0x401984=_0x12d94d;if(!_0x1cccbb)return 0x0;let _0x24d3d1=0x0;const _0x27816a=_0x1cccbb['note'];return _0x27816a[_0x401984(0x214)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x24d3d1+=Number(RegExp['$1'])),_0x27816a[_0x401984(0x214)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x24d3d1+=Number(RegExp['$1'])),_0x24d3d1;},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x13b)]=function(_0x44da2d){const _0x3c45b9=_0x12d94d;if(!_0x44da2d)return 0x0;let _0x392c1c=0x0;const _0x49d760=_0x44da2d[_0x3c45b9(0x7ba)];return _0x49d760[_0x3c45b9(0x214)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x392c1c+=Number(RegExp['$1'])),_0x49d760[_0x3c45b9(0x214)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x392c1c+=Number(RegExp['$2'])),_0x392c1c;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x3ea)]=Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x8d5)],Game_BattlerBase[_0x12d94d(0x4e9)]['isStateResist']=function(_0x550f23){const _0x48678f=_0x12d94d;if(_0x550f23===this['deathStateId']()&&this['isImmortal']()){if(_0x48678f(0x3c2)==='vxPBE')this[_0x48678f(0x4ca)]=![];else return!![];}return VisuMZ[_0x48678f(0xadf)][_0x48678f(0x3ea)][_0x48678f(0xba3)](this,_0x550f23);},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x606)]=function(){const _0x7bbc30=_0x12d94d;return this[_0x7bbc30(0xaad)];},Game_BattlerBase['prototype']['setImmortal']=function(_0x172a4d){const _0x266485=_0x12d94d;if(_0x172a4d)'tQYgK'!==_0x266485(0x539)?_0xa33b80[_0x266485(0xa37)][_0x266485(0x73c)]()['gainCurrentActionsFTB'](_0x46f1c2):this[_0x266485(0x2cb)]();else{if(_0x266485(0x516)!==_0x266485(0x516)){if(!_0x3aff84)return 0x0;let _0x10840c=0x0;const _0x432a66=_0x1ae4a5['note'];return _0x432a66['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x10840c+=_0x2cffc7(_0x573f60['$1'])),_0x432a66[_0x266485(0x214)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x10840c+=_0x29484b(_0x71b9c1['$2'])),_0x10840c;}else this[_0x266485(0xc4a)]();}},Game_BattlerBase[_0x12d94d(0x4e9)]['addImmortal']=function(){const _0x1aa0a4=_0x12d94d;if(this[_0x1aa0a4(0xb91)]())return;this[_0x1aa0a4(0xaad)]=!![],this[_0x1aa0a4(0x4ba)]=![];},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0xc4a)]=function(){const _0x250e8f=_0x12d94d,_0x5ede73=this[_0x250e8f(0x3b5)]();this['_immortal']=![];_0x5ede73&&this[_0x250e8f(0x4ba)]&&this[_0x250e8f(0xd19)]();this[_0x250e8f(0x4ba)]=![],this[_0x250e8f(0x498)]();if(this[_0x250e8f(0xb91)]()&&_0x5ede73){if('BdWXU'!==_0x250e8f(0x74d))this['performCollapse'](),this[_0x250e8f(0x747)]();else return _0x4467ab[_0x250e8f(0x297)]()[_0x250e8f(0x1cf)]();}},VisuMZ[_0x12d94d(0xadf)]['Game_Action_numRepeats']=Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x39b)],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x39b)]=function(){const _0x4c7478=_0x12d94d;return this[_0x4c7478(0xc7)]()?VisuMZ[_0x4c7478(0xadf)][_0x4c7478(0x41b)]['call'](this):0x0;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x291)]=Game_Action[_0x12d94d(0x4e9)]['setAttack'],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x676)]=function(){const _0x4d7903=_0x12d94d;this[_0x4d7903(0xc1)]()&&this[_0x4d7903(0xc1)]()[_0x4d7903(0xc9e)]()?_0x4d7903(0x146)===_0x4d7903(0x146)?VisuMZ[_0x4d7903(0xadf)][_0x4d7903(0x291)][_0x4d7903(0xba3)](this):this['_tpbSceneChangeCacheActor']=null:this[_0x4d7903(0x4ef)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x7cf)]=Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0xc9e)],Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0xc9e)]=function(){const _0x26a3bd=_0x12d94d;if(!this[_0x26a3bd(0x278)]())return![];return VisuMZ[_0x26a3bd(0xadf)][_0x26a3bd(0x7cf)][_0x26a3bd(0xba3)](this);},Game_BattlerBase['prototype'][_0x12d94d(0x278)]=function(){const _0x34387e=_0x12d94d;for(const _0x24156b of this[_0x34387e(0x999)]()){if('kmzCt'==='AGzeL'){const _0x41faf2=_0x4e512a(_0x3a1b6e['$1'])[_0x34387e(0x5db)](/[\r\n]+/)[_0x34387e(0x8fc)]('');_0x2916ff['name']=_0x12731a[_0x34387e(0x329)](_0x41faf2);}else{if(!_0x24156b)continue;if(_0x24156b['note'][_0x34387e(0x214)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}}return!![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x567)]=Game_Action[_0x12d94d(0x4e9)]['setGuard'],Game_Action[_0x12d94d(0x4e9)][_0x12d94d(0x5b7)]=function(){this['subject']()['canGuard']()&&VisuMZ['BattleCore']['Game_Action_setGuard']['call'](this);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x969)]=Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x424)],Game_BattlerBase[_0x12d94d(0x4e9)]['canGuard']=function(){const _0xed0c68=_0x12d94d;if(!this['canGuardBattleCore']())return![];return VisuMZ['BattleCore']['Game_BattlerBase_canGuard'][_0xed0c68(0xba3)](this);},Game_BattlerBase['prototype'][_0x12d94d(0xbcc)]=function(){const _0x3672ca=_0x12d94d;for(const _0x17b346 of this[_0x3672ca(0x999)]()){if(_0x3672ca(0x90c)!==_0x3672ca(0x90c))return![];else{if(!_0x17b346)continue;if(_0x17b346[_0x3672ca(0x7ba)][_0x3672ca(0x214)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}}return!![];},Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0xa64)]=function(){const _0x23aab5=_0x12d94d;for(const _0x1e8356 of this[_0x23aab5(0x999)]()){if(_0x23aab5(0x6cf)!==_0x23aab5(0x6cf)){this[_0x23aab5(0x441)](),this[_0x23aab5(0x2dc)](),this['updateSpin'](),this[_0x23aab5(0xa95)](),_0x344b03['BattleCore']['Sprite_Battler_updateMain'][_0x23aab5(0xba3)](this),this[_0x23aab5(0xa6)](),this[_0x23aab5(0xad4)]();if(this[_0x23aab5(0xc50)]===_0x594bb7)this['updateShadow']();}else{if(!_0x1e8356)continue;if(_0x1e8356[_0x23aab5(0x7ba)][_0x23aab5(0x214)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}}return!![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xa62)]=Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x4b1)],Game_BattlerBase[_0x12d94d(0x4e9)][_0x12d94d(0x4b1)]=function(_0x5699a4){const _0x1edbc8=_0x12d94d;if(_0x5699a4&&_0x5699a4[_0x1edbc8(0x7ba)]['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x541e31=this[_0x1edbc8(0x73c)]()[_0x1edbc8(0xafe)]();if(_0x541e31[_0x1edbc8(0x29c)]===0x1&&_0x541e31[0x0]===this)return![];}return VisuMZ[_0x1edbc8(0xadf)][_0x1edbc8(0xa62)][_0x1edbc8(0xba3)](this,_0x5699a4);},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x9f5)]=function(){const _0x2da057=_0x12d94d;return VisuMZ['BattleCore'][_0x2da057(0xb08)][_0x2da057(0x9d2)][_0x2da057(0xe0)];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x7d7)]=Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x92a)],Game_Battler['prototype'][_0x12d94d(0x92a)]=function(){const _0x1beed9=_0x12d94d;if(SceneManager['isSceneBattle']()){if(BattleManager[_0x1beed9(0xcda)]()){if(this['turnCount']()<=0x0)return;}else{if($gameTroop[_0x1beed9(0x776)]()<=0x0){if(_0x1beed9(0xce7)!==_0x1beed9(0x35d))return;else return _0x1a6da0[_0x1beed9(0x8c9)]()[_0x1beed9(0x29c)]||0x1;}}}if(SceneManager[_0x1beed9(0xb92)]()&&BattleManager[_0x1beed9(0xcda)]()&&this['_lastRegenFrameCount']===Graphics['frameCount']){if(_0x1beed9(0xaea)!==_0x1beed9(0xaea))_0x3a7952[_0x1beed9(0x6ae)][_0x1beed9(0x7f)](_0xd9d1e);else return;}this[_0x1beed9(0x80c)]=Graphics[_0x1beed9(0x67f)],SceneManager[_0x1beed9(0xb92)]()&&(_0x1beed9(0xc54)===_0x1beed9(0xc54)?this[_0x1beed9(0x371)]('PreRegenerateJS'):_0x445f03+=_0x5b943c),VisuMZ[_0x1beed9(0xadf)][_0x1beed9(0x7d7)][_0x1beed9(0xba3)](this),SceneManager[_0x1beed9(0xb92)]()&&(_0x1beed9(0xa60)==='TrVsZ'?this['requestMotion'](_0x1beed9(0xaf7)):(this[_0x1beed9(0xa5c)](),this[_0x1beed9(0x371)](_0x1beed9(0xab9))));},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xa5c)]=function(){const _0xb8a456=_0x12d94d;if(SceneManager['isSceneBattle']())for(const _0x25a952 of this['traitObjects']()){if(!_0x25a952)continue;this[_0xb8a456(0xcbf)](_0x25a952);}},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xcbf)]=function(_0x424dc2){const _0x25340f=_0x12d94d;if(!Imported[_0x25340f(0x564)])return;if(!SceneManager[_0x25340f(0xb92)]())return;if(this[_0x25340f(0xb91)]())return;if(this[_0x25340f(0x2b7)]())return;if(_0x424dc2[_0x25340f(0x7ba)][_0x25340f(0x214)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x3ce9d9=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x3ce9d9,![],![]);}},VisuMZ[_0x12d94d(0xadf)]['Game_Battler_startTpbTurn']=Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xa42)],Game_Battler['prototype'][_0x12d94d(0xa42)]=function(){const _0x4dc86a=_0x12d94d;this[_0x4dc86a(0x371)](_0x4dc86a(0x9b3)),VisuMZ[_0x4dc86a(0xadf)]['Game_Battler_startTpbTurn']['call'](this),this['processBattleCoreJS']('PostStartTurnJS');},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x6c6)]=Game_Battler['prototype']['onTurnEnd'],Game_Battler[_0x12d94d(0x4e9)]['onTurnEnd']=function(){const _0x101848=_0x12d94d;this[_0x101848(0x371)](_0x101848(0xcd4)),VisuMZ[_0x101848(0xadf)][_0x101848(0x6c6)][_0x101848(0xba3)](this),VisuMZ[_0x101848(0xadf)][_0x101848(0xb08)][_0x101848(0x9d2)]['SyncBuffExpire']&&this['removeBuffsAuto'](),this[_0x101848(0x371)](_0x101848(0xa89));},Game_Battler['prototype'][_0x12d94d(0x371)]=function(_0x2e7813){const _0x2ca545=_0x12d94d;if(this[_0x2ca545(0x2e4)]||this[_0x2ca545(0x180)])return;const _0x1e419d=VisuMZ['BattleCore']['Settings'][_0x2ca545(0x9d2)];if(_0x1e419d[_0x2e7813])_0x1e419d[_0x2e7813][_0x2ca545(0xba3)](this);for(const _0x33322f of this[_0x2ca545(0x999)]()){if(!_0x33322f)continue;key=VisuMZ['BattleCore']['createKeyJS'](_0x33322f,_0x2e7813),VisuMZ[_0x2ca545(0xadf)]['JS'][key]&&VisuMZ[_0x2ca545(0xadf)]['JS'][key]['call'](this,this,this,_0x33322f,0x0);}},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xb2e)]=function(){const _0x362cd0=_0x12d94d;return VisuMZ['BattleCore'][_0x362cd0(0xb08)]['Actor'][_0x362cd0(0xa93)]||![];},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x40e)]=function(){const _0x50b6cc=_0x12d94d;if(this[_0x50b6cc(0x70b)]()){if(_0x50b6cc(0x5dd)!=='CGYYn'){if(this[_0x50b6cc(0xb2e)]()){if(this[_0x50b6cc(0xcd2)][_0x50b6cc(0x97f)](_0x1741bd=>_0x1741bd[_0x50b6cc(0xc7)]()&&_0x1741bd[_0x50b6cc(0x276)]())){if('UNtYR'!=='UNtYR')_0x5088d2[_0x50b6cc(0xa4c)]('cancel',this[_0x50b6cc(0x159)][_0x50b6cc(0xb99)](this));else return!![];}}else{if(this['_actions']['some'](_0x53efd8=>_0x53efd8['item']()&&_0x53efd8[_0x50b6cc(0x689)]())){if(_0x50b6cc(0xc6c)!==_0x50b6cc(0x19b))return!![];else _0x45b35e+=_0x4bb5f1[_0x50b6cc(0xc83)]()?-_0x3ae5c5:_0x24b71f,_0x17f134+=_0x47a25b['isActor']()?-_0x162d4a:_0x2a0833;}}}else{const _0x4bb0de=_0x541902[_0x50b6cc(0xadf)][_0x50b6cc(0xb08)]['BattlebackScale'];if(_0x4bb0de&&_0x4bb0de[_0x50b6cc(0xb47)])return _0x4bb0de['jsScaleDown'][_0x50b6cc(0xba3)](this);this['width']=_0x244dd9['width'],this[_0x50b6cc(0xd17)]=_0x180494[_0x50b6cc(0xd17)];const _0x5f2641=_0x4b0ed8[_0x50b6cc(0x2e3)](0x1,this[_0x50b6cc(0xa80)]/this[_0x50b6cc(0x222)]['width']),_0x3eff6c=_0x173566['min'](0x1,this[_0x50b6cc(0xd17)]/this[_0x50b6cc(0x222)][_0x50b6cc(0xd17)]),_0x1b254e=_0x56f4d4[_0x50b6cc(0x660)](_0x5f2641,_0x3eff6c);this[_0x50b6cc(0xc3b)]['x']=_0x1b254e,this[_0x50b6cc(0xc3b)]['y']=_0x1b254e,this['x']=(_0x7a5a84[_0x50b6cc(0xa80)]-this[_0x50b6cc(0xa80)])/0x2,this['y']=_0x2fd2f9[_0x50b6cc(0xd17)]-this[_0x50b6cc(0xd17)];}}if(BattleManager[_0x50b6cc(0xcda)]()&&this[_0x50b6cc(0x267)]==='casting'){if(_0x50b6cc(0xa15)!=='REwkH'){if(this['_battler']&&this[_0x50b6cc(0x78b)][_0x50b6cc(0xb91)]())return![];if(this[_0x50b6cc(0x78b)]&&!this['_battler'][_0x50b6cc(0x4b5)]())return![];return _0x2ba0b2['isSideView']();}else{if(this[_0x50b6cc(0xb2e)]()){if(_0x50b6cc(0xa85)==='HiUMy')this[_0x50b6cc(0x506)]=_0x55c077['autoBattleAtStart'];else return this[_0x50b6cc(0x5bf)]()&&this['currentAction']()[_0x50b6cc(0xc7)]()&&this[_0x50b6cc(0x5bf)]()[_0x50b6cc(0x276)]();}else return this[_0x50b6cc(0x5bf)]()&&this[_0x50b6cc(0x5bf)]()[_0x50b6cc(0xc7)]()&&this[_0x50b6cc(0x5bf)]()[_0x50b6cc(0x689)]();}}return![];},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x2e8)]=function(){const _0x3412e6=_0x12d94d;if(BattleManager['isTpb']()&&this[_0x3412e6(0x267)]===_0x3412e6(0xad3)){if(_0x3412e6(0xa56)!==_0x3412e6(0x8a7))return this[_0x3412e6(0xb2e)]()?this[_0x3412e6(0x5bf)]()&&this[_0x3412e6(0x5bf)]()[_0x3412e6(0xc7)]()&&!this['currentAction']()['isMagical']():this[_0x3412e6(0x5bf)]()&&this['currentAction']()[_0x3412e6(0xc7)]()&&!this[_0x3412e6(0x5bf)]()[_0x3412e6(0x689)]();else _0x39388b['BattleCore'][_0x3412e6(0xc8e)][_0x3412e6(0xba3)](this);}return![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x585)]=Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x1ed)],Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x1ed)]=function(){const _0x2c70d5=_0x12d94d;VisuMZ[_0x2c70d5(0xadf)][_0x2c70d5(0x585)]['call'](this),this[_0x2c70d5(0x596)]=[];},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xcf)]=function(){const _0x291439=_0x12d94d;if(!this[_0x291439(0x596)])this['clearDamagePopup']();return this['_damagePopupArray'][_0x291439(0x29c)]>0x0;},Game_Battler['prototype']['startDamagePopup']=function(){const _0x599c84=_0x12d94d;if(!SceneManager[_0x599c84(0xb92)]())return;if(BattleManager[_0x599c84(0x4f2)]())return;if(!this[_0x599c84(0x596)])this[_0x599c84(0x1ed)]();this['createSeparateDamagePopups']();const _0xde7c6b=this[_0x599c84(0x9b8)]();if(_0xde7c6b)_0xde7c6b[_0x599c84(0x5a8)]();},Game_Battler['prototype']['createSeparateDamagePopups']=function(){const _0x3fcf60=_0x12d94d,_0x4ac174=this[_0x3fcf60(0xd1e)]();if(_0x4ac174['missed']||_0x4ac174[_0x3fcf60(0xc2)]){const _0x584826=JsonEx[_0x3fcf60(0xb77)](_0x4ac174);_0x584826[_0x3fcf60(0xb11)]=![],_0x584826['mpDamage']=0x0,this['_damagePopupArray']['push'](_0x584826);}if(_0x4ac174['hpAffected']){const _0x492182=JsonEx['makeDeepCopy'](_0x4ac174);_0x492182[_0x3fcf60(0x22c)]=![],_0x492182[_0x3fcf60(0xc2)]=![],_0x492182[_0x3fcf60(0xa23)]=0x0,this[_0x3fcf60(0x596)]['push'](_0x492182);}if(_0x4ac174['mpDamage']!==0x0){const _0x367409=JsonEx['makeDeepCopy'](_0x4ac174);_0x367409[_0x3fcf60(0x22c)]=![],_0x367409[_0x3fcf60(0xc2)]=![],_0x367409[_0x3fcf60(0xb11)]=![],this['_damagePopupArray'][_0x3fcf60(0xbce)](_0x367409);}},Game_Battler['prototype'][_0x12d94d(0x2fc)]=function(){const _0x51aeeb=_0x12d94d;if(!this[_0x51aeeb(0x596)])this[_0x51aeeb(0x1ed)]();return VisuMZ[_0x51aeeb(0xadf)][_0x51aeeb(0xb08)][_0x51aeeb(0x89b)]['NewPopupBottom']?this['_damagePopupArray'][_0x51aeeb(0xa3a)]():this[_0x51aeeb(0x596)]['pop']();},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x873)]=function(_0x4b86d6,_0x35a8d1){const _0x43f320=_0x12d94d;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x43f320(0x9b8)]())return;if(_0x4b86d6['length']<=0x0)return;_0x35a8d1=_0x35a8d1||{},_0x35a8d1[_0x43f320(0x809)]=_0x35a8d1[_0x43f320(0x809)]||_0x43f320(0x793),_0x35a8d1[_0x43f320(0xcf5)]=_0x35a8d1['flashColor']||[0x0,0x0,0x0,0x0],_0x35a8d1[_0x43f320(0x5a5)]=_0x35a8d1[_0x43f320(0x5a5)]||0x0,this[_0x43f320(0x9b8)]()[_0x43f320(0x873)](_0x4b86d6,_0x35a8d1);},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x774)]=function(_0x26507d,_0x3c54bc,_0xbaf7bd){const _0x1d60ee=_0x12d94d;if(!SceneManager[_0x1d60ee(0xb92)]())return;if(BattleManager[_0x1d60ee(0x4f2)]())return;if(!this[_0x1d60ee(0x9b8)]())return;if(_0x3c54bc[_0x1d60ee(0x29c)]<=0x0)return;_0xbaf7bd=_0xbaf7bd||{},_0xbaf7bd[_0x1d60ee(0x809)]=_0xbaf7bd['textColor']||'#ffffff',_0xbaf7bd['flashColor']=_0xbaf7bd[_0x1d60ee(0xcf5)]||[0x0,0x0,0x0,0x0],_0xbaf7bd[_0x1d60ee(0x5a5)]=_0xbaf7bd[_0x1d60ee(0x5a5)]||0x0,this[_0x1d60ee(0x9b8)]()[_0x1d60ee(0x774)](_0x26507d,_0x3c54bc,_0xbaf7bd);},Game_Battler['prototype'][_0x12d94d(0x38e)]=function(){const _0x1b91e3=_0x12d94d;if(this[_0x1b91e3(0x2b7)]())return![];if(this['isAlive']()&&this[_0x1b91e3(0x66e)]())return!![];if(this[_0x1b91e3(0x2c3)]()&&this[_0x1b91e3(0xad)]()){if(_0x1b91e3(0x6c9)===_0x1b91e3(0x6c9)){if(this['isDead']()&&this['allowCollapse']())return![];}else{if(this[_0x1b91e3(0xbb9)]()===_0x1b91e3(0xb2d))return this[_0x1b91e3(0x2d5)]();else return this[_0x1b91e3(0x929)]()?this[_0x1b91e3(0x7b4)]():_0x3a643e[_0x1b91e3(0xadf)][_0x1b91e3(0x34b)][_0x1b91e3(0xba3)](this);}}else{if(this[_0x1b91e3(0xb91)]())return![];}return!![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x9a7)]=Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x8e2)],Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x8e2)]=function(){const _0x23017b=_0x12d94d;VisuMZ[_0x23017b(0xadf)]['Game_Battler_clearMotion'][_0x23017b(0xba3)](this),this[_0x23017b(0x749)]();},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x4b5)]=function(){return!![];},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x23a)]=function(){return![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x5bc)]=Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x460)],Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x460)]=function(_0x3935af){const _0x3afbdb=_0x12d94d;VisuMZ[_0x3afbdb(0xadf)][_0x3afbdb(0x5bc)][_0x3afbdb(0xba3)](this,_0x3935af),this[_0x3afbdb(0x206)](_0x3935af),this[_0x3afbdb(0x1ed)]();},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x206)]=function(_0x36513c){this['setBattlerFlip'](![]),this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x956)]=Game_Battler['prototype'][_0x12d94d(0x5eb)],Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x5eb)]=function(){const _0x2731f2=_0x12d94d;VisuMZ[_0x2731f2(0xadf)]['Game_Battler_onBattleEnd'][_0x2731f2(0xba3)](this),this[_0x2731f2(0xd1d)]();},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xd1d)]=function(){const _0x38f8bf=_0x12d94d;this[_0x38f8bf(0x369)]=undefined,this[_0x38f8bf(0x435)]=undefined;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x229)]=Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xa36)],Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xa36)]=function(_0x491e7e){const _0x32a319=_0x12d94d;VisuMZ[_0x32a319(0xadf)][_0x32a319(0x229)][_0x32a319(0xba3)](this,_0x491e7e);if(!_0x491e7e[_0x32a319(0x266)]()){const _0x5b33da=this['battler']();_0x5b33da&&_0x5b33da[_0x32a319(0x77)]();}this[_0x32a319(0x654)](![]);},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x2b9)]=function(){const _0x13a1d6=_0x12d94d,_0x4838a0=this[_0x13a1d6(0x9f6)];this[_0x13a1d6(0x9f6)]=![];if(BattleManager['isActiveTpb']()&&this[_0x13a1d6(0x60f)]()){if(_0x13a1d6(0x5c9)!==_0x13a1d6(0x5c9))this['contentsOpacity']-=0x10;else{const _0x228c26=this[_0x13a1d6(0x9b8)]();if(_0x228c26&&_0x4838a0)_0x228c26[_0x13a1d6(0x77)]();return;}}const _0x125e98=this[_0x13a1d6(0x9b8)]();if(_0x125e98)_0x125e98['stepBack']();this[_0x13a1d6(0x654)](![]),this[_0x13a1d6(0x747)]();},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x81)]=function(_0x2255fc){const _0xeeb465=_0x12d94d;if(_0x2255fc['isAttack']())this[_0xeeb465(0x111)]();else{if(_0x2255fc[_0xeeb465(0x266)]())this[_0xeeb465(0x484)](_0xeeb465(0x93e));else{if(_0x2255fc['isMagical']())this[_0xeeb465(0x484)](_0xeeb465(0x75e));else{if(_0x2255fc[_0xeeb465(0x226)]())[0x1,0x2,0x5,0x6]['includes'](_0x2255fc[_0xeeb465(0xc7)]()[_0xeeb465(0x1df)][_0xeeb465(0x360)])?this[_0xeeb465(0x111)]():this[_0xeeb465(0x484)](_0xeeb465(0x7e1));else _0x2255fc[_0xeeb465(0x65d)]()&&(_0xeeb465(0x3ee)==='hUaMu'?this[_0xeeb465(0x88a)]=_0x4a38da['loadSystem'](_0x399de6[_0xeeb465(0x5a2)]):this[_0xeeb465(0x484)](_0xeeb465(0xc7)));}}}},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xff)]=function(){const _0x410d73=_0x12d94d;return $dataSystem[_0x410d73(0xa14)][0x0];},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x501)]=function(){const _0x17937b=_0x12d94d,_0x3636cf=this['getAttackMotion']();return _0x3636cf?_0x3636cf[_0x17937b(0x5cd)]:0x0;},Game_Battler['prototype'][_0x12d94d(0x814)]=function(_0x387f6d){const _0x3787ae=_0x12d94d;if(!$gameSystem[_0x3787ae(0x701)]())return;const _0x4d1ec1=this[_0x3787ae(0x9b8)](),_0x3ef542=_0x387f6d[_0x3787ae(0x9b8)]();if(!_0x4d1ec1||!_0x3ef542)return;const _0x22e50c=_0x3ef542[_0x3787ae(0x3f5)],_0x21c52b=_0x3ef542[_0x3787ae(0x59e)];this[_0x3787ae(0xc5c)](_0x22e50c,_0x21c52b,0x0,![],_0x3787ae(0x148),-0x1),_0x4d1ec1[_0x3787ae(0xa8e)]();const _0x46d982=VisuMZ[_0x3787ae(0xadf)][_0x3787ae(0xb08)][_0x3787ae(0x3dd)];let _0x37d0dd=(_0x3ef542['width']+_0x4d1ec1[_0x3787ae(0xa80)])/0x2;_0x37d0dd*=this['isActor']()?0x1:-0x1;let _0x21f6fa=_0x46d982['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0x387f6d[_0x3787ae(0x6ee)](_0x37d0dd,_0x21f6fa,0x0,![],_0x3787ae(0x148)),_0x3ef542[_0x3787ae(0xa8e)]();},Game_Battler['prototype'][_0x12d94d(0x484)]=function(_0x316ba9){const _0x15994b=_0x12d94d;if(SceneManager[_0x15994b(0xb92)]()){const _0x7d0eda=this[_0x15994b(0x9b8)]();if(_0x7d0eda){_0x7d0eda[_0x15994b(0x4dc)](_0x316ba9);if([_0x15994b(0xb29),_0x15994b(0x573),_0x15994b(0xaf7)][_0x15994b(0x511)](_0x316ba9)){if('nQiCG'===_0x15994b(0x3e5))this[_0x15994b(0x566)]();else{const _0x28a983=_0x4c6afa['width'],_0x404a71=_0x51745c[_0x15994b(0x1d0)]((_0x2fab93[_0x15994b(0x807)]-_0x28a983)/0x2),_0x3e805f=this[_0x15994b(0x437)](0x4,!![]),_0x3bc4f0=_0x3a62ff['boxHeight']-_0x3e805f+(_0x56728e[_0x15994b(0xd17)]-_0x31bc1d[_0x15994b(0xf6)])/0x2;return new _0x10d046(_0x404a71,_0x3bc4f0,_0x28a983,_0x3e805f);}}}}this[_0x15994b(0x749)]();},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x566)]=function(){},Game_Battler[_0x12d94d(0x4e9)]['startWeaponAnimation']=function(_0xd50f85){const _0x411b0b=_0x12d94d;if(SceneManager[_0x411b0b(0xb92)]()){const _0x347031=this['battler']();if(_0x347031)_0x347031[_0x411b0b(0x562)](_0xd50f85);}},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xb03)]=function(){const _0x20dcb1=_0x12d94d;if(SceneManager[_0x20dcb1(0xb92)]()){if(_0x20dcb1(0x3ac)!=='nIJXR')return _0x41f0c8['BattleCore']['Settings']['PartyCmd']['CommandAddAutoBattle'];else{const _0x29564d=this[_0x20dcb1(0x501)]();this[_0x20dcb1(0x25b)](_0x29564d);}}},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x984)]=function(_0x435d38,_0x4e1fce){const _0x52a844=_0x12d94d;if(!_0x435d38)return;if(!_0x435d38[_0x52a844(0xc7)]())return;if(_0x435d38[_0x52a844(0xcfb)]())return;if(_0x435d38[_0x52a844(0x266)]())return;if(_0x435d38['isItem']())return;if($gameTemp[_0x52a844(0x52c)])return;let _0x3826fd=0x0;const _0x122941=VisuMZ['BattleCore']['Settings'][_0x52a844(0x3dd)],_0x3bf1bf=_0x435d38[_0x52a844(0xc7)]()[_0x52a844(0x7ba)];if(_0x3bf1bf[_0x52a844(0x214)](/<CAST ANIMATION: (\d+)>/i))_0x3826fd=Number(RegExp['$1']);else{if(_0x3bf1bf[_0x52a844(0x214)](/<NO CAST ANIMATION>/i))return;else{if(_0x435d38[_0x52a844(0x5c4)]())_0x3826fd=_0x122941[_0x52a844(0x763)];else{if(_0x435d38[_0x52a844(0xc7e)]()){if(_0x52a844(0x8f2)!=='lqoqw'){if(!_0x17135c[_0x52a844(0xb92)]())return;const _0x2e9c41=_0x445dc7[_0x52a844(0x664)]();_0x2e9c41[_0x52a844(0xb30)]('battlelog');}else _0x3826fd=_0x122941[_0x52a844(0x194)];}else{if(_0x435d38[_0x52a844(0x276)]()){if(_0x52a844(0x34c)===_0x52a844(0x34c))_0x3826fd=_0x122941[_0x52a844(0x11b)];else{const _0x5006ff=this[_0x52a844(0xc83)]()?this[_0x52a844(0xaa2)]():this[_0x52a844(0x673)]();if(_0x5006ff){const _0x2a65b8=_0x5006ff[_0x52a844(0x7ba)];if(_0x2a65b8['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x3bb088(_0x1a3c08['$1'])*0.01;else{if(_0x2a65b8[_0x52a844(0x214)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x2b5f12(_0x40ae02['$1'])||0x0;}}return 0x1;}}}}}}_0x3826fd>0x0&&$gameTemp[_0x52a844(0x58d)]([this],_0x3826fd,!!_0x4e1fce);},Game_Battler[_0x12d94d(0x4e9)]['performReflection']=function(){const _0x194024=_0x12d94d;SoundManager['playReflection']();let _0x4462d0=VisuMZ[_0x194024(0xadf)][_0x194024(0xb08)][_0x194024(0x3dd)][_0x194024(0x325)];_0x4462d0>0x0&&(Imported['VisuMZ_0_CoreEngine']?$gameTemp[_0x194024(0xcd3)]([this],_0x4462d0):_0x194024(0x220)===_0x194024(0x220)?$gameTemp['requestAnimation']([this],_0x4462d0):_0x29a68b[_0x194024(0xadf)]['ParseArmorNotetags'][_0x194024(0xba3)](this,_0x3760d5));},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x3db)]=Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x87b)],Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x87b)]=function(){const _0x5d591c=_0x12d94d;VisuMZ['BattleCore'][_0x5d591c(0x3db)]['call'](this),this[_0x5d591c(0x9af)](),this[_0x5d591c(0x486)]();},VisuMZ['BattleCore']['Game_Battler_performMiss']=Game_Battler[_0x12d94d(0x4e9)]['performMiss'],Game_Battler['prototype'][_0x12d94d(0xa04)]=function(){const _0xfbedb0=_0x12d94d;VisuMZ[_0xfbedb0(0xadf)][_0xfbedb0(0x396)][_0xfbedb0(0xba3)](this),this[_0xfbedb0(0x9af)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x7b)]=Game_Battler['prototype'][_0x12d94d(0x83)],Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x83)]=function(){const _0x28dcd8=_0x12d94d;VisuMZ['BattleCore']['Game_Battler_performEvasion'][_0x28dcd8(0xba3)](this),this[_0x28dcd8(0x9af)]();},Game_Battler['prototype']['performFlinch']=function(){const _0x3764ac=_0x12d94d;if(!$gameSystem['isSideView']())return;if(this['_flinched'])return;this['_flinched']=!![];const _0x197f42=this['battler']();if(_0x197f42)_0x197f42[_0x3764ac(0x7b3)]();},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x486)]=function(){const _0x48ccf8=_0x12d94d;if(!this['canBattlerMove']())return;const _0xaf8496=VisuMZ[_0x48ccf8(0xadf)]['Settings'][_0x48ccf8(0x58b)];if(!(_0xaf8496[_0x48ccf8(0x9ac)]??![]))return;if(this['_lastHpDamage']<=0x0)return;const _0x22b3ac=this['battler']();if(_0x22b3ac){if(_0x48ccf8(0x126)!==_0x48ccf8(0x5b6)){const _0x24339e=this[_0x48ccf8(0x53e)],_0x28a3ef=(_0x24339e/this[_0x48ccf8(0xcdb)])['clamp'](0.8,0x1),_0x6090fc=_0xaf8496[_0x48ccf8(0x4d2)]??0x30,_0x29b189=_0x28a3ef*_0x6090fc;_0x22b3ac['startShakeFlinch'](_0x29b189,_0x28a3ef);}else _0x4fb4ee[_0x48ccf8(0xadf)][_0x48ccf8(0x2a8)][_0x48ccf8(0xba3)](this),!this[_0x48ccf8(0x78b)]&&this[_0x48ccf8(0x137)]&&(this['_hpGaugeSprite']['visible']=![]);}},Game_Battler[_0x12d94d(0x4e9)]['requestMotionRefresh']=function(){const _0x308ebe=_0x12d94d;if(this['isDead']()&&this[_0x308ebe(0x26c)]!=='dead'){this[_0x308ebe(0x484)](_0x308ebe(0xb01));return;}if(this[_0x308ebe(0xb91)]()&&this['_motionType']==='dead')return;if(!!this[_0x308ebe(0xd21)])return;if(this[_0x308ebe(0x2c3)]()){if(_0x308ebe(0x9e)!==_0x308ebe(0xa19)){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x308ebe(0xa37)]){if(_0x308ebe(0xaee)!=='VBFtO')return _0x3966cc[_0x308ebe(0x592)][_0x308ebe(0xbb9)]()===_0x308ebe(0xb2d)?_0x54faf9[_0x308ebe(0xadf)][_0x308ebe(0xb08)][_0x308ebe(0x160)][_0x308ebe(0x546)]:_0x4f3dd8[_0x308ebe(0xadf)][_0x308ebe(0xb08)][_0x308ebe(0x160)][_0x308ebe(0x977)];else{if(this['battler']())this[_0x308ebe(0x9b8)]()[_0x308ebe(0x5a1)]();}}this[_0x308ebe(0x749)]();return;}else{if(!this[_0x308ebe(0x78b)])return![];if(this[_0x308ebe(0xc45)]>0x0)return!![];return _0x41de69['BattleCore'][_0x308ebe(0x862)][_0x308ebe(0xba3)](this);}}if(this[_0x308ebe(0x26c)]==='victory')return;if(this[_0x308ebe(0x26c)]===_0x308ebe(0x691)&&!BattleManager['isInputting']())return;if(this[_0x308ebe(0x26c)]===_0x308ebe(0x93e)&&!BattleManager[_0x308ebe(0x60f)]())return;this[_0x308ebe(0x8e2)]();if(BattleManager[_0x308ebe(0x557)]()&&this===BattleManager['_subject'])return;if(this[_0x308ebe(0x9b8)]()&&BattleManager[_0x308ebe(0x60f)]()){this['battler']()[_0x308ebe(0x5a1)](),this[_0x308ebe(0x749)]();return;}},Game_Enemy[_0x12d94d(0x4e9)]['isDuringNonLoopingMotion']=function(){const _0x2ff2c2=_0x12d94d;if(!this[_0x2ff2c2(0xad)]())return![];const _0x8c1748=this[_0x2ff2c2(0x9b8)]();if(!_0x8c1748)return![];const _0x67fb9b=_0x8c1748[_0x2ff2c2(0x348)];if(!_0x67fb9b)return![];const _0x5aa624=_0x67fb9b[_0x2ff2c2(0x527)];return _0x5aa624&&!_0x5aa624[_0x2ff2c2(0xc59)];},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xd05)]=function(){const _0x3d6693=_0x12d94d;return this[_0x3d6693(0x88)];},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x654)]=function(_0x504e30){const _0x478948=_0x12d94d;if(!$gameSystem[_0x478948(0x701)]())return;this[_0x478948(0x88)]=_0x504e30;const _0xbff2e6=this[_0x478948(0x9b8)]();if(_0xbff2e6)_0xbff2e6[_0x478948(0xa95)]();},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xb49)]=function(_0x3e992a,_0x75d706,_0x32f303){const _0x391658=_0x12d94d;if(!$gameSystem[_0x391658(0x701)]())return;const _0x4e6c36=this[_0x391658(0x9b8)]();if(!_0x4e6c36)return;if(_0x3e992a===_0x4e6c36['_baseX'])return;let _0x7dcc2c=![];if(this[_0x391658(0xc83)]()){if(_0x3e992a>_0x4e6c36[_0x391658(0x3f5)])_0x7dcc2c=!![];if(_0x3e992a<_0x4e6c36['_baseX'])_0x7dcc2c=![];}else{if(this[_0x391658(0x2c3)]()){if(_0x3e992a>_0x4e6c36[_0x391658(0x3f5)])_0x7dcc2c=![];if(_0x3e992a<_0x4e6c36['_baseX'])_0x7dcc2c=!![];}};this[_0x391658(0x654)](_0x32f303?!_0x7dcc2c:_0x7dcc2c),_0x4e6c36[_0x391658(0xa95)]();},Game_Battler[_0x12d94d(0x4e9)]['moveBattlerDistance']=function(_0x3dfc6c,_0x101244,_0x18959a,_0x1f5f5e,_0x46befd){const _0x14754b=_0x12d94d;if(!$gameSystem[_0x14754b(0x701)]())return;const _0x59c2d3=this[_0x14754b(0x9b8)]();if(!_0x59c2d3)return;if(_0x1f5f5e)this[_0x14754b(0xb49)](_0x3dfc6c+_0x59c2d3[_0x14754b(0x3f5)],_0x101244+_0x59c2d3[_0x14754b(0x59e)],![]);_0x3dfc6c+=_0x59c2d3[_0x14754b(0x3f5)]-_0x59c2d3[_0x14754b(0xb94)],_0x101244+=_0x59c2d3[_0x14754b(0x59e)]-_0x59c2d3[_0x14754b(0xc55)],_0x59c2d3[_0x14754b(0x620)](_0x3dfc6c,_0x101244,_0x18959a);if(Imported[_0x14754b(0x564)])_0x59c2d3[_0x14754b(0x923)](_0x46befd||_0x14754b(0x148));},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xc5c)]=function(_0x2f0de8,_0x134b1c,_0x11bfac,_0x96591b,_0x1dab97,_0x2fe665){const _0xdbbf93=_0x12d94d;if(!$gameSystem[_0xdbbf93(0x701)]())return;const _0x15f9ea=this['battler']();if(!_0x15f9ea)return;if(_0x2f0de8===Infinity||_0x134b1c===Infinity)return;if(isNaN(_0x2f0de8)||isNaN(_0x134b1c))return;_0x2fe665=_0x2fe665||0x0;if(_0x2fe665>0x0){if(_0xdbbf93(0x244)!==_0xdbbf93(0x244)){if(!_0x4a1b9b['isSceneBattle']())return;_0x472ed3[_0xdbbf93(0x2ec)](_0x20080d,_0x32d273);const _0x5bd886=_0x55dee9[_0xdbbf93(0x664)](),_0x430289=_0x4e5fa1['JumpToLabel'];if(!_0x5bd886)return;_0x142d32['_targetIndex']++,_0x39cda5[_0xdbbf93(0x4e5)]=_0x32366e[_0xdbbf93(0x3c0)][_0x5ae59f['_targetIndex']]||null,_0x1fc06b['_target']&&_0x430289[_0xdbbf93(0x97e)]()['trim']()!=='UNTITLED'&&_0x5bd886[_0xdbbf93(0xc78)]([_0x430289]);}else{if(_0x15f9ea['_baseX']>_0x2f0de8)_0x2f0de8+=_0x15f9ea[_0xdbbf93(0xa80)]/0x2+_0x2fe665;if(_0x15f9ea['_baseX']<_0x2f0de8)_0x2f0de8-=_0x15f9ea[_0xdbbf93(0xa80)]/0x2+_0x2fe665;}}if(_0x96591b)this['setBattlerFacePoint'](_0x2f0de8,_0x134b1c,![]);_0x2f0de8-=_0x15f9ea[_0xdbbf93(0xb94)],_0x134b1c-=_0x15f9ea['_homeY'],_0x15f9ea['startMove'](_0x2f0de8,_0x134b1c,_0x11bfac);if(Imported[_0xdbbf93(0x564)])_0x15f9ea[_0xdbbf93(0x923)](_0x1dab97||'Linear');},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x8b0)]=function(_0x57ad49,_0x139e58,_0x951662,_0x39b465,_0x5add57){const _0x4aa02a=_0x12d94d;if(!$gameSystem[_0x4aa02a(0x701)]())return;const _0x4f80a0=this[_0x4aa02a(0x9b8)]();if(!_0x4f80a0)return;if(_0x39b465)this[_0x4aa02a(0xb49)](_0x57ad49+_0x4f80a0[_0x4aa02a(0x3f5)],_0x139e58+_0x4f80a0['_baseY'],![]);_0x57ad49+=_0x4f80a0['_homeX'],_0x139e58+=_0x4f80a0['_homeY'],_0x4f80a0[_0x4aa02a(0x90f)](_0x57ad49,_0x139e58,_0x951662,_0x5add57),this[_0x4aa02a(0x369)]=_0x57ad49,this[_0x4aa02a(0x435)]=_0x139e58;},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xbb0)]=function(_0x3cd0be,_0x802a1b,_0x33cdbc,_0x199898,_0x5b9fff,_0x1a4566){const _0x38339a=_0x12d94d;if(!$gameSystem[_0x38339a(0x701)]())return;const _0x240464=this[_0x38339a(0x9b8)]();if(!_0x240464)return;_0x1a4566=_0x1a4566||0x0;if(_0x1a4566>0x0){if(_0x240464[_0x38339a(0x3f5)]>_0x3cd0be)_0x3cd0be+=_0x240464[_0x38339a(0xa80)]/0x2+_0x1a4566;if(_0x240464['_baseX']<_0x3cd0be)_0x3cd0be-=_0x240464['width']/0x2+_0x1a4566;}if(_0x199898)this['setBattlerFacePoint'](_0x3cd0be,_0x802a1b,![]);_0x240464[_0x38339a(0x90f)](_0x3cd0be,_0x802a1b,_0x33cdbc,_0x5b9fff),this[_0x38339a(0x369)]=_0x3cd0be,this[_0x38339a(0x435)]=_0x802a1b;},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x2a2)]=function(_0x22c4c7,_0x514298,_0x2f5ee3){const _0xb5ad62=_0x12d94d;if(!$gameSystem[_0xb5ad62(0x701)]())return;const _0x279347=this['battler']();if(!_0x279347)return;_0x279347['startFloat'](_0x22c4c7,_0x514298,_0x2f5ee3);},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x43e)]=function(_0x476862,_0x2e2ed7){const _0x45e054=_0x12d94d;if(!$gameSystem[_0x45e054(0x701)]())return;const _0x2ba6f=this['battler']();if(!_0x2ba6f)return;_0x2ba6f[_0x45e054(0xac5)](_0x476862,_0x2e2ed7);},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x40c)]=function(_0x45cf3a,_0xfbefc1,_0x35ed6d,_0x519385){const _0x3f7f81=_0x12d94d;if(!$gameSystem[_0x3f7f81(0x701)]())return;const _0x4b6c76=this[_0x3f7f81(0x9b8)]();if(!_0x4b6c76)return;_0x4b6c76[_0x3f7f81(0x731)](_0x45cf3a,_0xfbefc1,_0x35ed6d,_0x519385);},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x4a4)]=function(_0x3d0808,_0x2a3442,_0x45f1dd,_0x4c09b2){const _0x3e3bf5=_0x12d94d;if(!$gameSystem[_0x3e3bf5(0x701)]())return;const _0x986be6=this[_0x3e3bf5(0x9b8)]();if(!_0x986be6)return;this[_0x3e3bf5(0xc83)]()&&(_0x3d0808*=-0x1,_0x2a3442*=-0x1),_0x986be6[_0x3e3bf5(0xae1)](_0x3d0808,_0x2a3442,_0x45f1dd,_0x4c09b2);},Game_Battler['prototype'][_0x12d94d(0x621)]=function(_0x5dd1c1,_0x544995,_0x128ebe,_0x4f6fff){const _0x3edec7=_0x12d94d;if(!$gameSystem['isSideView']())return;const _0x425c52=this[_0x3edec7(0x9b8)]();if(!_0x425c52)return;_0x425c52[_0x3edec7(0x558)](_0x5dd1c1,_0x544995,_0x128ebe,_0x4f6fff);},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xb4b)]=function(_0xc50ef5,_0x3597fa,_0x53180e){const _0x410993=_0x12d94d;if(!$gameSystem[_0x410993(0x701)]())return;const _0x442399=this['battler']();if(!_0x442399)return;_0x442399[_0x410993(0x2ad)](_0xc50ef5,_0x3597fa,_0x53180e);},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x749)]=function(){const _0x5c2425=_0x12d94d,_0x4df83a=!!this[_0x5c2425(0xd21)];this[_0x5c2425(0xd21)]=undefined,_0x4df83a&&(_0x5c2425(0x496)==='TQjlT'?(this['requestMotionRefresh'](),this['clearFreezeMotionForWeapons']()):(this[_0x5c2425(0x73)]['bitmap']=_0x2e7ea9,this['bitmap']=new _0x127fbd(_0x11b254[_0x5c2425(0xa80)],_0x26b09f[_0x5c2425(0xd17)])));},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x64f)]=function(){const _0xb1884f=_0x12d94d;if(!SceneManager[_0xb1884f(0xb92)]())return;const _0xc84027=this['battler']();if(!_0xc84027)return;let _0x12a0ce=this[_0xb1884f(0xc83)]()?_0xc84027[_0xb1884f(0x6a9)]:_0xc84027[_0xb1884f(0x348)]['_weaponSprite'];_0x12a0ce&&_0x12a0ce['setup'](0x0);},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x813)]=function(_0x1b59d8,_0x50e364,_0x5a03a4){const _0xfdaf84=_0x12d94d;if(this[_0xfdaf84(0x2c3)]()&&!this[_0xfdaf84(0xad)]())return;let _0x39a9e7=0x0,_0x3b4454=0x0;_0x1b59d8[_0xfdaf84(0x214)](/ATTACK[ ](\d+)/i)&&(_0x3b4454=Number(RegExp['$1']),_0x3b4454--);if(this[_0xfdaf84(0xc83)]()){if(_0xfdaf84(0x3e9)===_0xfdaf84(0x962))this['hasSvBattler']()&&this[_0xfdaf84(0x348)]['refreshMotion']();else{const _0x1b89d7=this['weapons']();_0x39a9e7=_0x1b89d7[_0x3b4454]?_0x1b89d7[_0x3b4454][_0xfdaf84(0xa58)]:0x0;}}else this[_0xfdaf84(0x2c3)]()&&(_0x39a9e7=this[_0xfdaf84(0xaa8)]()['wtypeId']||0x0);const _0x5b1a72=$dataSystem[_0xfdaf84(0xa14)][_0x39a9e7];_0x1b59d8[_0xfdaf84(0x214)](/attack/i)&&(_0x1b59d8=['thrust',_0xfdaf84(0xb29),_0xfdaf84(0xaf7)][_0x5b1a72[_0xfdaf84(0x360)]]||_0xfdaf84(0xb29)),this['_freezeMotionData']={'motionType':_0x1b59d8,'weaponImageId':_0x50e364?_0x5b1a72[_0xfdaf84(0x5cd)]:0x0,'pattern':_0x5a03a4};},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x272)]=function(_0x57c972){const _0x4920c5=_0x12d94d;if(!_0x57c972)return![];return _0x57c972[_0x4920c5(0x73c)]()===this['friendsUnit']();},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x542)]=function(_0x1b3326){const _0x4c8393=_0x12d94d;if(!_0x1b3326)return![];return _0x1b3326[_0x4c8393(0x297)]()===this[_0x4c8393(0x73c)]();},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x41e)]=function(){return![];},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x41e)]=function(){const _0x4a9766=_0x12d94d;return this[_0x4a9766(0xa51)]()['match'](/\$/i);},Game_Enemy['prototype']['hasStaticSvBattler']=function(){const _0x34c1fb=_0x12d94d;return this[_0x34c1fb(0xad)]()&&this['svBattlerName']()[_0x34c1fb(0x214)](/\$/i);},VisuMZ[_0x12d94d(0xadf)]['Game_Actor_setup']=Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x5bb)],Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x5bb)]=function(_0x5401c0){const _0x2b848c=_0x12d94d;VisuMZ[_0x2b848c(0xadf)]['Game_Actor_setup'][_0x2b848c(0xba3)](this,_0x5401c0),this[_0x2b848c(0x9f3)]();},Game_Actor[_0x12d94d(0x4e9)]['initBattlePortrait']=function(){const _0x19896f=_0x12d94d;this[_0x19896f(0x9ff)]='';if(this[_0x19896f(0xaa2)]()&&this[_0x19896f(0xaa2)]()[_0x19896f(0x7ba)][_0x19896f(0x214)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)){if('Mgwfn'===_0x19896f(0x299))this[_0x19896f(0x9ff)]=String(RegExp['$1']);else{if(!_0x3c6a1e['isSideView']())return![];return![];}}},Game_Actor[_0x12d94d(0x4e9)]['getBattlePortraitFilename']=function(){const _0x47f61a=_0x12d94d;if(this[_0x47f61a(0xa91)]()!==''){if(_0x47f61a(0x458)===_0x47f61a(0x458))return this[_0x47f61a(0xa91)]();else _0x2f3454[_0x47f61a(0xadf)][_0x47f61a(0xbb)]&&_0x2729cf[_0x47f61a(0xadf)][_0x47f61a(0xbb)][_0x47f61a(0xba3)](this,_0x11cfdb),_0x47ff33[_0x47f61a(0xadf)][_0x47f61a(0x225)](_0x169201),_0x572afc['BattleCore']['Parse_Notetags_Targets'](_0x325095);}else{if(Imported[_0x47f61a(0xba5)]&&this[_0x47f61a(0xa6f)]()!=='')return this[_0x47f61a(0xa6f)]();}return'';},Game_Actor[_0x12d94d(0x4e9)]['getBattlePortrait']=function(){const _0x4ddb41=_0x12d94d;if(this[_0x4ddb41(0x9ff)]===undefined)this['initBattlePortrait']();return this[_0x4ddb41(0x9ff)];},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x6bc)]=function(_0x30df48){const _0x5becad=_0x12d94d;if(this['_battlePortrait']===undefined)this['initBattlePortrait']();this['_battlePortrait']=_0x30df48;if(SceneManager[_0x5becad(0xb92)]()&&$gameParty['battleMembers']()[_0x5becad(0x511)](this)){const _0x2932f2=SceneManager[_0x5becad(0x592)][_0x5becad(0xcbc)];_0x2932f2&&_0x2932f2['refreshActorPortrait'](this);}},Game_Actor['prototype'][_0x12d94d(0xaaf)]=function(){return!![];},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x5dc)]=function(){const _0x85be9a=_0x12d94d;if(!this[_0x85be9a(0x9b)]()&&BattleManager[_0x85be9a(0x342)])return!![];return Game_Battler[_0x85be9a(0x4e9)][_0x85be9a(0x5dc)][_0x85be9a(0xba3)](this);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x2d9)]=Game_Actor['prototype']['makeActionList'],Game_Actor['prototype'][_0x12d94d(0x70c)]=function(){const _0x4f4136=_0x12d94d;if(BattleManager[_0x4f4136(0x342)]&&!ConfigManager['autoBattleUseSkills']){if(_0x4f4136(0xbb6)!==_0x4f4136(0xbb6))_0x3c518d[_0x4f4136(0xadf)][_0x4f4136(0x1a7)][_0x4f4136(0xba3)](this,_0x2e3634),this[_0x4f4136(0x44c)](_0x16eb55);else return this['makeActionListAutoAttack']();}else{if(_0x4f4136(0xbd8)!=='UjBAP'){return VisuMZ[_0x4f4136(0xadf)][_0x4f4136(0x2d9)]['call'](this);;}else{const _0x1302b1=this[_0x4f4136(0x9b8)]();if(_0x1302b1&&_0x1dddfb)_0x1302b1[_0x4f4136(0x77)]();return;}}},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x602)]=function(){const _0x4a1b9c=_0x12d94d,_0x1551b9=[],_0x5af379=new Game_Action(this);return _0x5af379[_0x4a1b9c(0x676)](),_0x1551b9['push'](_0x5af379),_0x1551b9;},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x8bb)]=function(){const _0x3286ef=_0x12d94d;return this[_0x3286ef(0xc89)]()[_0x3286ef(0x7ba)][_0x3286ef(0x214)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x3286ef(0x5db)](/[\r\n]+/):VisuMZ['BattleCore']['Settings']['ActorCmd']['BattleCmdList'];},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x9ab)]=function(){const _0x21f293=_0x12d94d;if(this[_0x21f293(0xca3)][_0x21f293(0xc3a)]!==undefined)return this[_0x21f293(0xca3)]['svAnchorX'];if(this[_0x21f293(0xaa2)]()[_0x21f293(0x7ba)][_0x21f293(0x214)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x21f293(0x678)!==_0x21f293(0xbed))this[_0x21f293(0xca3)][_0x21f293(0xc3a)]=eval(RegExp['$1']),this[_0x21f293(0xca3)][_0x21f293(0x20a)]=eval(RegExp['$2']);else{if(!_0x2e1257['BattleCore'][_0x21f293(0xb08)][_0x21f293(0x89b)][_0x21f293(0xd04)])return _0x4614e0;const _0x3c9e11=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()['note'][_0x21f293(0x214)](_0x3c9e11))return _0x5f9661;if(this[_0x21f293(0xc1)]()[_0x21f293(0x999)]()[_0x21f293(0x97f)](_0x3f6309=>_0x3f6309&&_0x3f6309[_0x21f293(0x7ba)][_0x21f293(0x214)](_0x3c9e11)))return _0x10d7b7;const _0x817fb2=_0x30a9aa<0x0?-0x1:0x1;_0x1ca458=_0x57ef08[_0x21f293(0xc19)](_0x1d4630);let _0x10d866=this[_0x21f293(0xc1)]()[_0x21f293(0x681)]();this[_0x21f293(0xc7)]()[_0x21f293(0x7ba)][_0x21f293(0x214)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x10d866+=_0x447466(_0x3fa5bb['$1'])/0x64);_0x10d866=_0x10d866[_0x21f293(0xa2d)](0.01,0x1);const _0x18429e=this[_0x21f293(0x832)](),_0x47da9d=_0x10d866*_0x18429e;if(_0x27c5d0>_0x47da9d&&_0x18429e>_0x47da9d){_0x4892fd-=_0x47da9d;const _0x28d07a=_0x3facd4[_0x21f293(0xadf)][_0x21f293(0xb08)][_0x21f293(0x89b)]['DefaultSoftScaler'],_0x5711c0=_0x3f11f9['max'](0x1-_0x4223d7/((_0x18429e-_0x47da9d)*_0x28d07a+_0x2cfd9c),0.01);_0x55c9c1*=_0x5711c0,_0x4563d3+=_0x47da9d;}return _0x58c877*_0x817fb2;}}else this['_cache'][_0x21f293(0xc3a)]=Game_Battler[_0x21f293(0x4e9)][_0x21f293(0x9ab)][_0x21f293(0xba3)](this);return this[_0x21f293(0xca3)][_0x21f293(0xc3a)];},Game_Actor['prototype'][_0x12d94d(0x687)]=function(){const _0x877106=_0x12d94d;if(this[_0x877106(0xca3)][_0x877106(0x20a)]!==undefined)return this[_0x877106(0xca3)]['svAnchorY'];if(this['actor']()[_0x877106(0x7ba)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x877106(0x73b)!==_0x877106(0x378))this[_0x877106(0xca3)][_0x877106(0xc3a)]=eval(RegExp['$1']),this[_0x877106(0xca3)][_0x877106(0x20a)]=eval(RegExp['$2']);else{if(!_0x1d7462['isSceneBattle']())return;if(!_0x1e0f7c[_0x877106(0x857)])return;_0x14e9f2[_0x877106(0x2ec)](_0x42b374,_0x4e82d8);const _0x224a3b=_0x4533a6[_0x877106(0x664)](),_0x33c372=_0x4df62e[_0x877106(0x577)];if(!_0x224a3b)return;_0x4d1306[_0x877106(0x943)](0x1,_0x197789[_0x877106(0x227)],_0x655fbb[_0x877106(0x7fd)]);if(_0x33c372)_0x224a3b[_0x877106(0xb30)](_0x877106(0xb3f));}}else this[_0x877106(0xca3)][_0x877106(0x20a)]=Game_Battler[_0x877106(0x4e9)][_0x877106(0x687)]['call'](this);return this['_cache'][_0x877106(0x20a)];},Game_Actor['prototype']['svBattlerShadowVisible']=function(){const _0x126fd4=_0x12d94d;if(this['_cache']['svShadow']!==undefined)return this[_0x126fd4(0xca3)]['svShadow'];if(this[_0x126fd4(0xaa2)]()[_0x126fd4(0x7ba)][_0x126fd4(0x214)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x126fd4(0xca3)][_0x126fd4(0x840)]=!![];else this['actor']()[_0x126fd4(0x7ba)][_0x126fd4(0x214)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x126fd4(0xca3)]['svShadow']=![]:_0x126fd4(0x1ae)===_0x126fd4(0x1ae)?this[_0x126fd4(0xca3)][_0x126fd4(0x840)]=Game_Battler['prototype'][_0x126fd4(0x657)][_0x126fd4(0xba3)](this):this[_0x126fd4(0x900)]();return this[_0x126fd4(0xca3)]['svShadow'];},Game_Actor['prototype'][_0x12d94d(0x828)]=function(){const _0xa34c90=_0x12d94d;return VisuMZ[_0xa34c90(0xadf)][_0xa34c90(0xb08)][_0xa34c90(0x58b)][_0xa34c90(0x3d8)];},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x566)]=function(){const _0x39c748=_0x12d94d,_0x263aef=this[_0x39c748(0x8c9)](),_0x4c4a25=_0x263aef[0x0]?_0x263aef[0x0][_0x39c748(0xa58)]:0x0,_0x536d0d=$dataSystem['attackMotions'][_0x4c4a25];_0x536d0d&&this[_0x39c748(0x25b)](_0x536d0d[_0x39c748(0x5cd)]);},Game_Actor['prototype'][_0x12d94d(0x8f4)]=function(_0xa8738f){const _0x232fa1=_0x12d94d;Game_Battler['prototype'][_0x232fa1(0x8f4)]['call'](this,_0xa8738f),this[_0x232fa1(0x81)](_0xa8738f);},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0xff)]=function(){const _0x8922f5=_0x12d94d,_0x43e7bd=this[_0x8922f5(0x8c9)](),_0x4bf099=_0x43e7bd[0x0]?_0x43e7bd[0x0]['wtypeId']:0x0;return $dataSystem[_0x8922f5(0xa14)][_0x4bf099];},Game_Actor[_0x12d94d(0x4e9)]['attackAnimationIdSlot']=function(_0x15928c){const _0x155bd5=_0x12d94d;_0x15928c=_0x15928c||0x1,_0x15928c--;const _0x3b8a79=this[_0x155bd5(0x8c9)]();return _0x3b8a79[_0x15928c]?_0x3b8a79[_0x15928c][_0x155bd5(0x8b7)]:0x0;},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x680)]=function(_0x399cb5){const _0x4e581a=_0x12d94d;_0x399cb5=_0x399cb5||0x1,_0x399cb5--;const _0x1ffbab=this['weapons'](),_0x8d9060=_0x1ffbab[_0x399cb5]?_0x1ffbab[_0x399cb5][_0x4e581a(0xa58)]:0x0;return $dataSystem[_0x4e581a(0xa14)][_0x8d9060];},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0xfd)]=function(_0xe42792){const _0x3cfab1=_0x12d94d;_0xe42792=_0xe42792||0x1,_0xe42792--;const _0x2e30e5=this['weapons'](),_0x4f9751=_0x2e30e5[_0xe42792]?_0x2e30e5[_0xe42792][_0x3cfab1(0xa58)]:0x0,_0x43d938=$dataSystem['attackMotions'][_0x4f9751];if(_0x43d938){if(_0x43d938['type']===0x0)this[_0x3cfab1(0x484)](_0x3cfab1(0x573));else{if(_0x43d938[_0x3cfab1(0x360)]===0x1)this[_0x3cfab1(0x484)](_0x3cfab1(0xb29));else _0x43d938[_0x3cfab1(0x360)]===0x2&&this[_0x3cfab1(0x484)](_0x3cfab1(0xaf7));}this[_0x3cfab1(0x25b)](_0x43d938[_0x3cfab1(0x5cd)]);}},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x880)]=function(_0x1060b6){const _0x3e81ec=_0x12d94d;if(this[_0x3e81ec(0xc83)]()){if(_0x3e81ec(0x894)!==_0x3e81ec(0x894))return[_0x3e81ec(0x695),'guard',_0x3e81ec(0xc70)]['includes'](this[_0x3e81ec(0x42f)][_0x3e81ec(0xc43)]());else{const _0x2fdc4c=this[_0x3e81ec(0x8c9)]();if(_0x2fdc4c[_0x3e81ec(0x29c)]>0x0){if('owCcG'!==_0x3e81ec(0xa4)){const _0x2856e5=_0x2fdc4c[_0x1060b6];if(_0x2856e5)_0x1060b6=this[_0x3e81ec(0x387)]()[_0x3e81ec(0x86f)](_0x2856e5);}else this[_0x3e81ec(0x484)](_0x3e81ec(0x93e));}}}this[_0x3e81ec(0x938)]=_0x1060b6||0x0,this[_0x3e81ec(0xca3)]={};},Game_Battler[_0x12d94d(0x4e9)]['nextActiveWeaponSlot']=function(){const _0x178103=_0x12d94d;this[_0x178103(0x938)]=this[_0x178103(0x938)]||0x0,this[_0x178103(0x938)]++,this[_0x178103(0xca3)]={};},Game_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x587)]=function(){const _0x28391d=_0x12d94d;this[_0x28391d(0x938)]=undefined,this[_0x28391d(0xca3)]={};},VisuMZ[_0x12d94d(0xadf)]['Game_Actor_equips']=Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x387)],Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x387)]=function(){const _0x1f13cb=_0x12d94d;let _0x1e5ef4=VisuMZ[_0x1f13cb(0xadf)][_0x1f13cb(0x153)][_0x1f13cb(0xba3)](this);if(this[_0x1f13cb(0xb84)])return _0x1e5ef4;if(this[_0x1f13cb(0x938)]!==undefined){this[_0x1f13cb(0xb84)]=!![];const _0x4a1480=this[_0x1f13cb(0x8f0)]();for(let _0x1b8aef=0x0;_0x1b8aef<_0x4a1480[_0x1f13cb(0x29c)];_0x1b8aef++){_0x4a1480[_0x1b8aef]===0x1&&this[_0x1f13cb(0x938)]!==_0x1b8aef&&(_0x1e5ef4[_0x1b8aef]=null);}this[_0x1f13cb(0xb84)]=undefined;}return _0x1e5ef4;},Window_BattleLog['prototype'][_0x12d94d(0x8ba)]=function(_0x2038f4){const _0x1c404b=_0x12d94d;return _0x2038f4[_0x1c404b(0xc83)]()?_0x2038f4[_0x1c404b(0x8c9)]()[_0x1c404b(0x29c)]||0x1:'eBPZD'===_0x1c404b(0xb05)?_0x4f09c8[_0x1c404b(0xafe)]()[_0x1c404b(0xd0e)](_0x56e266=>_0x56e266!==_0x48acfb):0x1;},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x115)]=function(_0x57ea2e,_0x3c5b7e){const _0xd2c4a5=_0x12d94d;if(_0x57ea2e&&_0x57ea2e[_0xd2c4a5(0xc83)]()){if('yzsuA'===_0xd2c4a5(0x4a3))_0x57ea2e[_0xd2c4a5(0x880)](_0x3c5b7e);else return![];}this['callNextMethod']();},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xac9)]=function(_0x49b496){const _0x45b2df=_0x12d94d;_0x49b496&&_0x49b496['isActor']()&&_0x49b496[_0x45b2df(0x587)](),this[_0x45b2df(0x769)]();},Game_Actor['prototype'][_0x12d94d(0x2a0)]=function(){const _0x387675=_0x12d94d;let _0x19699b=_0x387675(0x2a0);if(this[_0x387675(0x71a)](_0x19699b))return this['_cache'][_0x19699b];return this[_0x387675(0xca3)][_0x19699b]=this[_0x387675(0xcbd)](this[_0x387675(0xaa2)]()),this['_cache'][_0x19699b];},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x8a)]=function(){const _0x2cd864=_0x12d94d;let _0x29ccfd=_0x2cd864(0x8a);if(this[_0x2cd864(0x71a)](_0x29ccfd))return this[_0x2cd864(0xca3)][_0x29ccfd];return this[_0x2cd864(0xca3)][_0x29ccfd]=this['createBattleUIOffsetY'](this[_0x2cd864(0xaa2)]()),this['_cache'][_0x29ccfd];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xc66)]=Game_Enemy[_0x12d94d(0x4e9)]['setup'],Game_Enemy['prototype']['setup']=function(_0x2e6283,_0x5ea2a8,_0x32e6d4){const _0x2ea810=_0x12d94d;_0x2e6283=DataManager[_0x2ea810(0x1ef)](_0x2e6283),VisuMZ[_0x2ea810(0xadf)][_0x2ea810(0xc66)][_0x2ea810(0xba3)](this,_0x2e6283,_0x5ea2a8,_0x32e6d4);Imported[_0x2ea810(0x663)]&&(_0x2ea810(0x3ed)!==_0x2ea810(0x3ed)?_0x43ece2[_0x2ea810(0xadf)]['Settings'][_0x2ea810(0x58b)][_0x2ea810(0x233)]?_0x5513bb[_0x2ea810(0xadf)][_0x2ea810(0xb08)]['Actor']['HomePosJS']['call'](this,_0x2f009c):_0x194078['BattleCore']['Sprite_Actor_setActorHome'][_0x2ea810(0xba3)](this,_0x428806):this['initElementStatusCore']());this[_0x2ea810(0x9d4)](),this[_0x2ea810(0xc3e)]();if(Imported[_0x2ea810(0x663)]){if('WDEuy'!=='WDEuy'){const _0x20f46a=this[_0x2ea810(0x42f)];_0x20f46a[_0x2ea810(0xa4c)](_0x2ea810(0x691),this['actorCommandEscape'][_0x2ea810(0xb99)](this)),_0x20f46a[_0x2ea810(0xa4c)]('autoBattle',this[_0x2ea810(0x5f3)][_0x2ea810(0xb99)](this)),_0x20f46a[_0x2ea810(0xa4c)](_0x2ea810(0xc70),this['actorCommandSingleSkill'][_0x2ea810(0xb99)](this)),_0x3a9c3e[_0x2ea810(0xcda)]()&&(this[_0x2ea810(0x9fa)]()?delete _0x20f46a[_0x2ea810(0x7f8)][_0x2ea810(0x75c)]:_0x20f46a['setHandler'](_0x2ea810(0x75c),this[_0x2ea810(0x159)]['bind'](this)));}else this['recoverAll']();}},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x9d4)]=function(){const _0x3d1836=_0x12d94d,_0xbcb3d2=VisuMZ[_0x3d1836(0xadf)][_0x3d1836(0xb08)]['Enemy'];this[_0x3d1836(0x17b)]=_0xbcb3d2[_0x3d1836(0xa46)],this[_0x3d1836(0x8dd)]={};},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0xc3e)]=function(){const _0xedb59d=_0x12d94d,_0x2fac19=VisuMZ[_0xedb59d(0xadf)][_0xedb59d(0xb08)][_0xedb59d(0x1ec)],_0x45448d=this[_0xedb59d(0x673)]()[_0xedb59d(0x7ba)];this[_0xedb59d(0x8dd)]={'name':'','wtypeId':_0x2fac19[_0xedb59d(0x9ba)],'collapse':_0x2fac19['AllowCollapse'],'motionIdle':_0x2fac19['MotionIdle'],'width':_0x2fac19[_0xedb59d(0x316)]||0x40,'height':_0x2fac19[_0xedb59d(0xc84)]||0x40,'anchorX':_0x2fac19[_0xedb59d(0x798)]||0x0,'anchorY':_0x2fac19[_0xedb59d(0x471)]||0x0,'shadow':_0x2fac19['Shadow']};_0x45448d[_0xedb59d(0x214)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(_0xedb59d(0x8fe)!==_0xedb59d(0x78f)?this[_0xedb59d(0x17b)]=Number(RegExp['$1']):(this['_preBattleCommonEvent']=_0x10b6d2,_0x7d947[_0xedb59d(0x592)][_0xedb59d(0x204)]()));const _0x4be574=this[_0xedb59d(0x8dd)];if(_0x45448d['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x4be574['name']=String(RegExp['$1']);else{if(_0x45448d[_0xedb59d(0x214)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x3d835c=String(RegExp['$1'])[_0xedb59d(0x5db)](/[\r\n]+/)[_0xedb59d(0x8fc)]('');_0x4be574['name']=DataManager['processRandomizedData'](_0x3d835c);}}_0x45448d[_0xedb59d(0x214)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x4be574['anchorX']=eval(RegExp['$1']),_0x4be574[_0xedb59d(0x4c6)]=eval(RegExp['$2']));if(_0x45448d[_0xedb59d(0x214)](/<SIDEVIEW COLLAPSE>/i))_0x4be574['collapse']=!![];else _0x45448d[_0xedb59d(0x214)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x4be574['collapse']=![]);if(_0x45448d[_0xedb59d(0x214)](/<SIDEVIEW SHOW SHADOW>/i))_0x4be574['shadow']=!![];else _0x45448d['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x4be574[_0xedb59d(0x400)]=![]);if(_0x45448d[_0xedb59d(0x214)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x4be574[_0xedb59d(0xb75)]=String(RegExp['$1'])[_0xedb59d(0x541)]()['trim']();else{if(_0x45448d[_0xedb59d(0x214)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x4ae74e=String(RegExp['$1'])[_0xedb59d(0x5db)](/[\r\n]+/)[_0xedb59d(0x8fc)]('');_0x4be574[_0xedb59d(0xb75)]=DataManager['processRandomizedData'](_0x4ae74e);}}_0x45448d[_0xedb59d(0x214)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0xedb59d(0x94d)===_0xedb59d(0x94d)?(_0x4be574[_0xedb59d(0xa80)]=Number(RegExp['$1']),_0x4be574['height']=Number(RegExp['$2'])):(this['updateHomeMove'](),_0x10df6c['BattleCore'][_0xedb59d(0x314)]['call'](this),this[_0xedb59d(0x758)](),this[_0xedb59d(0x168)]()));if(_0x45448d['match'](/<SIDEVIEW WEAPON: (.*)>/i)){if('YPxaY'===_0xedb59d(0x5fe))_0x4be574[_0xedb59d(0xa58)]=DataManager[_0xedb59d(0x14f)](RegExp['$1']);else return[_0xf7c8ea[_0xedb59d(0x8ed)]()];}else{if(_0x45448d[_0xedb59d(0x214)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0xedb59d(0x748)!==_0xedb59d(0x135)){const _0x408676=String(RegExp['$1'])[_0xedb59d(0x5db)](/[\r\n]+/)[_0xedb59d(0x8fc)](''),_0x136a48=DataManager[_0xedb59d(0x329)](_0x408676);_0x4be574[_0xedb59d(0xa58)]=DataManager['getWtypeIdWithName'](_0x136a48);}else this[_0xedb59d(0x230)]=!![];}}if(Imported[_0xedb59d(0x663)]){if(_0xedb59d(0x397)!==_0xedb59d(0x510)){const _0x16a2e3=this['getTraitSetKeys']();for(const _0x3de4f7 of _0x16a2e3){const _0x5c873c=this[_0xedb59d(0x47d)](_0x3de4f7)['Name'][_0xedb59d(0x97e)]()['trim'](),_0x3e9124=_0x3de4f7['toUpperCase']()[_0xedb59d(0xc39)]();if(_0x45448d[_0xedb59d(0x214)](VisuMZ[_0xedb59d(0xa8)]['RegExp'][_0xedb59d(0x81c)[_0xedb59d(0x3d0)](_0x3e9124,_0x5c873c)])){if(_0xedb59d(0x7dd)!==_0xedb59d(0x886))_0x4be574[_0xedb59d(0x536)]=String(RegExp['$1']);else{if(this[_0xedb59d(0x5b2)])return;}}else{if(_0x45448d[_0xedb59d(0x214)](VisuMZ[_0xedb59d(0xa8)][_0xedb59d(0xe9)]['SvBattlerMass-%1-%2'['format'](_0x3e9124,_0x5c873c)])){const _0x51cbc5=String(RegExp['$1'])[_0xedb59d(0x5db)](/[\r\n]+/)[_0xedb59d(0x8fc)]('');_0x4be574['name']=DataManager[_0xedb59d(0x329)](_0x51cbc5);}}if(_0x45448d[_0xedb59d(0x214)](VisuMZ[_0xedb59d(0xa8)]['RegExp'][_0xedb59d(0x7a6)['format'](_0x3e9124,_0x5c873c)]))_0x4be574[_0xedb59d(0xa58)]=DataManager[_0xedb59d(0x14f)](RegExp['$1']);else{if(_0x45448d[_0xedb59d(0x214)](VisuMZ[_0xedb59d(0xa8)][_0xedb59d(0xe9)]['SvWeaponMass-%1-%2'[_0xedb59d(0x3d0)](_0x3e9124,_0x5c873c)])){const _0x26c5d2=String(RegExp['$1'])['split'](/[\r\n]+/)[_0xedb59d(0x8fc)](''),_0xbba2b5=DataManager[_0xedb59d(0x329)](_0x26c5d2);_0x4be574[_0xedb59d(0xa58)]=DataManager[_0xedb59d(0x14f)](_0xbba2b5);}}if(_0x45448d[_0xedb59d(0x214)](VisuMZ[_0xedb59d(0xa8)]['RegExp']['SvMotionIdleSolo-%1-%2'[_0xedb59d(0x3d0)](_0x3e9124,_0x5c873c)]))_0xedb59d(0x1a1)!==_0xedb59d(0x1a1)?this[_0xedb59d(0x3e4)](_0xedb59d(0x36b)):_0x4be574[_0xedb59d(0xb75)]=String(RegExp['$1'])[_0xedb59d(0x541)]()['trim']();else{if(_0x45448d[_0xedb59d(0x214)](VisuMZ['ElementStatusCore'][_0xedb59d(0xe9)][_0xedb59d(0x344)[_0xedb59d(0x3d0)](_0x3e9124,_0x5c873c)])){if(_0xedb59d(0x60c)===_0xedb59d(0x60c)){const _0x4ea0bc=String(RegExp['$1'])[_0xedb59d(0x5db)](/[\r\n]+/)[_0xedb59d(0x8fc)]('');_0x4be574[_0xedb59d(0xb75)]=DataManager[_0xedb59d(0x329)](_0x4ea0bc);}else _0x2c4615=(_0x526d94+_0x58ad87)/0x2,_0x53ec5c=-0x1;}}}}else{this[_0xedb59d(0xbce)](_0xedb59d(0x4f6),_0x5f0b3a);_0x155cb3['BattleCore'][_0xedb59d(0xb08)][_0xedb59d(0x3dd)][_0xedb59d(0xc60)]&&this[_0xedb59d(0xbce)]('showAnimation',_0x331ae7,[_0xc04335[_0xedb59d(0xa37)]],-0x1);if(!_0x5916a1[_0xedb59d(0xadf)]['Settings'][_0xedb59d(0x883)][_0xedb59d(0x705)])return;this['push'](_0xedb59d(0x767),_0x47616d[_0xedb59d(0xb6a)][_0xedb59d(0x3d0)](_0xd26bce[_0xedb59d(0x536)]()));}}},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x9d1)]=function(){const _0x1cf31e=_0x12d94d;return this[_0x1cf31e(0x17b)]||0x0;},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x3d5)]=function(){const _0x5b7bf6=_0x12d94d;return this[_0x5b7bf6(0x9d1)]();},Game_Enemy[_0x12d94d(0x4e9)]['attackAnimationIdSlot']=function(_0x5dac7d){const _0x46c290=_0x12d94d;return this[_0x46c290(0x9d1)]();},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x4b5)]=function(){const _0x135923=_0x12d94d;if(this[_0x135923(0x673)]()[_0x135923(0x7ba)][_0x135923(0x214)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x135923(0x4b5)][_0x135923(0xba3)](this);},Game_Enemy[_0x12d94d(0x4e9)]['isBattlerGrounded']=function(){const _0x32c5a0=_0x12d94d;if(this[_0x32c5a0(0x673)]()[_0x32c5a0(0x7ba)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x12d94d(0x4e9)]['skills']=function(){const _0x21fa38=_0x12d94d,_0x5efc18=[];for(const _0x218816 of this[_0x21fa38(0x673)]()[_0x21fa38(0x872)]){const _0x334a30=$dataSkills[_0x218816[_0x21fa38(0xa7d)]];if(_0x334a30&&!_0x5efc18[_0x21fa38(0x511)](_0x334a30))_0x5efc18['push'](_0x334a30);}return _0x5efc18;},Game_Enemy['prototype'][_0x12d94d(0x2a0)]=function(){const _0x385c94=_0x12d94d;let _0x1cb864='battleUIOffsetX';if(this[_0x385c94(0x71a)](_0x1cb864))return this[_0x385c94(0xca3)][_0x1cb864];return this[_0x385c94(0xca3)][_0x1cb864]=this[_0x385c94(0xcbd)](this[_0x385c94(0x673)]()),this['_cache'][_0x1cb864];},Game_Enemy[_0x12d94d(0x4e9)]['battleUIOffsetY']=function(){const _0x2099d3=_0x12d94d;let _0x1caa19=_0x2099d3(0x8a);if(this[_0x2099d3(0x71a)](_0x1caa19))return this[_0x2099d3(0xca3)][_0x1caa19];return this['_cache'][_0x1caa19]=this[_0x2099d3(0x13b)](this[_0x2099d3(0x673)]()),this[_0x2099d3(0xca3)][_0x1caa19];},Game_Enemy[_0x12d94d(0x4e9)]['svBattlerData']=function(){const _0xb8756e=_0x12d94d;if(this[_0xb8756e(0x8dd)]!==undefined)return this[_0xb8756e(0x8dd)];return this[_0xb8756e(0xc3e)](),this[_0xb8756e(0x8dd)];},Game_Enemy['prototype']['hasSvBattler']=function(){const _0x26ea35=_0x12d94d;return this['svBattlerData']()[_0x26ea35(0x536)]!=='';},Game_Enemy[_0x12d94d(0x4e9)]['svBattlerName']=function(){const _0x1302e7=_0x12d94d;return this['svBattlerData']()[_0x1302e7(0x536)];},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x828)]=function(){const _0x1120e9=_0x12d94d;if(this[_0x1120e9(0xad)]())return VisuMZ[_0x1120e9(0xadf)]['Settings'][_0x1120e9(0x58b)][_0x1120e9(0x3d8)];else{if(_0x1120e9(0xac)===_0x1120e9(0xac))return VisuMZ[_0x1120e9(0xadf)]['Settings'][_0x1120e9(0x1ec)][_0x1120e9(0x3d8)];else this[_0x1120e9(0xb94)]=this['applyEasing'](this[_0x1120e9(0xb94)],this[_0x1120e9(0x8ca)],_0x145455,_0x33d93f,_0x5b8ae2),this[_0x1120e9(0xc55)]=this[_0x1120e9(0x1da)](this[_0x1120e9(0xc55)],this[_0x1120e9(0x947)],_0xfc5208,_0x35927a,_0x21f762);}},Game_Enemy[_0x12d94d(0x4e9)]['performAction']=function(_0x4480e3){const _0x1238ae=_0x12d94d;Game_Battler[_0x1238ae(0x4e9)][_0x1238ae(0x8f4)]['call'](this,_0x4480e3);if(this[_0x1238ae(0xad)]())this[_0x1238ae(0x81)](_0x4480e3);},Game_Enemy['prototype'][_0x12d94d(0x111)]=function(){const _0x15ffe6=_0x12d94d,_0x115bd6=this[_0x15ffe6(0xaa8)]()[_0x15ffe6(0xa58)]||0x0,_0x2b494b=$dataSystem['attackMotions'][_0x115bd6];if(_0x2b494b){if(_0x2b494b['type']===0x0)this[_0x15ffe6(0x484)]('thrust');else{if(_0x2b494b['type']===0x1)this[_0x15ffe6(0x484)](_0x15ffe6(0xb29));else _0x2b494b[_0x15ffe6(0x360)]===0x2&&this[_0x15ffe6(0x484)](_0x15ffe6(0xaf7));}}},Game_Enemy['prototype'][_0x12d94d(0x566)]=function(){const _0x36c6a9=_0x12d94d,_0x55852e=this[_0x36c6a9(0xaa8)]()[_0x36c6a9(0xa58)]||0x0,_0x7c14c8=$dataSystem['attackMotions'][_0x55852e];_0x7c14c8&&this['startWeaponAnimation'](_0x7c14c8[_0x36c6a9(0x5cd)]);},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0xff)]=function(){const _0x8e15a0=_0x12d94d,_0xd43e2e=this['svBattlerData']()[_0x8e15a0(0xa58)]||0x0;return $dataSystem['attackMotions'][_0xd43e2e];},Game_Enemy[_0x12d94d(0x4e9)]['getAttackMotionSlot']=function(_0x2021a0){const _0x246a40=_0x12d94d;return this[_0x246a40(0xff)]();},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x87b)]=function(){const _0x366ff9=_0x12d94d;Game_Battler['prototype'][_0x366ff9(0x87b)][_0x366ff9(0xba3)](this),this[_0x366ff9(0xaaf)]()&&this['hasSvBattler']()&&this[_0x366ff9(0x484)]('damage'),SoundManager[_0x366ff9(0xd11)]();},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x83)]=function(){const _0x4d2893=_0x12d94d;Game_Battler[_0x4d2893(0x4e9)]['performEvasion']['call'](this),this[_0x4d2893(0x484)](_0x4d2893(0xa72));},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x6d5)]=function(){const _0x27654b=_0x12d94d;Game_Battler[_0x27654b(0x4e9)][_0x27654b(0x6d5)]['call'](this),this[_0x27654b(0x484)](_0x27654b(0xa72));},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x4f6)]=function(){const _0x43e7dd=_0x12d94d;Game_Battler[_0x43e7dd(0x4e9)]['performCounter'][_0x43e7dd(0xba3)](this),this[_0x43e7dd(0x111)]();},Game_Enemy[_0x12d94d(0x4e9)]['allowCollapse']=function(){const _0x23b2e2=_0x12d94d;if(this[_0x23b2e2(0xad)]()){if(this['collapseType']()>=0x1)return!![];return this[_0x23b2e2(0xaa8)]()[_0x23b2e2(0xb1a)];}else return!![];},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x9ab)]=function(){const _0x191e86=_0x12d94d;return this[_0x191e86(0xaa8)]()['anchorX'];},Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x687)]=function(){const _0x589168=_0x12d94d;return this[_0x589168(0xaa8)]()[_0x589168(0x4c6)];},Game_Enemy[_0x12d94d(0x4e9)]['svBattlerShadowVisible']=function(){const _0xa7c38a=_0x12d94d;return this[_0xa7c38a(0xaa8)]()[_0xa7c38a(0x400)];},VisuMZ['BattleCore']['Game_Enemy_transform']=Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x645)],Game_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x645)]=function(_0x489a76){const _0x588c1d=_0x12d94d;VisuMZ['BattleCore'][_0x588c1d(0x48c)]['call'](this,_0x489a76),this[_0x588c1d(0x9d4)](),this[_0x588c1d(0xc3e)]();const _0xbca233=this['battler']();_0xbca233&&(_0xbca233['_battlerName']=undefined,_0xbca233[_0x588c1d(0xcf1)](this));},Game_Unit[_0x12d94d(0x4e9)][_0x12d94d(0x371)]=function(_0x3e01fb){for(const _0x21fb78 of this['members']()){if(_0x21fb78)_0x21fb78['processBattleCoreJS'](_0x3e01fb);}},Game_Unit[_0x12d94d(0x4e9)][_0x12d94d(0xcd8)]=function(){const _0x21cead=_0x12d94d,_0x45989b=this[_0x21cead(0xafe)]();return _0x45989b[Math[_0x21cead(0xbec)](_0x45989b['length'])];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xa71)]=Game_Party[_0x12d94d(0x4e9)][_0x12d94d(0x8e3)],Game_Party['prototype'][_0x12d94d(0x8e3)]=function(_0x516829){const _0x44e21f=_0x12d94d;VisuMZ[_0x44e21f(0xadf)][_0x44e21f(0xa71)][_0x44e21f(0xba3)](this,_0x516829),BattleManager['refreshStatusWindow']();},VisuMZ[_0x12d94d(0xadf)]['Game_Party_removeActor']=Game_Party[_0x12d94d(0x4e9)]['removeActor'],Game_Party['prototype'][_0x12d94d(0x972)]=function(_0x1baa37){const _0x2f2fd9=_0x12d94d;VisuMZ[_0x2f2fd9(0xadf)][_0x2f2fd9(0xbd)][_0x2f2fd9(0xba3)](this,_0x1baa37),BattleManager[_0x2f2fd9(0x6b0)]();},VisuMZ['BattleCore']['Game_Troop_setup']=Game_Troop[_0x12d94d(0x4e9)]['setup'],Game_Troop[_0x12d94d(0x4e9)][_0x12d94d(0x5bb)]=function(_0xd20fe3){const _0x2bf5f8=_0x12d94d;$gameTemp[_0x2bf5f8(0x45f)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0xd20fe3),VisuMZ[_0x2bf5f8(0xadf)][_0x2bf5f8(0x93f)][_0x2bf5f8(0xba3)](this,_0xd20fe3),this[_0x2bf5f8(0x62b)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x9a0)]=Game_Troop['prototype'][_0x12d94d(0x4ae)],Game_Troop[_0x12d94d(0x4e9)]['expTotal']=function(){const _0xdb6a59=_0x12d94d;let _0x4bf408=VisuMZ['BattleCore'][_0xdb6a59(0x9a0)][_0xdb6a59(0xba3)](this);return this[_0xdb6a59(0x975)]&&(_0x4bf408*=this[_0xdb6a59(0x975)]()),Math[_0xdb6a59(0xbeb)](_0x4bf408);},Game_Troop[_0x12d94d(0x4e9)][_0x12d94d(0x975)]=function(){return 0x1;},Game_Troop[_0x12d94d(0x4e9)][_0x12d94d(0x62b)]=function(){const _0x2e1c9b=_0x12d94d,_0x1d1e46=DataManager[_0x2e1c9b(0xb34)](this['troop']()['id']);if(_0x1d1e46[_0x2e1c9b(0x214)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){if('JqCJA'!==_0x2e1c9b(0x447)){const _0x214b43=RegExp['$1'][_0x2e1c9b(0x5db)](',')[_0x2e1c9b(0x43b)](_0x4d1359=>Number(_0x4d1359));this[_0x2e1c9b(0x72c)](),this[_0x2e1c9b(0xe6)](_0x214b43);}else _0x2ea4c6[_0x2e1c9b(0xadf)][_0x2e1c9b(0x9fd)][_0x2e1c9b(0xba3)](this,_0x32a816);}},Game_Troop[_0x12d94d(0x4e9)]['checkExtendTroopCompatibility']=function(){const _0x3b9d10=_0x12d94d;let _0x1ec681=_0x3b9d10(0x87d)+'\x0a';_0x1ec681+=_0x3b9d10(0x12b);Imported[_0x3b9d10(0x45b)]&&(VisuMZ['BattleSystemBTB'][_0x3b9d10(0xa0d)]<1.11&&(alert(_0x1ec681[_0x3b9d10(0x3d0)](_0x3b9d10(0x1b1))),SceneManager['exit']()));if(Imported['VisuMZ_2_BattleSystemCTB']){if(_0x3b9d10(0xa9)!==_0x3b9d10(0xa9)){if(!_0x2efe6e[_0x3b9d10(0xb92)]())return;_0x28ebdd[_0x3b9d10(0x2ec)](_0x80f372,_0x5d52e6);const _0x1f1886=_0x4e6e55[_0x3b9d10(0x664)](),_0x37f6f2=_0x391c9e[_0x3b9d10(0x87e)],_0xe709d2=_0x2aa2fd[_0x3b9d10(0x21f)];if(!_0x1f1886)return;_0x4c8d6d['_targetIndex']=_0x37f6f2,_0x400004[_0x3b9d10(0x4e5)]=_0xdd6ebc[_0x3b9d10(0x3c0)]?_0x2083a2[_0x3b9d10(0x3c0)][_0x54f5c5[_0x3b9d10(0x729)]]||null:null,_0x173464['_target']&&_0xe709d2[_0x3b9d10(0x97e)]()[_0x3b9d10(0xc39)]()!==_0x3b9d10(0x3be)&&_0x1f1886[_0x3b9d10(0xc78)]([_0xe709d2]);}else VisuMZ[_0x3b9d10(0xb1d)][_0x3b9d10(0xa0d)]<1.19&&(alert(_0x1ec681[_0x3b9d10(0x3d0)](_0x3b9d10(0x2c9))),SceneManager[_0x3b9d10(0xa82)]());}Imported['VisuMZ_2_BattleSystemSTB']&&(VisuMZ['BattleSystemSTB'][_0x3b9d10(0xa0d)]<1.15&&(alert(_0x1ec681[_0x3b9d10(0x3d0)](_0x3b9d10(0x320))),SceneManager['exit']()));},Game_Troop['prototype'][_0x12d94d(0xe6)]=function(_0x5f08b4){const _0x2ee09b=_0x12d94d;this[_0x2ee09b(0x515)]={};for(const _0x18e887 of this[_0x2ee09b(0x5b8)]()){if(!_0x18e887)continue;_0x18e887['setLetter']('');}for(const _0x275795 of _0x5f08b4){if(_0x2ee09b(0x151)!==_0x2ee09b(0x151))return this[_0x2ee09b(0xc1)]()[_0x2ee09b(0x104)]();else{const _0x50e558=$dataTroops[_0x275795];if(_0x50e558)this[_0x2ee09b(0x641)](_0x50e558);}}this[_0x2ee09b(0x884)]();},Game_Troop[_0x12d94d(0x4e9)][_0x12d94d(0x641)]=function(_0x2396e2){const _0x1c2842=_0x12d94d;for(const _0x4abd84 of _0x2396e2[_0x1c2842(0x5b8)]){if($dataEnemies[_0x4abd84['enemyId']]){const _0x1ca8b9=_0x4abd84[_0x1c2842(0xa81)],_0x211a96=_0x4abd84['x'],_0x363f10=_0x4abd84['y'],_0x8ab20f=new Game_Enemy(_0x1ca8b9,_0x211a96,_0x363f10);_0x4abd84[_0x1c2842(0xa05)]&&_0x8ab20f[_0x1c2842(0x165)](),this[_0x1c2842(0x801)][_0x1c2842(0xbce)](_0x8ab20f);}}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x442)]=Game_Map['prototype'][_0x12d94d(0xb66)],Game_Map['prototype'][_0x12d94d(0xb66)]=function(){const _0x366c71=_0x12d94d;VisuMZ[_0x366c71(0xadf)][_0x366c71(0x442)]['call'](this),this[_0x366c71(0x91b)]();},Game_Map[_0x12d94d(0x4e9)][_0x12d94d(0x91b)]=function(){const _0x4b2c3f=_0x12d94d;this['_regionBattleback1']={},this[_0x4b2c3f(0x298)]={};if(!$dataMap)return;const _0x3f9f7d=$dataMap[_0x4b2c3f(0x7ba)];if(!_0x3f9f7d)return;const _0x25fdb3=_0x3f9f7d['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x25fdb3)for(const _0x1ac78f of _0x25fdb3){_0x1ac78f[_0x4b2c3f(0x214)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x57ca6f=Number(RegExp['$1']),_0x19fd22=Number(RegExp['$2']),_0x2018ce=_0x19fd22===0x1?this[_0x4b2c3f(0xbfa)]:this[_0x4b2c3f(0x298)],_0x211c9a=String(RegExp['$3']);_0x2018ce[_0x57ca6f]=_0x211c9a;}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x4df)]=Game_Map[_0x12d94d(0x4e9)][_0x12d94d(0x720)],Game_Map['prototype'][_0x12d94d(0x720)]=function(){const _0x314c63=_0x12d94d;if(!BattleManager[_0x314c63(0x7d0)]()){if(_0x314c63(0x877)===_0x314c63(0x2d0))this['addSingleSkillCommands']();else{const _0x4ffb25=$gamePlayer[_0x314c63(0xced)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x314c63(0xbfa)]&&this[_0x314c63(0xbfa)][_0x4ffb25]){if(_0x314c63(0x35f)===_0x314c63(0x35f))return this[_0x314c63(0xbfa)][_0x4ffb25];else _0x4f6d96['VisuMZ_3_FrontviewBattleUI']?this[_0x314c63(0x816)]='frontview_ui':this[_0x314c63(0x816)]=_0x314c63(0x818);}}}return VisuMZ[_0x314c63(0xadf)][_0x314c63(0x4df)]['call'](this);},VisuMZ['BattleCore'][_0x12d94d(0x965)]=Game_Map[_0x12d94d(0x4e9)][_0x12d94d(0xafa)],Game_Map[_0x12d94d(0x4e9)][_0x12d94d(0xafa)]=function(){const _0x6d92a9=_0x12d94d;if(!BattleManager[_0x6d92a9(0x7d0)]()){const _0x32ff9b=$gamePlayer[_0x6d92a9(0xced)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x6d92a9(0xbfa)]&&this[_0x6d92a9(0x298)][_0x32ff9b])return this[_0x6d92a9(0x298)][_0x32ff9b];}return VisuMZ[_0x6d92a9(0xadf)][_0x6d92a9(0x965)][_0x6d92a9(0xba3)](this);},VisuMZ['BattleCore'][_0x12d94d(0xb9)]=Game_Map[_0x12d94d(0x4e9)][_0x12d94d(0xaaa)],Game_Map[_0x12d94d(0x4e9)]['encounterList']=function(){const _0x1f8506=_0x12d94d;let _0x1ca18c=JsonEx[_0x1f8506(0xb77)](VisuMZ['BattleCore'][_0x1f8506(0xb9)]['call'](this));return VisuMZ[_0x1f8506(0xadf)][_0x1f8506(0x7c)](_0x1ca18c);},VisuMZ['BattleCore']['ShuffleArray']=function(_0x271f74){const _0x5eb597=_0x12d94d;var _0x4a4c60,_0x4a611e,_0x17ff1c;for(_0x17ff1c=_0x271f74['length']-0x1;_0x17ff1c>0x0;_0x17ff1c--){if(_0x5eb597(0x1dc)===_0x5eb597(0x1dc))_0x4a4c60=Math[_0x5eb597(0x28f)](Math[_0x5eb597(0x89)]()*(_0x17ff1c+0x1)),_0x4a611e=_0x271f74[_0x17ff1c],_0x271f74[_0x17ff1c]=_0x271f74[_0x4a4c60],_0x271f74[_0x4a4c60]=_0x4a611e;else{this[_0x5eb597(0xa66)]=_0x20da7b,this[_0x5eb597(0xb4c)]='';const _0x1b9e28=new _0x227922(0x0,0x0,_0x39679c['boxWidth'],this[_0x5eb597(0x33c)]()*0x4);_0x4d2024['prototype'][_0x5eb597(0x8df)]['call'](this,_0x1b9e28),this[_0x5eb597(0xc93)](0x2),this[_0x5eb597(0x375)]=0x0;}}return _0x271f74;},VisuMZ['BattleCore'][_0x12d94d(0x7f1)]=Game_Interpreter[_0x12d94d(0x4e9)][_0x12d94d(0x1e5)],Game_Interpreter['prototype'][_0x12d94d(0x1e5)]=function(_0x4c7b64){const _0x160fba=_0x12d94d;return $gameTemp[_0x160fba(0x8b8)](this),VisuMZ['BattleCore'][_0x160fba(0x7f1)][_0x160fba(0xba3)](this,_0x4c7b64);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x990)]=Game_Interpreter[_0x12d94d(0x4e9)][_0x12d94d(0x789)],Game_Interpreter[_0x12d94d(0x4e9)][_0x12d94d(0x789)]=function(){const _0x4e9f32=_0x12d94d;if(SceneManager['isSceneBattle']()){if(_0x4e9f32(0x64c)!==_0x4e9f32(0x64c))_0x460378[_0x4e9f32(0x4e9)][_0x4e9f32(0x8df)][_0x4e9f32(0xba3)](this,_0x4d945a),this[_0x4e9f32(0xc3b)]['x']=-0x1,this[_0x4e9f32(0xc03)][_0x4e9f32(0xc3b)]['x']=-0x1;else switch(this[_0x4e9f32(0x6ea)]){case _0x4e9f32(0x49c):if(Imported[_0x4e9f32(0x857)]){if($gameScreen[_0x4e9f32(0x63b)]()[_0x4e9f32(0xa4f)]>0x0)return!![];this[_0x4e9f32(0x6ea)]='';}break;case _0x4e9f32(0x2c1):if(BattleManager[_0x4e9f32(0x372)]['isAnimationPlaying']())return!![];this[_0x4e9f32(0x6ea)]='';break;case _0x4e9f32(0x350):if(BattleManager[_0x4e9f32(0x372)]['isAnyBattleBalloonPlaying']())return!![];this[_0x4e9f32(0x6ea)]='';break;case'battleCamera':if(Imported[_0x4e9f32(0x857)]){if($gameScreen[_0x4e9f32(0x63b)]()[_0x4e9f32(0x238)]>0x0)return!![];if($gameScreen[_0x4e9f32(0x63b)]()[_0x4e9f32(0xfb)]>0x0)return!![];this[_0x4e9f32(0x6ea)]='';}break;case _0x4e9f32(0x332):if(BattleManager['_spriteset']['isEffecting']())return!![];this[_0x4e9f32(0x6ea)]='';break;case _0x4e9f32(0x59f):if(BattleManager['_spriteset'][_0x4e9f32(0x4d1)]())return!![];this[_0x4e9f32(0x6ea)]='';break;case _0x4e9f32(0x8dc):if(BattleManager[_0x4e9f32(0x372)][_0x4e9f32(0xcc7)]())return!![];this['_waitMode']='';break;case _0x4e9f32(0x54d):if(BattleManager[_0x4e9f32(0xf5)][_0x4e9f32(0x5df)]())return!![];this[_0x4e9f32(0x6ea)]='';break;case _0x4e9f32(0x5ca):if(BattleManager[_0x4e9f32(0x372)][_0x4e9f32(0x5e7)]())return!![];this[_0x4e9f32(0x6ea)]='';break;case _0x4e9f32(0x29b):if(BattleManager['_spriteset'][_0x4e9f32(0x5a6)]())return!![];this[_0x4e9f32(0x6ea)]='';break;case _0x4e9f32(0x784):if(BattleManager[_0x4e9f32(0x372)]['isAnyoneGrowing']())return!![];this[_0x4e9f32(0x6ea)]='';break;case _0x4e9f32(0x9c3):if(BattleManager[_0x4e9f32(0x372)]['isAnyoneSkewing']())return!![];this[_0x4e9f32(0x6ea)]='';break;case _0x4e9f32(0x903):if(Imported[_0x4e9f32(0x966)]){if(_0x4e9f32(0x5cc)===_0x4e9f32(0x766)){if(!_0x5a4425[_0x4e9f32(0xb92)]())return;if(!_0xf5841d[_0x4e9f32(0x663)])return;_0x363fcd[_0x4e9f32(0x2ec)](_0x58421f,_0x6adf47);const _0x2179ec=_0x96586b[_0x4e9f32(0x5ef)],_0x5878bd=_0x4c3d0d['Elements'];if(!_0x2179ec)return;_0x2179ec[_0x4e9f32(0x46d)]=_0x5878bd;}else{if(BattleManager['_spriteset'][_0x4e9f32(0x42a)]())return!![];this[_0x4e9f32(0x6ea)]='';}}break;case _0x4e9f32(0xb6e):if(Imported[_0x4e9f32(0x857)]){if($gameScreen['battleCameraData']()[_0x4e9f32(0x203)]>0x0)return!![];this[_0x4e9f32(0x6ea)]='';}break;case _0x4e9f32(0x1c4):if(BattleManager[_0x4e9f32(0x372)][_0x4e9f32(0x406)]())return!![];this[_0x4e9f32(0x6ea)]='';break;case'battleZoom':if(Imported[_0x4e9f32(0x857)]){if($gameScreen[_0x4e9f32(0x63b)]()['zoomDuration']>0x0)return!![];this[_0x4e9f32(0x6ea)]='';}break;case _0x4e9f32(0xbe2):if(Imported[_0x4e9f32(0x3fa)]){if(BattleManager[_0x4e9f32(0x372)][_0x4e9f32(0xb2b)]){if(_0x4e9f32(0x57f)==='SRgLk')_0x45818f[_0x4e9f32(0xadf)][_0x4e9f32(0x694)][_0x4e9f32(0xba3)](this),this[_0x4e9f32(0x934)]();else{if(BattleManager[_0x4e9f32(0x372)][_0x4e9f32(0xb2b)]())return!![];this[_0x4e9f32(0x6ea)]=_0x4e9f32(0xbfd);}}else{if(_0x4e9f32(0xb61)!==_0x4e9f32(0xb61))return _0x9e0126[_0x4e9f32(0xb92)]()?_0x3fcf55[_0x4e9f32(0x592)][_0x4e9f32(0x372)][_0x4e9f32(0xb15)]:this[_0x4e9f32(0x8e6)];else this['_waitMode']='';}break;}break;case _0x4e9f32(0xbfd):if(Imported[_0x4e9f32(0x3fa)]){if('KVaiC'===_0x4e9f32(0x94e))return _0x44f163[_0x4e9f32(0x5b8)]()[this[_0x4e9f32(0xa66)]];else{if(BattleManager['_spriteset'][_0x4e9f32(0xbf5)]())return!![];this['_waitMode']='';}}break;}}return VisuMZ[_0x4e9f32(0xadf)][_0x4e9f32(0x990)][_0x4e9f32(0xba3)](this);},VisuMZ['BattleCore']['Game_Interpreter_command301']=Game_Interpreter['prototype']['command301'],Game_Interpreter['prototype'][_0x12d94d(0x10d)]=function(_0x14c6b3){const _0x35a950=_0x12d94d;return!$gameParty[_0x35a950(0x208)]()?this[_0x35a950(0x241)](_0x14c6b3):VisuMZ[_0x35a950(0xadf)][_0x35a950(0x944)]['call'](this,_0x14c6b3);},Game_Interpreter[_0x12d94d(0x4e9)][_0x12d94d(0x5cb)]=function(_0x220455){const _0x234629=_0x12d94d;return VisuMZ[_0x234629(0xadf)]['Game_Interpreter_command301'][_0x234629(0xba3)](this,_0x220455),BattleManager[_0x234629(0x1bd)](_0x47c6f4=>{const _0x376a7f=_0x234629;this['_branch'][this[_0x376a7f(0x3c7)]]=_0x47c6f4;}),!![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x738)]=function(_0x1c03bc){const _0x59072e=_0x12d94d,_0x36dc11=$dataCommonEvents[_0x1c03bc];if(!_0x36dc11)return![];if(_0x36dc11[_0x59072e(0x7e4)]['length']<=0x1)return![];return!![];},Game_Interpreter[_0x12d94d(0x4e9)][_0x12d94d(0x241)]=function(_0x475a04){const _0x3a4f89=_0x12d94d,_0x4966b4=VisuMZ[_0x3a4f89(0xadf)][_0x3a4f89(0xb08)][_0x3a4f89(0x9d2)],_0x5b1e1d=_0x4966b4['BattleStartEvent'],_0x36b6ef=$dataCommonEvents[_0x5b1e1d];if(_0x36b6ef&&VisuMZ[_0x3a4f89(0xadf)][_0x3a4f89(0x738)](_0x5b1e1d)){const _0x26034c=this[_0x3a4f89(0x2e9)]()?this[_0x3a4f89(0x13f)]:0x0,_0x366781=_0x36b6ef[_0x3a4f89(0x7e4)];this[_0x3a4f89(0x9ad)](_0x366781,_0x26034c),this[_0x3a4f89(0x600)]=JsonEx[_0x3a4f89(0xb77)](this[_0x3a4f89(0x600)]);const _0x269c37={'code':0xbc3,'indent':this[_0x3a4f89(0x3c7)],'parameters':JsonEx['makeDeepCopy'](_0x475a04)};return this['_list']['splice'](this[_0x3a4f89(0x71f)]+0x1,0x0,_0x269c37),!![];}else return VisuMZ[_0x3a4f89(0xadf)][_0x3a4f89(0x944)]['call'](this,_0x475a04);},VisuMZ['BattleCore'][_0x12d94d(0x2ed)]=BattleManager[_0x12d94d(0x3df)],BattleManager[_0x12d94d(0x3df)]=function(){const _0x2228f1=_0x12d94d;VisuMZ[_0x2228f1(0xadf)][_0x2228f1(0x2ed)][_0x2228f1(0xba3)](this),this[_0x2228f1(0x27c)]();},BattleManager[_0x12d94d(0x27c)]=function(){const _0x3b5404=_0x12d94d,_0x22cab3=VisuMZ[_0x3b5404(0xadf)][_0x3b5404(0xb08)][_0x3b5404(0x9d2)],_0x438c57=_0x22cab3[_0x3b5404(0x4c9)];_0x438c57&&VisuMZ[_0x3b5404(0xadf)][_0x3b5404(0x738)](_0x438c57)&&(_0x3b5404(0xcd)===_0x3b5404(0x781)?_0x47d8ca[_0x3b5404(0xb30)](_0x3b5404(0x2c1)):(this[_0x3b5404(0x787)]=!![],$gameTemp[_0x3b5404(0xb9f)](_0x22cab3[_0x3b5404(0x4c9)]),$gameMap[_0x3b5404(0x745)](),$gameMap[_0x3b5404(0x46e)][_0x3b5404(0xd7)]=!![])),_0x22cab3[_0x3b5404(0xc26)]>0x0&&(_0x3b5404(0x83b)===_0x3b5404(0x83b)?this[_0x3b5404(0x481)]=!![]:(_0x283d79[_0x3b5404(0xca8)](),_0x42a118[_0x3b5404(0x4ee)]()?(this['startAction'](),_0x5051f4[_0x3b5404(0x431)]()):(_0x631273[_0x3b5404(0x431)](),this['endAction']())));},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xc0f)]=Scene_Map[_0x12d94d(0x4e9)]['updateCallMenu'],Scene_Map[_0x12d94d(0x4e9)][_0x12d94d(0x10a)]=function(){const _0x114684=_0x12d94d;if(BattleManager[_0x114684(0x787)])return;VisuMZ[_0x114684(0xadf)][_0x114684(0xc0f)][_0x114684(0xba3)](this);},VisuMZ['BattleCore'][_0x12d94d(0x309)]=Scene_Map['prototype'][_0x12d94d(0x935)],Scene_Map['prototype']['launchBattle']=function(){const _0x52f991=_0x12d94d;BattleManager[_0x52f991(0x787)]?this[_0x52f991(0x4e0)]():VisuMZ[_0x52f991(0xadf)][_0x52f991(0x309)][_0x52f991(0xba3)](this);},Scene_Map[_0x12d94d(0x4e9)][_0x12d94d(0x4e0)]=function(){const _0x4d05ef=_0x12d94d;this[_0x4d05ef(0x31f)]=!![];},VisuMZ[_0x12d94d(0xadf)]['SceneManager_isSceneChanging']=SceneManager[_0x12d94d(0x998)],SceneManager[_0x12d94d(0x998)]=function(){const _0x201aa8=_0x12d94d;if(BattleManager[_0x201aa8(0x787)])return![];return VisuMZ['BattleCore'][_0x201aa8(0x1d3)][_0x201aa8(0xba3)](this);},VisuMZ[_0x12d94d(0xadf)]['Game_Interpreter_terminate']=Game_Interpreter[_0x12d94d(0x4e9)]['terminate'],Game_Interpreter[_0x12d94d(0x4e9)][_0x12d94d(0xc72)]=function(){const _0x2c7157=_0x12d94d;VisuMZ[_0x2c7157(0xadf)][_0x2c7157(0x61a)][_0x2c7157(0xba3)](this),this['_preBattleCommonEvent']&&(_0x2c7157(0xacd)!==_0x2c7157(0xacd)?this[_0x2c7157(0x3e4)]('walk'):(this[_0x2c7157(0xd7)]=undefined,SceneManager['_scene'][_0x2c7157(0x204)]()));},Scene_Map[_0x12d94d(0x4e9)][_0x12d94d(0x204)]=function(){const _0x278ed1=_0x12d94d;BattleManager[_0x278ed1(0x787)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x278ed1(0x335)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x407)]=Scene_Map[_0x12d94d(0x4e9)][_0x12d94d(0x8df)],Scene_Map[_0x12d94d(0x4e9)][_0x12d94d(0x8df)]=function(){const _0x5e4020=_0x12d94d;VisuMZ['BattleCore'][_0x5e4020(0x407)]['call'](this),BattleManager['_battleCoreBattleResumeAfter']&&(this['_active']=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x12d94d(0xadf)]['Scene_Map_initialize']=Scene_Map['prototype'][_0x12d94d(0x8df)],Scene_Map[_0x12d94d(0x4e9)][_0x12d94d(0x8df)]=function(){const _0x4b8ba1=_0x12d94d;VisuMZ[_0x4b8ba1(0xadf)][_0x4b8ba1(0x922)][_0x4b8ba1(0xba3)](this),$gameTemp[_0x4b8ba1(0x45f)]();},VisuMZ['BattleCore'][_0x12d94d(0xa1f)]=Scene_ItemBase['prototype']['applyItem'],Scene_ItemBase[_0x12d94d(0x4e9)][_0x12d94d(0xb53)]=function(){const _0x488471=_0x12d94d;VisuMZ[_0x488471(0xadf)]['Scene_ItemBase_applyItem'][_0x488471(0xba3)](this);if(this['item']()[_0x488471(0x7ba)][_0x488471(0x214)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x488471(0xa18)!==_0x488471(0xa18)){const _0x24aa5b=this[_0x488471(0xbb9)]();if(['xp'][_0x488471(0x511)](_0x24aa5b)&&!_0x5f0b8e[_0x488471(0x701)]()){this[_0x488471(0xc2e)](0x0,0x0,0x0,0x0);return;}_0x1c9a82['prototype']['refreshCursor'][_0x488471(0xba3)](this);}else return;}if(this[_0x488471(0xc7)]()[_0x488471(0x7ba)][_0x488471(0x214)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x488471(0x62c)===_0x488471(0xa5))return _0x1b765b[_0x488471(0x875)]['call'](this);else $gameTemp['_commonEventQueue']=[];}if(DataManager[_0x488471(0xbdd)](this[_0x488471(0xc7)]())){if('VEhAv'!==_0x488471(0x684))$gameTemp['_commonEventQueue']=[];else{if(!_0x3bc58d[_0x488471(0xb92)]())return;const _0x59ceb5=_0x3773f9[_0x488471(0x664)]();if(!_0x59ceb5)return;_0x59ceb5[_0x488471(0xb30)]('battleSpin');}}},VisuMZ[_0x12d94d(0xadf)]['Scene_Options_maxCommands']=Scene_Options['prototype']['maxCommands'],Scene_Options[_0x12d94d(0x4e9)][_0x12d94d(0x6f2)]=function(){const _0x4b5e95=_0x12d94d;let _0x373113=VisuMZ[_0x4b5e95(0xadf)][_0x4b5e95(0x217)][_0x4b5e95(0xba3)](this);const _0x2b9b26=VisuMZ[_0x4b5e95(0xadf)][_0x4b5e95(0xb08)];if(_0x2b9b26[_0x4b5e95(0xa50)][_0x4b5e95(0x138)]&&_0x2b9b26[_0x4b5e95(0xa50)][_0x4b5e95(0xce)])_0x373113+=0x2;if(_0x2b9b26[_0x4b5e95(0x757)][_0x4b5e95(0x138)]&&_0x2b9b26[_0x4b5e95(0x757)][_0x4b5e95(0xce)])_0x373113+=0x1;return _0x373113;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x8ee)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x8df)],Scene_Battle['prototype'][_0x12d94d(0x8df)]=function(){const _0x2771fa=_0x12d94d;VisuMZ[_0x2771fa(0xadf)]['Scene_Battle_initialize']['call'](this),this[_0x2771fa(0xaf1)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xc62)]=Scene_Battle['prototype'][_0x12d94d(0x33a)],Scene_Battle['prototype'][_0x12d94d(0x33a)]=function(){const _0x5f3882=_0x12d94d;SceneManager[_0x5f3882(0xacc)]()?(Scene_Message[_0x5f3882(0x4e9)][_0x5f3882(0x33a)][_0x5f3882(0xba3)](this),this[_0x5f3882(0x372)]&&this[_0x5f3882(0x372)]['update'](),BattleManager[_0x5f3882(0x2ae)]&&BattleManager[_0x5f3882(0x1ea)]()):(VisuMZ[_0x5f3882(0xadf)][_0x5f3882(0xc62)][_0x5f3882(0xba3)](this),$gameTroop[_0x5f3882(0x928)]());},VisuMZ['BattleCore'][_0x12d94d(0x9ca)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x335)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x335)]=function(){const _0x435a2c=_0x12d94d;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message['prototype'][_0x435a2c(0x335)][_0x435a2c(0xba3)](this):_0x435a2c(0x5a3)!==_0x435a2c(0x754)?VisuMZ[_0x435a2c(0xadf)][_0x435a2c(0x9ca)]['call'](this):_0x2b319c[_0x435a2c(0xb19)]();},VisuMZ['BattleCore'][_0x12d94d(0xc79)]=Scene_Battle[_0x12d94d(0x4e9)]['terminate'],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xc72)]=function(){const _0x3e4774=_0x12d94d;SceneManager[_0x3e4774(0x96e)]()?_0x3e4774(0x2ff)===_0x3e4774(0xa12)?_0x16206e[_0x3e4774(0x4e9)][_0x3e4774(0x8df)][_0x3e4774(0xba3)](this):Scene_Message[_0x3e4774(0x4e9)][_0x3e4774(0xc72)][_0x3e4774(0xba3)](this):_0x3e4774(0xbd7)===_0x3e4774(0xbd7)?VisuMZ[_0x3e4774(0xadf)][_0x3e4774(0xc79)][_0x3e4774(0xba3)](this):this[_0x3e4774(0x6f7)](),$gameTemp['clearBattleBalloons'](),this[_0x3e4774(0xaf1)]();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x37a)]=function(){const _0x4b7122=_0x12d94d;if(ConfigManager[_0x4b7122(0x296)]&&ConfigManager[_0x4b7122(0xbbc)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x4b7122(0xbb9)]()===_0x4b7122(0xb2d))return![];else{return Scene_Message[_0x4b7122(0x4e9)][_0x4b7122(0x37a)]['call'](this);;}}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x4ce)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xbda)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xbda)]=function(){const _0x196954=_0x12d94d;this[_0x196954(0x7aa)](),VisuMZ[_0x196954(0xadf)][_0x196954(0x4ce)]['call'](this),this[_0x196954(0x492)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xcfd)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x454)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x454)]=function(){const _0x56dfd4=_0x12d94d;VisuMZ['BattleCore']['Scene_Battle_createEnemyWindow'][_0x56dfd4(0xba3)](this),this[_0x56dfd4(0x97b)]();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x97b)]=function(){const _0x47955d=_0x12d94d;this['createMultiTargetWindow'](!![]),this[_0x47955d(0x209)](![]);},Scene_Battle['prototype']['multiTargetWindowRect']=function(_0x18f437){const _0x5eade8=_0x12d94d,_0x5e031d=Window_BattleMultiTarget[_0x5eade8(0x19c)],_0x5d38d0=this[_0x5eade8(0x437)](0x1,!![]);let _0xfb5fa4=_0x18f437?Graphics[_0x5eade8(0x807)]-_0x5e031d:0x0;_0xfb5fa4+=_0x18f437?Window_BattleMultiTarget[_0x5eade8(0x5b1)]:Window_BattleMultiTarget[_0x5eade8(0x843)];const _0x13a49c=[_0x5eade8(0x340)][_0x5eade8(0x511)](this[_0x5eade8(0xbb9)]())?0x0:this['_statusWindow'][_0x5eade8(0xd17)];let _0x5e1dfc=Graphics['boxHeight']-_0x13a49c-_0x5d38d0;return _0x5e1dfc+=_0x18f437?Window_BattleMultiTarget[_0x5eade8(0x34a)]:Window_BattleMultiTarget[_0x5eade8(0x888)],new Rectangle(_0xfb5fa4,_0x5e1dfc,_0x5e031d,_0x5d38d0);},Scene_Battle['prototype']['createMultiTargetWindow']=function(_0x26d710){const _0x453d8d=_0x12d94d,_0x1838a9=this['multiTargetWindowRect'](_0x26d710),_0x2b1f9d=new Window_BattleMultiTarget(_0x1838a9,_0x26d710);this[_0x453d8d(0xc94)](_0x2b1f9d);if(_0x26d710){if(_0x453d8d(0x59b)!==_0x453d8d(0x9f1))this['_actorMultiTargetWindow']=_0x2b1f9d;else return this[_0x453d8d(0x78b)]&&this[_0x453d8d(0x78b)][_0x453d8d(0x41e)]();}else this['_enemyMultiTargetWindow']=_0x2b1f9d;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x871)]=Scene_Battle['prototype'][_0x12d94d(0xb80)],Scene_Battle[_0x12d94d(0x4e9)]['createCancelButton']=function(){const _0xdbc7a3=_0x12d94d;VisuMZ[_0xdbc7a3(0xadf)]['Scene_Battle_createCancelButton'][_0xdbc7a3(0xba3)](this),this['battleLayoutStyle']()==='border'&&this['repositionCancelButtonBorderStyle']();},Scene_Battle['prototype'][_0x12d94d(0x182)]=function(_0x5c3240){const _0x2f748d=_0x12d94d;_0x5c3240?'fDkHY'==='BAirx'?_0x10142b[_0x2f748d(0x6cc)](_0x1079d2):(this[_0x2f748d(0x12a)]['x']=(Graphics[_0x2f748d(0xa80)]-Graphics[_0x2f748d(0x807)])/0x2,this['_windowLayer']['y']=(Graphics[_0x2f748d(0xd17)]-Graphics[_0x2f748d(0xf6)])/0x2):(this[_0x2f748d(0x12a)]['x']=Graphics[_0x2f748d(0xa80)]*0xa,this['_windowLayer']['y']=Graphics[_0x2f748d(0xd17)]*0xa);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x49a)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x16d)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x16d)]=function(){const _0x3e7c52=_0x12d94d,_0x2f07d9=BattleManager[_0x3e7c52(0xaa2)]();VisuMZ[_0x3e7c52(0xadf)][_0x3e7c52(0x49a)][_0x3e7c52(0xba3)](this);if(_0x2f07d9){if(_0x3e7c52(0xa76)===_0x3e7c52(0x70e)){const _0x1c7489=_0x50057b(_0x1deec2['$1'])['split'](/[\r\n]+/)[_0x3e7c52(0x8fc)]('');_0x4ae460[_0x3e7c52(0xb75)]=_0x1f680b[_0x3e7c52(0x329)](_0x1c7489);}else{if(_0x2f07d9===BattleManager[_0x3e7c52(0xaa2)]())return;if(_0x2f07d9===BattleManager[_0x3e7c52(0xa37)])return;if(_0x2f07d9[_0x3e7c52(0x9b8)]())_0x2f07d9[_0x3e7c52(0x9b8)]()[_0x3e7c52(0x9e2)]();}}},VisuMZ['BattleCore']['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x12d94d(0x4e9)]['selectPreviousCommand'],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x959)]=function(){const _0x4ce1c9=_0x12d94d,_0x1184c5=BattleManager[_0x4ce1c9(0xaa2)]();if(_0x1184c5&&_0x1184c5['battler'])_0x1184c5[_0x4ce1c9(0x9b8)]()['stepBack']();VisuMZ[_0x4ce1c9(0xadf)][_0x4ce1c9(0xb18)][_0x4ce1c9(0xba3)](this);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x741)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xa52)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xa52)]=function(){const _0x36d589=_0x12d94d;if(VisuMZ[_0x36d589(0xadf)][_0x36d589(0xb08)][_0x36d589(0x883)]['BattleLogRectJS'])return VisuMZ[_0x36d589(0xadf)][_0x36d589(0xb08)][_0x36d589(0x883)][_0x36d589(0x518)]['call'](this);return VisuMZ['BattleCore']['Scene_Battle_logWindowRect']['call'](this);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x5ae)]=Scene_Battle['prototype'][_0x12d94d(0x696)],Scene_Battle['prototype'][_0x12d94d(0x696)]=function(){const _0x4ad64f=_0x12d94d;VisuMZ[_0x4ad64f(0xadf)][_0x4ad64f(0x5ae)]['call'](this),this[_0x4ad64f(0x98f)]();},Scene_Battle[_0x12d94d(0x4e9)]['createPartyCommandWindowBattleCore']=function(){const _0x1acfe2=_0x12d94d,_0x2c562e=this[_0x1acfe2(0xb3)];_0x2c562e['setHandler'](_0x1acfe2(0x7f7),this['commandAutoBattle'][_0x1acfe2(0xb99)](this)),_0x2c562e[_0x1acfe2(0xa4c)]('options',this[_0x1acfe2(0xc8f)][_0x1acfe2(0xb99)](this));const _0x67d3d9=this[_0x1acfe2(0xbb9)]();switch(_0x67d3d9){case'xp':case _0x1acfe2(0x834):return this['_partyCommandWindow'][_0x1acfe2(0xc93)](0x1);break;}},Scene_Battle[_0x12d94d(0x4e9)]['commandAutoBattle']=function(){const _0x1375e8=_0x12d94d;BattleManager['_autoBattle']=!![],$gameParty['makeActions'](),this[_0x1375e8(0x16d)](),BattleManager[_0x1375e8(0xcda)]()&&(BattleManager[_0x1375e8(0x3b8)]=![]);},Scene_Battle['prototype'][_0x12d94d(0xc8f)]=function(){const _0xf8aa4a=_0x12d94d;this['isQueueOptionsMenu']()?(this[_0xf8aa4a(0x12f)]=!![],this[_0xf8aa4a(0xf5)][_0xf8aa4a(0xbce)](_0xf8aa4a(0x767),VisuMZ[_0xf8aa4a(0xadf)][_0xf8aa4a(0xb08)][_0xf8aa4a(0xa88)]['ActiveTpbOptionsMessage'])):this['callOptions']();},Scene_Battle[_0x12d94d(0x4e9)]['isQueueOptionsMenu']=function(){const _0x2f08da=_0x12d94d;return BattleManager[_0x2f08da(0x557)]();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xce2)]=function(){const _0x4b33b9=_0x12d94d;this[_0x4b33b9(0x12f)]=![],this['_spriteset'][_0x4b33b9(0xba4)](),this['_windowLayer'][_0x4b33b9(0x9bf)]=![];if(BattleManager['isBattleTest']())_0x4b33b9(0x18f)!==_0x4b33b9(0x2bd)?($dataSystem[_0x4b33b9(0x720)]||$dataSystem[_0x4b33b9(0xafa)])&&SceneManager[_0x4b33b9(0x66c)]():(this['_cache']={},_0x35c4e6[_0x4b33b9(0xadf)][_0x4b33b9(0x99e)][_0x4b33b9(0xba3)](this));else($gameMap['battleback1Name']()||$gameMap[_0x4b33b9(0xafa)]())&&(_0x4b33b9(0x232)!==_0x4b33b9(0x232)?!_0x21aa5a[_0x4b33b9(0xadf)][_0x4b33b9(0xb08)][_0x4b33b9(0x883)][_0x4b33b9(0xc97)]?this['push']('performMiss',_0x72bb79):_0x2ec1be[_0x4b33b9(0xadf)][_0x4b33b9(0x4e2)][_0x4b33b9(0xba3)](this,_0x492bb1):SceneManager[_0x4b33b9(0x66c)]());SceneManager[_0x4b33b9(0xbce)](Scene_Options),BattleManager[_0x4b33b9(0xcda)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager[_0x4b33b9(0xaa2)]());},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x95b)]=Scene_Battle['prototype'][_0x12d94d(0x395)],Scene_Battle[_0x12d94d(0x4e9)]['updateBattleProcess']=function(){const _0x2a7202=_0x12d94d;VisuMZ[_0x2a7202(0xadf)][_0x2a7202(0x95b)][_0x2a7202(0xba3)](this);if(this[_0x2a7202(0x12f)]&&!BattleManager[_0x2a7202(0xa37)])this['callOptions']();},VisuMZ['BattleCore']['Scene_Battle_update']=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xba4)],Scene_Battle[_0x12d94d(0x4e9)]['update']=function(){const _0x239031=_0x12d94d;VisuMZ[_0x239031(0xadf)][_0x239031(0x4cb)][_0x239031(0xba3)](this),this[_0x239031(0x31b)]();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x492)]=function(){const _0x43b3d8=_0x12d94d,_0x57727b=this['autoBattleWindowRect']();this[_0x43b3d8(0x31d)]=new Window_AutoBattleCancel(_0x57727b),this[_0x43b3d8(0x31d)][_0x43b3d8(0x165)](),this[_0x43b3d8(0xa26)](this[_0x43b3d8(0x31d)]);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x6d1)]=function(){const _0x333957=_0x12d94d;return VisuMZ[_0x333957(0xadf)][_0x333957(0xb08)][_0x333957(0xa50)][_0x333957(0x172)][_0x333957(0xba3)](this);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xaf1)]=function(){const _0x506f59=_0x12d94d;this[_0x506f59(0x5fc)]=[];},Scene_Battle[_0x12d94d(0x4e9)]['updateOnceParallelInterpreters']=function(){const _0x49b0b9=_0x12d94d;if(!this[_0x49b0b9(0x5fc)])return;for(const _0x4ca762 of this[_0x49b0b9(0x5fc)]){if(_0x49b0b9(0x897)===_0x49b0b9(0x897)){if(_0x4ca762){if('nJloW'===_0x49b0b9(0x93d))return this['_skewDuration']>0x0;else _0x4ca762[_0x49b0b9(0xba4)]();}}else return 0xff;}},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xa4b)]=function(_0x23c628){const _0x411bec=_0x12d94d,_0x2f0184=$dataCommonEvents[_0x23c628];if(!_0x2f0184)return;const _0x5043ac=new Game_BattleOnceParallelInterpreter();this[_0x411bec(0x2a4)](_0x5043ac),_0x5043ac[_0x411bec(0x9e4)](_0x23c628);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x2a4)]=function(_0x46ef60){const _0x5310cc=_0x12d94d;this[_0x5310cc(0x5fc)]=this[_0x5310cc(0x5fc)]||[],this[_0x5310cc(0x5fc)]['push'](_0x46ef60);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x658)]=function(_0x4b7ccf){const _0x27cafa=_0x12d94d;this[_0x27cafa(0x5fc)]=this['_onceParallelInterpreters']||[],this[_0x27cafa(0x5fc)][_0x27cafa(0x8fc)](_0x4b7ccf);},Game_Troop[_0x12d94d(0x4e9)][_0x12d94d(0x928)]=function(){const _0x2fdf03=_0x12d94d;for(const _0x53c7c4 of this[_0x2fdf03(0x32b)]()[_0x2fdf03(0xa22)]){if(!this[_0x2fdf03(0xa3d)](_0x53c7c4))continue;SceneManager[_0x2fdf03(0x592)][_0x2fdf03(0xc88)](_0x53c7c4);}},Game_Troop[_0x12d94d(0x4e9)][_0x12d94d(0xa3d)]=function(_0x1e0bd2){const _0x4d0b09=_0x12d94d;if(!_0x1e0bd2)return;for(const _0x3f396b of _0x1e0bd2[_0x4d0b09(0x7e4)]){if([0x6c,0x198][_0x4d0b09(0x511)](_0x3f396b['code'])){if('RGKYu'!==_0x4d0b09(0x9d3)){if(!this[_0x4d0b09(0xc7)]()[_0x4d0b09(0x1df)][_0x4d0b09(0x433)])return 0x0;let _0x1cc4ba=_0x5a1d9b[_0x4d0b09(0xadf)][_0x4d0b09(0xb08)][_0x4d0b09(0x89b)][_0x4d0b09(0x448)]['call'](this,_0x110b83);return _0x1cc4ba=this['_multipliers'][_0x4d0b09(0x450)]*_0x1cc4ba+this[_0x4d0b09(0xafd)][_0x4d0b09(0xce1)],_0x1cc4ba;}else{const _0x536d46=_0x3f396b['parameters'][0x0];if(_0x536d46[_0x4d0b09(0x214)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xc88)]=function(_0x8cbd26){const _0x1b8b6f=_0x12d94d;if(!_0x8cbd26)return;const _0x28e0a3=new Game_BattleOnceParallelInterpreter();this[_0x1b8b6f(0x2a4)](_0x28e0a3),_0x28e0a3[_0x1b8b6f(0x41c)](_0x8cbd26);};function Game_BattleOnceParallelInterpreter(){const _0x5d6f17=_0x12d94d;this[_0x5d6f17(0x8df)](...arguments);}function _0x5935(){const _0x17ea9c=['commandEscape','checkAutoCustomActionSequenceNotetagEffect','PostApplyJS','_animationCount','BaseTroopIDs','itemEffectAddNormalState','battleInjectPrep','BattleManager_setup','PreDamageAsUserJS','StatusWindowSelectableBackHide','Scene_Battle_partyCommandWindowRect','ActSeq_Grid_RemovePassiveStatesFromNode','autoBattleUseSkills','ActSeq_Movement_Spin','_floatWholeDuration','ceil','randomInt','YSttH','allBattleMembers','ActSeq_Mechanics_EmulateAttackEffect','ParseActorNotetags','performMoveToPoint','tgFBG','CzDpJ','rauqm','isAnyoneInjectAnimating','AutoBattleMsg','ItemID','StatusWindowAttachmentFrontOffsetY','updateSelectionEffect','_regionBattleback1','ActSeq_BattleVoice_PlaySpecialLine','endAnimation','battleInjectAni','FFyIF','BattleCmdList','RwxRZ','performRecovery','KQHDg','_stateSprite','updateAttachedSprites','ActSeq_Movement_WaitForJump','_defeatedEnemies','_linkedSprite','reduce','uOzxq','ActSeq_Impact_Desaturate','hpDamage','woqpt','process_VisuMZ_BattleCore_Notetags','showEnemyAttackAnimation','Scene_Map_updateCallMenu','registerCommand','MUSIC','XPActorDefaultHeight','itemRect','DwheP','createInnerPortrait','PostDamageAsUserJS','ARTbJ','_stateIconSprite','abs','StateID','process_VisuMZ_BattleCore_CreateRegExp','_actorSprites','onDatabaseLoaded','ActSeq_Set_TargetActionSet','AGI','padding','isForOpponent','HHonC','ActSeq_Impact_TimeScale','updateKeyboardKeys','_currentAngle','DefeatEvent','isForAliveFriend','refreshRequest','Spriteset_Battle_update','lifeStealTrait','mGAiP','recoverAll','applyAngleChange','setCursorRect','statusWindowRectDefaultStyle','updateSpin','_createDamageContainer','okTargetSelectionVisibility','eQmOH','stypeId','setStateTurns','_shakeFlinchDuration','PreApply%1JS','priority','trim','svAnchorX','scale','AOzaq','refreshBattlerMotions','setupBattleCoreData','FAuDO','XYsbA','TimeScale','damageStyle','currentSymbol','MEBNw','_homeDuration','LmJPy','resetFontSettings','ApplyImmortal','_skillIDs','removeImmortal','ActSeq_DB_DragonbonesTimeScale','Armor-%1-%2','isAutoBattleCommandEnabled','setCustomDamageFormula','ANGER','constructor','Letter','gsXQb','cnMOD','BiTtm','_homeY','ActSeq_Animation_ShowAnimation','changeBattlebacks','weatherPower','loop','ActSeq_Mechanics_StbExploit','loadSystem','moveBattlerToPoint','stbGainInstant','process_VisuMZ_BattleCore_DamageStyles','USER-DEFINED\x202','CounterPlayback','BattleManager_startInput','Scene_Battle_start','adjustPosition_ScaleDown','Scene_Battle_onEnemyOk','ActSeq_BattleVoice_PlayCommonLine','Game_Enemy_setup','ActSeq_Mechanics_AtbGauge','setBlendColor','itemTextAlign','mainSpriteWidth','setBattleAngle','edifa','autoSelectLastSelected','alive\x20actors\x20not\x20target','slices','singleSkill','BattleEndEvent','terminate','battleMembers','displayAction','+%1\x20MP','portraitFlipHorz','GetActionSequenceSpecialTargetWithFlags','command119','Scene_Battle_terminate','Window_BattleLog_displayActionResults','onActorOk','NvsAJ','setSkill','isPhysical','%1Damage%2JS','startInjectAnimation','Frame','UEcLv','isActor','Height','openBattleActorWindow','executeMpDamage','ParseStateNotetags','playOnceParallelTroopPage','currentClass','_targetFloatHeight','ActSeq_Target_CurrentIndex','WTOMp','DfZyv','BattleManager_selectNextCommand','commandOptions','charging','isTurnBased','centerFrontViewSprite','setBackgroundType','addWindow','isSpinning','emerge','ShowMissEvasion','Targets2','wQyvc','ActSeq_Mechanics_EmulateItemEffect','usePremadeActionSequence','itemTargetCandidates','zqgtZ','canAttack','Immortal','isVisualHpGaugeDisplayed','CoreEngine','TwRXt','_cache','ActSeq_Movement_WaitForMovement','ARRAYJSON','gainMp','OEAbu','prepare','PmKVG','drawSingleSkillCost','makeTargetsBattleCore','Enemy-%1-%2','JSON','frontviewSpriteY','Nsrmy','ActSeq_Mechanics_Collapse','kguBi','Filename','BattleManager_initMembers','displayType','isForAnyone','drawItemStyleIcon','WaitCount1','COMBATLOG','ScaleDown','ActSeq_Mechanics_ArmorPenetration','ZXdyK','_statusWindow','createBattleUIOffsetX','compareBattlerSprites','onRegeneratePlayStateAnimation','ActSeq_Zoom_WaitForZoom','ShowHide','_requestRefresh','_shadowSprite','DefaultSoftCap','setBattleSkew','iNqRC','isAnyoneJumping','llzki','nWovE','LOFxZ','occasion','ShowEnemyGauge','loadPicture','WaitForMovement','Post','StepDistanceY','JS\x20ESCAPE\x20SUCCESS','_actions','requestFauxAnimation','PreEndTurnJS','SkewX','process_VisuMZ_BattleCore_PluginParams','CommonEventID','trueRandomTarget','_opacityDuration','isTpb','mhp','ActSeq_Motion_RefreshMotion','cancelTargetSelectionVisibility','requestBattleBalloon','_skewWholeDuration','canMove','criticalHitFlat','callOptions','effect','alterChange','TpbActiveChangeEnabled','maxItems','tdkbT','displayAffectedStatus','loadBattleback1','windowAreaHeight','QdLin','parameters','regionId','Window_BattleLog_performMiss','AYCCX','updateCollapse','setBattler','hasSkill','isCustomActionSequence','dQkjK','flashColor','HpGaugeOffsetY','MYKTI','okButtonText','isForFriend','Scene_Battle_helpWindowRect','isAttack','battleCoreTpbMainPhase','Scene_Battle_createEnemyWindow','alive\x20battlers\x20not\x20user','loadBattleback2','FrRGh','TpGaugeOffsetY','ActSeq_Projectile_Animation','addStateTurns','EnableSoftCap','isBattlerFlipped','_appeared','ActSeq_Mechanics_PtbAlterCost','SkillID','rsIbE','sort','hHqPH','ydyva','setupBattleCore','filter','Snpsz','clearWeaponAnimation','playEnemyDamage','Game_Action_setItem','mcEvW','isDying','_targetAngle','CreateActionSequenceTargets','height','selectAll','die','createBattleFieldBattleCore','Tadoz','_targetSkewY','onBattleEndBattleCore','result','PerformAction','isAnimationShownOnBattlePortrait','_freezeMotionData','VarianceFormulaJS','OffsetAdjust','_borderPortraitDuration','pow','processVictory','Destination','WeaponTypeID','Aufyy','dimColor1','isETB','QoL','ActSeq_Mechanics_ActionEffect','_mainSprite','LDXDR','Window_BattleLog_popupDamage','isTeamBased','stepForward','addedDebuffs','updateStaticSvBattlerFrames','_targetOffsetY','Game_Battler_performEvasion','ShuffleArray','smoothness','displaySubstitute','ActSeq_Grid_PullToTargetNode','_lastEnemy','performActionMotions','_weather','performEvasion','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','LIGHT-BULB','ZuumV','HITTYPE_PHYSICAL','_isBattlerFlipped','random','battleUIOffsetY','resizeWindowBorderStyle','lONeb','addState','isArray','Scene_Battle_commandFight','makeTargetsBattleCoreJS','-%1','pWjqj','StyleOFF','bdffr','Game_Action_clear','itemEffectAddAttackState','waitForEffect','createLowerLayer','JaaPs','toString','isConfused','Sprite_Battler_setBattler','addAutoBattleCommands','bJZFt','BG_TYPE','_actorMultiTargetWindow','alive\x20friends','ceMsH','extraPositionScaledY','kTJMD','nHTws','updateHpGaugePosition','performCollapse','ElementStatusCore','fPedh','Sprite_Actor_moveToStartPosition','SkipPartyCmd','eOOHW','hasSvBattler','ActSeq_Animation_ActionAnimation','Dnwpp','uMtkp','_motionCount','ActSeq_Movement_Float','_partyCommandWindow','applySoftDamageCap','ActSeq_Horror_GlitchCreate','_surprise','auto','alive\x20enemies','Game_Map_encounterList','_offsetX','ParseItemNotetags','ShakeFlinchDuration','Game_Party_removeActor','getBattlerFromKey','dbcVp','Targets','subject','evaded','ConfigManager_applyData','BZJia','isBattleFlipped','OFich','item','_opacityEasing','ActSeq_Inject_AnimationEnd','applyVariance','_growX','GRID\x20MOVE','spNPV','AdjustRect','isDamagePopupRequested','performJump','USER-DEFINED\x205','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','disarmLifeSteal','YiPtY','ActSeq_BattleLog_Clear','isTpbMainPhase','_preBattleCommonEvent','Window_BattleLog_performMagicEvasion','isAlwaysHidden','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','AwRap','_jumpWholeDuration','log','STRUCT','buffRemove','AllowRandomSpeed','CheckVisibleSkillNotetags','uBrfD','helpAreaHeight','_battleField','displayFailure','processExtendTroopMembers','waitForOpacity','playEnemyAttack','RegExp','gQvzz','NYtqH','ShowSubstitute','battleCommandIcon','lastFilename','ActSeqProjectiles','sgmhy','updateForceAction','setActionState','stateRate','jump','_logWindow','boxHeight','onOpacityEnd','snHll','EGciO','%1StartActionJS','cameraOffsetDuration','sSgjM','performAttackSlot','AlphaFilter','getAttackMotion','VisuMZ_2_BattleSystemSTB','_uiContainer','EBNKP','checkSubstitute','hardDamageCap','all\x20actors','iWXCR','VPXTs','PopupShiftX','lifeStealRate','updateCallMenu','optDisplayTp','_flashColor','command301','LIGHTBULB','kVHvU','iWRRY','performAttack','prepareBorderActor','createBattleField','BGGMV','setActiveWeaponSet','Game_Action_setSkill','isCustomBattleScope','uiiif','gainTp','_homeWholeDuration','CastMagical','PopupDuration','_targetSkewX','COBWEB','nQUxw','_frontAttachmentSprite','Users','addBattleCoreAutoBattleStyleCommand','resetBreakShield','Scale','updateHomeMove','DFujd','moveToStartPosition','Radius','loadSvEnemy','_windowLayer','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','Victory','Intensity','yFrhE','_callSceneOptions','PugQr','Mirror','bitmapHeight','displayChangedBuffs','initElementStatusCore','hniOO','RINkW','_hpGaugeSprite','AddOption','VariableDmg','Turns','createBattleUIOffsetY','Game_Action_makeDamageValueDisperse','PreDamageAsTargetJS','damageFlat','_eventId','BattleAI','portraitType','fHzhd','dead\x20battlers','%1EndTurnJS','HelpEscape','UFfQE','ActSeq_Camera_Offset','Linear','AllActorsText','Vescw','isBattleSys','mnnBS','startIcon','_enemyWindow','getWtypeIdWithName','QoKvb','TjhNv','uKAXN','Game_Actor_equips','frameVisible','Game_Temp_initialize','parallaxScrollX','ActSeq_Inject_WaitForInjectAni','waitForAnimation','actorCommandCancelTPB','BattleManager_endBattle','NOTE','Game_Action_apply','ActionCount','filters','getNextSubjectFromPool','BattleLayout','_battleBalloonQueue','extraPositionX','setBattleCameraOffset','requestDragonbonesAnimation','hide','ShowRemovedState','ActSeq_BattleLog_PushBaseLine','updateOpacity','phbwQ','cancelActorInput','ActSeq_Movement_Scale','Actions','selectNextCommand','mBAKO','ActSeq_Camera_Clamp','ActionStart','glpDI','AutoBattleRect','battleCommandName','_battlerName','AllEnemiesText','VOtFr','EXCLAMATION','applyFreezeMotionFrames','processAbort','changeInputWindow','_attackAnimationId','_baseTexture','isFrameVisible','inputtingAction','JyivD','_tempActor','isBattleMember','setVisibleUI','Scene_Battle_createHelpWindow','BkBYc','findSymbolExt','WaitForSpin','ConvertActionSequenceTarget','SyIuS','ActSeq_Skew_WaitForSkew','HPRTX','balloonId','TPB','sortDamageSprites','heYqo','MRwIw','upFaN','JzVaa','resizeWindowXPStyle','MSRwn','CastPhysical','slice','WhRUf','CaJrb','evalDamageFormulaBattleCore','itemWindowRect','Reveal','HMXio','WIDTH','setupRgbSplitImpactFilter','parallaxHue','open','innerHeight','ARVIB','Window_BattleActor_processTouch','kmWRz','virtualClick','XVtCX','HelpItem','Window_ActorCommand_initialize','kZLKX','ActSeq_Animation_BalloonAnimation','cancelLifeSteal','ActSeq_Movement_FacePoint','KTkVc','JS\x20%1START\x20TURN','PdHEK','ActSeq_Cutin_EndVisualCutinEffectType','ParseArmorNotetags','BTB','iconHeight','addOptionsCommand','isForAliveFriendBattleCore','PreStartBattleJS','JfLOD','createHelpWindow','parseForcedGameTroopSettingsBattleCore','NameAttachStateIcon','anchorX','128IfldaT','HITTYPE_MAGICAL','setEventCallback','all\x20enemies','ActSeq_Angle_Reset','changeCtbChargeTime','HpGaugeOffsetX','onSelectAction','MspYk','battleSpin','isAnyoneGrowing','_duration','iNrjt','TP_Rate','QkkZp','eAHkc','VisuMZ_4_IconBalloons','kDnbP','alterType','_actionInputIndex','deadMembers','round','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','PostApplyAsTargetJS','SceneManager_isSceneChanging','ieuoO','loadSvActor','YWpsI','setupFont','tpbActorSwitchConditionsMet','displayCounter','applyEasing','MpGaugeOffsetX','egHqz','hMjjg','xCgZU','damage','Game_Action_isForFriend','All\x20Allies','ActSeq_Horror_TVCreate','getLastHpDamage','QWJPl','command357','text','ButtonAssist','textAlign','setupBlueRedInvertImpactFilter','revertTpbCachedActor','NEZzi','Enemy','clearDamagePopup','alignBattleCoreDamageSprite','swapEnemyIDs','wTdwF','finishActorInput','damageOffsetY','ShowFacesListStyle','clearTargetBattlerKey','ActSeq_Mechanics_FtbAction','_cancelButton','snGXe','_lines','Sprite_Battler_initMembers','addNewState','updatePointAnimations','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','addChildToUiContainer','bQPpI','fontSize','isForOpponentBattleCore','_waitCount','GgYUN','skewDuration','battleCoreResumeLaunchBattle','%1Apply%2JS','onBattleStartBattleCore','gYWBz','inBattle','createMultiTargetWindow','svAnchorY','processBattleBalloonRequests','ActSeq_BattleLog_DisplayAction','horzCells','_backAttachmentSprite','createContents','MotionFrameWait','OffsetX','maxCols','adjustPosition_ScaleUp','match','%1-%2','JS\x20BATTLE\x20DEFEAT','Scene_Options_maxCommands','UzNJd','FlashColor','afcET','KonvO','jmNpt','BattleManager_cancelActorInput','COMBAT\x20LOG','JumpToLabel','KveWt','isShownOnBattlePortrait','bitmap','displayReflection','ATK','Parse_Notetags_Action','isSkill','Duration','sqDSe','Game_Battler_performActionStart','loadBitmap','UtJCX','missed','selectNextActor','BattleManager_startAction','dQfFG','_angleRevertOnFinish','command236','esgaq','HomePosJS','drawItemStatusXPStyle','OCkdU','pattern','1:1','cameraDuration','LOQbR','isBattlerGrounded','ShowAddedDebuff','yycLu','initBattleCore','YjMqL','ParseSkillNotetags','victory','command301_PreBattleEvent','_stypeIDs','setBattleCameraTargets','eEfSd','battlerKey','endAction','applyGlobal','VisuMZ_2_BattleSystemETB','_borderPortraitTargetX','JfFTI','setSTBExploited','LsSnH','dNXFi','splice','parseLocalizedText','HbCBC','mEqAV','autoMeleeMultiTargetActionSet','ZcNly','SkillItemMiddleLayout','AutoNotetag','popupDamage','removeDamageSprite','ActSeq_Animation_ChangeBattlePortrait','updateStart','sleep','startWeaponAnimation','Point','brOkA','updateWeather','ActSeq_Motion_ClearFreezeFrame','Game_BattlerBase_addNewState','setupActionSet','addWeaponSwapCommand','States','WwDpx','isDebuffAffected','isGuard','_tpbState','AfGZk','VisuMZ_3_BattleAI','updateEffectsContainer','visualCutinPortraitType','_motionType','podKk','updateBossCollapse','addChildToBack','isCTB','disarmMpLifeSteal','isFriendly','isStatusAffected','useItem','ResetOffset','isMagical','itemCri','canAttackBattleCore','updateCancel','ActSeq_Camera_FocusPoint','MxDOx','onEncounterBattleCore','EDzvx','PreEndBattleJS','itemLifeStealRate','spREB','ZfAiv','iconWidth','Mpcey','setupNegativeImpactFilter','process_VisuMZ_BattleCore_TraitObject_Notetags','parallaxHueEnemyModifier','StartName','activate','_wtypeIDs','Sprite_Actor_setActorHome','lZJGk','resetTextColor','command339','_selectionEffectCount','floor','ChangeOrderBy','Game_Action_setAttack','zmrel','CheckActSeqProjectileVersion','isSTB','updateHelp','uiMenuStyle','opponentsUnit','_regionBattleback2','Mgwfn','createBattleFieldContainer','battleOpacity','length','unshift','rec','bossCollapse','battleUIOffsetX','isForRandom','floatBattler','onStaticEnemyBitmapLoad','addOnceParallelInterpreter','onowO','weaponTypes','Window_BattleLog_displayCritical','Sprite_Battler_update','Game_Action_makeTargets','JiEIg','TpRNR','animationNextDelay','startOpacity','_tpbSceneChangeCacheActor','2qKkIGr','PRE-','Sprite_Enemy_updateBossCollapse','waitForJump','drawBackgroundRect','VisuMZ_2_DragonbonesUnion','SKILLS','command283','isHidden','alive\x20enemies\x20not\x20target','performActionEndMembers','action','Window_BattleStatus_initialize','MXHQY','ZAURn','portraitFlipVert','DJGYN','mYrFr','battleAnimation','ijuje','isEnemy','ActSeq_Animation_AttackAnimation2','ActSeq_Animation_GuardAnimation','PortraitScale','WaitForNewLine','commandName','CTB','isPTB','addImmortal','anchor','EFCSe','Formula','ActSeq_Impact_ShockwaveCenterTargets','AYElw','message4','xLHfb','BattleSystemBTB','kpLPp','skillItemWindowRectBorderStyle','_createEffectsContainer','PostDamageJS','CmdTextAutoBattle','Game_Actor_makeActionList','AgQCx','rUyUY','updateSkew','uIeUp','removeHorrorEffect','oLBKW','iwSDZ','ZLHXP','Sprite_Actor_update','min','_tempBattler','jsScaleUp','_visualHpGauge_JustDied','isForDeadFriend','isCharging','isOnCurrentMap','Game_Action_itemTargetCandidates','ARRAYFUNC','ConvertParams','BattleManager_onEncounter','_displayBattleCoreTransitionErrorMsg','ActSeq_Mechanics_EtbAction','isAlwaysVisible','AddHpGaugeOption','selectNextCommandTpb','validTargets','iHreM','StartTurnMsg','updateShadow','skew','needsSelection','sliceMax','_jumpMaxHeight','Window_BattleLog_performActionEnd','getNextDamagePopup','process_VisuMZ_BattleCore_PreBattleCommonEvent','callUpdateHelp','iPVfR','eAkoH','AxajP','guardSkillId','EndBattlePopups','string','setTargetBattlerKey','Bydek','hitFlat','frameDelay','Scene_Map_launchBattle','Game_System_initialize','WeNZt','xvxpe','_back1Sprite','TextColor','DamageFlat','AiXBT','isCancelLifeSteal','addShowHpGaugeCommand','processActorCommandCancelTPB','Sprite_Battler_updatePosition','animationShouldMirror','Width','uLMzb','battleStatusWindowAnimationContainer','statusTextAutoBattleStyle','DzAbR','updateOnceParallelInterpreters','pEavU','_autoBattleWindow','message2','_active','STB','_totalValue','icons','targetObjects','origin','ReflectAnimation','setImmortal','WvgQQ','JOjRi','processRandomizedData','startTurn','troop','negativeLifeSteal','getBattlerKeyTargetReplacement','tSZEF','_updateCursorArea','makeAutoBattleActions','_growWholeDuration','battleEffect','OHsrx','worldTransform','stop','FaceAway','ForceExploiter','gainCurrentActionsFTB','applyGlobalCommonEventNotetags','start','showPortraits','lineHeight','LUK','Game_Action_needsSelection','setHalfActionsPTB','frontview_ui','ITEM','_autoBattle','ActSeq_Movement_WaitForFloat','SvMotionIdleMass-%1-%2','JZClw','byYjo','ActSeq_DB_DragonbonesMotionAni','_svBattlerSprite','lifeSteaItem','ACTOR_OFFSET_Y','Scene_Battle_skillWindowRect','KzTRR','addCombatLogCommand','invokeAction','ActSeq_Horror_Clear','battleBalloon','visualHpGauge','isForNotUser','setHue','addAutoBattleCommand','IRoGi','faceWidth','actorCommandEscape','hqnXj','refreshActorPortrait','_floatEasing','compareEnemySprite','ActSeq_Grid_PushFromTargetNode','pfnpU','battleDisplayText','RvRbY','type','cTWgE','createHelpWindowBattleCore','checkSceneBattleTransitionable','callOkHandler','createKeyJS','IconSet','PopupShiftY','addTextToCombatLog','_forcedHomeX','pushBaseLine','abnormal','ANTI_TINT_UI','BattleManager_processDefeat','QwlTJ','_updateClientArea','JS\x20%1DAMAGE\x20%2','processBattleCoreJS','_spriteset','displayItemMessage','_battlerContainer','contentsOpacity','MAT','ActSeq_Movement_WaitForOpacity','cJTiW','ForceExploited','isRightInputMode','isCancelled','RlWls','FollowTurn','CheckVisibleSwitchNotetags','isAffectedByBreakShield','_motionSpeed','createWeather','isBuffAffected','_floatHeight','pzPhJ','createMiss','undecided','equips','IQjSW','ext','OZgiK','HelpAutoBattle','debuffAdd','dimColor2','notFocusValid','setupMotionBlurImpactFilter','hBEnx','targetSpritePosition','setSvBattlerSprite','tdufL','CPiRt','updateBattleProcess','Game_Battler_performMiss','RnWJL','Game_Temp_requestBalloon','setupOversaturateImpactFilter','autoSelect','numRepeats','getBattlePortraitOffsetX','mauPY','ActSeq_Mechanics_DeathBreak','createDamageSprite','Spriteset_Battle_createBattleField','isIncludedInEnemyWindow','dOGna','IFwKZ','ALL_ACTORS','isSideButtonLayout','VisuMZ_4_CombatLog','ARRAYEVAL','All\x20Enemies','isTpbCharged','RrkGz','displayBuffs','nIJXR','_angleWholeDuration','\x5cI[%1]%2','HalfActions','retreat','ffYOk','eraseState','waitForFloat','ActSeq_Mechanics_EnemyEscape','isAlive','StatusWindowAttachmentBack','SideviewSelect','_inputting','afzNz','DNAQQ','PreStartActionJS','azVGF','yEEVw','UNTITLED','ActSeq_Mechanics_EmulateSkillCost','_allTargets','_effectDuration','zshJP','_fauxAnimationSprites','bPCbN','Pre','selectLast','_indent','FlashDuration','clearElementChanges','hdFUq','ActSeq_Impact_MotionTrailRemove','portraitIndex','ActSeq_Mechanics_StateTurnsChangeTo','BreakShields','top','format','Window_BattleLog_performReflection','isFastForward','adjustPosition_ScaleToFit','IMLez','attackAnimationId2','_skewEasing','drawTextTopAligned','SmoothImage','create','Scene_Battle_startActorSelection','Game_Battler_performDamage','FtSAJ','ActionSequence','damageContainer','onEncounter','displayReflectionPlayBack','sYRbp','setupShockwaveImpactFilter','YYtYe','startMotion','nQiCG','LuQid','Game_Battler_makeSpeed','isAutoBattleCommandAdded','UPlZz','Game_BattlerBase_isStateResist','Parse_Notetags_Targets','RHBFT','vOJwE','BSFBj','Sprite_Enemy_createStateIconSprite','BTestBypass','shouldPopupDamage','criticalDmgFlat','Scene_Battle_createActorCommandWindow','hTeAK','_baseX','ActSeq_Mechanics_BtbGain','TWHXh','GTcBD','ActSeq_BattleLog_AddText','VisuMZ_3_ActSeqImpact','VadSH','nrzlv','svActorVertCells','isMoving','MLADe','shadow','leoZI','startActorSelection','CastAnimation','isBattleCoreTargetScope','dead\x20actors','isAnyoneSpinning','Scene_Map_initializeAfter','bwsPW','value2','ESCAPE','ActSeq_Horror_NoiseRemove','spinBattler','makeActionOrders','isChanting','ActSeq_BattleLog_UI','ActSeq_Camera_Reset','sgBVw','checkTpbInputClose','repeats','updateShadowBattleCore','RGNUL','_createCursorArea','setBattlerBattleCore','performReflection','mWZCn','becomeSTBExploited','Game_Action_numRepeats','setTroopPage','ActSeq_Grid_AnimationJsAtNode','hasStaticSvBattler','CommandVisible','setupWeaponAnimation','ActSeq_Impact_ColorBreak','setFrame','EGARe','canGuard','MessageWait','VisuMZ_2_PartySystem','createEffectActionSet','iFjcH','Window_Options_addGeneralOptions','isAnyProjectilePresent','CmdIconItem','_skewY','BravePoints','PrioritySortActors','_actorCommandWindow','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','removeCurrentAction','ShowPortraitsBorderStyle','critical','displayTpDamage','_forcedHomeY','currentExt','calcWindowHeight','setBattleCameraPoint','battleEnd','Shadow2','map','xfdKq','BindCommonEventKeysForGroup','jumpBattler','addedBuffs','isDrain','updateScale','Game_Map_setupBattleback','getDefeatedEnemies','initVisibility','updateActors','MUSICNOTE','kOhAy','CriticalHitRateJS','fnordAddedStates','iRFIm','move','createCommandNameWindow','kIKaz','isFloating','PostApply%1JS','criticalHitRate','_tpbNeedsPartyCommand','ActSeq_Animation_AttackAnimation','ZhybE','createEnemyWindow','ActSeq_Mechanics_HpMpTp','isSkewing','addAnimationSpriteToContainer','WlHwG','evalDamageFormula','_animationContainer','VisuMZ_2_BattleSystemBTB','AsTarget','return\x200','getHalfActionsPTB','clearForcedGameTroopSettingsBattleCore','onBattleStart','_enemyWindowMode','TpGaugeOffsetX','_commonEventKey','ActSeq_Cutin_WaitForEntrance','adjustWeaponSpriteOffset','startDamagePopup','textSizeEx','isJumping','partyCommandWindowRectDefaultStyle','_battlerKeyCache','BattleManager_checkBattleEnd','createString','_battleCoreForcedElements','_interpreter','updateCommandNameWindow','isSkipPartyCommandWindow','AnchorY','nmPOc','updateAttachmentSprites','_forcing','alive\x20actors\x20not\x20user','XEweY','Actor-%1-%2','endVisualCutin','createJS','Window_BattleLog_popBaseLine','vhAOu','displayCurrentState','traitSet','dead\x20opponents','GTdor','processOk','_canLose','AutoMeleeAoE','VisuMZ_2_BattleSystemCTB','requestMotion','selectSymbol','performShakeFlinch','\x20to\x20%1\x20midbattle.','_buttonText','isForOneBattleCore','wait','ZQhXg','Game_Enemy_transform','createBattleBalloon','ActSeq_Element_NullElements','repositionEnemiesByResolution','findIndex','displayChangedStates','createAutoBattleWindow','BattleManager_onEscapeFailure','ActSeq_Mechanics_AnalyzeWeakness','reSRT','TQjlT','custom','refresh','isOptionsCommandEnabled','Scene_Battle_selectNextCommand','hpHealingFmt','battleAngle','StateIconOffsetX','redraw','WaitForAnimation','findTargetSprite','sPVQN','ShowFailure','yzsuA','skewBattler','isChangingOpacity','_dimmerSprite','applyBattleCoreJS','getDamageStyle','MKlZI','ActSeq_Mechanics_VariablePopup','adjustPosition_1for1','kseiU','tgovs','expTotal','AutoBattleCancel','windowPadding','meetsUsableItemConditions','XpQhn','ConfigManager_makeData','wrXPu','canBattlerMove','SqNnP','blt','isForAnyoneFocusFriends','playBattleVoice','_deathStateApplied','DefaultStyle','ActSeq_Zoom_Reset','partyCommandWindowRect','StatusWindowAttachmentFrontOffsetX','inBbx','_makeFontNameText','WindowWidth','#%1','%1EndBattleJS','Game_BattlerBase_initMembers','Class-%1-%2','anchorY','_homeEasing','performMoveToTargets','BattleStartEvent','active','Scene_Battle_update','_enemySprites','icon','Scene_Battle_createAllWindows','isTickBased','ActSeq_Mechanics_SwapWeapon','isAnyoneFloating','ShakeFlinchPower','YtJZU','XDwRw','VisuMZ_2_HorrorEffects','isPlaytest','HelpFight','disperseDamage','_checkOn','moveToStartPositionBattleCore','VisualCutinEffect','forceMotion','PostDamage%1JS','160NUaLAa','Game_Map_battleback1Name','battleCorePreBattleCommonEvent','RVSCR','Window_BattleLog_displayMiss','CheckVisibleBattleNotetags','dataId','_target','349143viUoDN','_shakeFlinchPower','setupZoomBlurImpactFilter','prototype','FlyNG','etHzl','makeData','fbJaH','isValid','clear','hasBeenDefeatedBefore','_actorWindow','shouldHideBattleEndPopups','ArRedFlat','hElzt','VFKgK','performCounter','isBTB','message1','XzNwB','walk','KkXcQ','ActSeq_Grid_AddTriggerToNode','updateStatusWindowPosition','placeTimeGauge','LIGHT\x20BULB','FUNC','getAttackWeaponAnimationId','Wtbgw','pDbje','_item','PreDamage%1JS','autoBattleAtStart','ALL_ENEMIES','drawItemImageXPStyle','addSkillTypeCommand','displayMpDamage','isActionSelectionValid','addSingleSkillCommands','YQlum','HITTYPE_CERTAIN','process_VisuMZ_BattleCore_CommonEventKeys','RNgYK','includes','VariableID','bgtZR','ActSeq_Element_Clear','_namesCount','WSOGi','_battleCoreNoElement','BattleLogRectJS','qOHke','Window_BattleLog_pushBaseLine','SkillsStatesCore','DamageStyleList','mmp','aLRFp','YqyXr','Window_BattleEnemy_hide','updateBattlerContainer','waitForMovement','Balloon','_skewDuration','processBorderActor','Scene_Battle_startEnemySelection','_motion','IIrAm','createActors','nOZVj','fOuAu','_playTestFastMode','TXgnb','Game_Interpreter_command283','EmergeText','DIbnK','pause','physical','ActSeq_Grid_TeleportToNode','duration','BindCommonEventKeysForObj','name','riCrQ','ActSeq_Horror_TVRemove','tQYgK','isEscapeCommandEnabled','Override','HtTjR','param','_lastHpDamage','ActSeq_Animation_SkillAnimation','LqSim','toLowerCase','isOpponent','FrontViewSelect','sPbZn','_angleDuration','SkillItemBorderCols','Sprite_Actor_updateShadow','BattleManager_checkSubstitute','cancelHpLifeSteal','TextAlign','applyHardDamageCap','3595760nsNsLX','battlelog','freezeTime','_forcedBattlers','VisuMZ_2_BattleSystemATB','_borderPortraitSprite','CalcEscapeRaiseJS','startBattle','MANUAL','sliceMin','endIcon','isActiveTpb','startGrow','isOpen','canUse','isOptionsCommandAdded','NameOffsetY','dLCVT','WaitForProjectile','ArPenFlat','isATB','ALL\x20SKILLS','forceWeaponAnimation','smooth','VisuMZ_0_CoreEngine','hDMuj','performWeaponAnimation','Game_Action_setGuard','useDigitGrouping','commandStyleCheck','WaitForEntrance','createDamageContainer','Game_Action_setSubject','PopupOffsetY','NsyCV','ActionItemMsg','jccZa','jSvYU','isAtbCastingState','thrust','PIxHo','ActSeq_Grid_AnimationIDAtNode','putActiveBattlerOnTop','WaitForZoom','_offsetY','Window_Options_statusText','Window_BattleLog_performEvasion','MJoku','STR','TextFmt','isDisplayEmergedEnemies','OrkbH','_lastAction','applyImmortal','bgType','isEffecting','OyUBy','Game_Battler_clearDamagePopup','Window_BattleLog_clear','clearActiveWeaponSlot','isGrowing','Window_BattleActor_show','JS\x20ESCAPE\x20FAILURE','Actor','ActSeq_Movement_MoveToJsPoint','requestAnimation','drawItemBackground','ActSeq_Grid_MoveTargetsInDirection','Sprite_Actor_updateFrame','Game_Action_isForDeadFriend','_scene','NameAlwaysSelectOnly','OpcNV','context','_damagePopupArray','isHiddenSkill','createActionSequenceProjectile','ActSeq_Movement_Jump','_battlerHue','XIdJL','updateBitmap','commandFight','_baseY','battleFloat','BattleManager_inputtingAction','refreshMotion','StatusWindowSkinFilename','uGuxA','SILENCE','flashDuration','isAnyoneChangingOpacity','Sprite_Battler_startMove','setupDamagePopup','wholeActionSet','ActSeq_Mechanics_WaitForEffect','rowSpacing','2512995WsqOLE','_performActionEnd','Scene_Battle_createPartyCommandWindow','wMBnT','currentValue','ACTOR_OFFSET_X','battleStatusSprite','fillRect','jVJoK','StatusWindowSkinHide','jbEYg','setGuard','members','getSkillIdWithName','time','setup','Game_Battler_onBattleStart','ActSeq_Weapon_NextActiveWeapon','turnOrderChangeOTB','currentAction','setupCriticalEffect','CmdIconAutoBattle','tHlvp','offsetY','isCertainHit','NameAlwaysVisible','ScaleToFit','processTouch','Sprite_Damage_createChildSprite','wumAi','battleMove','command3011','FoNsT','weaponImageId','itemEffectRecoverHp','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','hAQpi','CEYgL','ROGzC','SNfJZ','_targets','_baseLineStack','parallaxScrollY','LJDbj','isGuardWaiting','Window_BattleLog_performCounter','WaitCount2','split','isAutoBattle','UEgaz','updateTargetPosition','isBusy','rFDjT','CriticalHitFlat','Scene_Battle_startPartyCommandSelection','filterArea','DamageDisplay','alive\x20actors','value1','isAnyoneMoving','opacityStart','setText','stopInjectAnimation','onBattleEnd','lrlcV','Scene_Boot_onDatabaseLoaded','CYLiG','_action','ActSeq_Target_RandTarget','AYWol','tdUsn','actorCommandAutoBattle','Parse_Notetags_TraitObjects','JS\x20%1END\x20BATTLE','ActionCenteredName','iuTAm','autoBattleStyle','drawSkillCost','prepareCustomActionSequence','ShowCritical','_onceParallelInterpreters','AedOY','YPxaY','angle','_list','addFightCommand','makeActionListAutoAttack','LdrPc','Window_BattleLog_displayFailure','updateBattleBalloons','isImmortal','Window_BattleLog_displayEvasion','ActSeq_BattleLog_WaitForBattleLog','ActSeq_Set_WholeActionSet','kkKmO','XFiHq','iqRvI','displayRemovedStates','StepDistanceX','isInputting','portraitFilename','Rate','ResetFocus','kHnfN','XPActorCommandLines','Sprite_Battleback_adjustPosition','_damages','MotionType','isBorderStylePortraitShown','save','Game_Interpreter_terminate','addDebuff','negativeHpLifeSteal','onEnemyOk','%1RegenerateJS','JS\x20%1END\x20TURN','startMove','growBattler','ActSeq_Mechanics_Immortal','lukEffectRate','MP_Flat','Mute','createBorderStylePortraitSprite','wKYEh','getCommonEventIdWithName','lqlaZ','aIyeV','extendTroopMembers','uFhEP','PostApplyAsUserJS','StyleON','process_VisuMZ_BattleCore_BaseTroops','logActionList','battleVoices','commandNameWindowDrawText','_createClientArea','skillTypes','Scene_Battle_onEnemyCancel','alterBreakShield','process_VisuMZ_BattleCore_Failsafes','revealNewWeaknesses','qMffp','jsOneForOne','battleCameraData','_battleCoreAddedElements','lastBattleSkill','isMVAnimation','CmdIconOptions','BULB','addExtendedTroopMembers','hitIndex','ActSeq_Grid_AnimationTypeAtNode','removeStatesAuto','transform','process_VisuMZ_BattleCore_Action_Notetags','ActSeq_Animation_CastAnimation','startAction','pauseInjectAnimation','linkSprite','EscapeSuccessJS','ZeGhH','Debuffs','pXOTX','clearFreezeMotionForWeapons','EFFECT_COMMON_EVENT','RjmyJ','MUSIC-NOTE','performTpbActiveCheckSwitch','setBattlerFlip','Game_Action_itemHit','_cacheTextWidth','svBattlerShadowVisible','removeOnceParallelInterpreter','DamageStyles','UfuIN','yNJYi','NameAlwaysHidden','isItem','createStateSprite','zcQJg','max','helpWindowRect','forceEscapeSprite','VisuMZ_1_ElementStatusCore','getLastPluginCommandInterpreter','_growY','setEnemyWindowMode','getBattlePortraitFilename','WaitForExit','all\x20targets','updateFloat','ZszPc','snapForBackground','isDTB','isAppeared','PreApplyJS','JqwVP','Window_BattleLog_performCollapse','ShowPopup','enemy','createAttachedSprites','noSimilarSTypes','setAttack','AUTO\x20BATTLE','UZQoy','Sprite_AnimationMV_updatePosition','turn','_distortionSprite','iRCtr','substitute','duckm','frameCount','getAttackMotionSlot','softDamageCapRate','_helpWindow','Scene_Party','oIWfj','HitRate','AEaBG','svBattlerAnchorY','ActSeq_Target_NextTarget','isMagicSkill','Game_Action_executeHpDamage','lastCommandSymbol','VariableHeal','DEF','pyeRl','BBPSe','MIN_SAFE_INTEGER','escape','isNonSubmenuCancel','ActSeq_ChangeSkew','Sprite_Enemy_update','attack','createPartyCommandWindow','YsfjZ','placeStateIcon','waitCount','AutoAddState','ParseAllNotetags','_flipScaleX','addDamageSprite','rMOpE','Buffs','MAXMP','nDPFR','ActSeq_Impact_MotionBlurTarget','lcnVg','addPartyCommand','uGHVj','selectAllEnemies','preparePartyRefresh','WlIkp','_weaponSprite','preemptive','clearBattlerMotionTrailData','alKge','Game_Action_itemEffectAddAttackState','BattleGridSystem','code','refreshStatusWindow','battlerShadowScaleY','Game_BattlerBase_die','RDvfn','isFTB','_currentActor','createShadowSprite','_enemyNameContainer','setSubject','AsUser','needsActorInputCancel','SkewY','setBattlePortrait','forActor','rmIaj','DistanceY','front\x20base','ConvertCount','visibilityState','ActSeq_Skew_Reset','mnVfY','clearBattleRefreshRequest','Game_Battler_onTurnEnd','LiltJ','setHorrorEffectSettings','AlemR','ActSeq_Target_PrevTarget','Window_BattleLog_update','changeAtbChargeTime','BattlebackScale','initMembersBattleCore','McykI','mKgzl','autoBattleWindowRect','KbXVi','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','Sprite_StateIcon_updateFrame','performMagicEvasion','changeCtbCastTime','registerDefeatedEnemy','targetActionSet','drawActorFace','isSelected','processPostBattleCommonEvents','EscapeSuccess','description','createChildSprite','BattleManager_processAbort','hitRate','FullActions','processEscape','autoBattleStart','PKmsc','_customDamageFormula','_endingBattle','nuCZL','QnGGD','Interrupt','_waitMode','VisuMZ_4_BreakShields','ActSeq_Camera_WaitForCamera','ActSeq_Camera_FocusTarget','moveBattlerDistance','DkXyh','UIftT','VisuMZ_2_WeaponSwapSystem','maxCommands','uHDtc','EeRDQ','PopupPosition','_enemyIDs','startInput','nJMTO','-%1\x20MP','cutinExit','Sprite_Battler_updateMain','createActorCommandWindow','sortEnemies','updatePhase','GroupDigits','actionSplicePoint','isSideView','Sprite_Battler_setHome','FmjMl','aqkXE','ShowCounter','rfcpW','mpHealingFmt','mainSpriteScaleY','magicReflection','_effectsContainer','isWaiting','makeActionList','EZFpA','oVvfr','ActSeq_Zoom_Scale','addBattleGridMoveCommand','autoSelectPriority','JS\x20%1REGENERATE','isForAll','bitmapWidth','damageOffsetX','MaxLines','ATTACK','_updateCursorFilterArea','partyCommandWindowRectXPStyle','checkCacheKey','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','CriticalDmgRate','isForAnyoneFocusOpponents','FlinchDistanceX','_index','battleback1Name','CmdStyle','forceSelect','drawItemImagePortraitStyle','miUME','updateShadowScale','cancelButtonText','_additionalSprites','displayCritical','_targetIndex','IkzwE','itemHit','checkExtendTroopCompatibility','onMoveEnd','Scene_Battle_startActorCommandSelection','FZpcb','DisplayAction','startSpin','itemHeight','canAlterActionCostPTB','NlqlK','showAnimation','CriticalHitMultiplier','_targetBattlerKey','CheckMapBattleEventValid','reverse','LDMyS','kqmst','friendsUnit','allowCollapse','DestinationJS','SHOW_BUTTON','yBDWp','Scene_Battle_logWindowRect','ETHxF','ActSeq_Impact_MotionBlurScreen','Game_Action_executeDamage','updateInterpreter','updateStateSpriteBattleCore','requestMotionRefresh','VfQiL','clearFreezeMotion','delay','isStateAffected','alterCost','bvApl','StyleName','actorId','ActSeq_Impact_ShockwaveEachTargets','onEscapeSuccess','AxCFF','ForceDeath','bpALj','commandSymbol','Sprite_Enemy_setHue','HpGauge','updatePositionBattleCore','pIsOk','_forceAction','igTRW','cancel','performActionEnd','spell','OffsetY','_commandNameWindow','kKnVm','trFEh','CastCertain','ActionAnimation','ZtXXP','QjsUC','addText','ActSeq_Movement_FaceDirection','callNextMethod','showNormalAnimation','actorCommandWindowRect','_drawTextBody','mArIn','silentHomeMove','EscapeFail','ActSeq_Mechanics_RemoveBuffDebuff','BARE\x20HANDS','LVScN','Game_Action_evalDamageFormula','setupIconTextPopup','repositionCancelButtonBorderStyle','turnCount','152487lyGhdB','SRSER','unchanged','Targets1','YGofc','applyGuard','gainHalfActionsPTB','HelpSkillType','vTGbI','drawEnemyName','PpaHH','mainSpriteHeight','_executeHpDamage','battleGrow','QbWdu','drawTextEx','_battleCoreBattleStartEvent','formula','updateWaitMode','pUSzA','_battler','hpRate','applyResultSwitches','_battleLayoutStyle','Ivkon','canSingleOrMultipleSelect','zGGcA','BattleManager_onEscapeSuccess','#ffffff','nJECL','vYgrJ','targetObject','ActSeq_Movement_WaitForScale','AnchorX','_opacityWholeDuration','ActSeq_Animation_BalloonIcon','adjustFlippedBattlefield','JFiKN','displayBattleCoreTransitionErrorMsg','zEtAU','PostEndActionJS','...','StatusWindowAttachmentFront','cmeJX','setHome','PostDamageAsTargetJS','ChargeRate','SvWeaponSolo-%1-%2','BattleManager_isTpbMainPhase','Sprite_Enemy_setBattler','checkBattleEnd','createEnemyNameContainer','ActSeq_Mechanics_TextPopup','onFloatEnd','FRUSTRATION','updateUiContainerPosition','nameY','close','IHcZm','addCustomCommands','stepFlinch','skillItemWindowRectMiddle','Gznwq','ActSeq_Movement_HomeMoveToPoint','statusWindowRectXPStyle','makeSpeed','skills','note','addMeleeReturnActionSet','animation','repeatTargets','arPenFlat','restore','EaXIo','DlRbM','Window_BattleLog_performActionStart','qBxPW','mTHkj','drawIcon','hlWqc','join','onDisabledPartyCommandSelection','isTriggered','requestRefresh','LmMqS','fBlNv','commandNameWindowDrawBackground','arPenRate','Game_BattlerBase_canAttack','isBattleTest','vNWXm','USER-DEFINED\x201','AttachStateOffsetX','NextTurn','_armorPenetration','removeState','Game_Battler_regenerateAll','processRefresh','placeActorName','pagedown','npvUO','actorCommandSingleSkill','WaPid','SDydS','drawItemImage','Sprite_Enemy_updateCollapse','skill','shouldDisperseDamage','cameraClamp','list','applyDamageCaps','initMembers','lNhOL','ywAyj','DigitGrouping','head','ARRAYSTRUCT','createUIContainer','updateShadowPosition','Weapon-%1-%2','removeBuff','MotionAni','Game_Interpreter_PluginCommand','surprise','ShowAddedState','PrioritySortActive','FlinchDuration','onGrowEnd','autoBattle','_handlers','ARtkb','ActionSkillMsg2','mcSfS','_speed','EasingType','TP_Flat','isAnyoneSkewing','_pattern','_enemies','KVZGP','spriteId','needsSelectionBattleCore','_iconIndex','iJUCp','boxWidth','CqKNQ','textColor','rNFIA','Direction','_lastRegenFrameCount','itemEffectRecoverMp','_createCursorSprite','canInput','processTurn','pzJoe','_angleEasing','freezeMotion','performSubstitute','inputting','_forcedBattleLayout','createDistortionSprite','default','TargetLocation','updateVisibility','actionEffect','SvBattlerSolo-%1-%2','nMtzC','fittingHeight','ActSeq_Impact_ShockwavePoint','DeHeT','commandNameWindowCenter','targetsForFriends','setBattleImpactTimeScale','ActSeq_Motion_FreezeMotionFrame','cdgaw','VisuMZ_2_BattleSystemPTB','ActSeq_Grid_TraverseToNode','battlerSmoothImage','ShowCosts','_padding','ActSeq_Cutin_WaitForExit','popBaseLine','vZIGa','loadWindowskin','uWgpb','821270WjYiys','Sprite_Battler_damageOffsetY','getHardDamageCap','_methods','portrait','XLxJX','Window_BattleLog_performSubstitute','AgnSW','updateFrame','mainFontSize','QBlsC','PYMnL','fnordRemovedStates','PortraitScaleBorderStyle','autoMeleeSingleTargetActionSet','_showWeapon','svShadow','createEnemyNames','HqfVs','ENEMY_OFFSET_X','CopyCombatLog','uvfLJ','UTfrS','afLmZ','ActSeq_Mechanics_StbExtraAction','movement','Sprite_Gauge_smoothness','ForceRandom','sVvSu','effects','_commonEventQueue','processDefeat','ActSeq_Mechanics_RemoveState','updateRefresh','Shadow','switchToWeaponType','ActionEnd','Window_BattleActor_hide','isFlipped','VisuMZ_3_ActSeqCamera','BattleManager_startBattle','CmdIconFight','fXtuI','HitFlat','ZZZ','StateIconOffsetY','ARRAYSTR','isBorderPortraitSpriteVisible','BIeuJ','Window_BattleStatus_drawItemImage','Sprite_Battler_isMoving','ziVle','hQekJ','GlwHI','_endBattle','gainFullActionsPTB','DefaultHardCap','inHomePosition','VisuMZ_1_SkillsStatesCore','commandStyle','BattleVictoryJS','hMkVa','ActSeq_Impact_ZoomBlurTargetCenter','indexOf','ActSeq_Horror_NoiseCreate','Scene_Battle_createCancelButton','actions','setupTextPopup','State-%1-%2','jsScaleToFit','updateCustomActionSequence','wKyAQ','ActSeq_Mechanics_BoostPointsChange','battlerSprites','UArHJ','performDamage','getConfigValue','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','Index','OverallFormulaJS','setActiveWeaponSlot','tGhZJ','EnemyOffsetY','BattleLog','makeUniqueNames','adjustPosition','KbsiB','%1StartBattleJS','ENEMY_OFFSET_Y','gainCurrentActionsETB','windowskin','TpbGaugeOffsetX','Game_Action_itemEffectAddNormalState','yDTbU','setFullActionsPTB','createTargetsJS','_effectType','cVolK','IconStypeMagic','createEnemies','uDpBC','Game_Action_testApply','displayActionResults','QCDaL','isForRandomBattleCore','BOFoJ','target','Damage','pFAFX','drawText','RPZkV','LAgvt','drawItemStatus','VisuMZ_3_SideviewBattleUI','attackSkillId','VisuMZ_3_BoostAction','NYWuL','TpbGaugeOffsetY','processAnimationRequests','lYyIu','WaitForEffect','attackTimesAdd','children','DPiip','current\x20target','CxIbe','getColor','yCsDS','moveBattlerHomeDistance','performLifeSteal','lineRect','ExtraSettings','checkShowHideSwitchNotetags','itemLineRect','changePaintOpacity','animationId','setLastPluginCommandInterpreter','arRedFlat','getDualWieldTimes','battleCommands','Window_SkillList_maxCols','xaIyy','updateEffectContainers','CurrentTurn','WaitForCamera','ZqGNG','LSmBd','ActSeq_Mechanics_EmulateSkillEffect','ActSeqImpact','pha','BackColor','MultiTarget','applyForcedGameTroopSettingsBattleCore','weapons','_targetHomeX','Window_ItemList_maxCols','bAhTq','ActSeq_Movement_WaitForSpin','mMpeV','Enable','Wave','mpDamageFmt','xiumT','amZDs','updateMain','isStateResist','rmjPq','ShowRemovedBuff','ZFVzs','Scene_Battle_onActorOk','ActSeq_Inject_AnimationStart','Sprite_Actor_setBattler','battleJump','_svBattlerData','isUndecided','initialize','setHelpWindowItem','setBalloonPose','clearMotion','addActor','MLwvB','_commonEventIDs','parent','iconIndex','ActSeq_Impact_MotionTrailCreate','createHpGaugeSprite','ActSeq_Element_AddElements','AZXnN','hUoei','GetActionSequenceSpecialTarget','Scene_Battle_initialize','getStypeIdWithName','equipSlots','updateAngleCalculations','lqoqw','addAttackCommand','performAction','OltjJ','_buttonKey','Strength','isGuardLifeSteal','yndcU','WqpNF','Game_Battler_forceAction','remove','stateMotionIndex','LAbFO','atbInterrupt','onHomeMoveEnd','getNextSubject','addGeneralOptions','battleProjectiles','qToQn','ActSeq_Inject_AnimationPauseResume','ClearBattleLog','setupHpGaugeSprite','CreateCutinSettings','BattleManager_makeActionOrders','Game_Action_isForOpponent','ActSeq_Mechanics_BoostPointsStoreData','BgkNj','Setting','Text','startHomeMove','YjCoc','PostStartActionJS','Sprite_Battler_damageOffsetX','ftgLS','pZLtn','FocusY','prev\x20target','ActSeq_Mechanics_AddBuffDebuff','HwoRi','fMSOD','gdWtI','setupBattlebackBattleCore','extraPositionY','hue','nGpJY','freezeFrame','requestBalloon','sbIxQ','Scene_Map_initialize','setMoveEasingType','MotionSpeed','addSingleSkillCommand','index','EVAL','onBattleStartOnceParallels','isSkillItemWindowsMiddle','regenerateAll','addBattleCoreAutoBattleStartupCommand','100844mzndoK','EscapeFailureJS','VhPyt','isFightCommandEnabled','ActSeq_Mechanics_ActiveChainInputDisable','left','ActSeq_Animation_BalloonIconSpecific','statusWindowRectBorderStyle','updateShadowVisibility','launchBattle','ActSeq_Mechanics_CtbOrder','updateStateIconSprite','_activeWeaponSlot','executeHpDamage','ScaleY','QNXWc','emulateActionEffect','zhTyf','guard','Game_Troop_setup','placeGauge','isPreviousScene','setItem','setBattleZoom','Game_Interpreter_command301','Wfxyl','_lineHeight','_targetHomeY','ActSeq_Grid_RemoveTriggerFromNode','ActSeq_Motion_MotionType','removedBuffs','VSpIH','faceRect','MwJAU','jguyq','xeGdn','_frame','hdYcy','aoRHX','Angle','DgKVS','displayHpDamage','Game_Battler_onBattleEnd','Sprite_SvEnemy','battleSys','selectPreviousCommand','Game_BattlerBase_eraseState','Scene_Battle_updateBattleProcess','hoWgL','_enemyId','BattleManager_endAction','ParseWeaponNotetags','ActSeq_Movement_Skew','Skills','PsdJv','right','ETRor','Game_Map_battleback2Name','VisuMZ_3_ActSeqProjectiles','Window_BattleLog_displayCurrentState','+%1','Game_BattlerBase_canGuard','_itemWindow','attackStates','alive\x20enemies\x20not\x20user','NameLegacy','isNextSceneBattleTransitionable','closeBattleActorWindow','alterActionCostPTB','requestPointAnimation','removeActor','LifeStealRegExp','updateBattlebackBitmap1','expRate','selectAllActors','SkillItemStandardCols','tOaUq','CriticalDuration','ActSeq_Mechanics_PtbFullHalfAction','createMultiTargetWindows','find','process_VisuMZ_BattleCore_jsFunctions','toUpperCase','some','ActSeq_Element_ForceElements','addSkillCommands','dying','blockWidth','performCastAnimation','createStateIconSprite','SwitchCritical','isMeleeMultiTargetAction','fight','Poyxm','NameFontSize','updateBattlebackBitmap2','canEscape','isDisarmLifeSteal','Window_BattleLog_performAction','createPartyCommandWindowBattleCore','Game_Interpreter_updateWaitMode','Exploited','MpGaugeOffsetY','<CUSTOM\x20ACTION\x20SEQUENCE>','setLastBattleSkill','createAttachmentSprites','updatePadding','xvwEb','isSceneChanging','traitObjects','iqnFx','actionBattleCoreJS','ElcJn','ActSeq_Weapon_ClearActiveWeapon','Game_BattlerBase_refresh','_animationSprites','Game_Troop_expTotal','diOSo','isLearnedSkill','isClicked','isPartyTpbInputtable','isItemCommandEnabled','startActorCommandSelection','Game_Battler_clearMotion','opacity','_drawTextOutline','_preemptive','svBattlerAnchorX','ShakeFlinch','setupChild','_cursorArea','performFlinch','ArPenRate','CheckSkillCommandShowSwitches','lOsED','PreStartTurnJS','yZpyN','WaitCount','DOIYk','destroy','battler','UqtTe','WtypeId','DisablePartyCmd','attachSpritesToDistortionSprite','_shadowScaleX','Slot','visible','deactivate','vOUAW','Spriteset_Battle_updateActors','battleSpriteSkew','UozmU','makeTargets','Window_BattleLog_refresh','aALBW','pRabg','ActSeq_Animation_ItemAnimation','Scene_Battle_stop','PboAS','pageup','CmdIconEscape','_growEasing','gKrav','mainSpriteScaleX','attackAnimationId1','Mechanics','RGKYu','clearBattleCoreData','measureTextWidth','Window_BattleLog_performRecovery','_jumpHeight','oWpuv','ActorCmd','KSrrE','setHelpWindow','WaitComplete','svActorHorzCells','mWThg','ActSeq_Movement_WaitForSkew','statusWindowRect','zwDBY','stepBack','ActSeq_BattleLog_PopBaseLine','setCommonEvent','hitType','ActSeq_Mechanics_AddState','makeTargetSelectionMoreVisible','tJZJf','roAyz','ActSeq_Movement_HomeReset','updateGrow','MeleeDistance','show','ShowMpDmg','ScaleX','AS\x20TARGET','AxseF','battleCamera','initBattlePortrait','waitForNewLine','allowRandomSpeed','_flinched','PostStartTurnJS','XonGJ','maxTp','isPartyCommandWindowDisabled','battlerShadowScaleX','JdizA','ParseEnemyNotetags','6ZaNaHa','_battlePortrait','noise','nCgSw','DTB','_growDuration','performMiss','hidden','USER-DEFINED\x203','_jumpDuration','ActSeq_Grid_ActionAnimationAtNode','xlgsG','ftHah','concat','hxDPB','version','_colorType','applyTargetFilters','helpWindowRectBorderStyle','oStsf','oZYon','Window_BattleEnemy_show','attackMotions','REwkH','onJumpEnd','getItemDamageAmountLabelOriginal','lRBqv','nrDvD','addChildAt','ActSeq_Grid_ClearPassiveStatesFromNode','maxBattleMembers','setValue','addLoadListener','Scene_ItemBase_applyItem','attackStatesRate','visualCutinPortraitFilename','pages','mpDamage','_lastPluginCommandInterpreter','Augdw','addChild','CalcActionSpeedJS','OWboH','addItemCommand','clearAllVisualCutins','IafcN','_targetGrowX','clamp','Game_Action_isForRandom','AutoMeleeSolo','PreApplyAsTargetJS','EeScP','Item-%1-%2','PostStartBattleJS','svBattlerName','compatibilityVisible','performActionStart','_subject','SwitchMissEvade','isBreakStunned','shift','retrieveBattleBalloon','MDF','doesPageHaveOnceParallelStart','invokeMagicReflection','QVnho','isAtbChargingState','ActSeq_Mechanics_StateTurnsChangeBy','startTpbTurn','Window_PartyCommand_initialize','_skillWindow','gainHp','AttackAnimation','MERDb','isCommonEventReserved','Scene_Options','maxLines','playOnceParallelInterpreter','setHandler','Window_BattleLog_displayMpDamage','Sprite_Animation_targetSpritePosition','angleDuration','AutoBattle','battlerName','logWindowRect','oyynv','ActSeq_Animation_ShowAnimationJS','applyCritical','VQdMm','BattleDefeatJS','wtypeId','_battleBalloonSprites','ActSeq_Movement_HomeMoveToJsPoint','zPhlc','regenerateAllBattleCore','Game_Action_isForOne','NJWUW','Game_Action_applyGlobal','WzzVb','glitch','Game_BattlerBase_meetsUsableItemConditions','_makeCursorAlpha','canUseItemCommand','makeDamageValue','_enemyID','chant','updateStateSprite','createCommandVisibleJS','VisuMZ_3_FrontviewBattleUI','DefaultDamageStyle','ActSeq_Animation_BalloonIconRange','createMainSprite','drain','getMenuImage','_updateFilterArea','Game_Party_addActor','evade','VoiceLineType','contents','drawGauge','qTlON','_floatDuration','ActSeq_Animation_WaitForAnimation','hLqnY','select','brlGO','contains','skillId','ShowWeapon','processEnemyModeTouchBattleCore','width','enemyId','exit','_cursorSprite','FrcvN','HGXPJ','SFDEL','front\x20center','PartyCmd','PostEndTurnJS','apply','ActSeq_Mechanics_EmulateGuardEffect','nextActiveWeaponSlot','lNtvz','updatePosition','_lastActor','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','getBattlePortrait','HP_Rate','ChantStyle','nXNDG','updateFlip','timeScale','AnimationID','innerWidth','ActSeq_Impact_BlueRedInvert','displayMiss','Scene_Battle_windowAreaHeight','globalAlpha','CriticalDmgFlat','WdgEN','DistanceAdjust','lufgo','forceAction','actor','onEnemyCancel','MOTIONS','criticalDmgRate','createAnimationContainer','makeSuccess','svBattlerData','isBypassDamageCap','encounterList','qQclH','STYPES','_immortal','wCVia','isSpriteVisible','kQnBa','_executedValue','createDigits','alive\x20opponents','resetResultSwitches','addedStateObjects','extraHeight','FaceDirection','isActing','PostRegenerateJS','statusText','YpFQX','pmASi','_ptbActionCost','portraitHue','CommandWidth','partyCommandWindowRectBorderStyle','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','isCurrentItemEnabled','jFkic','VisuMZ_3_WeaknessDisplay','startJump','_actor','FlNgZ','updateStyleOpacity','clearActiveWeaponSet','commandRemember','ActSeq_BattleLog_WaitForNewLine','isPreviousSceneBattleTransitionable','SfwCJ','power','isOTB','_emptyBitmap','_animation','visualCutinPortraitHue','casting','updateShakeFlinch','onEscapeFailure','ActSeq_Motion_PerformAction','VisuMZ_3_BattleVoices','TfgKQ','RHtsR','ParseClassNotetags','MUSkw','booFq','startFloat','wNsCC','BattleCore','Scene_Battle_commandEscape','startSkew','ActSeq_Horror_GlitchRemove','removeChildFromUiContainer','MAXHP','isForOne','isCommandEnabled','center','replace','_phase','bjveR','IconIndex','float','qpbNM','VBFtO','hjHmU','finishActionSet','clearOnceParallelInterpreters','arRedRate','eolwC','WaitForAngle','_targetOpacity','getSpecificBattlerKeyTarget','missile','_shadowScaleY','charged','battleback2Name','removeBattleBalloon','targetDistortionSpritePosition','_multipliers','aliveMembers','softDamageCap','setupDesaturateImpactFilter','dead','%1EndActionJS','startAttackWeaponAnimation','uZojW','rdLzA','Sprite_Actor_initMembers','_doubleTouch','Settings','_reflectionTarget','addCommand','PostEndBattleJS','textBaseline','22664364BgGeSw','Scene_Battle_onActorCancel','randomTargets','JS\x20%1START\x20ACTION','hpAffected','mitiU','getItemDamageAmountTextBattleCore','bottom','_damageContainer','drawItem','baQvh','Scene_Battle_selectPreviousCommand','deselect','collapse','WRjpO','DistanceX','BattleSystemCTB','applyData','FJkJQ','isMeleeSingleTargetAction','77QxijxV','isSubjectValidForAnyoneSelect','updateAction','Sprite_Actor_updateBitmap','ActionEffect','tpbCommandFight','Game_Action_executeMpDamage','createActorCommandWindowBattleCore','swing','emulateAction','isAnyoneInjectAniPrepping','BattleManager_startTurn','border','chantStyle','dcWRE','setWaitMode','updateBorderStyle','setActorHome','cEoUf','createTroopNote','VisuMZ_2_BattleSystemFTB','Scene_Battle_updateStatusWindowPosition','OhrrH','updateBorderSprite','makeTargetSprites','missle','CriticalHitRate','ActSeq_Mechanics_OtbOrder','fhDhg','yJiPv','battleZoom','Elements','PreEndActionJS','Window_BattleLog_performDamage','OTOpf','CriticalColor','NameOffsetX','attackAnimationIdSlot','jsScaleDown','Sprite_Actor_createStateSprite','setBattlerFacePoint','loadEnemy','changeBattlerOpacity','_text','Sprite_Enemy_initVisibility','targetBattlerContainerOpacity','StepDuration','iconText','ActSeq_Impact_TimeStop','addBuff','applyItem','DualWield','MUSIC\x20NOTE','drawItemStyleIconText','onAngleEnd','PppiD','isNextScene','canAddSkillCommand','BattleManager_processVictory','JSXVa','focus','clearRect','hOvfu','ActionSkillMsg1','hWzzG','isNegativeLifeSteal','resize','ArRedRate','ShowReflect','setupBattleback','CvWQq','_targetGrowY','clearResult','counterAttack','endBattle','VisuMZ_3_VisualCutinEffect','vAoeo','battleSkew','executeDamage','Game_Action_isForAliveFriend','ActSeq_Projectile_Picture','onActorCancel','OgdYg','ActSeq_Grid_AddPassiveStatesToNode','motionIdle','animationBaseDelay','makeDeepCopy','CalcEscapeRatioJS','parse','motionSpeed','pointY','alterPriority','Rofzo','options','getInputButtonString','createCancelButton','WaitForSkew','ARRAYNUM','HEART','_tempEquipCheck','JS\x20%1APPLY\x20%2','_flashDuration','StartTurnWait','startEnemySelection','showHelpWindow','ShowActorGauge','removeBuffsAuto','setBattlerMotionTrailData','LHeJo','DigitGroupingDamageSprites','gradientFillRect','PtwSU','isDead','isSceneBattle','_back2Sprite','_homeX','Sprite_Enemy_updateStateSprite','changeWeather','WnJtY','makeCommandList','bind','ShowButton','Window_BattleLog_displayTpDamage','not\x20focus','xgxyM','_injectAnimationSprite','reserveCommonEvent','drawItemImageListStyle','alive\x20friends\x20not\x20target','_actionBattlers','call','update','VisuMZ_1_MainMenuCore','_escapeRatio','NWIjA','unyhg','value','makeHpDamageText','ActSeq_Cutin_EndVisualCutinEffectAll','mainSprite','scope','alSlO','gaugeLineHeight','moveBattlerHomeToPoint','gWuBN','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','testApply','_enemy','nNvYD','gQDmZ','yLQGJ','Game_Action_isForAll','battleLayoutStyle','nROiV','deathStateId','uiInputPosition','QbPOt','isSpriteVS8dir','actor%1-portrait','ActSeq_Mechanics_BreakShieldReset','Spriteset_Battle_createLowerLayer','cancelMpLifeSteal','IQjre','CYovp','_statusType','motionType','skillWindowRect','VisuMZ_2_BattleGridSystem','IconStypeNorm','TYnPI','LOVE','canGuardBattleCore','position','push','updateJump','removeChild','Window_ActorCommand_setup','sHaMJ','Zisqb','customDamageFormula','addEscapeCommand','_forActor','nFSZr','yNsXu','getBattlePortraitOffsetY','createAllWindows','gufxl'];_0x5935=function(){return _0x17ea9c;};return _0x5935();}Game_BattleOnceParallelInterpreter[_0x12d94d(0x4e9)]=Object[_0x12d94d(0x3d9)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter['prototype'][_0x12d94d(0xc50)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x12d94d(0x4e9)][_0x12d94d(0x9e4)]=function(_0x3f477e){const _0x2b30e7=_0x12d94d,_0x25b1c5=$dataCommonEvents[_0x3f477e];if(_0x25b1c5){if(_0x2b30e7(0x77b)==='YGofc')this['setup'](_0x25b1c5['list'],0x0);else return 0x0;}else{if(_0x2b30e7(0x1c7)!==_0x2b30e7(0xca2))this[_0x2b30e7(0xc72)]();else return;}},Game_BattleOnceParallelInterpreter['prototype'][_0x12d94d(0xc72)]=function(){const _0x13c02c=_0x12d94d;if(!SceneManager[_0x13c02c(0xb92)]())return;SceneManager['_scene'][_0x13c02c(0x658)](this),Game_Interpreter[_0x13c02c(0x4e9)][_0x13c02c(0xc72)][_0x13c02c(0xba3)](this);},Game_BattleOnceParallelInterpreter[_0x12d94d(0x4e9)][_0x12d94d(0x41c)]=function(_0x46bb7a){const _0x2eb2f2=_0x12d94d;_0x46bb7a?this['setup'](_0x46bb7a[_0x2eb2f2(0x7e4)],0x0):this['terminate']();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x9fa)]=function(){const _0x4d9dff=_0x12d94d;return VisuMZ[_0x4d9dff(0xadf)][_0x4d9dff(0xb08)][_0x4d9dff(0xa88)][_0x4d9dff(0x9bb)];},VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection']=Scene_Battle['prototype']['startPartyCommandSelection'],Scene_Battle[_0x12d94d(0x4e9)]['startPartyCommandSelection']=function(){const _0x6539b4=_0x12d94d;if(this[_0x6539b4(0x9fa)]()){if('cEoUf'!==_0x6539b4(0xb33)){const _0x15943f=_0xc3b5e0[_0x6539b4(0x592)]['_statusWindow'];if(_0x15943f)_0x15943f[_0x6539b4(0x69d)](_0x5a4d73,this[_0x6539b4(0x78b)]);}else this[_0x6539b4(0x7c8)]();}else _0x6539b4(0x978)===_0x6539b4(0x978)?VisuMZ[_0x6539b4(0xadf)][_0x6539b4(0x5e2)][_0x6539b4(0xba3)](this):(_0x35f103['clearForcedGameTroopSettingsBattleCore'](),_0x571c21['applyForcedGameTroopSettingsBattleCore'](_0x30256e),_0x1d0ef7[_0x6539b4(0xadf)]['Game_Troop_setup'][_0x6539b4(0xba3)](this,_0x1f3bfd),this['extendTroopMembers']());},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x7c8)]=function(){const _0x1f37cf=_0x12d94d;if(BattleManager[_0x1f37cf(0x66d)]())this['selectNextCommand']();else BattleManager[_0x1f37cf(0xcda)]()&&('KKvRF'!==_0x1f37cf(0x17f)?VisuMZ['BattleCore'][_0x1f37cf(0x5e2)]['call'](this):this['drawItemStyleIcon'](_0x113d1d));},VisuMZ['BattleCore'][_0x12d94d(0x8f)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x59d)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x59d)]=function(){const _0x2e59fb=_0x12d94d;BattleManager[_0x2e59fb(0xcda)]()?_0x2e59fb(0x9c1)!=='vOUAW'?_0x14f20f[_0x2e59fb(0xbce)](new _0x3ba576(_0x2468e8)):(this['tpbCommandFight'](),this['startActorCommandSelection']()):VisuMZ[_0x2e59fb(0xadf)][_0x2e59fb(0x8f)]['call'](this);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xb26)]=function(){const _0x2575d4=_0x12d94d;if(!VisuMZ[_0x2575d4(0xadf)][_0x2575d4(0xce5)])return;if(Imported[_0x2575d4(0x483)]&&BattleManager[_0x2575d4(0x270)]())return;const _0x708396=$gameParty[_0x2575d4(0xafe)]()[_0x2575d4(0xd0e)](_0x4e47e1=>_0x4e47e1['isTpbCharged']()&&_0x4e47e1[_0x2575d4(0x80f)]());BattleManager[_0x2575d4(0x6b5)]=_0x708396[0x0]||null,BattleManager[_0x2575d4(0x6b5)]&&BattleManager[_0x2575d4(0x6b5)][_0x2575d4(0xf2)](_0x2575d4(0x815));},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xae0)]=Scene_Battle['prototype'][_0x12d94d(0xbdc)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xbdc)]=function(){const _0x194392=_0x12d94d;VisuMZ[_0x194392(0xadf)][_0x194392(0xae0)][_0x194392(0xba3)](this);if(!BattleManager[_0x194392(0xcda)]())BattleManager[_0x194392(0x6b5)]=null;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x3f3)]=Scene_Battle['prototype'][_0x12d94d(0x6fc)],Scene_Battle[_0x12d94d(0x4e9)]['createActorCommandWindow']=function(){const _0x881ab8=_0x12d94d;VisuMZ[_0x881ab8(0xadf)][_0x881ab8(0x3f3)]['call'](this),this[_0x881ab8(0xb28)]();},Scene_Battle['prototype'][_0x12d94d(0xb28)]=function(){const _0x40acd3=_0x12d94d,_0x32ffab=this['_actorCommandWindow'];_0x32ffab['setHandler'](_0x40acd3(0x691),this[_0x40acd3(0x357)][_0x40acd3(0xb99)](this)),_0x32ffab[_0x40acd3(0xa4c)]('autoBattle',this[_0x40acd3(0x5f3)]['bind'](this)),_0x32ffab[_0x40acd3(0xa4c)](_0x40acd3(0xc70),this[_0x40acd3(0x7dc)][_0x40acd3(0xb99)](this));if(BattleManager['isTpb']()){if(this['isPartyCommandWindowDisabled']())delete _0x32ffab[_0x40acd3(0x7f8)][_0x40acd3(0x75c)];else{if(_0x40acd3(0x283)===_0x40acd3(0x283))_0x32ffab[_0x40acd3(0xa4c)](_0x40acd3(0x75c),this[_0x40acd3(0x159)][_0x40acd3(0xb99)](this));else return this[_0x40acd3(0xae9)]===_0x40acd3(0x497)?this[_0x40acd3(0xcfc)]():_0x490beb[_0x40acd3(0xadf)][_0x40acd3(0x7a7)][_0x40acd3(0xba3)](this);}}},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x357)]=function(){const _0x13a72a=_0x12d94d;this[_0x13a72a(0xbdc)]();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x5f3)]=function(){const _0x311d6d=_0x12d94d;BattleManager['actor']()[_0x311d6d(0x330)](),BattleManager['finishActorInput'](),BattleManager['selectNextActor'](),this[_0x311d6d(0x17a)]();},Scene_Battle[_0x12d94d(0x4e9)]['actorCommandSingleSkill']=function(){const _0x3809bb=_0x12d94d,_0x117a20=BattleManager[_0x3809bb(0x17e)](),_0x486463=this[_0x3809bb(0x42f)]['currentExt']();_0x117a20[_0x3809bb(0xc7d)](_0x486463),BattleManager[_0x3809bb(0xaa2)]()[_0x3809bb(0x994)]($dataSkills[_0x486463]),this[_0x3809bb(0x1c2)]();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x159)]=function(){const _0x5c9cc5=_0x12d94d;if(this['tpbActorSwitchConditionsMet']()){if(_0x5c9cc5(0x945)===_0x5c9cc5(0x945))this[_0x5c9cc5(0x653)]();else{const _0x3abd0c=_0x160eef(_0x26f827['$1']);return[_0x77f6f7['actor'](_0x3abd0c)];}}else{if(_0x5c9cc5(0xcc8)==='llzki')this[_0x5c9cc5(0x313)]();else{if(!this[_0x5c9cc5(0xac6)])return;const _0x34ae96=this[_0x5c9cc5(0xac6)][_0x5c9cc5(0x8bb)]();for(const _0x15f92c of _0x34ae96){this['makeBattleCommand'](_0x15f92c[_0x5c9cc5(0x97e)]()['trim']());}}}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xce5)]=![],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x1d8)]=function(){const _0x467690=_0x12d94d;if(Imported[_0x467690(0x483)]&&BattleManager[_0x467690(0x270)]())return![];else{if('Lqsbb'==='LXRGN'){if(!_0x4af415[_0x467690(0xb92)]())return;if(!_0x240851[_0x467690(0x857)])return;_0x352458['ConvertParams'](_0x5c7749,_0x4c8581);const _0x3d526a=_0x4ee105[_0x467690(0x664)](),_0x28d935=_0x54dd3a[_0x467690(0xaf4)];if(!_0x3d526a)return;_0x46a975[_0x467690(0xc6b)](0x0,_0x39122b['Duration'],_0x3a5127[_0x467690(0x7fd)]);if(_0x28d935)_0x3d526a[_0x467690(0xb30)](_0x467690(0x49c));}else{if(!VisuMZ[_0x467690(0xadf)][_0x467690(0xce5)])return![];const _0x57a87b=$gameParty[_0x467690(0xafe)]()['filter'](_0x1cda3c=>_0x1cda3c[_0x467690(0x3a9)]()&&_0x1cda3c[_0x467690(0x80f)]());return _0x57a87b[_0x467690(0x29c)]>0x0&&BattleManager[_0x467690(0xaa2)]()!==_0x57a87b[_0x57a87b[_0x467690(0x29c)]-0x1];}}},Scene_Battle['prototype'][_0x12d94d(0x653)]=function(){const _0x2b4c4b=_0x12d94d,_0x4a9936=BattleManager[_0x2b4c4b(0xaa2)](),_0xf75e7a=_0x4a9936[_0x2b4c4b(0x9b8)]();if(_0xf75e7a)_0xf75e7a[_0x2b4c4b(0x9e2)]();const _0x285bda=$gameParty[_0x2b4c4b(0xafe)]()[_0x2b4c4b(0xd0e)](_0x2d3e25=>_0x2d3e25[_0x2b4c4b(0x3a9)]()&&_0x2d3e25['canInput']()),_0x307670=_0x285bda['indexOf'](_0x4a9936),_0x5bb923=_0x285bda[_0x307670+0x1];BattleManager[_0x2b4c4b(0x6b5)]=_0x5bb923||null;if(_0x5bb923)_0x5bb923[_0x2b4c4b(0xf2)]('inputting');_0x4a9936[_0x2b4c4b(0xf2)](_0x2b4c4b(0x386)),this['changeInputWindow']();},Scene_Battle['prototype'][_0x12d94d(0x313)]=function(){const _0x49cd6d=_0x12d94d;this[_0x49cd6d(0xb3)][_0x49cd6d(0x5bb)](),this[_0x49cd6d(0x42f)][_0x49cd6d(0x7b0)]();if(!VisuMZ[_0x49cd6d(0xadf)][_0x49cd6d(0xce5)])return;if(Imported[_0x49cd6d(0x483)]&&BattleManager[_0x49cd6d(0x270)]())return;if(BattleManager[_0x49cd6d(0x6b5)]){BattleManager[_0x49cd6d(0x6b5)][_0x49cd6d(0xf2)]('undecided');const _0x471e9f=BattleManager[_0x49cd6d(0x6b5)][_0x49cd6d(0x9b8)]();if(_0x471e9f)_0x471e9f['stepBack']();}BattleManager['_currentActor']=null;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x183)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x1b7)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x1b7)]=function(){const _0x2e9bde=_0x12d94d;VisuMZ[_0x2e9bde(0xadf)]['Scene_Battle_createHelpWindow']['call'](this),this[_0x2e9bde(0x362)]();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x362)]=function(){const _0x520576=_0x12d94d;this[_0x520576(0x42f)][_0x520576(0x9db)](this[_0x520576(0x682)]),this[_0x520576(0xb3)][_0x520576(0x9db)](this['_helpWindow']);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xbb9)]=function(){const _0x52918d=_0x12d94d;if($gameTemp[_0x52918d(0x816)]!==undefined)return $gameTemp[_0x52918d(0x816)];if(this[_0x52918d(0x78e)])return'KTkVc'!==_0x52918d(0x1ac)?this[_0x52918d(0x879)]()[_0x52918d(0x97f)](_0x55ae8e=>_0x55ae8e['isFloating']()):this[_0x52918d(0x78e)];return this[_0x52918d(0x78e)]=VisuMZ[_0x52918d(0xadf)][_0x52918d(0xb08)][_0x52918d(0x160)]['Style']['toLowerCase']()[_0x52918d(0xc39)](),this[_0x52918d(0x78e)]==='sideview_ui'&&!Imported['VisuMZ_3_SideviewBattleUI']&&(_0x52918d(0x80a)===_0x52918d(0xf9)?(this[_0x52918d(0xf5)]['push'](_0x52918d(0x48a)),this['_logWindow'][_0x52918d(0xbce)](_0x52918d(0x4ef))):this[_0x52918d(0x78e)]=_0x52918d(0x818)),this['_battleLayoutStyle']===_0x52918d(0x340)&&!Imported[_0x52918d(0xa6a)]&&(this['_battleLayoutStyle']=_0x52918d(0x818)),this[_0x52918d(0x78e)];},VisuMZ[_0x12d94d(0xadf)]['Scene_Battle_windowAreaHeight']=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xcea)],Scene_Battle[_0x12d94d(0x4e9)]['windowAreaHeight']=function(){const _0x1f0997=_0x12d94d,_0x4cfe1f=this[_0x1f0997(0xbb9)]();switch(_0x4cfe1f){case'list':return this['calcWindowHeight'](Math[_0x1f0997(0x660)](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ[_0x1f0997(0xadf)][_0x1f0997(0xa9b)][_0x1f0997(0xba3)](this);break;}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xcfa)]=Scene_Battle[_0x12d94d(0x4e9)]['helpWindowRect'],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x661)]=function(){const _0x412571=_0x12d94d,_0x100b63=this[_0x412571(0xbb9)]();switch(_0x100b63){case _0x412571(0xb2d):return this[_0x412571(0xa10)]();break;case _0x412571(0x818):case _0x412571(0x7e4):case'xp':case'portrait':default:return VisuMZ['BattleCore']['Scene_Battle_helpWindowRect'][_0x412571(0xba3)](this);break;}},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x9e0)]=function(){const _0x50d708=_0x12d94d,_0x108244=this[_0x50d708(0xbb9)]();switch(_0x108244){case'xp':case _0x50d708(0x834):return this[_0x50d708(0x7b7)]();break;case'border':return this['statusWindowRectBorderStyle']();break;case _0x50d708(0x818):case _0x50d708(0x7e4):default:return this[_0x50d708(0xc2f)]();break;}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xbe6)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x4bd)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x4bd)]=function(){const _0x3cc5cd=_0x12d94d,_0x53d72b=this['battleLayoutStyle']();switch(_0x53d72b){case'xp':case _0x3cc5cd(0x834):return this[_0x3cc5cd(0x719)]();break;case _0x3cc5cd(0xb2d):return this[_0x3cc5cd(0xac0)]();case _0x3cc5cd(0x818):case'list':default:return this[_0x3cc5cd(0x469)]();break;}},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x469)]=function(){const _0x16c2c3=_0x12d94d,_0x5dac2a=VisuMZ[_0x16c2c3(0xadf)][_0x16c2c3(0xb08)][_0x16c2c3(0x160)],_0xe763ff=_0x5dac2a[_0x16c2c3(0xabf)]||0xc0,_0x653f54=this[_0x16c2c3(0xcea)](),_0x212823=this[_0x16c2c3(0x37a)]()?Graphics[_0x16c2c3(0x807)]-_0xe763ff:0x0,_0x35012f=Graphics['boxHeight']-_0x653f54;return new Rectangle(_0x212823,_0x35012f,_0xe763ff,_0x653f54);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x76b)]=function(){const _0x269300=_0x12d94d;return this[_0x269300(0x4bd)]();},VisuMZ[_0x12d94d(0xadf)]['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x4fd)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x4fd)]=function(){const _0x578872=_0x12d94d,_0x14bc97=this[_0x578872(0xbb9)]();switch(_0x14bc97){case'xp':case'portrait':case _0x578872(0xb2d):break;case _0x578872(0x818):case _0x578872(0x7e4):default:VisuMZ[_0x578872(0xadf)][_0x578872(0xb36)][_0x578872(0xba3)](this);break;}},VisuMZ['BattleCore'][_0x12d94d(0x3da)]=Scene_Battle[_0x12d94d(0x4e9)]['startActorSelection'],Scene_Battle['prototype'][_0x12d94d(0x402)]=function(){const _0x470ab4=_0x12d94d;VisuMZ[_0x470ab4(0xadf)][_0x470ab4(0x3da)]['call'](this),this[_0x470ab4(0x9e7)]();},VisuMZ['BattleCore'][_0x12d94d(0x526)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xb88)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xb88)]=function(){const _0x2c61f8=_0x12d94d;VisuMZ['BattleCore'][_0x2c61f8(0x526)][_0x2c61f8(0xba3)](this),this['_enemyWindow'][_0x2c61f8(0x39a)](),this[_0x2c61f8(0x9e7)]();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x9e7)]=function(){const _0x3fa1b7=_0x12d94d,_0x75a872=this[_0x3fa1b7(0xbb9)]();['xp','portrait',_0x3fa1b7(0xb2d)][_0x3fa1b7(0x511)](_0x75a872)&&this[_0x3fa1b7(0x42f)][_0x3fa1b7(0x7b0)](),(_0x75a872===_0x3fa1b7(0xb2d)||this['isSkillItemWindowsMiddle']())&&(this[_0x3fa1b7(0xa44)][_0x3fa1b7(0x7b0)](),this[_0x3fa1b7(0x96a)][_0x3fa1b7(0x7b0)]());},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x8d9)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xc7b)],Scene_Battle['prototype'][_0x12d94d(0xc7b)]=function(){const _0x3d534a=_0x12d94d;VisuMZ[_0x3d534a(0xadf)][_0x3d534a(0x8d9)]['call'](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x692)]=function(){const _0xdcbb8f=_0x12d94d;return[_0xdcbb8f(0x695),_0xdcbb8f(0x93e),_0xdcbb8f(0xc70)]['includes'](this['_actorCommandWindow'][_0xdcbb8f(0xc43)]());},VisuMZ['BattleCore'][_0x12d94d(0xb0e)]=Scene_Battle[_0x12d94d(0x4e9)]['onActorCancel'],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xb72)]=function(){const _0x53d61c=_0x12d94d;if(this[_0x53d61c(0x692)]()){if(_0x53d61c(0x4b6)==='xlyaG'){const _0x2cfd8d=this['isMVAnimation'](_0x73d3b2),_0x16086a=new(_0x2cfd8d?_0x2ac97a:_0x5275c0)(),_0x53c595=this[_0x53d61c(0xb39)](_0x7769da);this[_0x53d61c(0x315)](_0x284493[0x0])&&(_0x28aa84=!_0x37537e),_0x16086a[_0x53d61c(0x323)]=_0x37b712,_0x16086a[_0x53d61c(0x5bb)](_0x53c595,_0x1bfa7f,_0x4cf0af,_0x343685),this[_0x53d61c(0x457)](_0x16086a);}else this['_statusWindow']['show'](),this[_0x53d61c(0x4f1)][_0x53d61c(0x165)](),this[_0x53d61c(0x42f)][_0x53d61c(0x288)]();}else{if(_0x53d61c(0xd0b)!=='oYQZV')VisuMZ[_0x53d61c(0xadf)]['Scene_Battle_onActorCancel'][_0x53d61c(0xba3)](this);else return _0x1ffd0f[_0x53d61c(0xadf)][_0x53d61c(0x944)]['call'](this,_0x3b8137);}this[_0x53d61c(0xcdd)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xc64)]=Scene_Battle['prototype'][_0x12d94d(0x61d)],Scene_Battle['prototype'][_0x12d94d(0x61d)]=function(){const _0x39bd64=_0x12d94d,_0x72a1ca=BattleManager['inputtingAction']();_0x72a1ca['setTargetBattlerKey'](this[_0x39bd64(0x14e)][_0x39bd64(0x673)]()),this[_0x39bd64(0x14e)][_0x39bd64(0x96f)](),VisuMZ[_0x39bd64(0xadf)][_0x39bd64(0xc64)][_0x39bd64(0xba3)](this),this[_0x39bd64(0xc32)]();},VisuMZ[_0x12d94d(0xadf)]['Scene_Battle_onEnemyCancel']=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xaa3)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xaa3)]=function(){const _0x53bbb9=_0x12d94d;this['isNonSubmenuCancel']()?(this[_0x53bbb9(0xcbc)]['show'](),this['_enemyWindow']['hide'](),this[_0x53bbb9(0x42f)][_0x53bbb9(0x288)]()):_0x53bbb9(0x8eb)==='jiFaX'?_0x5965b6?this[_0x53bbb9(0x2cb)]():this[_0x53bbb9(0xc4a)]():VisuMZ[_0x53bbb9(0xadf)][_0x53bbb9(0x635)][_0x53bbb9(0xba3)](this),this[_0x53bbb9(0xcdd)](),this[_0x53bbb9(0x14e)][_0x53bbb9(0x96f)]();},Scene_Battle[_0x12d94d(0x4e9)]['okTargetSelectionVisibility']=function(){const _0x224180=_0x12d94d,_0x3f9a0f=this[_0x224180(0xbb9)]();(_0x3f9a0f===_0x224180(0xb2d)||this[_0x224180(0x929)]())&&(this[_0x224180(0xa44)][_0x224180(0x19f)](),this[_0x224180(0xa44)]['active']&&this[_0x224180(0xa44)][_0x224180(0x9ed)](),this['_itemWindow'][_0x224180(0x19f)](),this[_0x224180(0x96a)][_0x224180(0x4ca)]&&this[_0x224180(0x96a)][_0x224180(0x9ed)]());},Scene_Battle[_0x12d94d(0x4e9)]['cancelTargetSelectionVisibility']=function(){const _0x4e7492=_0x12d94d,_0x35d5b2=this[_0x4e7492(0xbb9)]();if(['xp',_0x4e7492(0x834),_0x4e7492(0xb2d)][_0x4e7492(0x511)](_0x35d5b2)){if(_0x4e7492(0x197)!==_0x4e7492(0x197)){if(_0x178d7e&&_0x410df9['note'][_0x4e7492(0x214)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x192bc6=this[_0x4e7492(0x73c)]()['aliveMembers']();if(_0x192bc6[_0x4e7492(0x29c)]===0x1&&_0x192bc6[0x0]===this)return![];}return _0x753d1c['BattleCore'][_0x4e7492(0xa62)][_0x4e7492(0xba3)](this,_0xeaf3dc);}else this['_actorCommandWindow']['open']();}this[_0x4e7492(0xc32)]();},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xc2f)]=function(){const _0x12f698=_0x12d94d,_0x1c054c=VisuMZ[_0x12f698(0xadf)][_0x12f698(0xb08)][_0x12f698(0x160)],_0x15421c=Window_BattleStatus[_0x12f698(0x4e9)][_0x12f698(0xab6)](),_0x917a9=Graphics[_0x12f698(0x807)]-(_0x1c054c['CommandWidth']||0xc0),_0x490884=this['windowAreaHeight']()+_0x15421c,_0x348fa3=this[_0x12f698(0x37a)]()?0x0:Graphics[_0x12f698(0x807)]-_0x917a9,_0x49bad5=Graphics[_0x12f698(0xf6)]-_0x490884+_0x15421c;return new Rectangle(_0x348fa3,_0x49bad5,_0x917a9,_0x490884);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x7b7)]=function(){const _0x5eb1f9=_0x12d94d,_0x3f46d9=Window_BattleStatus[_0x5eb1f9(0x4e9)][_0x5eb1f9(0xab6)](),_0x2f5c4d=Graphics[_0x5eb1f9(0x807)],_0x4555c1=this[_0x5eb1f9(0xcea)]()+_0x3f46d9,_0x1f0d44=0x0,_0x3765f8=Graphics[_0x5eb1f9(0xf6)]-_0x4555c1+_0x3f46d9;return new Rectangle(_0x1f0d44,_0x3765f8,_0x2f5c4d,_0x4555c1);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x719)]=function(){const _0x165ac2=_0x12d94d,_0x4813fb=Graphics[_0x165ac2(0x807)]/0x2,_0x5efa9b=this[_0x165ac2(0x437)](VisuMZ['BattleCore']['Settings'][_0x165ac2(0x160)][_0x165ac2(0x614)],!![]),_0x17ee28=Math[_0x165ac2(0x1d0)]((Graphics['boxWidth']-_0x4813fb)/0x2),_0x2fa14c=Graphics[_0x165ac2(0xf6)]-_0x5efa9b-this[_0x165ac2(0x7b7)]()[_0x165ac2(0xd17)];return new Rectangle(_0x17ee28,_0x2fa14c,_0x4813fb,_0x5efa9b);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xa10)]=function(){const _0x59911b=_0x12d94d,_0x904ed4=Graphics[_0x59911b(0xa80)],_0x48f12d=Math['round']((Graphics['boxWidth']-_0x904ed4)/0x2),_0x47f2e4=this[_0x59911b(0xe3)](),_0x54bed5=(Graphics[_0x59911b(0xd17)]-Graphics[_0x59911b(0xf6)])/-0x2;return new Rectangle(_0x48f12d,_0x54bed5,_0x904ed4,_0x47f2e4);},Scene_Battle[_0x12d94d(0x4e9)]['statusWindowRectBorderStyle']=function(){const _0x34cf15=_0x12d94d,_0x5a7c2d=Graphics[_0x34cf15(0xa80)],_0xa93604=Math['round']((Graphics['boxWidth']-_0x5a7c2d)/0x2),_0x3a2061=this[_0x34cf15(0x437)](0x4,!![]),_0x4a30ae=Graphics['boxHeight']-_0x3a2061+(Graphics[_0x34cf15(0xd17)]-Graphics['boxHeight'])/0x2;return new Rectangle(_0xa93604,_0x4a30ae,_0x5a7c2d,_0x3a2061);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xac0)]=function(){const _0x57dacc=_0x12d94d,_0x124de6=Math[_0x57dacc(0x28f)](Graphics[_0x57dacc(0xa80)]/0x3),_0x21b8b0=this[_0x57dacc(0x37a)]()?(Graphics['width']+Graphics['boxWidth'])/0x2-_0x124de6:(Graphics[_0x57dacc(0xa80)]-Graphics[_0x57dacc(0x807)])/-0x2,_0x4cefed=this['helpWindowRectBorderStyle'](),_0x33b10f=_0x4cefed['y']+_0x4cefed[_0x57dacc(0xd17)],_0x4467b1=this[_0x57dacc(0x933)](),_0x2b782c=_0x4467b1['y']-_0x33b10f;return new Rectangle(_0x21b8b0,_0x33b10f,_0x124de6,_0x2b782c);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x2d5)]=function(){const _0x2fdb4e=_0x12d94d,_0x2e634e=Math[_0x2fdb4e(0xbeb)](Graphics[_0x2fdb4e(0xa80)]/0x3),_0x5c47c4=Math[_0x2fdb4e(0x1d0)]((Graphics[_0x2fdb4e(0x807)]-_0x2e634e)/0x2),_0x31c503=this[_0x2fdb4e(0xac0)](),_0x5d3767=_0x31c503['y'],_0x472098=_0x31c503['height'];return new Rectangle(_0x5c47c4,_0x5d3767,_0x2e634e,_0x472098);},Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x775)]=function(){const _0x4a8c7e=_0x12d94d;this[_0x4a8c7e(0x1f6)]['y']=this[_0x4a8c7e(0x682)]['y']+this[_0x4a8c7e(0x682)][_0x4a8c7e(0xd17)];if(this['isRightInputMode']())this[_0x4a8c7e(0xbb9)]()===_0x4a8c7e(0xb2d)?_0x4a8c7e(0x5d2)===_0x4a8c7e(0x361)?_0x33d327[_0x4a8c7e(0x372)]['processAnimationRequests']():this['_cancelButton']['x']=0x8:this[_0x4a8c7e(0x1f6)]['x']=-this[_0x4a8c7e(0x1f6)][_0x4a8c7e(0xa80)]-0x4;else{if(_0x4a8c7e(0x918)!==_0x4a8c7e(0x918)){if(!_0xd95573[_0x4a8c7e(0xb92)]())return;const _0xed5b61=_0x39b392[_0x4a8c7e(0xf5)];_0xed5b61['pushBaseLine']();}else this[_0x4a8c7e(0x1f6)]['x']=Graphics[_0x4a8c7e(0xa80)]-(Graphics[_0x4a8c7e(0xa80)]-Graphics['boxWidth'])/0x2-this['_cancelButton'][_0x4a8c7e(0xa80)]-0x4;}},VisuMZ['BattleCore'][_0x12d94d(0x34b)]=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xbc7)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xbc7)]=function(){const _0x14a81b=_0x12d94d;if(this['battleLayoutStyle']()===_0x14a81b(0xb2d))return this['skillItemWindowRectBorderStyle']();else return this[_0x14a81b(0x929)]()?this[_0x14a81b(0x7b4)]():VisuMZ[_0x14a81b(0xadf)]['Scene_Battle_skillWindowRect'][_0x14a81b(0xba3)](this);},VisuMZ[_0x12d94d(0xadf)]['Scene_Battle_itemWindowRect']=Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x199)],Scene_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x199)]=function(){const _0x1c0b13=_0x12d94d;if(this[_0x1c0b13(0xbb9)]()===_0x1c0b13(0xb2d))return this[_0x1c0b13(0x2d5)]();else{if(this[_0x1c0b13(0x929)]()){if(_0x1c0b13(0x3fb)!=='xIRor')return this[_0x1c0b13(0x7b4)]();else _0x160445[_0x1c0b13(0xc3b)]['x']=this[_0x1c0b13(0x9d0)](),_0x2068d5[_0x1c0b13(0xc3b)]['y']=this['mainSpriteScaleY']();}else return VisuMZ[_0x1c0b13(0xadf)]['Scene_Battle_itemWindowRect'][_0x1c0b13(0xba3)](this);}},Scene_Battle[_0x12d94d(0x4e9)]['isSkillItemWindowsMiddle']=function(){const _0x406f42=_0x12d94d;return VisuMZ['BattleCore'][_0x406f42(0xb08)]['BattleLayout'][_0x406f42(0x254)];},Scene_Battle['prototype']['skillItemWindowRectMiddle']=function(){const _0x37c636=_0x12d94d,_0xfc4342=Sprite_Button[_0x37c636(0x4e9)][_0x37c636(0x983)]()*0x2+0x4;let _0x2ec29f=Graphics[_0x37c636(0x807)]-_0xfc4342;if(Imported[_0x37c636(0x564)]&&SceneManager[_0x37c636(0x3a5)]()){if('LDXDR'!==_0x37c636(0x74)){const _0x26f3b5=this['_actor']['skillTypes'](),_0x23db65=_0x26f3b5[_0x37c636(0xd0e)](_0x3baa7b=>_0x6e7fdd['getSkillTypes'](_0x46fd23)['includes'](_0x3baa7b));return _0x23db65['length']<=0x0;}else _0x2ec29f+=_0xfc4342;}const _0x1f3e9d=this['helpAreaBottom'](),_0x5b9eaf=Graphics['boxHeight']-_0x1f3e9d-this[_0x37c636(0x9e0)]()[_0x37c636(0xd17)]+Window_BattleStatus[_0x37c636(0x4e9)][_0x37c636(0xab6)](),_0x1479a3=0x0;return new Rectangle(_0x1479a3,_0x1f3e9d,_0x2ec29f,_0x5b9eaf);},Scene_Battle['prototype'][_0x12d94d(0x7aa)]=function(){const _0x59bc91=_0x12d94d;if(!VisuMZ[_0x59bc91(0xadf)]['Settings']['Enemy']['NameLegacy'])return;this[_0x59bc91(0x6b7)]=new Sprite(),this[_0x59bc91(0x6b7)]['x']=this[_0x59bc91(0x12a)]['x'],this[_0x59bc91(0x6b7)]['y']=this['_windowLayer']['y'];const _0x1ae631=this[_0x59bc91(0x8aa)][_0x59bc91(0x86f)](this[_0x59bc91(0x12a)]);this[_0x59bc91(0xa1a)](this[_0x59bc91(0x6b7)],_0x1ae631);for(let _0x451581=0x0;_0x451581<0x8;_0x451581++){const _0x2969a1=new Window_EnemyName(_0x451581);this[_0x59bc91(0x6b7)][_0x59bc91(0xa26)](_0x2969a1);}},Sprite_Battler[_0x12d94d(0x380)]=VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0x58b)][_0x12d94d(0x924)],VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x1f9)]=Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x7e6)],Sprite_Battler['prototype'][_0x12d94d(0x7e6)]=function(){const _0x3053fd=_0x12d94d;VisuMZ[_0x3053fd(0xadf)]['Sprite_Battler_initMembers'][_0x3053fd(0xba3)](this),this['initMembersBattleCore']();if(this[_0x3053fd(0xc50)]===Sprite_Enemy)this[_0x3053fd(0x6b6)]();this[_0x3053fd(0x817)]();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x6ce)]=function(){const _0xb126f7=_0x12d94d;this[_0xb126f7(0x3f5)]=0x0,this[_0xb126f7(0x59e)]=0x0,this[_0xb126f7(0x383)]=0x0,this['_targetFloatHeight']=0x0,this[_0xb126f7(0xa77)]=0x0,this[_0xb126f7(0xbea)]=0x0,this[_0xb126f7(0x35a)]=_0xb126f7(0x148),this[_0xb126f7(0x9d7)]=0x0,this[_0xb126f7(0x2fa)]=0x0,this[_0xb126f7(0xa07)]=0x0,this[_0xb126f7(0xdc)]=0x0,this[_0xb126f7(0xaf5)]=0xff,this['_opacityDuration']=0x0,this[_0xb126f7(0x799)]=0x0,this[_0xb126f7(0xc8)]=_0xb126f7(0x148),this['_currentAngle']=0x0,this[_0xb126f7(0xd15)]=0x0,this['_angleDuration']=0x0,this['_angleWholeDuration']=0x0,this[_0xb126f7(0x812)]=_0xb126f7(0x148),this[_0xb126f7(0x230)]=!![],this['_skewX']=0x0,this[_0xb126f7(0x42c)]=0x0,this['_targetSkewX']=0x0,this[_0xb126f7(0xd1c)]=0x0,this[_0xb126f7(0x524)]=0x0,this[_0xb126f7(0xcdf)]=0x0,this[_0xb126f7(0x3d6)]=_0xb126f7(0x148),this[_0xb126f7(0xcb)]=0x1,this['_growY']=0x1,this[_0xb126f7(0xa2c)]=0x1,this[_0xb126f7(0xb68)]=0x1,this['_growDuration']=0x0,this[_0xb126f7(0x331)]=0x0,this[_0xb126f7(0x9ce)]=_0xb126f7(0x148),this[_0xb126f7(0x69c)]=0x1,this['_targetHomeX']=0x0,this[_0xb126f7(0x947)]=0x0,this[_0xb126f7(0xc45)]=0x0,this['_homeWholeDuration']=0x0,this[_0xb126f7(0x4c7)]=_0xb126f7(0x148),this[_0xb126f7(0xc36)]=0x0,this[_0xb126f7(0x4e7)]=0x0;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x6b6)]=function(){const _0x2c5d59=_0x12d94d;this[_0x2c5d59(0xcc3)]=new Sprite(),this[_0x2c5d59(0xcc3)][_0x2c5d59(0x222)]=ImageManager[_0x2c5d59(0xc5b)](_0x2c5d59(0x43a)),this['_shadowSprite']['bitmap'][_0x2c5d59(0x563)]=VisuMZ[_0x2c5d59(0xadf)]['Settings']['Actor'][_0x2c5d59(0x3d8)],this[_0x2c5d59(0xcc3)][_0x2c5d59(0x2cc)]['x']=0.5,this[_0x2c5d59(0xcc3)][_0x2c5d59(0x2cc)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x2c5d59(0xcc3)][_0x2c5d59(0x9bf)]=![],this[_0x2c5d59(0xa26)](this[_0x2c5d59(0xcc3)]);},Sprite_Battler['prototype']['createDistortionSprite']=function(){const _0x5f2923=_0x12d94d;this[_0x5f2923(0x67b)]=new Sprite(),this[_0x5f2923(0x67b)]['anchor']['x']=0.5,this['_distortionSprite']['anchor']['y']=0.5,this[_0x5f2923(0xa26)](this[_0x5f2923(0x67b)]);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x9bc)]=function(){const _0x984c59=_0x12d94d;if(!this[_0x984c59(0x67b)])return;if(this[_0x984c59(0xcc3)]){const _0x39f7c9=this['getChildIndex'](this[_0x984c59(0x67b)]);this[_0x984c59(0xa1a)](this[_0x984c59(0xcc3)],_0x39f7c9),this[_0x984c59(0x934)]();}if(this['_svBattlerSprite']){if('iFQyz'===_0x984c59(0x87a))return this[_0x984c59(0x200)]();else this[_0x984c59(0x67b)]['addChild'](this[_0x984c59(0x348)]);}this[_0x984c59(0x6a9)]&&this[_0x984c59(0x67b)][_0x984c59(0xa26)](this[_0x984c59(0x6a9)]);if(this[_0x984c59(0x73)]){if(_0x984c59(0x571)==='jSvYU')this[_0x984c59(0x67b)][_0x984c59(0xa26)](this[_0x984c59(0x73)]);else return _0x41af2c[_0x984c59(0xadf)][_0x984c59(0x34b)][_0x984c59(0xba3)](this);}this[_0x984c59(0xb9e)]&&this[_0x984c59(0x67b)][_0x984c59(0xa26)](this['_injectAnimationSprite']),this['_dragonbonesSpriteContainer']&&this[_0x984c59(0x67b)][_0x984c59(0xa26)](this['_dragonbonesSpriteContainer']);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x934)]=function(){const _0x15b9a6=_0x12d94d;if(!this['_shadowSprite'])return;if(this[_0x15b9a6(0x78b)]&&this[_0x15b9a6(0x78b)][_0x15b9a6(0x657)]()){if(_0x15b9a6(0xcc9)!==_0x15b9a6(0x3f8)){const _0x57d817=this[_0x15b9a6(0xcc3)][_0x15b9a6(0x222)];this[_0x15b9a6(0xcc3)][_0x15b9a6(0x422)](0x0,0x0,_0x57d817['width'],_0x57d817[_0x15b9a6(0xd17)]);}else{const _0x3579cd=_0x57c075[_0x15b9a6(0x4e9)][_0x15b9a6(0x195)]['call'](arguments,0x1);this[_0x15b9a6(0x833)][_0x15b9a6(0x29d)]({'name':_0x50d55b,'params':_0x3579cd});}}else{if(_0x15b9a6(0x292)===_0x15b9a6(0x67e)){if(this[_0x15b9a6(0xcb5)]())return!![];return![];}else this[_0x15b9a6(0xcc3)][_0x15b9a6(0x422)](0x0,0x0,0x0,0x0);}},Sprite_Battler[_0x12d94d(0x4e9)]['damageContainer']=function(){const _0x2c1f86=_0x12d94d;if(SceneManager[_0x2c1f86(0xb92)]()){if(_0x2c1f86(0x734)!==_0x2c1f86(0x629))return SceneManager[_0x2c1f86(0x592)][_0x2c1f86(0x372)][_0x2c1f86(0xb15)];else{_0x53dd22=_0x1cf187[_0x2c1f86(0x97e)]()[_0x2c1f86(0xc39)]();const _0x15055a=this[_0x2c1f86(0x109)](_0xe25b1e,_0x524688);if(_0x15055a<=0x0)return;const _0x5cc711=_0x2d61ed[_0x2c1f86(0x1d0)](_0x43f0d8*_0x15055a);if(_0x5cc711<=0x0)return;let _0x3ed5a2=this[_0x2c1f86(0xc1)]();if(this['_reflectionTarget'])_0x3ed5a2=this[_0x2c1f86(0xb09)];const _0xac02d6=_0x91b4b6[_0x2c1f86(0xb62)](_0x468086)?-0x1:0x1;if(_0x596c24==='HP')_0x3ed5a2[_0x2c1f86(0xa45)](_0xac02d6*_0x5cc711);if(_0x14c1a1==='MP')_0x3ed5a2[_0x2c1f86(0xca6)](_0xac02d6*_0x5cc711);}}else{if('RGytE'===_0x2c1f86(0x37c))_0x20699b=!_0x2469c1;else return this['parent'];}},Sprite_Battler['prototype'][_0x12d94d(0x873)]=function(_0x38e081,_0x35ac58){const _0x45a808=_0x12d94d;if(!this[_0x45a808(0x78b)][_0x45a808(0xaaf)]())return;if(BattleManager[_0x45a808(0x4f2)]())return;const _0x8f8cd1=VisuMZ[_0x45a808(0xadf)][_0x45a808(0xb08)][_0x45a808(0x89b)],_0x2c8052=new Sprite_Damage();_0x2c8052['_duration']=_0x8f8cd1['PopupDuration'],this[_0x45a808(0x18d)](_0x2c8052),_0x2c8052[_0x45a808(0x873)](_0x38e081,_0x35ac58),this['addDamageSprite'](_0x2c8052);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x774)]=function(_0x4b445f,_0x1d38ec,_0x4011c2){const _0x565341=_0x12d94d;if(!this[_0x565341(0x78b)]['isSpriteVisible']())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x5c3a42=VisuMZ[_0x565341(0xadf)]['Settings'][_0x565341(0x89b)],_0x168ffe=new Sprite_Damage();_0x168ffe[_0x565341(0x1c6)]=_0x5c3a42[_0x565341(0x11c)],this[_0x565341(0x18d)](_0x168ffe),_0x168ffe[_0x565341(0x774)](_0x4b445f,_0x1d38ec,_0x4011c2),this[_0x565341(0x69d)](_0x168ffe);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x5a8)]=function(){const _0x60320b=_0x12d94d;if(!this[_0x60320b(0x78b)][_0x60320b(0xcf)]())return;while(this[_0x60320b(0x78b)]['isDamagePopupRequested']()){this['_battler'][_0x60320b(0xaaf)]()&&this[_0x60320b(0x39f)]();}this[_0x60320b(0x78b)][_0x60320b(0x1ed)](),this[_0x60320b(0x78b)][_0x60320b(0xb69)]();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x39f)]=function(){const _0x47d7f7=_0x12d94d;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x2a0236=VisuMZ[_0x47d7f7(0xadf)][_0x47d7f7(0xb08)][_0x47d7f7(0x89b)],_0xfdc1dc=new Sprite_Damage();_0xfdc1dc[_0x47d7f7(0x1c6)]=_0x2a0236[_0x47d7f7(0x11c)],this[_0x47d7f7(0x18d)](_0xfdc1dc),_0xfdc1dc[_0x47d7f7(0x5bb)](this[_0x47d7f7(0x78b)]),_0xfdc1dc[_0x47d7f7(0xd0d)](this[_0x47d7f7(0x78b)]),this[_0x47d7f7(0x69d)](_0xfdc1dc);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x69d)]=function(_0x13d631){const _0x1f3d84=_0x12d94d;this[_0x1f3d84(0x616)]['push'](_0x13d631);if(this['isShownOnBattlePortrait']()){if('ukwLe'!==_0x1f3d84(0x921)){const _0x5d5f70=SceneManager[_0x1f3d84(0x592)][_0x1f3d84(0xcbc)];if(_0x5d5f70)_0x5d5f70[_0x1f3d84(0x69d)](_0x13d631,this[_0x1f3d84(0x78b)]);}else{const _0xf44516=this[_0x1f3d84(0xcc3)][_0x1f3d84(0x222)];this[_0x1f3d84(0xcc3)][_0x1f3d84(0x422)](0x0,0x0,_0xf44516[_0x1f3d84(0xa80)],_0xf44516[_0x1f3d84(0xd17)]);}}else{if(_0x1f3d84(0x772)===_0x1f3d84(0xa5e)){const _0x4f1fdf=new _0x320c16();_0x4f1fdf[_0x1f3d84(0x222)]=_0x4bea53[_0x1f3d84(0xc5b)](_0x4198d6[_0x1f3d84(0x7a1)]),_0x4f1fdf['x']=_0x34a7ba[_0x1f3d84(0x4be)]||0x0,_0x4f1fdf['y']=_0x173dda[_0x1f3d84(0xbf8)]||0x0,this[_0x1f3d84(0xa26)](_0x4f1fdf),this[_0x1f3d84(0x120)]=_0x4f1fdf;}else{this[_0x1f3d84(0x3de)]()['addChild'](_0x13d631);if(SceneManager[_0x1f3d84(0xc5)]())_0x13d631['scale']['x']=-0x1;}}},Sprite_Battler[_0x12d94d(0x4e9)]['isShownOnBattlePortrait']=function(){const _0x43204d=_0x12d94d;return!$gameSystem[_0x43204d(0x701)]()&&this[_0x43204d(0x78b)]&&this[_0x43204d(0x78b)][_0x43204d(0xc83)]();return!$gameSystem['isSideView']()&&this[_0x43204d(0x78b)]&&this[_0x43204d(0x78b)][_0x43204d(0xc83)]()&&Window_BattleStatus[_0x43204d(0x4e9)]['battleLayoutStyle']()===_0x43204d(0x834);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x18d)]=function(_0x2771be){const _0x26b7fc=_0x12d94d;this['alignBattleCoreDamageSprite'](_0x2771be,!![]);const _0x5693c6=VisuMZ[_0x26b7fc(0xadf)]['Settings'][_0x26b7fc(0x89b)],_0x175718=SceneManager[_0x26b7fc(0xc5)]()?-0x1:0x1;if(_0x5693c6['NewPopupBottom']){if(_0x26b7fc(0x2d2)===_0x26b7fc(0xc44)){if(this[_0x26b7fc(0x6e5)]!=='default')return this[_0x26b7fc(0xbd4)](_0x3f12ae);else return _0xd31fc5[_0x26b7fc(0x4a8)](this[_0x26b7fc(0xc7)]())===_0x26b7fc(0x554)?_0x559b8d[_0x26b7fc(0xadf)]['Game_Action_evalDamageFormula']['call'](this,_0x9f08f9):this[_0x26b7fc(0x198)](_0x2823eb);}else for(const _0x295926 of this[_0x26b7fc(0x616)]){_0x295926['x']+=_0x5693c6[_0x26b7fc(0x108)]*_0x175718,_0x295926['y']+=_0x5693c6[_0x26b7fc(0x367)];}}else{if(_0x26b7fc(0x190)===_0x26b7fc(0x32e)){_0x5bfa63['BattleCore'][_0x26b7fc(0x6ad)][_0x26b7fc(0xba3)](this,_0xeaf073,_0x1663ab);if(!_0x27dcd7[_0x26b7fc(0x606)]())return;for(const _0x1469d7 of this[_0x26b7fc(0xc1)]()[_0x26b7fc(0x96b)]()){if(_0x1469d7===_0x297242[_0x26b7fc(0xbbb)]()){let _0x42412e=_0x5ca543[_0x26b7fc(0x5e6)];_0x42412e*=_0x2e3099['stateRate'](_0x1469d7),_0x42412e*=this['subject']()[_0x26b7fc(0xa20)](_0x1469d7),_0x42412e*=this['lukEffectRate'](_0x3c3183),_0x59b83e[_0x26b7fc(0x89)]()<_0x42412e&&(_0x2f8dab['_deathStateApplied']=!![],this[_0x26b7fc(0xaa7)](_0x555b28));}}}else{const _0x1a74b2=this[_0x26b7fc(0x616)][this[_0x26b7fc(0x616)][_0x26b7fc(0x29c)]-0x1];_0x1a74b2&&(_0x2771be['x']=_0x1a74b2['x']+_0x5693c6[_0x26b7fc(0x108)]*_0x175718,_0x2771be['y']=_0x1a74b2['y']+_0x5693c6[_0x26b7fc(0x367)]);}}},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x1ee)]=function(_0x17ace4,_0x524b0d){const _0x11bf9=_0x12d94d,_0x5dfa2e=SceneManager[_0x11bf9(0xc5)]()?-0x1:0x1;let _0x5bc818=this['_baseX'];_0x5bc818+=this[_0x11bf9(0x162)]();let _0x1f8205=this[_0x11bf9(0x59e)];const _0x2cbf31=this['_distortionSprite']['scale']['y'];_0x1f8205+=this['extraPositionY']();const _0x94fcb=SceneManager[_0x11bf9(0x592)]['_statusWindow'];if(_0x94fcb&&this[_0x11bf9(0x8e6)]===_0x94fcb){if(_0x11bf9(0x25d)===_0x11bf9(0x25d)){_0x5bc818+=_0x94fcb['x']-this['damageOffsetX']();const _0x10a742=_0x94fcb[_0x11bf9(0x33c)]()*0x3/0x4;_0x1f8205=_0x94fcb['y']+_0x10a742,_0x1f8205=Math[_0x11bf9(0x2e3)](_0x1f8205,_0x94fcb['y']+this['y']-this[_0x11bf9(0xd17)]+_0x10a742);}else _0x4eb9b5+=_0x384340['isActor']()?-_0xeabf9a:_0x5d8616,_0x59c2bc+=_0x1429e9;}_0x17ace4['x']=Math[_0x11bf9(0x1d0)](_0x5bc818+this[_0x11bf9(0x715)]()*_0x5dfa2e),_0x17ace4['y']=Math['round'](_0x1f8205+this[_0x11bf9(0x1f2)]());},VisuMZ['BattleCore'][_0x12d94d(0x912)]=Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x715)],Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x715)]=function(){const _0x3155e2=_0x12d94d;let _0x3c4c36=VisuMZ[_0x3155e2(0xadf)][_0x3155e2(0x912)][_0x3155e2(0xba3)](this),_0x3aa716=VisuMZ['BattleCore'][_0x3155e2(0xb08)]['Damage']['PopupOffsetX']||0x0;return Math[_0x3155e2(0x1d0)](_0x3c4c36+_0x3aa716);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x831)]=Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x1f2)],Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x1f2)]=function(){const _0x34a3eb=_0x12d94d;let _0x116a23=VisuMZ[_0x34a3eb(0xadf)][_0x34a3eb(0x831)]['call'](this);switch(VisuMZ[_0x34a3eb(0xadf)][_0x34a3eb(0xb08)][_0x34a3eb(0x89b)][_0x34a3eb(0x6f5)]){case _0x34a3eb(0x7ea):_0x116a23-=this[_0x34a3eb(0xd17)]*this['scale']['y'];break;case'center':_0x116a23-=this['height']*this[_0x34a3eb(0xc3b)]['y']*0.5;break;}let _0x523f4e=VisuMZ[_0x34a3eb(0xadf)][_0x34a3eb(0xb08)][_0x34a3eb(0x89b)][_0x34a3eb(0x56d)]||0x0;return Math['round'](_0x116a23+_0x523f4e);},Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x715)]=function(){const _0x6b992f=_0x12d94d;return Sprite_Battler[_0x6b992f(0x4e9)][_0x6b992f(0x715)]['call'](this);},Sprite_Actor['prototype']['damageOffsetY']=function(){const _0x5d25b9=_0x12d94d;return Sprite_Battler['prototype'][_0x5d25b9(0x1f2)][_0x5d25b9(0xba3)](this);},Sprite_Battler['prototype']['destroyDamageSprite']=function(_0x2c9a20){const _0x3ac6e6=_0x12d94d;if(this[_0x3ac6e6(0x221)]())SceneManager[_0x3ac6e6(0x592)][_0x3ac6e6(0xcbc)][_0x3ac6e6(0x257)](_0x2c9a20);else{if('tHyzf'==='YknEi'){if(this[_0x3ac6e6(0x7e2)]()){let _0xb1fe62=_0x4d49db['_targets'];_0x19734d/=_0xb1fe62['length'],this[_0x3ac6e6(0xcfb)]()&&(_0x262548*=this[_0x3ac6e6(0xc1)]()['attackTimesAdd']()+0x1),_0x570619=_0x6f01d0>0x0?_0x569a72[_0x3ac6e6(0xbeb)](_0x243f37):_0x3a2ee6[_0x3ac6e6(0x28f)](_0x43a12a);}return _0x171c6a;}else this[_0x3ac6e6(0x3de)]()[_0x3ac6e6(0xbd0)](_0x2c9a20),this[_0x3ac6e6(0x616)][_0x3ac6e6(0x8fc)](_0x2c9a20),_0x2c9a20[_0x3ac6e6(0x9b7)]();}},VisuMZ[_0x12d94d(0xadf)]['Sprite_Battler_setHome']=Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x7a3)],Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x7a3)]=function(_0x416639,_0x51f001){const _0x440d8d=_0x12d94d,_0x194c0d=VisuMZ[_0x440d8d(0xadf)][_0x440d8d(0xb08)];if(this[_0x440d8d(0xc50)]===Sprite_Actor){if(_0x440d8d(0x5b4)!==_0x440d8d(0x5b4)){if(_0x2acb79['BTestBypass']&&_0x1f3573[_0x440d8d(0x7d0)]())return!![];if(this['_battler'][_0x440d8d(0x2e6)])return![];return this[_0x440d8d(0x78b)][_0x440d8d(0x4f0)]();}else _0x416639+=_0x194c0d[_0x440d8d(0x58b)]['OffsetX']||0x0,_0x51f001+=_0x194c0d[_0x440d8d(0x58b)][_0x440d8d(0x75f)]||0x0;}else this[_0x440d8d(0xc50)]===Sprite_Enemy&&(_0x416639+=_0x194c0d[_0x440d8d(0x1ec)][_0x440d8d(0x211)]||0x0,_0x51f001+=_0x194c0d[_0x440d8d(0x1ec)][_0x440d8d(0x75f)]||0x0);if(this[_0x440d8d(0x78b)]){if(_0x440d8d(0x2dd)!==_0x440d8d(0x2dd)){const _0x540c2d=_0x29c1fd['indexOf'](_0x26739b['toUpperCase']()[_0x440d8d(0xc39)]());_0x540c2d>=0x0&&_0x540c2d<=0x7&&_0x3c2cb3[_0x440d8d(0x61b)](_0x540c2d,_0x4bfc84);}else _0x416639=this[_0x440d8d(0x78b)][_0x440d8d(0x369)]??_0x416639,_0x51f001=this[_0x440d8d(0x78b)][_0x440d8d(0x435)]??_0x51f001;}VisuMZ[_0x440d8d(0xadf)][_0x440d8d(0x702)][_0x440d8d(0xba3)](this,_0x416639,_0x51f001),this[_0x440d8d(0x8ca)]=this[_0x440d8d(0xb94)],this[_0x440d8d(0x947)]=this[_0x440d8d(0xc55)],this[_0x440d8d(0xc45)]=0x0,this[_0x440d8d(0x11a)]=0x0,this['_homeEasing']='Linear';},VisuMZ['BattleCore']['Sprite_Battler_update']=Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xba4)],Sprite_Battler['prototype']['update']=function(){const _0x2096c9=_0x12d94d;VisuMZ['BattleCore'][_0x2096c9(0x2a8)][_0x2096c9(0xba3)](this),!this[_0x2096c9(0x78b)]&&this[_0x2096c9(0x137)]&&(_0x2096c9(0xc3f)!==_0x2096c9(0xc3f)?_0x2e1119[_0x2096c9(0xbce)](_0x2096c9(0xac9),_0x47c71f):this[_0x2096c9(0x137)][_0x2096c9(0x9bf)]=![]);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x6fb)]=Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x8d4)],Sprite_Battler[_0x12d94d(0x4e9)]['updateMain']=function(){const _0xfd2d62=_0x12d94d;this[_0xfd2d62(0x441)](),this[_0xfd2d62(0x2dc)](),this['updateSpin'](),this[_0xfd2d62(0xa95)](),VisuMZ[_0xfd2d62(0xadf)][_0xfd2d62(0x6fb)][_0xfd2d62(0xba3)](this),this['updateHpGaugePosition'](),this[_0xfd2d62(0xad4)]();if(this[_0xfd2d62(0xc50)]===Sprite_Enemy)this[_0xfd2d62(0x2f6)]();},VisuMZ[_0x12d94d(0xadf)]['Sprite_Battler_updatePosition']=Sprite_Battler['prototype'][_0x12d94d(0xa8e)],Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xa8e)]=function(){const _0x4e7d98=_0x12d94d;this['updateHomeMove'](),VisuMZ[_0x4e7d98(0xadf)][_0x4e7d98(0x314)][_0x4e7d98(0xba3)](this),this[_0x4e7d98(0x758)](),this['updateOpacity']();},Sprite_Battler['prototype'][_0x12d94d(0xbf9)]=function(){const _0x3eabb8=_0x12d94d,_0x5da166=this[_0x3eabb8(0xbac)]();if(this['_battler']['isSelected']()){if(_0x3eabb8(0x724)!==_0x3eabb8(0x724)){let _0x3ae784=_0x1ce0f4['x'],_0x33807c=_0x3dd80c['y'],_0x2745af=_0x802353[_0x3eabb8(0xd17)],_0x4f74c9=_0x293c18[_0x3eabb8(0x67b)][_0x3eabb8(0xc3b)]['y'];_0x421348['x']=_0x1b1c47['_baseX']+_0x21a558['extraPositionX'](),_0x50b4cd['y']=_0x510823['_baseY']+_0x13f026[_0x3eabb8(0x91c)](),_0x3008e9[_0x3eabb8(0xd17)]*=_0x4f74c9;let _0x304e2c=_0x584cb9[_0x3eabb8(0xadf)][_0x3eabb8(0xa4e)][_0x3eabb8(0xba3)](this,_0x22f992);return _0x226b6e['x']=_0x3ae784,_0x2723fa['y']=_0x33807c,_0x411b21['height']=_0x2745af,_0x304e2c;}else this[_0x3eabb8(0x28e)]++,Graphics['frameCount']%0x1e<0xf?_0x5da166['setBlendColor']([0xff,0xff,0xff,0x40]):'zwdLI'!=='kstnC'?_0x5da166[_0x3eabb8(0xc68)]([0x0,0x0,0x0,0x0]):_0xf71f38+=(_0x4f3f08[_0x3eabb8(0xa80)]-_0x4149a7)/0x2;}else this[_0x3eabb8(0x28e)]>0x0&&(this['_selectionEffectCount']=0x0,_0x5da166['setBlendColor']([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x76e)]=function(_0x3957ca,_0xbccff5){const _0x2a4302=_0x12d94d,_0x22a954=_0x3957ca-this[_0x2a4302(0xb94)],_0xc6f5d5=_0xbccff5-this[_0x2a4302(0xc55)];this[_0x2a4302(0xb94)]=_0x3957ca,this[_0x2a4302(0xc55)]=_0xbccff5,this[_0x2a4302(0xba)]-=_0x22a954,this[_0x2a4302(0x578)]-=_0xc6f5d5,this['_targetOffsetX']-=_0x22a954,this[_0x2a4302(0x7a)]-=_0xc6f5d5,this[_0x2a4302(0xa8e)]();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x90f)]=function(_0x2c122c,_0x5aafb7,_0x544486,_0x25dea7){const _0x1f5801=_0x12d94d;if(this['_targetHomeX']!==_0x2c122c||this[_0x1f5801(0x947)]!==_0x5aafb7){if(_0x1f5801(0x86d)!==_0x1f5801(0x86d)){if(_0x535525===_0x1f5801(0x240))this[_0x1f5801(0x4d9)]=!![];if(this[_0x1f5801(0x78b)]&&this[_0x1f5801(0x78b)][_0x1f5801(0xb91)]()){this[_0x1f5801(0x527)]=_0x4b0a5c[_0x1f5801(0xaa4)][_0x1f5801(0xb01)];return;}const _0x52a46d=_0x16622b[_0x1f5801(0xaa4)][_0x580dc3];this[_0x1f5801(0x527)]=_0x52a46d,this[_0x1f5801(0xb1)]=0x0,this[_0x1f5801(0x800)]=0x0;}else this['_targetHomeX']=_0x2c122c,this[_0x1f5801(0x947)]=_0x5aafb7,this[_0x1f5801(0xc45)]=_0x544486,this['_homeWholeDuration']=_0x544486,this[_0x1f5801(0x4c7)]=_0x25dea7,_0x544486<=0x0&&this[_0x1f5801(0x900)]();}},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x125)]=function(){const _0x1205c1=_0x12d94d;if(this['_homeDuration']<=0x0)return;const _0x1101e3=this[_0x1205c1(0xc45)],_0x2d4492=this[_0x1205c1(0x11a)],_0x2d2700=this['_homeEasing'];if(Imported[_0x1205c1(0x564)]){if(_0x1205c1(0x530)!==_0x1205c1(0x530))return _0x2b3fc3['BattleCore'][_0x1205c1(0x90a)]['call'](this);else this['_homeX']=this[_0x1205c1(0x1da)](this[_0x1205c1(0xb94)],this[_0x1205c1(0x8ca)],_0x1101e3,_0x2d4492,_0x2d2700),this[_0x1205c1(0xc55)]=this[_0x1205c1(0x1da)](this[_0x1205c1(0xc55)],this[_0x1205c1(0x947)],_0x1101e3,_0x2d4492,_0x2d2700);}else this['_homeX']=(this[_0x1205c1(0xb94)]*(_0x1101e3-0x1)+this['_targetHomeX'])/_0x1101e3,this[_0x1205c1(0xc55)]=(this[_0x1205c1(0xc55)]*(_0x1101e3-0x1)+this[_0x1205c1(0x947)])/_0x1101e3;this[_0x1205c1(0xc45)]--;if(this[_0x1205c1(0xc45)]<=0x0)this['onHomeMoveEnd']();},Sprite_Battler['prototype'][_0x12d94d(0x900)]=function(){const _0x4a74dd=_0x12d94d;this[_0x4a74dd(0xb94)]=this[_0x4a74dd(0x8ca)],this[_0x4a74dd(0xc55)]=this[_0x4a74dd(0x947)];},Sprite_Battler[_0x12d94d(0x4e9)]['updatePositionBattleCore']=function(){const _0x37e002=_0x12d94d;this[_0x37e002(0x3f5)]=this['x'],this[_0x37e002(0x59e)]=this['y'],this[_0x37e002(0x66a)](),this[_0x37e002(0xbcf)](),this['x']+=this[_0x37e002(0x162)](),this['y']+=this[_0x37e002(0x91c)](),this['y']+=this[_0x37e002(0xa3)](),this['x']=Math[_0x37e002(0x28f)](this['x']),this['y']=Math[_0x37e002(0x28f)](this['y']);},Sprite_Battler['prototype'][_0x12d94d(0x162)]=function(){let _0x1bad6d=0x0;return _0x1bad6d;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x91c)]=function(){const _0x2d343d=_0x12d94d;let _0x45d353=0x0;if(this['_battler']&&!this[_0x2d343d(0x78b)]['isBattlerGrounded']()){if(_0x2d343d(0x9fc)===_0x2d343d(0x1f7)){if(!_0x200ac9)return;if(!this['canAddSkillCommand'](_0x61c6f7))return;const _0x483db7=this[_0x2d343d(0x86b)](),_0x2f7760=_0x553658[_0x2d343d(0x173)](_0x1861ca),_0x3f7575=_0x3f1557[_0x2d343d(0xed)](_0x1b3d7e),_0x591529=_0x483db7==='text'?_0x2f7760:_0x2d343d(0x3ae)[_0x2d343d(0x3d0)](_0x3f7575,_0x2f7760),_0x4e2bd9=this[_0x2d343d(0xac6)][_0x2d343d(0x55a)](_0x3f15f7);this['addCommand'](_0x591529,_0x2d343d(0xc70),_0x4e2bd9,_0xc9238f['id']);}else _0x45d353-=this['_floatHeight'],_0x45d353-=this[_0x2d343d(0x9d7)];}return _0x45d353;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xa3)]=function(){const _0x50b7e5=_0x12d94d;let _0xaffea5=0x0;if(this[_0x50b7e5(0x67b)]&&this[_0x50b7e5(0xc50)]!==Sprite_SvEnemy){if('etHzl'===_0x50b7e5(0x4eb)){const _0x359a0f=this[_0x50b7e5(0x67b)][_0x50b7e5(0xc3b)]['y'];_0xaffea5-=(_0x359a0f-0x1)*this[_0x50b7e5(0xd17)];}else _0x2a9cda=(_0x1cf656+_0x3cbc80)/0x2;}return _0xaffea5;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xa95)]=function(){const _0xa8b1c9=_0x12d94d,_0x4fc7b2=this[_0xa8b1c9(0x78b)]&&this[_0xa8b1c9(0x78b)]['isBattlerFlipped']();this[_0xa8b1c9(0x69c)]=(_0x4fc7b2?-0x1:0x1)*Math['abs'](this[_0xa8b1c9(0xc3b)]['x']);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xadd)]=function(_0x6faef7,_0x1d0e0d,_0x1c1541){const _0x232046=_0x12d94d;if(!this['canMove']())return;if(this[_0x232046(0xc8a)]===_0x6faef7)return;this[_0x232046(0xc8a)]=_0x6faef7,this[_0x232046(0xa77)]=_0x1d0e0d,this[_0x232046(0xbea)]=_0x1d0e0d,this[_0x232046(0x35a)]=_0x1c1541||'Linear';if(_0x1d0e0d<=0x0)this[_0x232046(0x383)]=_0x6faef7;},Sprite_Battler[_0x12d94d(0x4e9)]['updateFloat']=function(){const _0x560ba2=_0x12d94d;if(this[_0x560ba2(0xa77)]<=0x0)return;const _0x128867=this['_floatDuration'],_0x46f1f6=this[_0x560ba2(0xbea)],_0x250b99=this[_0x560ba2(0x35a)];if(Imported[_0x560ba2(0x564)]){if('xfdKq'===_0x560ba2(0x43c))this[_0x560ba2(0x383)]=this[_0x560ba2(0x1da)](this['_floatHeight'],this['_targetFloatHeight'],_0x128867,_0x46f1f6,_0x250b99);else{if([0x6c,0x198][_0x560ba2(0x511)](_0x84e1ab[_0x560ba2(0x6af)])){const _0x487b9a=_0x1091dc[_0x560ba2(0xcec)][0x0];if(_0x487b9a[_0x560ba2(0x214)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}else{if('ljiyP'!==_0x560ba2(0xa86))this[_0x560ba2(0x383)]=(this[_0x560ba2(0x383)]*(_0x128867-0x1)+this['_targetFloatHeight'])/_0x128867;else return![];}this[_0x560ba2(0xa77)]--;if(this[_0x560ba2(0xa77)]<=0x0)this[_0x560ba2(0x7ac)]();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x7ac)]=function(){const _0x4cfdea=_0x12d94d;this['_floatHeight']=this[_0x4cfdea(0xc8a)];},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x44e)]=function(){const _0x32a635=_0x12d94d;return this[_0x32a635(0xa77)]>0x0;},Sprite_Battler['prototype']['startJump']=function(_0x1d4ac9,_0x452ab1){const _0x52293a=_0x12d94d;if(!this['canMove']())return;if(_0x452ab1<=0x0)return;this[_0x52293a(0x2fa)]=_0x1d4ac9,this[_0x52293a(0xa07)]=_0x452ab1,this['_jumpWholeDuration']=_0x452ab1;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xbcf)]=function(){const _0x4a1527=_0x12d94d;if(this[_0x4a1527(0xa07)]<=0x0)return;const _0x58fbe9=this[_0x4a1527(0xdc)]-this[_0x4a1527(0xa07)],_0x38e3e6=this[_0x4a1527(0xdc)]/0x2,_0x507036=this[_0x4a1527(0x2fa)],_0x222cc3=-_0x507036/Math[_0x4a1527(0xd25)](_0x38e3e6,0x2);this['_jumpHeight']=_0x222cc3*Math[_0x4a1527(0xd25)](_0x58fbe9-_0x38e3e6,0x2)+_0x507036,this[_0x4a1527(0xa07)]--;if(this['_jumpDuration']<=0x0)return this['onJumpEnd']();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xa16)]=function(){this['_jumpHeight']=0x0;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x468)]=function(){const _0x405a1a=_0x12d94d;return this[_0x405a1a(0xa07)]>0x0;},Sprite_Battler[_0x12d94d(0x4e9)]['startOpacity']=function(_0x7b5e6c,_0x1d3d40,_0x25952a){const _0x1f66b6=_0x12d94d;if(this['_targetOpacity']===_0x7b5e6c)return;this['_targetOpacity']=_0x7b5e6c,this[_0x1f66b6(0xcd9)]=_0x1d3d40,this[_0x1f66b6(0x799)]=_0x1d3d40,this[_0x1f66b6(0xc8)]=_0x25952a||'Linear';if(_0x1d3d40<=0x0)this['opacity']=_0x7b5e6c;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x168)]=function(){const _0x4c83c6=_0x12d94d;if(this[_0x4c83c6(0xc50)][_0x4c83c6(0x536)]===_0x4c83c6(0x957))return;if(this[_0x4c83c6(0xcd9)]<=0x0)return;const _0x33f4e7=this[_0x4c83c6(0xcd9)],_0x12266b=this['_opacityWholeDuration'],_0x176ed1=this['_opacityEasing'];Imported[_0x4c83c6(0x564)]?this[_0x4c83c6(0x9a8)]=this[_0x4c83c6(0x1da)](this['opacity'],this['_targetOpacity'],_0x33f4e7,_0x12266b,_0x176ed1):_0x4c83c6(0x846)!==_0x4c83c6(0xdb)?this[_0x4c83c6(0x9a8)]=(this[_0x4c83c6(0x9a8)]*(_0x33f4e7-0x1)+this[_0x4c83c6(0xaf5)])/_0x33f4e7:(_0x245fa1[_0x4c83c6(0xadf)][_0x4c83c6(0x6b2)]['call'](this),_0x7ba9a6[_0x4c83c6(0xb92)]()&&this[_0x4c83c6(0x484)](_0x4c83c6(0xb01)));this['_opacityDuration']--;if(this[_0x4c83c6(0xcd9)]<=0x0)this[_0x4c83c6(0xf7)]();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xf7)]=function(){const _0x3125e4=_0x12d94d;this[_0x3125e4(0x9a8)]=this[_0x3125e4(0xaf5)];},Sprite_Battler['prototype'][_0x12d94d(0x4a5)]=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x2f6)]=function(){const _0x479386=_0x12d94d;this[_0x479386(0xcc3)][_0x479386(0x9bf)]=this['_battler'][_0x479386(0xad)](),this['updateShadowPosition']();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x7ed)]=function(){const _0x38f244=_0x12d94d;if(!this[_0x38f244(0xcc3)])return;this['_shadowSprite']['y']=this[_0x38f244(0x59e)]-this['y']-0x2;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x725)]=function(){const _0x60d391=_0x12d94d;if(!this[_0x60d391(0x78b)])return;this[_0x60d391(0x9bd)]=this[_0x60d391(0x78b)][_0x60d391(0x9fb)](),this[_0x60d391(0xaf8)]=this[_0x60d391(0x78b)][_0x60d391(0x6b1)]();},Game_BattlerBase[_0x12d94d(0x4e9)]['battlerShadowScaleX']=function(){const _0x5bd0f2=_0x12d94d,_0x18b691=this[_0x5bd0f2(0xc83)]()?this['actor']():this[_0x5bd0f2(0x673)]();if(_0x18b691){const _0x1d4096=_0x18b691[_0x5bd0f2(0x7ba)];if(_0x1d4096[_0x5bd0f2(0x214)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x1d4096[_0x5bd0f2(0x214)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if(_0x5bd0f2(0x66b)!==_0x5bd0f2(0x12e))return Number(RegExp['$1'])||0x0;else{if(_0x5f0740[_0x5bd0f2(0x941)](_0x5b1d60))return!![];return![];}}}}return 0x1;},Game_BattlerBase[_0x12d94d(0x4e9)]['battlerShadowScaleY']=function(){const _0x4e35f9=_0x12d94d,_0x5dccc5=this['isActor']()?this[_0x4e35f9(0xaa2)]():this[_0x4e35f9(0x673)]();if(_0x5dccc5){const _0xb653c7=_0x5dccc5[_0x4e35f9(0x7ba)];if(_0xb653c7[_0x4e35f9(0x214)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0xb653c7['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x441)]=function(){const _0x599662=_0x12d94d;if(this[_0x599662(0xc50)]===Sprite_SvEnemy)return;this['updateGrow'](),this['finalizeScale']();},Sprite_Battler[_0x12d94d(0x4e9)]['finalizeScale']=function(){const _0x2be0c5=_0x12d94d,_0x30e639=this[_0x2be0c5(0x67b)];_0x30e639&&(_0x30e639[_0x2be0c5(0xc3b)]['x']=this[_0x2be0c5(0x9d0)](),_0x30e639['scale']['y']=this[_0x2be0c5(0x708)]());},Sprite_Battler['prototype'][_0x12d94d(0x9d0)]=function(){const _0x21e723=_0x12d94d;let _0x4855c0=0x1;return _0x4855c0*=this[_0x21e723(0x69c)],_0x4855c0*=this[_0x21e723(0xcb)],_0x4855c0;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x708)]=function(){const _0x106fec=_0x12d94d;return 0x1*this[_0x106fec(0x665)];},Sprite_Battler[_0x12d94d(0x4e9)]['mainSpriteWidth']=function(){const _0x4eec3b=_0x12d94d;return this[_0x4eec3b(0xa80)]*this['mainSpriteScaleX']();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x782)]=function(){const _0x2e942b=_0x12d94d;return this[_0x2e942b(0xd17)]*this[_0x2e942b(0x708)]();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x558)]=function(_0xc7b8d4,_0x1609fa,_0xdde7d6,_0x5e962b){const _0x5d5a5d=_0x12d94d;if(!this[_0x5d5a5d(0xce0)]())return;if(!this[_0x5d5a5d(0x67b)])return;if(this[_0x5d5a5d(0xa2c)]===_0xc7b8d4&&this[_0x5d5a5d(0xb68)]===_0x1609fa)return;this[_0x5d5a5d(0xa2c)]=_0xc7b8d4,this[_0x5d5a5d(0xb68)]=_0x1609fa,this[_0x5d5a5d(0xa03)]=_0xdde7d6,this[_0x5d5a5d(0x331)]=_0xdde7d6,this[_0x5d5a5d(0x9ce)]=_0x5e962b||_0x5d5a5d(0x148);if(_0xdde7d6<=0x0){if('CajWt'!=='CajWt'){const _0xc99ac3=_0x47a974['$1'],_0x3867c8=_0x5d5a5d(0x1fc)[_0x5d5a5d(0x3d0)](_0xc99ac3),_0x1a8292=_0x32f289['BattleCore'][_0x5d5a5d(0x365)](_0x1abc0c,_0x21ce15);_0x4cc8cb['BattleCore']['JS'][_0x1a8292]=new _0x5bad33(_0x3867c8);}else this['_growX']=this['_targetGrowX'],this[_0x5d5a5d(0x665)]=this[_0x5d5a5d(0xb68)];}},Sprite_Battler['prototype'][_0x12d94d(0x9eb)]=function(){const _0x8d8ac=_0x12d94d;if(this[_0x8d8ac(0xa03)]<=0x0)return;if(!this[_0x8d8ac(0x67b)])return;const _0xe6601d=this[_0x8d8ac(0xa03)],_0x1d0589=this[_0x8d8ac(0x331)],_0x4ae0fa=this[_0x8d8ac(0x9ce)];Imported['VisuMZ_0_CoreEngine']?(this[_0x8d8ac(0xcb)]=this[_0x8d8ac(0x1da)](this['_growX'],this[_0x8d8ac(0xa2c)],_0xe6601d,_0x1d0589,_0x4ae0fa),this[_0x8d8ac(0x665)]=this[_0x8d8ac(0x1da)](this['_growY'],this['_targetGrowY'],_0xe6601d,_0x1d0589,_0x4ae0fa)):(this[_0x8d8ac(0xcb)]=(this[_0x8d8ac(0xcb)]*(_0xe6601d-0x1)+this['_targetGrowX'])/_0xe6601d,this[_0x8d8ac(0x665)]=(this[_0x8d8ac(0x665)]*(_0xe6601d-0x1)+this[_0x8d8ac(0xb68)])/_0xe6601d);this[_0x8d8ac(0xa03)]--;if(this[_0x8d8ac(0xa03)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x7f6)]=function(){const _0x2278b0=_0x12d94d;this[_0x2278b0(0xcb)]=this['_targetGrowX'],this[_0x2278b0(0x665)]=this[_0x2278b0(0xb68)];},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x588)]=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x12d94d(0x4e9)]['startSkew']=function(_0x659078,_0x18bf20,_0x2dff02,_0x2b1315){const _0x1faab8=_0x12d94d;if(!this['canMove']())return;if(!this[_0x1faab8(0x67b)])return;if(this[_0x1faab8(0x11d)]===_0x659078&&this[_0x1faab8(0xd1c)]===_0x18bf20)return;this[_0x1faab8(0x11d)]=_0x659078,this[_0x1faab8(0xd1c)]=_0x18bf20,this[_0x1faab8(0x524)]=_0x2dff02,this[_0x1faab8(0xcdf)]=_0x2dff02,this[_0x1faab8(0x3d6)]=_0x2b1315||_0x1faab8(0x148),_0x2dff02<=0x0&&(_0x1faab8(0x388)===_0x1faab8(0x6ef)?(this['_animationCount']++,this['active']=!![]):(this[_0x1faab8(0x67b)][_0x1faab8(0x2f7)]['x']=this['_targetSkewX'],this[_0x1faab8(0x67b)][_0x1faab8(0x2f7)]['y']=this['_targetSkewY']));},Sprite_Battler[_0x12d94d(0x4e9)]['updateSkew']=function(){const _0x3f2839=_0x12d94d;if(this[_0x3f2839(0x524)]<=0x0)return;if(!this[_0x3f2839(0x67b)])return;const _0x57c277=this[_0x3f2839(0x524)],_0x4911a1=this['_skewWholeDuration'],_0x5153b3=this[_0x3f2839(0x3d6)],_0x2ae1a8=this[_0x3f2839(0x67b)];if(Imported[_0x3f2839(0x564)]){if(_0x3f2839(0x603)!==_0x3f2839(0x603)){const _0x4211ec=_0x424546[_0x41da9b];_0x4211ec?this[_0x3f2839(0x5bb)](_0x4211ec[_0x3f2839(0x7e4)],0x0):this[_0x3f2839(0xc72)]();}else _0x2ae1a8['skew']['x']=this['applyEasing'](_0x2ae1a8[_0x3f2839(0x2f7)]['x'],this[_0x3f2839(0x11d)],_0x57c277,_0x4911a1,_0x5153b3),_0x2ae1a8[_0x3f2839(0x2f7)]['y']=this[_0x3f2839(0x1da)](_0x2ae1a8[_0x3f2839(0x2f7)]['y'],this[_0x3f2839(0xd1c)],_0x57c277,_0x4911a1,_0x5153b3);}else _0x2ae1a8[_0x3f2839(0x2f7)]['x']=(_0x2ae1a8[_0x3f2839(0x2f7)]['x']*(_0x57c277-0x1)+this[_0x3f2839(0x11d)])/_0x57c277,_0x2ae1a8[_0x3f2839(0x2f7)]['y']=(_0x2ae1a8['skew']['y']*(_0x57c277-0x1)+this['_targetSkewY'])/_0x57c277;this[_0x3f2839(0x524)]--;if(this[_0x3f2839(0x524)]<=0x0)this['onSkewEnd']();},Sprite_Battler['prototype']['onSkewEnd']=function(){const _0x4dc688=_0x12d94d;this[_0x4dc688(0x67b)][_0x4dc688(0x2f7)]['x']=this[_0x4dc688(0x11d)],this[_0x4dc688(0x67b)][_0x4dc688(0x2f7)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x12d94d(0x4e9)]['isSkewing']=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x731)]=function(_0x4de369,_0x2c11fe,_0x2531ee,_0x1b5361){const _0x57652d=_0x12d94d;if(!this[_0x57652d(0xce0)]())return;if(!this['_distortionSprite'])return;if(this['_targetAngle']===_0x4de369)return;this[_0x57652d(0xd15)]=_0x4de369,this['_angleDuration']=_0x2c11fe,this[_0x57652d(0x3ad)]=_0x2c11fe,this['_angleEasing']=_0x2531ee||_0x57652d(0x148),this['_angleRevertOnFinish']=_0x1b5361,this[_0x57652d(0x230)]===undefined&&(this[_0x57652d(0x230)]=!![]),_0x2c11fe<=0x0&&('fhDhg'===_0x57652d(0xb3d)?(this[_0x57652d(0xc25)]=_0x4de369,this[_0x57652d(0x230)]&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0)):(this[_0x57652d(0x8ca)]=_0x2b10ae,this['_targetHomeY']=_0x3f12a9,this[_0x57652d(0xc45)]=_0x40240e,this['_homeWholeDuration']=_0x4fe492,this[_0x57652d(0x4c7)]=_0x9b16ff,_0x34475e<=0x0&&this[_0x57652d(0x900)]()));},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xc30)]=function(){const _0xc61ad4=_0x12d94d;this[_0xc61ad4(0x8f1)](),this[_0xc61ad4(0xc2d)]();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x8f1)]=function(){const _0x2dacc1=_0x12d94d;if(this[_0x2dacc1(0x545)]<=0x0)return;const _0x176b29=this['_angleDuration'],_0x660f14=this[_0x2dacc1(0x3ad)],_0x31acb0=this[_0x2dacc1(0x812)];Imported[_0x2dacc1(0x564)]?this[_0x2dacc1(0xc25)]=this[_0x2dacc1(0x1da)](this['_currentAngle'],this[_0x2dacc1(0xd15)],_0x176b29,_0x660f14,_0x31acb0):this[_0x2dacc1(0xc25)]=(this[_0x2dacc1(0xc25)]*(_0x176b29-0x1)+this[_0x2dacc1(0xd15)])/_0x176b29;this['_angleDuration']--;if(this[_0x2dacc1(0x545)]<=0x0)this[_0x2dacc1(0xb57)]();},Sprite_Battler['prototype']['onAngleEnd']=function(){const _0x4deb94=_0x12d94d;this[_0x4deb94(0xc25)]=this[_0x4deb94(0xd15)],this[_0x4deb94(0x230)]&&(this[_0x4deb94(0xd15)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xc95)]=function(){const _0x4127c5=_0x12d94d;return this[_0x4127c5(0x545)]>0x0;},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xc2d)]=function(){const _0x4317d8=_0x12d94d;if(!this[_0x4317d8(0x67b)])return;const _0x499476=this[_0x4317d8(0xc25)],_0x503ae6=this['scale']['x'],_0x36251e=this[_0x4317d8(0x78b)][_0x4317d8(0xc83)]()?-0x1:0x1;this[_0x4317d8(0x67b)][_0x4317d8(0x5ff)]=_0x499476*_0x503ae6*_0x36251e;const _0x58acbf=this[_0x4317d8(0x67b)][_0x4317d8(0xc3b)]['y'];this['_distortionSprite']['y']=this[_0x4317d8(0xd17)]*-0.5*(0x2-_0x58acbf),this['_distortionSprite']['y']=Math['ceil'](this[_0x4317d8(0x67b)]['y']);const _0x20ec42=[this['_mainSprite'],this[_0x4317d8(0x348)],this['_dragonbonesSpriteContainer']];for(const _0x3b784c of _0x20ec42){if(_0x4317d8(0x91e)==='YwAHE'){if(!_0x1c49c4['SkillsStatesCore']['CheckVisibleBattleNotetags'](this[_0x4317d8(0xac6)],_0x1b89a1))return!![];if(!_0x5f3cdc[_0x4317d8(0x51b)][_0x4317d8(0x37e)](this[_0x4317d8(0xac6)],_0x4ce851))return!![];if(!_0x51ad9e['SkillsStatesCore'][_0x4317d8(0xe1)](this[_0x4317d8(0xac6)],_0x1ad311))return!![];}else{if(!_0x3b784c)continue;_0x3b784c['y']=this[_0x4317d8(0xd17)]*0.5;}}this[_0x4317d8(0xcc3)]&&(this['_shadowScaleX']=this['_shadowScaleX']??0x1,this['_shadowScaleY']=this[_0x4317d8(0xaf8)]??0x1,this['_shadowSprite'][_0x4317d8(0xc3b)]['x']=this[_0x4317d8(0x67b)]['scale']['x']*this[_0x4317d8(0x9bd)],this[_0x4317d8(0xcc3)][_0x4317d8(0xc3b)]['y']=this['_distortionSprite']['scale']['y']*this[_0x4317d8(0xaf8)]);},VisuMZ[_0x12d94d(0xadf)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x65e)],Sprite_Actor['prototype'][_0x12d94d(0x65e)]=function(){const _0x5cf625=_0x12d94d;VisuMZ[_0x5cf625(0xadf)][_0x5cf625(0xb48)][_0x5cf625(0xba3)](this),VisuMZ['BattleCore']['Settings']['HpGauge'][_0x5cf625(0xb8a)]&&this['createHpGaugeSprite']();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x3ef)]=Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x985)],Sprite_Enemy['prototype'][_0x12d94d(0x985)]=function(){const _0x461688=_0x12d94d;VisuMZ[_0x461688(0xadf)]['Settings']['HpGauge'][_0x461688(0xccc)]&&this['createHpGaugeSprite'](),VisuMZ[_0x461688(0xadf)][_0x461688(0x3ef)][_0x461688(0xba3)](this);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x8e9)]=function(){const _0x246f6d=_0x12d94d;if(!ConfigManager['visualHpGauge'])return;if(this[_0x246f6d(0xc50)]===Sprite_SvEnemy)return;const _0x461b60=VisuMZ[_0x246f6d(0xadf)][_0x246f6d(0xb08)][_0x246f6d(0x757)],_0x4fb462=new Sprite_HpGauge();_0x4fb462[_0x246f6d(0x2cc)]['x']=_0x461b60[_0x246f6d(0x798)],_0x4fb462[_0x246f6d(0x2cc)]['y']=_0x461b60[_0x246f6d(0x471)],_0x4fb462[_0x246f6d(0xc3b)]['x']=_0x4fb462[_0x246f6d(0xc3b)]['y']=_0x461b60[_0x246f6d(0x124)],this[_0x246f6d(0x137)]=_0x4fb462,this['addChild'](this[_0x246f6d(0x137)]),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager['addChildToUiContainer'](this[_0x246f6d(0x137)]);},VisuMZ['BattleCore'][_0x12d94d(0x9c)]=Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xcf1)],Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xcf1)]=function(_0x3b6b4f){const _0x33c411=_0x12d94d,_0x2a9f46=this['_battler'];VisuMZ[_0x33c411(0xadf)]['Sprite_Battler_setBattler'][_0x33c411(0xba3)](this,_0x3b6b4f),this[_0x33c411(0x907)](_0x3b6b4f);if(_0x2a9f46!==_0x3b6b4f)this[_0x33c411(0x725)]();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x907)]=function(_0x381d54){const _0x5099fe=_0x12d94d;if(!_0x381d54)return;if(!this[_0x5099fe(0x137)])return;if(_0x381d54[_0x5099fe(0xc83)]()){}else{if(_0x381d54[_0x5099fe(0x2c3)]()){if(this[_0x5099fe(0xc50)]===Sprite_SvEnemy&&!_0x381d54['hasSvBattler']())return;}}this[_0x5099fe(0x137)][_0x5099fe(0x5bb)](_0x381d54,'hp');},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x41e)]=function(){const _0x8e5957=_0x12d94d;return this['_battler']&&this[_0x8e5957(0x78b)][_0x8e5957(0x41e)]();},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x79)]=function(){const _0x4a6c45=_0x12d94d,_0x4fb571=this['_mainSprite']['bitmap'];if(!_0x4fb571)return;const _0x31c692=_0x4fb571[_0x4a6c45(0xa80)];let _0x3c94b5=_0x4fb571[_0x4a6c45(0xd17)];if(this[_0x4a6c45(0x78b)][_0x4a6c45(0xb91)]()){if(this[_0x4a6c45(0x950)])_0x3c94b5=Math[_0x4a6c45(0x660)](0x0,this[_0x4a6c45(0x950)][_0x4a6c45(0xd17)]-0x4);}this[_0x4a6c45(0x73)]['setFrame'](0x0,0x0,_0x31c692,_0x3c94b5),this[_0x4a6c45(0x422)](0x0,0x0,_0x31c692,_0x3c94b5);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xa6)]=function(){const _0x24db6e=_0x12d94d;if(!this[_0x24db6e(0x78b)])return;if(!this[_0x24db6e(0x137)])return;const _0x2dcc75=VisuMZ[_0x24db6e(0xadf)][_0x24db6e(0xb08)]['HpGauge'],_0x1076f0=this[_0x24db6e(0x137)];_0x1076f0[_0x24db6e(0x9bf)]=this[_0x24db6e(0xca0)]();const _0x7db5b9=_0x2dcc75[_0x24db6e(0x211)],_0x52c22a=_0x2dcc75[_0x24db6e(0x75f)];_0x1076f0['x']=_0x7db5b9,_0x1076f0['x']+=this['_battler'][_0x24db6e(0x2a0)](),_0x1076f0['y']=-this[_0x24db6e(0xd17)]+_0x52c22a,_0x1076f0['y']+=this[_0x24db6e(0x78b)][_0x24db6e(0x8a)](),Spriteset_Battle[_0x24db6e(0x36c)]&&SceneManager['_scene'][_0x24db6e(0x372)]&&(_0x1076f0['x']+=this['x'],_0x1076f0['y']+=this['y']);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xca0)]=function(){const _0x4f8525=_0x12d94d;if(!this[_0x4f8525(0x78b)])return![];if(this[_0x4f8525(0x78b)][_0x4f8525(0xc83)]())return!![];if(this[_0x4f8525(0x78b)][_0x4f8525(0x2b7)]())return![];if(this[_0x4f8525(0x9a8)]<=0x0)return![];const _0x176cf0=this[_0x4f8525(0x78b)][_0x4f8525(0x673)]()['note'];if(_0x176cf0[_0x4f8525(0x214)](/<SHOW HP GAUGE>/i))return!![];if(_0x176cf0['match'](/<HIDE HP GAUGE>/i))return![];const _0x25bf5b=VisuMZ[_0x4f8525(0xadf)]['Settings']['HpGauge'];if(_0x25bf5b['RequiresDefeat']){if(_0x4f8525(0x82f)!==_0x4f8525(0x82f))this[_0x4f8525(0xa0)]=_0x3b4d1a;else{if(_0x25bf5b[_0x4f8525(0x3f0)]&&BattleManager[_0x4f8525(0x7d0)]())return!![];if(this['_battler'][_0x4f8525(0x2e6)])return![];return this[_0x4f8525(0x78b)][_0x4f8525(0x4f0)]();}}return!![];},VisuMZ['BattleCore']['Sprite_Battler_isMoving']=Sprite_Battler['prototype'][_0x12d94d(0x3fe)],Sprite_Battler['prototype'][_0x12d94d(0x3fe)]=function(){const _0x5d847c=_0x12d94d;if(!this['_battler'])return![];if(this[_0x5d847c(0xc45)]>0x0)return!![];return VisuMZ[_0x5d847c(0xadf)][_0x5d847c(0x862)]['call'](this);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x5a7)]=Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x620)],Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x620)]=function(_0x5ee10a,_0x3d7891,_0x33e7e7){const _0x1292eb=_0x12d94d;this[_0x1292eb(0xce0)]()&&VisuMZ[_0x1292eb(0xadf)]['Sprite_Battler_startMove'][_0x1292eb(0xba3)](this,_0x5ee10a,_0x3d7891,_0x33e7e7);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xce0)]=function(){const _0x54192a=_0x12d94d;if(this['_battler']&&this['_battler'][_0x54192a(0xb91)]())return![];if(this[_0x54192a(0x78b)]&&!this[_0x54192a(0x78b)][_0x54192a(0x4b5)]())return![];return $gameSystem[_0x54192a(0x701)]();},Sprite_Battler['prototype'][_0x12d94d(0x77)]=function(){},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x9e2)]=function(){const _0x49100a=_0x12d94d;this[_0x49100a(0x620)](0x0,0x0,0xc);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x3b0)]=function(){},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0x7b3)]=function(){const _0x17a907=_0x12d94d,_0x47931c=VisuMZ[_0x17a907(0xadf)]['Settings'][_0x17a907(0x58b)],_0x35f089=this[_0x17a907(0x78b)]&&this[_0x17a907(0x78b)][_0x17a907(0xc83)]()?0x1:-0x1,_0x258049=this['_baseX']-this[_0x17a907(0xb94)]+_0x35f089*_0x47931c[_0x17a907(0x71e)],_0x23c28a=this[_0x17a907(0x59e)]-this[_0x17a907(0xc55)]+_0x35f089*_0x47931c['FlinchDistanceY'],_0x29201f=_0x47931c[_0x17a907(0x7f5)];this[_0x17a907(0x620)](_0x258049,_0x23c28a,_0x29201f);},Sprite_Battler[_0x12d94d(0x4e9)]['startShakeFlinch']=function(_0x186016,_0x5068f2){const _0x31c73e=_0x12d94d,_0x1f1003=VisuMZ['BattleCore'][_0x31c73e(0xb08)][_0x31c73e(0x58b)];this[_0x31c73e(0xc36)]=Math[_0x31c73e(0xbeb)]((_0x1f1003[_0x31c73e(0xbc)]??0x18)*_0x5068f2),this['_shakeFlinchPower']=Math['max'](this['_shakeFlinchPower'],_0x186016);},Sprite_Battler[_0x12d94d(0x4e9)][_0x12d94d(0xad4)]=function(){const _0x23f7d9=_0x12d94d,_0x334de6=VisuMZ[_0x23f7d9(0xadf)]['Settings']['Actor'];if(!(_0x334de6[_0x23f7d9(0x9ac)]??![]))return;if(this[_0x23f7d9(0xc36)]>0x0){const _0x47fab0=this[_0x23f7d9(0xc36)];this[_0x23f7d9(0x4e7)]=this[_0x23f7d9(0x4e7)]*(_0x47fab0-0x1)/_0x47fab0,this[_0x23f7d9(0xc36)]--,this[_0x23f7d9(0xc36)]<=0x0&&(_0x23f7d9(0xd1b)!==_0x23f7d9(0x704)?this[_0x23f7d9(0x4e7)]=0x0:(this[_0x23f7d9(0xc25)]=this[_0x23f7d9(0xd15)],this[_0x23f7d9(0x230)]&&(this['_targetAngle']=0x0,this[_0x23f7d9(0xc25)]=0x0)));}this['_shakeFlinchPower']>0x0?(this[_0x23f7d9(0x73)]['x']=Math[_0x23f7d9(0xbec)](this[_0x23f7d9(0x4e7)])*(Math[_0x23f7d9(0x89)]()<0.5?-0x1:0x1),this[_0x23f7d9(0x59e)]!==this['y']&&('pANga'===_0x23f7d9(0xbc3)?this[_0x23f7d9(0x816)]='sideview_ui':(this[_0x23f7d9(0x73)]['y']=this[_0x23f7d9(0xd17)]*0.5,this[_0x23f7d9(0x73)]['y']+=Math[_0x23f7d9(0xbec)](this[_0x23f7d9(0x4e7)])*(Math['random']()<0.5?-0x1:0x1)))):(this[_0x23f7d9(0x73)]['x']=0x0,this[_0x23f7d9(0x73)]['y']=this['height']*0.5);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb06)]=Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x7e6)],Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x7e6)]=function(){const _0xc3eb9b=_0x12d94d;VisuMZ[_0xc3eb9b(0xadf)][_0xc3eb9b(0xb06)]['call'](this),this[_0xc3eb9b(0x9bc)]();},Sprite_Actor['prototype'][_0x12d94d(0xbac)]=function(){const _0x54d299=_0x12d94d;return this[_0x54d299(0x67b)]||this[_0x54d299(0x73)]||this;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xaa)]=Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x127)],Sprite_Actor['prototype']['moveToStartPosition']=function(){},Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x4da)]=function(_0x21156d){const _0x1f90c5=_0x12d94d;if(SceneManager[_0x1f90c5(0xacc)]())return;if(!_0x21156d)return;if(!_0x21156d[_0x1f90c5(0xce0)]())return;VisuMZ[_0x1f90c5(0xadf)][_0x1f90c5(0xaa)]['call'](this);},VisuMZ['BattleCore'][_0x12d94d(0x28a)]=Sprite_Actor[_0x12d94d(0x4e9)]['setActorHome'],Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0xb32)]=function(_0xe381d5){const _0x56f6e1=_0x12d94d;VisuMZ[_0x56f6e1(0xadf)][_0x56f6e1(0xb08)][_0x56f6e1(0x58b)][_0x56f6e1(0x233)]?VisuMZ['BattleCore'][_0x56f6e1(0xb08)][_0x56f6e1(0x58b)][_0x56f6e1(0x233)][_0x56f6e1(0xba3)](this,_0xe381d5):VisuMZ[_0x56f6e1(0xadf)][_0x56f6e1(0x28a)]['call'](this,_0xe381d5);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x8db)]=Sprite_Actor['prototype'][_0x12d94d(0xcf1)],Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0xcf1)]=function(_0x2be8d2){const _0x35c657=_0x12d94d;VisuMZ[_0x35c657(0xadf)][_0x35c657(0x8db)]['call'](this,_0x2be8d2),this[_0x35c657(0x417)](_0x2be8d2);},Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x417)]=function(_0x576102){const _0xf8820c=_0x12d94d;if(!_0x576102)return;if(!this[_0xf8820c(0x73)])return;this['_mainSprite']['anchor']['x']=this[_0xf8820c(0xac6)][_0xf8820c(0x9ab)](),this[_0xf8820c(0x73)]['anchor']['y']=this[_0xf8820c(0xac6)][_0xf8820c(0x687)](),this[_0xf8820c(0x934)]();},VisuMZ['BattleCore'][_0x12d94d(0x2e2)]=Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0xba4)],Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0xba4)]=function(){const _0x35b8b1=_0x12d94d;VisuMZ['BattleCore'][_0x35b8b1(0x2e2)][_0x35b8b1(0xba3)](this);if(this[_0x35b8b1(0xac6)]){if(_0x35b8b1(0x8ec)!==_0x35b8b1(0x8ec)){if(this[_0x35b8b1(0xcda)]())this['_phase']='turn';else this['_forcedBattlers'][_0x35b8b1(0x29c)]>0x0?this['_phase']=_0x35b8b1(0x67a):this[_0x35b8b1(0x6f7)]();}else this[_0x35b8b1(0xa68)](),this[_0x35b8b1(0xac8)]();}},VisuMZ[_0x12d94d(0xadf)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x59c)],Sprite_Actor['prototype'][_0x12d94d(0x59c)]=function(){const _0x11ce94=_0x12d94d;VisuMZ[_0x11ce94(0xadf)][_0x11ce94(0xb24)][_0x11ce94(0xba3)](this);if(this[_0x11ce94(0x73)]&&this[_0x11ce94(0x73)]['bitmap']&&this[_0x11ce94(0x78b)]){if('MMSzP'!==_0x11ce94(0x31c))this[_0x11ce94(0x73)][_0x11ce94(0x222)][_0x11ce94(0x563)]!==this[_0x11ce94(0x78b)][_0x11ce94(0x828)]()&&(this[_0x11ce94(0x73)][_0x11ce94(0x222)][_0x11ce94(0x563)]=this[_0x11ce94(0x78b)]['battlerSmoothImage']());else return'icon';}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x547)]=Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x2f6)],Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x2f6)]=function(){const _0x101cb4=_0x12d94d;VisuMZ['BattleCore'][_0x101cb4(0x547)][_0x101cb4(0xba3)](this),this[_0x101cb4(0x414)]();},Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x414)]=function(){const _0x2f601b=_0x12d94d;if(!this[_0x2f601b(0x73)])return;if(!this['_shadowSprite'])return;this['updateShadowVisibility'](),this['updateShadowPosition']();},Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0xa68)]=function(){const _0x4d2cdc=_0x12d94d;this[_0x4d2cdc(0xc03)][_0x4d2cdc(0xc3b)]['x']=0x1/(this['scale']['x']||0.001),this[_0x4d2cdc(0xc03)]['scale']['y']=0x1/(this[_0x4d2cdc(0xc3b)]['y']||0.001);},Sprite_Actor[_0x12d94d(0x4e9)]['updateStyleOpacity']=function(){const _0x1f2229=_0x12d94d;if(!$gameSystem[_0x1f2229(0x701)]()&&this[_0x1f2229(0xc50)]===Sprite_Actor){const _0xa21526=Scene_Battle[_0x1f2229(0x4e9)][_0x1f2229(0xbb9)]();if(['default',_0x1f2229(0x7e4),_0x1f2229(0x834),_0x1f2229(0xb2d)][_0x1f2229(0x511)](_0xa21526)){if(_0x1f2229(0xa0c)==='ChuYW'){if(!_0xacae13[_0x1f2229(0xb92)]())return;_0x57e581[_0x1f2229(0x592)][_0x1f2229(0x658)](this),_0x3700c6[_0x1f2229(0x4e9)]['terminate'][_0x1f2229(0xba3)](this);}else this[_0x1f2229(0x9a8)]=0x0;}}},Sprite_Actor['prototype'][_0x12d94d(0x5a1)]=function(){const _0x578aec=_0x12d94d,_0x377738=this[_0x578aec(0xac6)];if(_0x377738){const _0x4a4bb0=_0x377738[_0x578aec(0x8fd)]();if(_0x377738[_0x578aec(0x60f)]()||_0x377738[_0x578aec(0xab8)]())this[_0x578aec(0x3e4)](_0x578aec(0x4fa));else{if(_0x4a4bb0===0x3){if('FalVA'===_0x578aec(0x51f)){const _0x347f15=_0x1bc107['parse']('['+_0x41280['$1'][_0x578aec(0x214)](/\d+/g)+']');for(const _0xfc66cb of _0x347f15){if(_0x40a8d9[_0x578aec(0xba9)](_0xfc66cb))return!![];}return![];}else this['startMotion']('dead');}else{if(_0x4a4bb0===0x2)this[_0x578aec(0x3e4)]('sleep');else{if(this[_0x578aec(0x662)])this[_0x578aec(0x3e4)]('escape');else{if(_0x377738[_0x578aec(0x2e8)]()){if(_0x578aec(0x3b1)===_0x578aec(0x3b1))this[_0x578aec(0x3e4)](_0x578aec(0x48a));else{if(!_0x283183[_0x578aec(0xb92)]())return;_0x4152f5[_0x578aec(0x2ec)](_0x48bad6,_0x2d3e47);const _0x416eec=_0x5e6bd6[_0x578aec(0x664)](),_0x251c90=_0x541527['_action'],_0xbe1b2a=_0x25cd8a[_0x578aec(0xa37)],_0x57a427=_0x2526c6[_0x578aec(0x3c0)]?_0x44793f['_allTargets']['slice'](0x0):[],_0x34dc43=_0x2dd595['_logWindow'];if(!_0x416eec||!_0x251c90||!_0xbe1b2a)return;if(!_0x251c90[_0x578aec(0xc7)]())return;if(_0x42442b[_0x578aec(0xc48)])_0x34dc43[_0x578aec(0xbce)](_0x578aec(0x581),_0xbe1b2a,_0x57a427,![]);if(_0x4e9cfa[_0x578aec(0x2c7)])_0x34dc43[_0x578aec(0xbce)]('waitForNewLine');if(_0x5d8724[_0x578aec(0x8a8)])_0x34dc43[_0x578aec(0xbce)]('waitForEffect');if(_0x757b2f[_0x578aec(0x906)])_0x34dc43['push']('clear');if(_0x576b70[_0x578aec(0x854)])_0x34dc43[_0x578aec(0xbce)]('performActionEnd',_0xbe1b2a);if(_0x16db42[_0x578aec(0xcce)])_0x34dc43['push'](_0x578aec(0x522));_0x416eec['setWaitMode'](_0x578aec(0x54d));}}else{if(_0x377738[_0x578aec(0x40e)]())_0x578aec(0xcc6)!==_0x578aec(0x82d)?this['startMotion']('chant'):this['_requestRefresh']=!![];else{if(_0x377738[_0x578aec(0x266)]()||_0x377738[_0x578aec(0x5d8)]()){if('LHtRx'!==_0x578aec(0x864))this[_0x578aec(0x3e4)](_0x578aec(0x93e));else{if(!_0x5401c9[_0x578aec(0xb92)]())return;if(!_0x380903['VisuMZ_2_BattleSystemPTB'])return;if(!_0x4acdc3[_0x578aec(0x2ca)]())return;_0x1ba55a[_0x578aec(0x2ec)](_0x585621,_0xd236a7);const _0xe7d61=_0x437dbe[_0x578aec(0xa37)][_0x578aec(0x73c)](),_0x399153=_0x4e6a78['Override'],_0x551746=_0x8be627[_0x578aec(0xce4)]||_0x578aec(0x779),_0x246766=_0x56a251[_0x578aec(0x1cd)]||_0x578aec(0x779),_0x1a688b=_0x597c9f[_0x578aec(0x74c)]||0x0,_0x2e7082=_0x2140c9[_0x578aec(0xb7c)]||0x0;(_0xe7d61[_0x578aec(0x733)]()||_0x399153)&&(_0x399153&&(_0xe7d61[_0x578aec(0xabd)]=_0xe7d61['_ptbActionCost']||{},_0xe7d61[_0x578aec(0xabd)][_0x578aec(0xc38)]=0x0),_0xe7d61[_0x578aec(0x970)](_0x551746,_0x246766,_0x1a688b,_0x2e7082));}}else{if(_0x4a4bb0===0x1)_0x578aec(0x3d4)===_0x578aec(0x3d4)?this[_0x578aec(0x3e4)](_0x578aec(0x36b)):(_0x318d48+=_0x572967,_0x54041a+=_0x2e4400);else{if(_0x377738['isDying']()){if('lLOBR'!=='DZqMO')this[_0x578aec(0x3e4)]('dying');else for(const _0xa76f2a of _0x32d0a3){const _0x4b6f79=_0x12f443[0x0][_0x578aec(0x3d0)](_0xa76f2a[0x0]),_0x38207c=_0x5325a4[0x1][_0x578aec(0x3d0)](_0xa76f2a[0x1]),_0x7c505d=new _0x6d88e9(_0x28ebab[_0x578aec(0x3d0)](_0x38207c),'i');_0x196089[_0x4b6f79]=_0x7c505d;}}else{if(_0x377738[_0x578aec(0x8de)]())this[_0x578aec(0x3e4)](_0x578aec(0x4fa));else _0x377738[_0x578aec(0x5bf)]()?this[_0x578aec(0x3e4)]('wait'):this[_0x578aec(0x3e4)](_0x578aec(0x4fa));}}}}}}}}}}},Sprite_Actor[_0x12d94d(0x4e9)]['retreat']=function(){const _0x12f000=_0x12d94d,_0x134fc8=0xa,_0x32929e=0x12c*_0x134fc8,_0x56e4c3=0x1e*_0x134fc8;this[_0x12f000(0x620)](_0x32929e,0x0,_0x56e4c3);},Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x72d)]=function(){const _0x16d648=_0x12d94d;Sprite_Battler[_0x16d648(0x4e9)][_0x16d648(0x72d)][_0x16d648(0xba3)](this);},Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0xb7a)]=function(){const _0x54591a=_0x12d94d;return Sprite_Battler[_0x54591a(0x380)];},Sprite_Weapon['prototype']['animationWait']=function(){const _0xf524dd=_0x12d94d;return Sprite_Battler[_0xf524dd(0x380)];},Sprite_Actor[_0x12d94d(0x4e9)]['setupMotion']=function(){},Sprite_Actor['prototype'][_0x12d94d(0x420)]=function(){},Sprite_Actor['prototype']['updateMotionCount']=function(){const _0x558638=_0x12d94d;if(this[_0x558638(0x527)]&&++this[_0x558638(0xb1)]>=this[_0x558638(0xb7a)]()){if(this[_0x558638(0x527)][_0x558638(0xc59)])this[_0x558638(0x800)]=(this[_0x558638(0x800)]+0x1)%0x4;else{if(this[_0x558638(0x800)]<0x2){if(_0x558638(0x6c7)==='dotOJ')return _0x202684;else this[_0x558638(0x800)]++;}else this['refreshMotion']();}this[_0x558638(0xb1)]=0x0;}},Sprite_Actor[_0x12d94d(0x4e9)]['forceMotion']=function(_0x451bd8){const _0x51fc69=_0x12d94d;if(_0x451bd8===_0x51fc69(0x240))this['_checkOn']=!![];if(this[_0x51fc69(0x78b)]&&this[_0x51fc69(0x78b)][_0x51fc69(0xb91)]()){this['_motion']=Sprite_Actor['MOTIONS']['dead'];return;}const _0x519bd5=Sprite_Actor['MOTIONS'][_0x451bd8];this['_motion']=_0x519bd5,this[_0x51fc69(0xb1)]=0x0,this[_0x51fc69(0x800)]=0x0;},Sprite_Actor['prototype'][_0x12d94d(0x562)]=function(_0x16b7ce){const _0x5e1b6c=_0x12d94d;if(this[_0x5e1b6c(0x41e)]())return;this['adjustWeaponSpriteOffset'](),this[_0x5e1b6c(0x6a9)][_0x5e1b6c(0x5bb)](_0x16b7ce),this[_0x5e1b6c(0xac6)][_0x5e1b6c(0xd10)]();},Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x465)]=function(){const _0x45e960=_0x12d94d;let _0x429760=-0x10,_0x2e9cb6=this[_0x45e960(0xd17)]*0.5;const _0x2b9669=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x3a1109=this[_0x45e960(0x78b)][_0x45e960(0x999)]()['map'](_0x425a56=>_0x425a56&&_0x425a56[_0x45e960(0x7ba)][_0x45e960(0x214)](_0x2b9669)?Number(RegExp['$1']):0x0),_0x4536cf=this['_battler']['traitObjects']()[_0x45e960(0x43b)](_0x62a81=>_0x62a81&&_0x62a81['note'][_0x45e960(0x214)](_0x2b9669)?Number(RegExp['$2']):0x0);_0x429760=_0x3a1109['reduce']((_0x2c97d2,_0x34896f)=>_0x2c97d2+_0x34896f,_0x429760),_0x2e9cb6=_0x4536cf[_0x45e960(0xc08)]((_0x1d699a,_0x415439)=>_0x1d699a+_0x415439,_0x2e9cb6),this[_0x45e960(0x6a9)]['x']=_0x429760,this[_0x45e960(0x6a9)]['y']=_0x2e9cb6,this[_0x45e960(0x6a9)]['update']();},Sprite_Weapon[_0x12d94d(0x4e9)][_0x12d94d(0x5bb)]=function(_0x45f97f){const _0x3d70bc=_0x12d94d;this['_weaponImageId']=_0x45f97f,this[_0x3d70bc(0xbdf)]=-0x1,this[_0x3d70bc(0x800)]=0x0,this['loadBitmap'](),this[_0x3d70bc(0x838)]();},Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x5de)]=function(){},Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x77)]=function(){const _0x2380d6=_0x12d94d,_0x34cba8=VisuMZ[_0x2380d6(0xadf)][_0x2380d6(0xb08)][_0x2380d6(0x3dd)],_0x22a05f=_0x34cba8['StepDistanceX'],_0x5dc530=_0x34cba8[_0x2380d6(0xcd0)],_0x1dae4d=_0x34cba8[_0x2380d6(0xb4f)];this['startMove'](-_0x22a05f,-_0x5dc530,_0x1dae4d);},VisuMZ['BattleCore'][_0x12d94d(0x590)]=Sprite_Actor[_0x12d94d(0x4e9)]['updateFrame'],Sprite_Actor[_0x12d94d(0x4e9)][_0x12d94d(0x838)]=function(){const _0x257057=_0x12d94d;this['hasStaticSvBattler']()?_0x257057(0x913)!==_0x257057(0x913)?_0x5387af[_0x257057(0xadf)][_0x257057(0x398)][_0x257057(0xba3)](this,_0x194a2a,_0x80cc55):this['updateStaticSvBattlerFrames']():(this[_0x257057(0x178)](),VisuMZ[_0x257057(0xadf)][_0x257057(0x590)][_0x257057(0xba3)](this));},Sprite_Actor[_0x12d94d(0x4e9)]['applyFreezeMotionFrames']=function(){const _0x3ec311=_0x12d94d;if(this['_battler']&&this['_battler']['_freezeMotionData']){if(_0x3ec311(0xb58)==='xvulV')_0x2d2f02=_0x5d41bc(_0x225708['$1']);else{const _0x367080=this[_0x3ec311(0x78b)][_0x3ec311(0xd21)];this[_0x3ec311(0x527)]=Sprite_Actor[_0x3ec311(0xaa4)][_0x367080[_0x3ec311(0xbc6)]],this[_0x3ec311(0x800)]=_0x367080[_0x3ec311(0x236)];const _0x1e45e0=this[_0x3ec311(0x6a9)];_0x1e45e0[_0x3ec311(0x91f)](_0x367080[_0x3ec311(0x5cd)],_0x367080['pattern']),this[_0x3ec311(0x465)]();}}},Sprite_Weapon[_0x12d94d(0x4e9)]['freezeFrame']=function(_0x5ad358,_0x4d7e71){const _0x2a7423=_0x12d94d;this['_weaponImageId']=_0x5ad358,this[_0x2a7423(0xbdf)]=-Infinity,this['_pattern']=_0x4d7e71,this[_0x2a7423(0x22a)](),this[_0x2a7423(0x838)]();},Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x7e6)]=function(){const _0x359edd=_0x12d94d;Sprite_Battler[_0x359edd(0x4e9)][_0x359edd(0x7e6)]['call'](this),this['_enemy']=null,this[_0x359edd(0xd06)]=![],this[_0x359edd(0x174)]='',this[_0x359edd(0x59a)]=0x0,this[_0x359edd(0x890)]=null,this[_0x359edd(0x3c1)]=0x0,this['_shake']=0x0,this[_0x359edd(0xa6d)](),this[_0x359edd(0x985)]();},VisuMZ['BattleCore'][_0x12d94d(0x694)]=Sprite_Enemy['prototype'][_0x12d94d(0xba4)],Sprite_Enemy['prototype'][_0x12d94d(0xba4)]=function(){const _0x53498f=_0x12d94d;VisuMZ['BattleCore']['Sprite_Enemy_update'][_0x53498f(0xba3)](this),this[_0x53498f(0x934)]();},Sprite_Enemy[_0x12d94d(0x4e9)]['createMainSprite']=function(){const _0x29bfbb=_0x12d94d;this[_0x29bfbb(0x73)]=new Sprite(),this[_0x29bfbb(0x73)][_0x29bfbb(0x2cc)]['x']=0.5,this[_0x29bfbb(0x73)][_0x29bfbb(0x2cc)]['y']=0x1,this[_0x29bfbb(0xa26)](this['_mainSprite']),this[_0x29bfbb(0x9bc)]();},Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0xbac)]=function(){const _0x561dbf=_0x12d94d;return this[_0x561dbf(0x67b)]||this['_mainSprite']||this;},Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x22a)]=function(_0x52fdd5){const _0x2e3dc8=_0x12d94d;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x2e3dc8(0xad)]()){if(_0x2e3dc8(0xb43)!==_0x2e3dc8(0xb43)){_0xe8e410['_currentActor']['setActionState'](_0x2e3dc8(0x386));const _0x15e6fd=_0x5a90ab[_0x2e3dc8(0x6b5)]['battler']();if(_0x15e6fd)_0x15e6fd[_0x2e3dc8(0x9e2)]();}else{const _0x1786a5=this[_0x2e3dc8(0xbb4)][_0x2e3dc8(0xaa8)]();this[_0x2e3dc8(0x222)]=new Bitmap(_0x1786a5[_0x2e3dc8(0xa80)],_0x1786a5['height']),this[_0x2e3dc8(0x73)][_0x2e3dc8(0x222)]=new Bitmap(0x1,0x1);}}else{if($gameSystem[_0x2e3dc8(0x701)]()){const _0x55ab7c=ImageManager[_0x2e3dc8(0x129)](_0x52fdd5);_0x55ab7c['addLoadListener'](this['onStaticEnemyBitmapLoad'][_0x2e3dc8(0xb99)](this,_0x55ab7c));}else{const _0x6c70cc=ImageManager[_0x2e3dc8(0xb4a)](_0x52fdd5);_0x6c70cc['addLoadListener'](this[_0x2e3dc8(0x2a3)][_0x2e3dc8(0xb99)](this,_0x6c70cc));}}},Sprite_Enemy['prototype'][_0x12d94d(0x2a3)]=function(_0x305db1){const _0x23f464=_0x12d94d;this['_mainSprite'][_0x23f464(0x222)]=_0x305db1,this[_0x23f464(0x222)]=new Bitmap(_0x305db1['width'],_0x305db1[_0x23f464(0xd17)]);},VisuMZ['BattleCore'][_0x12d94d(0x756)]=Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x353)],Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x353)]=function(_0x33d30c){const _0x257046=_0x12d94d;this[_0x257046(0x73)]&&this['_mainSprite']['setHue'](_0x33d30c);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb4d)]=Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x444)],Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x444)]=function(){const _0x45a338=_0x12d94d;this['allowCollapse']()?VisuMZ[_0x45a338(0xadf)][_0x45a338(0xb4d)][_0x45a338(0xba3)](this):(this[_0x45a338(0xd06)]=!this[_0x45a338(0xbb4)][_0x45a338(0x2b7)](),!this['_appeared']&&(this[_0x45a338(0x9a8)]=0x0));},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x7e0)]=Sprite_Enemy['prototype'][_0x12d94d(0xcf0)],Sprite_Enemy['prototype']['updateCollapse']=function(){const _0x365c20=_0x12d94d;if(this[_0x365c20(0x73d)]())VisuMZ[_0x365c20(0xadf)][_0x365c20(0x7e0)]['call'](this);},Sprite_Enemy['prototype'][_0x12d94d(0x838)]=function(){const _0x171cf3=_0x12d94d;Sprite_Battler[_0x171cf3(0x4e9)][_0x171cf3(0x838)]['call'](this);const _0x19dca3=this[_0x171cf3(0xbac)]()||this;if(!_0x19dca3)return;if(!_0x19dca3['bitmap']){if(_0x171cf3(0xb04)!==_0x171cf3(0xb04))return 0x1;else _0x19dca3[_0x171cf3(0x222)]=new Bitmap(this['width']||0x1,this[_0x171cf3(0xd17)]||0x1);}if(this['_effectType']===_0x171cf3(0x29f))this[_0x171cf3(0x73)][_0x171cf3(0x422)](0x0,0x0,this[_0x171cf3(0x73)][_0x171cf3(0xa80)]||0x1,this['_effectDuration']);else{if(_0x171cf3(0xbae)===_0x171cf3(0x639))this[_0x171cf3(0x786)](_0x4578f8,_0x566eed['x'],_0x12ae32['y'],_0x32494e);else{let _0x596263=0x1;if(_0x19dca3&&_0x19dca3[_0x171cf3(0x222)])_0x596263=_0x19dca3[_0x171cf3(0x222)][_0x171cf3(0xa80)];let _0x247f1f=0x1;if(this['bitmap'])_0x247f1f=this[_0x171cf3(0x222)][_0x171cf3(0xd17)];_0x19dca3[_0x171cf3(0x422)](0x0,0x0,_0x596263,_0x247f1f);}}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x2b1)]=Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x26e)],Sprite_Enemy[_0x12d94d(0x4e9)]['updateBossCollapse']=function(){const _0x141757=_0x12d94d;if(this['allowCollapse']())VisuMZ['BattleCore'][_0x141757(0x2b1)]['call'](this);},Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x3fe)]=function(){return Sprite_Battler['prototype']['isMoving']['call'](this);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb95)]=Sprite_Enemy['prototype'][_0x12d94d(0xa68)],Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0xa68)]=function(){const _0x179aa1=_0x12d94d;VisuMZ['BattleCore'][_0x179aa1(0xb95)][_0x179aa1(0xba3)](this),this[_0x179aa1(0x746)]();},Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x746)]=function(){const _0x31336b=_0x12d94d,_0x5629de=VisuMZ[_0x31336b(0xadf)][_0x31336b(0xb08)][_0x31336b(0x1ec)];if(_0x5629de['NameAttachStateIcon']&&!_0x5629de[_0x31336b(0x96d)]){this[_0x31336b(0xc18)][_0x31336b(0x9a8)]=0x0;return;}this[_0x31336b(0xc18)]['x']=0x0,this[_0x31336b(0xc18)]['x']+=this['_battler'][_0x31336b(0x2a0)]();let _0x3b5060=0x1;if(this['bitmap'])_0x3b5060=this[_0x31336b(0x222)]['height'];this['_stateIconSprite']['y']=-_0x3b5060-this['_stateIconSprite'][_0x31336b(0xd17)]-0x4,this['_stateIconSprite']['y']+=this[_0x31336b(0x78b)][_0x31336b(0x8a)](),this[_0x31336b(0xc18)][_0x31336b(0xc3b)]['x']=0x1/(this[_0x31336b(0xc3b)]['x']||0.001),this[_0x31336b(0xc18)]['scale']['y']=0x1/(this[_0x31336b(0xc3b)]['y']||0.001),this[_0x31336b(0xad)]()&&(this['_svBattlerSprite'][_0x31336b(0xc03)]['scale']['x']=-0x1/(this[_0x31336b(0xc3b)]['x']||0.001),this[_0x31336b(0x348)][_0x31336b(0xc03)]['scale']['y']=0x1/(this[_0x31336b(0xc3b)]['y']||0.001));},VisuMZ[_0x12d94d(0xadf)]['Sprite_Enemy_setBattler']=Sprite_Enemy['prototype'][_0x12d94d(0xcf1)],Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0xcf1)]=function(_0x15f94b){const _0x4ddade=_0x12d94d;VisuMZ[_0x4ddade(0xadf)][_0x4ddade(0x7a8)]['call'](this,_0x15f94b),this[_0x4ddade(0x392)](_0x15f94b);},Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x392)]=function(_0x13a526){const _0x5b079b=_0x12d94d;!this[_0x5b079b(0x348)]&&(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x13a526),this[_0x5b079b(0x9bc)]()),this[_0x5b079b(0x348)][_0x5b079b(0xcf1)](_0x13a526);},Sprite_Enemy[_0x12d94d(0x4e9)]['hasSvBattler']=function(){const _0x40402f=_0x12d94d;return this[_0x40402f(0xbb4)]&&this[_0x40402f(0xbb4)]['hasSvBattler']();},Sprite_Enemy['prototype'][_0x12d94d(0x73d)]=function(){const _0xf0e959=_0x12d94d;return this['hasSvBattler']()?this[_0xf0e959(0xbb4)][_0xf0e959(0x73d)]():!![];},Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x5a1)]=function(){const _0x38aa98=_0x12d94d;if(this[_0x38aa98(0xad)]()){if(_0x38aa98(0xa0a)!==_0x38aa98(0xa0a)){const _0x3aa4ef=_0xb4604a['indexOf'](_0x1105b6[_0x38aa98(0x97e)]()[_0x38aa98(0xc39)]());_0x3aa4ef>=0x0&&_0x3aa4ef<=0x7&&_0x64915a[_0x38aa98(0x382)](_0x3aa4ef)&&_0x1750da[_0x38aa98(0x7ef)](_0x3aa4ef);}else this[_0x38aa98(0x348)][_0x38aa98(0x5a1)]();}},Sprite_Enemy[_0x12d94d(0x4e9)][_0x12d94d(0x4dc)]=function(_0x40d303){const _0x19357b=_0x12d94d;if(this['hasSvBattler']())this[_0x19357b(0x348)][_0x19357b(0x4dc)](_0x40d303);},Sprite_Enemy['prototype'][_0x12d94d(0x562)]=function(_0x1c5dcb){const _0x4b9068=_0x12d94d;if(this[_0x4b9068(0xad)]())this[_0x4b9068(0x348)][_0x4b9068(0x562)](_0x1c5dcb);},Sprite_Enemy['prototype']['stepForward']=function(){const _0x44ed4b=_0x12d94d,_0x1d2c9=VisuMZ[_0x44ed4b(0xadf)]['Settings'][_0x44ed4b(0x3dd)],_0x5e18ba=_0x1d2c9[_0x44ed4b(0x60e)],_0x166c93=_0x1d2c9[_0x44ed4b(0xcd0)],_0x5c33d4=_0x1d2c9['StepDuration'];this[_0x44ed4b(0x620)](_0x5e18ba,_0x166c93,_0x5c33d4);};function Sprite_SvEnemy(){const _0x3a2148=_0x12d94d;this[_0x3a2148(0x8df)](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x12d94d(0x3d9)](Sprite_Actor[_0x12d94d(0x4e9)]),Sprite_SvEnemy[_0x12d94d(0x4e9)][_0x12d94d(0xc50)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x12d94d(0x8df)]=function(_0x4492a8){const _0x38bba8=_0x12d94d;Sprite_Actor['prototype'][_0x38bba8(0x8df)]['call'](this,_0x4492a8),this[_0x38bba8(0xc3b)]['x']=-0x1,this[_0x38bba8(0xc03)][_0x38bba8(0xc3b)]['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x12d94d(0x6b6)]=function(){},Sprite_SvEnemy[_0x12d94d(0x4e9)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x12d94d(0x4e9)]['setActorHome']=function(_0x302927){},Sprite_SvEnemy[_0x12d94d(0x4e9)]['updateShadow']=function(){},Sprite_SvEnemy['prototype']['updateShadowPosition']=function(){},Sprite_SvEnemy['prototype'][_0x12d94d(0xa68)]=function(){const _0x5cffd1=_0x12d94d;this['_stateSprite'][_0x5cffd1(0x9bf)]=![];},Sprite_SvEnemy[_0x12d94d(0x4e9)]['updateBitmap']=function(){const _0x4ddd03=_0x12d94d;Sprite_Battler[_0x4ddd03(0x4e9)][_0x4ddd03(0x59c)][_0x4ddd03(0xba3)](this);const _0x54c70f=this[_0x4ddd03(0xac6)]['svBattlerName']();this[_0x4ddd03(0x174)]!==_0x54c70f&&(this[_0x4ddd03(0x174)]=_0x54c70f,this[_0x4ddd03(0x73)][_0x4ddd03(0x222)]=ImageManager[_0x4ddd03(0x1d5)](_0x54c70f));if(this['_mainSprite']&&this[_0x4ddd03(0x73)]['bitmap']&&this['_battler']){if(_0x4ddd03(0x6a1)!==_0x4ddd03(0x651))this['_mainSprite'][_0x4ddd03(0x222)][_0x4ddd03(0x563)]!==this[_0x4ddd03(0x78b)]['battlerSmoothImage']()&&(this['_mainSprite'][_0x4ddd03(0x222)][_0x4ddd03(0x563)]=this[_0x4ddd03(0x78b)][_0x4ddd03(0x828)]());else{const _0x31dc3f=_0x164df1(_0x2bc4b5['$1'])['split'](/[\r\n]+/)[_0x4ddd03(0x8fc)](''),_0x17ca2c=_0x39def6[_0x4ddd03(0x329)](_0x31dc3f);_0x5ba325[_0x4ddd03(0xa58)]=_0x33cefc[_0x4ddd03(0x14f)](_0x17ca2c);}}},Sprite_SvEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x3b0)]=function(){},Sprite_SvEnemy[_0x12d94d(0x4e9)]['startMove']=function(_0x30bdcd,_0x2270c8,_0x4716b6){const _0x48198b=_0x12d94d;if(this['parent'])this[_0x48198b(0x8e6)][_0x48198b(0x620)](_0x30bdcd,_0x2270c8,_0x4716b6);},Sprite_SvEnemy['prototype']['refreshMotion']=function(){const _0x1e0344=_0x12d94d,_0x35e3cb=this[_0x1e0344(0xac6)];if(_0x35e3cb){if(_0x1e0344(0xc4)!=='SHDle'){const _0x48b1c8=_0x35e3cb[_0x1e0344(0x8fd)]();if(_0x35e3cb[_0x1e0344(0x60f)]()||_0x35e3cb[_0x1e0344(0xab8)]())this['startMotion'](_0x1e0344(0x4fa));else{if(_0x48b1c8===0x3){if('OZgiK'!==_0x1e0344(0x38a)){const _0x2c65c6=this[_0x1e0344(0xac6)][_0x1e0344(0x634)]();for(const _0x1bb475 of _0x2c65c6){this['addSkillTypeCommand'](_0x1bb475);}}else this[_0x1e0344(0x3e4)](_0x1e0344(0xb01));}else{if(_0x48b1c8===0x2)_0x1e0344(0x188)!=='SyIuS'?this[_0x1e0344(0xbce)](_0x1e0344(0xac9),_0x499470):this['startMotion'](_0x1e0344(0x25a));else{if(_0x35e3cb['isChanting']())'yjsQD'!=='TxbWE'?this[_0x1e0344(0x3e4)](_0x1e0344(0xa67)):this[_0x1e0344(0x318)]()[_0x1e0344(0xbd0)](_0x5878f6);else{if(_0x35e3cb[_0x1e0344(0x266)]()||_0x35e3cb[_0x1e0344(0x5d8)]())'AToWj'===_0x1e0344(0x3ba)?(this[_0x1e0344(0xd15)]=0x0,this[_0x1e0344(0xc25)]=0x0):this[_0x1e0344(0x3e4)](_0x1e0344(0x93e));else{if(_0x48b1c8===0x1){if(_0x1e0344(0x92)==='pWjqj')this[_0x1e0344(0x3e4)](_0x1e0344(0x36b));else{let _0x56657b=_0x1744a5[_0x1e0344(0x5d4)];_0x1a43b3/=_0x56657b[_0x1e0344(0x29c)],this[_0x1e0344(0xcfb)]()&&(_0x194dd0*=this[_0x1e0344(0xc1)]()[_0x1e0344(0x8a9)]()+0x1),_0x5a197e=_0x4836de>0x0?_0x4b5e05[_0x1e0344(0xbeb)](_0x4d8dcb):_0x1ef5cf[_0x1e0344(0x28f)](_0x4dc1ca);}}else{if(_0x35e3cb[_0x1e0344(0xd14)]())_0x1e0344(0x1f0)!==_0x1e0344(0x55d)?this[_0x1e0344(0x3e4)]('dying'):this['_attackAnimationId']=_0x54f33e(_0x112b0e['$1']);else{if(_0x35e3cb[_0x1e0344(0x8de)]()){if(_0x1e0344(0xd13)!=='VuWvf')this[_0x1e0344(0x3e4)]('walk');else{if(this[_0x1e0344(0xaa2)]()[_0x1e0344(0x7ba)][_0x1e0344(0x214)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0xc73dc0(_0x2201fc['$1']);else{if(this[_0x1e0344(0xaa2)]()[_0x1e0344(0x7ba)][_0x1e0344(0x214)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x17cbb5(_0xdc5172['$2']);}return 0x0;}}else this[_0x1e0344(0x3e4)](_0x35e3cb[_0x1e0344(0xaa8)]()[_0x1e0344(0xb75)]||'walk');}}}}}}}}else _0x36a67d=_0xd48cb[_0x1e0344(0x1ef)](_0x566f26),_0x2165bb[_0x1e0344(0xadf)]['Game_Enemy_setup'][_0x1e0344(0xba3)](this,_0x3bab91,_0x2da7cd,_0x2f201e),_0x3d156b[_0x1e0344(0x663)]&&this[_0x1e0344(0x134)](),this[_0x1e0344(0x9d4)](),this['setupBattleCoreData'](),_0x13308e['VisuMZ_1_ElementStatusCore']&&this[_0x1e0344(0xc2c)]();}},Sprite_SvEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x869)]=function(){const _0xda4202=_0x12d94d;return this[_0xda4202(0x8e6)]?this[_0xda4202(0x8e6)][_0xda4202(0xba)]===0x0&&this[_0xda4202(0x8e6)]['_offsetY']===0x0:!![];},Sprite_SvEnemy[_0x12d94d(0x4e9)][_0x12d94d(0xa95)]=function(){},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xa4e)]=Sprite_Animation[_0x12d94d(0x4e9)][_0x12d94d(0x391)],Sprite_Animation[_0x12d94d(0x4e9)][_0x12d94d(0x391)]=function(_0x4e7a81){const _0x426b0b=_0x12d94d;return _0x4e7a81[_0x426b0b(0x67b)]?'HwhOE'!==_0x426b0b(0x6e4)?this['targetDistortionSpritePosition'](_0x4e7a81):_0x242cc0[_0x426b0b(0xadf)][_0x426b0b(0xb08)][_0x426b0b(0x160)][_0x426b0b(0x546)]:VisuMZ[_0x426b0b(0xadf)]['Sprite_Animation_targetSpritePosition']['call'](this,_0x4e7a81);},Sprite_Animation[_0x12d94d(0x4e9)]['targetDistortionSpritePosition']=function(_0x19844a){const _0x167f14=_0x12d94d;let _0x4d64b2=_0x19844a['x'],_0x2e80ca=_0x19844a['y'],_0x17b4ef=_0x19844a[_0x167f14(0xd17)],_0xc33746=_0x19844a['_distortionSprite']['scale']['y'];_0x19844a['x']=_0x19844a['_baseX']+_0x19844a['extraPositionX'](),_0x19844a['y']=_0x19844a[_0x167f14(0x59e)]+_0x19844a[_0x167f14(0x91c)](),_0x19844a[_0x167f14(0xd17)]*=_0xc33746;let _0x4db0df=VisuMZ[_0x167f14(0xadf)]['Sprite_Animation_targetSpritePosition'][_0x167f14(0xba3)](this,_0x19844a);return _0x19844a['x']=_0x4d64b2,_0x19844a['y']=_0x2e80ca,_0x19844a[_0x167f14(0xd17)]=_0x17b4ef,_0x4db0df;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x679)]=Sprite_AnimationMV[_0x12d94d(0x4e9)][_0x12d94d(0xa8e)],Sprite_AnimationMV[_0x12d94d(0x4e9)][_0x12d94d(0xa8e)]=function(){const _0x596284=_0x12d94d;VisuMZ[_0x596284(0xadf)][_0x596284(0x679)][_0x596284(0xba3)](this);if(!SceneManager[_0x596284(0xb92)]())return;if(this[_0x596284(0xad1)][_0x596284(0xbcd)]===0x3)this['x']=Math[_0x596284(0x1d0)](Graphics[_0x596284(0x807)]/0x2),this['y']=Math['round'](Graphics[_0x596284(0xf6)]/0x2);else{if(this[_0x596284(0x5b2)])return;}},Sprite_Damage[_0x12d94d(0x4e9)][_0x12d94d(0xd0d)]=function(_0x43587c){const _0x1861b6=_0x12d94d,_0x705661=_0x43587c['getNextDamagePopup']()||_0x43587c[_0x1861b6(0xd1e)]();if(_0x705661[_0x1861b6(0x22c)]||_0x705661[_0x1861b6(0xc2)]){if('BUqTv'==='iLvAH'){const _0x38b07c=this[_0x1861b6(0x8b5)](this[_0x1861b6(0x926)]());let _0x6ed9cf=this[_0x1861b6(0x2c8)](this[_0x1861b6(0x926)]());_0x6ed9cf=_0x6ed9cf['replace'](/\\I\[(\d+)\]/gi,''),_0x5333fe[_0x1861b6(0xc47)](),this[_0x1861b6(0x7cd)](_0x6ed9cf,_0x38b07c),this[_0x1861b6(0x632)](_0x6ed9cf,_0x38b07c),this['commandNameWindowCenter'](_0x6ed9cf,_0x38b07c);}else this[_0x1861b6(0xa0e)]=0x0,this[_0x1861b6(0x385)]();}else{if(_0x705661[_0x1861b6(0xb11)])this[_0x1861b6(0xa0e)]=_0x705661['hpDamage']>=0x0?0x0:0x1,this[_0x1861b6(0xab2)](_0x705661[_0x1861b6(0xc0b)]);else{if(_0x43587c[_0x1861b6(0x3b5)]()&&_0x705661['mpDamage']!==0x0){if('BJEjL'!=='ReGlC')this[_0x1861b6(0xa0e)]=_0x705661[_0x1861b6(0xa23)]>=0x0?0x2:0x3,this[_0x1861b6(0xab2)](_0x705661[_0x1861b6(0xa23)]);else return!![];}}}_0x705661[_0x1861b6(0x433)]&&('JrWBs'!==_0x1861b6(0x268)?this[_0x1861b6(0x5c0)]():_0x1b727e['addBuff'](_0x3f4661,_0x3ba213));},Sprite_Damage[_0x12d94d(0x4e9)][_0x12d94d(0x5bb)]=function(_0x37ee18){},Sprite_Damage[_0x12d94d(0x4e9)]['createDigits']=function(_0x5cf30c){const _0x3b678e=_0x12d94d;let _0x431ab8=this[_0x3b678e(0x46c)](_0x5cf30c);const _0x2258a0=this[_0x3b678e(0x1ff)](),_0x347ed0=Math[_0x3b678e(0x28f)](_0x2258a0*0.75);for(let _0x42e9b4=0x0;_0x42e9b4<_0x431ab8['length'];_0x42e9b4++){const _0x6d96=this['createChildSprite'](_0x347ed0,_0x2258a0);_0x6d96[_0x3b678e(0x222)][_0x3b678e(0x89d)](_0x431ab8[_0x42e9b4],0x0,0x0,_0x347ed0,_0x2258a0,_0x3b678e(0xae7)),_0x6d96['x']=(_0x42e9b4-(_0x431ab8[_0x3b678e(0x29c)]-0x1)/0x2)*_0x347ed0,_0x6d96['dy']=-_0x42e9b4;}},Sprite_Damage[_0x12d94d(0x4e9)][_0x12d94d(0x46c)]=function(_0x176229){const _0x26f05b=_0x12d94d;let _0x19d71d=Math[_0x26f05b(0xc19)](_0x176229)[_0x26f05b(0x9a)]();this[_0x26f05b(0x568)]()&&(_0x19d71d=VisuMZ[_0x26f05b(0x6ff)](_0x19d71d));const _0x360ee0=VisuMZ[_0x26f05b(0xadf)][_0x26f05b(0xb08)][_0x26f05b(0x89b)];let _0x4e60a2='',_0x3bcd9a='';switch(this[_0x26f05b(0xa0e)]){case 0x0:_0x4e60a2=_0x360ee0['hpDamageFmt']||_0x26f05b(0x91),_0x3bcd9a=TextManager['hp'];if(_0x176229===0x0)_0x4e60a2='%1';break;case 0x1:_0x4e60a2=_0x360ee0[_0x26f05b(0x49b)]||_0x26f05b(0x968),_0x3bcd9a=TextManager['hp'];break;case 0x2:_0x4e60a2=_0x360ee0[_0x26f05b(0x8d1)]||_0x26f05b(0x6f9),_0x3bcd9a=TextManager['mp'];break;case 0x3:_0x4e60a2=_0x360ee0[_0x26f05b(0x707)]||_0x26f05b(0xc75),_0x3bcd9a=TextManager['mp'];break;}return _0x4e60a2[_0x26f05b(0x3d0)](_0x19d71d,_0x3bcd9a)[_0x26f05b(0xc39)]();},Sprite_Damage[_0x12d94d(0x4e9)]['useDigitGrouping']=function(){const _0x3e377a=_0x12d94d;if(Imported['VisuMZ_0_CoreEngine'])return _0x3e377a(0xcbb)!=='ZXdyK'?_0x1c501d['_scene'][_0x3e377a(0xbb9)]()==='border'?_0x133c66[_0x3e377a(0xadf)][_0x3e377a(0xb08)][_0x3e377a(0x160)][_0x3e377a(0x546)]:_0x17dfc3[_0x3e377a(0xadf)][_0x3e377a(0xb08)]['BattleLayout'][_0x3e377a(0x977)]:VisuMZ[_0x3e377a(0xca1)][_0x3e377a(0xb08)][_0x3e377a(0xd2c)][_0x3e377a(0xb8e)];else{if(_0x3e377a(0xc00)===_0x3e377a(0xc00))return![];else this[_0x3e377a(0x67b)][_0x3e377a(0xa26)](this[_0x3e377a(0x348)]);}},Sprite_Damage[_0x12d94d(0x4e9)][_0x12d94d(0x5c0)]=function(){const _0x12ae1e=_0x12d94d,_0x565797=VisuMZ[_0x12ae1e(0xadf)][_0x12ae1e(0xb08)][_0x12ae1e(0x89b)];this[_0x12ae1e(0x10c)]=_0x565797[_0x12ae1e(0xb44)]['slice'](0x0),this[_0x12ae1e(0xb86)]=_0x565797[_0x12ae1e(0x979)];},Sprite_Damage[_0x12d94d(0x4e9)][_0x12d94d(0x873)]=function(_0x5c30fc,_0x1beeb5){const _0x3bc9e6=_0x12d94d;this[_0x3bc9e6(0x10c)]=_0x1beeb5[_0x3bc9e6(0xcf5)]||[0x0,0x0,0x0,0x0],this[_0x3bc9e6(0x10c)]=JsonEx[_0x3bc9e6(0xb77)](this['_flashColor']),this[_0x3bc9e6(0xb86)]=_0x1beeb5[_0x3bc9e6(0x5a5)]||0x0;const _0x30a4d0=this['fontSize'](),_0x808975=Math['floor'](_0x30a4d0*0x1e),_0x493e02=this['createChildSprite'](_0x808975,_0x30a4d0);_0x493e02['bitmap'][_0x3bc9e6(0x809)]=ColorManager['getColor'](_0x1beeb5[_0x3bc9e6(0x809)]),_0x493e02[_0x3bc9e6(0x222)][_0x3bc9e6(0x89d)](_0x5c30fc,0x0,0x0,_0x808975,_0x30a4d0,_0x3bc9e6(0xae7)),_0x493e02['dy']=0x0;},Sprite_Damage[_0x12d94d(0x4e9)]['setupIconTextPopup']=function(_0xefcbe7,_0x30da02,_0x49887b){const _0x322680=_0x12d94d,_0x17c51a=Math[_0x322680(0x660)](this[_0x322680(0x1ff)](),ImageManager[_0x322680(0x1b2)]),_0x179f0f=Math['floor'](_0x17c51a*0x1e),_0x378bf3=this['createChildSprite'](_0x179f0f,_0x17c51a),_0x218876=ImageManager[_0x322680(0x282)]/0x2,_0x429950=_0x378bf3[_0x322680(0x222)][_0x322680(0x9d5)](_0x30da02+'\x20');_0x378bf3[_0x322680(0x222)][_0x322680(0x809)]=ColorManager[_0x322680(0x8ae)](_0x49887b[_0x322680(0x809)]),_0x378bf3[_0x322680(0x222)]['drawText'](_0x30da02,_0x218876,0x0,_0x179f0f-_0x218876,_0x17c51a,_0x322680(0xae7));const _0x1c512b=Math['round']((_0x17c51a-ImageManager['iconHeight'])/0x2),_0x8fea6c=_0x179f0f/0x2-ImageManager[_0x322680(0x282)]-_0x429950/0x2+_0x218876/0x2,_0x20f93f=ImageManager['loadSystem'](_0x322680(0x366)),_0x45f48b=ImageManager[_0x322680(0x282)],_0x1e6808=ImageManager[_0x322680(0x1b2)],_0x1cb154=_0xefcbe7%0x10*_0x45f48b,_0x13e992=Math['floor'](_0xefcbe7/0x10)*_0x1e6808;_0x378bf3[_0x322680(0x222)][_0x322680(0x4b7)](_0x20f93f,_0x1cb154,_0x13e992,_0x45f48b,_0x1e6808,_0x8fea6c,_0x1c512b),this[_0x322680(0x10c)]=_0x49887b[_0x322680(0xcf5)]||[0x0,0x0,0x0,0x0],this[_0x322680(0x10c)]=JsonEx[_0x322680(0xb77)](this['_flashColor']),this['_flashDuration']=_0x49887b[_0x322680(0x5a5)]||0x0,_0x378bf3['dy']=0x0;},VisuMZ['BattleCore'][_0x12d94d(0x5c8)]=Sprite_Damage[_0x12d94d(0x4e9)][_0x12d94d(0x6de)],Sprite_Damage[_0x12d94d(0x4e9)]['createChildSprite']=function(_0x3834a8,_0x26263e){const _0x19946a=_0x12d94d;return _0x26263e=Math[_0x19946a(0x1d0)](_0x26263e*1.2),VisuMZ[_0x19946a(0xadf)][_0x19946a(0x5c8)][_0x19946a(0xba3)](this,_0x3834a8,_0x26263e);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x6d4)]=Sprite_StateIcon[_0x12d94d(0x4e9)]['updateFrame'],Sprite_StateIcon[_0x12d94d(0x4e9)][_0x12d94d(0x838)]=function(){const _0x2e065e=_0x12d94d;VisuMZ['BattleCore']['Sprite_StateIcon_updateFrame'][_0x2e065e(0xba3)](this),this[_0x2e065e(0x9a8)]=this[_0x2e065e(0x805)]>0x0?0xff:0x0;},VisuMZ[_0x12d94d(0xadf)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon['prototype'][_0x12d94d(0x22a)],Sprite_Weapon[_0x12d94d(0x4e9)][_0x12d94d(0x22a)]=function(){const _0xa1932b=_0x12d94d;VisuMZ['BattleCore']['Sprite_Weapon_loadBitmap'][_0xa1932b(0xba3)](this),this[_0xa1932b(0x222)]&&(this[_0xa1932b(0x222)][_0xa1932b(0x563)]=VisuMZ[_0xa1932b(0xadf)][_0xa1932b(0xb08)][_0xa1932b(0x58b)][_0xa1932b(0x3d8)]);},VisuMZ['BattleCore']['Sprite_Gauge_smoothness']=Sprite_Gauge[_0x12d94d(0x4e9)]['smoothness'],Sprite_Gauge['prototype'][_0x12d94d(0x7d)]=function(){const _0x234a24=_0x12d94d;if(this[_0x234a24(0xbc5)]!==_0x234a24(0x5ba))return VisuMZ[_0x234a24(0xadf)][_0x234a24(0xb08)][_0x234a24(0x757)]['AniDuration']??0x14;else{if('XIYWs'==='qBBGS')_0x5ccd3e[_0x234a24(0x880)](_0x30a9f6);else return VisuMZ[_0x234a24(0xadf)][_0x234a24(0x84a)][_0x234a24(0xba3)](this);}};function Sprite_HpGauge(){const _0x115f7e=_0x12d94d;this[_0x115f7e(0x8df)](...arguments);}Sprite_HpGauge[_0x12d94d(0x4e9)]=Object[_0x12d94d(0x3d9)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x12d94d(0x4e9)][_0x12d94d(0xc50)]=Sprite_HpGauge,Sprite_HpGauge[_0x12d94d(0x4e9)][_0x12d94d(0x8df)]=function(){const _0x2f4b9d=_0x12d94d;Sprite_Gauge['prototype'][_0x2f4b9d(0x8df)][_0x2f4b9d(0xba3)](this);},Sprite_HpGauge['prototype']['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0x12d94d(0x4e9)]['redraw']=function(){const _0x396d98=_0x12d94d;this['bitmap'][_0x396d98(0x4ef)]();const _0x38ee67=this[_0x396d98(0x5b0)]();!isNaN(_0x38ee67)&&this[_0x396d98(0xa75)]();};function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName['prototype']=Object[_0x12d94d(0x3d9)](Sprite_Name['prototype']),Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0xc50)]=Sprite_EnemyName,Sprite_EnemyName['prototype']['initialize']=function(){const _0x2301a0=_0x12d94d;Sprite_Name[_0x2301a0(0x4e9)]['initialize'][_0x2301a0(0xba3)](this),this[_0x2301a0(0x674)]();},Sprite_EnemyName[_0x12d94d(0x4e9)]['initMembers']=function(){const _0x2d534f=_0x12d94d;Sprite_Name[_0x2d534f(0x4e9)][_0x2d534f(0x7e6)][_0x2d534f(0xba3)](this),this['opacity']=0x0,this['_linkedSprite']=null,this[_0x2d534f(0x2cc)]['x']=0.5,this[_0x2d534f(0x2cc)]['y']=0x0;},Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x674)]=function(){const _0x3470a1=_0x12d94d;VisuMZ[_0x3470a1(0xadf)][_0x3470a1(0xb08)][_0x3470a1(0x1ec)]['NameAttachStateIcon']&&(this[_0x3470a1(0xc18)]=new Sprite_StateIcon(),this['addChild'](this['_stateIconSprite']));},Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x714)]=function(){const _0x581013=_0x12d94d;return Graphics[_0x581013(0x807)];},Sprite_EnemyName[_0x12d94d(0x4e9)]['bitmapHeight']=function(){const _0x1754ef=_0x12d94d;return this[_0x1754ef(0x946)]=this[_0x1754ef(0x946)]||Window_Base[_0x1754ef(0x4e9)][_0x1754ef(0x33c)]()||0x24,this[_0x1754ef(0x946)]*0x4;},Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x1ff)]=function(){const _0x8ae60d=_0x12d94d;return VisuMZ[_0x8ae60d(0xadf)][_0x8ae60d(0xb08)][_0x8ae60d(0x1ec)][_0x8ae60d(0x98a)]||$gameSystem[_0x8ae60d(0x839)]();},Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x64a)]=function(_0x2bbc1d){const _0x18b499=_0x12d94d;this[_0x18b499(0xc07)]=_0x2bbc1d;},Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0xba4)]=function(){const _0x11e842=_0x12d94d;Sprite_Name[_0x11e842(0x4e9)][_0x11e842(0xba4)][_0x11e842(0xba3)](this),this['updateLink'](),this[_0x11e842(0xa8e)](),this[_0x11e842(0xc04)](),this[_0x11e842(0x168)]();},Sprite_EnemyName['prototype'][_0x12d94d(0x49e)]=function(){const _0x35fbe6=_0x12d94d;this[_0x35fbe6(0x656)]=undefined;const _0x39b668=this[_0x35fbe6(0x536)](),_0x4d1c55=this[_0x35fbe6(0x714)](),_0x4ab345=Window_Base[_0x35fbe6(0x4e9)][_0x35fbe6(0x33c)]();this['setupFont'](),this[_0x35fbe6(0x222)][_0x35fbe6(0x4ef)](),this[_0x35fbe6(0x222)]['drawText'](_0x39b668,0x0,0x0,_0x4d1c55,_0x4ab345,_0x35fbe6(0xae7));},Sprite_EnemyName['prototype']['updateLink']=function(){const _0x1ba685=_0x12d94d;if(!this[_0x1ba685(0xc07)])return;this[_0x1ba685(0x78b)]!==this['_linkedSprite'][_0x1ba685(0x78b)]&&this['setup'](this[_0x1ba685(0xc07)][_0x1ba685(0x78b)]);},Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0xa8e)]=function(){const _0xa9b957=_0x12d94d;if(!this[_0xa9b957(0xc07)])return;this['_lineHeight']=this[_0xa9b957(0x946)]||Window_Base['prototype'][_0xa9b957(0x33c)](),this['x']=Math['round'](this['_linkedSprite'][_0xa9b957(0x3f5)]),this['y']=Math[_0xa9b957(0x1d0)](this[_0xa9b957(0xc07)][_0xa9b957(0x59e)]-this[_0xa9b957(0x946)]*0.5);const _0x27ab06=VisuMZ[_0xa9b957(0xadf)]['Settings'][_0xa9b957(0x1ec)];this['x']+=Math[_0xa9b957(0x1d0)](_0x27ab06['NameOffsetX']||0x0),this['y']+=Math['round'](_0x27ab06[_0xa9b957(0x55c)]||0x0);},Sprite_EnemyName[_0x12d94d(0x4e9)]['updateAttachedSprites']=function(){const _0x4e7d9f=_0x12d94d;this[_0x4e7d9f(0x937)]();},Sprite_EnemyName[_0x12d94d(0x4e9)]['updateStateIconSprite']=function(){const _0x3025b3=_0x12d94d;if(!this[_0x3025b3(0xc18)])return;this['_battler']!==this[_0x3025b3(0xc18)][_0x3025b3(0x78b)]&&this[_0x3025b3(0xc18)][_0x3025b3(0x5bb)](this['_battler']);const _0x10047e=this['textWidth']();this[_0x3025b3(0x946)]=this['_lineHeight']||Window_Base[_0x3025b3(0x4e9)]['lineHeight'](),this['_stateIconSprite']['x']=Math[_0x3025b3(0x1d0)]((_0x10047e+ImageManager[_0x3025b3(0x282)])/0x2)+0x8,this[_0x3025b3(0xc18)]['y']=this[_0x3025b3(0x946)]/0x2;const _0x2cb62c=VisuMZ['BattleCore']['Settings'][_0x3025b3(0x1ec)];this['_stateIconSprite']['x']+=_0x2cb62c[_0x3025b3(0x7d3)]||0x0,this[_0x3025b3(0xc18)]['y']+=_0x2cb62c['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x168)]=function(){const _0x54bcc1=_0x12d94d,_0xdb6b88=this[_0x54bcc1(0x6c2)]();if(_0xdb6b88&&this['opacity']<0xff)this[_0x54bcc1(0x9a8)]+=0x10;else!_0xdb6b88&&this[_0x54bcc1(0x9a8)]>0x0&&(this[_0x54bcc1(0x9a8)]-=0x10);},Sprite_EnemyName['prototype']['visibilityState']=function(){const _0x99da46=_0x12d94d;if(this['isAlwaysHidden']())return![];else{if(!this['_battler'])return![];else{if(this['_battler']['isDead']()){if(_0x99da46(0x4a1)==='sPVQN')return![];else _0xea3b9c[_0x99da46(0xadf)][_0x99da46(0xbf0)]&&_0x15b962[_0x99da46(0xadf)][_0x99da46(0xbf0)][_0x99da46(0xba3)](this,_0xaaabde),_0x329974[_0x99da46(0xadf)][_0x99da46(0x5f4)](_0x29f519);}else{if(!this[_0x99da46(0x78b)][_0x99da46(0x66e)]())return![];else{if(this['compatibilityVisible']())return!![];else{if(this['isAlwaysVisible']()){if('dFzUe'==='dFzUe')return!![];else this[_0x99da46(0x3e4)](_0x99da46(0x48a));}else{if(this[_0x99da46(0x3a1)]())return!![];else{if(this[_0x99da46(0x9a8)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0xd9)]=function(){const _0x4017c5=_0x12d94d;return VisuMZ['BattleCore']['Settings']['Enemy'][_0x4017c5(0x65c)];},Sprite_EnemyName['prototype'][_0x12d94d(0xa35)]=function(){return![];},Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x2f0)]=function(){const _0x527d6d=_0x12d94d;return VisuMZ[_0x527d6d(0xadf)][_0x527d6d(0xb08)][_0x527d6d(0x1ec)][_0x527d6d(0x5c5)];},Sprite_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x3a1)]=function(){const _0x5c32fa=_0x12d94d;if(VisuMZ['BattleCore'][_0x5c32fa(0xb08)][_0x5c32fa(0x1ec)][_0x5c32fa(0x593)]){if('eULmK'===_0x5c32fa(0xc09)){let _0x215207='battleUIOffsetY';if(this[_0x5c32fa(0x71a)](_0x215207))return this[_0x5c32fa(0xca3)][_0x215207];return this['_cache'][_0x215207]=this['createBattleUIOffsetY'](this[_0x5c32fa(0xaa2)]()),this[_0x5c32fa(0xca3)][_0x215207];}else return this[_0x5c32fa(0x78b)][_0x5c32fa(0x6da)]();}else return SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x5c32fa(0x592)]['_enemyWindow'][_0x5c32fa(0x4ca)]&&SceneManager[_0x5c32fa(0x592)][_0x5c32fa(0x14e)]['_enemies']['includes'](this['_battler']);},Sprite_EnemyName[_0x12d94d(0x4e9)]['textWidth']=function(){const _0x4ecbcb=_0x12d94d;if(!this[_0x4ecbcb(0x78b)])return 0x0;if(this['_cacheTextWidth'])return this['_cacheTextWidth'];const _0x3ef502=this['name']();return this['setupFont'](),this[_0x4ecbcb(0x656)]=this[_0x4ecbcb(0x222)][_0x4ecbcb(0x9d5)](_0x3ef502)||0x1,this[_0x4ecbcb(0x656)];},VisuMZ['BattleCore'][_0x12d94d(0x615)]=Sprite_Battleback[_0x12d94d(0x4e9)]['adjustPosition'],Sprite_Battleback['prototype'][_0x12d94d(0x885)]=function(){const _0x298803=_0x12d94d,_0x455de8=VisuMZ[_0x298803(0xadf)][_0x298803(0xb08)][_0x298803(0x6cd)];if(!_0x455de8)return VisuMZ[_0x298803(0xadf)][_0x298803(0x615)]['call'](this);const _0x27b32c=String(_0x455de8[_0x298803(0x4bb)])||'MZ';switch(_0x27b32c){case'MZ':VisuMZ[_0x298803(0xadf)]['Sprite_Battleback_adjustPosition'][_0x298803(0xba3)](this);break;case _0x298803(0x237):this['adjustPosition_1for1']();break;case _0x298803(0x5c6):this[_0x298803(0x3d3)]();break;case _0x298803(0xcb9):this[_0x298803(0xc63)]();break;case'ScaleUp':this[_0x298803(0x213)]();break;}},Sprite_Battleback[_0x12d94d(0x4e9)][_0x12d94d(0x4ab)]=function(){const _0x1b7da8=_0x12d94d,_0x1e8d40=VisuMZ[_0x1b7da8(0xadf)][_0x1b7da8(0xb08)]['BattlebackScale'];if(_0x1e8d40&&_0x1e8d40[_0x1b7da8(0x63a)]){if(_0x1b7da8(0x91a)===_0x1b7da8(0x544))this[_0x1b7da8(0x383)]=(this['_floatHeight']*(_0x3f4491-0x1)+this['_targetFloatHeight'])/_0x5d6e9c;else return _0x1e8d40[_0x1b7da8(0x63a)][_0x1b7da8(0xba3)](this);}this[_0x1b7da8(0xa80)]=Graphics[_0x1b7da8(0xa80)],this[_0x1b7da8(0xd17)]=Graphics[_0x1b7da8(0xd17)];const _0xca754b=0x1;this['scale']['x']=_0xca754b,this[_0x1b7da8(0xc3b)]['y']=_0xca754b,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x12d94d(0x4e9)][_0x12d94d(0x3d3)]=function(){const _0x1f9ec7=_0x12d94d,_0x5ec34b=VisuMZ[_0x1f9ec7(0xadf)][_0x1f9ec7(0xb08)][_0x1f9ec7(0x6cd)];if(_0x5ec34b&&_0x5ec34b[_0x1f9ec7(0x875)])return _0x5ec34b[_0x1f9ec7(0x875)][_0x1f9ec7(0xba3)](this);this[_0x1f9ec7(0xa80)]=Graphics[_0x1f9ec7(0xa80)],this[_0x1f9ec7(0xd17)]=Graphics[_0x1f9ec7(0xd17)];const _0x1cfe57=this[_0x1f9ec7(0xa80)]/this[_0x1f9ec7(0x222)][_0x1f9ec7(0xa80)],_0x45d86f=this[_0x1f9ec7(0xd17)]/this[_0x1f9ec7(0x222)][_0x1f9ec7(0xd17)],_0x44b328=Math[_0x1f9ec7(0x660)](_0x1cfe57,_0x45d86f);this[_0x1f9ec7(0xc3b)]['x']=_0x44b328,this[_0x1f9ec7(0xc3b)]['y']=_0x44b328,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics[_0x1f9ec7(0xd17)]-this['height'];},Sprite_Battleback[_0x12d94d(0x4e9)][_0x12d94d(0xc63)]=function(){const _0x30bbc9=_0x12d94d,_0x2e14c3=VisuMZ[_0x30bbc9(0xadf)][_0x30bbc9(0xb08)][_0x30bbc9(0x6cd)];if(_0x2e14c3&&_0x2e14c3[_0x30bbc9(0xb47)])return _0x2e14c3['jsScaleDown'][_0x30bbc9(0xba3)](this);this[_0x30bbc9(0xa80)]=Graphics[_0x30bbc9(0xa80)],this[_0x30bbc9(0xd17)]=Graphics[_0x30bbc9(0xd17)];const _0x4f6b38=Math['min'](0x1,this[_0x30bbc9(0xa80)]/this[_0x30bbc9(0x222)][_0x30bbc9(0xa80)]),_0x590e90=Math['min'](0x1,this[_0x30bbc9(0xd17)]/this[_0x30bbc9(0x222)][_0x30bbc9(0xd17)]),_0x376d08=Math[_0x30bbc9(0x660)](_0x4f6b38,_0x590e90);this['scale']['x']=_0x376d08,this['scale']['y']=_0x376d08,this['x']=(Graphics[_0x30bbc9(0xa80)]-this[_0x30bbc9(0xa80)])/0x2,this['y']=Graphics[_0x30bbc9(0xd17)]-this['height'];},Sprite_Battleback[_0x12d94d(0x4e9)][_0x12d94d(0x213)]=function(){const _0x247273=_0x12d94d,_0x461c46=VisuMZ['BattleCore'][_0x247273(0xb08)]['BattlebackScale'];if(_0x461c46&&_0x461c46[_0x247273(0x2e5)])return _0x461c46[_0x247273(0x2e5)]['call'](this);this[_0x247273(0xa80)]=Graphics[_0x247273(0xa80)],this['height']=Graphics[_0x247273(0xd17)];const _0x2b703c=Math[_0x247273(0x660)](0x1,this[_0x247273(0xa80)]/this['bitmap'][_0x247273(0xa80)]),_0x52dcbf=Math[_0x247273(0x660)](0x1,this[_0x247273(0xd17)]/this[_0x247273(0x222)][_0x247273(0xd17)]),_0x101aa4=Math[_0x247273(0x660)](_0x2b703c,_0x52dcbf);this[_0x247273(0xc3b)]['x']=_0x101aa4,this['scale']['y']=_0x101aa4,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics['height']-this[_0x247273(0xd17)];},Spriteset_Battle['ANTI_TINT_UI']=![],Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x856)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xb76)]=function(){return 0x0;},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x2ac)]=function(){return 0x0;},VisuMZ[_0x12d94d(0xadf)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle['prototype'][_0x12d94d(0x98)],Spriteset_Battle['prototype'][_0x12d94d(0x98)]=function(){const _0x45675b=_0x12d94d;VisuMZ[_0x45675b(0xadf)][_0x45675b(0xbc1)][_0x45675b(0xba3)](this),this[_0x45675b(0x381)](),this['createEnemyNames']();},VisuMZ['BattleCore']['Spriteset_Battle_update']=Spriteset_Battle['prototype']['update'],Spriteset_Battle['prototype'][_0x12d94d(0xba4)]=function(){const _0x1d4e96=_0x12d94d;VisuMZ[_0x1d4e96(0xadf)][_0x1d4e96(0xc29)][_0x1d4e96(0xba3)](this),this[_0x1d4e96(0x521)](),this[_0x1d4e96(0x7ae)](),this[_0x1d4e96(0x25e)](),this['updateBattleBalloons']();},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x381)]=function(){const _0x1df9d2=_0x12d94d;this[_0x1df9d2(0x82)]=new Weather(),this[_0x1df9d2(0xe4)][_0x1df9d2(0xa26)](this[_0x1df9d2(0x82)]);},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x25e)]=function(){const _0x2d0a12=_0x12d94d;this[_0x2d0a12(0x82)][_0x2d0a12(0x360)]=$gameScreen['weatherType'](),this[_0x2d0a12(0x82)][_0x2d0a12(0xace)]=$gameScreen[_0x2d0a12(0xc58)]();},Game_Interpreter[_0x12d94d(0x4e9)][_0x12d94d(0x231)]=function(_0x4a1df5){const _0x521d04=_0x12d94d;$gameScreen[_0x521d04(0xb96)](_0x4a1df5[0x0],_0x4a1df5[0x1],_0x4a1df5[0x2]);if(_0x4a1df5[0x3])this[_0x521d04(0x48a)](_0x4a1df5[0x2]);return!![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x52e)]=Game_Interpreter[_0x12d94d(0x4e9)][_0x12d94d(0x2b6)],Game_Interpreter[_0x12d94d(0x4e9)][_0x12d94d(0x2b6)]=function(_0x549e2a){const _0x3cdbea=_0x12d94d;return SceneManager[_0x3cdbea(0xb92)]()?(SceneManager['_scene'][_0x3cdbea(0x372)][_0x3cdbea(0xc57)](_0x549e2a[0x0],_0x549e2a[0x1]),!![]):VisuMZ[_0x3cdbea(0xadf)][_0x3cdbea(0x52e)][_0x3cdbea(0xba3)](this,_0x549e2a);},Spriteset_Battle[_0x12d94d(0x4e9)]['updateBattlebackBitmap']=function(_0x2305cb,_0x267425){const _0x15ce49=_0x12d94d;_0x2305cb[_0x15ce49(0x222)]=_0x267425;},Spriteset_Battle['prototype'][_0x12d94d(0xc57)]=function(_0x328ca1,_0x20d57d){const _0x533a32=_0x12d94d;_0x328ca1=_0x328ca1||'',_0x20d57d=_0x20d57d||'';if(_0x328ca1===''&&_0x20d57d===''){if(_0x533a32(0xad8)!==_0x533a32(0x5ee))_0x328ca1=this['_back1Sprite'][_0x533a32(0x720)](),_0x20d57d=this['_back2Sprite'][_0x533a32(0xafa)]();else{const _0x2117d2=_0xb0e207[_0x533a32(0xb79)]('['+_0x39bda5['$1']['match'](/\d+/g)+']');for(const _0x26daf5 of _0x2117d2){if(!_0x1891c5['value'](_0x26daf5))return![];}return!![];}}const _0x4c6e96=ImageManager[_0x533a32(0xce9)](_0x328ca1),_0x38ad1b=ImageManager[_0x533a32(0xcff)](_0x20d57d);_0x4c6e96['addLoadListener'](this[_0x533a32(0x974)][_0x533a32(0xb99)](this,this[_0x533a32(0x30d)],this[_0x533a32(0xb93)],_0x4c6e96,_0x38ad1b));},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x974)]=function(_0x2a6496,_0x5b18ac,_0x1c1731,_0x5b62dd){_0x5b62dd['addLoadListener'](this['updateBattlebackBitmap2']['bind'](this,_0x2a6496,_0x5b18ac,_0x1c1731,_0x5b62dd));},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x98b)]=function(_0x5b328c,_0x1b0e93,_0x15e539,_0x4210f6){const _0x25b180=_0x12d94d;_0x5b328c[_0x25b180(0x222)]=_0x15e539,_0x1b0e93['bitmap']=_0x4210f6,_0x5b328c[_0x25b180(0x885)](),_0x1b0e93[_0x25b180(0x885)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x3a0)]=Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x113)],Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x113)]=function(){const _0x1f7267=_0x12d94d;VisuMZ[_0x1f7267(0xadf)]['Spriteset_Battle_createBattleField'][_0x1f7267(0xba3)](this),this[_0x1f7267(0xd1a)]();},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xd1a)]=function(){const _0x4d20c2=_0x12d94d;this[_0x4d20c2(0x29a)](),this[_0x4d20c2(0x7ec)](),this[_0x4d20c2(0xaa6)](),this['createDamageContainer'](),this[_0x4d20c2(0x79b)]();},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x29a)]=function(){const _0x310948=_0x12d94d;this[_0x310948(0x374)]=new Sprite(),this['_battleField']['addChild'](this['_battlerContainer']);},Spriteset_Battle['prototype'][_0x12d94d(0xaa6)]=function(){const _0x33240b=_0x12d94d;this['_animationContainer']=new Sprite();if(Spriteset_Battle[_0x33240b(0x36c)]){if(_0x33240b(0x3bc)!==_0x33240b(0x3bc)){if(!_0x234ea2['value'](_0x3f2317))return![];}else this['addChild'](this[_0x33240b(0x45a)]);}else _0x33240b(0x7c6)!=='zqKEs'?this[_0x33240b(0xe4)][_0x33240b(0xa26)](this['_animationContainer']):this['revertTpbCachedActor']();},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x56b)]=function(){const _0x3f2b91=_0x12d94d;this[_0x3f2b91(0xb15)]=new Sprite(),this['_damageContainer']['x']=this[_0x3f2b91(0xe4)]['x'],this[_0x3f2b91(0xb15)]['y']=this['_battleField']['y'],this[_0x3f2b91(0xa26)](this[_0x3f2b91(0xb15)]);},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x79b)]=function(){const _0x234be9=_0x12d94d;if(!this[_0x234be9(0x856)]())return;this[_0x234be9(0x374)][_0x234be9(0xc3b)]['x']=-0x1,this['_battlerContainer']['x']=this['_battleField']['width'],this[_0x234be9(0x101)][_0x234be9(0xc3b)]['x']=-0x1,this['_uiContainer']['x']=this[_0x234be9(0xe4)]['width'],this['_animationContainer']['scale']['x']=-0x1,this[_0x234be9(0x45a)]['x']=this[_0x234be9(0xe4)][_0x234be9(0xa80)],this[_0x234be9(0xb15)][_0x234be9(0xc3b)]['x']=-0x1,this[_0x234be9(0xb15)]['x']=this['_battleField']['x']+this[_0x234be9(0xe4)]['width'];},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x893)]=function(){const _0xb03e69=_0x12d94d;Imported[_0xb03e69(0x564)]&&this['coreEngineRepositionEnemies']()&&this[_0xb03e69(0x48f)]();const _0x31e099=$gameTroop[_0xb03e69(0x5b8)](),_0x17f119=[];for(const _0x151452 of _0x31e099){if(_0xb03e69(0x1b6)==='JfLOD')_0x17f119['push'](new Sprite_Enemy(_0x151452));else{if(!_0x15eac8['isSceneBattle']())return;const _0x13f285=_0x28edec[_0xb03e69(0x664)]();if(!_0x13f285)return;_0x13f285[_0xb03e69(0xb30)]('battleFloat');}}_0x17f119[_0xb03e69(0xd0a)](this[_0xb03e69(0x35b)][_0xb03e69(0xb99)](this));for(const _0x1865d9 of _0x17f119){this[_0xb03e69(0x374)][_0xb03e69(0xa26)](_0x1865d9);}this[_0xb03e69(0x4cc)]=_0x17f119;},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x529)]=function(){const _0x3a7dd4=_0x12d94d;this[_0x3a7dd4(0xc1c)]=[];for(let _0x10f5a3=0x0;_0x10f5a3<$gameParty[_0x3a7dd4(0xa1c)]();_0x10f5a3++){if(_0x3a7dd4(0x358)!==_0x3a7dd4(0x358))return _0x4e32d4[_0x3a7dd4(0xadf)]['Settings'][_0x3a7dd4(0xa50)][_0x3a7dd4(0x4af)];else{const _0x51b109=$gameParty[_0x3a7dd4(0xc73)]()[_0x10f5a3],_0x5d3870=new Sprite_Actor();_0x5d3870['moveToStartPositionBattleCore'](_0x51b109),_0x5d3870[_0x3a7dd4(0xcf1)](_0x51b109),_0x5d3870[_0x3a7dd4(0xba4)](),this[_0x3a7dd4(0xc1c)][_0x3a7dd4(0xbce)](_0x5d3870),this[_0x3a7dd4(0x374)][_0x3a7dd4(0xa26)](_0x5d3870);}}},Spriteset_Battle[_0x12d94d(0x4e9)]['createAnimationSprite']=function(_0x2b0b79,_0x7f119a,_0x48804a,_0xff423b){const _0x1e2d5c=_0x12d94d,_0x141553=this[_0x1e2d5c(0x63e)](_0x7f119a),_0x33b6da=new(_0x141553?Sprite_AnimationMV:Sprite_Animation)(),_0x2a5b3d=this['makeTargetSprites'](_0x2b0b79);this['animationShouldMirror'](_0x2b0b79[0x0])&&(_0x48804a=!_0x48804a),_0x33b6da[_0x1e2d5c(0x323)]=_0x2b0b79,_0x33b6da[_0x1e2d5c(0x5bb)](_0x2a5b3d,_0x7f119a,_0x48804a,_0xff423b),this[_0x1e2d5c(0x457)](_0x33b6da);},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x457)]=function(_0x3d39ab){const _0x5e59cf=_0x12d94d;if(this[_0x5e59cf(0xd20)](_0x3d39ab))this['battleStatusWindowAnimationContainer']()[_0x5e59cf(0xa26)](_0x3d39ab),_0x3d39ab[_0x5e59cf(0x5b2)]=!![];else{if(_0x5e59cf(0x8cc)!==_0x5e59cf(0xa28))this[_0x5e59cf(0x45a)][_0x5e59cf(0xa26)](_0x3d39ab),Spriteset_Battle[_0x5e59cf(0x36c)]&&(this[_0x5e59cf(0x45a)]['x']=this[_0x5e59cf(0x70a)]['x'],this[_0x5e59cf(0x45a)]['y']=this[_0x5e59cf(0x70a)]['y']);else{if(this[_0x5e59cf(0xad)]()){if(this['collapseType']()>=0x1)return!![];return this[_0x5e59cf(0xaa8)]()[_0x5e59cf(0xb1a)];}else return!![];}}this[_0x5e59cf(0x99f)][_0x5e59cf(0xbce)](_0x3d39ab);},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xd20)]=function(_0xb4d107){const _0x2d1d19=_0x12d94d;if(!_0xb4d107)return![];if(!_0xb4d107[_0x2d1d19(0xad1)])return![];if(!_0xb4d107['targetObjects'][0x0])return![];if(_0xb4d107[_0x2d1d19(0x323)][0x0]['isActor']&&!_0xb4d107[_0x2d1d19(0x323)][0x0]['isActor']())return![];if($gameSystem[_0x2d1d19(0x701)]())return![];if(!this[_0x2d1d19(0x318)]())return![];if(_0xb4d107['constructor']===Sprite_Animation){if(_0x2d1d19(0x70d)==='JyOpV')_0x2c26a1=_0x1b12e5;else{if(_0xb4d107[_0x2d1d19(0xad1)][_0x2d1d19(0xcb4)]!==0x0)return![];}}else{if(_0xb4d107[_0x2d1d19(0xc50)]===Sprite_AnimationMV){if(_0xb4d107[_0x2d1d19(0xad1)]['position']===0x3)return![];}}return!![];const _0x43a3f5=Window_BattleStatus['prototype'][_0x2d1d19(0xbb9)]();return['xp',_0x2d1d19(0x834)][_0x2d1d19(0xa7c)](_0x43a3f5);},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x318)]=function(){const _0x473be9=_0x12d94d;if(!SceneManager['_scene'])return null;if(!SceneManager[_0x473be9(0x592)]['_statusWindow'])return null;if(!SceneManager[_0x473be9(0x592)][_0x473be9(0xcbc)][_0x473be9(0x70a)])return null;return SceneManager[_0x473be9(0x592)]['_statusWindow']['_effectsContainer'];},Spriteset_Battle[_0x12d94d(0x4e9)]['removeAnimation']=function(_0x2e21a7){const _0x2563fb=_0x12d94d;this['removeAnimationFromContainer'](_0x2e21a7);for(const _0x11e39a of _0x2e21a7[_0x2563fb(0x323)]){if(_0x11e39a[_0x2563fb(0xbfc)]){if(_0x2563fb(0x130)!==_0x2563fb(0x130)){const _0x1bef5c=_0x4d3567[_0x2563fb(0xc83)]()?_0x443483[_0x2563fb(0x4f8)]:_0x3b55e2[_0x2563fb(0x31e)];_0x1bef5c&&_0x3656b4[_0x2563fb(0xadf)][_0x2563fb(0xb08)][_0x2563fb(0x883)]['ShowAddedState']&&(this[_0x2563fb(0xbce)](_0x2563fb(0x449)),this['push'](_0x2563fb(0x82c)),this['push'](_0x2563fb(0x36a)),this['push'](_0x2563fb(0x767),_0x1bef5c[_0x2563fb(0x3d0)](_0x136682[_0x2563fb(0x536)]())),this[_0x2563fb(0xbce)](_0x2563fb(0x48a))),_0x50b80c['id']===_0x11ed67[_0x2563fb(0xbbb)]()&&this[_0x2563fb(0xbce)](_0x2563fb(0xa7),_0x5f5c5d);}else _0x11e39a['endAnimation']();}}_0x2e21a7[_0x2563fb(0x9b7)]();},Spriteset_Battle[_0x12d94d(0x4e9)]['removeAnimationFromContainer']=function(_0x16cc28){const _0x6bccff=_0x12d94d;this[_0x6bccff(0xd20)](_0x16cc28)?this[_0x6bccff(0x318)]()[_0x6bccff(0xbd0)](_0x16cc28):this[_0x6bccff(0x45a)]['removeChild'](_0x16cc28);this[_0x6bccff(0x70a)]['removeChild'](_0x16cc28),this[_0x6bccff(0x45a)]['removeChild'](_0x16cc28),this['_animationSprites'][_0x6bccff(0x8fc)](_0x16cc28);if(this[_0x6bccff(0x3c3)])this['_fauxAnimationSprites'][_0x6bccff(0x8fc)](_0x16cc28);},VisuMZ['BattleCore'][_0x12d94d(0x9c2)]=Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x445)],Spriteset_Battle['prototype']['updateActors']=function(){const _0x5a497a=_0x12d94d;VisuMZ['BattleCore']['Spriteset_Battle_updateActors']['call'](this),this[_0x5a497a(0x521)]();},Spriteset_Battle[_0x12d94d(0x4e9)]['updateBattlerContainer']=function(){const _0x39fcab=_0x12d94d;this[_0x39fcab(0x374)][_0x39fcab(0x8aa)][_0x39fcab(0xd0a)](this['compareBattlerSprites'][_0x39fcab(0xb99)](this)),this[_0x39fcab(0x576)]();if(!this[_0x39fcab(0x374)])return;this[_0x39fcab(0x374)]['opacity']=this[_0x39fcab(0xb4e)]();},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xcbe)]=function(_0x2da0c9,_0x35cd1a){const _0x5a44fb=_0x12d94d;if(VisuMZ[_0x5a44fb(0xadf)]['Settings'][_0x5a44fb(0x58b)]['PrioritySortActors']){if(_0x5a44fb(0x914)!==_0x5a44fb(0x914))return _0x354e7b(_0x393141['$2']);else{if(_0x2da0c9[_0x5a44fb(0x78b)]&&_0x35cd1a[_0x5a44fb(0x78b)]){if(_0x2da0c9[_0x5a44fb(0x78b)][_0x5a44fb(0xc83)]()&&_0x35cd1a[_0x5a44fb(0x78b)][_0x5a44fb(0x2c3)]())return 0x1;else{if(_0x35cd1a[_0x5a44fb(0x78b)][_0x5a44fb(0xc83)]()&&_0x2da0c9['_battler']['isEnemy']()){if(_0x5a44fb(0x8bd)==='dmEaV'){if(!_0x4fc712)return![];return _0x35ce91['occasion']===0x0||_0x3f8d08['occasion']===0x1;}else return-0x1;}}}}}return _0x2da0c9[_0x5a44fb(0x59e)]!==_0x35cd1a['_baseY']?_0x2da0c9[_0x5a44fb(0x59e)]-_0x35cd1a[_0x5a44fb(0x59e)]:_0x35cd1a['spriteId']-_0x2da0c9['spriteId'];},Spriteset_Battle[_0x12d94d(0x4e9)]['putActiveBattlerOnTop']=function(){const _0x13df9c=_0x12d94d;if(!VisuMZ[_0x13df9c(0xadf)][_0x13df9c(0xb08)]['Actor'][_0x13df9c(0x7f4)])return;const _0x17dc12=BattleManager[_0x13df9c(0xa37)];if(_0x17dc12){if(_0x17dc12[_0x13df9c(0xc83)]()&&!$gameSystem[_0x13df9c(0x701)]())return;const _0x717283=_0x17dc12[_0x13df9c(0x9b8)]();if(_0x717283&&_0x17dc12[_0x13df9c(0xc83)]())this[_0x13df9c(0x374)][_0x13df9c(0xa26)](_0x717283);}},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x6e2)]=function(){const _0x33b20c=_0x12d94d;for(const _0x3e34af of $gameParty[_0x33b20c(0xafe)]()){if(_0x33b20c(0x670)!==_0x33b20c(0x670))return _0x459dab[_0x33b20c(0xadf)][_0x33b20c(0xb08)][_0x33b20c(0x9d9)][_0x33b20c(0xbff)];else{if(!_0x3e34af)continue;if(!_0x3e34af[_0x33b20c(0x9b8)]())continue;_0x3e34af[_0x33b20c(0x9b8)]()[_0x33b20c(0x662)]=!![],_0x3e34af[_0x33b20c(0x9b8)]()['retreat']();}}},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x7ec)]=function(){const _0x3363ec=_0x12d94d;this['_uiContainer']=new Sprite(),Spriteset_Battle[_0x3363ec(0x36c)]?_0x3363ec(0x1ca)!==_0x3363ec(0x1ca)?(_0x3383b9[_0x3363ec(0xadf)][_0x3363ec(0x956)][_0x3363ec(0xba3)](this),this['onBattleEndBattleCore']()):this[_0x3363ec(0xa26)](this[_0x3363ec(0x101)]):this[_0x3363ec(0xe4)][_0x3363ec(0xa26)](this['_uiContainer']),SceneManager['_scene']['_uiContainer']=this['_uiContainer'];},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x841)]=function(){const _0x468195=_0x12d94d;if(VisuMZ[_0x468195(0xadf)][_0x468195(0xb08)]['Enemy'][_0x468195(0x96d)])return;this[_0x468195(0x6b7)]=new Sprite(),BattleManager[_0x468195(0x1fd)](this[_0x468195(0x6b7)]);for(const _0x2150d9 of this[_0x468195(0x4cc)]){const _0x452073=new Sprite_EnemyName();this[_0x468195(0x6b7)][_0x468195(0xa26)](_0x452073),_0x452073[_0x468195(0x64a)](_0x2150d9);}},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x7ae)]=function(){const _0x509d72=_0x12d94d;if(!this[_0x509d72(0xb15)])return;if(!this[_0x509d72(0x101)])return;const _0x143c24=Spriteset_Battle[_0x509d72(0x36c)]?this[_0x509d72(0xb15)]['x']:0x0,_0x2e952a=Spriteset_Battle[_0x509d72(0x36c)]?this[_0x509d72(0xb15)]['y']:0x0,_0x45b252=Imported[_0x509d72(0x857)]?this[_0x509d72(0xe4)]['x']:0x0,_0x33a529=Imported['VisuMZ_3_ActSeqCamera']?this[_0x509d72(0xe4)]['y']:0x0;this[_0x509d72(0x101)]['x']=_0x143c24+_0x45b252,this[_0x509d72(0x101)]['y']=_0x2e952a+_0x33a529;},BattleManager[_0x12d94d(0x1fd)]=function(_0x5183ea){const _0x26e0c9=_0x12d94d;if(!SceneManager['_scene'][_0x26e0c9(0x101)])return;SceneManager[_0x26e0c9(0x592)][_0x26e0c9(0x101)][_0x26e0c9(0xa26)](_0x5183ea);},BattleManager[_0x12d94d(0xae3)]=function(_0x411b2b){const _0x34f263=_0x12d94d;if(!SceneManager[_0x34f263(0x592)]['_uiContainer'])return;SceneManager['_scene'][_0x34f263(0x101)]['removeChild'](_0x411b2b);},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0xb4e)]=function(){return 0xff;},Spriteset_Battle[_0x12d94d(0x4e9)]['isBusy']=function(){return![];},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x4d1)]=function(){const _0x4029a9=_0x12d94d;return this[_0x4029a9(0x879)]()[_0x4029a9(0x97f)](_0x5c47e7=>_0x5c47e7['isFloating']());},Spriteset_Battle['prototype'][_0x12d94d(0xcc7)]=function(){const _0x44daa0=_0x12d94d;return this['battlerSprites']()[_0x44daa0(0x97f)](_0x477d73=>_0x477d73[_0x44daa0(0x468)]());},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x1c5)]=function(){const _0x435df1=_0x12d94d;return this[_0x435df1(0x879)]()[_0x435df1(0x97f)](_0x643745=>_0x643745[_0x435df1(0x588)]());},Spriteset_Battle[_0x12d94d(0x4e9)][_0x12d94d(0x7ff)]=function(){const _0x11464d=_0x12d94d;return this['battlerSprites']()['some'](_0x2bd2a7=>_0x2bd2a7[_0x11464d(0x456)]());},Spriteset_Battle['prototype'][_0x12d94d(0x406)]=function(){const _0x1f3119=_0x12d94d;return this[_0x1f3119(0x879)]()[_0x1f3119(0x97f)](_0x4760de=>_0x4760de['isSpinning']());},Spriteset_Battle['prototype'][_0x12d94d(0x5a6)]=function(){const _0x258b1f=_0x12d94d;return this['battlerSprites']()[_0x258b1f(0x97f)](_0x2fd6c1=>_0x2fd6c1['isChangingOpacity']());},VisuMZ['BattleCore'][_0x12d94d(0x8cb)]=Window_ItemList[_0x12d94d(0x4e9)][_0x12d94d(0x212)],Window_ItemList[_0x12d94d(0x4e9)][_0x12d94d(0x212)]=function(){const _0x4c7c1e=_0x12d94d;if(SceneManager[_0x4c7c1e(0xb92)]()){if(SceneManager['_scene'][_0x4c7c1e(0xbb9)]()===_0x4c7c1e(0xb2d)){if(_0x4c7c1e(0x4d3)!==_0x4c7c1e(0x53c))return VisuMZ['BattleCore']['Settings'][_0x4c7c1e(0x160)][_0x4c7c1e(0x546)];else for(const _0x54c350 of _0x23f489){for(const _0x47770e of _0x3496d6){const _0x260f7e=_0x10efc2[0x0][_0x4c7c1e(0x3d0)](_0x47770e[0x0],_0x54c350[0x0]),_0x10ae26=_0x1c2db1[0x1][_0x4c7c1e(0x3d0)](_0x47770e[0x1],_0x54c350[0x1])[_0x4c7c1e(0xc39)](),_0x52df38=new _0x1f786d(_0x2e2734[_0x4c7c1e(0x3d0)](_0x10ae26),'i');_0x586f89[_0x260f7e]=_0x52df38;}}}else return _0x4c7c1e(0x4f4)===_0x4c7c1e(0x7c3)?_0x520732(_0x16e5f3['$1']):VisuMZ[_0x4c7c1e(0xadf)][_0x4c7c1e(0xb08)][_0x4c7c1e(0x160)][_0x4c7c1e(0x977)];}else{if(_0x4c7c1e(0x2ab)!==_0x4c7c1e(0x95c))return VisuMZ[_0x4c7c1e(0xadf)][_0x4c7c1e(0x8cb)][_0x4c7c1e(0xba3)](this);else _0x1f0bac[_0x4c7c1e(0x66c)]();}},VisuMZ['BattleCore'][_0x12d94d(0x8bc)]=Window_SkillList['prototype'][_0x12d94d(0x212)],Window_SkillList[_0x12d94d(0x4e9)][_0x12d94d(0x212)]=function(){const _0x8974cf=_0x12d94d;if(SceneManager['isSceneBattle']()){if(SceneManager['_scene'][_0x8974cf(0xbb9)]()===_0x8974cf(0xb2d))return VisuMZ[_0x8974cf(0xadf)][_0x8974cf(0xb08)][_0x8974cf(0x160)]['SkillItemBorderCols'];else{if(_0x8974cf(0x310)===_0x8974cf(0x310))return VisuMZ[_0x8974cf(0xadf)][_0x8974cf(0xb08)][_0x8974cf(0x160)][_0x8974cf(0x977)];else{if(!_0x199d94['isPlaytest']())return;_0x2ae010['log'](this[_0x8974cf(0x833)]['map'](_0x26cf67=>_0x26cf67[_0x8974cf(0x536)])['join']('\x0a'));}}}else return VisuMZ[_0x8974cf(0xadf)]['Window_SkillList_maxCols'][_0x8974cf(0xba3)](this);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x429)]=Window_Options[_0x12d94d(0x4e9)][_0x12d94d(0x902)],Window_Options[_0x12d94d(0x4e9)][_0x12d94d(0x902)]=function(){const _0x679364=_0x12d94d;VisuMZ['BattleCore'][_0x679364(0x429)][_0x679364(0xba3)](this),this[_0x679364(0x9d)](),this[_0x679364(0x312)]();},Window_Options['prototype'][_0x12d94d(0x9d)]=function(){const _0x1f4a67=_0x12d94d;VisuMZ[_0x1f4a67(0xadf)]['Settings']['AutoBattle'][_0x1f4a67(0x138)]&&(this[_0x1f4a67(0x92b)](),this[_0x1f4a67(0x122)]());},Window_Options[_0x12d94d(0x4e9)][_0x12d94d(0x312)]=function(){const _0x121608=_0x12d94d;if(!VisuMZ[_0x121608(0xadf)][_0x121608(0xb08)][_0x121608(0x757)][_0x121608(0x2f1)])return;const _0x2217d3=TextManager[_0x121608(0x351)],_0x490875=_0x121608(0x351);this['addCommand'](_0x2217d3,_0x490875);},Window_Options[_0x12d94d(0x4e9)][_0x12d94d(0x92b)]=function(){const _0x195552=_0x12d94d,_0x1e4ec9=TextManager[_0x195552(0x6e3)],_0x5599c3=_0x195552(0x506);this[_0x195552(0xb0a)](_0x1e4ec9,_0x5599c3);},Window_Options['prototype'][_0x12d94d(0x122)]=function(){const _0x2a99cb=_0x12d94d,_0x3a3c92=TextManager[_0x2a99cb(0x5f8)],_0x5ce847=_0x2a99cb(0xbe8);this[_0x2a99cb(0xb0a)](_0x3a3c92,_0x5ce847);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x579)]=Window_Options['prototype']['statusText'],Window_Options[_0x12d94d(0x4e9)][_0x12d94d(0xaba)]=function(_0x493887){const _0x1485f1=_0x12d94d,_0x4d5f0c=this[_0x1485f1(0x755)](_0x493887);return _0x4d5f0c===_0x1485f1(0xbe8)?this[_0x1485f1(0x319)]():VisuMZ['BattleCore'][_0x1485f1(0x579)][_0x1485f1(0xba3)](this,_0x493887);},Window_Options[_0x12d94d(0x4e9)]['statusTextAutoBattleStyle']=function(){const _0x87b8a2=_0x12d94d,_0x14d965=VisuMZ[_0x87b8a2(0xadf)][_0x87b8a2(0xb08)][_0x87b8a2(0xa50)],_0x498c06=this[_0x87b8a2(0x87c)](_0x87b8a2(0xbe8));return _0x498c06?_0x14d965[_0x87b8a2(0x62e)]:_0x14d965[_0x87b8a2(0x93)];},Window_ShopStatus['prototype']['getItemDamageAmountLabelBattleCore']=function(){const _0x46ab11=_0x12d94d,_0x49364a=DataManager[_0x46ab11(0x4a8)](this[_0x46ab11(0x504)]),_0x5db6fd=VisuMZ['DamageStyles'][_0x49364a];if(!_0x5db6fd)return this[_0x46ab11(0xa17)]();const _0xbd7f33='DamageType%1'['format'](this[_0x46ab11(0x504)][_0x46ab11(0x1df)][_0x46ab11(0x360)]),_0x224304=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x46ab11(0x504)][_0x46ab11(0x1df)][_0x46ab11(0x360)]];return _0x5db6fd[_0xbd7f33][_0x46ab11(0x3d0)](_0x224304);},Window_ShopStatus[_0x12d94d(0x4e9)][_0x12d94d(0xb13)]=function(){const _0xae04a6=_0x12d94d,_0xde3fe4=DataManager[_0xae04a6(0x4a8)](this[_0xae04a6(0x504)]),_0x58c6d=VisuMZ[_0xae04a6(0x659)][_0xde3fe4];if(!_0x58c6d)return this['getItemDamageAmountTextOriginal']();return _0x58c6d[_0xae04a6(0x5e4)][_0xae04a6(0xba3)](this);},VisuMZ[_0x12d94d(0xadf)]['Window_PartyCommand_initialize']=Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x8df)],Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x8df)]=function(_0x3c0232){const _0x22bad3=_0x12d94d;VisuMZ['BattleCore'][_0x22bad3(0xa43)][_0x22bad3(0xba3)](this,_0x3c0232),this[_0x22bad3(0x44c)](_0x3c0232);},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x44c)]=function(_0x262b5a){const _0x4af65c=_0x12d94d,_0x39382e=new Rectangle(0x0,0x0,_0x262b5a[_0x4af65c(0xa80)],_0x262b5a['height']);this['_commandNameWindow']=new Window_Base(_0x39382e),this[_0x4af65c(0x760)]['opacity']=0x0,this[_0x4af65c(0xa26)](this[_0x4af65c(0x760)]),this[_0x4af65c(0x46f)]();},Window_PartyCommand[_0x12d94d(0x4e9)]['callUpdateHelp']=function(){const _0x59f242=_0x12d94d;Window_Command['prototype'][_0x59f242(0x2fe)][_0x59f242(0xba3)](this);if(this['_commandNameWindow'])this[_0x59f242(0x46f)]();},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x46f)]=function(){const _0x5974af=_0x12d94d,_0x342627=this[_0x5974af(0x760)];_0x342627[_0x5974af(0xa74)]['clear']();const _0x38cd5c=this[_0x5974af(0x569)](this['index']());if(_0x38cd5c===_0x5974af(0x4cd)&&this['maxItems']()>0x0){const _0x3f614d=this[_0x5974af(0x8b5)](this['index']());let _0x218131=this[_0x5974af(0x2c8)](this[_0x5974af(0x926)]());_0x218131=_0x218131['replace'](/\\I\[(\d+)\]/gi,''),_0x342627[_0x5974af(0xc47)](),this[_0x5974af(0x7cd)](_0x218131,_0x3f614d),this[_0x5974af(0x632)](_0x218131,_0x3f614d),this['commandNameWindowCenter'](_0x218131,_0x3f614d);}},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x7cd)]=function(_0x3fa546,_0x174a60){},Window_PartyCommand['prototype']['commandNameWindowDrawText']=function(_0x105285,_0x5c0f1e){const _0x50d4ed=_0x12d94d,_0xe86778=this[_0x50d4ed(0x760)];_0xe86778[_0x50d4ed(0x89d)](_0x105285,0x0,_0x5c0f1e['y'],_0xe86778[_0x50d4ed(0xa98)],'center');},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x821)]=function(_0x1721f4,_0x1829e0){const _0x1d876a=_0x12d94d,_0x111717=this[_0x1d876a(0x760)],_0x479af6=$gameSystem[_0x1d876a(0x4b0)](),_0x4126ab=_0x1829e0['x']+Math[_0x1d876a(0x28f)](_0x1829e0[_0x1d876a(0xa80)]/0x2)+_0x479af6;_0x111717['x']=_0x111717[_0x1d876a(0xa80)]/-0x2+_0x4126ab,_0x111717['y']=Math['floor'](_0x1829e0[_0x1d876a(0xd17)]/0x2);},Window_PartyCommand[_0x12d94d(0x4e9)]['makeCommandList']=function(){const _0x3ce255=_0x12d94d;this[_0x3ce255(0x601)](),this[_0x3ce255(0x354)](),this[_0x3ce255(0x7b2)](),this['addOptionsCommand'](),this['addEscapeCommand']();},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x601)]=function(){const _0x368e86=_0x12d94d,_0x2d58c6=this[_0x368e86(0x86b)](),_0x20bab2=VisuMZ[_0x368e86(0xadf)][_0x368e86(0xb08)]['PartyCmd'][_0x368e86(0x859)],_0x9e2e17=_0x2d58c6===_0x368e86(0x1e6)?TextManager['fight']:_0x368e86(0x3ae)['format'](_0x20bab2,TextManager['fight']),_0x39c820=this[_0x368e86(0x92f)]();this[_0x368e86(0xb0a)](_0x9e2e17,_0x368e86(0x988),_0x39c820);},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x92f)]=function(){return!![];},Window_PartyCommand['prototype']['addAutoBattleCommand']=function(){const _0x5b1b41=_0x12d94d;if(!this[_0x5b1b41(0x3e8)]())return;const _0x1391a6=this[_0x5b1b41(0x86b)](),_0x41aead=VisuMZ['BattleCore'][_0x5b1b41(0xb08)]['PartyCmd'][_0x5b1b41(0x5c1)],_0x333aeb=_0x1391a6===_0x5b1b41(0x1e6)?TextManager[_0x5b1b41(0x7f7)]:_0x5b1b41(0x3ae)['format'](_0x41aead,TextManager[_0x5b1b41(0x7f7)]),_0xfd5838=this[_0x5b1b41(0xc4d)]();this[_0x5b1b41(0xb0a)](_0x333aeb,_0x5b1b41(0x7f7),_0xfd5838);},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x3e8)]=function(){const _0x177268=_0x12d94d;return VisuMZ[_0x177268(0xadf)][_0x177268(0xb08)]['PartyCmd']['CommandAddAutoBattle'];},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0xc4d)]=function(){return!![];},Window_PartyCommand[_0x12d94d(0x4e9)]['addCustomCommands']=function(){},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x1b3)]=function(){const _0x2bff58=_0x12d94d;if(!this[_0x2bff58(0x55b)]())return;const _0x4f6187=this['commandStyle'](),_0x506854=VisuMZ[_0x2bff58(0xadf)][_0x2bff58(0xb08)][_0x2bff58(0xa88)][_0x2bff58(0x63f)],_0x51bccf=_0x4f6187===_0x2bff58(0x1e6)?TextManager[_0x2bff58(0xb7e)]:_0x2bff58(0x3ae)[_0x2bff58(0x3d0)](_0x506854,TextManager[_0x2bff58(0xb7e)]),_0x509f18=this[_0x2bff58(0x499)]();this[_0x2bff58(0xb0a)](_0x51bccf,'options',_0x509f18);},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x55b)]=function(){const _0x9a7fa4=_0x12d94d;return VisuMZ['BattleCore'][_0x9a7fa4(0xb08)][_0x9a7fa4(0xa88)]['CommandAddOptions'];},Window_PartyCommand['prototype']['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0xbd5)]=function(){const _0x387a9b=_0x12d94d,_0x93efba=this[_0x387a9b(0x86b)](),_0x5639e8=VisuMZ[_0x387a9b(0xadf)]['Settings'][_0x387a9b(0xa88)][_0x387a9b(0x9cd)],_0x52b33b=_0x93efba===_0x387a9b(0x1e6)?TextManager[_0x387a9b(0x691)]:_0x387a9b(0x3ae)['format'](_0x5639e8,TextManager['escape']),_0x328415=this[_0x387a9b(0x53a)]();this[_0x387a9b(0xb0a)](_0x52b33b,_0x387a9b(0x691),_0x328415);},Window_PartyCommand[_0x12d94d(0x4e9)]['isEscapeCommandEnabled']=function(){const _0x572cde=_0x12d94d;return BattleManager[_0x572cde(0x98c)]();},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0xc69)]=function(){const _0x49a555=_0x12d94d;return VisuMZ['BattleCore'][_0x49a555(0xb08)][_0x49a555(0xa88)]['CmdTextAlign'];},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0xb16)]=function(_0x530cbf){const _0x34c531=_0x12d94d,_0x5d4712=this[_0x34c531(0x569)](_0x530cbf);if(_0x5d4712===_0x34c531(0xb50)){if(_0x34c531(0x6be)==='AorSI')return _0x311b24[_0x34c531(0xadf)][_0x34c531(0xb08)]['Enemy']['SmoothImage'];else this[_0x34c531(0xb56)](_0x530cbf);}else _0x5d4712===_0x34c531(0x4cd)?_0x34c531(0x423)==='EGARe'?this[_0x34c531(0xcb6)](_0x530cbf):_0x29562c['setValue'](_0x12e4d0[_0x34c531(0x139)],0x0):Window_Command[_0x34c531(0x4e9)][_0x34c531(0xb16)][_0x34c531(0xba3)](this,_0x530cbf);},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x86b)]=function(){const _0x4719e7=_0x12d94d;return VisuMZ[_0x4719e7(0xadf)][_0x4719e7(0xb08)][_0x4719e7(0xa88)][_0x4719e7(0x721)];},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x569)]=function(_0x4e7a2d){const _0x419221=_0x12d94d;if(_0x4e7a2d<0x0)return'text';const _0x8c86da=this['commandStyle']();if(_0x8c86da!==_0x419221(0xb7)){if(_0x419221(0x26d)!==_0x419221(0x26d)){const _0x5e3982=this['aliveMembers']();return _0x5e3982[_0x38847f[_0x419221(0xbec)](_0x5e3982[_0x419221(0x29c)])];}else return _0x8c86da;}else{if(this[_0x419221(0xce6)]()>0x0){if(_0x419221(0x7c0)!==_0x419221(0xac3)){const _0x5732c4=this['commandName'](_0x4e7a2d);if(_0x5732c4[_0x419221(0x214)](/\\I\[(\d+)\]/i)){if(_0x419221(0xea)==='gQvzz'){const _0x4f370f=this[_0x419221(0x8b5)](_0x4e7a2d),_0xfe3449=this['textSizeEx'](_0x5732c4)['width'];return _0xfe3449<=_0x4f370f[_0x419221(0xa80)]?_0x419221(0xb50):'icon';}else _0x238ef5['BattleCore']['Scene_Battle_onActorCancel'][_0x419221(0xba3)](this);}}else{_0x227e12['prototype']['updateFrame'][_0x419221(0xba3)](this);const _0xf0d042=this[_0x419221(0xbac)]()||this;if(!_0xf0d042)return;!_0xf0d042['bitmap']&&(_0xf0d042[_0x419221(0x222)]=new _0x506144(this['width']||0x1,this[_0x419221(0xd17)]||0x1));if(this[_0x419221(0x890)]===_0x419221(0x29f))this[_0x419221(0x73)][_0x419221(0x422)](0x0,0x0,this[_0x419221(0x73)][_0x419221(0xa80)]||0x1,this[_0x419221(0x3c1)]);else{let _0x2c8c68=0x1;if(_0xf0d042&&_0xf0d042[_0x419221(0x222)])_0x2c8c68=_0xf0d042['bitmap'][_0x419221(0xa80)];let _0x29c5b1=0x1;if(this['bitmap'])_0x29c5b1=this[_0x419221(0x222)]['height'];_0xf0d042['setFrame'](0x0,0x0,_0x2c8c68,_0x29c5b1);}}}}return _0x419221(0x1e6);},Window_PartyCommand[_0x12d94d(0x4e9)]['drawItemStyleIconText']=function(_0x2ded9f){const _0xe4f932=_0x12d94d,_0x4000b9=this[_0xe4f932(0x8b5)](_0x2ded9f),_0x55b3ea=this[_0xe4f932(0x2c8)](_0x2ded9f),_0x3d73f7=this[_0xe4f932(0x467)](_0x55b3ea)[_0xe4f932(0xa80)];this[_0xe4f932(0x8b6)](this[_0xe4f932(0xae6)](_0x2ded9f));const _0x2d61b8=this['itemTextAlign']();if(_0x2d61b8===_0xe4f932(0x963))_0xe4f932(0x72f)!==_0xe4f932(0x72f)?(_0x4c97a3+=_0x7d6e99['isActor']()?-_0x3c1414:_0x2b5d15,_0x3ac836+=_0x5e0a00):this[_0xe4f932(0x786)](_0x55b3ea,_0x4000b9['x']+_0x4000b9[_0xe4f932(0xa80)]-_0x3d73f7,_0x4000b9['y'],_0x3d73f7);else{if(_0x2d61b8===_0xe4f932(0xae7)){if(_0xe4f932(0x1d4)==='ieuoO'){const _0x1dafb5=_0x4000b9['x']+Math[_0xe4f932(0x28f)]((_0x4000b9[_0xe4f932(0xa80)]-_0x3d73f7)/0x2);this[_0xe4f932(0x786)](_0x55b3ea,_0x1dafb5,_0x4000b9['y'],_0x3d73f7);}else{const _0x41db7c=this[_0xe4f932(0xc7)]()[_0xe4f932(0xbad)];if(_0x41db7c[_0xe4f932(0x214)](/ANY/i))return!![];return _0x41db7c[_0xe4f932(0x214)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);}}else this['drawTextEx'](_0x55b3ea,_0x4000b9['x'],_0x4000b9['y'],_0x3d73f7);}},Window_PartyCommand['prototype'][_0x12d94d(0xcb6)]=function(_0x548c42){const _0x2dfa85=_0x12d94d;this[_0x2dfa85(0x2c8)](_0x548c42)[_0x2dfa85(0x214)](/\\I\[(\d+)\]/i);const _0x491ad5=Number(RegExp['$1'])||0x0,_0x4be723=this[_0x2dfa85(0x8b5)](_0x548c42),_0x3626fc=_0x4be723['x']+Math[_0x2dfa85(0x28f)]((_0x4be723[_0x2dfa85(0xa80)]-ImageManager[_0x2dfa85(0x282)])/0x2),_0x5c2637=_0x4be723['y']+(_0x4be723[_0x2dfa85(0xd17)]-ImageManager[_0x2dfa85(0x1b2)])/0x2;this[_0x2dfa85(0x7c5)](_0x491ad5,_0x3626fc,_0x5c2637);},Window_PartyCommand['prototype'][_0x12d94d(0x165)]=function(){},Window_PartyCommand[_0x12d94d(0x4e9)]['activate']=function(){const _0x5de633=_0x12d94d;Window_Command[_0x5de633(0x4e9)][_0x5de633(0x288)][_0x5de633(0xba3)](this);const _0x570a07=this['battleLayoutStyle']();_0x570a07===_0x5de633(0xb2d)&&this[_0x5de633(0xb89)]();},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0xbb9)]=function(){const _0x5c56d4=_0x12d94d;if(this['_battleLayoutStyle'])return this[_0x5c56d4(0x78e)];return this[_0x5c56d4(0x78e)]=SceneManager[_0x5c56d4(0x592)][_0x5c56d4(0xbb9)](),this[_0x5c56d4(0x78e)];},Window_PartyCommand[_0x12d94d(0x4e9)][_0x12d94d(0x295)]=function(){const _0x1fa1e6=_0x12d94d,_0x247ab0=VisuMZ['BattleCore'][_0x1fa1e6(0xb08)][_0x1fa1e6(0xa88)],_0x5b1943=this[_0x1fa1e6(0xc43)]();switch(_0x5b1943){case _0x1fa1e6(0x988):this['_helpWindow']['setText'](_0x247ab0[_0x1fa1e6(0x4d7)]);break;case _0x1fa1e6(0x7f7):this[_0x1fa1e6(0x682)]['setText'](_0x247ab0[_0x1fa1e6(0x38b)]);break;case _0x1fa1e6(0xb7e):this['_helpWindow'][_0x1fa1e6(0x5e9)](_0x247ab0['HelpOptions']);break;case _0x1fa1e6(0x691):this['_helpWindow'][_0x1fa1e6(0x5e9)](_0x247ab0[_0x1fa1e6(0x145)]);break;default:this[_0x1fa1e6(0x682)][_0x1fa1e6(0x5e9)]('');break;}},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x1a7)]=Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x8df)],Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x8df)]=function(_0x2b885b){const _0x48b87d=_0x12d94d;VisuMZ[_0x48b87d(0xadf)][_0x48b87d(0x1a7)][_0x48b87d(0xba3)](this,_0x2b885b),this[_0x48b87d(0x44c)](_0x2b885b);},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x44c)]=function(_0x401c07){const _0x2e7af0=_0x12d94d,_0x3e7308=new Rectangle(0x0,0x0,_0x401c07[_0x2e7af0(0xa80)],_0x401c07[_0x2e7af0(0xd17)]);this[_0x2e7af0(0x760)]=new Window_Base(_0x3e7308),this[_0x2e7af0(0x760)][_0x2e7af0(0x9a8)]=0x0,this[_0x2e7af0(0xa26)](this[_0x2e7af0(0x760)]),this[_0x2e7af0(0x46f)]();},Window_ActorCommand[_0x12d94d(0x4e9)]['callUpdateHelp']=function(){const _0x49ce9c=_0x12d94d;Window_Command[_0x49ce9c(0x4e9)][_0x49ce9c(0x2fe)][_0x49ce9c(0xba3)](this);if(this[_0x49ce9c(0x760)])this[_0x49ce9c(0x46f)]();},Window_ActorCommand[_0x12d94d(0x4e9)]['updateCommandNameWindow']=function(){const _0x2d74f5=_0x12d94d,_0x4f5bc8=this[_0x2d74f5(0x760)];_0x4f5bc8[_0x2d74f5(0xa74)][_0x2d74f5(0x4ef)]();const _0x5b99d2=this[_0x2d74f5(0x569)](this[_0x2d74f5(0x926)]());if(_0x5b99d2===_0x2d74f5(0x4cd)&&this[_0x2d74f5(0xce6)]()>0x0){if('PAAbF'==='eOdRJ')this[_0x2d74f5(0xbce)](_0x2d74f5(0x767),this[_0x2d74f5(0xbaa)](_0x22e1de));else{const _0x4c0e1a=this[_0x2d74f5(0x8b5)](this[_0x2d74f5(0x926)]());let _0x494ff0=this['commandName'](this[_0x2d74f5(0x926)]());_0x494ff0=_0x494ff0[_0x2d74f5(0xae8)](/\\I\[(\d+)\]/gi,''),_0x4f5bc8[_0x2d74f5(0xc47)](),this['commandNameWindowDrawBackground'](_0x494ff0,_0x4c0e1a),this[_0x2d74f5(0x632)](_0x494ff0,_0x4c0e1a),this[_0x2d74f5(0x821)](_0x494ff0,_0x4c0e1a);}}},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x7cd)]=function(_0x121670,_0x2724a3){},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x632)]=function(_0x4d3f96,_0x378085){const _0x591aa3=_0x12d94d,_0x4d98ee=this[_0x591aa3(0x760)];_0x4d98ee['drawText'](_0x4d3f96,0x0,_0x378085['y'],_0x4d98ee[_0x591aa3(0xa98)],_0x591aa3(0xae7));},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x821)]=function(_0x4c5c97,_0xd2b51d){const _0x545ca8=_0x12d94d,_0x3d89aa=this[_0x545ca8(0x760)],_0x3b023d=$gameSystem[_0x545ca8(0x4b0)](),_0x143e10=_0xd2b51d['x']+Math['floor'](_0xd2b51d[_0x545ca8(0xa80)]/0x2)+_0x3b023d;_0x3d89aa['x']=_0x3d89aa[_0x545ca8(0xa80)]/-0x2+_0x143e10,_0x3d89aa['y']=Math[_0x545ca8(0x28f)](_0xd2b51d['height']/0x2);},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0xb98)]=function(){const _0x469263=_0x12d94d;if(!this[_0x469263(0xac6)])return;const _0x3e9b45=this[_0x469263(0xac6)][_0x469263(0x8bb)]();for(const _0x2c62a8 of _0x3e9b45){_0x469263(0x9cb)===_0x469263(0x9cb)?this['makeBattleCommand'](_0x2c62a8[_0x469263(0x97e)]()[_0x469263(0xc39)]()):this['requestBattleBalloon'](_0x16b131,_0x6722b4);}},Window_ActorCommand[_0x12d94d(0x4e9)]['makeBattleCommand']=function(_0x36c4fd){const _0xdd922c=_0x12d94d;if(_0x36c4fd===_0xdd922c(0x717)){if(_0xdd922c(0x281)!==_0xdd922c(0x281))return!![];else this[_0xdd922c(0x8f3)]();}[_0xdd922c(0xaac),_0xdd922c(0x2b5)][_0xdd922c(0x511)](_0x36c4fd)&&this[_0xdd922c(0x981)]();_0x36c4fd==='GUARD'&&this['addGuardCommand']();_0x36c4fd===_0xdd922c(0x341)&&(_0xdd922c(0x9cf)!=='WoBmE'?this[_0xdd922c(0xa29)]():this[_0xdd922c(0xb30)]('animation'));_0x36c4fd===_0xdd922c(0x40a)&&this[_0xdd922c(0xbd5)]();_0x36c4fd===_0xdd922c(0x677)&&this['addAutoBattleCommand']();if(_0x36c4fd[_0xdd922c(0x214)](/STYPE: (\d+)/i)){const _0x5bdac3=Number(RegExp['$1']);this[_0xdd922c(0x509)](_0x5bdac3);}else{if(_0x36c4fd[_0xdd922c(0x214)](/STYPE: (.*)/i)){const _0x3b3736=DataManager['getStypeIdWithName'](RegExp['$1']);this['addSkillTypeCommand'](_0x3b3736);}}_0x36c4fd===_0xdd922c(0x561)&&this['addSingleSkillCommands']();if(_0x36c4fd[_0xdd922c(0x214)](/SKILL: (\d+)/i)){const _0x2d084c=Number(RegExp['$1']);this[_0xdd922c(0x925)]($dataSkills[_0x2d084c]);}else{if(_0x36c4fd[_0xdd922c(0x214)](/SKILL: (.*)/i)){const _0x1a840a=DataManager[_0xdd922c(0x5b9)](RegExp['$1']);this[_0xdd922c(0x925)]($dataSkills[_0x1a840a]);}}_0x36c4fd==='PARTY'&&Imported[_0xdd922c(0x426)]&&this[_0xdd922c(0x6a4)](),[_0xdd922c(0xcb8),_0xdd922c(0x21e)][_0xdd922c(0x511)](_0x36c4fd)&&Imported[_0xdd922c(0x3a6)]&&this[_0xdd922c(0x34d)](),_0x36c4fd==='WEAPON\x20SWAP'&&Imported['VisuMZ_2_WeaponSwapSystem']&&this['addWeaponSwapCommand'](!![]),_0x36c4fd===_0xdd922c(0xcc)&&Imported[_0xdd922c(0xbc8)]&&this[_0xdd922c(0x710)]();},Window_ActorCommand[_0x12d94d(0x4e9)]['addAttackCommand']=function(){const _0x39f431=_0x12d94d,_0x42a115=$dataSkills[this[_0x39f431(0xac6)][_0x39f431(0x8a2)]()];if(!_0x42a115)return;if(!this[_0x39f431(0xb5a)](_0x42a115))return;const _0x5be671=this['commandStyle'](),_0x391229=DataManager[_0x39f431(0x173)](_0x42a115),_0x41a612=DataManager[_0x39f431(0xed)](_0x42a115),_0x262edd=_0x5be671===_0x39f431(0x1e6)?_0x391229:'\x5cI[%1]%2'['format'](_0x41a612,_0x391229);this['addCommand'](_0x262edd,_0x39f431(0x695),this[_0x39f431(0xac6)][_0x39f431(0xc9e)]());},Window_ActorCommand[_0x12d94d(0x4e9)]['addGuardCommand']=function(){const _0xc8c06b=_0x12d94d,_0x2dbf9b=$dataSkills[this[_0xc8c06b(0xac6)][_0xc8c06b(0x302)]()];if(!_0x2dbf9b)return;if(!this[_0xc8c06b(0xb5a)](_0x2dbf9b))return;const _0x1c52bc=this[_0xc8c06b(0x86b)](),_0x18ff82=DataManager[_0xc8c06b(0x173)](_0x2dbf9b),_0x1a628b=DataManager[_0xc8c06b(0xed)](_0x2dbf9b),_0x2e66e1=_0x1c52bc===_0xc8c06b(0x1e6)?_0x18ff82:_0xc8c06b(0x3ae)[_0xc8c06b(0x3d0)](_0x1a628b,_0x18ff82);this[_0xc8c06b(0xb0a)](_0x2e66e1,_0xc8c06b(0x93e),this[_0xc8c06b(0xac6)]['canGuard']());},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0xa29)]=function(){const _0x23cfc8=_0x12d94d,_0x4a7b38=this[_0x23cfc8(0x86b)](),_0x38efef=VisuMZ[_0x23cfc8(0xadf)][_0x23cfc8(0xb08)][_0x23cfc8(0x9d9)]['CmdIconItem'],_0x3f3231=_0x4a7b38==='text'?TextManager[_0x23cfc8(0xc7)]:_0x23cfc8(0x3ae)['format'](_0x38efef,TextManager[_0x23cfc8(0xc7)]),_0xfc038b=this['isItemCommandEnabled']();this[_0x23cfc8(0xb0a)](_0x3f3231,'item',_0xfc038b);},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x9a5)]=function(){const _0x2a4c96=_0x12d94d;return this['_actor']&&this[_0x2a4c96(0xac6)][_0x2a4c96(0xa64)]();},Window_ActorCommand[_0x12d94d(0x4e9)]['addSkillCommands']=function(){const _0x214352=_0x12d94d,_0xa2a022=this[_0x214352(0xac6)][_0x214352(0x634)]();for(const _0x300ba9 of _0xa2a022){this[_0x214352(0x509)](_0x300ba9);}},Window_ActorCommand[_0x12d94d(0x4e9)]['addSkillTypeCommand']=function(_0x381fa6){const _0x112cb4=_0x12d94d;let _0xa01c14=$dataSystem['skillTypes'][_0x381fa6];if(!_0xa01c14)return;let _0x430c81=_0xa01c14;const _0x378934=this['commandStyle']();if(_0x378934==='text')_0x430c81=_0x430c81['replace'](/\x1I\[(\d+)\]/gi,''),_0x430c81=_0x430c81[_0x112cb4(0xae8)](/\\I\[(\d+)\]/gi,'');else{if(!_0xa01c14[_0x112cb4(0x214)](/\\I\[(\d+)\]/i)){if(_0x112cb4(0x742)===_0x112cb4(0x742)){const _0x5aaedf=Imported[_0x112cb4(0x86a)]?VisuMZ[_0x112cb4(0x51b)][_0x112cb4(0xb08)][_0x112cb4(0x961)]:VisuMZ['BattleCore'][_0x112cb4(0xb08)][_0x112cb4(0x9d9)],_0x1af62e=$dataSystem['magicSkills'][_0x112cb4(0x511)](_0x381fa6),_0x6996ad=_0x1af62e?_0x5aaedf[_0x112cb4(0x892)]:_0x5aaedf[_0x112cb4(0xbc9)];_0x430c81=_0x112cb4(0x3ae)[_0x112cb4(0x3d0)](_0x6996ad,_0xa01c14);}else return _0x36bed5['BattleCore']['BattleManager_isTpbMainPhase'][_0x112cb4(0xba3)](this);}}this['addCommand'](_0x430c81,'skill',!![],_0x381fa6);},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x50c)]=function(){const _0x33bdb2=_0x12d94d,_0x18544a=this[_0x33bdb2(0xac6)][_0x33bdb2(0x634)](),_0x1536f5=this[_0x33bdb2(0xac6)][_0x33bdb2(0x7b9)]();for(const _0x274488 of _0x1536f5){if(!_0x274488)continue;if(Imported[_0x33bdb2(0x86a)]){if(this[_0x33bdb2(0x675)](_0x274488))continue;if(this[_0x33bdb2(0x597)](_0x274488))continue;}else{if(!_0x18544a[_0x33bdb2(0x511)](_0x274488[_0x33bdb2(0xc34)]))continue;}this['addSingleSkillCommand'](_0x274488);}},Window_ActorCommand['prototype'][_0x12d94d(0x675)]=function(_0x39387f){const _0x3154ee=_0x12d94d,_0x29f988=this['_actor'][_0x3154ee(0x634)](),_0x33aaf2=_0x29f988['filter'](_0x5066e4=>DataManager['getSkillTypes'](_0x39387f)[_0x3154ee(0x511)](_0x5066e4));return _0x33aaf2['length']<=0x0;},Window_ActorCommand['prototype'][_0x12d94d(0x597)]=function(_0x5aae87){const _0x47b98a=_0x12d94d;if(Imported[_0x47b98a(0x86a)]){if(_0x47b98a(0xcf4)!==_0x47b98a(0x228)){if(VisuMZ[_0x47b98a(0x51b)][_0x47b98a(0xa0d)]>=1.24){if(this[_0x47b98a(0xac6)]){if(_0x47b98a(0x64e)===_0x47b98a(0x64e)){if(!VisuMZ[_0x47b98a(0x51b)][_0x47b98a(0x4e3)](this[_0x47b98a(0xac6)],_0x5aae87))return!![];if(!VisuMZ[_0x47b98a(0x51b)][_0x47b98a(0x37e)](this[_0x47b98a(0xac6)],_0x5aae87))return!![];if(!VisuMZ[_0x47b98a(0x51b)]['CheckVisibleSkillNotetags'](this['_actor'],_0x5aae87))return!![];}else this[_0x47b98a(0x9d7)]=0x0;}}else{if('XZGCS'!==_0x47b98a(0xd29)){if(!Window_SkillList[_0x47b98a(0x4e9)]['checkShowHideBattleNotetags'][_0x47b98a(0xba3)](this,_0x5aae87))return!![];if(!Window_SkillList[_0x47b98a(0x4e9)][_0x47b98a(0x8b4)][_0x47b98a(0xba3)](this,_0x5aae87))return!![];if(!Window_SkillList[_0x47b98a(0x4e9)]['checkShowHideSkillNotetags'][_0x47b98a(0xba3)](this,_0x5aae87))return!![];}else return _0x47b98a(0xb50);}}else this[_0x47b98a(0xc4a)]();}return![];},Window_ActorCommand['prototype'][_0x12d94d(0x925)]=function(_0x5aa71a){const _0x3def44=_0x12d94d;if(!_0x5aa71a)return;if(!this[_0x3def44(0xb5a)](_0x5aa71a))return;const _0x45b00e=this[_0x3def44(0x86b)](),_0x23c57c=DataManager[_0x3def44(0x173)](_0x5aa71a),_0x3cee85=DataManager[_0x3def44(0xed)](_0x5aa71a),_0x155578=_0x45b00e===_0x3def44(0x1e6)?_0x23c57c:'\x5cI[%1]%2'['format'](_0x3cee85,_0x23c57c),_0x5f4f52=this[_0x3def44(0xac6)][_0x3def44(0x55a)](_0x5aa71a);this[_0x3def44(0xb0a)](_0x155578,_0x3def44(0xc70),_0x5f4f52,_0x5aa71a['id']);},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0xb5a)]=function(_0x591680){const _0x3f3a30=_0x12d94d,_0xf5191c=_0x591680[_0x3f3a30(0x7ba)];if(_0xf5191c['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x3f3a30(0xac6)][_0x3f3a30(0x9a2)](_0x591680['id']))return![];}if(_0xf5191c[_0x3f3a30(0x214)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x3f3a30(0x761)===_0x3f3a30(0x761)){if(!this['_actor'][_0x3f3a30(0xcf2)](_0x591680['id']))return![];}else{let _0x5ce774=this['createString'](_0x5973db);const _0x2aae16=this[_0x3f3a30(0x1ff)](),_0x2648c2=_0x25d290[_0x3f3a30(0x28f)](_0x2aae16*0.75);for(let _0x4df0f7=0x0;_0x4df0f7<_0x5ce774['length'];_0x4df0f7++){const _0x49e5d4=this['createChildSprite'](_0x2648c2,_0x2aae16);_0x49e5d4[_0x3f3a30(0x222)][_0x3f3a30(0x89d)](_0x5ce774[_0x4df0f7],0x0,0x0,_0x2648c2,_0x2aae16,'center'),_0x49e5d4['x']=(_0x4df0f7-(_0x5ce774[_0x3f3a30(0x29c)]-0x1)/0x2)*_0x2648c2,_0x49e5d4['dy']=-_0x4df0f7;}}}const _0x5f06e6=VisuMZ['BattleCore']['createKeyJS'](_0x591680,'CommandVisible');if(VisuMZ[_0x3f3a30(0xadf)]['JS'][_0x5f06e6]){if(_0x3f3a30(0x94b)!==_0x3f3a30(0xaa0)){if(!VisuMZ[_0x3f3a30(0xadf)]['JS'][_0x5f06e6]['call'](this,this[_0x3f3a30(0xac6)],_0x591680))return![];}else _0x26d3db='right';}return VisuMZ['BattleCore'][_0x3f3a30(0x9b1)](_0x591680);},VisuMZ[_0x12d94d(0xadf)]['CheckSkillCommandShowSwitches']=function(_0x5cc838){const _0x50a00e=_0x12d94d,_0x13f30b=_0x5cc838[_0x50a00e(0x7ba)];if(_0x13f30b[_0x50a00e(0x214)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2ca519=JSON[_0x50a00e(0xb79)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2172af of _0x2ca519){if(!$gameSwitches['value'](_0x2172af))return![];}return!![];}if(_0x13f30b[_0x50a00e(0x214)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x341031=JSON['parse']('['+RegExp['$1'][_0x50a00e(0x214)](/\d+/g)+']');for(const _0x397463 of _0x341031){if(!$gameSwitches[_0x50a00e(0xba9)](_0x397463))return![];}return!![];}if(_0x13f30b[_0x50a00e(0x214)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x50a00e(0x65a)===_0x50a00e(0x65a)){const _0x5acdac=JSON[_0x50a00e(0xb79)]('['+RegExp['$1'][_0x50a00e(0x214)](/\d+/g)+']');for(const _0x1f2185 of _0x5acdac){if(_0x50a00e(0x3ff)===_0x50a00e(0x3ff)){if($gameSwitches[_0x50a00e(0xba9)](_0x1f2185))return!![];}else{if(!_0x35e641[_0x50a00e(0xb92)]())return;_0x1f816b[_0x50a00e(0x2ec)](_0x110129,_0x24c0ee);const _0x2b3049=_0x1e3fbb[_0x50a00e(0x664)](),_0x3f8892=_0x4e1779[_0x50a00e(0x21f)];if(!_0x2b3049)return;_0x2b9f23[_0x50a00e(0x729)]--,_0x3d341f[_0x50a00e(0x4e5)]=_0x2d3cf1['_allTargets'][_0x29e2fa[_0x50a00e(0x729)]]||null,_0xf1e0b7[_0x50a00e(0x4e5)]&&_0x3f8892['toUpperCase']()['trim']()!==_0x50a00e(0x3be)&&_0x2b3049['command119']([_0x3f8892]);}}return![];}else this[_0x50a00e(0x17d)]()?_0x4ecdea[_0x50a00e(0x4e9)][_0x50a00e(0x996)][_0x50a00e(0xba3)](this):this[_0x50a00e(0xc20)]=0x8;}if(_0x13f30b[_0x50a00e(0x214)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('YYtYe'!==_0x50a00e(0x3e3))this[_0x50a00e(0x372)][_0x50a00e(0xba4)]();else{const _0x3e6d54=JSON[_0x50a00e(0xb79)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x42f9e2 of _0x3e6d54){if(_0x50a00e(0xbd2)===_0x50a00e(0xbd2)){if(!$gameSwitches[_0x50a00e(0xba9)](_0x42f9e2))return!![];}else{_0x2257a7=(_0x507435+_0x2e4a26)/0x2;if(_0xf4c163['battler']())_0xef100e+=_0x26f08b[_0x50a00e(0x9b8)]()['height']/0x2;}}return![];}}if(_0x13f30b['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5046a2=JSON['parse']('['+RegExp['$1'][_0x50a00e(0x214)](/\d+/g)+']');for(const _0x20f27a of _0x5046a2){if(_0x50a00e(0x837)!=='tnFKr'){if(!$gameSwitches[_0x50a00e(0xba9)](_0x20f27a))return!![];}else _0x118021[_0x50a00e(0xadf)][_0x50a00e(0x5d9)]['call'](this,_0xd81e99),this[_0x50a00e(0x769)]();}return![];}if(_0x13f30b[_0x50a00e(0x214)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3bf8e8=JSON[_0x50a00e(0xb79)]('['+RegExp['$1'][_0x50a00e(0x214)](/\d+/g)+']');for(const _0x1fa5ba of _0x3bf8e8){if($gameSwitches['value'](_0x1fa5ba))return![];}return!![];}return!![];},Window_ActorCommand['prototype'][_0x12d94d(0xbd5)]=function(){const _0x580e38=_0x12d94d,_0x5674e9=this[_0x580e38(0x86b)](),_0x3cc783=VisuMZ[_0x580e38(0xadf)][_0x580e38(0xb08)][_0x580e38(0xa88)]['CmdIconEscape'],_0x1ce344=_0x5674e9===_0x580e38(0x1e6)?TextManager[_0x580e38(0x691)]:_0x580e38(0x3ae)[_0x580e38(0x3d0)](_0x3cc783,TextManager[_0x580e38(0x691)]),_0x5c631d=this[_0x580e38(0x53a)]();this[_0x580e38(0xb0a)](_0x1ce344,'escape',_0x5c631d);},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x53a)]=function(){const _0x58a5e9=_0x12d94d;return BattleManager[_0x58a5e9(0x98c)]();},Window_ActorCommand[_0x12d94d(0x4e9)]['addAutoBattleCommand']=function(){const _0x4ef42c=_0x12d94d,_0x3716cf=this['commandStyle'](),_0x4b8cfb=VisuMZ[_0x4ef42c(0xadf)]['Settings'][_0x4ef42c(0xa88)][_0x4ef42c(0x5c1)],_0x359429=_0x3716cf===_0x4ef42c(0x1e6)?TextManager['autoBattle']:_0x4ef42c(0x3ae)['format'](_0x4b8cfb,TextManager[_0x4ef42c(0x7f7)]),_0x105351=this['isAutoBattleCommandEnabled']();this[_0x4ef42c(0xb0a)](_0x359429,_0x4ef42c(0x7f7),_0x105351);},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0xc4d)]=function(){return!![];},Window_ActorCommand['prototype'][_0x12d94d(0xc69)]=function(){const _0x400453=_0x12d94d;return VisuMZ[_0x400453(0xadf)][_0x400453(0xb08)][_0x400453(0x9d9)]['CmdTextAlign'];},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0xb16)]=function(_0x2d030b){const _0x5b39f0=_0x12d94d,_0x42704a=this[_0x5b39f0(0x569)](_0x2d030b);if(_0x42704a==='iconText'){if('iuFMy'==='iuFMy')this[_0x5b39f0(0xb56)](_0x2d030b);else return _0x2f8bf7[_0x5b39f0(0xadf)][_0x5b39f0(0xb08)]['BattleLayout']['SkillItemBorderCols'];}else _0x42704a==='icon'?this[_0x5b39f0(0xcb6)](_0x2d030b):_0x5b39f0(0x9b9)!=='xcqCY'?Window_Command[_0x5b39f0(0x4e9)][_0x5b39f0(0xb16)]['call'](this,_0x2d030b):_0x24bc19['push'](_0xdba7a(_0x1ccdc3['$1']));this['drawSingleSkillCost'](_0x2d030b);},Window_ActorCommand['prototype'][_0x12d94d(0x86b)]=function(){const _0x54d1bd=_0x12d94d;return VisuMZ[_0x54d1bd(0xadf)][_0x54d1bd(0xb08)][_0x54d1bd(0x9d9)][_0x54d1bd(0x721)];},Window_ActorCommand[_0x12d94d(0x4e9)]['commandStyleCheck']=function(_0xcd54e4){const _0x1bbb58=_0x12d94d;if(_0xcd54e4<0x0)return'text';const _0x520821=this[_0x1bbb58(0x86b)]();if(_0x520821!==_0x1bbb58(0xb7))return _0x520821;else{if(this[_0x1bbb58(0xce6)]()>0x0){const _0x1e29a9=this[_0x1bbb58(0x2c8)](_0xcd54e4);if(_0x1e29a9[_0x1bbb58(0x214)](/\\I\[(\d+)\]/i)){const _0x495618=this['itemLineRect'](_0xcd54e4),_0x4e73c3=this[_0x1bbb58(0x467)](_0x1e29a9)['width'];return _0x4e73c3<=_0x495618[_0x1bbb58(0xa80)]?_0x1bbb58(0xb50):_0x1bbb58(0x4cd);}}}return _0x1bbb58(0x1e6);},Window_ActorCommand[_0x12d94d(0x4e9)]['drawItemStyleIconText']=function(_0x24e5ca){const _0xf76703=_0x12d94d,_0x5d5c6c=this['itemLineRect'](_0x24e5ca),_0x27614b=this[_0xf76703(0x2c8)](_0x24e5ca),_0x3c5983=this[_0xf76703(0x467)](_0x27614b)[_0xf76703(0xa80)];this[_0xf76703(0x8b6)](this[_0xf76703(0xae6)](_0x24e5ca));const _0x36d087=this[_0xf76703(0xc69)]();if(_0x36d087===_0xf76703(0x963)){if('cPzBR'!==_0xf76703(0x1a5))this['drawTextEx'](_0x27614b,_0x5d5c6c['x']+_0x5d5c6c['width']-_0x3c5983,_0x5d5c6c['y'],_0x3c5983);else{const _0x28b614=_0x47cf2c[_0xf76703(0xadf)]['Settings']['BattleLayout'][_0xf76703(0xabf)],_0x556d5a=_0x5034f7[_0xf76703(0x1d0)](_0x5b1604['boxWidth']/0x3),_0x4676fa=_0xa3bd73[_0xf76703(0x1d0)](_0x35051f[_0xf76703(0x807)]/_0x4145b0[_0xf76703(0xc73)]()[_0xf76703(0x29c)]),_0x59b181=_0x1faf05[_0xf76703(0x660)](_0x2141a3[_0xf76703(0x2e3)](_0x556d5a,_0x4676fa),_0x28b614),_0x1744d6=this[_0xf76703(0x81e)](_0x322065[_0xf76703(0xadf)][_0xf76703(0xb08)]['BattleLayout']['XPActorCommandLines']),_0x37079c=_0x1edfbe[_0xf76703(0x28f)]((_0x255139['boxWidth']-_0x1811a6[_0xf76703(0xa80)])/0x2),_0x4a0b73=_0x1638a['boxWidth']-_0x37079c,_0x5599ec=(_0x3e18f5[_0xf76703(0x1d0)](_0x4676fa*_0x6a4f53[_0xf76703(0x926)]())+_0x389ba3[_0xf76703(0x1d0)]((_0x4676fa-_0x59b181)/0x2))[_0xf76703(0xa2d)](_0x37079c,_0x4a0b73-_0x59b181),_0x59bcb5=_0x3cf833[_0xf76703(0x1d0)](_0x66338e['_scene']['_statusWindow']['y']-_0x1744d6);this[_0xf76703(0x44b)](_0x5599ec,_0x59bcb5,_0x59b181,_0x1744d6),this[_0xf76703(0x20f)](),this[_0xf76703(0xc93)](0x1);}}else{if(_0x36d087===_0xf76703(0xae7)){if('cdsfN'===_0xf76703(0x6a8))_0x3fce6d[_0xf76703(0xb30)](_0xf76703(0x2c1));else{const _0x273161=_0x5d5c6c['x']+Math[_0xf76703(0x28f)]((_0x5d5c6c['width']-_0x3c5983)/0x2);this['drawTextEx'](_0x27614b,_0x273161,_0x5d5c6c['y'],_0x3c5983);}}else{if(_0xf76703(0xb73)!=='OgdYg'){const _0xf3e6aa=_0x360d8a[_0xf76703(0x17e)]();if(!_0xf3e6aa)return!![];if(!_0xf3e6aa[_0xf76703(0xc7)]())return!![];const _0x449637=this[_0xf76703(0x673)](),_0x442572=_0xf3e6aa[_0xf76703(0xc7)]()[_0xf76703(0x7ba)];if(_0xf3e6aa[_0xf76703(0x352)]()){if(_0x449637===_0x2c6c6c[_0xf76703(0xaa2)]())return![];}return!![];}else this['drawTextEx'](_0x27614b,_0x5d5c6c['x'],_0x5d5c6c['y'],_0x3c5983);}}},Window_ActorCommand[_0x12d94d(0x4e9)]['drawItemStyleIcon']=function(_0x530d2f){const _0x2e745f=_0x12d94d;this[_0x2e745f(0x2c8)](_0x530d2f)['match'](/\\I\[(\d+)\]/i);const _0x25e426=Number(RegExp['$1'])||0x0,_0x2caa41=this['itemLineRect'](_0x530d2f),_0x50c271=_0x2caa41['x']+Math['floor']((_0x2caa41[_0x2e745f(0xa80)]-ImageManager[_0x2e745f(0x282)])/0x2),_0x3cbef8=_0x2caa41['y']+(_0x2caa41['height']-ImageManager['iconHeight'])/0x2;this['drawIcon'](_0x25e426,_0x50c271,_0x3cbef8);},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0xcaa)]=function(_0x1b69bc){const _0x32bac6=_0x12d94d;if(!(VisuMZ['BattleCore'][_0x32bac6(0xb08)][_0x32bac6(0x9d9)][_0x32bac6(0x829)]??!![]))return;const _0x182ec1=this[_0x32bac6(0x755)](_0x1b69bc);if(![_0x32bac6(0x695),_0x32bac6(0x93e),_0x32bac6(0xc70)]['includes'](_0x182ec1))return;const _0x30ec0b=this['itemLineRect'](_0x1b69bc);let _0x2d4856=null;if(_0x182ec1==='attack')_0x2d4856=$dataSkills[this['_actor'][_0x32bac6(0x8a2)]()];else _0x182ec1===_0x32bac6(0x93e)?_0x2d4856=$dataSkills[this['_actor'][_0x32bac6(0x302)]()]:_0x2d4856=$dataSkills[this[_0x32bac6(0x600)][_0x1b69bc]['ext']];this[_0x32bac6(0x5f9)](this[_0x32bac6(0xac6)],_0x2d4856,_0x30ec0b['x'],_0x30ec0b['y'],_0x30ec0b[_0x32bac6(0xa80)]);},Window_ActorCommand['prototype'][_0x12d94d(0x5f9)]=function(_0x40f38,_0x1d28ae,_0x5862e6,_0x509857,_0x344c8f){const _0x44a0e7=_0x12d94d;if(!_0x1d28ae)return;if(Imported[_0x44a0e7(0x86a)])Window_Command[_0x44a0e7(0x4e9)]['drawSkillCost'][_0x44a0e7(0xba3)](this,_0x40f38,_0x1d28ae,_0x5862e6,_0x509857,_0x344c8f);else{if('ICtTs'===_0x44a0e7(0x811)){const _0x7153fc=_0x62d3fa(_0x22fd53['$1'])[_0x44a0e7(0x5db)](/[\r\n]+/)[_0x44a0e7(0x43b)](_0x8a074b=>_0x4ddd32(_0x8a074b)[_0x44a0e7(0x97e)]()[_0x44a0e7(0xc39)]());_0x3af520=_0x43d400[_0x44a0e7(0xa0b)](_0x7153fc);!_0x50537e['note'][_0x44a0e7(0x214)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1f1443[_0x44a0e7(0x7ba)]+=_0x44a0e7(0x993));;}else Window_SkillList[_0x44a0e7(0x4e9)][_0x44a0e7(0x5f9)][_0x44a0e7(0xba3)](this,_0x1d28ae,_0x5862e6,_0x509857,_0x344c8f);}},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x165)]=function(){},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x288)]=function(){const _0x2eefa1=_0x12d94d;Window_Command[_0x2eefa1(0x4e9)][_0x2eefa1(0x288)][_0x2eefa1(0xba3)](this);const _0x5e1dde=this[_0x2eefa1(0xbb9)]();if(_0x5e1dde===_0x2eefa1(0xb2d)){if(_0x2eefa1(0x390)!==_0x2eefa1(0x6d2))this[_0x2eefa1(0xb89)]();else{if(!this[_0x2eefa1(0x78b)]['isSpriteVisible']())return;if(_0x4b3691[_0x2eefa1(0x4f2)]())return;const _0x3f8f79=_0x429c46[_0x2eefa1(0xadf)]['Settings'][_0x2eefa1(0x89b)],_0x4723ac=new _0x4cbbce();_0x4723ac[_0x2eefa1(0x1c6)]=_0x3f8f79[_0x2eefa1(0x11c)],this[_0x2eefa1(0x18d)](_0x4723ac),_0x4723ac[_0x2eefa1(0x873)](_0x3c4b91,_0x58cd73),this['addDamageSprite'](_0x4723ac);}}},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0xbb9)]=function(){const _0x2aeb62=_0x12d94d;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x2aeb62(0x78e)]=SceneManager[_0x2aeb62(0x592)][_0x2aeb62(0xbb9)](),this[_0x2aeb62(0x78e)];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xbd1)]=Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x5bb)],Window_ActorCommand['prototype'][_0x12d94d(0x5bb)]=function(_0x589e87){const _0xf3c016=_0x12d94d,_0x3ff98a=this[_0xf3c016(0xbb9)]();if(_0x589e87&&['xp',_0xf3c016(0x834)][_0xf3c016(0x511)](_0x3ff98a)){if(_0xf3c016(0x1fe)!==_0xf3c016(0x1fe)){if(this[_0xf3c016(0xb91)]()&&this[_0xf3c016(0x73d)]())return![];}else this['resizeWindowXPStyle'](_0x589e87);}else _0x589e87&&[_0xf3c016(0xb2d)][_0xf3c016(0x511)](_0x3ff98a)&&(this[_0xf3c016(0x8b)](_0x589e87),this[_0xf3c016(0xb89)]());VisuMZ['BattleCore'][_0xf3c016(0xbd1)][_0xf3c016(0xba3)](this,_0x589e87),_0x589e87&&$gameTroop['aliveMembers']()['length']>0x0&&_0x589e87[_0xf3c016(0x9b8)]()&&_0x589e87[_0xf3c016(0x9b8)]()[_0xf3c016(0x77)]();},Window_ActorCommand['prototype'][_0x12d94d(0x192)]=function(_0xf4bf7a){const _0x113192=_0x12d94d,_0x27ee20=VisuMZ[_0x113192(0xadf)]['Settings'][_0x113192(0x160)][_0x113192(0xabf)],_0x321c83=Math[_0x113192(0x1d0)](Graphics[_0x113192(0x807)]/0x3),_0xb556c4=Math[_0x113192(0x1d0)](Graphics[_0x113192(0x807)]/$gameParty[_0x113192(0xc73)]()[_0x113192(0x29c)]),_0x29e3c2=Math[_0x113192(0x660)](Math[_0x113192(0x2e3)](_0x321c83,_0xb556c4),_0x27ee20),_0x204f7d=this[_0x113192(0x81e)](VisuMZ[_0x113192(0xadf)][_0x113192(0xb08)][_0x113192(0x160)]['XPActorCommandLines']),_0x560a90=Math[_0x113192(0x28f)]((Graphics[_0x113192(0x807)]-Graphics[_0x113192(0xa80)])/0x2),_0x4f0e1c=Graphics[_0x113192(0x807)]-_0x560a90,_0xa486e4=(Math['round'](_0xb556c4*_0xf4bf7a[_0x113192(0x926)]())+Math[_0x113192(0x1d0)]((_0xb556c4-_0x29e3c2)/0x2))[_0x113192(0xa2d)](_0x560a90,_0x4f0e1c-_0x29e3c2),_0x40630a=Math[_0x113192(0x1d0)](SceneManager[_0x113192(0x592)][_0x113192(0xcbc)]['y']-_0x204f7d);this['move'](_0xa486e4,_0x40630a,_0x29e3c2,_0x204f7d),this[_0x113192(0x20f)](),this[_0x113192(0xc93)](0x1);},Window_ActorCommand[_0x12d94d(0x4e9)]['resizeWindowBorderStyle']=function(_0x4f15d2){const _0x26c3f9=_0x12d94d,_0x2c4868=SceneManager[_0x26c3f9(0x592)][_0x26c3f9(0xac0)]();this[_0x26c3f9(0x44b)](_0x2c4868['x'],_0x2c4868['y'],_0x2c4868[_0x26c3f9(0xa80)],_0x2c4868['height']),this[_0x26c3f9(0x20f)](),this[_0x26c3f9(0xc93)](0x0);},Window_ActorCommand['prototype']['refreshDimmerBitmap']=function(){const _0x1e6ab4=_0x12d94d;if(this[_0x1e6ab4(0x4a6)]){const _0x4eaf96=this[_0x1e6ab4(0x4a6)][_0x1e6ab4(0x222)],_0x2b059d=this[_0x1e6ab4(0xa80)]-0x8,_0x11c81f=this[_0x1e6ab4(0xd17)],_0x5383d0=this[_0x1e6ab4(0xc20)],_0x18b620=ColorManager[_0x1e6ab4(0xd2a)](),_0x3304dc=ColorManager[_0x1e6ab4(0x38d)]();this[_0x1e6ab4(0x4a6)]['x']=0x4,_0x4eaf96[_0x1e6ab4(0xb63)](_0x2b059d,_0x11c81f),_0x4eaf96[_0x1e6ab4(0xb8f)](0x0,0x0,_0x2b059d,_0x5383d0,_0x3304dc,_0x18b620,!![]),_0x4eaf96[_0x1e6ab4(0x5b3)](0x0,_0x5383d0,_0x2b059d,_0x11c81f-_0x5383d0*0x2,_0x18b620),_0x4eaf96['gradientFillRect'](0x0,_0x11c81f-_0x5383d0,_0x2b059d,_0x5383d0,_0x18b620,_0x3304dc,!![]),this[_0x1e6ab4(0x4a6)][_0x1e6ab4(0x422)](0x0,0x0,_0x2b059d,_0x11c81f);}},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x295)]=function(){const _0x438fa6=_0x12d94d;if(!this['_actor'])return;const _0xcb098=VisuMZ['BattleCore'][_0x438fa6(0xb08)]['ActorCmd'],_0x4c445f=this['currentSymbol']();switch(_0x4c445f){case _0x438fa6(0x695):this[_0x438fa6(0x8e0)]($dataSkills[this[_0x438fa6(0xac6)]['attackSkillId']()]);break;case _0x438fa6(0x93e):this[_0x438fa6(0x8e0)]($dataSkills[this[_0x438fa6(0xac6)][_0x438fa6(0x302)]()]);break;case'skill':const _0x1fb730=_0xcb098[_0x438fa6(0x77e)],_0x3dc5ae=_0x1fb730[_0x438fa6(0x3d0)]($dataSystem[_0x438fa6(0x634)][this[_0x438fa6(0x436)]()]);this[_0x438fa6(0x682)][_0x438fa6(0x5e9)](_0x3dc5ae);break;case _0x438fa6(0xc70):this[_0x438fa6(0x8e0)]($dataSkills[this[_0x438fa6(0x436)]()]);break;case _0x438fa6(0xc7):this[_0x438fa6(0x682)][_0x438fa6(0x5e9)](_0xcb098[_0x438fa6(0x1a6)]);break;case _0x438fa6(0x691):this['_helpWindow'][_0x438fa6(0x5e9)](_0xcb098[_0x438fa6(0x145)]);break;case _0x438fa6(0x7f7):this['_helpWindow'][_0x438fa6(0x5e9)](_0xcb098[_0x438fa6(0x38b)]);break;default:this[_0x438fa6(0x682)][_0x438fa6(0x5e9)]('');break;}},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x3c6)]=function(){const _0x518120=_0x12d94d;this[_0x518120(0x722)](0x0);if(this[_0x518120(0xac6)]&&ConfigManager[_0x518120(0xaca)]){if(_0x518120(0xb1f)!=='EwHij'){const _0x1838e6=this[_0x518120(0xac6)][_0x518120(0x68b)]();this[_0x518120(0x485)](_0x1838e6);if(_0x1838e6==='skill'){const _0x1567b2=this[_0x518120(0xac6)][_0x518120(0x63d)]();if(_0x1567b2){const _0x2eb585=this[_0x518120(0x185)](_0x518120(0x7e1),_0x1567b2[_0x518120(0xc34)]);this[_0x518120(0xa7a)](_0x2eb585||0x0);}}else{if(_0x1838e6===_0x518120(0xc70)){if(_0x518120(0x253)!==_0x518120(0x253))_0x111a6f=_0x4bbce4(_0x8aeb1a['$1']),_0x2edad9=_0x1d7d93(_0x123d08['$2']);else{const _0x29ac7d=this[_0x518120(0xac6)][_0x518120(0x63d)]();if(_0x29ac7d){const _0x265b81=this['findSymbolExt'](_0x518120(0xc70),_0x29ac7d['id']);this['select'](_0x265b81||0x0);}}}}}else _0x4c5cb4[_0x518120(0xadf)][_0x518120(0x9d6)][_0x518120(0xba3)](this,_0x29c777),this[_0x518120(0x769)]();}},Window_ActorCommand[_0x12d94d(0x4e9)][_0x12d94d(0x185)]=function(_0x1dd870,_0x18db66){const _0x20a871=_0x12d94d;return this[_0x20a871(0x600)][_0x20a871(0x490)](_0x4c6dda=>_0x4c6dda['symbol']===_0x1dd870&&_0x4c6dda[_0x20a871(0x389)]===_0x18db66);},VisuMZ['BattleCore'][_0x12d94d(0x2bb)]=Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x8df)],Window_BattleStatus[_0x12d94d(0x4e9)]['initialize']=function(_0x5bd866){const _0x335b97=_0x12d94d;VisuMZ[_0x335b97(0xadf)][_0x335b97(0x2bb)][_0x335b97(0xba3)](this,_0x5bd866),this[_0x335b97(0x23d)](),this[_0x335b97(0x995)]();},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0xbb9)]=function(){const _0x42d3ac=_0x12d94d;if(this[_0x42d3ac(0x78e)])return this[_0x42d3ac(0x78e)];return this[_0x42d3ac(0x78e)]=SceneManager[_0x42d3ac(0x592)][_0x42d3ac(0xbb9)](),this[_0x42d3ac(0x78e)];},Window_BattleStatus['prototype']['initBattleCore']=function(){const _0x293a02=_0x12d94d;this[_0x293a02(0x154)]=this[_0x293a02(0x17d)]();const _0x549937=VisuMZ[_0x293a02(0xadf)]['Settings']['BattleLayout'];_0x549937[_0x293a02(0x5b5)]&&(_0x293a02(0x77f)!==_0x293a02(0x77f)?(this[_0x293a02(0x7aa)](),_0x35267a['BattleCore'][_0x293a02(0x4ce)][_0x293a02(0xba3)](this),this[_0x293a02(0x492)]()):this[_0x293a02(0x9a8)]=0x0);},Window_BattleStatus[_0x12d94d(0x4e9)]['isFrameVisible']=function(){const _0x2f1f37=_0x12d94d,_0x6fbf1c=VisuMZ[_0x2f1f37(0xadf)][_0x2f1f37(0xb08)][_0x2f1f37(0x160)];if(_0x6fbf1c[_0x2f1f37(0x5a2)])return!![];const _0x476e61=this[_0x2f1f37(0xbb9)]();switch(_0x476e61){case _0x2f1f37(0x7e4):case _0x2f1f37(0xb2d):return!![];break;case _0x2f1f37(0x818):case'xp':case _0x2f1f37(0x834):default:return![];break;}},Window_BattleStatus[_0x12d94d(0x4e9)]['extraHeight']=function(){const _0x187817=_0x12d94d;return this['isFrameVisible']()?0x0:_0x187817(0x184)!==_0x187817(0xd0f)?0xa:_0x272ed4[_0x187817(0x67b)]?this[_0x187817(0xafc)](_0x1acad6):_0x973f3d[_0x187817(0xadf)][_0x187817(0xa4e)][_0x187817(0xba3)](this,_0x475302);},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x212)]=function(){const _0x1ee36a=_0x12d94d,_0x4ab0b7=this[_0x1ee36a(0xbb9)]();switch(_0x4ab0b7){case _0x1ee36a(0x7e4):return 0x1;break;case'xp':case'portrait':return $gameParty['battleMembers']()['length'];break;case _0x1ee36a(0x818):default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x732)]=function(){const _0x61a8e9=_0x12d94d,_0x139178=this['battleLayoutStyle']();switch(_0x139178){case'list':return Window_StatusBase[_0x61a8e9(0x4e9)]['itemHeight']['call'](this);break;case _0x61a8e9(0x818):case'xp':case _0x61a8e9(0x834):default:return this[_0x61a8e9(0x1a0)];break;}},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x5ab)]=function(){const _0x203899=_0x12d94d,_0x4e3780=this[_0x203899(0xbb9)]();switch(_0x4e3780){case _0x203899(0x7e4):return Window_StatusBase[_0x203899(0x4e9)][_0x203899(0x5ab)][_0x203899(0xba3)](this);break;case _0x203899(0x818):case'xp':case _0x203899(0x834):default:return 0x0;break;}},Window_BattleStatus[_0x12d94d(0x4e9)]['updatePadding']=function(){const _0x18d802=_0x12d94d;this[_0x18d802(0x17d)]()?Window_StatusBase[_0x18d802(0x4e9)]['updatePadding'][_0x18d802(0xba3)](this):this[_0x18d802(0xc20)]=0x8;},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x82e)]=function(){const _0x4e1c4c=_0x12d94d,_0x4e2736=VisuMZ[_0x4e1c4c(0xadf)][_0x4e1c4c(0xb08)][_0x4e1c4c(0x160)];if(_0x4e2736['StatusWindowSkinFilename']){if(_0x4e1c4c(0x69e)==='nClpA'){if(!this[_0x4e1c4c(0xc07)])return;this[_0x4e1c4c(0x946)]=this['_lineHeight']||_0x3a1730[_0x4e1c4c(0x4e9)]['lineHeight'](),this['x']=_0x1941b4[_0x4e1c4c(0x1d0)](this['_linkedSprite'][_0x4e1c4c(0x3f5)]),this['y']=_0x42a49f[_0x4e1c4c(0x1d0)](this[_0x4e1c4c(0xc07)][_0x4e1c4c(0x59e)]-this['_lineHeight']*0.5);const _0x1d9cad=_0x5de576[_0x4e1c4c(0xadf)]['Settings'][_0x4e1c4c(0x1ec)];this['x']+=_0x31ca6e['round'](_0x1d9cad[_0x4e1c4c(0xb45)]||0x0),this['y']+=_0x28c229['round'](_0x1d9cad[_0x4e1c4c(0x55c)]||0x0);}else this[_0x4e1c4c(0x88a)]=ImageManager[_0x4e1c4c(0xc5b)](_0x4e2736[_0x4e1c4c(0x5a2)]);}else{if(_0x4e1c4c(0x6ac)!==_0x4e1c4c(0x6ac)){if(_0xb749e3[_0x4e1c4c(0xb59)](_0x30ba25))return!![];return![];}else Window_StatusBase[_0x4e1c4c(0x4e9)][_0x4e1c4c(0x82e)][_0x4e1c4c(0xba3)](this);}},Window_BattleStatus['prototype'][_0x12d94d(0x58e)]=function(_0x3f9191){const _0x1684ee=_0x12d94d,_0x18112b=VisuMZ[_0x1684ee(0xadf)][_0x1684ee(0xb08)][_0x1684ee(0x160)];if(_0x18112b[_0x1684ee(0xbe5)])return;Window_StatusBase[_0x1684ee(0x4e9)][_0x1684ee(0x58e)][_0x1684ee(0xba3)](this,_0x3f9191);},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x7ca)]=function(){const _0x378f6b=_0x12d94d;this[_0x378f6b(0xcc2)]=!![];},Window_BattleStatus['prototype'][_0x12d94d(0xba4)]=function(){const _0x1bb2c4=_0x12d94d;Window_StatusBase[_0x1bb2c4(0x4e9)][_0x1bb2c4(0xba4)]['call'](this),this['updateRefresh'](),this[_0x1bb2c4(0x8be)]();if(this[_0x1bb2c4(0xbb9)]()===_0x1bb2c4(0xb2d))this[_0x1bb2c4(0xb31)]();},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x851)]=function(){const _0xced8b4=_0x12d94d;if($gameTemp['isBattleRefreshRequested']())this[_0xced8b4(0x6a7)](),this[_0xced8b4(0xcc2)]=![],$gameTemp[_0xced8b4(0x6c5)]();else{if(this[_0xced8b4(0xcc2)]){if(_0xced8b4(0xc40)!==_0xced8b4(0xc40)){const _0x5a605e=_0x4f5e6d[_0xced8b4(0xc73)]()[_0x30a6d1],_0x5b18c5=new _0x3918d6();_0x5b18c5[_0xced8b4(0x4da)](_0x5a605e),_0x5b18c5[_0xced8b4(0xcf1)](_0x5a605e),_0x5b18c5[_0xced8b4(0xba4)](),this[_0xced8b4(0xc1c)][_0xced8b4(0xbce)](_0x5b18c5),this[_0xced8b4(0x374)][_0xced8b4(0xa26)](_0x5b18c5);}else this[_0xced8b4(0xcc2)]=![],this['refresh'](),this[_0xced8b4(0x473)]();}}},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x9ed)]=function(){const _0x2908a9=_0x12d94d;Window_StatusBase[_0x2908a9(0x4e9)][_0x2908a9(0x9ed)][_0x2908a9(0xba3)](this);if(!$gameSystem[_0x2908a9(0x701)]())this[_0x2908a9(0x498)]();},Window_BattleStatus['prototype'][_0x12d94d(0x165)]=function(){const _0x27b4f7=_0x12d94d;if(this[_0x27b4f7(0xc50)]===Window_BattleStatus)return;Window_StatusBase[_0x27b4f7(0x4e9)]['hide'][_0x27b4f7(0xba3)](this);},Window_BattleStatus[_0x12d94d(0x4e9)]['drawBackgroundRect']=function(_0x2bc051){const _0x3e3ad4=_0x12d94d,_0x590fa1=this['battleLayoutStyle']();switch(_0x590fa1){case'xp':case'portrait':break;case _0x3e3ad4(0x818):case _0x3e3ad4(0x7e4):case'border':default:return Window_StatusBase[_0x3e3ad4(0x4e9)][_0x3e3ad4(0x2b3)]['call'](this,_0x2bc051);break;}},VisuMZ[_0x12d94d(0xadf)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x12d94d(0x4e9)]['drawItemImage'],Window_BattleStatus['prototype'][_0x12d94d(0x7df)]=function(_0x3ee9db){const _0x9a36e1=_0x12d94d,_0x20ae46=this[_0x9a36e1(0xbb9)]();switch(_0x20ae46){case _0x9a36e1(0x7e4):this[_0x9a36e1(0xba0)](_0x3ee9db);break;case'xp':this['drawItemImageXPStyle'](_0x3ee9db);break;case _0x9a36e1(0x834):this[_0x9a36e1(0x723)](_0x3ee9db);break;case'default':case _0x9a36e1(0xb2d):default:VisuMZ[_0x9a36e1(0xadf)][_0x9a36e1(0x861)][_0x9a36e1(0xba3)](this,_0x3ee9db);break;}},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x8a0)]=function(_0x310e9f){const _0x169827=_0x12d94d,_0x47f2bb=this[_0x169827(0xbb9)]();if(!$gameSystem[_0x169827(0x701)]())this[_0x169827(0xc92)](_0x310e9f);switch(_0x47f2bb){case _0x169827(0x7e4):this['drawItemStatusListStyle'](_0x310e9f);break;case'xp':case _0x169827(0x834):case'default':case'border':default:this[_0x169827(0x234)](_0x310e9f);break;}},Window_BattleStatus[_0x12d94d(0x4e9)]['refreshCursor']=function(){const _0x382bcb=_0x12d94d,_0x253114=this[_0x382bcb(0xbb9)]();if(['xp']['includes'](_0x253114)&&!$gameSystem[_0x382bcb(0x701)]()){if('PrRiU'!=='RwIcf'){this[_0x382bcb(0xc2e)](0x0,0x0,0x0,0x0);return;}else{let _0x5c9feb=_0x3d9a9b['BattleCore'][_0x382bcb(0x9a0)][_0x382bcb(0xba3)](this);return this[_0x382bcb(0x975)]&&(_0x5c9feb*=this[_0x382bcb(0x975)]()),_0x5d59f3[_0x382bcb(0xbeb)](_0x5c9feb);}}Window_StatusBase[_0x382bcb(0x4e9)]['refreshCursor'][_0x382bcb(0xba3)](this);},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0xc92)]=function(_0x28df10){const _0x4f2265=_0x12d94d,_0x1afbac=this['actor'](_0x28df10)[_0x4f2265(0x9b8)]();if(!_0x1afbac)return;const _0x54f160=this[_0x4f2265(0xbb9)](),_0x2c9d8a=this['itemRect'](_0x28df10);let _0xc7ed5b=Math[_0x4f2265(0x1d0)](_0x2c9d8a['x']+_0x2c9d8a['width']/0x2)+this[_0x4f2265(0xc20)];[_0x4f2265(0x7e4)][_0x4f2265(0x511)](_0x54f160)&&(_0xc7ed5b=_0x2c9d8a[_0x4f2265(0xa80)]/$gameParty['battleMembers']()[_0x4f2265(0x29c)],_0xc7ed5b*=_0x28df10,_0xc7ed5b+=_0x2c9d8a['width']/$gameParty[_0x4f2265(0xc73)]()[_0x4f2265(0x29c)]/0x2);let _0x25221f=Math[_0x4f2265(0x1d0)](this['frontviewSpriteY'](_0x28df10,_0x1afbac,_0x2c9d8a));_0x1afbac[_0x4f2265(0x7a3)](_0xc7ed5b,_0x25221f),this['addChildAt'](_0x1afbac,0x1),_0x1afbac[_0x4f2265(0x9ed)](),this[_0x4f2265(0x26a)](),this[_0x4f2265(0x473)]();},Window_BattleStatus['prototype'][_0x12d94d(0xcae)]=function(_0x52d1c8,_0x58a99a,_0x4e8299){const _0x4f9c5c=_0x12d94d,_0x4b6a20=VisuMZ[_0x4f9c5c(0xadf)]['Settings']['BattleLayout'],_0x296fd7=this['battleLayoutStyle']();if(_0x296fd7==='xp'){if('lcnVg'===_0x4f9c5c(0x6a3)){const _0x32e392=_0x4b6a20['XPSpriteYLocation'];switch(_0x32e392['toLowerCase']()['trim']()){case _0x4f9c5c(0xb14):return _0x4e8299[_0x4f9c5c(0xd17)]-_0x58a99a[_0x4f9c5c(0xcc3)][_0x4f9c5c(0xd17)]/0x4;break;case _0x4f9c5c(0xae7):const _0x2975ba=_0x4b6a20[_0x4f9c5c(0xc12)];return(_0x4e8299[_0x4f9c5c(0xd17)]+(_0x58a99a[_0x4f9c5c(0xd17)]||_0x2975ba))/0x2;break;case _0x4f9c5c(0x3cf):return 0x0;case'name':default:return this[_0x4f9c5c(0x7af)](_0x4e8299);break;}}else _0x405878+=_0x358c95(_0x20d539['$1'])/0x64;}else{if(_0x296fd7===_0x4f9c5c(0x834)){}}return _0x58a99a[_0x4f9c5c(0xd17)];},Sprite_Name[_0x12d94d(0x4e9)]['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x12d94d(0x4e9)][_0x12d94d(0x49e)]=function(){const _0x542017=_0x12d94d,_0x591cba=this['name'](),_0x45ef5b=this[_0x542017(0x714)](),_0x33f60f=this['bitmapHeight']();this[_0x542017(0x1d7)](),this[_0x542017(0x222)][_0x542017(0x4ef)](),this[_0x542017(0x222)][_0x542017(0x3d7)](_0x591cba,0x4,0x0,_0x45ef5b,_0x33f60f,_0x542017(0x931));},Bitmap[_0x12d94d(0x4e9)][_0x12d94d(0x3d7)]=function(_0x3f4097,_0x15b1c4,_0x20ad1f,_0x235748,_0x3b728e,_0x6ec4b1){const _0x165b47=_0x12d94d;TextManager[_0x165b47(0x24f)]&&(_0x3f4097=TextManager['parseLocalizedText'](_0x3f4097));const _0x2714fd=this[_0x165b47(0x595)],_0x2fe82c=_0x2714fd['globalAlpha'];_0x235748=_0x235748||0xffffffff;let _0x329292=_0x15b1c4,_0x44bbd6=Math[_0x165b47(0x1d0)](_0x20ad1f+0x18/0x2+this[_0x165b47(0x1ff)]*0.35);_0x6ec4b1===_0x165b47(0xae7)&&(_0x329292+=_0x235748/0x2),_0x6ec4b1===_0x165b47(0x963)&&(_0x329292+=_0x235748),_0x2714fd[_0x165b47(0x619)](),_0x2714fd['font']=this[_0x165b47(0x4c0)](),_0x2714fd[_0x165b47(0x1e8)]=_0x6ec4b1,_0x2714fd[_0x165b47(0xb0c)]='alphabetic',_0x2714fd[_0x165b47(0xa9c)]=0x1,this[_0x165b47(0x9a9)](_0x3f4097,_0x329292,_0x44bbd6,_0x235748),_0x2714fd[_0x165b47(0xa9c)]=_0x2fe82c,this[_0x165b47(0x76c)](_0x3f4097,_0x329292,_0x44bbd6,_0x235748),_0x2714fd[_0x165b47(0x7bf)](),this[_0x165b47(0x17c)]['update']();},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x7af)]=function(_0x3afbe7){const _0x51d21a=_0x12d94d;return this['basicGaugesY'](_0x3afbe7)-this[_0x51d21a(0xbaf)]();},Window_BattleStatus['prototype'][_0x12d94d(0xba0)]=function(_0x4f2ebf){const _0x1b242a=_0x12d94d;if(!VisuMZ['BattleCore']['Settings'][_0x1b242a(0x160)][_0x1b242a(0x1f3)])return;const _0x5c39c2=this[_0x1b242a(0xaa2)](_0x4f2ebf),_0x2bd8cf=this[_0x1b242a(0xc13)](_0x4f2ebf);_0x2bd8cf[_0x1b242a(0xa80)]=ImageManager[_0x1b242a(0x356)],_0x2bd8cf[_0x1b242a(0xd17)]-=0x2,this[_0x1b242a(0x6d9)](_0x5c39c2,_0x2bd8cf['x']+0x1,_0x2bd8cf['y']+0x1,_0x2bd8cf[_0x1b242a(0xa80)],_0x2bd8cf[_0x1b242a(0xd17)]);},Window_BattleStatus[_0x12d94d(0x4e9)]['drawItemStatusListStyle']=function(_0x3d08a2){const _0xfcb5ff=_0x12d94d,_0x34fddc=VisuMZ[_0xfcb5ff(0xadf)]['Settings'][_0xfcb5ff(0x160)],_0x195d51=$dataSystem['optDisplayTp']?0x4:0x3,_0x2be207=_0x195d51*0x80+(_0x195d51-0x1)*0x8+0x4,_0x9b7629=this[_0xfcb5ff(0xaa2)](_0x3d08a2),_0x5471cf=this[_0xfcb5ff(0xc13)](_0x3d08a2);let _0x3ae0b9=_0x5471cf['x']+this[_0xfcb5ff(0xc20)];if(_0x34fddc[_0xfcb5ff(0x1f3)]){if('RDvfn'!==_0xfcb5ff(0x6b3)){const _0x55bae0=_0x22ae6b[_0xfcb5ff(0xadf)][_0xfcb5ff(0x365)](this[_0xfcb5ff(0xc7)](),_0xfcb5ff(0xc0));if(_0x36329d[_0xfcb5ff(0xadf)]['JS'][_0x55bae0]){_0x1d3712=_0x3d9cdb[_0xfcb5ff(0xadf)]['Game_Action_makeTargets'][_0xfcb5ff(0xba3)](this);const _0x42f39a=_0x5934a7[_0xfcb5ff(0xadf)]['createKeyJS'](this['item'](),'Targets');return _0x13430d=_0x44d6d1[_0xfcb5ff(0xadf)]['JS'][_0x42f39a]['call'](this,this[_0xfcb5ff(0xc1)](),_0x2c38fc),this['repeatTargets'](_0x1da1b0);}return this[_0xfcb5ff(0xcab)]();}else _0x3ae0b9=_0x5471cf['x']+ImageManager[_0xfcb5ff(0x356)]+0x8;}else _0x3ae0b9+=ImageManager[_0xfcb5ff(0x282)];const _0x163133=Math[_0xfcb5ff(0x1d0)](Math[_0xfcb5ff(0x2e3)](_0x5471cf['x']+_0x5471cf[_0xfcb5ff(0xa80)]-_0x2be207,_0x3ae0b9)),_0x27dded=Math[_0xfcb5ff(0x1d0)](_0x5471cf['y']+(_0x5471cf[_0xfcb5ff(0xd17)]-Sprite_Name[_0xfcb5ff(0x4e9)][_0xfcb5ff(0x132)]())/0x2),_0x326fc1=Math[_0xfcb5ff(0x1d0)](_0x163133-ImageManager[_0xfcb5ff(0x282)]/0x2-0x4),_0xd3abae=Math[_0xfcb5ff(0x1d0)](_0x5471cf['y']+(_0x5471cf[_0xfcb5ff(0xd17)]-ImageManager[_0xfcb5ff(0x1b2)])/0x2+ImageManager[_0xfcb5ff(0x1b2)]/0x2);let _0x58a509=_0x163133+0x88;const _0x2629a9=_0x27dded;this[_0xfcb5ff(0x4fe)](_0x9b7629,_0x163133-0x4+(_0x34fddc[_0xfcb5ff(0x88b)]||0x0),_0x27dded+(_0x34fddc[_0xfcb5ff(0x8a5)]||0x0)),this[_0xfcb5ff(0x7d9)](_0x9b7629,_0x163133+(_0x34fddc['NameOffsetX']||0x0),_0x27dded+(_0x34fddc[_0xfcb5ff(0x55c)]||0x0)),this[_0xfcb5ff(0x698)](_0x9b7629,_0x326fc1+(_0x34fddc[_0xfcb5ff(0x49d)]||0x0),_0xd3abae+(_0x34fddc[_0xfcb5ff(0x85d)]||0x0)),this['placeGauge'](_0x9b7629,'hp',_0x58a509+0x88*0x0+(_0x34fddc[_0xfcb5ff(0x1c1)]||0x0),_0x2629a9+(_0x34fddc[_0xfcb5ff(0xcf6)]||0x0)),this[_0xfcb5ff(0x940)](_0x9b7629,'mp',_0x58a509+0x88*0x1+(_0x34fddc[_0xfcb5ff(0x1db)]||0x0),_0x2629a9+(_0x34fddc['MpGaugeOffsetY']||0x0)),$dataSystem[_0xfcb5ff(0x10b)]&&this[_0xfcb5ff(0x940)](_0x9b7629,'tp',_0x58a509+0x88*0x2+(_0x34fddc[_0xfcb5ff(0x462)]||0x0),_0x2629a9+(_0x34fddc[_0xfcb5ff(0xd01)]||0x0));},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x508)]=function(_0x5bd315){const _0x38aec8=_0x12d94d;if(!$gameSystem['isSideView']())return;VisuMZ[_0x38aec8(0xadf)][_0x38aec8(0x861)][_0x38aec8(0xba3)](this,_0x5bd315);},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x234)]=function(_0x232dc8){const _0x1113bb=_0x12d94d,_0x23894d=VisuMZ[_0x1113bb(0xadf)][_0x1113bb(0xb08)][_0x1113bb(0x160)],_0x31bb1b=this['actor'](_0x232dc8),_0x3709a4=this[_0x1113bb(0xc13)](_0x232dc8),_0x52c231=Math['round'](_0x3709a4['x']+(_0x3709a4['width']-0x80)/0x2),_0x8c839f=this[_0x1113bb(0x7af)](_0x3709a4);let _0xf4a422=_0x52c231-ImageManager[_0x1113bb(0x282)]/0x2-0x4,_0x4a7b42=_0x8c839f+ImageManager[_0x1113bb(0x1b2)]/0x2;_0xf4a422-ImageManager['iconWidth']/0x2<_0x3709a4['x']&&(_0xf4a422=_0x52c231+ImageManager[_0x1113bb(0x282)]/0x2-0x4,_0x4a7b42=_0x8c839f-ImageManager[_0x1113bb(0x1b2)]/0x2);const _0xdb1c99=_0x52c231,_0x36b175=this['basicGaugesY'](_0x3709a4);this['placeTimeGauge'](_0x31bb1b,_0x52c231+(_0x23894d['TpbGaugeOffsetX']||0x0),_0x8c839f+(_0x23894d[_0x1113bb(0x8a5)]||0x0)),this['placeActorName'](_0x31bb1b,_0x52c231+(_0x23894d[_0x1113bb(0xb45)]||0x0),_0x8c839f+(_0x23894d[_0x1113bb(0x55c)]||0x0)),this[_0x1113bb(0x698)](_0x31bb1b,_0xf4a422+(_0x23894d[_0x1113bb(0x49d)]||0x0),_0x4a7b42+(_0x23894d[_0x1113bb(0x85d)]||0x0)),this['placeGauge'](_0x31bb1b,'hp',_0xdb1c99+(_0x23894d['HpGaugeOffsetX']||0x0),_0x36b175+(_0x23894d[_0x1113bb(0xcf6)]||0x0)),this[_0x1113bb(0x940)](_0x31bb1b,'mp',_0xdb1c99+(_0x23894d[_0x1113bb(0x1db)]||0x0),_0x36b175+this[_0x1113bb(0xbaf)]()+(_0x23894d[_0x1113bb(0x992)]||0x0)),$dataSystem[_0x1113bb(0x10b)]&&(_0x1113bb(0xc0c)===_0x1113bb(0xc0c)?this[_0x1113bb(0x940)](_0x31bb1b,'tp',_0xdb1c99+(_0x23894d['TpGaugeOffsetX']||0x0),_0x36b175+this[_0x1113bb(0xbaf)]()*0x2+(_0x23894d[_0x1113bb(0xd01)]||0x0)):(this[_0x1113bb(0x29d)](_0x1113bb(0x700)),_0x501142[_0x1113bb(0xb2a)](_0x2a095e,_0x2e7cd5,_0x59c81c),this[_0x1113bb(0x769)]()));},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x33b)]=function(_0x2fb14d){const _0xeeadd1=_0x12d94d;if(!VisuMZ[_0xeeadd1(0xadf)][_0xeeadd1(0xb08)][_0xeeadd1(0x160)]['ShowPortraits'])return![];if(_0x2fb14d[_0xeeadd1(0xa91)]())return!![];return Imported[_0xeeadd1(0xba5)]&&_0x2fb14d['getMenuImage']();},Game_Actor[_0x12d94d(0x4e9)]['getBattlePortraitOffsetX']=function(){const _0x55b144=_0x12d94d;if(this[_0x55b144(0xaa2)]()[_0x55b144(0x7ba)][_0x55b144(0x214)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x55b144(0xade)===_0x55b144(0xade))return Number(RegExp['$1']);else _0x5b22a9[_0x55b144(0xadf)][_0x55b144(0x28a)][_0x55b144(0xba3)](this,_0x4f042d);}else{if(this['actor']()[_0x55b144(0x7ba)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x12d94d(0x4e9)][_0x12d94d(0xbd9)]=function(){const _0x31989d=_0x12d94d;if(this['actor']()[_0x31989d(0x7ba)][_0x31989d(0x214)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x31989d(0xb5f)==='hOvfu')return Number(RegExp['$1']);else _0x4a3aeb[_0x31989d(0xadf)]['Game_Battler_performDamage'][_0x31989d(0xba3)](this),this[_0x31989d(0x9af)](),this[_0x31989d(0x486)]();}else{if(this['actor']()['note'][_0x31989d(0x214)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x31989d(0x393)!==_0x31989d(0xabb))return Number(RegExp['$2']);else _0x178512[_0x31989d(0xbce)](_0x31989d(0x115),_0x2948c4,_0x184338);}}return 0x0;},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x723)]=function(_0x3d0a02){const _0x5c4922=_0x12d94d,_0x48acdf=this[_0x5c4922(0xaa2)](_0x3d0a02);if(this[_0x5c4922(0x33b)](_0x48acdf)){if(_0x5c4922(0x57b)===_0x5c4922(0x919))this[_0x5c4922(0xbce)](_0x5c4922(0x449)),this[_0x5c4922(0xbce)](_0x5c4922(0x82c)),this[_0x5c4922(0xbce)](_0x5c4922(0x36a)),this[_0x5c4922(0xbce)](_0x5c4922(0x767),_0x4d5bd4[_0x5c4922(0x3d0)](_0x25490c[_0x5c4922(0x536)]())),this[_0x5c4922(0xbce)](_0x5c4922(0x48a));else{const _0x15ab45=_0x5c4922(0xbbf)[_0x5c4922(0x3d0)](_0x48acdf[_0x5c4922(0x74f)]()),_0x5b24ac=this[_0x5c4922(0xc15)](_0x15ab45,Sprite),_0xa62dfe=_0x48acdf['getBattlePortraitFilename']();_0xa62dfe!==''?_0x5b24ac[_0x5c4922(0x222)]=ImageManager[_0x5c4922(0xccd)](_0xa62dfe):_0x5b24ac['bitmap']=ImageManager[_0x5c4922(0xad0)];const _0x449ca8=this[_0x5c4922(0xc13)](_0x3d0a02);_0x5b24ac[_0x5c4922(0x2cc)]['x']=0.5,_0x5b24ac[_0x5c4922(0x2cc)]['y']=0x1;let _0x256ded=Math['round'](_0x449ca8['x']+_0x449ca8[_0x5c4922(0xa80)]/0x2)+this[_0x5c4922(0xc20)];_0x256ded+=_0x48acdf[_0x5c4922(0x39c)]();let _0x5252ce=Math[_0x5c4922(0x1d0)](this[_0x5c4922(0xd17)]);_0x5252ce+=_0x48acdf[_0x5c4922(0xbd9)](),_0x5b24ac[_0x5c4922(0x44b)](_0x256ded,_0x5252ce);const _0x13c4f1=VisuMZ['BattleCore']['Settings']['BattleLayout'][_0x5c4922(0x2c6)];_0x5b24ac[_0x5c4922(0xc3b)]['x']=_0x13c4f1,_0x5b24ac['scale']['y']=_0x13c4f1,_0x5b24ac[_0x5c4922(0x9ed)]();}}else{const _0x1059d0=this[_0x5c4922(0x94c)](_0x3d0a02);this[_0x5c4922(0x6d9)](_0x48acdf,_0x1059d0['x'],_0x1059d0['y'],_0x1059d0[_0x5c4922(0xa80)],_0x1059d0[_0x5c4922(0xd17)]);}},Window_BattleStatus['prototype'][_0x12d94d(0xc15)]=function(_0xa762c0,_0x41316f){const _0x2969ab=_0x12d94d,_0x4ebea1=this['_additionalSprites'];if(_0x4ebea1[_0xa762c0])return _0x4ebea1[_0xa762c0];else{if(_0x2969ab(0x1c3)===_0x2969ab(0x142))return _0x58f48d(_0x182b0f['$1']);else{const _0x4a9e1c=new _0x41316f();return _0x4ebea1[_0xa762c0]=_0x4a9e1c,this[_0x2969ab(0x26f)](_0x4a9e1c),this['addChildToBack'](this[_0x2969ab(0x9ae)]),_0x4a9e1c;}}},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x633)]=function(){const _0x453e0d=_0x12d94d;this[_0x453e0d(0x416)](),this[_0x453e0d(0x2d6)](),Window_StatusBase[_0x453e0d(0x4e9)]['_createClientArea'][_0x453e0d(0xba3)](this),this[_0x453e0d(0xc31)]();},Window_BattleStatus['prototype'][_0x12d94d(0x416)]=function(){const _0x2a91a4=_0x12d94d;this[_0x2a91a4(0x9ae)]=new Sprite(),this[_0x2a91a4(0x9ae)][_0x2a91a4(0x15e)]=[new PIXI[(_0x2a91a4(0x15e))][(_0x2a91a4(0xfe))]()],this[_0x2a91a4(0x9ae)][_0x2a91a4(0x5e3)]=new Rectangle(),this[_0x2a91a4(0x9ae)][_0x2a91a4(0x44b)](this[_0x2a91a4(0x82a)],this[_0x2a91a4(0x82a)]),this[_0x2a91a4(0xa26)](this[_0x2a91a4(0x9ae)]);},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x2d6)]=function(){const _0x287da6=_0x12d94d;this[_0x287da6(0x70a)]=new Sprite(),this[_0x287da6(0xa26)](this[_0x287da6(0x70a)]);},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x26a)]=function(){const _0x270c92=_0x12d94d;this[_0x270c92(0x70a)]&&this[_0x270c92(0xa26)](this[_0x270c92(0x70a)]);},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0xc31)]=function(){const _0x5a73a4=_0x12d94d;this[_0x5a73a4(0xb15)]=new Sprite(),this['addChild'](this[_0x5a73a4(0xb15)]);},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x80e)]=function(){const _0x5d747=_0x12d94d;this['_cursorSprite']=new Sprite();for(let _0x4aacc3=0x0;_0x4aacc3<0x9;_0x4aacc3++){this[_0x5d747(0xa83)]['addChild'](new Sprite());}this['_cursorArea'][_0x5d747(0xa26)](this[_0x5d747(0xa83)]);},Window_BattleStatus[_0x12d94d(0x4e9)]['_updateClientArea']=function(){const _0x46599d=_0x12d94d;Window_StatusBase['prototype'][_0x46599d(0x36f)][_0x46599d(0xba3)](this),this[_0x46599d(0x32f)]();},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x32f)]=function(){const _0x346389=_0x12d94d,_0x1e16e7=this[_0x346389(0x82a)];this[_0x346389(0x9ae)][_0x346389(0x44b)](_0x1e16e7,_0x1e16e7),this[_0x346389(0x9ae)]['x']=_0x1e16e7-this[_0x346389(0x324)]['x'],this[_0x346389(0x9ae)]['y']=_0x1e16e7-this[_0x346389(0x324)]['y'],this[_0x346389(0xa98)]>0x0&&this[_0x346389(0x1a0)]>0x0?this['_cursorArea'][_0x346389(0x9bf)]=this[_0x346389(0x559)]():this[_0x346389(0x9ae)][_0x346389(0x9bf)]=![];},Window_BattleStatus[_0x12d94d(0x4e9)]['_updateFilterArea']=function(){const _0x42592c=_0x12d94d;Window_StatusBase[_0x42592c(0x4e9)][_0x42592c(0xa70)]['call'](this),this[_0x42592c(0x718)]();},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x718)]=function(){const _0x57a413=_0x12d94d,_0x167faa=this['_cursorArea'][_0x57a413(0x334)][_0x57a413(0xa8a)](new Point(0x0,0x0)),_0xa3150b=this[_0x57a413(0x9ae)][_0x57a413(0x5e3)];_0xa3150b['x']=_0x167faa['x']+this[_0x57a413(0x324)]['x'],_0xa3150b['y']=_0x167faa['y']+this[_0x57a413(0x324)]['y'],_0xa3150b['width']=this[_0x57a413(0xa98)],_0xa3150b[_0x57a413(0xd17)]=this[_0x57a413(0x1a0)];},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x359)]=function(_0x19995c){const _0x4219c0=_0x12d94d;if(this[_0x4219c0(0xbb9)]()!==_0x4219c0(0x834))return;this[_0x4219c0(0x723)](_0x19995c[_0x4219c0(0x926)]());},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x69d)]=function(_0x173c39,_0x322836){const _0x117e0d=_0x12d94d;if(!this[_0x117e0d(0xb15)])return;if(!_0x173c39)return;if(!_0x322836)return;const _0x354c3c=this[_0x117e0d(0xc13)](_0x322836[_0x117e0d(0x926)]());_0x354c3c['x']+=_0x354c3c[_0x117e0d(0xa80)]/0x2+this[_0x117e0d(0xc20)],_0x173c39['x']=_0x354c3c['x'],_0x173c39['y']=_0x354c3c['y'],this[_0x117e0d(0xb15)][_0x117e0d(0xa26)](_0x173c39);},Window_BattleStatus['prototype'][_0x12d94d(0x257)]=function(_0x2be635){const _0x350834=_0x12d94d;if(!this[_0x350834(0xb15)])return;if(!_0x2be635)return;this[_0x350834(0xb15)]['removeChild'](_0x2be635);},Window_BattleStatus[_0x12d94d(0x4e9)]['updateBorderStyle']=function(){const _0x1b9a58=_0x12d94d;if(!this[_0x1b9a58(0x618)]())return;if(!this[_0x1b9a58(0x551)])this[_0x1b9a58(0x626)]();this['prepareBorderActor'](),this[_0x1b9a58(0xb38)]();},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x618)]=function(){const _0x33df6d=_0x12d94d;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x33df6d(0xb92)]())return![];return VisuMZ[_0x33df6d(0xadf)][_0x33df6d(0xb08)][_0x33df6d(0x160)][_0x33df6d(0x432)];},Window_BattleStatus[_0x12d94d(0x4e9)]['createBorderStylePortraitSprite']=function(){const _0x3c9273=_0x12d94d;this[_0x3c9273(0x551)]=new Sprite();const _0x2b48bc=SceneManager[_0x3c9273(0x592)],_0x7ce673=_0x2b48bc[_0x3c9273(0x8aa)][_0x3c9273(0x86f)](_0x2b48bc['_windowLayer']);_0x2b48bc[_0x3c9273(0xa1a)](this[_0x3c9273(0x551)],_0x7ce673),this[_0x3c9273(0x551)]['anchor']['x']=0.5,this[_0x3c9273(0x551)][_0x3c9273(0x2cc)]['y']=0x1;const _0x4457be=VisuMZ['BattleCore'][_0x3c9273(0xb08)][_0x3c9273(0x160)][_0x3c9273(0x83d)];this[_0x3c9273(0x551)]['scale']['x']=_0x4457be,this[_0x3c9273(0x551)][_0x3c9273(0xc3b)]['y']=_0x4457be,this[_0x3c9273(0x551)]['y']=this['y']+this[_0x3c9273(0xd17)],this[_0x3c9273(0xd24)]=0x0;},Window_BattleStatus[_0x12d94d(0x4e9)]['isBorderPortraitSpriteVisible']=function(){const _0x1578be=_0x12d94d;return BattleManager[_0x1578be(0x60f)]();},Window_BattleStatus[_0x12d94d(0x4e9)]['prepareBorderActor']=function(){const _0xbc0b1d=_0x12d94d;this['_borderPortraitSprite'][_0xbc0b1d(0x9bf)]=this[_0xbc0b1d(0x85f)]();const _0x16d9be=BattleManager[_0xbc0b1d(0xaa2)](),_0x507693=_0x16d9be?_0x16d9be[_0xbc0b1d(0x667)]()||'':'';if(_0x16d9be===this['_borderPortraitSprite']['actor']&&_0x507693===this[_0xbc0b1d(0x551)][_0xbc0b1d(0xee)])return;this['_borderPortraitSprite']['actor']=_0x16d9be||this['_borderPortraitSprite']['actor'],this[_0xbc0b1d(0x551)][_0xbc0b1d(0xee)]=_0x507693;if(!_0x16d9be)return;else{if(_0x507693===''){if(_0xbc0b1d(0xbf4)==='qfCnZ'){if(!(_0x54d355['BattleCore']['Settings'][_0xbc0b1d(0x9d9)]['ShowCosts']??!![]))return;const _0x714d3a=this[_0xbc0b1d(0x755)](_0x5bc815);if(![_0xbc0b1d(0x695),_0xbc0b1d(0x93e),_0xbc0b1d(0xc70)][_0xbc0b1d(0x511)](_0x714d3a))return;const _0x3db70d=this[_0xbc0b1d(0x8b5)](_0xd8d0a8);let _0x1080f1=null;if(_0x714d3a===_0xbc0b1d(0x695))_0x1080f1=_0xc0bec0[this['_actor'][_0xbc0b1d(0x8a2)]()];else _0x714d3a===_0xbc0b1d(0x93e)?_0x1080f1=_0x3963b2[this['_actor'][_0xbc0b1d(0x302)]()]:_0x1080f1=_0x469d32[this['_list'][_0x3669b4][_0xbc0b1d(0x389)]];this[_0xbc0b1d(0x5f9)](this[_0xbc0b1d(0xac6)],_0x1080f1,_0x3db70d['x'],_0x3db70d['y'],_0x3db70d[_0xbc0b1d(0xa80)]);}else{this[_0xbc0b1d(0x551)][_0xbc0b1d(0x222)]=ImageManager[_0xbc0b1d(0xad0)],this['_borderPortraitSprite']['lastFilename']='';return;}}else{if(_0xbc0b1d(0x218)!==_0xbc0b1d(0x2a5)){const _0x2cc596=ImageManager[_0xbc0b1d(0xccd)](_0x507693);this[_0xbc0b1d(0x551)][_0xbc0b1d(0x9a8)]=0x0,_0x2cc596[_0xbc0b1d(0xa1e)](this[_0xbc0b1d(0x525)][_0xbc0b1d(0xb99)](this,_0x2cc596));}else this[_0xbc0b1d(0x484)](_0xbc0b1d(0x573));}}},Window_BattleStatus[_0x12d94d(0x4e9)]['processBorderActor']=function(_0x4cd4b6){const _0x417546=_0x12d94d;this['_borderPortraitDuration']=0x14,this[_0x417546(0x551)]['bitmap']=_0x4cd4b6;SceneManager[_0x417546(0x592)][_0x417546(0x37a)]()?_0x417546(0x594)!==_0x417546(0x594)?_0xb16723=this[_0x417546(0xaa8)]()[_0x417546(0xa58)]||0x0:(this['_borderPortraitSprite']['x']=0x0,this[_0x417546(0x249)]=Math[_0x417546(0xbeb)](_0x4cd4b6[_0x417546(0xa80)]/0x2)):(this['_borderPortraitSprite']['x']=this[_0x417546(0xa80)],this[_0x417546(0x249)]=this['width']*0x3/0x4);this[_0x417546(0x551)][_0x417546(0x9a8)]=0x0,this[_0x417546(0x551)]['y']=this['y']+this['height'];const _0x6fd8dd=BattleManager[_0x417546(0xaa2)]();_0x6fd8dd&&(this[_0x417546(0x249)]+=_0x6fd8dd[_0x417546(0x39c)](),this['_borderPortraitSprite']['y']+=_0x6fd8dd[_0x417546(0xbd9)]());},Window_BattleStatus['prototype'][_0x12d94d(0xb38)]=function(){const _0x5e94df=_0x12d94d;if(this[_0x5e94df(0xd24)]>0x0){if(_0x5e94df(0x52a)!==_0x5e94df(0x52a))this['setWaitMode'](_0x5e94df(0xaec));else{const _0x3054a0=this['_borderPortraitDuration'],_0xc605d4=this['_borderPortraitSprite'];_0xc605d4['x']=(_0xc605d4['x']*(_0x3054a0-0x1)+this['_borderPortraitTargetX'])/_0x3054a0,_0xc605d4[_0x5e94df(0x9a8)]=(_0xc605d4[_0x5e94df(0x9a8)]*(_0x3054a0-0x1)+0xff)/_0x3054a0,this[_0x5e94df(0xd24)]--;}}},Window_BattleStatus[_0x12d94d(0x4e9)][_0x12d94d(0x8be)]=function(){const _0x4716aa=_0x12d94d;return;if(this[_0x4716aa(0x70a)]){if('RFmit'==='hENBL')return _0x4ddaf0[_0x37bdb3];else this[_0x4716aa(0x70a)]['x']=this['x'],this[_0x4716aa(0x70a)]['y']=this['y'];}this[_0x4716aa(0xb15)]&&(this[_0x4716aa(0xb15)]['x']=this['x'],this[_0x4716aa(0xb15)]['y']=this['y']);},Window_BattleStatus[_0x12d94d(0x4e9)]['createAttachmentSprites']=function(){const _0x43a0ff=_0x12d94d,_0x389f09=VisuMZ[_0x43a0ff(0xadf)][_0x43a0ff(0xb08)][_0x43a0ff(0x160)];if(_0x389f09[_0x43a0ff(0x3b6)]){const _0x5ebd3d=new Sprite();_0x5ebd3d[_0x43a0ff(0x222)]=ImageManager['loadSystem'](_0x389f09['StatusWindowAttachmentBack']),_0x5ebd3d['x']=_0x389f09['StatusWindowAttachmentBackOffsetX']||0x0,_0x5ebd3d['y']=_0x389f09['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x43a0ff(0x26f)](_0x5ebd3d),this[_0x43a0ff(0x20e)]=_0x5ebd3d;}if(_0x389f09[_0x43a0ff(0x7a1)]){if('KSrrE'===_0x43a0ff(0x9da)){const _0x36a16a=new Sprite();_0x36a16a['bitmap']=ImageManager[_0x43a0ff(0xc5b)](_0x389f09[_0x43a0ff(0x7a1)]),_0x36a16a['x']=_0x389f09['StatusWindowAttachmentFrontOffsetX']||0x0,_0x36a16a['y']=_0x389f09[_0x43a0ff(0xbf8)]||0x0,this[_0x43a0ff(0xa26)](_0x36a16a),this[_0x43a0ff(0x120)]=_0x36a16a;}else return _0x4fe02c[_0x43a0ff(0xb47)][_0x43a0ff(0xba3)](this);}},Window_BattleStatus['prototype']['updateAttachmentSprites']=function(){const _0x113337=_0x12d94d;if(this[_0x113337(0x120)]){if(_0x113337(0x5f7)===_0x113337(0x5f7))this[_0x113337(0xa26)](this[_0x113337(0x120)]);else{if(this[_0x113337(0xae9)]===_0x113337(0x67a)){if(_0x10f339[_0x113337(0xa48)]())return![];}return _0x5a9fbb['BattleCore'][_0x113337(0x46b)][_0x113337(0xba3)](this);}}this[_0x113337(0x20e)]&&(_0x113337(0x264)!==_0x113337(0x264)?(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x113337(0x122)]()):this[_0x113337(0x26f)](this[_0x113337(0x20e)]));},Window_BattleActor[_0x12d94d(0x4e9)][_0x12d94d(0xac2)]=function(){const _0x5bfcac=_0x12d94d;return this[_0x5bfcac(0x50b)]();},Window_BattleActor['prototype']['isActionSelectionValid']=function(){const _0x43e68e=_0x12d94d,_0x13e050=BattleManager[_0x43e68e(0x17e)]();if(!_0x13e050)return!![];if(!_0x13e050[_0x43e68e(0xc7)]())return!![];const _0x370adb=this['actor'](this['index']()),_0x1e643e=_0x13e050[_0x43e68e(0xc7)]()[_0x43e68e(0x7ba)];if(_0x13e050[_0x43e68e(0x352)]()){if(_0x370adb===BattleManager[_0x43e68e(0xaa2)]())return![];}if(_0x13e050[_0x43e68e(0x2e7)]()){if(_0x43e68e(0x3a3)!=='IFwKZ'){if(_0x326a6e['_autoBattle'])return![];return _0x189488[_0x43e68e(0xadf)]['Settings'][_0x43e68e(0x1ec)][_0x43e68e(0x52f)];}else{if(!_0x370adb[_0x43e68e(0xb91)]())return![];}}if(_0x13e050['isForAliveFriend']()){if(!_0x370adb[_0x43e68e(0x3b5)]())return![];}return!![];},Window_BattleActor['prototype']['setEnemyWindowMode']=function(_0x20d73d){this['_enemyWindowMode']=_0x20d73d;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x1a2)]=Window_BattleActor[_0x12d94d(0x4e9)][_0x12d94d(0x5c7)],Window_BattleActor[_0x12d94d(0x4e9)]['processTouch']=function(){const _0x4261c7=_0x12d94d;Window_BattleStatus['prototype'][_0x4261c7(0x5c7)][_0x4261c7(0xba3)](this),this[_0x4261c7(0x461)]?this[_0x4261c7(0xa7f)]():VisuMZ[_0x4261c7(0xadf)][_0x4261c7(0x1a2)][_0x4261c7(0xba3)](this);},Window_BattleActor[_0x12d94d(0x4e9)][_0x12d94d(0xa7f)]=function(){const _0x272412=_0x12d94d,_0x18c965=SceneManager[_0x272412(0x592)][_0x272412(0x14e)];if(!_0x18c965)return;this[_0x272412(0xb07)]=![];const _0x962dd2=this[_0x272412(0x642)]();if(_0x962dd2>=0x0){if(_0x272412(0x9a1)!==_0x272412(0x9a1)){_0x55ce12[_0x272412(0x4e9)][_0x272412(0xa7a)][_0x272412(0xba3)](this,_0x2abc37),_0x52ed4e[_0x272412(0xa7a)](this[_0x272412(0x673)]()),_0x4be944[_0x272412(0xa7a)](this[_0x272412(0x673)]());if(!this[_0x272412(0x673)]())return;if(this['meetsSelectFrontviewActorConditions']()){const _0x16873f=_0x371734['_scene'][_0x272412(0x4f1)];this['enemy']()[_0x272412(0xc83)]()?_0x16873f[_0x272412(0xa7a)](this[_0x272412(0x673)]()['index']()):_0x16873f[_0x272412(0xb19)]();}}else{this['select'](_0x962dd2);if(TouchInput[_0x272412(0x9a3)]()){const _0x312d98=$gameParty[_0x272412(0x5b8)]()[_0x962dd2],_0x50b05c=_0x18c965['_enemies'][_0x272412(0x86f)](_0x312d98);_0x50b05c>=0x0&&(_0x272412(0x8d6)==='LINyZ'?(this[_0x272412(0x29d)](_0x272412(0x700)),_0x8d817['invokeAction'](_0x5c352a,_0x269f21),this[_0x272412(0x769)]()):(_0x18c965[_0x272412(0xa7a)](_0x50b05c),_0x18c965[_0x272412(0x480)]()));}}}},Window_BattleActor[_0x12d94d(0x4e9)][_0x12d94d(0xa63)]=function(){const _0x3196ef=_0x12d94d;this[_0x3196ef(0x461)]&&(this[_0x3196ef(0xbdf)]++,this[_0x3196ef(0x4ca)]=!![]);const _0x2ff33e=Window_BattleStatus['prototype']['_makeCursorAlpha'][_0x3196ef(0xba3)](this);return this[_0x3196ef(0x461)]&&(this['active']=![]),_0x2ff33e;},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x589)]=Window_BattleActor[_0x12d94d(0x4e9)]['show'],Window_BattleActor[_0x12d94d(0x4e9)]['show']=function(){const _0x33110a=_0x12d94d;VisuMZ[_0x33110a(0xadf)][_0x33110a(0x589)][_0x33110a(0xba3)](this);const _0x13d4d4=BattleManager[_0x33110a(0x17e)]();if(_0x13d4d4){if(_0x33110a(0x7fb)===_0x33110a(0xd09))_0x33f5e8+=_0x29964f,_0x5a9f7f+=_0x812657[_0x33110a(0xc83)]()?-_0x4cf8b2:_0x81848f;else{const _0x4bbd5c=$gameParty[_0x33110a(0xafe)]();_0x13d4d4['canSingleOrMultipleSelect']()&&_0x4bbd5c[_0x33110a(0x29c)]>0x1&&this['setHandler']('pagedown',this['selectAllActors'][_0x33110a(0xb99)](this));}}},VisuMZ['BattleCore'][_0x12d94d(0x855)]=Window_BattleActor[_0x12d94d(0x4e9)][_0x12d94d(0x165)],Window_BattleActor[_0x12d94d(0x4e9)][_0x12d94d(0x165)]=function(){const _0xd0d65e=_0x12d94d;VisuMZ[_0xd0d65e(0xadf)][_0xd0d65e(0x855)][_0xd0d65e(0xba3)](this),delete this[_0xd0d65e(0x7f8)]['pageup'],delete this[_0xd0d65e(0x7f8)]['pagedown'];},Window_BattleActor[_0x12d94d(0x4e9)][_0x12d94d(0x976)]=function(){const _0x1450d1=_0x12d94d,_0x281058=BattleManager[_0x1450d1(0x17e)]();if(_0x281058)_0x281058['setTargetBattlerKey'](_0x1450d1(0x105));this['processOk']();},VisuMZ[_0x12d94d(0xadf)]['Window_BattleEnemy_initialize']=Window_BattleEnemy['prototype']['initialize'],Window_BattleEnemy[_0x12d94d(0x4e9)]['initialize']=function(_0x62ca75){const _0x1f5bc7=_0x12d94d;this['_lastEnemy']=null,VisuMZ[_0x1f5bc7(0xadf)]['Window_BattleEnemy_initialize']['call'](this,_0x62ca75);if(Imported['VisuMZ_2_AggroControlSystem']){if(_0x1f5bc7(0x152)!=='uKAXN'){if(_0x4f6edb===_0x896c1f['deathStateId']()){let _0x4040dc=_0x2084f8[_0x1f5bc7(0x5e6)];_0x4040dc*=_0x1e689d[_0x1f5bc7(0xf3)](_0x3563ed),_0x4040dc*=this[_0x1f5bc7(0xc1)]()['attackStatesRate'](_0x3c4962),_0x4040dc*=this[_0x1f5bc7(0x623)](_0x2ac11d),_0x511c05['random']()<_0x4040dc&&(_0x3fe018['_deathStateApplied']=!![],this['makeSuccess'](_0x1a94dc));}}else{if(VisuMZ['AggroControlSystem'][_0x1f5bc7(0xa0d)]<1.12){let _0x12d453='';_0x12d453+=_0x1f5bc7(0xda),_0x12d453+='in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20',_0x12d453+=_0x1f5bc7(0x1d1),alert(_0x12d453),SceneManager[_0x1f5bc7(0xa82)]();}}}},Window_BattleEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x212)]=function(){const _0x40addc=_0x12d94d;return this[_0x40addc(0xce6)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xa13)]=Window_BattleEnemy['prototype']['show'],Window_BattleEnemy['prototype'][_0x12d94d(0x9ed)]=function(){const _0x44b818=_0x12d94d;VisuMZ[_0x44b818(0xadf)][_0x44b818(0xa13)]['call'](this),this['y']=Graphics[_0x44b818(0xd17)]*0xa,this['meetsSelectFrontviewActorConditions']()&&this['openBattleActorWindow']();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x520)]=Window_BattleEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x165)],Window_BattleEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x165)]=function(){const _0x181d06=_0x12d94d;VisuMZ[_0x181d06(0xadf)][_0x181d06(0x520)][_0x181d06(0xba3)](this),$gameParty[_0x181d06(0xa7a)](null),delete this[_0x181d06(0x7f8)][_0x181d06(0x9cc)],delete this[_0x181d06(0x7f8)][_0x181d06(0x7da)];},Window_BattleEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x2f3)]=function(){const _0x18c2a2=_0x12d94d;let _0x5775f7=$gameTroop[_0x18c2a2(0xafe)]();const _0x143e8f=BattleManager['inputtingAction']();if(_0x143e8f){if(_0x18c2a2(0xaf)===_0x18c2a2(0xaf)){if(_0x143e8f[_0x18c2a2(0x790)]()&&_0x5775f7['length']>0x1){if('uHDtc'!==_0x18c2a2(0x6f3))return _0x5cbbb4[_0x18c2a2(0xadf)][_0x18c2a2(0x591)][_0x18c2a2(0xba3)](this);else this[_0x18c2a2(0xa4c)](_0x18c2a2(0x9cc),this[_0x18c2a2(0x6a6)][_0x18c2a2(0xb99)](this));}if(_0x143e8f[_0x18c2a2(0xcb5)]()){if('RrkGz'===_0x18c2a2(0x3aa)){const _0x4f0215=$gameParty[_0x18c2a2(0xafe)]();_0x5775f7=_0x5775f7['concat'](_0x4f0215),_0x143e8f[_0x18c2a2(0x790)]()&&_0x4f0215[_0x18c2a2(0x29c)]>0x1&&this[_0x18c2a2(0xa4c)]('pagedown',this[_0x18c2a2(0x976)]['bind'](this));}else this[_0x18c2a2(0x222)]['smooth']=_0x3dec4b[_0x18c2a2(0xadf)]['Settings'][_0x18c2a2(0x58b)][_0x18c2a2(0x3d8)];}}else this[_0x18c2a2(0xbce)](_0x18c2a2(0x115),_0x5c5578,_0x31ce48);}return _0x5775f7;},Window_BattleEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x498)]=function(){const _0x124f0d=_0x12d94d;this[_0x124f0d(0x801)]=this['validTargets'](),this[_0x124f0d(0x6fd)](),Window_Selectable['prototype'][_0x124f0d(0x498)][_0x124f0d(0xba3)](this);},Window_BattleEnemy['prototype'][_0x12d94d(0x6fd)]=function(){const _0xf1cff0=_0x12d94d;this['_enemies'][_0xf1cff0(0xd0a)]((_0x279255,_0x26c16a)=>{const _0x4bb1c6=_0xf1cff0;if(_0x279255[_0x4bb1c6(0xc83)]()!==_0x26c16a['isActor']()){if(_0x279255[_0x4bb1c6(0x2c3)]())return-0x1;if(_0x26c16a[_0x4bb1c6(0x2c3)]())return 0x1;}if(_0x279255[_0x4bb1c6(0xc83)]()&&_0x26c16a[_0x4bb1c6(0xc83)]())return _0x279255[_0x4bb1c6(0x926)]()-_0x26c16a[_0x4bb1c6(0x926)]();if(_0x279255[_0x4bb1c6(0x9b8)]()[_0x4bb1c6(0x3f5)]===_0x26c16a[_0x4bb1c6(0x9b8)]()[_0x4bb1c6(0x3f5)])return _0x279255[_0x4bb1c6(0x9b8)]()[_0x4bb1c6(0x59e)]-_0x26c16a['battler']()[_0x4bb1c6(0x59e)];else{if(_0x4bb1c6(0x3f7)!==_0x4bb1c6(0x88d))return _0x279255[_0x4bb1c6(0x9b8)]()['_baseX']-_0x26c16a[_0x4bb1c6(0x9b8)]()[_0x4bb1c6(0x3f5)];else this[_0x4bb1c6(0xa0e)]=_0x30606e[_0x4bb1c6(0xc0b)]>=0x0?0x0:0x1,this[_0x4bb1c6(0xab2)](_0x11a37f[_0x4bb1c6(0xc0b)]);}}),SceneManager[_0xf1cff0(0xc5)]()&&this['_enemies'][_0xf1cff0(0x739)]();},Window_BattleEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x39a)]=function(){const _0x8f9765=_0x12d94d,_0x37ba95=VisuMZ[_0x8f9765(0xadf)][_0x8f9765(0xb08)][_0x8f9765(0x1ec)];_0x37ba95['LastSelected']?this['autoSelectLastSelected']():this[_0x8f9765(0x711)]();},Window_BattleEnemy['prototype'][_0x12d94d(0xc6d)]=function(){const _0x1ae65f=_0x12d94d,_0x473007=BattleManager[_0x1ae65f(0x17e)]();if(_0x473007&&_0x473007[_0x1ae65f(0xcb5)]()){if(_0x1ae65f(0x8ad)!==_0x1ae65f(0xc82)){if(_0x473007[_0x1ae65f(0x4b8)]()){if(this[_0x1ae65f(0xa8f)]&&this[_0x1ae65f(0x801)][_0x1ae65f(0x511)](this[_0x1ae65f(0xa8f)])){const _0xa2b684=this[_0x1ae65f(0x801)][_0x1ae65f(0x86f)](this[_0x1ae65f(0xa8f)]);return this[_0x1ae65f(0x722)](_0xa2b684);}else{if(_0x1ae65f(0xa94)!==_0x1ae65f(0xa94))_0x404b42=_0x1bf6d5['battler']()[_0x1ae65f(0xb94)],_0x23ff87=_0x4a49b1[_0x1ae65f(0x9b8)]()[_0x1ae65f(0xc55)];else return this[_0x1ae65f(0x711)]();}}}else{_0x4d218f(_0x1ae65f(0x5cf)),_0x2a0ee7[_0x1ae65f(0xa82)]();return;}}if(this[_0x1ae65f(0x80)]&&this[_0x1ae65f(0x801)][_0x1ae65f(0x511)](this[_0x1ae65f(0x80)])){const _0x5e0464=this[_0x1ae65f(0x801)]['indexOf'](this[_0x1ae65f(0x80)]);this[_0x1ae65f(0x722)](_0x5e0464);}else{if(_0x1ae65f(0xbb7)!==_0x1ae65f(0x1d6))this[_0x1ae65f(0x711)]();else{if(!_0x39b69e[_0x1ae65f(0x592)][_0x1ae65f(0x101)])return;_0x4ab2a8[_0x1ae65f(0x592)][_0x1ae65f(0x101)][_0x1ae65f(0xa26)](_0x18fa51);}}},Window_BattleEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x711)]=function(){const _0x554882=_0x12d94d,_0x4d2081=BattleManager[_0x554882(0x17e)]();if(_0x4d2081&&_0x4d2081[_0x554882(0xcb5)]()){if(_0x554882(0x81d)!=='nMtzC')return _0x4db050[_0x554882(0xadf)]['Settings']['BattleLog'][_0x554882(0x716)];else{const _0x457ea8=$gameParty['aliveMembers']()[0x0];let _0x39a9d4=this[_0x554882(0x801)]['indexOf'](_0x457ea8);const _0x3c51ae=_0x4d2081[_0x554882(0xc7)]()[_0x554882(0xbad)];if(_0x3c51ae[_0x554882(0x214)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this['forceSelect'](_0x39a9d4);return;}else{if(_0x3c51ae[_0x554882(0x214)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x554882(0x722)](_0x39a9d4-0x1);return;}}}}const _0x3f4ca2=VisuMZ[_0x554882(0xadf)][_0x554882(0xb08)][_0x554882(0x1ec)];let _0x63bf9f=![];$gameSystem['isSideView']()?_0x63bf9f=_0x3f4ca2[_0x554882(0x3b7)]:_0x554882(0x9de)!==_0x554882(0x9de)?(_0x511663['gainTp'](_0x96a069),this[_0x554882(0xaa7)](_0x2c6d31)):_0x63bf9f=_0x3f4ca2[_0x554882(0x543)],this[_0x554882(0x722)](_0x63bf9f?this[_0x554882(0xce6)]()-0x1:0x0);},Window_BattleEnemy[_0x12d94d(0x4e9)]['callOkHandler']=function(){const _0x5012f3=_0x12d94d;Window_Selectable[_0x5012f3(0x4e9)][_0x5012f3(0x364)][_0x5012f3(0xba3)](this);if(this[_0x5012f3(0x673)]()[_0x5012f3(0x2c3)]())this['_lastEnemy']=this[_0x5012f3(0x673)]();if(this[_0x5012f3(0x673)]()[_0x5012f3(0xc83)]())this[_0x5012f3(0xa8f)]=this[_0x5012f3(0x673)]();},Window_BattleEnemy[_0x12d94d(0x4e9)]['select']=function(_0x11ebd9){const _0x8386c2=_0x12d94d;Window_Selectable[_0x8386c2(0x4e9)][_0x8386c2(0xa7a)]['call'](this,_0x11ebd9),$gameTroop[_0x8386c2(0xa7a)](this[_0x8386c2(0x673)]()),$gameParty[_0x8386c2(0xa7a)](this[_0x8386c2(0x673)]());if(!this[_0x8386c2(0x673)]())return;if(this['meetsSelectFrontviewActorConditions']()){if(_0x8386c2(0x22b)!=='UtJCX'){if(_0x4c74d6[_0x8386c2(0x214)](/(.*):[ ](\d+)/i)){const _0x93732e=_0x3f5327(_0x579d61['$1'])[_0x8386c2(0xc39)](),_0x52ac1a=_0x58205e(_0x2ea2bd['$2']);_0x50d818[_0x93732e]=_0x52ac1a,_0x4ffb27+=_0x52ac1a;}else{if(_0xea5dbd[_0x8386c2(0x214)](/(.*):[ ](\d+\.?\d+)/i)){const _0x2b2552=_0xc9e0e3(_0x46a6b7['$1'])[_0x8386c2(0xc39)](),_0x3b0e64=_0x34b183(_0xcea3cd['$2']);_0x2795af[_0x2b2552]=_0x3b0e64,_0x596548+=_0x3b0e64;}else _0x451fd7!==''&&(_0x14daf5[_0x1d1687]=0x1,_0xb283b1++);}}else{const _0xd43ff2=SceneManager[_0x8386c2(0x592)][_0x8386c2(0x4f1)];if(this['enemy']()[_0x8386c2(0xc83)]())_0xd43ff2[_0x8386c2(0xa7a)](this['enemy']()[_0x8386c2(0x926)]());else{if(_0x8386c2(0x327)===_0x8386c2(0x9c4)){if(!_0x16f7b1[_0x8386c2(0x592)])return null;if(!_0xcfb3d8[_0x8386c2(0x592)]['_statusWindow'])return null;if(!_0x128a97[_0x8386c2(0x592)][_0x8386c2(0xcbc)][_0x8386c2(0x70a)])return null;return _0xc7d719[_0x8386c2(0x592)][_0x8386c2(0xcbc)][_0x8386c2(0x70a)];}else _0xd43ff2[_0x8386c2(0xb19)]();}}}},Window_BattleEnemy[_0x12d94d(0x4e9)]['meetsSelectFrontviewActorConditions']=function(){const _0x4146d3=_0x12d94d;if(!this[_0x4146d3(0x9bf)])return![];if($gameSystem[_0x4146d3(0x701)]())return![];const _0x39489e=SceneManager[_0x4146d3(0x592)][_0x4146d3(0xbb9)](),_0x401595=[_0x4146d3(0x818),_0x4146d3(0x7e4),'xp',_0x4146d3(0x834),'border'];return _0x401595[_0x4146d3(0x511)](_0x39489e);},Window_BattleEnemy[_0x12d94d(0x4e9)][_0x12d94d(0xc85)]=function(){const _0x4a548e=_0x12d94d,_0xa7a313=SceneManager[_0x4a548e(0x592)][_0x4a548e(0x4f1)];_0xa7a313[_0x4a548e(0x9ed)](),_0xa7a313[_0x4a548e(0x666)](!![]),_0xa7a313[_0x4a548e(0x498)](),_0xa7a313[_0x4a548e(0xb19)]();const _0xfc91d8=SceneManager[_0x4a548e(0x592)][_0x4a548e(0xbb9)](),_0x541276=['xp',_0x4a548e(0x834),_0x4a548e(0xb2d)];if(_0x541276[_0x4a548e(0x511)](_0xfc91d8)){if(_0x4a548e(0x118)===_0x4a548e(0x806))_0x479fa1=this[_0x4a548e(0x78b)]['_forcedHomeX']??_0x3bbfa3,_0x3df290=this[_0x4a548e(0x78b)]['_forcedHomeY']??_0x2ba636;else{const _0x5d92e8=SceneManager['_scene'][_0x4a548e(0xcbc)];_0x5d92e8[_0x4a548e(0xc3b)]['y']=0x0;}}},Window_BattleEnemy['prototype'][_0x12d94d(0x96f)]=function(){const _0x13753e=_0x12d94d,_0x15e118=SceneManager['_scene'][_0x13753e(0x4f1)];_0x15e118[_0x13753e(0x165)](),_0x15e118[_0x13753e(0x666)](![]),_0x15e118[_0x13753e(0xb19)]();const _0x5f7aac=SceneManager[_0x13753e(0x592)]['_statusWindow'];_0x5f7aac[_0x13753e(0xc3b)]['y']=0x1;},Window_BattleEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x6a6)]=function(){const _0x25be75=_0x12d94d,_0x34a570=BattleManager[_0x25be75(0x17e)]();if(_0x34a570)_0x34a570[_0x25be75(0x305)](_0x25be75(0x1be));this['processOk']();},Window_BattleEnemy[_0x12d94d(0x4e9)][_0x12d94d(0x976)]=function(){const _0x3b3dfb=_0x12d94d,_0x43abfb=BattleManager[_0x3b3dfb(0x17e)]();if(_0x43abfb)_0x43abfb[_0x3b3dfb(0x305)](_0x3b3dfb(0x105));this[_0x3b3dfb(0x480)]();},Window_BattleEnemy[_0x12d94d(0x4e9)]['isCurrentItemEnabled']=function(){const _0x32659e=_0x12d94d;return this[_0x32659e(0x50b)]();},Window_BattleEnemy[_0x12d94d(0x4e9)]['isActionSelectionValid']=function(){const _0x1e8b03=_0x12d94d,_0xd9aa57=BattleManager[_0x1e8b03(0x17e)]();if(!_0xd9aa57)return!![];if(!_0xd9aa57[_0x1e8b03(0xc7)]())return!![];const _0x2d93c0=this['enemy'](),_0xe6de22=_0xd9aa57[_0x1e8b03(0xc7)]()[_0x1e8b03(0x7ba)];if(_0xd9aa57['isForNotUser']()){if(_0x2d93c0===BattleManager[_0x1e8b03(0xaa2)]())return![];}return!![];},Window_BattleItem['prototype'][_0x12d94d(0x511)]=function(_0x5d043f){const _0x5c43d5=_0x12d94d;if(!_0x5d043f)return![];return _0x5d043f['occasion']===0x0||_0x5d043f[_0x5c43d5(0xccb)]===0x1;};function Window_AutoBattleCancel(){const _0x5bbfd6=_0x12d94d;this[_0x5bbfd6(0x8df)](...arguments);}Window_AutoBattleCancel[_0x12d94d(0x4e9)]=Object[_0x12d94d(0x3d9)](Window_Base[_0x12d94d(0x4e9)]),Window_AutoBattleCancel[_0x12d94d(0x4e9)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x12d94d(0x4e9)]['initialize']=function(_0x2ef052){const _0x3320ff=_0x12d94d;Window_Base['prototype']['initialize'][_0x3320ff(0xba3)](this,_0x2ef052),this[_0x3320ff(0xc93)](this[_0x3320ff(0x582)]()),this[_0x3320ff(0x498)]();},Window_AutoBattleCancel[_0x12d94d(0x4e9)][_0x12d94d(0x582)]=function(){const _0x57ec6c=_0x12d94d;return VisuMZ[_0x57ec6c(0xadf)]['Settings'][_0x57ec6c(0xa50)]['AutoBattleBgType'];},Window_AutoBattleCancel[_0x12d94d(0x4e9)]['refresh']=function(){const _0x32ef82=_0x12d94d;this[_0x32ef82(0xa74)][_0x32ef82(0x4ef)]();const _0x3c074c=VisuMZ['BattleCore'][_0x32ef82(0xb08)][_0x32ef82(0xa50)][_0x32ef82(0xbf6)],_0x152e90=_0x3c074c[_0x32ef82(0x3d0)](this[_0x32ef82(0xcf8)](),this[_0x32ef82(0x726)]()),_0x478c57=this[_0x32ef82(0x467)](_0x152e90)[_0x32ef82(0xa80)],_0x54d0e3=Math[_0x32ef82(0x28f)]((this[_0x32ef82(0xa98)]-_0x478c57)/0x2);this[_0x32ef82(0x786)](_0x152e90,_0x54d0e3,0x0,_0x478c57);},Window_AutoBattleCancel['prototype'][_0x12d94d(0xcf8)]=function(){const _0x19ad6f=_0x12d94d;if(Imported[_0x19ad6f(0x564)])return TextManager['getInputButtonString']('ok');else{if(_0x19ad6f(0x89c)===_0x19ad6f(0x89c))return VisuMZ[_0x19ad6f(0xadf)][_0x19ad6f(0xb08)][_0x19ad6f(0xa50)]['AutoBattleOK'];else{const _0x4ddfe2=this[_0x19ad6f(0xa37)]['currentAction'](),_0x14b60d=this[_0x19ad6f(0xa37)];_0x4ddfe2&&_0x4ddfe2[_0x19ad6f(0xc1)]()===_0x14b60d&&_0x4ddfe2[_0x19ad6f(0x99b)]('PreStartActionJS'),_0x1ba3f0[_0x19ad6f(0xadf)][_0x19ad6f(0x22e)][_0x19ad6f(0xba3)](this),_0x4ddfe2&&_0x4ddfe2[_0x19ad6f(0xc1)]()===_0x14b60d&&_0x4ddfe2[_0x19ad6f(0x99b)](_0x19ad6f(0x911));}}},Window_AutoBattleCancel['prototype']['cancelButtonText']=function(){const _0x2c39e7=_0x12d94d;if(Imported[_0x2c39e7(0x564)]){if('mWZCn'===_0x2c39e7(0x419))return TextManager[_0x2c39e7(0xb7f)](_0x2c39e7(0x75c));else{if(!this[_0x2c39e7(0x618)]())return;if(!this[_0x2c39e7(0x551)])this[_0x2c39e7(0x626)]();this[_0x2c39e7(0x112)](),this[_0x2c39e7(0xb38)]();}}else return VisuMZ[_0x2c39e7(0xadf)]['Settings'][_0x2c39e7(0xa50)][_0x2c39e7(0x4af)];},Window_AutoBattleCancel[_0x12d94d(0x4e9)][_0x12d94d(0xba4)]=function(){const _0x4258ea=_0x12d94d;Window_Base[_0x4258ea(0x4e9)]['update']['call'](this),this[_0x4258ea(0x81a)](),this[_0x4258ea(0x279)]();},Window_AutoBattleCancel[_0x12d94d(0x4e9)]['updateVisibility']=function(){const _0x50ec0c=_0x12d94d;this[_0x50ec0c(0x9bf)]=BattleManager[_0x50ec0c(0x342)];},Window_AutoBattleCancel[_0x12d94d(0x4e9)][_0x12d94d(0x279)]=function(){const _0x3445c5=_0x12d94d;if(!BattleManager[_0x3445c5(0x342)])return;if(Input[_0x3445c5(0x7c9)]('ok')||Input[_0x3445c5(0x7c9)](_0x3445c5(0x75c))||TouchInput['isClicked']()||TouchInput[_0x3445c5(0x37b)]()){if(_0x3445c5(0x30b)!=='AesxM')SoundManager['playCancel'](),BattleManager[_0x3445c5(0x342)]=![],Input[_0x3445c5(0x4ef)](),TouchInput[_0x3445c5(0x4ef)]();else{const _0x49ab14=_0x195f8b['inputtingAction']();if(_0x49ab14)_0x49ab14[_0x3445c5(0x305)](_0x3445c5(0x1be));this[_0x3445c5(0x480)]();}}};function _0x2ae6(_0x154a8f,_0x1d4141){const _0x593567=_0x5935();return _0x2ae6=function(_0x2ae6b4,_0x5506c1){_0x2ae6b4=_0x2ae6b4-0x72;let _0x403ae3=_0x593567[_0x2ae6b4];return _0x403ae3;},_0x2ae6(_0x154a8f,_0x1d4141);}function Window_EnemyName(){const _0x399eca=_0x12d94d;this[_0x399eca(0x8df)](...arguments);}Window_EnemyName['prototype']=Object[_0x12d94d(0x3d9)](Window_StatusBase['prototype']),Window_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0xc50)]=Window_EnemyName,Window_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x8df)]=function(_0x54b3f0){const _0x1a49ea=_0x12d94d;this[_0x1a49ea(0xa66)]=_0x54b3f0,this[_0x1a49ea(0xb4c)]='';const _0x496082=new Rectangle(0x0,0x0,Graphics[_0x1a49ea(0x807)],this[_0x1a49ea(0x33c)]()*0x4);Window_StatusBase[_0x1a49ea(0x4e9)]['initialize'][_0x1a49ea(0xba3)](this,_0x496082),this['setBackgroundType'](0x2),this[_0x1a49ea(0x375)]=0x0;},Window_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x996)]=function(){this['padding']=0x0;},Window_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x673)]=function(){const _0x21d340=_0x12d94d;return $gameTroop[_0x21d340(0x5b8)]()[this[_0x21d340(0xa66)]];},Window_EnemyName[_0x12d94d(0x4e9)]['update']=function(){const _0x4c088a=_0x12d94d;Window_StatusBase[_0x4c088a(0x4e9)]['update'][_0x4c088a(0xba3)](this),this['enemy']()&&this[_0x4c088a(0x673)]()[_0x4c088a(0x536)]()!==this[_0x4c088a(0xb4c)]&&(this[_0x4c088a(0xb4c)]=this[_0x4c088a(0x673)]()['name'](),this['refresh']()),this[_0x4c088a(0x168)](),this[_0x4c088a(0xa8e)]();},Window_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x168)]=function(){const _0x5c3302=_0x12d94d;if(!this[_0x5c3302(0x673)]()){if(this[_0x5c3302(0x375)]>0x0)this[_0x5c3302(0x375)]-=0x10;}else{if(this[_0x5c3302(0x673)]()[_0x5c3302(0xb91)]()){if(this['contentsOpacity']>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager[_0x5c3302(0x592)][_0x5c3302(0x14e)]&&SceneManager[_0x5c3302(0x592)]['_enemyWindow']['active']&&SceneManager[_0x5c3302(0x592)][_0x5c3302(0x14e)][_0x5c3302(0x801)][_0x5c3302(0x511)](this[_0x5c3302(0x673)]())){if(this[_0x5c3302(0x375)]<0xff)this['contentsOpacity']+=0x10;}else{if(this[_0x5c3302(0x375)]>0x0){if(_0x5c3302(0xbf3)==='CzDpJ')this[_0x5c3302(0x375)]-=0x10;else{if(_0x4887c1[_0x5c3302(0x483)]&&_0x43b721[_0x5c3302(0x270)]())return![];else{if(!_0x25af4b[_0x5c3302(0xadf)][_0x5c3302(0xce5)])return![];const _0x4a7d3c=_0x403eb4[_0x5c3302(0xafe)]()[_0x5c3302(0xd0e)](_0x29278a=>_0x29278a['isTpbCharged']()&&_0x29278a[_0x5c3302(0x80f)]());return _0x4a7d3c['length']>0x0&&_0x4b54ed[_0x5c3302(0xaa2)]()!==_0x4a7d3c[_0x4a7d3c[_0x5c3302(0x29c)]-0x1];}}}}}}},Window_EnemyName[_0x12d94d(0x4e9)]['updatePosition']=function(){const _0x4387c0=_0x12d94d;if(!this[_0x4387c0(0x673)]())return;SceneManager[_0x4387c0(0xc5)]()?this['x']=Graphics['boxWidth']-this['enemy']()[_0x4387c0(0x9b8)]()[_0x4387c0(0x3f5)]:this['x']=this[_0x4387c0(0x673)]()[_0x4387c0(0x9b8)]()[_0x4387c0(0x3f5)];this['x']-=Math[_0x4387c0(0x1d0)](this[_0x4387c0(0xa80)]/0x2),this['y']=this['enemy']()[_0x4387c0(0x9b8)]()[_0x4387c0(0x59e)]-Math[_0x4387c0(0x1d0)](this[_0x4387c0(0x33c)]()*1.5);const _0xb3b897=VisuMZ[_0x4387c0(0xadf)][_0x4387c0(0xb08)]['Enemy'];this['x']+=_0xb3b897[_0x4387c0(0xb45)]||0x0,this['y']+=_0xb3b897[_0x4387c0(0x55c)]||0x0;},Window_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0xc47)]=function(){const _0x2f2858=_0x12d94d;Window_Base[_0x2f2858(0x4e9)]['resetFontSettings']['call'](this),this[_0x2f2858(0xa74)][_0x2f2858(0x1ff)]=VisuMZ[_0x2f2858(0xadf)][_0x2f2858(0xb08)]['Enemy'][_0x2f2858(0x98a)];},Window_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x498)]=function(){const _0x48751e=_0x12d94d;Window_StatusBase[_0x48751e(0x4e9)]['refresh']['call'](this),this[_0x48751e(0xa74)][_0x48751e(0x4ef)]();if(!this[_0x48751e(0x673)]())return;this[_0x48751e(0x780)]();},Window_EnemyName[_0x12d94d(0x4e9)][_0x12d94d(0x780)]=function(){const _0x1ed9e5=_0x12d94d;this[_0x1ed9e5(0xb4c)]=this[_0x1ed9e5(0x673)]()[_0x1ed9e5(0x536)]();const _0x42fffe=this['textSizeEx'](this['_text'])[_0x1ed9e5(0xa80)],_0x418869=Math[_0x1ed9e5(0x1d0)]((this['innerWidth']-_0x42fffe)/0x2);this[_0x1ed9e5(0x786)](this[_0x1ed9e5(0xb4c)],_0x418869,0x0,_0x42fffe+0x8);},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xa4a)]=function(){const _0x45ae6c=_0x12d94d;return VisuMZ[_0x45ae6c(0xadf)]['Settings']['BattleLog']['MaxLines'];},Window_BattleLog['prototype']['messageSpeed']=function(){const _0x56105b=_0x12d94d;return VisuMZ['BattleCore']['Settings']['BattleLog'][_0x56105b(0x425)];},Window_BattleLog['prototype']['backColor']=function(){const _0x51d20d=_0x12d94d;return VisuMZ[_0x51d20d(0xadf)][_0x51d20d(0xb08)][_0x51d20d(0x883)]['BackColor'];},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x3d2)]=function(){return![];},Window_BattleLog['prototype'][_0x12d94d(0x81b)]=function(_0x3f87f0,_0x42578f){const _0x48f7e7=_0x12d94d;this['unshift'](_0x48f7e7(0x700)),BattleManager[_0x48f7e7(0x34e)](_0x3f87f0,_0x42578f),this[_0x48f7e7(0x769)]();},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x93c)]=function(_0x1f1ef9,_0x2249d3,_0x2739de){const _0x12eaf5=_0x12d94d;this[_0x12eaf5(0x29d)](_0x12eaf5(0x700)),BattleManager[_0x12eaf5(0xb2a)](_0x1f1ef9,_0x2249d3,_0x2739de),this[_0x12eaf5(0x769)]();},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x700)]=function(){this['callNextMethod']();},Window_BattleLog['prototype'][_0x12d94d(0xbce)]=function(_0x758251){const _0x4b2d28=_0x12d94d,_0x6f2f5f=Array[_0x4b2d28(0x4e9)][_0x4b2d28(0x195)][_0x4b2d28(0xba3)](arguments,0x1),_0xea2d6a={'name':_0x758251,'params':_0x6f2f5f},_0x5410ad=this[_0x4b2d28(0x833)][_0x4b2d28(0x43b)](_0x91a200=>_0x91a200[_0x4b2d28(0x536)])[_0x4b2d28(0x86f)](_0x4b2d28(0x700));_0x5410ad>=0x0?this[_0x4b2d28(0x833)][_0x4b2d28(0x24e)](_0x5410ad,0x0,_0xea2d6a):this[_0x4b2d28(0x833)][_0x4b2d28(0xbce)](_0xea2d6a);},Window_BattleLog[_0x12d94d(0x4e9)]['unshift']=function(_0x49f5e7){const _0xd2be5e=_0x12d94d,_0x5aa059=Array[_0xd2be5e(0x4e9)]['slice'][_0xd2be5e(0xba3)](arguments,0x1);this[_0xd2be5e(0x833)]['unshift']({'name':_0x49f5e7,'params':_0x5aa059});},Window_BattleLog['prototype'][_0x12d94d(0x630)]=function(){const _0x56569e=_0x12d94d;if(!$gameTemp[_0x56569e(0x4d6)]())return;console[_0x56569e(0xdd)](this[_0x56569e(0x833)][_0x56569e(0x43b)](_0x201d9a=>_0x201d9a[_0x56569e(0x536)])[_0x56569e(0x7c7)]('\x0a'));},VisuMZ[_0x12d94d(0xadf)]['Window_BattleLog_refresh']=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x498)],Window_BattleLog['prototype']['refresh']=function(){const _0x2a7a25=_0x12d94d;this[_0x2a7a25(0xcc2)]=!![];},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x6cb)]=Window_BattleLog['prototype'][_0x12d94d(0xba4)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xba4)]=function(){const _0x1602c8=_0x12d94d;VisuMZ[_0x1602c8(0xadf)][_0x1602c8(0x6cb)][_0x1602c8(0xba3)](this);if(this[_0x1602c8(0xcc2)])this['processRefresh']();},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x7d8)]=function(){const _0x31cc85=_0x12d94d;this[_0x31cc85(0xcc2)]=![],VisuMZ[_0x31cc85(0xadf)][_0x31cc85(0x9c6)][_0x31cc85(0xba3)](this);},Window_BattleLog[_0x12d94d(0x4e9)]['drawLineText']=function(_0x143185){const _0x205ab4=_0x12d94d;let _0x58e201=VisuMZ[_0x205ab4(0xadf)]['Settings'][_0x205ab4(0x883)][_0x205ab4(0x54a)][_0x205ab4(0x541)]()[_0x205ab4(0xc39)](),_0x53e4ab=this[_0x205ab4(0x1f8)][_0x143185];if(_0x53e4ab[_0x205ab4(0x214)](/<LEFT>/i))_0x58e201=_0x205ab4(0x931);else{if(_0x53e4ab[_0x205ab4(0x214)](/<CENTER>/i))'NQsSp'!=='NQsSp'?(this[_0x205ab4(0x371)]('PreStartTurnJS'),_0x4f9ccf[_0x205ab4(0xadf)]['Game_Battler_startTpbTurn']['call'](this),this[_0x205ab4(0x371)](_0x205ab4(0x9f7))):_0x58e201=_0x205ab4(0xae7);else{if(_0x53e4ab['match'](/<RIGHT>/i)){if(_0x205ab4(0x21c)===_0x205ab4(0xa47)){this[_0x205ab4(0xc18)][_0x205ab4(0x9a8)]=0x0;return;}else _0x58e201=_0x205ab4(0x963);}}}_0x53e4ab=_0x53e4ab[_0x205ab4(0xae8)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x53e4ab=_0x53e4ab['replace'](/\\I\[0\]/gi,'');const _0xc0f73e=this[_0x205ab4(0x8b2)](_0x143185);this[_0x205ab4(0xa74)][_0x205ab4(0xb5e)](_0xc0f73e['x'],_0xc0f73e['y'],_0xc0f73e[_0x205ab4(0xa80)],_0xc0f73e['height']);const _0x405e58=this[_0x205ab4(0x467)](_0x53e4ab)[_0x205ab4(0xa80)];let _0x3573a4=_0xc0f73e['x'];if(_0x58e201==='center')_0x3573a4+=(_0xc0f73e[_0x205ab4(0xa80)]-_0x405e58)/0x2;else _0x58e201===_0x205ab4(0x963)&&('UjQYi'!=='MQivK'?_0x3573a4+=_0xc0f73e[_0x205ab4(0xa80)]-_0x405e58:_0x5a7d99[_0x205ab4(0xb1d)][_0x205ab4(0xa0d)]<1.19&&(_0x188772(_0x9844be[_0x205ab4(0x3d0)](_0x205ab4(0x2c9))),_0x2cd298['exit']()));this[_0x205ab4(0x786)](_0x53e4ab,_0x3573a4,_0xc0f73e['y'],_0x405e58+0x8);},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x767)]=function(_0x2eeedc){const _0x48ae16=_0x12d94d;this[_0x48ae16(0x1f8)][_0x48ae16(0xbce)](_0x2eeedc),this[_0x48ae16(0x498)](),this[_0x48ae16(0x769)]();},Window_BattleLog['prototype'][_0x12d94d(0x789)]=function(){const _0x4b5174=_0x12d94d;let _0x5a18f8=![];switch(this['_waitMode']){case _0x4b5174(0xce3):_0x5a18f8=this[_0x4b5174(0x372)][_0x4b5174(0x583)]();break;case _0x4b5174(0x849):_0x5a18f8=this[_0x4b5174(0x372)][_0x4b5174(0x5e7)]();break;case _0x4b5174(0x7bc):_0x5a18f8=this['_spriteset']['isAnimationPlaying']();break;case'float':_0x5a18f8=this[_0x4b5174(0x372)][_0x4b5174(0x4d1)]();break;case'jump':_0x5a18f8=this['_spriteset']['isAnyoneJumping']();break;case _0x4b5174(0x9a8):_0x5a18f8=this['_spriteset'][_0x4b5174(0x5a6)]();break;}return!_0x5a18f8&&('uBrfD'===_0x4b5174(0xe2)?this[_0x4b5174(0x6ea)]='':_0x41dc65[_0x4b5174(0xc68)]([0x0,0x0,0x0,0x0])),_0x5a18f8;},Window_BattleLog['prototype'][_0x12d94d(0x158)]=function(){const _0x13cd84=_0x12d94d;this[_0x13cd84(0xb30)](_0x13cd84(0x7bc));},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x3b3)]=function(){const _0x5144ac=_0x12d94d;this[_0x5144ac(0xb30)](_0x5144ac(0xaec));},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x2b2)]=function(){const _0x28df97=_0x12d94d;this[_0x28df97(0xb30)](_0x28df97(0xf4));},Window_BattleLog['prototype'][_0x12d94d(0xe7)]=function(){const _0x2bfce5=_0x12d94d;this[_0x2bfce5(0xb30)](_0x2bfce5(0x9a8));},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x32a)]=function(){const _0x3f8f2b=_0x12d94d,_0x5bdb1d=VisuMZ['BattleCore'][_0x3f8f2b(0xb08)]['BattleLog'];if(!_0x5bdb1d['StartTurnShow'])return;this[_0x3f8f2b(0xbce)](_0x3f8f2b(0x767),_0x5bdb1d[_0x3f8f2b(0x2f5)]['format']($gameTroop[_0x3f8f2b(0x776)]())),this[_0x3f8f2b(0xbce)](_0x3f8f2b(0x699),_0x5bdb1d[_0x3f8f2b(0xb87)]),this[_0x3f8f2b(0xbce)](_0x3f8f2b(0x4ef));},Window_BattleLog['prototype'][_0x12d94d(0x648)]=function(_0x4d53aa,_0x55098a,_0x5dd917){const _0x90e9cf=_0x12d94d;this['isCustomActionSequence'](_0x55098a)?BattleManager[_0x90e9cf(0x5fa)]():this[_0x90e9cf(0xc9b)](_0x4d53aa,_0x55098a,_0x5dd917);},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xcf3)]=function(_0xa20490){const _0x1cd6f8=_0x12d94d;if(!SceneManager['isSceneBattle']())return![];if(!_0xa20490)return![];if(!_0xa20490[_0x1cd6f8(0xc7)]())return![];if(_0xa20490['item']()[_0x1cd6f8(0x7ba)]['match'](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x1cd6f8(0x752)===_0x1cd6f8(0x752))return!![];else this[_0x1cd6f8(0x9bd)]=this['_shadowScaleX']??0x1,this['_shadowScaleY']=this[_0x1cd6f8(0xaf8)]??0x1,this[_0x1cd6f8(0xcc3)][_0x1cd6f8(0xc3b)]['x']=this[_0x1cd6f8(0x67b)][_0x1cd6f8(0xc3b)]['x']*this[_0x1cd6f8(0x9bd)],this[_0x1cd6f8(0xcc3)][_0x1cd6f8(0xc3b)]['y']=this['_distortionSprite'][_0x1cd6f8(0xc3b)]['y']*this[_0x1cd6f8(0xaf8)];}if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0xa20490[_0x1cd6f8(0xc7)]())){if(_0x1cd6f8(0x778)==='Skoqi')this['preparePartyRefresh'](),this[_0x1cd6f8(0xcc2)]=![],_0x3de617[_0x1cd6f8(0x6c5)]();else return!![];}return![];},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xc9b)]=function(_0x4e976c,_0x52c257,_0x7f6079){const _0x5dbf60=_0x12d94d;this[_0x5dbf60(0x261)](_0x4e976c,_0x52c257,_0x7f6079),this[_0x5dbf60(0x427)](_0x4e976c,_0x52c257,_0x7f6079),this['finishActionSet'](_0x4e976c,_0x52c257,_0x7f6079);},Window_BattleLog[_0x12d94d(0x4e9)]['displayAction']=function(_0x23d355,_0x4115f2){const _0x43a43e=_0x12d94d,_0x3d0aff=VisuMZ[_0x43a43e(0xadf)][_0x43a43e(0xb08)][_0x43a43e(0x883)];_0x3d0aff[_0x43a43e(0x5f6)]&&this[_0x43a43e(0xbce)](_0x43a43e(0x767),'<CENTER>%1'[_0x43a43e(0x3d0)](DataManager['battleDisplayText'](_0x4115f2)));if(DataManager[_0x43a43e(0x226)](_0x4115f2)){if(_0x43a43e(0x3e1)===_0x43a43e(0xceb))return _0xcd097c;else{if(_0x3d0aff[_0x43a43e(0xb60)])this[_0x43a43e(0x373)](_0x4115f2[_0x43a43e(0x4f8)],_0x23d355,_0x4115f2);if(_0x3d0aff[_0x43a43e(0x7fa)])this[_0x43a43e(0x373)](_0x4115f2[_0x43a43e(0x31e)],_0x23d355,_0x4115f2);}}else{if(_0x3d0aff[_0x43a43e(0x56f)])this['displayItemMessage'](TextManager[_0x43a43e(0x274)],_0x23d355,_0x4115f2);}},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x261)]=function(_0x4460b6,_0x351026,_0x254791){const _0xc62e7d=_0x12d94d,_0x122895=_0x351026[_0xc62e7d(0xc7)]();this[_0xc62e7d(0xc74)](_0x4460b6,_0x122895),this[_0xc62e7d(0xbce)]('applyImmortal',_0x4460b6,_0x254791,!![]),this[_0xc62e7d(0xbce)](_0xc62e7d(0xa36),_0x4460b6,_0x351026),this[_0xc62e7d(0xbce)](_0xc62e7d(0x522)),this['push'](_0xc62e7d(0x984),_0x4460b6,_0x351026),this[_0xc62e7d(0xbce)](_0xc62e7d(0x158));},Window_BattleLog['prototype'][_0x12d94d(0x427)]=function(_0x45a492,_0x221212,_0x49302e){const _0x50253b=_0x12d94d;if(this[_0x50253b(0xb20)](_0x221212))this[_0x50253b(0x83e)](_0x45a492,_0x221212,_0x49302e);else{if(this[_0x50253b(0x987)](_0x221212))this[_0x50253b(0x252)](_0x45a492,_0x221212,_0x49302e);else{if(_0x221212[_0x50253b(0x2a1)]())this[_0x50253b(0x6d8)](_0x45a492,_0x221212,_0x49302e);else{if('iRFIm'===_0x50253b(0x44a))this[_0x50253b(0x5a9)](_0x45a492,_0x221212,_0x49302e);else{if(!_0x29bb22[_0x50253b(0xadf)]['Settings'][_0x50253b(0x883)]['ShowCurrentState'])return;_0x5d0aaf['BattleCore'][_0x50253b(0x967)]['call'](this,_0x4daf88);}}}}},Window_BattleLog['prototype'][_0x12d94d(0x7bb)]=function(_0xde6f69,_0x107ea7,_0x40e9de,_0x3cbc94){const _0x395d72=_0x12d94d;if(_0x107ea7){if('Rofzo'===_0x395d72(0xb7d)){const _0x4a595a=_0xde6f69[_0x395d72(0x9b8)]();this[_0x395d72(0xbce)](_0x395d72(0xd0),[_0xde6f69],_0x40e9de,_0x3cbc94),this[_0x395d72(0xbce)](_0x395d72(0xbf1),_0xde6f69,_0x4a595a[_0x395d72(0xb94)],_0x4a595a[_0x395d72(0xc55)],_0x3cbc94,![],'Linear'),this[_0x395d72(0xbce)](_0x395d72(0x484),[_0xde6f69],_0x395d72(0xa72)),this[_0x395d72(0xbce)](_0x395d72(0x522)),this['push'](_0x395d72(0x484),[_0xde6f69],_0x395d72(0x4fa));}else this[_0x395d72(0x737)]=_0x5f3346[_0x395d72(0x245)]();}},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xb20)]=function(_0x15a72d){const _0xc187ab=_0x12d94d;if(!_0x15a72d[_0xc187ab(0xc7e)]())return![];if(!_0x15a72d[_0xc187ab(0xae5)]())return![];if(!_0x15a72d[_0xc187ab(0xc21)]())return![];return VisuMZ[_0xc187ab(0xadf)][_0xc187ab(0xb08)][_0xc187ab(0x3dd)][_0xc187ab(0xa2f)];},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x83e)]=function(_0x50a34d,_0x3e3893,_0xac921a){const _0x4fd7df=_0x12d94d,_0x3ca603=_0x50a34d[_0x4fd7df(0xff)]()[_0x4fd7df(0x360)]<0x2,_0xc13ab=0x14,_0x53f695=0x30;let _0xce7a29=!![];if(_0xac921a[_0x4fd7df(0x29c)]>0x0&&_0x50a34d['isActor']()===_0xac921a[0x0]['isActor']()){if('OgFPF'==='XqYTz'){const _0x49e565=_0x134da1[_0x4fd7df(0xadf)][_0x4fd7df(0x2ea)]['call'](this);if(this[_0x4fd7df(0x352)]())_0x49e565[_0x4fd7df(0x8fc)](this['subject']());return _0x49e565;}else _0xce7a29=![];}if(_0x3ca603&&_0xce7a29){if(_0x4fd7df(0x251)!==_0x4fd7df(0x251)){let _0x1971cf=0x1;return _0x1971cf*=this['_flipScaleX'],_0x1971cf*=this[_0x4fd7df(0xcb)],_0x1971cf;}else this[_0x4fd7df(0xbce)](_0x4fd7df(0xd0),[_0x50a34d],_0x53f695,_0xc13ab),this['push'](_0x4fd7df(0x4c8),_0x50a34d,_0xac921a,_0x4fd7df(0x6c0),_0xc13ab,!![],_0x4fd7df(0x148),!![]),this[_0x4fd7df(0xbce)](_0x4fd7df(0x484),[_0x50a34d],_0x4fd7df(0x4fa)),this[_0x4fd7df(0xbce)](_0x4fd7df(0x522));}let _0x120ba6=_0x3e3893['isAttack']()?this[_0x4fd7df(0x8ba)](_0x50a34d):0x1;for(let _0x302433=0x0;_0x302433<_0x120ba6;_0x302433++){_0x3e3893[_0x4fd7df(0xcfb)]()&&_0x50a34d[_0x4fd7df(0xc83)]()&&this[_0x4fd7df(0xbce)](_0x4fd7df(0x115),_0x50a34d,_0x302433);if(_0x3e3893['item']()[_0x4fd7df(0x8b7)]<0x0)this['targetActionSet'](_0x50a34d,_0x3e3893,_0xac921a);else{if(_0x4fd7df(0x9b4)===_0x4fd7df(0x9b4))this[_0x4fd7df(0x5a9)](_0x50a34d,_0x3e3893,_0xac921a);else for(const _0x247694 of this[_0x4fd7df(0x616)]){_0x247694['x']+=_0x2642b4[_0x4fd7df(0x108)]*_0x213158,_0x247694['y']+=_0x3c6136[_0x4fd7df(0x367)];}}}_0x3e3893[_0x4fd7df(0xcfb)]()&&_0x50a34d[_0x4fd7df(0xc83)]()&&('XlqRd'!=='RHqDB'?this[_0x4fd7df(0xbce)](_0x4fd7df(0xac9),_0x50a34d):this[_0x4fd7df(0x8b1)]('MP',_0x4478da,_0x305912[_0x4fd7df(0xd1e)]()[_0x4fd7df(0xa23)])),this['push']('applyImmortal',_0x50a34d,_0xac921a,![]),this[_0x4fd7df(0x7bb)](_0x50a34d,_0x3ca603,_0x53f695,_0xc13ab);},Window_BattleLog['prototype'][_0x12d94d(0x987)]=function(_0xc0a04f){const _0x489341=_0x12d94d;if(!_0xc0a04f[_0x489341(0xc7e)]())return![];if(!_0xc0a04f[_0x489341(0x713)]())return![];if(!_0xc0a04f[_0x489341(0xc21)]())return![];return VisuMZ[_0x489341(0xadf)][_0x489341(0xb08)][_0x489341(0x3dd)][_0x489341(0x482)];},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x252)]=function(_0xcc6583,_0x3c018f,_0x1fe67a){const _0x1b6eeb=_0x12d94d,_0x19a692=_0xcc6583[_0x1b6eeb(0xff)]()[_0x1b6eeb(0x360)]<0x2,_0x1f86f8=0x14,_0x10208f=0x30;if(_0x19a692){if(_0x1b6eeb(0x997)===_0x1b6eeb(0x997)){this['push'](_0x1b6eeb(0xd0),[_0xcc6583],_0x10208f,_0x1f86f8);const _0x16c3de=_0x1fe67a[_0x1b6eeb(0x29c)]>0x1?_0x1b6eeb(0xa87):_0x1b6eeb(0x6c0);this[_0x1b6eeb(0xbce)](_0x1b6eeb(0x4c8),_0xcc6583,_0x1fe67a,_0x16c3de,_0x1f86f8,!![],_0x1b6eeb(0x148),!![]),this[_0x1b6eeb(0xbce)]('requestMotion',[_0xcc6583],_0x1b6eeb(0x4fa)),this[_0x1b6eeb(0xbce)](_0x1b6eeb(0x522));}else this['_forcedBattleLayout']=_0x1b6eeb(0x7e4);}let _0x1571ed=_0x3c018f[_0x1b6eeb(0xcfb)]()?this[_0x1b6eeb(0x8ba)](_0xcc6583):0x1;for(let _0x24c275=0x0;_0x24c275<_0x1571ed;_0x24c275++){_0x3c018f[_0x1b6eeb(0xcfb)]()&&_0xcc6583[_0x1b6eeb(0xc83)]()&&this[_0x1b6eeb(0xbce)](_0x1b6eeb(0x115),_0xcc6583,_0x24c275),this[_0x1b6eeb(0x5a9)](_0xcc6583,_0x3c018f,_0x1fe67a);}_0x3c018f[_0x1b6eeb(0xcfb)]()&&_0xcc6583['isActor']()&&this['push']('clearActiveWeaponSet',_0xcc6583),this[_0x1b6eeb(0xbce)](_0x1b6eeb(0x581),_0xcc6583,_0x1fe67a,![]),this[_0x1b6eeb(0x7bb)](_0xcc6583,_0x19a692,_0x10208f,_0x1f86f8);},Window_BattleLog[_0x12d94d(0x4e9)]['targetActionSet']=function(_0x3bfc1b,_0x3a6999,_0x8643ed){const _0x531902=_0x12d94d,_0x540757=_0x3a6999[_0x531902(0xc7)]();for(const _0x3af10a of _0x8643ed){if(!_0x3af10a)continue;this[_0x531902(0xbce)](_0x531902(0x8f4),_0x3bfc1b,_0x3a6999),this[_0x531902(0xbce)](_0x531902(0x699),Sprite_Battler[_0x531902(0x380)]),this[_0x531902(0xbce)](_0x531902(0x735),_0x3bfc1b,[_0x3af10a],_0x540757[_0x531902(0x8b7)]),this[_0x531902(0xbce)](_0x531902(0x699),0x18),this[_0x531902(0xbce)](_0x531902(0x81b),_0x3bfc1b,_0x3af10a);}},Window_BattleLog[_0x12d94d(0x4e9)]['wholeActionSet']=function(_0x1e4455,_0x1c4448,_0x382993){const _0x16ab09=_0x12d94d,_0x523d41=_0x1c4448[_0x16ab09(0xc7)]();let _0x44cc0f=_0x1c4448[_0x16ab09(0xcfb)]()?0x1+_0x1e4455['attackTimesAdd']():0x1;while(_0x44cc0f--){this['push'](_0x16ab09(0x8f4),_0x1e4455,_0x1c4448),this['push']('waitCount',Sprite_Battler['_motionSpeed']),this[_0x16ab09(0xbce)](_0x16ab09(0x735),_0x1e4455,_0x382993['clone'](),_0x523d41[_0x16ab09(0x8b7)]),this[_0x16ab09(0xbce)]('waitForAnimation');}for(const _0xcd3a34 of _0x382993){if(_0x16ab09(0x8d2)!==_0x16ab09(0x8d2)){const _0x32c92a=this['commandStyle'](),_0x50ec9f=_0x5b607d[_0x16ab09(0xadf)][_0x16ab09(0xb08)][_0x16ab09(0xa88)]['CmdIconFight'],_0x189e25=_0x32c92a===_0x16ab09(0x1e6)?_0x442148[_0x16ab09(0x988)]:_0x16ab09(0x3ae)[_0x16ab09(0x3d0)](_0x50ec9f,_0x9dfd34[_0x16ab09(0x988)]),_0x432b00=this[_0x16ab09(0x92f)]();this[_0x16ab09(0xb0a)](_0x189e25,_0x16ab09(0x988),_0x432b00);}else{if(!_0xcd3a34)continue;this[_0x16ab09(0xbce)](_0x16ab09(0x81b),_0x1e4455,_0xcd3a34);}}},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xaf0)]=function(_0xe22ea0,_0x27445e,_0x3dc7ee){const _0x10eb82=_0x12d94d,_0x55c188=_0x27445e[_0x10eb82(0xc7)]();this[_0x10eb82(0xbce)](_0x10eb82(0x581),_0xe22ea0,_0x3dc7ee,![]),this[_0x10eb82(0xbce)](_0x10eb82(0x9f4)),this[_0x10eb82(0xbce)](_0x10eb82(0x97)),this[_0x10eb82(0xbce)](_0x10eb82(0x4ef)),this[_0x10eb82(0xbce)](_0x10eb82(0x75d),_0xe22ea0),this[_0x10eb82(0xbce)](_0x10eb82(0x522));},Window_BattleLog['prototype'][_0x12d94d(0x246)]=function(_0x3d078b){},VisuMZ[_0x12d94d(0xadf)]['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x12d94d(0x4e9)]['displayCurrentState'],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x47c)]=function(_0x16bca7){const _0x351e2c=_0x12d94d;if(!VisuMZ[_0x351e2c(0xadf)]['Settings'][_0x351e2c(0x883)]['ShowCurrentState'])return;VisuMZ[_0x351e2c(0xadf)][_0x351e2c(0x967)][_0x351e2c(0xba3)](this,_0x16bca7);},Window_BattleLog['prototype'][_0x12d94d(0x1d9)]=function(_0x4eff78){const _0x8a2332=_0x12d94d;this['push'](_0x8a2332(0x4f6),_0x4eff78);VisuMZ[_0x8a2332(0xadf)][_0x8a2332(0xb08)][_0x8a2332(0x3dd)]['CounterPlayback']&&this[_0x8a2332(0xbce)](_0x8a2332(0x735),_0x4eff78,[BattleManager[_0x8a2332(0xa37)]],-0x1);if(!VisuMZ[_0x8a2332(0xadf)][_0x8a2332(0xb08)]['BattleLog'][_0x8a2332(0x705)])return;this[_0x8a2332(0xbce)](_0x8a2332(0x767),TextManager[_0x8a2332(0xb6a)][_0x8a2332(0x3d0)](_0x4eff78[_0x8a2332(0x536)]()));},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x223)]=function(_0x3d88dc){const _0x256c19=_0x12d94d;this['push'](_0x256c19(0x418),_0x3d88dc);if(!VisuMZ[_0x256c19(0xadf)][_0x256c19(0xb08)][_0x256c19(0x883)][_0x256c19(0xb65)])return;this[_0x256c19(0xbce)](_0x256c19(0x767),TextManager[_0x256c19(0x709)]['format'](_0x3d88dc[_0x256c19(0x536)]()));},Window_BattleLog['prototype'][_0x12d94d(0x3e0)]=function(_0x57bea9,_0x384489){const _0x563a79=_0x12d94d;if(VisuMZ['BattleCore'][_0x563a79(0xb08)][_0x563a79(0x3dd)]['ReflectPlayback']){if(_0x563a79(0x68e)===_0x563a79(0x68e)){const _0x72ae81=_0x384489[_0x563a79(0xc7)]();this[_0x563a79(0xbce)]('showAnimation',_0x57bea9,[_0x57bea9],_0x72ae81['animationId']);}else{const _0x3b4350=this[_0x563a79(0x185)](_0x563a79(0x7e1),_0xd9f6c[_0x563a79(0xc34)]);this[_0x563a79(0xa7a)](_0x3b4350||0x0);}}},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x7e)]=function(_0x76cd82,_0x2062c4){const _0x255c32=_0x12d94d;this[_0x255c32(0xbce)](_0x255c32(0x814),_0x76cd82,_0x2062c4);if(!VisuMZ[_0x255c32(0xadf)][_0x255c32(0xb08)][_0x255c32(0x883)][_0x255c32(0xec)])return;const _0x1d9dc0=_0x76cd82[_0x255c32(0x536)](),_0x4f5bbe=TextManager[_0x255c32(0x67d)][_0x255c32(0x3d0)](_0x1d9dc0,_0x2062c4['name']());this[_0x255c32(0xbce)]('addText',_0x4f5bbe);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xc7a)]=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x896)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x896)]=function(_0x33781f,_0x2f0d94){const _0x1a5c5b=_0x12d94d;VisuMZ[_0x1a5c5b(0xadf)][_0x1a5c5b(0xc7a)][_0x1a5c5b(0xba3)](this,_0x33781f,_0x2f0d94);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x604)]=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xe5)],Window_BattleLog['prototype']['displayFailure']=function(_0x6daf21){const _0x560413=_0x12d94d;if(!VisuMZ[_0x560413(0xadf)][_0x560413(0xb08)][_0x560413(0x883)][_0x560413(0x4a2)])return;VisuMZ['BattleCore'][_0x560413(0x604)][_0x560413(0xba3)](this,_0x6daf21);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x2a7)]=Window_BattleLog[_0x12d94d(0x4e9)]['displayCritical'],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x728)]=function(_0x1f6e7a){const _0xb8246c=_0x12d94d;if(!VisuMZ[_0xb8246c(0xadf)][_0xb8246c(0xb08)][_0xb8246c(0x883)][_0xb8246c(0x5fb)])return;VisuMZ[_0xb8246c(0xadf)][_0xb8246c(0x2a7)][_0xb8246c(0xba3)](this,_0x1f6e7a);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x4e2)]=Window_BattleLog['prototype'][_0x12d94d(0xa9a)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xa9a)]=function(_0x17f630){const _0x513302=_0x12d94d;!VisuMZ[_0x513302(0xadf)]['Settings']['BattleLog'][_0x513302(0xc97)]?'JiEIg'!==_0x513302(0x2aa)?_0x3d413a[_0x152b35]===0x1&&this[_0x513302(0x938)]!==_0x406f26&&(_0x2e2063[_0x5ec5d8]=null):this[_0x513302(0xbce)](_0x513302(0xa04),_0x17f630):'sVvSu'===_0x513302(0x84c)?VisuMZ[_0x513302(0xadf)][_0x513302(0x4e2)][_0x513302(0xba3)](this,_0x17f630):_0x3172db[_0x513302(0xbce)](_0x513302(0xac9),_0x1ff4dc);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x607)]=Window_BattleLog[_0x12d94d(0x4e9)]['displayEvasion'],Window_BattleLog[_0x12d94d(0x4e9)]['displayEvasion']=function(_0x3778c7){const _0x3b1946=_0x12d94d;!VisuMZ[_0x3b1946(0xadf)]['Settings'][_0x3b1946(0x883)][_0x3b1946(0xc97)]?_0x3778c7[_0x3b1946(0xd1e)]()[_0x3b1946(0x532)]?this[_0x3b1946(0xbce)]('performEvasion',_0x3778c7):this[_0x3b1946(0xbce)](_0x3b1946(0x6d5),_0x3778c7):_0x3b1946(0x706)===_0x3b1946(0x706)?VisuMZ[_0x3b1946(0xadf)][_0x3b1946(0x607)][_0x3b1946(0xba3)](this,_0x3778c7):_0x2aa3fa+=_0x252d41;},Window_BattleLog['prototype'][_0x12d94d(0x955)]=function(_0x1d23d0){const _0x36929a=_0x12d94d;if(_0x1d23d0[_0x36929a(0xd1e)]()['hpAffected']){_0x1d23d0[_0x36929a(0x53e)]=0x0;if(_0x1d23d0[_0x36929a(0xd1e)]()[_0x36929a(0xc0b)]>0x0&&!_0x1d23d0[_0x36929a(0xd1e)]()[_0x36929a(0xa6e)]){if(_0x36929a(0x519)!==_0x36929a(0x519))return!![];else _0x1d23d0[_0x36929a(0x53e)]=_0x1d23d0[_0x36929a(0xd1e)]()[_0x36929a(0xc0b)],this[_0x36929a(0xbce)](_0x36929a(0x87b),_0x1d23d0);}if(_0x1d23d0[_0x36929a(0xd1e)]()[_0x36929a(0xc0b)]<0x0){if(_0x36929a(0x408)!==_0x36929a(0x408)){if(!_0x53fa02[_0x36929a(0x701)]())return;const _0x162011=this[_0x36929a(0x9b8)]();if(!_0x162011)return;if(_0x40ffd9===_0x1579f0||_0x49727d===_0xb3f6a2)return;if(_0x8da26f(_0x4a1c92)||_0x29c8c4(_0x2662aa))return;_0x5d3bd2=_0x1f1a41||0x0;if(_0x322dd6>0x0){if(_0x162011[_0x36929a(0x3f5)]>_0x556f32)_0x447f46+=_0x162011['width']/0x2+_0x54e35b;if(_0x162011[_0x36929a(0x3f5)]<_0x210e7b)_0x1b4653-=_0x162011[_0x36929a(0xa80)]/0x2+_0x3a6df9;}if(_0x3c5afd)this['setBattlerFacePoint'](_0x54afcc,_0x59d061,![]);_0x4e511c-=_0x162011[_0x36929a(0xb94)],_0xe9ce34-=_0x162011[_0x36929a(0xc55)],_0x162011[_0x36929a(0x620)](_0x163a1a,_0x419d13,_0x2e42c2);if(_0x27d54e[_0x36929a(0x564)])_0x162011[_0x36929a(0x923)](_0x569fd0||'Linear');}else this[_0x36929a(0xbce)]('performRecovery',_0x1d23d0);}VisuMZ[_0x36929a(0xadf)][_0x36929a(0xb08)][_0x36929a(0x883)]['ShowHpDmg']&&this[_0x36929a(0xbce)](_0x36929a(0x767),this['makeHpDamageText'](_0x1d23d0));}},VisuMZ['BattleCore'][_0x12d94d(0xa4d)]=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x50a)],Window_BattleLog['prototype'][_0x12d94d(0x50a)]=function(_0x40bcac){const _0x1f1b89=_0x12d94d;if(!VisuMZ[_0x1f1b89(0xadf)]['Settings'][_0x1f1b89(0x883)][_0x1f1b89(0x9ee)])return;VisuMZ[_0x1f1b89(0xadf)][_0x1f1b89(0xa4d)][_0x1f1b89(0xba3)](this,_0x40bcac);},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb9b)]=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x434)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x434)]=function(_0x14276e){const _0x2c2a1e=_0x12d94d;if(!VisuMZ[_0x2c2a1e(0xadf)][_0x2c2a1e(0xb08)][_0x2c2a1e(0x883)]['ShowTpDmg'])return;VisuMZ[_0x2c2a1e(0xadf)][_0x2c2a1e(0xb9b)][_0x2c2a1e(0xba3)](this,_0x14276e);},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xce8)]=function(_0x18dba7){const _0x4da400=_0x12d94d;_0x18dba7[_0x4da400(0xd1e)]()[_0x4da400(0x273)]()&&(this[_0x4da400(0xbce)]('pushBaseLine'),this[_0x4da400(0x491)](_0x18dba7),this[_0x4da400(0x133)](_0x18dba7),this['push'](_0x4da400(0x9f4)));},Window_BattleLog[_0x12d94d(0x4e9)]['displayAddedStates']=function(_0x4a7ac4){const _0x2e80d1=_0x12d94d,_0x28a04d=_0x4a7ac4[_0x2e80d1(0xd1e)](),_0x5bddc1=_0x28a04d[_0x2e80d1(0xab5)]();for(const _0x2b813c of _0x5bddc1){const _0x5627e6=_0x4a7ac4[_0x2e80d1(0xc83)]()?_0x2b813c[_0x2e80d1(0x4f8)]:_0x2b813c[_0x2e80d1(0x31e)];_0x5627e6&&VisuMZ[_0x2e80d1(0xadf)]['Settings'][_0x2e80d1(0x883)][_0x2e80d1(0x7f3)]&&(_0x2e80d1(0x301)!==_0x2e80d1(0x301)?(_0xcf7206+=_0x4d3f49[_0x2e80d1(0xc83)]()?-_0x4d26b9:_0x539f24,_0x11760d+=_0x57f316):(this['push'](_0x2e80d1(0x449)),this['push'](_0x2e80d1(0x82c)),this['push'](_0x2e80d1(0x36a)),this[_0x2e80d1(0xbce)](_0x2e80d1(0x767),_0x5627e6[_0x2e80d1(0x3d0)](_0x4a7ac4[_0x2e80d1(0x536)]())),this[_0x2e80d1(0xbce)](_0x2e80d1(0x48a)))),_0x2b813c['id']===_0x4a7ac4[_0x2e80d1(0xbbb)]()&&this[_0x2e80d1(0xbce)](_0x2e80d1(0xa7),_0x4a7ac4);}},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x449)]=function(){},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x60d)]=function(_0x44019d){const _0x542907=_0x12d94d;if(!VisuMZ[_0x542907(0xadf)][_0x542907(0xb08)]['BattleLog'][_0x542907(0x166)])return;const _0x3fe3c9=_0x44019d[_0x542907(0xd1e)](),_0x4049b9=_0x3fe3c9['removedStateObjects']();for(const _0x337ee5 of _0x4049b9){_0x542907(0xabc)===_0x542907(0xabc)?_0x337ee5[_0x542907(0x2d1)]&&(this[_0x542907(0xbce)](_0x542907(0x83c)),this['push'](_0x542907(0x82c)),this['push']('pushBaseLine'),this['push'](_0x542907(0x767),_0x337ee5[_0x542907(0x2d1)][_0x542907(0x3d0)](_0x44019d[_0x542907(0x536)]())),this[_0x542907(0xbce)](_0x542907(0x48a))):(_0x484751=_0x3b7bb0[_0x542907(0x9b8)]()[_0x542907(0xb94)],_0x58f2a6=_0x337487[_0x542907(0x9b8)]()['_homeY']);}},Window_BattleLog[_0x12d94d(0x4e9)]['fnordRemovedStates']=function(){},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x133)]=function(_0x52a61a){const _0x3bf64b=_0x12d94d,_0x226a25=VisuMZ[_0x3bf64b(0xadf)]['Settings'][_0x3bf64b(0x883)],_0x25671b=_0x52a61a[_0x3bf64b(0xd1e)]();if(_0x226a25['ShowAddedBuff'])this[_0x3bf64b(0x3ab)](_0x52a61a,_0x25671b[_0x3bf64b(0x43f)],TextManager['buffAdd']);if(_0x226a25[_0x3bf64b(0x23b)])this[_0x3bf64b(0x3ab)](_0x52a61a,_0x25671b[_0x3bf64b(0x78)],TextManager[_0x3bf64b(0x38c)]);if(_0x226a25[_0x3bf64b(0x8d7)])this['displayBuffs'](_0x52a61a,_0x25671b[_0x3bf64b(0x94a)],TextManager[_0x3bf64b(0xdf)]);},Window_BattleLog[_0x12d94d(0x4e9)]['displayBuffs']=function(_0x356318,_0x1589a7,_0x3f1fd0){const _0x539c29=_0x12d94d;for(const _0x1bca5f of _0x1589a7){const _0x4c60b0=_0x3f1fd0[_0x539c29(0x3d0)](_0x356318[_0x539c29(0x536)](),TextManager[_0x539c29(0x53d)](_0x1bca5f));this[_0x539c29(0xbce)]('popBaseLine'),this[_0x539c29(0xbce)]('pushBaseLine'),this[_0x539c29(0xbce)](_0x539c29(0x767),_0x4c60b0),this['push'](_0x539c29(0x48a));}},VisuMZ['BattleCore']['Window_BattleLog_clear']=Window_BattleLog['prototype'][_0x12d94d(0x4ef)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x4ef)]=function(){const _0x5a3337=_0x12d94d;VisuMZ[_0x5a3337(0xadf)][_0x5a3337(0x586)][_0x5a3337(0xba3)](this),this[_0x5a3337(0x769)]();},VisuMZ['BattleCore'][_0x12d94d(0x51a)]=Window_BattleLog['prototype'][_0x12d94d(0x36a)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x36a)]=function(){const _0x47416b=_0x12d94d;VisuMZ[_0x47416b(0xadf)][_0x47416b(0x51a)][_0x47416b(0xba3)](this),this[_0x47416b(0x769)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x47a)]=Window_BattleLog[_0x12d94d(0x4e9)]['popBaseLine'],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x82c)]=function(){const _0x11fd4c=_0x12d94d;VisuMZ[_0x11fd4c(0xadf)][_0x11fd4c(0x47a)][_0x11fd4c(0xba3)](this),this[_0x11fd4c(0x7d8)](),this['callNextMethod']();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x75)]=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x256)],Window_BattleLog[_0x12d94d(0x4e9)]['popupDamage']=function(_0x2a1ffd){const _0x22be6f=_0x12d94d;VisuMZ['BattleCore']['Window_BattleLog_popupDamage'][_0x22be6f(0xba3)](this,_0x2a1ffd),this[_0x22be6f(0x769)]();},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x9f4)]=function(){const _0x156e44=_0x12d94d;let _0x4e9ed7=0x0;this[_0x156e44(0x5d5)][_0x156e44(0x29c)]>0x0&&(_0x4e9ed7=this[_0x156e44(0x5d5)][this['_baseLineStack'][_0x156e44(0x29c)]-0x1]);if(this[_0x156e44(0x1f8)][_0x156e44(0x29c)]>_0x4e9ed7)this['wait']();else{if(_0x156e44(0x570)===_0x156e44(0x28b)){if(!this['_damageContainer'])return;if(!this[_0x156e44(0x101)])return;const _0x1a34af=_0x33f06f['ANTI_TINT_UI']?this['_damageContainer']['x']:0x0,_0x4ce45a=_0x31edbf[_0x156e44(0x36c)]?this['_damageContainer']['y']:0x0,_0x4cf0ef=_0x47c5e8[_0x156e44(0x857)]?this[_0x156e44(0xe4)]['x']:0x0,_0x31c6eb=_0x2b3705[_0x156e44(0x857)]?this[_0x156e44(0xe4)]['y']:0x0;this['_uiContainer']['x']=_0x1a34af+_0x4cf0ef,this[_0x156e44(0x101)]['y']=_0x4ce45a+_0x31c6eb;}else this[_0x156e44(0x769)]();}},VisuMZ['BattleCore'][_0x12d94d(0x7c2)]=Window_BattleLog['prototype']['performActionStart'],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xa36)]=function(_0x4d10fb,_0x23087c){const _0x4507a7=_0x12d94d;VisuMZ[_0x4507a7(0xadf)][_0x4507a7(0x7c2)][_0x4507a7(0xba3)](this,_0x4d10fb,_0x23087c),this[_0x4507a7(0x769)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x98e)]=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x8f4)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x8f4)]=function(_0x123ef3,_0xe983bc){const _0x2495e2=_0x12d94d;VisuMZ['BattleCore']['Window_BattleLog_performAction'][_0x2495e2(0xba3)](this,_0x123ef3,_0xe983bc),this[_0x2495e2(0x769)]();},VisuMZ[_0x12d94d(0xadf)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x12d94d(0x4e9)]['performActionEnd'],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x75d)]=function(_0x2fc9c8){const _0x1ccc61=_0x12d94d;VisuMZ[_0x1ccc61(0xadf)][_0x1ccc61(0x2fb)][_0x1ccc61(0xba3)](this,_0x2fc9c8);for(const _0x51d796 of BattleManager[_0x1ccc61(0xbee)]()){if(!_0x51d796)continue;if(_0x51d796[_0x1ccc61(0xb91)]())continue;_0x51d796[_0x1ccc61(0x2b9)]();}this['callNextMethod']();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb42)]=Window_BattleLog['prototype']['performDamage'],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x87b)]=function(_0x2a5597){const _0x348a50=_0x12d94d;VisuMZ[_0x348a50(0xadf)][_0x348a50(0xb42)][_0x348a50(0xba3)](this,_0x2a5597),this[_0x348a50(0x769)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xcee)]=Window_BattleLog[_0x12d94d(0x4e9)]['performMiss'],Window_BattleLog[_0x12d94d(0x4e9)]['performMiss']=function(_0x3974f2){const _0x21d99f=_0x12d94d;VisuMZ['BattleCore']['Window_BattleLog_performMiss'][_0x21d99f(0xba3)](this,_0x3974f2),this[_0x21d99f(0x769)]();},VisuMZ[_0x12d94d(0xadf)]['Window_BattleLog_performRecovery']=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xc01)],Window_BattleLog['prototype'][_0x12d94d(0xc01)]=function(_0x1aada3){const _0x5aab08=_0x12d94d;VisuMZ[_0x5aab08(0xadf)][_0x5aab08(0x9d6)][_0x5aab08(0xba3)](this,_0x1aada3),this[_0x5aab08(0x769)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x57a)]=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x83)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x83)]=function(_0x23f184){const _0x154813=_0x12d94d;VisuMZ[_0x154813(0xadf)][_0x154813(0x57a)]['call'](this,_0x23f184),this[_0x154813(0x769)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xd8)]=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x6d5)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x6d5)]=function(_0x157a5c){const _0x4248cb=_0x12d94d;VisuMZ['BattleCore']['Window_BattleLog_performMagicEvasion'][_0x4248cb(0xba3)](this,_0x157a5c),this['callNextMethod']();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x5d9)]=Window_BattleLog['prototype']['performCounter'],Window_BattleLog['prototype']['performCounter']=function(_0x5a3716){const _0xe192f9=_0x12d94d;VisuMZ[_0xe192f9(0xadf)][_0xe192f9(0x5d9)][_0xe192f9(0xba3)](this,_0x5a3716),this[_0xe192f9(0x769)]();},VisuMZ['BattleCore']['Window_BattleLog_performReflection']=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x418)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x418)]=function(_0x1ce00a){const _0x50b4d7=_0x12d94d;VisuMZ[_0x50b4d7(0xadf)][_0x50b4d7(0x3d1)][_0x50b4d7(0xba3)](this,_0x1ce00a),this[_0x50b4d7(0x769)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x836)]=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x814)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x814)]=function(_0x3c6605,_0x537e99){const _0x42976a=_0x12d94d;VisuMZ[_0x42976a(0xadf)][_0x42976a(0x836)][_0x42976a(0xba3)](this,_0x3c6605,_0x537e99),this[_0x42976a(0x769)]();},VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0x671)]=Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xa7)],Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xa7)]=function(_0x1e6d69){const _0x5a459a=_0x12d94d;VisuMZ[_0x5a459a(0xadf)][_0x5a459a(0x671)][_0x5a459a(0xba3)](this,_0x1e6d69),this[_0x5a459a(0x769)]();},Window_BattleLog[_0x12d94d(0x4e9)]['performCastAnimation']=function(_0x39cedf,_0x2c503a){const _0x5c1d84=_0x12d94d;_0x39cedf[_0x5c1d84(0x984)](_0x2c503a),this[_0x5c1d84(0x769)]();},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0xc0e)]=function(_0x532a25,_0x6c665b){const _0xd64cba=_0x12d94d,_0x3190f1=_0x532a25[_0xd64cba(0x9d1)]();_0x3190f1<=0x0?SoundManager[_0xd64cba(0xe8)]():this[_0xd64cba(0x76a)](_0x6c665b,_0x3190f1);},Window_BattleLog[_0x12d94d(0x4e9)][_0x12d94d(0x581)]=function(_0x15805e,_0x2c1868,_0x200133){const _0x26987d=_0x12d94d,_0x12ee93=[_0x15805e][_0x26987d(0xa0b)](_0x2c1868);for(const _0x2e06c2 of _0x12ee93){if(!_0x2e06c2)continue;_0x2e06c2[_0x26987d(0x326)](_0x200133);}this['callNextMethod']();},Window_BattleLog['prototype'][_0x12d94d(0x699)]=function(_0x20bf3){const _0x830549=_0x12d94d;this[_0x830549(0x201)]=_0x20bf3;},Window_BattleLog['prototype'][_0x12d94d(0x484)]=function(_0x2700d9,_0x4afab8){const _0x5cdbda=_0x12d94d;for(const _0x2a2fa7 of _0x2700d9){if(!_0x2a2fa7)continue;_0x2a2fa7[_0x5cdbda(0x484)](_0x4afab8);}this[_0x5cdbda(0x769)]();},Window_BattleLog['prototype'][_0x12d94d(0xbf1)]=function(_0x5eea85,_0x5be7f4,_0x36518b,_0x2e145f,_0x275203,_0x1e1217){const _0x2c9e0b=_0x12d94d;_0x5eea85['moveBattlerToPoint'](_0x5be7f4,_0x36518b,_0x2e145f,_0x275203,_0x1e1217,-0x1),this[_0x2c9e0b(0x769)]();},Window_BattleLog[_0x12d94d(0x4e9)]['performMoveToTargets']=function(_0x503db9,_0x5f212c,_0x1f58db,_0x369225,_0x5c6bef,_0x20e289,_0x5c425f){const _0x599fd8=_0x12d94d,_0x3960c=Math[_0x599fd8(0x2e3)](..._0x5f212c[_0x599fd8(0x43b)](_0x51d960=>_0x51d960['battler']()[_0x599fd8(0x3f5)]-_0x51d960[_0x599fd8(0x9b8)]()['mainSpriteWidth']()/0x2)),_0x5ad0d6=Math[_0x599fd8(0x660)](..._0x5f212c['map'](_0x10ed54=>_0x10ed54[_0x599fd8(0x9b8)]()['_baseX']+_0x10ed54[_0x599fd8(0x9b8)]()[_0x599fd8(0xc6a)]()/0x2)),_0x1754b0=Math[_0x599fd8(0x2e3)](..._0x5f212c['map'](_0x46100c=>_0x46100c['battler']()[_0x599fd8(0x59e)]-_0x46100c[_0x599fd8(0x9b8)]()[_0x599fd8(0x782)]())),_0x24c353=Math[_0x599fd8(0x660)](..._0x5f212c[_0x599fd8(0x43b)](_0x2b97f4=>_0x2b97f4[_0x599fd8(0x9b8)]()[_0x599fd8(0x59e)])),_0x442056=_0x5f212c[_0x599fd8(0xd0e)](_0x42eda5=>_0x42eda5['isActor']())[_0x599fd8(0x29c)],_0x272f70=_0x5f212c['filter'](_0xa3c0a0=>_0xa3c0a0['isEnemy']())[_0x599fd8(0x29c)];let _0x4a3577=0x0,_0x3cde82=0x0;if(_0x1f58db['match'](/front/i))_0x599fd8(0xc02)===_0x599fd8(0x48b)?this[_0x599fd8(0x484)](_0x599fd8(0x573)):_0x4a3577=_0x442056>=_0x272f70?_0x3960c:_0x5ad0d6;else{if(_0x1f58db[_0x599fd8(0x214)](/middle/i))_0x4a3577=(_0x3960c+_0x5ad0d6)/0x2,_0x5c425f=-0x1;else _0x1f58db['match'](/back/i)&&(_0x4a3577=_0x442056>=_0x272f70?_0x5ad0d6:_0x3960c);}if(_0x1f58db[_0x599fd8(0x214)](/head/i))_0x3cde82=_0x1754b0;else{if(_0x1f58db[_0x599fd8(0x214)](/center/i)){if('wfCwN'===_0x599fd8(0x60b))return!![];else{_0x3cde82=(_0x1754b0+_0x24c353)/0x2;if(_0x503db9[_0x599fd8(0x9b8)]())_0x3cde82+=_0x503db9['battler']()['height']/0x2;}}else _0x1f58db[_0x599fd8(0x214)](/base/i)&&(_0x3cde82=_0x24c353);}_0x503db9[_0x599fd8(0xc5c)](_0x4a3577,_0x3cde82,_0x369225,_0x5c6bef,_0x20e289,_0x5c425f),this[_0x599fd8(0x769)]();},Window_BattleLog['prototype'][_0x12d94d(0xd0)]=function(_0x480342,_0x26bfd7,_0x1ae564){const _0x265524=_0x12d94d;for(const _0x42d4a4 of _0x480342){if(!_0x42d4a4)continue;_0x42d4a4[_0x265524(0x43e)](_0x26bfd7,_0x1ae564);}this['callNextMethod']();};function Window_BattleMultiTarget(){const _0x3b9f3d=_0x12d94d;this[_0x3b9f3d(0x8df)](...arguments);}Window_BattleMultiTarget[_0x12d94d(0x4e9)]=Object[_0x12d94d(0x3d9)](Window_Command['prototype']),Window_BattleMultiTarget[_0x12d94d(0x4e9)][_0x12d94d(0xc50)]=Window_BattleMultiTarget,VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0x8c7)]=VisuMZ[_0x12d94d(0xadf)]['Settings'][_0x12d94d(0x8c7)]||{},Window_BattleMultiTarget[_0x12d94d(0x19c)]=VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0x8c7)][_0x12d94d(0x4c1)]??0x118,Window_BattleMultiTarget[_0x12d94d(0x9f)]=VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0x8c7)]['BgType']??0x2,Window_BattleMultiTarget['SHOW_BUTTON']=VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0x8c7)][_0x12d94d(0xb9a)]??!![],Window_BattleMultiTarget[_0x12d94d(0x3a4)]=VisuMZ['BattleCore'][_0x12d94d(0xb08)][_0x12d94d(0x8c7)][_0x12d94d(0x149)]??_0x12d94d(0x1e1),Window_BattleMultiTarget[_0x12d94d(0x507)]=VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0x8c7)][_0x12d94d(0x175)]??_0x12d94d(0x3a8),Window_BattleMultiTarget[_0x12d94d(0x5b1)]=VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0x8c7)]['ActorOffsetX']??0x0,Window_BattleMultiTarget[_0x12d94d(0x34a)]=VisuMZ['BattleCore'][_0x12d94d(0xb08)][_0x12d94d(0x8c7)]['ActorOffsetY']??0x0,Window_BattleMultiTarget[_0x12d94d(0x843)]=VisuMZ['BattleCore']['Settings'][_0x12d94d(0x8c7)]['EnemyOffsetX']??0x0,Window_BattleMultiTarget[_0x12d94d(0x888)]=VisuMZ[_0x12d94d(0xadf)][_0x12d94d(0xb08)][_0x12d94d(0x8c7)][_0x12d94d(0x882)]??0x0,Window_BattleMultiTarget[_0x12d94d(0x4e9)][_0x12d94d(0x8df)]=function(_0x352e3c,_0x5d2e35){const _0x90c18c=_0x12d94d;this['_forActor']=_0x5d2e35,Window_Command[_0x90c18c(0x4e9)][_0x90c18c(0x8df)]['call'](this,_0x352e3c),this[_0x90c18c(0xc93)](Window_BattleMultiTarget[_0x90c18c(0x9f)]),this[_0x90c18c(0x9c0)](),this[_0x90c18c(0x165)](),this[_0x90c18c(0xb19)]();},Window_BattleMultiTarget[_0x12d94d(0x4e9)][_0x12d94d(0x6bd)]=function(){const _0x588d45=_0x12d94d;return this[_0x588d45(0xbd6)];},Window_BattleMultiTarget['prototype'][_0x12d94d(0xb98)]=function(){const _0x217e71=_0x12d94d;let _0xf9ab71=this['forActor']()?Window_BattleMultiTarget[_0x217e71(0x3a4)]:Window_BattleMultiTarget[_0x217e71(0x507)];if(Imported[_0x217e71(0x564)]&&Window_BattleMultiTarget[_0x217e71(0x73f)]){this[_0x217e71(0x8f6)]=this['forActor']()?_0x217e71(0x7da):_0x217e71(0x9cc),this[_0x217e71(0x488)]=TextManager['getInputButtonString'](this[_0x217e71(0x8f6)]);const _0x3d96b8=VisuMZ[_0x217e71(0xca1)][_0x217e71(0xb08)][_0x217e71(0x1e7)][_0x217e71(0x57d)];_0xf9ab71=_0x3d96b8[_0x217e71(0x3d0)](this[_0x217e71(0x488)],_0xf9ab71);}this[_0x217e71(0xb0a)](_0xf9ab71,_0x217e71(0xd18));},Window_BattleMultiTarget[_0x12d94d(0x4e9)][_0x12d94d(0xb16)]=function(_0x5c58f4){const _0x842601=_0x12d94d,_0xc3138b=this['itemLineRect'](_0x5c58f4);this[_0x842601(0x28c)](),this[_0x842601(0x8b6)](this[_0x842601(0xae6)](_0x5c58f4));const _0x7cf8a7=this[_0x842601(0x2c8)](_0x5c58f4),_0x507a39=this['textSizeEx'](_0x7cf8a7)['width'],_0x495c83=_0xc3138b['x']+Math[_0x842601(0x28f)]((_0xc3138b[_0x842601(0xa80)]-_0x507a39)/0x2);this[_0x842601(0x786)](_0x7cf8a7,_0x495c83,_0xc3138b['y'],_0xc3138b['width']);},Window_BattleMultiTarget[_0x12d94d(0x4e9)][_0x12d94d(0xba4)]=function(){const _0x1b5f4b=_0x12d94d;Window_Command[_0x1b5f4b(0x4e9)][_0x1b5f4b(0xba4)]['call'](this),this['updateVisibility'](),this[_0x1b5f4b(0xc24)]();},Window_BattleMultiTarget['prototype'][_0x12d94d(0x81a)]=function(){const _0x4d1e4c=_0x12d94d;this[_0x4d1e4c(0x9bf)]=this[_0x4d1e4c(0x6c2)]();},Window_BattleMultiTarget[_0x12d94d(0x4e9)][_0x12d94d(0x6c2)]=function(){const _0x13147c=_0x12d94d,_0x12f55d=BattleManager[_0x13147c(0x17e)](),_0x1d07e2=_0x12f55d&&_0x12f55d[_0x13147c(0x790)]();if(!_0x1d07e2)return![];const _0x607978=SceneManager[_0x13147c(0x592)];if(this[_0x13147c(0x6bd)]()){if(_0x13147c(0xa9e)===_0x13147c(0x5d1))_0x121c4d['BattleCore'][_0x13147c(0xb08)][_0x13147c(0x58b)][_0x13147c(0x233)][_0x13147c(0xba3)](this,_0x11ddd2);else{if(_0x607978[_0x13147c(0x4f1)]['active']&&_0x607978[_0x13147c(0x4f1)][_0x13147c(0x7f8)]['pagedown'])return!![];if(_0x607978[_0x13147c(0x14e)][_0x13147c(0x4ca)]&&_0x607978[_0x13147c(0x14e)][_0x13147c(0x7f8)][_0x13147c(0x7da)])return!![];}}else{if('jSHsb'===_0x13147c(0xc22)){const _0x42d748=this[_0x13147c(0xc7)]()[_0x13147c(0xbad)];if(_0x42d748['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}else{if(_0x607978[_0x13147c(0x14e)][_0x13147c(0x4ca)]&&_0x607978[_0x13147c(0x14e)]['_handlers'][_0x13147c(0x9cc)])return!![];}}return![];},Window_BattleMultiTarget['prototype']['updateKeyboardKeys']=function(){const _0x585574=_0x12d94d;if(!Imported[_0x585574(0x564)])return;this[_0x585574(0x488)]!==TextManager['getInputButtonString'](this[_0x585574(0x8f6)])&&(_0x585574(0x3dc)==='IaTXl'?_0x270af8=_0x29aa4e['GroupDigits'](_0xe44a79):this['refresh']());},Window_BattleMultiTarget[_0x12d94d(0x4e9)][_0x12d94d(0x5c7)]=function(){const _0x30e636=_0x12d94d;if(this[_0x30e636(0x9bf)]&&TouchInput[_0x30e636(0x9a3)]()){if(_0x30e636(0x50d)===_0x30e636(0x50d)){const _0x1f8f75=this[_0x30e636(0x642)]();if(_0x1f8f75>=0x0){const _0x127bfc=this[_0x30e636(0x6bd)]()?_0x30e636(0x7da):_0x30e636(0x9cc);Input[_0x30e636(0x1a4)](_0x127bfc);}}else{if(this[_0x30e636(0xaa2)]()[_0x30e636(0x7ba)][_0x30e636(0x214)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x345bcd(_0x17fdd4['$1']);else{if(this['actor']()['note'][_0x30e636(0x214)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x68afb8(_0x22b8b8['$1']);}return 0x0;}}};