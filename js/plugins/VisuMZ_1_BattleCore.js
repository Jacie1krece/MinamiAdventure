//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.75;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.75] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x444cf3=_0x4ce0;(function(_0x1ceaf3,_0x5a3d44){const _0x5142a9=_0x4ce0,_0x23e0e4=_0x1ceaf3();while(!![]){try{const _0x3405ea=parseInt(_0x5142a9(0x30e))/0x1+-parseInt(_0x5142a9(0x692))/0x2+-parseInt(_0x5142a9(0x85c))/0x3+parseInt(_0x5142a9(0x267))/0x4+-parseInt(_0x5142a9(0x555))/0x5+parseInt(_0x5142a9(0xac0))/0x6*(parseInt(_0x5142a9(0x830))/0x7)+parseInt(_0x5142a9(0x2c8))/0x8;if(_0x3405ea===_0x5a3d44)break;else _0x23e0e4['push'](_0x23e0e4['shift']());}catch(_0x20d667){_0x23e0e4['push'](_0x23e0e4['shift']());}}}(_0x6498,0xae257));var label=_0x444cf3(0x7cf),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x444cf3(0x4d3)](function(_0xa90687){const _0x209548=_0x444cf3;return _0xa90687[_0x209548(0x3da)]&&_0xa90687['description'][_0x209548(0xa60)]('['+label+']');})[0x0];VisuMZ[label][_0x444cf3(0x52b)]=VisuMZ[label][_0x444cf3(0x52b)]||{},VisuMZ[_0x444cf3(0xab1)]=function(_0x326c1b,_0x40796b){const _0x14447c=_0x444cf3;for(const _0x17490c in _0x40796b){if(_0x17490c[_0x14447c(0x6b8)](/(.*):(.*)/i)){const _0x419818=String(RegExp['$1']),_0x217b40=String(RegExp['$2'])[_0x14447c(0x839)]()[_0x14447c(0x78c)]();let _0xffafe8,_0x597773,_0x5d58e3;switch(_0x217b40){case _0x14447c(0x7cd):_0xffafe8=_0x40796b[_0x17490c]!==''?Number(_0x40796b[_0x17490c]):0x0;break;case _0x14447c(0x8b1):_0x597773=_0x40796b[_0x17490c]!==''?JSON[_0x14447c(0x61c)](_0x40796b[_0x17490c]):[],_0xffafe8=_0x597773[_0x14447c(0x7f8)](_0x29890d=>Number(_0x29890d));break;case _0x14447c(0x313):_0xffafe8=_0x40796b[_0x17490c]!==''?eval(_0x40796b[_0x17490c]):null;break;case'ARRAYEVAL':_0x597773=_0x40796b[_0x17490c]!==''?JSON[_0x14447c(0x61c)](_0x40796b[_0x17490c]):[],_0xffafe8=_0x597773['map'](_0x3627e3=>eval(_0x3627e3));break;case _0x14447c(0x289):_0xffafe8=_0x40796b[_0x17490c]!==''?JSON[_0x14447c(0x61c)](_0x40796b[_0x17490c]):'';break;case _0x14447c(0x7b1):_0x597773=_0x40796b[_0x17490c]!==''?JSON[_0x14447c(0x61c)](_0x40796b[_0x17490c]):[],_0xffafe8=_0x597773[_0x14447c(0x7f8)](_0x49f834=>JSON['parse'](_0x49f834));break;case'FUNC':_0xffafe8=_0x40796b[_0x17490c]!==''?new Function(JSON[_0x14447c(0x61c)](_0x40796b[_0x17490c])):new Function('return\x200');break;case _0x14447c(0x8fc):_0x597773=_0x40796b[_0x17490c]!==''?JSON[_0x14447c(0x61c)](_0x40796b[_0x17490c]):[],_0xffafe8=_0x597773[_0x14447c(0x7f8)](_0x4af2db=>new Function(JSON[_0x14447c(0x61c)](_0x4af2db)));break;case _0x14447c(0xa8d):_0xffafe8=_0x40796b[_0x17490c]!==''?String(_0x40796b[_0x17490c]):'';break;case _0x14447c(0x727):_0x597773=_0x40796b[_0x17490c]!==''?JSON[_0x14447c(0x61c)](_0x40796b[_0x17490c]):[],_0xffafe8=_0x597773['map'](_0x511a50=>String(_0x511a50));break;case'STRUCT':_0x5d58e3=_0x40796b[_0x17490c]!==''?JSON[_0x14447c(0x61c)](_0x40796b[_0x17490c]):{},_0x326c1b[_0x419818]={},VisuMZ[_0x14447c(0xab1)](_0x326c1b[_0x419818],_0x5d58e3);continue;case _0x14447c(0x2d2):_0x597773=_0x40796b[_0x17490c]!==''?JSON[_0x14447c(0x61c)](_0x40796b[_0x17490c]):[],_0xffafe8=_0x597773[_0x14447c(0x7f8)](_0x35decf=>VisuMZ[_0x14447c(0xab1)]({},JSON[_0x14447c(0x61c)](_0x35decf)));break;default:continue;}_0x326c1b[_0x419818]=_0xffafe8;}}return _0x326c1b;},(_0x191dba=>{const _0x388654=_0x444cf3,_0x358389=_0x191dba[_0x388654(0x21a)];for(const _0x1d1ac3 of dependencies){if(!Imported[_0x1d1ac3]){alert(_0x388654(0x96d)[_0x388654(0x7d7)](_0x358389,_0x1d1ac3)),SceneManager['exit']();break;}}const _0x174c54=_0x191dba[_0x388654(0x5d6)];if(_0x174c54[_0x388654(0x6b8)](/\[Version[ ](.*?)\]/i)){const _0x22dd3c=Number(RegExp['$1']);_0x22dd3c!==VisuMZ[label][_0x388654(0x95c)]&&(alert(_0x388654(0xa8f)[_0x388654(0x7d7)](_0x358389,_0x22dd3c)),SceneManager[_0x388654(0x431)]());}if(_0x174c54[_0x388654(0x6b8)](/\[Tier[ ](\d+)\]/i)){const _0x39308c=Number(RegExp['$1']);_0x39308c<tier?(alert(_0x388654(0x5f8)[_0x388654(0x7d7)](_0x358389,_0x39308c,tier)),SceneManager[_0x388654(0x431)]()):tier=Math[_0x388654(0x642)](_0x39308c,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x388654(0x52b)],_0x191dba[_0x388654(0x3fe)]);})(pluginData),VisuMZ[_0x444cf3(0x746)]=function(_0x1cc493){const _0x52af05=_0x444cf3;let _0x5c09ab=[];for(const _0x854651 of _0x1cc493){_0x5c09ab=_0x5c09ab[_0x52af05(0x66d)](VisuMZ[_0x52af05(0x6bd)](_0x854651));}return _0x5c09ab[_0x52af05(0x4d3)](_0xe26aa7=>_0xe26aa7);},VisuMZ[_0x444cf3(0x6bd)]=function(_0x16dfa5){const _0x38dd5a=_0x444cf3,_0x7403a9=BattleManager['allBattleMembers']()[_0x38dd5a(0x4d3)](_0x5b2022=>_0x5b2022&&_0x5b2022['isAppeared']()),_0x3fc658=BattleManager['_subject'],_0x2c0bf4=BattleManager[_0x38dd5a(0x318)],_0x29f7d3=BattleManager[_0x38dd5a(0x4de)]?BattleManager[_0x38dd5a(0x4de)][_0x38dd5a(0xa4a)](0x0):_0x7403a9;_0x16dfa5=_0x16dfa5[_0x38dd5a(0x1fd)]()['trim']();if(_0x16dfa5===_0x38dd5a(0x7bb))return[_0x3fc658];else{if(_0x16dfa5===_0x38dd5a(0x41f))return[_0x2c0bf4];else{if(_0x16dfa5===_0x38dd5a(0x33a)){if(_0x2c0bf4){const _0x233153=_0x29f7d3[_0x38dd5a(0x2c5)](_0x2c0bf4);return _0x233153>=0x0?[_0x29f7d3[_0x233153-0x1]||_0x2c0bf4]:[_0x2c0bf4];}}else{if(_0x16dfa5===_0x38dd5a(0x634)){if(_0x2c0bf4){const _0x3aae65=_0x29f7d3[_0x38dd5a(0x2c5)](_0x2c0bf4);return _0x3aae65>=0x0?[_0x29f7d3[_0x3aae65+0x1]||_0x2c0bf4]:[_0x2c0bf4];}}else{if(_0x16dfa5===_0x38dd5a(0x951))return _0x29f7d3;else{if(_0x16dfa5==='focus')return[_0x3fc658]['concat'](_0x29f7d3);else{if(_0x16dfa5===_0x38dd5a(0x6ac))return _0x7403a9[_0x38dd5a(0x4d3)](_0x4d6ffa=>_0x4d6ffa!==_0x3fc658&&!_0x29f7d3['includes'](_0x4d6ffa)&&_0x4d6ffa[_0x38dd5a(0xb0d)]());else{if(_0x16dfa5===_0x38dd5a(0x520))return[VisuMZ[_0x38dd5a(0x83f)]()];else{if(_0x16dfa5[_0x38dd5a(0x6b8)](/SPECIAL (.*)>/i)){const _0x440440=String(RegExp['$1'])['split'](',')[_0x38dd5a(0x7f8)](_0x1b1cdd=>_0x1b1cdd[_0x38dd5a(0x78c)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x440440)];}}}}}}}}}if(_0x3fc658){if(_0x16dfa5===_0x38dd5a(0xb11))return _0x3fc658[_0x38dd5a(0x4e3)]()['aliveMembers']();else{if(_0x16dfa5===_0x38dd5a(0x368))return _0x3fc658[_0x38dd5a(0x4e3)]()[_0x38dd5a(0xaf5)]()[_0x38dd5a(0x4d3)](_0x54f8ed=>_0x54f8ed!==_0x3fc658);else{if(_0x16dfa5===_0x38dd5a(0x7f9))return _0x3fc658['friendsUnit']()[_0x38dd5a(0xaf5)]()[_0x38dd5a(0x4d3)](_0x452091=>_0x452091!==_0x2c0bf4);else{if(_0x16dfa5===_0x38dd5a(0xa26))return _0x3fc658[_0x38dd5a(0x4e3)]()[_0x38dd5a(0x8f2)]();else{if(_0x16dfa5[_0x38dd5a(0x6b8)](/FRIEND INDEX (\d+)/i)){const _0x1f1500=Number(RegExp['$1']);return[_0x3fc658[_0x38dd5a(0x4e3)]()[_0x38dd5a(0x73e)]()[_0x1f1500]];}}}}}if(_0x16dfa5===_0x38dd5a(0x33c))return _0x3fc658[_0x38dd5a(0xa3f)]()[_0x38dd5a(0xaf5)]();else{if(_0x16dfa5===_0x38dd5a(0x3dc))return _0x3fc658[_0x38dd5a(0xa3f)]()[_0x38dd5a(0xaf5)]()[_0x38dd5a(0x4d3)](_0x2d28e4=>_0x2d28e4!==_0x2c0bf4);else{if(_0x16dfa5===_0x38dd5a(0xa17))return _0x3fc658[_0x38dd5a(0xa3f)]()['deadMembers']();else{if(_0x16dfa5[_0x38dd5a(0x6b8)](/OPPONENT INDEX (\d+)/i)){const _0x45b2cb=Number(RegExp['$1']);return[_0x3fc658['opponentsUnit']()[_0x38dd5a(0x73e)]()[_0x45b2cb]];}}}}}if(_0x16dfa5===_0x38dd5a(0xab9))return $gameParty['aliveMembers']();else{if(_0x16dfa5==='alive\x20actors\x20not\x20user')return $gameParty['aliveMembers']()['filter'](_0x1847cb=>_0x1847cb!==_0x3fc658);else{if(_0x16dfa5===_0x38dd5a(0x84f))return $gameParty[_0x38dd5a(0xaf5)]()['filter'](_0x500c47=>_0x500c47!==_0x2c0bf4);else{if(_0x16dfa5==='dead\x20actors')return $gameParty[_0x38dd5a(0x8f2)]();else{if(_0x16dfa5[_0x38dd5a(0x6b8)](/ACTOR INDEX (\d+)/i)){const _0x5678a3=Number(RegExp['$1']);return[$gameParty[_0x38dd5a(0x73e)]()[_0x5678a3]];}else{if(_0x16dfa5['match'](/ACTOR ID (\d+)/i)){const _0x5126c6=Number(RegExp['$1']);return[$gameActors[_0x38dd5a(0x37a)](_0x5126c6)];}}}}}}if(_0x16dfa5==='alive\x20enemies')return $gameTroop[_0x38dd5a(0xaf5)]();else{if(_0x16dfa5===_0x38dd5a(0x789))return $gameTroop['aliveMembers']()[_0x38dd5a(0x4d3)](_0x14c6aa=>_0x14c6aa!==_0x3fc658);else{if(_0x16dfa5===_0x38dd5a(0x5c3))return $gameTroop['aliveMembers']()[_0x38dd5a(0x4d3)](_0xd05c91=>_0xd05c91!==_0x2c0bf4);else{if(_0x16dfa5===_0x38dd5a(0x9e9))return $gameTroop['deadMembers']();else{if(_0x16dfa5['match'](/ENEMY INDEX (\d+)/i)){const _0x2c83de=Number(RegExp['$1']);return[$gameTroop[_0x38dd5a(0x73e)]()[_0x2c83de]];}else{if(_0x16dfa5[_0x38dd5a(0x6b8)](/ENEMY ID (\d+)/i)){const _0x7a4a40=Number(RegExp['$1']);return $gameTroop['aliveMembers']()['filter'](_0xac0bd2=>_0xac0bd2[_0x38dd5a(0x73a)]()===_0x7a4a40);}}}}}}if(_0x16dfa5===_0x38dd5a(0x2ab))return _0x7403a9[_0x38dd5a(0x4d3)](_0x4826fc=>_0x4826fc['isAlive']());else{if(_0x16dfa5===_0x38dd5a(0x73b))return _0x7403a9[_0x38dd5a(0x4d3)](_0x721036=>_0x721036['isAlive']()&&_0x721036!==_0x3fc658);else{if(_0x16dfa5===_0x38dd5a(0x400))return _0x7403a9['filter'](_0x214901=>_0x214901[_0x38dd5a(0xad2)]()&&_0x214901!==_0x2c0bf4);else{if(_0x16dfa5===_0x38dd5a(0x99a))return _0x7403a9['filter'](_0x364a73=>_0x364a73['isDead']());}}}return[];},VisuMZ[_0x444cf3(0x83f)]=function(){return BattleManager['_target'];},VisuMZ[_0x444cf3(0x7af)]=function(_0x13361a){return BattleManager['_target'];},PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x5cc),_0x1dc381=>{const _0x339af5=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1dc381,_0x1dc381);const _0x7747c3=$gameTemp[_0x339af5(0x95d)](),_0x314e94=BattleManager['_action'],_0x32aa94=BattleManager[_0x339af5(0x55d)],_0x4b8b39=BattleManager[_0x339af5(0x4de)]?BattleManager['_allTargets'][_0x339af5(0xa4a)](0x0):[],_0xdd2353=BattleManager[_0x339af5(0x1e6)];if(!_0x7747c3||!_0x314e94||!_0x32aa94)return;if(!_0x314e94[_0x339af5(0x39a)]())return;if(_0x1dc381[_0x339af5(0xac4)])_0xdd2353[_0x339af5(0x81a)](_0x32aa94,_0x314e94[_0x339af5(0x39a)]());_0x1dc381['ApplyImmortal']&&_0xdd2353[_0x339af5(0x87e)](_0x339af5(0x233),_0x32aa94,_0x4b8b39,!![]);if(_0x1dc381[_0x339af5(0x6cd)])_0xdd2353[_0x339af5(0x87e)](_0x339af5(0xb0e),_0x32aa94,_0x314e94);if(_0x1dc381[_0x339af5(0xafb)])_0xdd2353['push']('waitForMovement');if(_0x1dc381['CastAnimation'])_0xdd2353[_0x339af5(0x87e)](_0x339af5(0x53e),_0x32aa94,_0x314e94);if(_0x1dc381['WaitForAnimation'])_0xdd2353[_0x339af5(0x87e)]('waitForAnimation');_0x7747c3['setWaitMode'](_0x339af5(0x357));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x214),_0x5908ad=>{const _0x55065f=_0x444cf3;if(!SceneManager[_0x55065f(0xa7a)]())return;VisuMZ[_0x55065f(0xab1)](_0x5908ad,_0x5908ad);const _0x5daece=$gameTemp[_0x55065f(0x95d)](),_0x150998=BattleManager['_action'],_0x3a62db=BattleManager['_subject'],_0x4b6a62=BattleManager[_0x55065f(0x4de)]?BattleManager['_allTargets'][_0x55065f(0xa4a)](0x0):[],_0xd7ecb0=BattleManager[_0x55065f(0x1e6)],_0x11a0ac=_0x5908ad[_0x55065f(0x268)]??![];if(!_0x5daece||!_0x150998||!_0x3a62db)return;if(!_0x150998['item']())return;let _0x4a735f=_0x11a0ac?_0xd7ecb0[_0x55065f(0x332)](_0x3a62db):0x1;for(let _0x17dad2=0x0;_0x17dad2<_0x4a735f;_0x17dad2++){_0x11a0ac&&_0x3a62db[_0x55065f(0xa93)]()&&_0xd7ecb0[_0x55065f(0x87e)](_0x55065f(0x5da),_0x3a62db,_0x17dad2);if(_0x5908ad[_0x55065f(0x71a)])_0xd7ecb0[_0x55065f(0x87e)]('performAction',_0x3a62db,_0x150998);if(_0x5908ad[_0x55065f(0x259)]>0x0)_0xd7ecb0['push'](_0x55065f(0x83e),_0x5908ad['WaitCount']);if(_0x5908ad['ActionAnimation'])_0xd7ecb0[_0x55065f(0x87e)]('showAnimation',_0x3a62db,_0x4b6a62,_0x150998[_0x55065f(0x39a)]()[_0x55065f(0x50d)]);if(_0x5908ad[_0x55065f(0x593)])_0xd7ecb0[_0x55065f(0x87e)](_0x55065f(0x787));for(const _0x3844c1 of _0x4b6a62){if(!_0x3844c1)continue;if(_0x5908ad[_0x55065f(0x62f)])_0xd7ecb0[_0x55065f(0x87e)](_0x55065f(0x876),_0x3a62db,_0x3844c1);}}_0x11a0ac&&_0x3a62db['isActor']()&&_0xd7ecb0[_0x55065f(0x87e)]('clearActiveWeaponSet',_0x3a62db);if(_0x5908ad[_0x55065f(0x29b)])_0xd7ecb0[_0x55065f(0x87e)](_0x55065f(0x233),_0x3a62db,_0x4b6a62,![]);_0x5daece['setWaitMode']('battlelog');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Set_TargetActionSet',_0x18c04e=>{const _0x29fbc5=_0x444cf3;if(!SceneManager[_0x29fbc5(0xa7a)]())return;VisuMZ['ConvertParams'](_0x18c04e,_0x18c04e);const _0x45e535=$gameTemp[_0x29fbc5(0x95d)](),_0x2ed0ee=BattleManager[_0x29fbc5(0xac1)],_0x30e39e=BattleManager[_0x29fbc5(0x55d)],_0x5451e=BattleManager['_allTargets']?BattleManager['_allTargets'][_0x29fbc5(0xa4a)](0x0):[],_0x31f271=BattleManager[_0x29fbc5(0x1e6)],_0xd902eb=_0x18c04e[_0x29fbc5(0x268)]??![];if(!_0x45e535||!_0x2ed0ee||!_0x30e39e)return;if(!_0x2ed0ee[_0x29fbc5(0x39a)]())return;let _0x472780=_0xd902eb?_0x31f271[_0x29fbc5(0x332)](_0x30e39e):0x1;for(let _0xc10290=0x0;_0xc10290<_0x472780;_0xc10290++){for(const _0x35d1e3 of _0x5451e){if(!_0x35d1e3)continue;_0xd902eb&&_0x30e39e[_0x29fbc5(0xa93)]()&&_0x31f271[_0x29fbc5(0x87e)](_0x29fbc5(0x5da),_0x30e39e,_0xc10290);if(_0x18c04e[_0x29fbc5(0x71a)])_0x31f271['push'](_0x29fbc5(0x36a),_0x30e39e,_0x2ed0ee);if(_0x18c04e[_0x29fbc5(0x4dd)]>0x0)_0x31f271['push'](_0x29fbc5(0x83e),_0x18c04e[_0x29fbc5(0x4dd)]);if(_0x18c04e['ActionAnimation'])_0x31f271['push']('showAnimation',_0x30e39e,[_0x35d1e3],_0x2ed0ee[_0x29fbc5(0x39a)]()[_0x29fbc5(0x50d)]);if(_0x18c04e[_0x29fbc5(0x3a0)]>0x0)_0x31f271[_0x29fbc5(0x87e)](_0x29fbc5(0x83e),_0x18c04e['WaitCount2']);if(_0x18c04e[_0x29fbc5(0x62f)])_0x31f271[_0x29fbc5(0x87e)]('actionEffect',_0x30e39e,_0x35d1e3);}}_0xd902eb&&_0x30e39e['isActor']()&&_0x31f271['push'](_0x29fbc5(0xa5d),_0x30e39e);if(_0x18c04e[_0x29fbc5(0x29b)])_0x31f271[_0x29fbc5(0x87e)](_0x29fbc5(0x233),_0x30e39e,_0x5451e,![]);_0x45e535['setWaitMode']('battlelog');}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x818),_0x3dd685=>{const _0x4db81f=_0x444cf3;if(!SceneManager[_0x4db81f(0xa7a)]())return;VisuMZ[_0x4db81f(0xab1)](_0x3dd685,_0x3dd685);const _0x49fc80=$gameTemp[_0x4db81f(0x95d)](),_0x131d20=BattleManager['_action'],_0x3bd918=BattleManager['_subject'],_0x1d3ee1=BattleManager[_0x4db81f(0x4de)]?BattleManager[_0x4db81f(0x4de)][_0x4db81f(0xa4a)](0x0):[],_0x249c02=BattleManager[_0x4db81f(0x1e6)];if(!_0x49fc80||!_0x131d20||!_0x3bd918)return;if(!_0x131d20[_0x4db81f(0x39a)]())return;if(_0x3dd685[_0x4db81f(0x29b)])_0x249c02[_0x4db81f(0x87e)](_0x4db81f(0x233),_0x3bd918,_0x1d3ee1,![]);if(_0x3dd685['WaitForNewLine'])_0x249c02[_0x4db81f(0x87e)](_0x4db81f(0x459));if(_0x3dd685[_0x4db81f(0x6a1)])_0x249c02[_0x4db81f(0x87e)](_0x4db81f(0xb2f));if(_0x3dd685['ClearBattleLog'])_0x249c02[_0x4db81f(0x87e)](_0x4db81f(0x667));if(_0x3dd685['ActionEnd'])_0x249c02[_0x4db81f(0x87e)](_0x4db81f(0x72b),_0x3bd918);if(_0x3dd685[_0x4db81f(0xafb)])_0x249c02[_0x4db81f(0x87e)]('waitForMovement');_0x49fc80[_0x4db81f(0x36d)]('battlelog');}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x1f3),_0x41b272=>{const _0x2ea429=_0x444cf3;if(!SceneManager[_0x2ea429(0xa7a)]())return;if(!Imported[_0x2ea429(0xa74)])return;VisuMZ[_0x2ea429(0xab1)](_0x41b272,_0x41b272);const _0x513400=$gameTemp[_0x2ea429(0x95d)](),_0x5be838=_0x41b272[_0x2ea429(0x5f7)];if(!_0x513400)return;$gameScreen[_0x2ea429(0x20d)](_0x41b272[_0x2ea429(0x46c)],_0x41b272['Duration'],_0x41b272[_0x2ea429(0x1cc)]);if(_0x5be838)_0x513400[_0x2ea429(0x36d)](_0x2ea429(0xb02));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x3ab),_0xd17637=>{const _0x4c63d7=_0x444cf3;if(!SceneManager[_0x4c63d7(0xa7a)]())return;if(!Imported[_0x4c63d7(0xa74)])return;VisuMZ[_0x4c63d7(0xab1)](_0xd17637,_0xd17637);const _0x2b4fe8=$gameTemp['getLastPluginCommandInterpreter'](),_0x3d0316=_0xd17637[_0x4c63d7(0x5f7)];if(!_0x2b4fe8)return;$gameScreen[_0x4c63d7(0x20d)](0x0,_0xd17637[_0x4c63d7(0x6f8)],_0xd17637[_0x4c63d7(0x1cc)]);if(_0x3d0316)_0x2b4fe8[_0x4c63d7(0x36d)](_0x4c63d7(0xb02));}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Angle_WaitForAngle',_0x4cf76c=>{const _0x6802ee=_0x444cf3;if(!SceneManager[_0x6802ee(0xa7a)]())return;if(!Imported[_0x6802ee(0xa74)])return;const _0x5b8666=$gameTemp[_0x6802ee(0x95d)]();if(!_0x5b8666)return;_0x5b8666['setWaitMode'](_0x6802ee(0xb02));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x403),_0x2787a4=>{const _0x1df40c=_0x444cf3;if(!SceneManager[_0x1df40c(0xa7a)]())return;VisuMZ[_0x1df40c(0xab1)](_0x2787a4,_0x2787a4);const _0x236abf=$gameTemp[_0x1df40c(0x95d)](),_0x4a19c3=BattleManager[_0x1df40c(0xac1)],_0x3fb34e=BattleManager[_0x1df40c(0x55d)],_0x268db3=VisuMZ[_0x1df40c(0x746)](_0x2787a4[_0x1df40c(0x9fe)]),_0x227ae1=_0x2787a4[_0x1df40c(0xa6b)],_0x5ebfc6=BattleManager[_0x1df40c(0x1e6)];if(!_0x236abf||!_0x4a19c3||!_0x3fb34e)return;if(!_0x4a19c3['item']())return;let _0x339a26=_0x4a19c3[_0x1df40c(0x39a)]()[_0x1df40c(0x50d)];if(_0x339a26<0x0)_0x339a26=_0x3fb34e[_0x1df40c(0x32d)]();$gameTemp['requestAnimation'](_0x268db3,_0x339a26,_0x227ae1),_0x2787a4[_0x1df40c(0x593)]&&_0x236abf['setWaitMode']('battleAnimation');}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x221),_0x45f65f=>{const _0xa7376e=_0x444cf3;if(!SceneManager[_0xa7376e(0xa7a)]())return;VisuMZ[_0xa7376e(0xab1)](_0x45f65f,_0x45f65f);const _0x60e3b4=$gameTemp[_0xa7376e(0x95d)](),_0x29d829=BattleManager['_subject'],_0x395d23=VisuMZ[_0xa7376e(0x746)](_0x45f65f['Targets']),_0x3fe599=_0x45f65f['Mirror'],_0x3b2d52=BattleManager[_0xa7376e(0x1e6)];if(!_0x60e3b4||!_0x29d829)return;const _0x2da6d7=_0x29d829[_0xa7376e(0x32d)]();$gameTemp[_0xa7376e(0x4b3)](_0x395d23,_0x2da6d7,_0x3fe599),_0x45f65f['WaitForAnimation']&&_0x60e3b4[_0xa7376e(0x36d)](_0xa7376e(0x4d1));}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x9eb),_0x3f7067=>{const _0x4fde9d=_0x444cf3;if(!SceneManager[_0x4fde9d(0xa7a)]())return;VisuMZ[_0x4fde9d(0xab1)](_0x3f7067,_0x3f7067);const _0x502eb7=_0x16dfb2[_0x4fde9d(0xb31)](_0x3f7067[_0x4fde9d(0x2cb)]);if(_0x502eb7<=0x0)return;const _0x29ed1b=$gameTemp[_0x4fde9d(0x95d)](),_0x16dfb2=BattleManager['_subject'],_0x14c033=VisuMZ[_0x4fde9d(0x746)](_0x3f7067[_0x4fde9d(0x9fe)]),_0x14a1bb=_0x3f7067[_0x4fde9d(0xa6b)],_0x1b0c47=BattleManager['_logWindow'];if(!_0x29ed1b||!_0x16dfb2)return;$gameTemp[_0x4fde9d(0x4b3)](_0x14c033,_0x502eb7,_0x14a1bb),_0x3f7067[_0x4fde9d(0x593)]&&_0x29ed1b[_0x4fde9d(0x36d)](_0x4fde9d(0x4d1));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x7ea),_0x5ece63=>{const _0x180734=_0x444cf3;if(!SceneManager[_0x180734(0xa7a)]())return;VisuMZ[_0x180734(0xab1)](_0x5ece63,_0x5ece63);const _0x18e4cf=$gameTemp[_0x180734(0x95d)](),_0x3da627=BattleManager['_action'],_0xba0803=_0x5ece63[_0x180734(0xa6b)],_0x580d32=VisuMZ[_0x180734(0x746)](_0x5ece63['Targets']);if(!_0x18e4cf||!_0x3da627)return;if(!_0x3da627[_0x180734(0x39a)]())return;for(const _0x237aec of _0x580d32){if(!_0x237aec)continue;_0x237aec[_0x180734(0x53e)](_0x3da627,_0xba0803);}if(_0x5ece63[_0x180734(0x593)])_0x18e4cf[_0x180734(0x36d)](_0x180734(0x4d1));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Animation_ChangeBattlePortrait',_0x168cfd=>{const _0xb85142=_0x444cf3;VisuMZ[_0xb85142(0xab1)](_0x168cfd,_0x168cfd);const _0x1613b3=$gameTemp[_0xb85142(0x95d)](),_0x291182=VisuMZ['CreateActionSequenceTargets'](_0x168cfd[_0xb85142(0x9fe)]),_0x4e283a=_0x168cfd[_0xb85142(0x871)];if(!_0x4e283a)return;for(const _0x429fcf of _0x291182){if(!_0x429fcf)continue;if(!_0x429fcf[_0xb85142(0xa93)]())continue;_0x429fcf[_0xb85142(0x9d1)](_0x4e283a);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Animation_PlayAtCoordinate',_0x5a85e5=>{const _0x4fe2de=_0x444cf3;if(!SceneManager[_0x4fe2de(0xa67)])return;if(!SceneManager[_0x4fe2de(0xa67)]['_spriteset'])return;if(!Imported[_0x4fe2de(0x8d5)])return;VisuMZ[_0x4fe2de(0xab1)](_0x5a85e5,_0x5a85e5);const _0x2c9718=$gameTemp['getLastPluginCommandInterpreter'](),_0x209cb8=Math[_0x4fe2de(0xa43)](_0x5a85e5[_0x4fe2de(0x422)]),_0x4967ca=Math['round'](_0x5a85e5[_0x4fe2de(0x504)]);$gameTemp[_0x4fe2de(0xaba)](_0x209cb8,_0x4967ca,_0x5a85e5['AnimationID'],_0x5a85e5[_0x4fe2de(0xa6b)],_0x5a85e5[_0x4fe2de(0x23d)]),_0x5a85e5[_0x4fe2de(0x2a6)]&&_0x2c9718&&(SceneManager[_0x4fe2de(0xa67)][_0x4fe2de(0x9f5)][_0x4fe2de(0x58e)](),_0x2c9718['setWaitMode'](_0x4fe2de(0x4d1)));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x8c8),_0x28fe7f=>{const _0x5bb4e2=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x28fe7f,_0x28fe7f);const _0x13741a=$gameTemp[_0x5bb4e2(0x95d)](),_0x15f19e=VisuMZ[_0x5bb4e2(0x746)](_0x28fe7f['Targets']),_0x3346cb=_0x28fe7f[_0x5bb4e2(0xa6e)],_0x1cb661=_0x28fe7f[_0x5bb4e2(0xa6b)];if(!_0x13741a)return;$gameTemp[_0x5bb4e2(0x4b3)](_0x15f19e,_0x3346cb,_0x1cb661);if(_0x28fe7f[_0x5bb4e2(0x593)])_0x13741a['setWaitMode'](_0x5bb4e2(0x4d1));}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Animation_WaitForAnimation',_0x32406f=>{const _0xaf2a9c=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x185df2=$gameTemp[_0xaf2a9c(0x95d)]();if(!_0x185df2)return;_0x185df2[_0xaf2a9c(0x36d)](_0xaf2a9c(0x4d1));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x741),_0xa98cee=>{const _0x305d62=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x305d62(0xab1)](_0xa98cee,_0xa98cee);const _0x35548f=BattleManager['_logWindow'],_0x1607e0=_0xa98cee[_0x305d62(0x9ec)]&&Imported['VisuMZ_4_CombatLog'];_0x35548f[_0x305d62(0x548)](_0xa98cee[_0x305d62(0x1e8)]),_0x1607e0&&Imported[_0x305d62(0x664)]&&$gameSystem[_0x305d62(0x769)](_0xa98cee['Text']||'',_0xa98cee['CombatLogIcon']||0x0);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x5ee),_0x426ecf=>{const _0x39e313=_0x444cf3;if(!SceneManager[_0x39e313(0xa7a)]())return;const _0x192792=BattleManager[_0x39e313(0x1e6)];_0x192792[_0x39e313(0x667)]();}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_BattleLog_DisplayAction',_0x2e7fe6=>{const _0x265407=_0x444cf3;if(!SceneManager[_0x265407(0xa7a)]())return;const _0x5cb74a=$gameTemp[_0x265407(0x95d)](),_0x5382ac=BattleManager[_0x265407(0xac1)],_0x4c5a81=BattleManager[_0x265407(0x55d)],_0xa56b92=BattleManager[_0x265407(0x1e6)];if(!_0x5cb74a||!_0x5382ac||!_0x4c5a81)return;if(!_0x5382ac[_0x265407(0x39a)]())return;_0xa56b92[_0x265407(0x81a)](_0x4c5a81,_0x5382ac[_0x265407(0x39a)]()),_0x5cb74a[_0x265407(0x36d)](_0x265407(0x357));}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_BattleLog_PopBaseLine',_0x423971=>{const _0xf7ff55=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x190fb0=BattleManager[_0xf7ff55(0x1e6)];_0x190fb0[_0xf7ff55(0x9b3)]();}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x25f),_0x4bf131=>{const _0x41645c=_0x444cf3;if(!SceneManager[_0x41645c(0xa7a)]())return;const _0x3dba78=BattleManager['_logWindow'];_0x3dba78[_0x41645c(0x5e7)]();}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_BattleLog_Refresh',_0x4b3ac1=>{const _0x313fe5=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x40314c=BattleManager[_0x313fe5(0x1e6)];_0x40314c[_0x313fe5(0x60e)]();}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x22b),_0x3056d4=>{const _0x428012=_0x444cf3;if(!SceneManager[_0x428012(0xa7a)]())return;VisuMZ[_0x428012(0xab1)](_0x3056d4,_0x3056d4),SceneManager[_0x428012(0xa67)][_0x428012(0x405)](_0x3056d4[_0x428012(0x423)]);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x75a),_0xcb3ae9=>{const _0x1b4130=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x4c7b96=$gameTemp[_0x1b4130(0x95d)]();_0x4c7b96['setWaitMode'](_0x1b4130(0x357));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x222),_0x575736=>{const _0x24b5d4=_0x444cf3;if(!SceneManager[_0x24b5d4(0xa7a)]())return;const _0x5bb48c=$gameTemp['getLastPluginCommandInterpreter'](),_0xef10fd=BattleManager[_0x24b5d4(0x1e6)];_0xef10fd[_0x24b5d4(0x459)](),_0x5bb48c[_0x24b5d4(0x36d)]('battlelog');}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x3fc),_0x14a059=>{const _0xf977f0=_0x444cf3;if(!SceneManager[_0xf977f0(0xa7a)]())return;if(!Imported[_0xf977f0(0xa74)])return;VisuMZ[_0xf977f0(0xab1)](_0x14a059,_0x14a059);const _0x23ccdf=$gameScreen[_0xf977f0(0xaee)]();_0x23ccdf[_0xf977f0(0x2e6)]=_0x14a059[_0xf977f0(0x232)];}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x35d),_0x1500b2=>{const _0x2f8211=_0x444cf3;if(!SceneManager[_0x2f8211(0xa7a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2f8211(0xab1)](_0x1500b2,_0x1500b2);const _0x4008ef=$gameTemp[_0x2f8211(0x95d)](),_0xfd6dd4=_0x1500b2[_0x2f8211(0x900)];$gameScreen[_0x2f8211(0xa87)](_0x1500b2[_0x2f8211(0x94b)],_0x1500b2[_0x2f8211(0x240)],_0x1500b2[_0x2f8211(0x6f8)],_0x1500b2['EasingType']);if(_0xfd6dd4)_0x4008ef['setWaitMode']('battleCamera');}),PluginManager['registerCommand'](pluginData['name'],_0x444cf3(0xa6d),_0x5dadf5=>{const _0x3081f0=_0x444cf3;if(!SceneManager[_0x3081f0(0xa7a)]())return;if(!Imported[_0x3081f0(0xa74)])return;VisuMZ[_0x3081f0(0xab1)](_0x5dadf5,_0x5dadf5);const _0x2869f8=$gameTemp[_0x3081f0(0x95d)](),_0x92eafa=VisuMZ[_0x3081f0(0x746)](_0x5dadf5[_0x3081f0(0x9fe)]),_0x21202d=_0x5dadf5['WaitForCamera'];$gameScreen[_0x3081f0(0x46a)](_0x92eafa,_0x5dadf5['Duration'],_0x5dadf5[_0x3081f0(0x1cc)]);if(_0x21202d)_0x2869f8[_0x3081f0(0x36d)]('battleCamera');}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Camera_Offset',_0x312ea1=>{const _0x2c64d9=_0x444cf3;if(!SceneManager[_0x2c64d9(0xa7a)]())return;if(!Imported[_0x2c64d9(0xa74)])return;VisuMZ[_0x2c64d9(0xab1)](_0x312ea1,_0x312ea1);const _0x353222=$gameTemp['getLastPluginCommandInterpreter'](),_0x409774=_0x312ea1[_0x2c64d9(0x900)];$gameScreen[_0x2c64d9(0x825)](_0x312ea1['OffsetX'],_0x312ea1[_0x2c64d9(0xad3)],_0x312ea1[_0x2c64d9(0x6f8)],_0x312ea1[_0x2c64d9(0x1cc)]);if(_0x409774)_0x353222[_0x2c64d9(0x36d)](_0x2c64d9(0x89d));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],'ActSeq_Camera_Reset',_0x33fd17=>{const _0x58119e=_0x444cf3;if(!SceneManager[_0x58119e(0xa7a)]())return;if(!Imported[_0x58119e(0xa74)])return;VisuMZ['ConvertParams'](_0x33fd17,_0x33fd17);const _0x42e6d4=$gameTemp[_0x58119e(0x95d)](),_0x13add5=_0x33fd17[_0x58119e(0x985)],_0x8887d0=_0x33fd17[_0x58119e(0x8ba)],_0x489f3b=_0x33fd17[_0x58119e(0x900)];if(_0x13add5){const _0xaf4d84=Math[_0x58119e(0xa43)](Graphics[_0x58119e(0x851)]/0x2),_0x2358d7=Math[_0x58119e(0xa43)](Graphics['height']/0x2);$gameScreen[_0x58119e(0xa87)](_0xaf4d84,_0x2358d7,_0x33fd17[_0x58119e(0x6f8)],_0x33fd17['EasingType']);}_0x8887d0&&$gameScreen[_0x58119e(0x825)](0x0,0x0,_0x33fd17['Duration'],_0x33fd17['EasingType']);if(_0x489f3b)_0x42e6d4[_0x58119e(0x36d)](_0x58119e(0x89d));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0xaad),_0x675eac=>{const _0x54e6b1=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x54e6b1(0xa74)])return;const _0x5afb=$gameTemp[_0x54e6b1(0x95d)]();if(!_0x5afb)return;_0x5afb[_0x54e6b1(0x36d)](_0x54e6b1(0x89d));}),VisuMZ[_0x444cf3(0x7cf)]['CreateCutinSettings']=function(_0x581dd8){const _0xdfaab0=_0x444cf3;_0x581dd8['portraitFilename']='';const _0x47546b=VisuMZ[_0xdfaab0(0x946)]['CreateCutinSettings'](_0x581dd8),_0x2fd64c=VisuMZ[_0xdfaab0(0x746)](_0x581dd8['Targets'])[0x0]||null;return _0x2fd64c&&(_0x47546b[_0xdfaab0(0x731)]=_0x2fd64c['visualCutinPortraitFilename'](),_0x47546b[_0xdfaab0(0x2c7)]=_0x2fd64c[_0xdfaab0(0x8c6)](),_0x47546b[_0xdfaab0(0x9c1)]=_0x2fd64c[_0xdfaab0(0x3cf)](),_0x47546b[_0xdfaab0(0x954)]=_0x2fd64c[_0xdfaab0(0xa42)](),_0x2fd64c['isEnemy']()&&(_0x2fd64c[_0xdfaab0(0x330)]()&&(_0x47546b[_0xdfaab0(0xb2e)]=!_0x47546b[_0xdfaab0(0xb2e)]),_0x2fd64c[_0xdfaab0(0x8bc)]()&&(_0x47546b[_0xdfaab0(0x4d0)]=!_0x47546b[_0xdfaab0(0x4d0)]),_0x47546b['portraitType']===_0xdfaab0(0x6fb)&&(_0x47546b[_0xdfaab0(0xb2e)]=!_0x47546b['portraitFlipHorz']),_0x581dd8[_0xdfaab0(0x8cd)][_0xdfaab0(0x807)]&&(_0x47546b[_0xdfaab0(0x9e5)]*=-0x1),_0x581dd8[_0xdfaab0(0x8cd)]['parallaxScrollYinvertEnemy']&&(_0x47546b[_0xdfaab0(0x298)]*=-0x1),_0x47546b['parallaxHue']+=_0x581dd8[_0xdfaab0(0x8cd)]['parallaxHueEnemyModifier']??0x0)),_0x47546b;},PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x8c2),_0x1ebe26=>{const _0x49637c=_0x444cf3;if(!SceneManager[_0x49637c(0xa7a)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x49637c(0xab1)](_0x1ebe26,_0x1ebe26);const _0x3167d5=VisuMZ[_0x49637c(0x7cf)][_0x49637c(0x246)](_0x1ebe26);SceneManager[_0x49637c(0xa67)]['startVisualCutin'](_0x3167d5);const _0x142038=$gameTemp[_0x49637c(0x95d)]();_0x142038&&_0x1ebe26['WaitForEntrance']&&_0x142038[_0x49637c(0x36d)](_0x49637c(0x7f5));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Cutin_EndVisualCutinEffectAll',_0x3c2206=>{const _0x3be8cf=_0x444cf3;if(!SceneManager[_0x3be8cf(0xa7a)]())return;if(!Imported[_0x3be8cf(0x263)])return;VisuMZ[_0x3be8cf(0xab1)](_0x3c2206,_0x3c2206),SceneManager[_0x3be8cf(0xa67)][_0x3be8cf(0x80b)]();const _0x50c9fe=$gameTemp[_0x3be8cf(0x95d)]();_0x50c9fe&&_0x3c2206['WaitForExit']&&_0x50c9fe['setWaitMode'](_0x3be8cf(0x2b9));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],'ActSeq_Cutin_EndVisualCutinEffectType',_0x1a1cc0=>{const _0x5ab5ca=_0x444cf3;if(!SceneManager[_0x5ab5ca(0xa7a)]())return;if(!Imported[_0x5ab5ca(0x263)])return;VisuMZ[_0x5ab5ca(0xab1)](_0x1a1cc0,_0x1a1cc0);const _0x5a0a29=_0x1a1cc0['type'][_0x5ab5ca(0x1fd)]()[_0x5ab5ca(0x78c)]();SceneManager[_0x5ab5ca(0xa67)]['endVisualCutin'](_0x5a0a29);const _0x3b66ed=$gameTemp['getLastPluginCommandInterpreter']();_0x3b66ed&&_0x1a1cc0[_0x5ab5ca(0x9ae)]&&_0x3b66ed['setWaitMode'](_0x5ab5ca(0x2b9));}),PluginManager['registerCommand'](pluginData['name'],_0x444cf3(0x4e7),_0x5a735e=>{const _0x54004b=_0x444cf3;if(!SceneManager[_0x54004b(0xa7a)]())return;if(!Imported[_0x54004b(0x263)])return;const _0xb42215=$gameTemp[_0x54004b(0x95d)]();_0xb42215[_0x54004b(0x36d)](_0x54004b(0x7f5));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x6f1),_0xc7c93c=>{const _0x1ddb82=_0x444cf3;if(!SceneManager[_0x1ddb82(0xa7a)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x528ad2=$gameTemp[_0x1ddb82(0x95d)]();_0x528ad2[_0x1ddb82(0x36d)](_0x1ddb82(0x2b9));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0xb0a),_0xc20852=>{const _0xcb6189=_0x444cf3;if(!SceneManager[_0xcb6189(0xa7a)]())return;if(!Imported[_0xcb6189(0x20b)])return;VisuMZ[_0xcb6189(0xab1)](_0xc20852,_0xc20852);const _0x1eed66=VisuMZ[_0xcb6189(0x746)](_0xc20852['Targets']),_0x2e2be8=_0xc20852['MotionAni'][_0xcb6189(0x1fd)]()[_0xcb6189(0x78c)]();for(const _0x476529 of _0x1eed66){if(!_0x476529)continue;_0x476529[_0xcb6189(0xaf4)](_0x2e2be8);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x9d3),_0x9a5bea=>{const _0x33c97b=_0x444cf3;if(!SceneManager[_0x33c97b(0xa7a)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x33c97b(0xab1)](_0x9a5bea,_0x9a5bea);const _0x46bc72=VisuMZ[_0x33c97b(0x746)](_0x9a5bea[_0x33c97b(0x9fe)]),_0xa8758=_0x9a5bea[_0x33c97b(0x2ec)];for(const _0x3a25ab of _0x46bc72){if(!_0x3a25ab)continue;_0x3a25ab[_0x33c97b(0x85e)]()[_0x33c97b(0x500)]=_0xa8758;}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0xa1f),_0x39d23a=>{const _0xc704b8=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0xc704b8(0xab1)](_0x39d23a,_0x39d23a);const _0xdaaf97=BattleManager['_action'],_0x42b6f9=_0x39d23a[_0xc704b8(0x2f1)];if(!_0xdaaf97)return;_0xdaaf97['_battleCoreAddedElements']=_0x42b6f9;}),PluginManager['registerCommand'](pluginData['name'],_0x444cf3(0x761),_0x27d676=>{const _0x3c8cef=_0x444cf3;if(!SceneManager[_0x3c8cef(0xa7a)]())return;if(!Imported[_0x3c8cef(0x220)])return;const _0xe0491d=BattleManager[_0x3c8cef(0xac1)];if(!_0xe0491d)return;_0xe0491d[_0x3c8cef(0x54e)]();}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x9e0),_0x11c678=>{const _0x239271=_0x444cf3;if(!SceneManager[_0x239271(0xa7a)]())return;if(!Imported[_0x239271(0x220)])return;VisuMZ[_0x239271(0xab1)](_0x11c678,_0x11c678);const _0x50712d=BattleManager[_0x239271(0xac1)],_0x33cbc1=_0x11c678[_0x239271(0x2f1)];if(!_0x50712d)return;_0x50712d[_0x239271(0x460)]=_0x33cbc1;}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x80a),_0x20233e=>{const _0x38c6f8=_0x444cf3;if(!SceneManager[_0x38c6f8(0xa7a)]())return;if(!Imported[_0x38c6f8(0x220)])return;const _0x9ad78d=BattleManager[_0x38c6f8(0xac1)];if(!_0x9ad78d)return;_0x9ad78d['_battleCoreNoElement']=!![];}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x2a2),_0x14ce4c=>{const _0x1a016e=_0x444cf3;if(!Imported[_0x1a016e(0xa2e)])return;if(!SceneManager[_0x1a016e(0xa7a)]())return;VisuMZ[_0x1a016e(0xab1)](_0x14ce4c,_0x14ce4c);const _0x41e2fa=VisuMZ[_0x1a016e(0x746)](_0x14ce4c[_0x1a016e(0x9fe)]);for(const _0x48200f of _0x41e2fa){if(!_0x48200f)continue;_0x48200f[_0x1a016e(0x546)](_0x1a016e(0x792)),_0x48200f[_0x1a016e(0x546)]('glitch'),_0x48200f['removeHorrorEffect']('tv'),_0x48200f[_0x1a016e(0x367)]();}$gamePlayer[_0x1a016e(0x60e)]();}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Horror_GlitchCreate',_0x428655=>{const _0x568629=_0x444cf3;if(!Imported[_0x568629(0xa2e)])return;if(!SceneManager[_0x568629(0xa7a)]())return;VisuMZ[_0x568629(0xab1)](_0x428655,_0x428655);const _0x15c4b1=VisuMZ[_0x568629(0x746)](_0x428655[_0x568629(0x9fe)]),_0x2c362a=_0x568629(0x6e5);_0x428655[_0x568629(0x462)]=Math['ceil'](_0x428655['slices']/0x2),_0x428655[_0x568629(0x33f)]=_0x428655[_0x568629(0x9f0)],_0x428655[_0x568629(0x777)]=!![];for(const _0x47dc71 of _0x15c4b1){if(!_0x47dc71)continue;_0x47dc71[_0x568629(0x49c)](_0x2c362a,_0x428655);}$gamePlayer['refresh']();}),PluginManager[_0x444cf3(0x292)](pluginData['name'],'ActSeq_Horror_GlitchRemove',_0x38aa6c=>{const _0x100ee5=_0x444cf3;if(!Imported[_0x100ee5(0xa2e)])return;if(!SceneManager[_0x100ee5(0xa7a)]())return;VisuMZ[_0x100ee5(0xab1)](_0x38aa6c,_0x38aa6c);const _0x5094eb=VisuMZ[_0x100ee5(0x746)](_0x38aa6c[_0x100ee5(0x9fe)]);for(const _0x2b8a5e of _0x5094eb){if(!_0x2b8a5e)continue;_0x2b8a5e[_0x100ee5(0x546)](_0x100ee5(0x6e5));}$gamePlayer[_0x100ee5(0x60e)]();}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0xac7),_0x27ee0e=>{const _0x7fa003=_0x444cf3;if(!Imported[_0x7fa003(0xa2e)])return;if(!SceneManager[_0x7fa003(0xa7a)]())return;VisuMZ[_0x7fa003(0xab1)](_0x27ee0e,_0x27ee0e);const _0x11595e=VisuMZ[_0x7fa003(0x746)](_0x27ee0e['Targets']),_0x739751='noise';for(const _0x2bba24 of _0x11595e){if(!_0x2bba24)continue;_0x2bba24['setHorrorEffectSettings'](_0x739751,_0x27ee0e);}$gamePlayer[_0x7fa003(0x60e)]();}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x336),_0x2b4bdb=>{const _0x2ce2a1=_0x444cf3;if(!Imported[_0x2ce2a1(0xa2e)])return;if(!SceneManager[_0x2ce2a1(0xa7a)]())return;VisuMZ['ConvertParams'](_0x2b4bdb,_0x2b4bdb);const _0x2ed669=VisuMZ['CreateActionSequenceTargets'](_0x2b4bdb[_0x2ce2a1(0x9fe)]);for(const _0x414278 of _0x2ed669){if(!_0x414278)continue;_0x414278[_0x2ce2a1(0x546)](_0x2ce2a1(0x792));}$gamePlayer[_0x2ce2a1(0x60e)]();}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x93d),_0x44ac47=>{const _0x318900=_0x444cf3;if(!Imported[_0x318900(0xa2e)])return;if(!SceneManager[_0x318900(0xa7a)]())return;VisuMZ['ConvertParams'](_0x44ac47,_0x44ac47);const _0x562761=VisuMZ[_0x318900(0x746)](_0x44ac47['Targets']),_0xc7ed06='tv';for(const _0x553d85 of _0x562761){if(!_0x553d85)continue;_0x553d85['setHorrorEffectSettings'](_0xc7ed06,_0x44ac47);}$gamePlayer['refresh']();}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x3f2),_0x80a6d9=>{const _0x3c15c0=_0x444cf3;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3c15c0(0xab1)](_0x80a6d9,_0x80a6d9);const _0x153389=VisuMZ['CreateActionSequenceTargets'](_0x80a6d9[_0x3c15c0(0x9fe)]);for(const _0xa8223a of _0x153389){if(!_0xa8223a)continue;_0xa8223a[_0x3c15c0(0x546)]('tv');}$gamePlayer[_0x3c15c0(0x60e)]();}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x8fa),_0x3307d0=>{const _0x12dcd3=_0x444cf3;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x45e4bd=SceneManager[_0x12dcd3(0xa67)][_0x12dcd3(0x9f5)];if(!_0x45e4bd)return;if(VisuMZ['ActSeqImpact'][_0x12dcd3(0x95c)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x12dcd3(0x431)]();return;}VisuMZ[_0x12dcd3(0xab1)](_0x3307d0,_0x3307d0);const _0x70ccbe=_0x3307d0[_0x12dcd3(0x5fa)];_0x45e4bd[_0x12dcd3(0xa82)](_0x70ccbe);}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x529),_0x3afe97=>{const _0x4ebcd0=_0x444cf3;if(!SceneManager[_0x4ebcd0(0xa7a)]())return;if(!Imported[_0x4ebcd0(0x5df)])return;const _0x8da97a=SceneManager[_0x4ebcd0(0xa67)][_0x4ebcd0(0x9f5)];if(!_0x8da97a)return;VisuMZ[_0x4ebcd0(0xab1)](_0x3afe97,_0x3afe97);const _0x4922fe=_0x3afe97[_0x4ebcd0(0x8cb)]||0x1,_0x5a2f8a=_0x3afe97['Duration']||0x1,_0x5f1711=_0x3afe97['EasingType']||_0x4ebcd0(0xafa);_0x8da97a[_0x4ebcd0(0x6f3)](_0x4922fe,_0x5a2f8a,_0x5f1711);}),PluginManager[_0x444cf3(0x292)](pluginData['name'],'ActSeq_Impact_Desaturate',_0x57a1b0=>{const _0xf9edfb=_0x444cf3;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x493c77=SceneManager[_0xf9edfb(0xa67)][_0xf9edfb(0x9f5)];if(!_0x493c77)return;if(VisuMZ['ActSeqImpact'][_0xf9edfb(0x95c)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0xf9edfb(0x431)]();return;}VisuMZ[_0xf9edfb(0xab1)](_0x57a1b0,_0x57a1b0);const _0x18da25=_0x57a1b0[_0xf9edfb(0x5fa)];_0x493c77[_0xf9edfb(0x58a)](_0x18da25);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x505),_0x5ac116=>{const _0x3f8c65=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3f8c65(0x5df)])return;const _0x1b0d64=SceneManager[_0x3f8c65(0xa67)][_0x3f8c65(0x9f5)];if(!_0x1b0d64)return;VisuMZ[_0x3f8c65(0xab1)](_0x5ac116,_0x5ac116);const _0x453dbd=Number(_0x5ac116[_0x3f8c65(0x46c)])||0x0,_0x29cef7=Number(_0x5ac116[_0x3f8c65(0x2f6)]),_0x46a95b=_0x5ac116[_0x3f8c65(0x6f8)]||0x1,_0x542734=_0x5ac116['EasingType']||_0x3f8c65(0xafa);_0x1b0d64[_0x3f8c65(0x6e3)](_0x453dbd,_0x29cef7,_0x46a95b,_0x542734);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x48f),_0x3321b2=>{const _0x2f153c=_0x444cf3;if(!SceneManager[_0x2f153c(0xa7a)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x247f02=SceneManager['_scene'][_0x2f153c(0x9f5)];if(!_0x247f02)return;VisuMZ[_0x2f153c(0xab1)](_0x3321b2,_0x3321b2);const _0x34a997=Number(_0x3321b2['Angle'])||0x0,_0x9295be=Number(_0x3321b2[_0x2f153c(0x2f6)]),_0x130c6e=_0x3321b2[_0x2f153c(0x6f8)]||0x1,_0x13233a=_0x3321b2[_0x2f153c(0x1cc)]||_0x2f153c(0xafa),_0x1644aa=VisuMZ[_0x2f153c(0x746)](_0x3321b2[_0x2f153c(0x9fe)]);for(const _0xab0208 of _0x1644aa){if(!_0xab0208)continue;if(!_0xab0208['battler']())continue;_0xab0208[_0x2f153c(0x516)]()['setupMotionBlurImpactFilter'](_0x34a997,_0x9295be,_0x130c6e,_0x13233a);}}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x585),_0x493dfa=>{const _0x5a5f06=_0x444cf3;if(!SceneManager[_0x5a5f06(0xa7a)]())return;if(!Imported[_0x5a5f06(0x5df)])return;VisuMZ[_0x5a5f06(0xab1)](_0x493dfa,_0x493dfa);const _0x3f7072={'delay':_0x493dfa[_0x5a5f06(0x576)],'duration':_0x493dfa['duration'],'hue':_0x493dfa[_0x5a5f06(0x6a0)],'opacityStart':_0x493dfa['opacityStart'],'tone':_0x493dfa['tone'],'visible':!![]},_0x4da1ed=VisuMZ['CreateActionSequenceTargets'](_0x493dfa['Targets']);for(const _0x585a11 of _0x4da1ed){if(!_0x585a11)continue;_0x585a11[_0x5a5f06(0x959)](_0x3f7072);}}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x20a),_0x2ad4c0=>{const _0x59a4b1=_0x444cf3;if(!SceneManager[_0x59a4b1(0xa7a)]())return;if(!Imported[_0x59a4b1(0x5df)])return;VisuMZ[_0x59a4b1(0xab1)](_0x2ad4c0,_0x2ad4c0);const _0x19aa8d=VisuMZ[_0x59a4b1(0x746)](_0x2ad4c0[_0x59a4b1(0x9fe)]);for(const _0x4063c6 of _0x19aa8d){if(!_0x4063c6)continue;_0x4063c6['clearBattlerMotionTrailData']();}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x4f6),_0x2c2c9b=>{const _0x3e9b49=_0x444cf3;if(!Imported[_0x3e9b49(0x5df)])return;const _0x3221b3=SceneManager['_scene'][_0x3e9b49(0x9f5)];if(!_0x3221b3)return;if(VisuMZ[_0x3e9b49(0x9b1)]['version']<=1.04){alert(_0x3e9b49(0x72a)),SceneManager[_0x3e9b49(0x431)]();return;}VisuMZ[_0x3e9b49(0xab1)](_0x2c2c9b,_0x2c2c9b);const _0x38127=_0x2c2c9b[_0x3e9b49(0x5fa)];_0x3221b3['setupNegativeImpactFilter'](_0x38127);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x453),_0x88a13e=>{const _0x5a8bbf=_0x444cf3;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x38938d=SceneManager['_scene']['_spriteset'];if(!_0x38938d)return;if(VisuMZ[_0x5a8bbf(0x9b1)][_0x5a8bbf(0x95c)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x5a8bbf(0x431)]();return;}VisuMZ[_0x5a8bbf(0xab1)](_0x88a13e,_0x88a13e);const _0x431b99=_0x88a13e[_0x5a8bbf(0x5fa)];_0x38938d[_0x5a8bbf(0x67b)](_0x431b99);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Impact_ShockwavePoint',_0x5a0569=>{const _0x58d995=_0x444cf3;if(!Imported[_0x58d995(0x5df)])return;const _0x89ac44=SceneManager[_0x58d995(0xa67)][_0x58d995(0x9f5)];if(!_0x89ac44)return;VisuMZ[_0x58d995(0xab1)](_0x5a0569,_0x5a0569);const _0x4ce861=_0x5a0569['X']||0x0,_0x354ae2=_0x5a0569['Y']||0x0,_0x11cb99=_0x5a0569['Amp']||0x0,_0x36ed14=_0x5a0569[_0x58d995(0x947)]||0x0,_0x29366a=_0x5a0569[_0x58d995(0x6f8)]||0x1;_0x89ac44[_0x58d995(0x81d)](_0x4ce861,_0x354ae2,_0x11cb99,_0x36ed14,_0x29366a);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Impact_ShockwaveEachTargets',_0x2b6fe5=>{const _0x45a2b4=_0x444cf3;if(!SceneManager[_0x45a2b4(0xa7a)]())return;if(!Imported[_0x45a2b4(0x5df)])return;const _0x42dc82=SceneManager['_scene']['_spriteset'];if(!_0x42dc82)return;VisuMZ[_0x45a2b4(0xab1)](_0x2b6fe5,_0x2b6fe5);const _0x192868=VisuMZ[_0x45a2b4(0x746)](_0x2b6fe5['Targets']),_0x1cf039=_0x2b6fe5[_0x45a2b4(0x967)],_0x1f5bc0=_0x2b6fe5['OffsetX']||0x0,_0xe9fa7b=_0x2b6fe5['OffsetY']||0x0,_0x2b52b1=_0x2b6fe5[_0x45a2b4(0x1de)]||0x0,_0x4e6e2f=_0x2b6fe5[_0x45a2b4(0x947)]||0x0,_0x1ad780=_0x2b6fe5[_0x45a2b4(0x6f8)]||0x1;for(const _0x6378d6 of _0x192868){if(!_0x6378d6)continue;if(!_0x6378d6[_0x45a2b4(0x516)]())continue;const _0x1e44c5=_0x6378d6[_0x45a2b4(0x516)]();let _0x501581=_0x1e44c5[_0x45a2b4(0x3d2)],_0x46f90f=_0x1e44c5[_0x45a2b4(0x801)];_0x501581+=(Graphics[_0x45a2b4(0x851)]-Graphics[_0x45a2b4(0x902)])/0x2,_0x46f90f+=(Graphics[_0x45a2b4(0x661)]-Graphics[_0x45a2b4(0x358)])/0x2;if(_0x1cf039[_0x45a2b4(0x6b8)](/front/i))_0x501581+=(_0x6378d6[_0x45a2b4(0x36e)]()?0x1:-0x1)*_0x1e44c5[_0x45a2b4(0x817)]()/0x2;else _0x1cf039['match'](/back/i)&&(_0x501581+=(_0x6378d6['isEnemy']()?-0x1:0x1)*_0x1e44c5['mainSpriteWidth']()/0x2);if(_0x1cf039[_0x45a2b4(0x6b8)](/head/i))_0x46f90f-=_0x1e44c5[_0x45a2b4(0x6bc)]();else _0x1cf039[_0x45a2b4(0x6b8)](/center/i)&&(_0x46f90f-=_0x1e44c5[_0x45a2b4(0x6bc)]()/0x2);_0x501581+=_0x1f5bc0,_0x46f90f+=_0xe9fa7b,_0x42dc82['setupShockwaveImpactFilter'](_0x501581,_0x46f90f,_0x2b52b1,_0x4e6e2f,_0x1ad780);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x41c),_0x15a9a6=>{const _0x35864f=_0x444cf3;if(!SceneManager[_0x35864f(0xa7a)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1f52e7=SceneManager[_0x35864f(0xa67)][_0x35864f(0x9f5)];if(!_0x1f52e7)return;VisuMZ[_0x35864f(0xab1)](_0x15a9a6,_0x15a9a6);const _0x24f034=VisuMZ[_0x35864f(0x746)](_0x15a9a6[_0x35864f(0x9fe)]),_0x46c037=_0x15a9a6[_0x35864f(0x967)],_0x101c88=_0x15a9a6[_0x35864f(0x236)]||0x0,_0x34c2c3=_0x15a9a6[_0x35864f(0xad3)]||0x0,_0x4be21a=_0x15a9a6['Amp']||0x0,_0x10cc7c=_0x15a9a6[_0x35864f(0x947)]||0x0,_0x582e3b=_0x15a9a6['Duration']||0x1,_0x493340=Math[_0x35864f(0x349)](..._0x24f034['map'](_0xae9bcd=>_0xae9bcd[_0x35864f(0x516)]()[_0x35864f(0x3d2)]-_0xae9bcd[_0x35864f(0x516)]()[_0x35864f(0x817)]()/0x2)),_0x47cec9=Math[_0x35864f(0x642)](..._0x24f034['map'](_0x3b8f3f=>_0x3b8f3f[_0x35864f(0x516)]()[_0x35864f(0x3d2)]+_0x3b8f3f[_0x35864f(0x516)]()['mainSpriteWidth']()/0x2)),_0x561b74=Math['min'](..._0x24f034[_0x35864f(0x7f8)](_0x1519b2=>_0x1519b2[_0x35864f(0x516)]()[_0x35864f(0x801)]-_0x1519b2[_0x35864f(0x516)]()[_0x35864f(0x6bc)]())),_0x5ebc13=Math['max'](..._0x24f034[_0x35864f(0x7f8)](_0x3e3feb=>_0x3e3feb[_0x35864f(0x516)]()['_baseY'])),_0x3e5f5b=_0x24f034['filter'](_0x4f910a=>_0x4f910a[_0x35864f(0xa93)]())[_0x35864f(0xa40)],_0x4fe925=_0x24f034[_0x35864f(0x4d3)](_0x1e1208=>_0x1e1208[_0x35864f(0x36e)]())[_0x35864f(0xa40)];let _0x1db970=0x0,_0x3a907e=0x0;if(_0x46c037[_0x35864f(0x6b8)](/front/i))_0x1db970=_0x3e5f5b>=_0x4fe925?_0x493340:_0x47cec9;else{if(_0x46c037[_0x35864f(0x6b8)](/middle/i))_0x1db970=(_0x493340+_0x47cec9)/0x2,melee=-0x1;else _0x46c037['match'](/back/i)&&(_0x1db970=_0x3e5f5b>=_0x4fe925?_0x47cec9:_0x493340);}if(_0x46c037['match'](/head/i))_0x3a907e=_0x561b74;else{if(_0x46c037[_0x35864f(0x6b8)](/center/i))_0x3a907e=(_0x561b74+_0x5ebc13)/0x2;else _0x46c037[_0x35864f(0x6b8)](/base/i)&&(_0x3a907e=_0x5ebc13);}_0x1db970+=(Graphics[_0x35864f(0x851)]-Graphics[_0x35864f(0x902)])/0x2,_0x3a907e+=(Graphics[_0x35864f(0x661)]-Graphics[_0x35864f(0x358)])/0x2,_0x1db970+=_0x101c88,_0x3a907e+=_0x34c2c3,_0x1f52e7['setupShockwaveImpactFilter'](_0x1db970,_0x3a907e,_0x4be21a,_0x10cc7c,_0x582e3b);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0xa06),_0x3b5bf1=>{const _0x2b774e=_0x444cf3;if(!Imported[_0x2b774e(0x5df)])return;const _0x106d7f=SceneManager['_scene'][_0x2b774e(0x9f5)];if(!_0x106d7f)return;if(VisuMZ[_0x2b774e(0x9b1)][_0x2b774e(0x95c)]<=1.04){alert(_0x2b774e(0x72a)),SceneManager[_0x2b774e(0x431)]();return;}VisuMZ[_0x2b774e(0xab1)](_0x3b5bf1,_0x3b5bf1);const _0x5b796b=$gameTemp['getLastPluginCommandInterpreter'](),_0x151953=Math[_0x2b774e(0x642)](0.01,_0x3b5bf1['Scale']);$gameTemp[_0x2b774e(0x755)](_0x151953,_0x5b796b);}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Impact_TimeStop',_0x49b795=>{const _0x87daa5=_0x444cf3;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2ee04b=SceneManager[_0x87daa5(0xa67)]['_spriteset'];if(!_0x2ee04b)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x87daa5(0x431)]();return;}VisuMZ['ConvertParams'](_0x49b795,_0x49b795);const _0x193821=$gameTemp[_0x87daa5(0x95d)](),_0x7072c3=_0x49b795['ms']||0x1;VisuMZ['ActSeqImpact']['freezeTime'](_0x7072c3,_0x193821);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Impact_ZoomBlurPoint',_0x46fe4c=>{const _0x4545e2=_0x444cf3;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3633d9=SceneManager[_0x4545e2(0xa67)][_0x4545e2(0x9f5)];if(!_0x3633d9)return;VisuMZ[_0x4545e2(0xab1)](_0x46fe4c,_0x46fe4c);const _0x8f1811=_0x46fe4c['X']||0x0,_0xe7dcb6=_0x46fe4c['Y']||0x0,_0x4e9481=_0x46fe4c[_0x4545e2(0x208)]||0x0,_0x345bcf=_0x46fe4c[_0x4545e2(0xaa7)]||0x0,_0x557d93=_0x46fe4c['Duration']||0x1,_0x46af69=_0x46fe4c[_0x4545e2(0x1cc)]||_0x4545e2(0xafa);_0x3633d9[_0x4545e2(0x594)](_0x4e9481,_0x8f1811,_0xe7dcb6,_0x345bcf,_0x557d93,_0x46af69);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x399),_0x3a90d4=>{const _0x17567d=_0x444cf3;if(!Imported[_0x17567d(0x5df)])return;const _0x3e5c62=SceneManager[_0x17567d(0xa67)]['_spriteset'];if(!_0x3e5c62)return;VisuMZ[_0x17567d(0xab1)](_0x3a90d4,_0x3a90d4);const _0x348b1e=VisuMZ[_0x17567d(0x746)](_0x3a90d4[_0x17567d(0x9fe)]),_0x18ef21=_0x3a90d4['TargetLocation'],_0x41a70f=_0x3a90d4['OffsetX']||0x0,_0x11d5ef=_0x3a90d4[_0x17567d(0xad3)]||0x0,_0x3118cc=_0x3a90d4[_0x17567d(0x208)]||0x0,_0x4cc8b5=_0x3a90d4[_0x17567d(0xaa7)]||0x0,_0xfb6481=_0x3a90d4[_0x17567d(0x6f8)]||0x1,_0xc9b842=_0x3a90d4[_0x17567d(0x1cc)]||'Linear',_0x340500=Math[_0x17567d(0x349)](..._0x348b1e[_0x17567d(0x7f8)](_0x437c09=>_0x437c09[_0x17567d(0x516)]()[_0x17567d(0x3d2)]-_0x437c09[_0x17567d(0x516)]()['mainSpriteWidth']()/0x2)),_0x2b24e7=Math[_0x17567d(0x642)](..._0x348b1e[_0x17567d(0x7f8)](_0x1b60e2=>_0x1b60e2[_0x17567d(0x516)]()[_0x17567d(0x3d2)]+_0x1b60e2[_0x17567d(0x516)]()['mainSpriteWidth']()/0x2)),_0x41921b=Math['min'](..._0x348b1e[_0x17567d(0x7f8)](_0x496e94=>_0x496e94[_0x17567d(0x516)]()['_baseY']-_0x496e94[_0x17567d(0x516)]()[_0x17567d(0x6bc)]())),_0x536be4=Math['max'](..._0x348b1e[_0x17567d(0x7f8)](_0x31e136=>_0x31e136[_0x17567d(0x516)]()[_0x17567d(0x801)])),_0x3d0cc4=_0x348b1e[_0x17567d(0x4d3)](_0x26c13e=>_0x26c13e[_0x17567d(0xa93)]())[_0x17567d(0xa40)],_0x3f16e2=_0x348b1e[_0x17567d(0x4d3)](_0x3a37f6=>_0x3a37f6[_0x17567d(0x36e)]())[_0x17567d(0xa40)];let _0x197c52=0x0,_0x13b8fd=0x0;if(_0x18ef21['match'](/front/i))_0x197c52=_0x3d0cc4>=_0x3f16e2?_0x340500:_0x2b24e7;else{if(_0x18ef21[_0x17567d(0x6b8)](/middle/i))_0x197c52=(_0x340500+_0x2b24e7)/0x2,melee=-0x1;else _0x18ef21['match'](/back/i)&&(_0x197c52=_0x3d0cc4>=_0x3f16e2?_0x2b24e7:_0x340500);}if(_0x18ef21[_0x17567d(0x6b8)](/head/i))_0x13b8fd=_0x41921b;else{if(_0x18ef21[_0x17567d(0x6b8)](/center/i))_0x13b8fd=(_0x41921b+_0x536be4)/0x2;else _0x18ef21['match'](/base/i)&&(_0x13b8fd=_0x536be4);}_0x197c52+=(Graphics['width']-Graphics[_0x17567d(0x902)])/0x2,_0x13b8fd+=(Graphics[_0x17567d(0x661)]-Graphics[_0x17567d(0x358)])/0x2,_0x197c52+=_0x41a70f,_0x13b8fd+=_0x11d5ef,_0x3e5c62['setupZoomBlurImpactFilter'](_0x3118cc,_0x197c52,_0x13b8fd,_0x4cc8b5,_0xfb6481,_0xc9b842);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Inject_AnimationStart',_0x22ef76=>{const _0x3a579d=_0x444cf3;if(!Imported[_0x3a579d(0x5df)])return;const _0x8358e0=SceneManager[_0x3a579d(0xa67)][_0x3a579d(0x9f5)];if(!_0x8358e0)return;if(VisuMZ[_0x3a579d(0x9b1)][_0x3a579d(0x95c)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x3a579d(0x431)]();return;}VisuMZ[_0x3a579d(0xab1)](_0x22ef76,_0x22ef76);const _0x550be1=VisuMZ['CreateActionSequenceTargets'](_0x22ef76[_0x3a579d(0x9fe)]),_0x514995={'filename':_0x22ef76[_0x3a579d(0x871)],'horzCells':_0x22ef76[_0x3a579d(0x56d)]||0x1,'vertCells':_0x22ef76[_0x3a579d(0x963)]||0x1,'frameDelay':_0x22ef76[_0x3a579d(0x9fd)]||0x1,'smooth':_0x22ef76[_0x3a579d(0x9dd)]||![],'anchorX':_0x22ef76[_0x3a579d(0x549)]||0x0,'anchorY':_0x22ef76['anchorY']||0x0,'offsetX':_0x22ef76[_0x3a579d(0x506)]||0x0,'offsetY':_0x22ef76[_0x3a579d(0x47f)]||0x0};for(const _0x16dcf1 of _0x550be1){if(!_0x16dcf1)continue;if(!_0x16dcf1[_0x3a579d(0x516)]())continue;_0x16dcf1[_0x3a579d(0x516)]()[_0x3a579d(0x6c4)](_0x514995);}const _0x7124f8=$gameTemp[_0x3a579d(0x95d)]();_0x7124f8&&_0x7124f8[_0x3a579d(0x36d)]('battleInjectPrep');}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0xafd),_0x3a178c=>{const _0x498410=_0x444cf3;if(!Imported[_0x498410(0x5df)])return;const _0x130bb4=SceneManager[_0x498410(0xa67)][_0x498410(0x9f5)];if(!_0x130bb4)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){alert(_0x498410(0x72a)),SceneManager[_0x498410(0x431)]();return;}VisuMZ['ConvertParams'](_0x3a178c,_0x3a178c);const _0x3bdbc7=VisuMZ['CreateActionSequenceTargets'](_0x3a178c[_0x498410(0x9fe)]);for(const _0xfbe88d of _0x3bdbc7){if(!_0xfbe88d)continue;if(!_0xfbe88d['battler']())continue;_0xfbe88d['battler']()[_0x498410(0x468)]();}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Inject_AnimationPauseResume',_0x54b42a=>{const _0x5c2319=_0x444cf3;if(!Imported[_0x5c2319(0x5df)])return;const _0x47ade4=SceneManager[_0x5c2319(0xa67)][_0x5c2319(0x9f5)];if(!_0x47ade4)return;if(VisuMZ[_0x5c2319(0x9b1)][_0x5c2319(0x95c)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x5c2319(0xab1)](_0x54b42a,_0x54b42a);const _0x593c12=VisuMZ[_0x5c2319(0x746)](_0x54b42a['Targets']),_0x2d760b=_0x54b42a[_0x5c2319(0x716)];for(const _0x2476b2 of _0x593c12){if(!_0x2476b2)continue;if(!_0x2476b2[_0x5c2319(0x516)]())continue;_0x2476b2[_0x5c2319(0x516)]()[_0x5c2319(0x265)](_0x2d760b);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x71b),_0x4cf8bf=>{const _0x57ccef=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x3645b0=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3645b0)return;_0x3645b0[_0x57ccef(0x36d)](_0x57ccef(0x63a));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x2dd),_0xa762f0=>{const _0x3a48bc=_0x444cf3;if(!SceneManager[_0x3a48bc(0xa7a)]())return;VisuMZ[_0x3a48bc(0xab1)](_0xa762f0,_0xa762f0);const _0x3a2dcd=$gameTemp[_0x3a48bc(0x95d)](),_0x593bf6=BattleManager['_action'],_0xe67236=BattleManager[_0x3a48bc(0x55d)],_0x4df033=BattleManager[_0x3a48bc(0x1e6)];if(!_0x3a2dcd||!_0x593bf6||!_0xe67236)return;if(!_0x593bf6[_0x3a48bc(0x39a)]())return;const _0x289537=VisuMZ['CreateActionSequenceTargets'](_0xa762f0[_0x3a48bc(0x9fe)]);for(const _0x53ea53 of _0x289537){if(!_0x53ea53)continue;_0x4df033[_0x3a48bc(0x87e)](_0x3a48bc(0x876),_0xe67236,_0x53ea53);}_0x3a2dcd['setWaitMode'](_0x3a48bc(0x357));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x770),_0x50d14e=>{const _0x1aaead=_0x444cf3;if(!SceneManager[_0x1aaead(0xa7a)]())return;if(!Imported[_0x1aaead(0x5c6)])return;$gameTemp[_0x1aaead(0x551)]=!![];}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_AddBuffDebuff',_0x542ff6=>{const _0x1a502e=_0x444cf3;if(!SceneManager[_0x1a502e(0xa7a)]())return;VisuMZ[_0x1a502e(0xab1)](_0x542ff6,_0x542ff6);const _0x479a12=[_0x1a502e(0x3ae),_0x1a502e(0x3df),_0x1a502e(0x3d3),'DEF',_0x1a502e(0x2c1),_0x1a502e(0xb23),_0x1a502e(0x352),_0x1a502e(0x38c)],_0x155565=_0x542ff6[_0x1a502e(0x74b)],_0x53a1f3=_0x542ff6[_0x1a502e(0x4a5)],_0x403414=_0x542ff6[_0x1a502e(0x29d)],_0x1ce46c=VisuMZ[_0x1a502e(0x746)](_0x542ff6['Targets']);for(const _0x1ad26e of _0x1ce46c){if(!_0x1ad26e)continue;for(const _0x851226 of _0x155565){const _0x4b7e1d=_0x479a12[_0x1a502e(0x2c5)](_0x851226[_0x1a502e(0x839)]()[_0x1a502e(0x78c)]());_0x4b7e1d>=0x0&&_0x4b7e1d<=0x7&&_0x1ad26e[_0x1a502e(0x76c)](_0x4b7e1d,_0x403414);}for(const _0x1ff08d of _0x53a1f3){const _0x3e6774=_0x479a12[_0x1a502e(0x2c5)](_0x1ff08d['toUpperCase']()['trim']());_0x3e6774>=0x0&&_0x3e6774<=0x7&&_0x1ad26e[_0x1a502e(0x827)](_0x3e6774,_0x403414);}}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x49a),_0x4508fb=>{const _0x5d56ae=_0x444cf3;if(!SceneManager[_0x5d56ae(0xa7a)]())return;VisuMZ[_0x5d56ae(0xab1)](_0x4508fb,_0x4508fb);const _0x5d19f8=_0x4508fb[_0x5d56ae(0x8a0)],_0x14f999=VisuMZ[_0x5d56ae(0x746)](_0x4508fb[_0x5d56ae(0x9fe)]);for(const _0x2dc09f of _0x14f999){if(!_0x2dc09f)continue;for(const _0x54f309 of _0x5d19f8){_0x2dc09f[_0x5d56ae(0x287)](_0x54f309);}}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_ArmorPenetration',_0x144a56=>{const _0xd18ada=_0x444cf3;if(!SceneManager[_0xd18ada(0xa7a)]())return;VisuMZ[_0xd18ada(0xab1)](_0x144a56,_0x144a56);const _0x1923c7=BattleManager[_0xd18ada(0xac1)],_0x541edd={'arPenRate':_0x144a56[_0xd18ada(0x88a)],'arPenFlat':_0x144a56[_0xd18ada(0x977)],'arRedRate':_0x144a56[_0xd18ada(0x996)],'arRedFlat':_0x144a56[_0xd18ada(0x983)]};_0x1923c7[_0xd18ada(0x38b)]=_0x541edd;}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_AnalyzeWeakness',_0xbd6291=>{const _0x7734=_0x444cf3;if(!SceneManager[_0x7734(0xa7a)]())return;if(!Imported[_0x7734(0xa88)])return;VisuMZ[_0x7734(0xab1)](_0xbd6291,_0xbd6291);const _0x31aa73=VisuMZ['CreateActionSequenceTargets'](_0xbd6291[_0x7734(0x9fe)]),_0x3b02de=_0xbd6291[_0x7734(0x262)]||0x1;for(const _0x1a2474 of _0x31aa73){if(!_0x1a2474)continue;if(!_0x1a2474[_0x7734(0x36e)]())continue;_0x1a2474['revealNewWeaknesses'](_0x3b02de);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x528),_0xc21740=>{const _0x7abaf8=_0x444cf3;if(!SceneManager[_0x7abaf8(0xa7a)]())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager['isATB']())return;VisuMZ['ConvertParams'](_0xc21740,_0xc21740);const _0x26a5fc=VisuMZ[_0x7abaf8(0x746)](_0xc21740['Targets']),_0x15a477=_0xc21740['ChargeRate'],_0x3dbc8a=_0xc21740[_0x7abaf8(0x7d9)],_0x452153=_0xc21740[_0x7abaf8(0x57e)];for(const _0x2cb290 of _0x26a5fc){if(!_0x2cb290)continue;if(_0x2cb290[_0x7abaf8(0x861)]())_0x2cb290[_0x7abaf8(0x31e)](_0x15a477);else{if(_0x2cb290[_0x7abaf8(0x36f)]()){_0x2cb290[_0x7abaf8(0x743)](_0x3dbc8a);if(_0x452153)_0x2cb290[_0x7abaf8(0x3b7)]();}}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_BoostPointsChange',_0x2e4f91=>{const _0x2cedde=_0x444cf3;if(!SceneManager[_0x2cedde(0xa7a)]())return;if(!Imported[_0x2cedde(0x43f)])return;VisuMZ[_0x2cedde(0xab1)](_0x2e4f91,_0x2e4f91);const _0x4f82e5=VisuMZ[_0x2cedde(0x746)](_0x2e4f91[_0x2cedde(0x9fe)]),_0x1d0dde=_0x2e4f91[_0x2cedde(0x58d)];for(const _0xd1a319 of _0x4f82e5){if(!_0xd1a319)continue;_0xd1a319['gainStoredBoostPoints'](_0x1d0dde);}}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x6d4),_0x136c27=>{const _0x479f2c=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x479f2c(0x43f)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x479f2c(0xab1)](_0x136c27,_0x136c27);const _0x3a51fe=_0x136c27[_0x479f2c(0x904)];$gameVariables[_0x479f2c(0xaef)](_0x3a51fe,BattleManager[_0x479f2c(0x55d)][_0x479f2c(0x734)]());}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_BreakShieldChange',_0x28d246=>{const _0x3139ca=_0x444cf3;if(!SceneManager[_0x3139ca(0xa7a)]())return;if(!Imported[_0x3139ca(0x243)])return;VisuMZ[_0x3139ca(0xab1)](_0x28d246,_0x28d246);const _0x348b71=VisuMZ[_0x3139ca(0x746)](_0x28d246[_0x3139ca(0x9fe)]),_0x29b0f4=_0x28d246[_0x3139ca(0x4da)];for(const _0x3bc1d8 of _0x348b71){if(!_0x3bc1d8)continue;if(_0x3bc1d8[_0x3139ca(0xa3e)]())continue;if(!_0x3bc1d8[_0x3139ca(0x7ca)]())continue;_0x3bc1d8['alterBreakShield'](_0x29b0f4);}}),PluginManager['registerCommand'](pluginData['name'],_0x444cf3(0x96c),_0x59f1c3=>{const _0x1d6ea0=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1d6ea0(0x243)])return;VisuMZ[_0x1d6ea0(0xab1)](_0x59f1c3,_0x59f1c3);const _0x6b8492=VisuMZ['CreateActionSequenceTargets'](_0x59f1c3['Targets']);for(const _0x15f31d of _0x6b8492){if(!_0x15f31d)continue;if(_0x15f31d[_0x1d6ea0(0xa3e)]())continue;if(!_0x15f31d[_0x1d6ea0(0x7ca)]())continue;_0x15f31d['resetBreakShield']();}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_BtbGain',_0x3efab9=>{const _0x1f3e05=_0x444cf3;if(!SceneManager[_0x1f3e05(0xa7a)]())return;if(!Imported[_0x1f3e05(0xa6a)])return;if(!BattleManager['isBTB']())return;VisuMZ['ConvertParams'](_0x3efab9,_0x3efab9);const _0x319b1a=VisuMZ[_0x1f3e05(0x746)](_0x3efab9[_0x1f3e05(0x9fe)]),_0x4e37ec=_0x3efab9['BravePoints'];for(const _0x687749 of _0x319b1a){if(!_0x687749)continue;_0x687749[_0x1f3e05(0x2c0)](_0x4e37ec);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_Collapse',_0x352497=>{const _0x205723=_0x444cf3;if(!SceneManager[_0x205723(0xa7a)]())return;VisuMZ[_0x205723(0xab1)](_0x352497,_0x352497);const _0x32e1f2=$gameTemp['getLastPluginCommandInterpreter'](),_0x46c041=BattleManager[_0x205723(0xac1)],_0x58d1e8=BattleManager[_0x205723(0x55d)];if(!_0x32e1f2||!_0x46c041||!_0x58d1e8)return;if(!_0x46c041[_0x205723(0x39a)]())return;const _0xa4aba8=VisuMZ['CreateActionSequenceTargets'](_0x352497[_0x205723(0x9fe)]);for(const _0x58034a of _0xa4aba8){if(!_0x58034a)continue;_0x352497[_0x205723(0x566)]&&(_0x58034a[_0x205723(0x235)](),_0x58034a['addState'](_0x58034a[_0x205723(0xa25)]())),_0x58034a[_0x205723(0x925)]()&&_0x58034a[_0x205723(0x62d)]();}_0x32e1f2[_0x205723(0x36d)](_0x205723(0x9fa));}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_CtbOrder',_0x28c7c3=>{const _0x592213=_0x444cf3;if(!SceneManager[_0x592213(0xa7a)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x592213(0x598)]())return;VisuMZ[_0x592213(0xab1)](_0x28c7c3,_0x28c7c3);const _0x135c30=VisuMZ[_0x592213(0x746)](_0x28c7c3[_0x592213(0x9fe)]),_0x203689=_0x28c7c3[_0x592213(0x6a8)];for(const _0x1f3212 of _0x135c30){if(!_0x1f3212)continue;_0x1f3212[_0x592213(0xae4)](_0x203689);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_CtbSpeed',_0x33b7fe=>{const _0x4daee7=_0x444cf3;if(!SceneManager[_0x4daee7(0xa7a)]())return;if(!Imported[_0x4daee7(0x1f6)])return;if(!BattleManager[_0x4daee7(0x598)]())return;VisuMZ[_0x4daee7(0xab1)](_0x33b7fe,_0x33b7fe);const _0x1ca053=VisuMZ[_0x4daee7(0x746)](_0x33b7fe['Targets']),_0x4aef27=_0x33b7fe[_0x4daee7(0x7d9)],_0x359df4=_0x33b7fe[_0x4daee7(0x7d9)];for(const _0x3a4996 of _0x1ca053){if(!_0x3a4996)continue;if(_0x3a4996[_0x4daee7(0xa94)]===_0x4daee7(0x5d2))_0x3a4996[_0x4daee7(0x409)](_0x4aef27);else _0x3a4996[_0x4daee7(0xa94)]===_0x4daee7(0x301)&&_0x3a4996[_0x4daee7(0x52e)](_0x359df4);}}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0xa4d),_0x4bab39=>{const _0x328c83=_0x444cf3;if(!SceneManager[_0x328c83(0xa7a)]())return;VisuMZ[_0x328c83(0xab1)](_0x4bab39,_0x4bab39);const _0x5be8ac=BattleManager[_0x328c83(0xac1)];if(!_0x5be8ac)return;let _0xa46152=_0x4bab39[_0x328c83(0x3c3)];_0x5be8ac[_0x328c83(0x663)](_0xa46152);}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0xa13),_0x5558e2=>{const _0x19349f=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x19349f(0xab1)](_0x5558e2,_0x5558e2);const _0x1d5736=VisuMZ[_0x19349f(0x746)](_0x5558e2[_0x19349f(0x9fe)]);for(const _0xa8622c of _0x1d5736){if(!_0xa8622c)continue;if(_0xa8622c[_0x19349f(0x1f2)]())_0xa8622c['startDamagePopup']();}}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x4f1),_0x512fff=>{const _0x13beff=_0x444cf3;if(!SceneManager[_0x13beff(0xa7a)]())return;VisuMZ[_0x13beff(0xab1)](_0x512fff,_0x512fff);const _0x5a1a2d=$gameTemp['getLastPluginCommandInterpreter'](),_0x391ed8=BattleManager['_subject'],_0x29828f=_0x512fff[_0x13beff(0x92e)];if(!_0x5a1a2d)return;if(!_0x391ed8)return;_0x391ed8&&_0x391ed8[_0x13beff(0x678)]()&&_0x29828f[_0x13beff(0x839)]()['trim']()!==_0x13beff(0xad5)&&_0x5a1a2d['command119']([_0x29828f]);}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x359),_0x1c438a=>{const _0x1805d3=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1c438a,_0x1c438a);const _0x2dd69e=VisuMZ[_0x1805d3(0x746)](_0x1c438a[_0x1805d3(0x9fe)]);for(const _0x453c49 of _0x2dd69e){if(!_0x453c49)continue;if(!_0x453c49['isEnemy']())continue;_0x453c49[_0x1805d3(0xadf)]();}}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0xa3a),_0x28296d=>{const _0xf42d3d=_0x444cf3;if(!SceneManager[_0xf42d3d(0xa7a)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0xf42d3d(0x484)]())return;VisuMZ['ConvertParams'](_0x28296d,_0x28296d);const _0x152a81=_0x28296d[_0xf42d3d(0x5ba)];BattleManager[_0xf42d3d(0x55d)]&&BattleManager[_0xf42d3d(0x55d)]['friendsUnit']()['gainCurrentActionsETB'](_0x152a81);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x5bd),_0x516a70=>{const _0x31b9b9=_0x444cf3;if(!SceneManager[_0x31b9b9(0xa7a)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager[_0x31b9b9(0x63d)]())return;VisuMZ['ConvertParams'](_0x516a70,_0x516a70);const _0x277151=_0x516a70['ActionCount'];BattleManager[_0x31b9b9(0x55d)]&&BattleManager[_0x31b9b9(0x55d)][_0x31b9b9(0x4e3)]()[_0x31b9b9(0x5d5)](_0x277151);}),PluginManager['registerCommand'](pluginData['name'],_0x444cf3(0x83a),_0xb788d4=>{const _0x257af7=_0x444cf3;if(!SceneManager[_0x257af7(0xa7a)]())return;VisuMZ[_0x257af7(0xab1)](_0xb788d4,_0xb788d4);const _0x189f4d=VisuMZ[_0x257af7(0x746)](_0xb788d4['Targets']),_0x1690b1=_0xb788d4['HP_Rate'],_0x2ec510=_0xb788d4[_0x257af7(0xa15)],_0x11778f=_0xb788d4['MP_Rate'],_0xff9e0b=_0xb788d4[_0x257af7(0x2b3)],_0x359eb7=_0xb788d4[_0x257af7(0x97f)],_0x4944b4=_0xb788d4['TP_Flat'],_0x32416b=_0xb788d4['ShowPopup'];for(const _0x2c7caf of _0x189f4d){if(!_0x2c7caf)continue;const _0x55e7a2=_0x2c7caf[_0x257af7(0xad2)](),_0x1ebcab=Math[_0x257af7(0xa43)](_0x1690b1*_0x2c7caf[_0x257af7(0x56f)]+_0x2ec510),_0x39be4a=Math['round'](_0x11778f*_0x2c7caf[_0x257af7(0xac5)]+_0xff9e0b),_0x258bf3=Math[_0x257af7(0xa43)](_0x359eb7*_0x2c7caf['maxTp']()+_0x4944b4);if(_0x1ebcab!==0x0)_0x2c7caf[_0x257af7(0x94d)](_0x1ebcab);if(_0x39be4a!==0x0)_0x2c7caf['gainMp'](_0x39be4a);if(_0x258bf3!==0x0)_0x2c7caf['gainTp'](_0x258bf3);if(_0x32416b)_0x2c7caf[_0x257af7(0x9e3)]();_0x55e7a2&&_0x2c7caf[_0x257af7(0x678)]()&&_0x2c7caf[_0x257af7(0x62d)]();}}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x569),_0x202810=>{const _0x4c92a4=_0x444cf3;if(!SceneManager[_0x4c92a4(0xa7a)]())return;VisuMZ[_0x4c92a4(0xab1)](_0x202810,_0x202810);const _0x36d3ed=VisuMZ['CreateActionSequenceTargets'](_0x202810[_0x4c92a4(0x9fe)]);for(const _0x1187d3 of _0x36d3ed){if(!_0x1187d3)continue;_0x1187d3[_0x4c92a4(0x832)](_0x202810[_0x4c92a4(0x92c)]);}}),PluginManager['registerCommand'](pluginData['name'],_0x444cf3(0x228),_0x922712=>{const _0x32f341=_0x444cf3;if(!SceneManager[_0x32f341(0xa7a)]())return;VisuMZ[_0x32f341(0xab1)](_0x922712,_0x922712);const _0x300fb3=BattleManager[_0x32f341(0xac1)],_0x5806bf={'criticalHitRate':_0x922712['CriticalHitRate'],'criticalHitFlat':_0x922712[_0x32f341(0x42b)],'criticalDmgRate':_0x922712['CriticalDmgRate'],'criticalDmgFlat':_0x922712['CriticalDmgFlat'],'damageRate':_0x922712[_0x32f341(0x8da)],'damageFlat':_0x922712[_0x32f341(0x430)],'hitRate':_0x922712['HitRate'],'hitFlat':_0x922712[_0x32f341(0x76f)]};_0x300fb3[_0x32f341(0x7a6)]=_0x5806bf;}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_OnceParallel',_0x35c0d9=>{const _0x4bacbd=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4bacbd(0xab1)](_0x35c0d9,_0x35c0d9);const _0x5da261=_0x35c0d9[_0x4bacbd(0x44b)];SceneManager[_0x4bacbd(0xa67)]['playOnceParallelInterpreter'](_0x5da261);}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_OtbOrder',_0x5691f2=>{const _0x40ec1c=_0x444cf3;if(!SceneManager[_0x40ec1c(0xa7a)]())return;if(!Imported[_0x40ec1c(0xaca)])return;if(!BattleManager[_0x40ec1c(0x8a6)]())return;VisuMZ['ConvertParams'](_0x5691f2,_0x5691f2);const _0x182d90=VisuMZ[_0x40ec1c(0x746)](_0x5691f2[_0x40ec1c(0x9fe)]);for(const _0x408faf of _0x182d90){if(!_0x408faf)continue;let _0x313e46=_0x5691f2['CurrentTurn'],_0x423880=_0x5691f2[_0x40ec1c(0x2f3)],_0x32a8a3=_0x5691f2[_0x40ec1c(0x2b7)];BattleManager[_0x40ec1c(0x433)][_0x40ec1c(0xa60)](_0x408faf)?_0x313e46+=_0x32a8a3:_0x423880+=_0x32a8a3,BattleManager['turnOrderChangeOTB'](_0x408faf,-_0x313e46,![]),BattleManager[_0x40ec1c(0x8a3)](_0x408faf,-_0x423880,!![]);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x920),_0x47ddc2=>{const _0x161d8a=_0x444cf3;if(!SceneManager[_0x161d8a(0xa7a)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x161d8a(0x659)]())return;VisuMZ['ConvertParams'](_0x47ddc2,_0x47ddc2);const _0x3bfb7d=BattleManager['_subject'][_0x161d8a(0x4e3)](),_0x304b83=_0x47ddc2['Override'],_0x2d55f8=_0x47ddc2[_0x161d8a(0x1f4)]||_0x161d8a(0x906),_0x5b467b=_0x47ddc2[_0x161d8a(0x40b)]||_0x161d8a(0x906),_0x16320b=_0x47ddc2[_0x161d8a(0x7ee)]||0x0,_0x36ba55=_0x47ddc2[_0x161d8a(0xa7f)]||0x0;(_0x3bfb7d[_0x161d8a(0x640)]()||_0x304b83)&&(_0x304b83&&(_0x3bfb7d[_0x161d8a(0x41b)]=_0x3bfb7d[_0x161d8a(0x41b)]||{},_0x3bfb7d['_ptbActionCost'][_0x161d8a(0x54d)]=0x0),_0x3bfb7d[_0x161d8a(0x3de)](_0x2d55f8,_0x5b467b,_0x16320b,_0x36ba55));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x1c0),_0xb6bdb6=>{const _0xbe0767=_0x444cf3;if(!SceneManager[_0xbe0767(0xa7a)]())return;if(!Imported[_0xbe0767(0x599)])return;if(!BattleManager[_0xbe0767(0x659)]())return;VisuMZ[_0xbe0767(0xab1)](_0xb6bdb6,_0xb6bdb6);const _0x4a6145=BattleManager[_0xbe0767(0x55d)][_0xbe0767(0x4e3)]();let _0x2f6eca=Math['max'](_0xb6bdb6['ConvertCount'],0x0),_0x5e46a7=_0x4a6145[_0xbe0767(0xb1f)](),_0x3d3131=_0x4a6145[_0xbe0767(0x7a1)]();while(_0x2f6eca--){if(_0x5e46a7<=0x0&&_0x3d3131<=0x0)break;else _0x5e46a7>0x0?(_0x5e46a7--,_0x3d3131++):_0x3d3131--;}_0x4a6145[_0xbe0767(0x260)](_0x5e46a7),_0x4a6145[_0xbe0767(0x669)](_0x3d3131);}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x557),_0x4f58e4=>{const _0x25c920=_0x444cf3;if(!SceneManager[_0x25c920(0xa7a)]())return;if(!Imported[_0x25c920(0x599)])return;if(!BattleManager[_0x25c920(0x659)]())return;VisuMZ['ConvertParams'](_0x4f58e4,_0x4f58e4);const _0x25c473=BattleManager[_0x25c920(0x55d)][_0x25c920(0x4e3)]();let _0x2be2de=_0x4f58e4[_0x25c920(0x1bf)],_0x4f7b4e=_0x4f58e4[_0x25c920(0x88f)];_0x25c473[_0x25c920(0x8b3)](_0x2be2de),_0x25c473[_0x25c920(0x914)](_0x4f7b4e);}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x1237c9=>{const _0x48c027=_0x444cf3;if(!SceneManager[_0x48c027(0xa7a)]())return;VisuMZ[_0x48c027(0xab1)](_0x1237c9,_0x1237c9);const _0xe977c4=[_0x48c027(0x3ae),_0x48c027(0x3df),'ATK',_0x48c027(0x835),_0x48c027(0x2c1),_0x48c027(0xb23),_0x48c027(0x352),_0x48c027(0x38c)],_0x239932=_0x1237c9['Buffs'],_0x4be1a8=_0x1237c9[_0x48c027(0x4a5)],_0x1be270=VisuMZ[_0x48c027(0x746)](_0x1237c9[_0x48c027(0x9fe)]);for(const _0x1230b5 of _0x1be270){if(!_0x1230b5)continue;for(const _0x8a9f02 of _0x239932){const _0x435c27=_0xe977c4[_0x48c027(0x2c5)](_0x8a9f02['toUpperCase']()[_0x48c027(0x78c)]());_0x435c27>=0x0&&_0x435c27<=0x7&&_0x1230b5[_0x48c027(0x657)](_0x435c27)&&_0x1230b5[_0x48c027(0xb1c)](_0x435c27);}for(const _0x34d016 of _0x4be1a8){const _0x2876af=_0xe977c4[_0x48c027(0x2c5)](_0x34d016[_0x48c027(0x839)]()[_0x48c027(0x78c)]());_0x2876af>=0x0&&_0x2876af<=0x7&&_0x1230b5[_0x48c027(0x366)](_0x2876af)&&_0x1230b5[_0x48c027(0xb1c)](_0x2876af);}}}),PluginManager['registerCommand'](pluginData['name'],_0x444cf3(0x89c),_0x15e371=>{const _0x2eb6c4=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2eb6c4(0xab1)](_0x15e371,_0x15e371);const _0x51a209=_0x15e371[_0x2eb6c4(0x8a0)],_0x33fa28=VisuMZ[_0x2eb6c4(0x746)](_0x15e371[_0x2eb6c4(0x9fe)]);for(const _0xa5cf27 of _0x33fa28){if(!_0xa5cf27)continue;for(const _0x3bd614 of _0x51a209){_0xa5cf27['removeState'](_0x3bd614);}}}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x7c2),_0x1396fa=>{const _0x3838e8=_0x444cf3;if(!SceneManager[_0x3838e8(0xa7a)]())return;if(!Imported[_0x3838e8(0x2be)])return;if(!BattleManager[_0x3838e8(0x614)]())return;VisuMZ['ConvertParams'](_0x1396fa,_0x1396fa);const _0x3d7b6c=_0x1396fa[_0x3838e8(0x4f9)],_0x4b9972=VisuMZ[_0x3838e8(0x746)](_0x1396fa['Targets']),_0x5c547e=_0x1396fa['ForceExploited'],_0x344e47=_0x1396fa[_0x3838e8(0x29c)],_0x17c136=_0x1396fa['ForceExploiter'],_0x264800=BattleManager[_0x3838e8(0xac1)];if(_0x3d7b6c)for(const _0x4d29db of _0x4b9972){if(!_0x4d29db)continue;if(_0x4d29db===user)continue;if(_0x5c547e)_0x4d29db['setSTBExploited'](![]);_0x4d29db[_0x3838e8(0xb0f)](BattleManager[_0x3838e8(0x55d)],_0x264800);}if(_0x344e47&&BattleManager[_0x3838e8(0x55d)]){if(_0x17c136)BattleManager['_subject'][_0x3838e8(0x55e)](![]);const _0x435530=_0x4b9972[0x0];BattleManager[_0x3838e8(0x59a)](_0x435530,_0x264800);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x311),_0xd13e4d=>{const _0x485f79=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x485f79(0x2be)])return;if(!BattleManager[_0x485f79(0x614)]())return;VisuMZ['ConvertParams'](_0xd13e4d,_0xd13e4d);const _0x1e6772=_0xd13e4d[_0x485f79(0x98c)];BattleManager[_0x485f79(0x55d)]&&BattleManager[_0x485f79(0x55d)][_0x485f79(0x4bb)](_0x1e6772);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0xabe),_0x13c4bb=>{const _0xa6cdc7=_0x444cf3;if(!SceneManager[_0xa6cdc7(0xa7a)]())return;if(!Imported[_0xa6cdc7(0x2be)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0xa6cdc7(0xab1)](_0x13c4bb,_0x13c4bb);let _0x2c177d=_0x13c4bb[_0xa6cdc7(0x98c)];if(BattleManager[_0xa6cdc7(0x55d)]){BattleManager['_subject'][_0xa6cdc7(0x3a7)]=BattleManager[_0xa6cdc7(0x55d)][_0xa6cdc7(0x3a7)]||[];while(_0x2c177d--){if(BattleManager[_0xa6cdc7(0x55d)][_0xa6cdc7(0x3a7)][_0xa6cdc7(0xa40)]<=0x0)break;BattleManager[_0xa6cdc7(0x55d)]['_actions'][_0xa6cdc7(0x898)]();}}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x382),_0x2e45dc=>{const _0x4a4844=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ['ConvertParams'](_0x2e45dc,_0x2e45dc);const _0x5645ba=VisuMZ[_0x4a4844(0x746)](_0x2e45dc[_0x4a4844(0x9fe)]),_0x2fbf20=_0x2e45dc[_0x4a4844(0x61f)];for(const _0x5987a2 of _0x5645ba){if(!_0x5987a2)continue;if(!_0x5987a2[_0x4a4844(0xa93)]())continue;_0x5987a2['switchToWeaponType'](_0x2fbf20);}}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x591),_0x60945f=>{const _0x8dbf87=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x8dbf87(0xab1)](_0x60945f,_0x60945f);const _0x40cabc=VisuMZ['CreateActionSequenceTargets'](_0x60945f[_0x8dbf87(0x9fe)]),_0x1a3f19=_0x60945f[_0x8dbf87(0x1e8)],_0x1fa018={'textColor':ColorManager[_0x8dbf87(0x9c8)](_0x60945f[_0x8dbf87(0x915)]),'flashColor':_0x60945f['FlashColor'],'flashDuration':_0x60945f[_0x8dbf87(0x391)]};for(const _0x41a6de of _0x40cabc){if(!_0x41a6de)continue;_0x41a6de['setupTextPopup'](_0x1a3f19,_0x1fa018);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x9c9),_0x69fe1a=>{const _0x4ea369=_0x444cf3;if(!SceneManager[_0x4ea369(0xa7a)]())return;VisuMZ[_0x4ea369(0xab1)](_0x69fe1a,_0x69fe1a);const _0x45a842=VisuMZ[_0x4ea369(0x746)](_0x69fe1a[_0x4ea369(0x9fe)]);let _0x4a5aee=$gameVariables[_0x4ea369(0x473)](_0x69fe1a[_0x4ea369(0xb0c)]);Imported[_0x4ea369(0x8d5)]&&_0x69fe1a['DigitGrouping']&&(_0x4a5aee=VisuMZ[_0x4ea369(0x69b)](_0x4a5aee));const _0x5e983f=String(_0x4a5aee),_0x1cce42={'textColor':ColorManager['getColor'](_0x69fe1a['TextColor']),'flashColor':_0x69fe1a['FlashColor'],'flashDuration':_0x69fe1a[_0x4ea369(0x391)]};for(const _0x1ac101 of _0x45a842){if(!_0x1ac101)continue;_0x1ac101[_0x4ea369(0x6c5)](_0x5e983f,_0x1cce42);}}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x463),_0x49b45d=>{const _0x4fa481=_0x444cf3;if(!SceneManager[_0x4fa481(0xa7a)]())return;const _0x30d6e2=$gameTemp[_0x4fa481(0x95d)]();if(!_0x30d6e2)return;_0x30d6e2[_0x4fa481(0x36d)](_0x4fa481(0x9fa));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x822),_0x4a7ab8=>{const _0x5a5353=_0x444cf3;if(!SceneManager[_0x5a5353(0xa7a)]())return;VisuMZ['ConvertParams'](_0x4a7ab8,_0x4a7ab8);const _0x219b1e=VisuMZ[_0x5a5353(0x746)](_0x4a7ab8['Targets']);for(const _0x21d2ce of _0x219b1e){if(!_0x21d2ce)continue;_0x21d2ce[_0x5a5353(0x9de)]();}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x1c6),_0x329bad=>{const _0x8238e3=_0x444cf3;if(!SceneManager[_0x8238e3(0xa7a)]())return;VisuMZ[_0x8238e3(0xab1)](_0x329bad,_0x329bad);const _0x553d86=VisuMZ[_0x8238e3(0x746)](_0x329bad['Targets']),_0x4e9c25=_0x329bad[_0x8238e3(0x251)][_0x8238e3(0x1fd)]()[_0x8238e3(0x78c)]();let _0x261de7=_0x329bad['ShowWeapon'];const _0x320c68=_0x329bad[_0x8238e3(0xaf1)];![_0x8238e3(0x67f),_0x8238e3(0x673),_0x8238e3(0xacb),'missile'][_0x8238e3(0xa60)](_0x4e9c25)&&(_0x261de7=![]);for(const _0x49b2d8 of _0x553d86){if(!_0x49b2d8)continue;_0x49b2d8[_0x8238e3(0x8c3)](_0x4e9c25,_0x261de7,_0x320c68);}}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x6f9),_0x537cc2=>{const _0x3d627f=_0x444cf3;if(!SceneManager[_0x3d627f(0xa7a)]())return;VisuMZ[_0x3d627f(0xab1)](_0x537cc2,_0x537cc2);const _0x392625=VisuMZ['CreateActionSequenceTargets'](_0x537cc2[_0x3d627f(0x9fe)]),_0x5a433b=_0x537cc2[_0x3d627f(0x251)][_0x3d627f(0x1fd)]()['trim'](),_0x42f639=_0x537cc2[_0x3d627f(0x4e1)];for(const _0x3ef29f of _0x392625){if(!_0x3ef29f)continue;if(_0x5a433b['match'](/ATTACK[ ](\d+)/i))_0x3ef29f[_0x3d627f(0x588)](Number(RegExp['$1']));else _0x5a433b===_0x3d627f(0x67f)?_0x3ef29f[_0x3d627f(0x4a8)]():_0x3ef29f[_0x3d627f(0x9af)](_0x5a433b);if(!_0x42f639)_0x3ef29f[_0x3d627f(0x8f6)](0x0);else{if(_0x42f639&&[_0x3d627f(0x673),'swing',_0x3d627f(0x7fa)][_0x3d627f(0xa60)](_0x5a433b)){}}}}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],'ActSeq_Motion_PerformAction',_0x3d1918=>{const _0x3e5d26=_0x444cf3;if(!SceneManager[_0x3e5d26(0xa7a)]())return;VisuMZ['ConvertParams'](_0x3d1918,_0x3d1918);const _0x23d494=BattleManager[_0x3e5d26(0xac1)];if(!_0x23d494)return;if(!_0x23d494[_0x3e5d26(0x39a)]())return;const _0x1f1fdb=VisuMZ[_0x3e5d26(0x746)](_0x3d1918[_0x3e5d26(0x9fe)]);for(const _0x21b3f1 of _0x1f1fdb){if(!_0x21b3f1)continue;_0x21b3f1[_0x3e5d26(0x36a)](_0x23d494);}}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x513),_0x294379=>{const _0x10c856=_0x444cf3;if(!SceneManager[_0x10c856(0xa7a)]())return;VisuMZ['ConvertParams'](_0x294379,_0x294379);const _0xf9eedc=VisuMZ[_0x10c856(0x746)](_0x294379['Targets']);for(const _0x4fc56f of _0xf9eedc){if(!_0x4fc56f)continue;if(!_0x4fc56f[_0x10c856(0x516)]())continue;_0x4fc56f[_0x10c856(0x516)]()['refreshMotion']();}}),PluginManager[_0x444cf3(0x292)](pluginData['name'],'ActSeq_Motion_WaitMotionFrame',_0x453488=>{const _0x45dde9=_0x444cf3;if(!SceneManager[_0x45dde9(0xa7a)]())return;VisuMZ['ConvertParams'](_0x453488,_0x453488);const _0x195ae4=$gameTemp[_0x45dde9(0x95d)](),_0x15d9f6=_0x453488[_0x45dde9(0x872)]*Sprite_Battler[_0x45dde9(0xa7e)];_0x195ae4[_0x45dde9(0xb16)](_0x15d9f6);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x6e2),_0x3f3045=>{const _0x3d6c37=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3d6c37(0xab1)](_0x3f3045,_0x3f3045);const _0x2afe54=$gameTemp[_0x3d6c37(0x95d)](),_0x14a558=BattleManager[_0x3d6c37(0xac1)];if(!_0x2afe54||!_0x14a558)return;if(!_0x14a558[_0x3d6c37(0x39a)]())return;const _0xf563e5=VisuMZ[_0x3d6c37(0x746)](_0x3f3045[_0x3d6c37(0x9fe)]);for(const _0x142fce of _0xf563e5){if(!_0x142fce)continue;_0x142fce[_0x3d6c37(0xb0e)](_0x14a558);}if(_0x3f3045[_0x3d6c37(0xafb)])_0x2afe54[_0x3d6c37(0x36d)]('battleMove');}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x25a),_0x9f7422=>{const _0x26bc1c=_0x444cf3;if(!SceneManager[_0x26bc1c(0xa7a)]())return;if(!$gameSystem[_0x26bc1c(0x718)]())return;VisuMZ['ConvertParams'](_0x9f7422,_0x9f7422);const _0xbefcef=$gameTemp[_0x26bc1c(0x95d)](),_0xc5f1ad=VisuMZ[_0x26bc1c(0x746)](_0x9f7422['Targets']),_0x54c0cc=_0x9f7422['DistanceAdjust'],_0x52dffb=_0x9f7422[_0x26bc1c(0x59c)],_0x154ce3=_0x9f7422[_0x26bc1c(0x87f)],_0x1e7536=_0x9f7422[_0x26bc1c(0x6f8)],_0x2e934f=_0x9f7422[_0x26bc1c(0x9ac)],_0x248b22=_0x9f7422[_0x26bc1c(0x1cc)],_0x2ec53d=_0x9f7422['MotionType'],_0x42d670=_0x9f7422[_0x26bc1c(0xafb)];if(!_0xbefcef)return;for(const _0x5af1b1 of _0xc5f1ad){if(!_0x5af1b1)continue;let _0x4a64ac=_0x52dffb,_0x5d9c33=_0x154ce3;if(_0x54c0cc['match'](/horz/i))_0x4a64ac*=_0x5af1b1[_0x26bc1c(0xa93)]()?-0x1:0x1;if(_0x54c0cc[_0x26bc1c(0x6b8)](/vert/i))_0x5d9c33*=_0x5af1b1[_0x26bc1c(0xa93)]()?-0x1:0x1;_0x5af1b1[_0x26bc1c(0x3cb)](_0x4a64ac,_0x5d9c33,_0x1e7536,_0x2e934f,_0x248b22),_0x5af1b1[_0x26bc1c(0x9af)](_0x2ec53d);}if(_0x42d670)_0xbefcef[_0x26bc1c(0x36d)]('battleMove');}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x2e1),_0x4f59aa=>{const _0x49a786=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x49a786(0x718)]())return;VisuMZ['ConvertParams'](_0x4f59aa,_0x4f59aa);const _0x32d4c9=$gameTemp[_0x49a786(0x95d)](),_0x45843b=VisuMZ[_0x49a786(0x746)](_0x4f59aa[_0x49a786(0x9fe)]),_0x53f3f0=_0x4f59aa[_0x49a786(0x79e)],_0x1650fb=_0x4f59aa[_0x49a786(0x74c)],_0x149c3b=_0x4f59aa[_0x49a786(0x236)],_0x2a3aa3=_0x4f59aa[_0x49a786(0xad3)],_0x28abc6=_0x4f59aa[_0x49a786(0x6f8)],_0x158f01=_0x4f59aa[_0x49a786(0x9ac)],_0x1fbc50=_0x4f59aa['EasingType'],_0x58921d=_0x4f59aa[_0x49a786(0x251)],_0x1f3ad2=_0x4f59aa['WaitForMovement'];if(!_0x32d4c9)return;for(const _0x86814b of _0x45843b){if(!_0x86814b)continue;let _0x313280=_0x86814b[_0x49a786(0x516)]()[_0x49a786(0x3d2)],_0x3f2968=_0x86814b['battler']()[_0x49a786(0x801)];if(_0x53f3f0['match'](/home/i))_0x313280=_0x86814b['battler']()[_0x49a786(0x856)],_0x3f2968=_0x86814b[_0x49a786(0x516)]()['_homeY'];else{if(_0x53f3f0[_0x49a786(0x6b8)](/center/i))_0x313280=Graphics[_0x49a786(0x902)]/0x2,_0x3f2968=Graphics[_0x49a786(0x358)]/0x2;else _0x53f3f0['match'](/point (\d+), (\d+)/i)&&(_0x313280=Number(RegExp['$1']),_0x3f2968=Number(RegExp['$2']));}if(_0x1650fb[_0x49a786(0x6b8)](/none/i))_0x313280+=_0x149c3b,_0x3f2968+=_0x2a3aa3;else{if(_0x1650fb[_0x49a786(0x6b8)](/horz/i)&&_0x1650fb[_0x49a786(0x6b8)](/vert/i))_0x313280+=_0x86814b['isActor']()?-_0x149c3b:_0x149c3b,_0x3f2968+=_0x86814b[_0x49a786(0xa93)]()?-_0x2a3aa3:_0x2a3aa3;else{if(_0x1650fb['match'](/horz/i))_0x313280+=_0x86814b[_0x49a786(0xa93)]()?-_0x149c3b:_0x149c3b,_0x3f2968+=_0x2a3aa3;else _0x1650fb[_0x49a786(0x6b8)](/vert/i)&&(_0x313280+=_0x149c3b,_0x3f2968+=_0x86814b[_0x49a786(0xa93)]()?-_0x2a3aa3:_0x2a3aa3);}}_0x86814b[_0x49a786(0x345)](_0x313280,_0x3f2968,_0x28abc6,_0x158f01,_0x1fbc50,-0x1),_0x86814b[_0x49a786(0x9af)](_0x58921d);}if(_0x1f3ad2)_0x32d4c9[_0x49a786(0x36d)]('battleMove');}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Movement_HomeMoveToTarget',_0x397e01=>{const _0x5a6352=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x5a6352(0x718)]())return;VisuMZ[_0x5a6352(0xab1)](_0x397e01,_0x397e01);const _0x3771b9=$gameTemp[_0x5a6352(0x95d)](),_0x4467c2=VisuMZ[_0x5a6352(0x746)](_0x397e01[_0x5a6352(0x2ee)]),_0x2d2c72=VisuMZ[_0x5a6352(0x746)](_0x397e01[_0x5a6352(0xa4e)]),_0xbd7605=_0x397e01[_0x5a6352(0x967)];let _0x1921cb=_0x397e01[_0x5a6352(0x91c)];const _0x294860=_0x397e01[_0x5a6352(0x74c)],_0x33dc5b=_0x397e01[_0x5a6352(0x236)],_0x48e710=_0x397e01[_0x5a6352(0xad3)],_0x2e8d88=_0x397e01[_0x5a6352(0x6f8)],_0x4a1780=_0x397e01['FaceDirection'],_0x2609e8=_0x397e01[_0x5a6352(0x1cc)],_0x1c8738=_0x397e01[_0x5a6352(0x251)],_0x3498b9=_0x397e01[_0x5a6352(0xafb)],_0x1b242a=Math[_0x5a6352(0x349)](..._0x2d2c72[_0x5a6352(0x7f8)](_0x151dba=>_0x151dba[_0x5a6352(0x516)]()[_0x5a6352(0x3d2)]-_0x151dba['battler']()['mainSpriteWidth']()/0x2)),_0x3851e9=Math[_0x5a6352(0x642)](..._0x2d2c72[_0x5a6352(0x7f8)](_0x2d79b5=>_0x2d79b5[_0x5a6352(0x516)]()[_0x5a6352(0x3d2)]+_0x2d79b5[_0x5a6352(0x516)]()[_0x5a6352(0x817)]()/0x2)),_0x56cd69=Math[_0x5a6352(0x349)](..._0x2d2c72[_0x5a6352(0x7f8)](_0x595d93=>_0x595d93[_0x5a6352(0x516)]()['_baseY']-_0x595d93[_0x5a6352(0x516)]()['mainSpriteHeight']())),_0x30572e=Math['max'](..._0x2d2c72['map'](_0x3ae4ff=>_0x3ae4ff['battler']()[_0x5a6352(0x801)])),_0x30dd38=_0x2d2c72[_0x5a6352(0x4d3)](_0x119b2f=>_0x119b2f[_0x5a6352(0xa93)]())[_0x5a6352(0xa40)],_0x5e0b94=_0x2d2c72[_0x5a6352(0x4d3)](_0x1064e2=>_0x1064e2['isEnemy']())[_0x5a6352(0xa40)];let _0x218b1a=0x0,_0x5d7eb9=0x0;if(_0xbd7605[_0x5a6352(0x6b8)](/front/i))_0x218b1a=_0x30dd38>=_0x5e0b94?_0x1b242a:_0x3851e9;else{if(_0xbd7605[_0x5a6352(0x6b8)](/middle/i))_0x218b1a=(_0x1b242a+_0x3851e9)/0x2,_0x1921cb=-0x1;else _0xbd7605[_0x5a6352(0x6b8)](/back/i)&&(_0x218b1a=_0x30dd38>=_0x5e0b94?_0x3851e9:_0x1b242a);}if(_0xbd7605[_0x5a6352(0x6b8)](/head/i))_0x5d7eb9=_0x56cd69;else{if(_0xbd7605['match'](/center/i))_0x5d7eb9=(_0x56cd69+_0x30572e)/0x2;else _0xbd7605['match'](/base/i)&&(_0x5d7eb9=_0x30572e);}if(!_0x3771b9)return;for(const _0x5b564c of _0x4467c2){if(!_0x5b564c)continue;let _0x11bc71=_0x218b1a,_0x422d78=_0x5d7eb9;if(_0x294860[_0x5a6352(0x6b8)](/none/i))_0x11bc71+=_0x33dc5b,_0x422d78+=_0x48e710;else{if(_0x294860['match'](/horz/i)&&_0x294860['match'](/vert/i))_0x11bc71+=_0x5b564c['isActor']()?-_0x33dc5b:_0x33dc5b,_0x422d78+=_0x5b564c['isActor']()?-_0x48e710:_0x48e710;else{if(_0x294860[_0x5a6352(0x6b8)](/horz/i))_0x11bc71+=_0x5b564c[_0x5a6352(0xa93)]()?-_0x33dc5b:_0x33dc5b,_0x422d78+=_0x48e710;else _0x294860[_0x5a6352(0x6b8)](/vert/i)&&(_0x11bc71+=_0x33dc5b,_0x422d78+=_0x5b564c[_0x5a6352(0xa93)]()?-_0x48e710:_0x48e710);}}_0x5b564c[_0x5a6352(0x345)](_0x11bc71,_0x422d78,_0x2e8d88,_0x4a1780,_0x2609e8,_0x1921cb),_0x5b564c[_0x5a6352(0x9af)](_0x1c8738);}if(_0x3498b9)_0x3771b9[_0x5a6352(0x36d)]('battleMove');}),PluginManager['registerCommand'](pluginData['name'],_0x444cf3(0x81b),_0x26240d=>{const _0x347213=_0x444cf3;if(!SceneManager[_0x347213(0xa7a)]())return;if(!$gameSystem[_0x347213(0x718)]())return;VisuMZ[_0x347213(0xab1)](_0x26240d,_0x26240d);const _0x54a684=VisuMZ['CreateActionSequenceTargets'](_0x26240d[_0x347213(0x9fe)]);let _0x2d386c=_0x26240d['Direction'][_0x347213(0x6b8)](/back/i);for(const _0x38f52b of _0x54a684){if(!_0x38f52b)continue;if(_0x26240d['Direction'][_0x347213(0x6b8)](/rand/i))_0x2d386c=Math['randomInt'](0x2);_0x38f52b[_0x347213(0x61d)](!!_0x2d386c);}}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x1c9),_0x192985=>{const _0x487e05=_0x444cf3;if(!SceneManager[_0x487e05(0xa7a)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x487e05(0xab1)](_0x192985,_0x192985);const _0x3af7b7=VisuMZ[_0x487e05(0x746)](_0x192985[_0x487e05(0x9fe)]);let _0x51e3d7=_0x192985['Point'];const _0x899eaf=_0x192985[_0x487e05(0x98d)];for(const _0x5673e5 of _0x3af7b7){if(!_0x5673e5)continue;let _0x36458e=_0x5673e5[_0x487e05(0x516)]()[_0x487e05(0x3d2)],_0x565d54=_0x5673e5[_0x487e05(0x516)]()[_0x487e05(0x801)];if(_0x51e3d7[_0x487e05(0x6b8)](/home/i))_0x36458e=_0x5673e5['battler']()[_0x487e05(0x856)],_0x565d54=_0x5673e5[_0x487e05(0x516)]()[_0x487e05(0xac8)];else{if(_0x51e3d7[_0x487e05(0x6b8)](/center/i))_0x36458e=Graphics[_0x487e05(0x902)]/0x2,_0x565d54=Graphics[_0x487e05(0x358)]/0x2;else _0x51e3d7[_0x487e05(0x6b8)](/point (\d+), (\d+)/i)&&(_0x36458e=Number(RegExp['$1']),_0x565d54=Number(RegExp['$2']));}_0x5673e5[_0x487e05(0x2dc)](Math[_0x487e05(0xa43)](_0x36458e),Math[_0x487e05(0xa43)](_0x565d54),!!_0x899eaf);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x4d4),_0x46e314=>{const _0x5d9441=_0x444cf3;if(!SceneManager[_0x5d9441(0xa7a)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x5d9441(0xab1)](_0x46e314,_0x46e314);const _0x4f643d=VisuMZ[_0x5d9441(0x746)](_0x46e314[_0x5d9441(0x2ee)]),_0x5b76c1=VisuMZ[_0x5d9441(0x746)](_0x46e314[_0x5d9441(0xa4e)]),_0x1e6d64=_0x5b76c1[_0x5d9441(0x7f8)](_0x42b52e=>_0x42b52e&&_0x42b52e[_0x5d9441(0x516)]()?_0x42b52e[_0x5d9441(0x516)]()[_0x5d9441(0x3d2)]:0x0)/(_0x5b76c1[_0x5d9441(0xa40)]||0x1),_0x52337a=_0x5b76c1[_0x5d9441(0x7f8)](_0x4aa956=>_0x4aa956&&_0x4aa956[_0x5d9441(0x516)]()?_0x4aa956[_0x5d9441(0x516)]()['_baseY']:0x0)/(_0x5b76c1[_0x5d9441(0xa40)]||0x1),_0x42227c=_0x46e314['FaceAway'];for(const _0x28f1d0 of _0x4f643d){if(!_0x28f1d0)continue;_0x28f1d0['setBattlerFacePoint'](Math[_0x5d9441(0xa43)](_0x1e6d64),Math[_0x5d9441(0xa43)](_0x52337a),!!_0x42227c);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x975),_0x2b15df=>{const _0x429771=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x429771(0xab1)](_0x2b15df,_0x2b15df);const _0x4a7195=$gameTemp['getLastPluginCommandInterpreter'](),_0x473609=VisuMZ['CreateActionSequenceTargets'](_0x2b15df[_0x429771(0x9fe)]),_0x5baa65=_0x2b15df['Height'],_0xfdac81=_0x2b15df['Duration'],_0x39f796=_0x2b15df[_0x429771(0x1cc)],_0x5006ea=_0x2b15df[_0x429771(0x67d)];if(!_0x4a7195)return;for(const _0x37feca of _0x473609){if(!_0x37feca)continue;_0x37feca[_0x429771(0x5c7)](_0x5baa65,_0xfdac81,_0x39f796);}if(_0x5006ea)_0x4a7195[_0x429771(0x36d)](_0x429771(0x863));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x2f8),_0x57363e=>{const _0x3f97af=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3f97af(0xab1)](_0x57363e,_0x57363e);const _0x1bf550=$gameTemp[_0x3f97af(0x95d)]();if(!_0x1bf550)return;const _0x232dbe=VisuMZ['CreateActionSequenceTargets'](_0x57363e['Targets']);for(const _0x404d0e of _0x232dbe){if(!_0x404d0e)continue;_0x404d0e[_0x3f97af(0x321)]();}BattleManager[_0x3f97af(0x55d)]&&BattleManager['_subject'][_0x3f97af(0x72b)]();if(_0x57363e[_0x3f97af(0xafb)])_0x1bf550[_0x3f97af(0x36d)](_0x3f97af(0x6d0));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x527),_0x5d8c15=>{const _0x1765c3=_0x444cf3;if(!SceneManager[_0x1765c3(0xa7a)]())return;VisuMZ[_0x1765c3(0xab1)](_0x5d8c15,_0x5d8c15);const _0x3a9524=$gameTemp[_0x1765c3(0x95d)](),_0x4d4a93=VisuMZ[_0x1765c3(0x746)](_0x5d8c15[_0x1765c3(0x9fe)]),_0x346c9f=_0x5d8c15[_0x1765c3(0x3b5)],_0x1075de=_0x5d8c15[_0x1765c3(0x6f8)],_0x5b880b=_0x5d8c15[_0x1765c3(0x342)];if(!_0x3a9524)return;for(const _0x1e559a of _0x4d4a93){if(!_0x1e559a)continue;_0x1e559a[_0x1765c3(0x79f)](_0x346c9f,_0x1075de);}if(_0x5b880b)_0x3a9524[_0x1765c3(0x36d)](_0x1765c3(0x604));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x7c5),_0x5bfa46=>{const _0x3c700d=_0x444cf3;if(!SceneManager[_0x3c700d(0xa7a)]())return;if(!$gameSystem[_0x3c700d(0x718)]())return;VisuMZ[_0x3c700d(0xab1)](_0x5bfa46,_0x5bfa46);const _0x42a385=$gameTemp[_0x3c700d(0x95d)](),_0xb1ee05=VisuMZ[_0x3c700d(0x746)](_0x5bfa46[_0x3c700d(0x9fe)]),_0x894709=_0x5bfa46['DistanceAdjust'],_0x1a289b=_0x5bfa46[_0x3c700d(0x59c)],_0x1693e8=_0x5bfa46[_0x3c700d(0x87f)],_0x3121c9=_0x5bfa46[_0x3c700d(0x6f8)],_0x17039a=_0x5bfa46['FaceDirection'],_0x1cbdac=_0x5bfa46['EasingType'],_0xc1ded5=_0x5bfa46[_0x3c700d(0x251)],_0x2d8f32=_0x5bfa46['WaitForMovement'];if(!_0x42a385)return;for(const _0x8a87b6 of _0xb1ee05){if(!_0x8a87b6)continue;let _0x4316bb=_0x1a289b,_0x54acf3=_0x1693e8;if(_0x894709[_0x3c700d(0x6b8)](/horz/i))_0x4316bb*=_0x8a87b6[_0x3c700d(0xa93)]()?-0x1:0x1;if(_0x894709[_0x3c700d(0x6b8)](/vert/i))_0x54acf3*=_0x8a87b6[_0x3c700d(0xa93)]()?-0x1:0x1;_0x8a87b6[_0x3c700d(0x675)](_0x4316bb,_0x54acf3,_0x3121c9,_0x17039a,_0x1cbdac),_0x8a87b6[_0x3c700d(0x9af)](_0xc1ded5);}if(_0x2d8f32)_0x42a385[_0x3c700d(0x36d)](_0x3c700d(0x6d0));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Movement_MoveToPoint',_0x23664f=>{const _0x181805=_0x444cf3;if(!SceneManager[_0x181805(0xa7a)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x181805(0xab1)](_0x23664f,_0x23664f);const _0x44a53a=$gameTemp[_0x181805(0x95d)](),_0x5671e1=VisuMZ[_0x181805(0x746)](_0x23664f[_0x181805(0x9fe)]),_0x2757f3=_0x23664f['Destination'],_0x176f3e=_0x23664f[_0x181805(0x74c)],_0x2e6956=_0x23664f[_0x181805(0x236)],_0xf21e00=_0x23664f[_0x181805(0xad3)],_0xc41ec=_0x23664f['Duration'],_0xf60119=_0x23664f[_0x181805(0x9ac)],_0x4d301c=_0x23664f[_0x181805(0x1cc)],_0xbc5013=_0x23664f[_0x181805(0x251)],_0x220931=_0x23664f['WaitForMovement'];if(!_0x44a53a)return;for(const _0x434cda of _0x5671e1){if(!_0x434cda)continue;let _0x4fb76b=_0x434cda['battler']()['_baseX'],_0x41c764=_0x434cda[_0x181805(0x516)]()[_0x181805(0x801)];if(_0x2757f3[_0x181805(0x6b8)](/home/i))_0x4fb76b=_0x434cda['battler']()[_0x181805(0x856)],_0x41c764=_0x434cda['battler']()[_0x181805(0xac8)];else{if(_0x2757f3[_0x181805(0x6b8)](/center/i))_0x4fb76b=Graphics[_0x181805(0x902)]/0x2,_0x41c764=Graphics['boxHeight']/0x2;else _0x2757f3[_0x181805(0x6b8)](/point (\d+), (\d+)/i)&&(_0x4fb76b=Number(RegExp['$1']),_0x41c764=Number(RegExp['$2']));}if(_0x176f3e['match'](/none/i))_0x4fb76b+=_0x2e6956,_0x41c764+=_0xf21e00;else{if(_0x176f3e['match'](/horz/i)&&_0x176f3e['match'](/vert/i))_0x4fb76b+=_0x434cda[_0x181805(0xa93)]()?-_0x2e6956:_0x2e6956,_0x41c764+=_0x434cda[_0x181805(0xa93)]()?-_0xf21e00:_0xf21e00;else{if(_0x176f3e[_0x181805(0x6b8)](/horz/i))_0x4fb76b+=_0x434cda[_0x181805(0xa93)]()?-_0x2e6956:_0x2e6956,_0x41c764+=_0xf21e00;else _0x176f3e[_0x181805(0x6b8)](/vert/i)&&(_0x4fb76b+=_0x2e6956,_0x41c764+=_0x434cda[_0x181805(0xa93)]()?-_0xf21e00:_0xf21e00);}}_0x434cda['moveBattlerToPoint'](_0x4fb76b,_0x41c764,_0xc41ec,_0xf60119,_0x4d301c,-0x1),_0x434cda[_0x181805(0x9af)](_0xbc5013);}if(_0x220931)_0x44a53a[_0x181805(0x36d)](_0x181805(0x6d0));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x9bc),_0x531cb3=>{const _0x513d9e=_0x444cf3;if(!SceneManager[_0x513d9e(0xa7a)]())return;if(!$gameSystem[_0x513d9e(0x718)]())return;VisuMZ[_0x513d9e(0xab1)](_0x531cb3,_0x531cb3);const _0x5de34f=$gameTemp[_0x513d9e(0x95d)](),_0x1ec9df=VisuMZ[_0x513d9e(0x746)](_0x531cb3[_0x513d9e(0x2ee)]),_0x5671b0=VisuMZ[_0x513d9e(0x746)](_0x531cb3['Targets2']),_0xa3acd7=_0x531cb3['TargetLocation'];let _0x152771=_0x531cb3['MeleeDistance'];const _0xeba6fd=_0x531cb3[_0x513d9e(0x74c)],_0x4e1977=_0x531cb3['OffsetX'],_0x13716c=_0x531cb3['OffsetY'],_0x16b5c4=_0x531cb3[_0x513d9e(0x6f8)],_0x16351a=_0x531cb3['FaceDirection'],_0x4a8b6b=_0x531cb3['EasingType'],_0x264e72=_0x531cb3[_0x513d9e(0x251)],_0x3d6527=_0x531cb3[_0x513d9e(0xafb)],_0x984b8c=Math[_0x513d9e(0x349)](..._0x5671b0[_0x513d9e(0x7f8)](_0xdfd96c=>_0xdfd96c['battler']()[_0x513d9e(0x3d2)]-_0xdfd96c[_0x513d9e(0x516)]()[_0x513d9e(0x817)]()/0x2)),_0x5c6b83=Math[_0x513d9e(0x642)](..._0x5671b0[_0x513d9e(0x7f8)](_0x19225a=>_0x19225a['battler']()[_0x513d9e(0x3d2)]+_0x19225a[_0x513d9e(0x516)]()['mainSpriteWidth']()/0x2)),_0x5cf7f3=Math['min'](..._0x5671b0['map'](_0x4e8dcb=>_0x4e8dcb[_0x513d9e(0x516)]()[_0x513d9e(0x801)]-_0x4e8dcb[_0x513d9e(0x516)]()[_0x513d9e(0x6bc)]())),_0x1fe2fc=Math[_0x513d9e(0x642)](..._0x5671b0[_0x513d9e(0x7f8)](_0x5bfc93=>_0x5bfc93[_0x513d9e(0x516)]()['_baseY'])),_0x43f777=_0x5671b0['filter'](_0x2b1e0f=>_0x2b1e0f['isActor']())[_0x513d9e(0xa40)],_0x1becb9=_0x5671b0[_0x513d9e(0x4d3)](_0x314864=>_0x314864[_0x513d9e(0x36e)]())[_0x513d9e(0xa40)];let _0x3d10b9=0x0,_0x335275=0x0;if(_0xa3acd7[_0x513d9e(0x6b8)](/front/i))_0x3d10b9=_0x43f777>=_0x1becb9?_0x984b8c:_0x5c6b83;else{if(_0xa3acd7['match'](/middle/i))_0x3d10b9=(_0x984b8c+_0x5c6b83)/0x2,_0x152771=-0x1;else _0xa3acd7['match'](/back/i)&&(_0x3d10b9=_0x43f777>=_0x1becb9?_0x5c6b83:_0x984b8c);}if(_0xa3acd7[_0x513d9e(0x6b8)](/head/i))_0x335275=_0x5cf7f3;else{if(_0xa3acd7[_0x513d9e(0x6b8)](/center/i))_0x335275=(_0x5cf7f3+_0x1fe2fc)/0x2;else _0xa3acd7[_0x513d9e(0x6b8)](/base/i)&&(_0x335275=_0x1fe2fc);}if(!_0x5de34f)return;for(const _0x3bb033 of _0x1ec9df){if(!_0x3bb033)continue;let _0x15a473=_0x3d10b9,_0x59229f=_0x335275;if(_0xeba6fd[_0x513d9e(0x6b8)](/none/i))_0x15a473+=_0x4e1977,_0x59229f+=_0x13716c;else{if(_0xeba6fd[_0x513d9e(0x6b8)](/horz/i)&&_0xeba6fd[_0x513d9e(0x6b8)](/vert/i))_0x15a473+=_0x3bb033[_0x513d9e(0xa93)]()?-_0x4e1977:_0x4e1977,_0x59229f+=_0x3bb033[_0x513d9e(0xa93)]()?-_0x13716c:_0x13716c;else{if(_0xeba6fd['match'](/horz/i))_0x15a473+=_0x3bb033[_0x513d9e(0xa93)]()?-_0x4e1977:_0x4e1977,_0x59229f+=_0x13716c;else _0xeba6fd[_0x513d9e(0x6b8)](/vert/i)&&(_0x15a473+=_0x4e1977,_0x59229f+=_0x3bb033[_0x513d9e(0xa93)]()?-_0x13716c:_0x13716c);}}_0x3bb033[_0x513d9e(0x64e)](_0x15a473,_0x59229f,_0x16b5c4,_0x16351a,_0x4a8b6b,_0x152771),_0x3bb033['requestMotion'](_0x264e72);}if(_0x3d6527)_0x5de34f['setWaitMode'](_0x513d9e(0x6d0));}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x7ef),_0x24eb18=>{const _0x19c01d=_0x444cf3;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x24eb18,_0x24eb18);const _0x382cff=$gameTemp[_0x19c01d(0x95d)](),_0x3ac4f9=VisuMZ[_0x19c01d(0x746)](_0x24eb18[_0x19c01d(0x9fe)]),_0x264349=_0x24eb18[_0x19c01d(0x42d)],_0x648d12=_0x24eb18[_0x19c01d(0x6f8)],_0x3f3251=_0x24eb18[_0x19c01d(0x1cc)],_0x44d8c2=_0x24eb18[_0x19c01d(0x92d)];if(!_0x382cff)return;for(const _0x1419cb of _0x3ac4f9){if(!_0x1419cb)continue;_0x1419cb[_0x19c01d(0x6cf)](_0x264349,_0x648d12,_0x3f3251);}if(_0x44d8c2)_0x382cff[_0x19c01d(0x36d)](_0x19c01d(0x302));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x4fc),_0x1d4f02=>{const _0xd24bd4=_0x444cf3;if(!SceneManager[_0xd24bd4(0xa7a)]())return;VisuMZ['ConvertParams'](_0x1d4f02,_0x1d4f02);const _0x32427c=$gameTemp[_0xd24bd4(0x95d)](),_0x2a7322=VisuMZ['CreateActionSequenceTargets'](_0x1d4f02[_0xd24bd4(0x9fe)]),_0x5b08f0=_0x1d4f02[_0xd24bd4(0xa72)],_0x322d82=_0x1d4f02[_0xd24bd4(0x8ce)],_0x187ea7=_0x1d4f02[_0xd24bd4(0x6f8)],_0x2f18fc=_0x1d4f02[_0xd24bd4(0x1cc)],_0x1d698c=_0x1d4f02[_0xd24bd4(0x877)];if(!_0x32427c)return;for(const _0x4a92c8 of _0x2a7322){if(!_0x4a92c8)continue;_0x4a92c8[_0xd24bd4(0x1e1)](_0x5b08f0,_0x322d82,_0x187ea7,_0x2f18fc);}if(_0x1d698c)_0x32427c['setWaitMode'](_0xd24bd4(0x2c4));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x60c),_0x2e401e=>{const _0x5a8f87=_0x444cf3;if(!SceneManager[_0x5a8f87(0xa7a)]())return;VisuMZ[_0x5a8f87(0xab1)](_0x2e401e,_0x2e401e);const _0x2013eb=$gameTemp['getLastPluginCommandInterpreter'](),_0x44263c=VisuMZ[_0x5a8f87(0x746)](_0x2e401e[_0x5a8f87(0x9fe)]),_0x51782f=_0x2e401e['SkewX'],_0x391f6f=_0x2e401e[_0x5a8f87(0x5cf)],_0x3f8639=_0x2e401e[_0x5a8f87(0x6f8)],_0x3a9c61=_0x2e401e[_0x5a8f87(0x1cc)],_0x331bf6=_0x2e401e[_0x5a8f87(0x7f3)];if(!_0x2013eb)return;for(const _0x23750f of _0x44263c){if(!_0x23750f)continue;_0x23750f[_0x5a8f87(0x766)](_0x51782f,_0x391f6f,_0x3f8639,_0x3a9c61);}if(_0x331bf6)_0x2013eb['setWaitMode'](_0x5a8f87(0x29e));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x2fe),_0x27640b=>{const _0x4b59b0=_0x444cf3;if(!SceneManager[_0x4b59b0(0xa7a)]())return;VisuMZ[_0x4b59b0(0xab1)](_0x27640b,_0x27640b);const _0x26b7d8=$gameTemp[_0x4b59b0(0x95d)](),_0x330fd3=VisuMZ['CreateActionSequenceTargets'](_0x27640b[_0x4b59b0(0x9fe)]),_0x327ed1=_0x27640b[_0x4b59b0(0x46c)],_0x1d5adc=_0x27640b[_0x4b59b0(0x6f8)],_0x203f1d=_0x27640b[_0x4b59b0(0x1cc)],_0x3bf6f6=_0x27640b[_0x4b59b0(0xa49)],_0x4e0b8d=_0x27640b[_0x4b59b0(0x2a3)];if(!_0x26b7d8)return;for(const _0x210ad8 of _0x330fd3){if(!_0x210ad8)continue;_0x210ad8[_0x4b59b0(0x720)](_0x327ed1,_0x1d5adc,_0x203f1d,_0x3bf6f6);}if(_0x4e0b8d)_0x26b7d8['setWaitMode'](_0x4b59b0(0x3ee));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x40c),_0xae3d25=>{const _0xd00232=_0x444cf3;if(!SceneManager[_0xd00232(0xa7a)]())return;const _0x5f0991=$gameTemp[_0xd00232(0x95d)]();if(!_0x5f0991)return;_0x5f0991[_0xd00232(0x36d)](_0xd00232(0x863));}),PluginManager['registerCommand'](pluginData['name'],_0x444cf3(0xace),_0x2ba68d=>{const _0x58fa27=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x25b084=$gameTemp[_0x58fa27(0x95d)]();if(!_0x25b084)return;_0x25b084[_0x58fa27(0x36d)](_0x58fa27(0x604));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Movement_WaitForMovement',_0x59089a=>{const _0x187fe4=_0x444cf3;if(!SceneManager[_0x187fe4(0xa7a)]())return;const _0x300a5f=$gameTemp[_0x187fe4(0x95d)]();if(!_0x300a5f)return;_0x300a5f[_0x187fe4(0x36d)](_0x187fe4(0x6d0));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x255),_0x4b8f5e=>{const _0x5cd8b6=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x202c7b=$gameTemp[_0x5cd8b6(0x95d)]();if(!_0x202c7b)return;_0x202c7b[_0x5cd8b6(0x36d)](_0x5cd8b6(0x302));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0xa37),_0x58a0e4=>{const _0x5d9c73=_0x444cf3;if(!SceneManager[_0x5d9c73(0xa7a)]())return;const _0x4209e0=$gameTemp[_0x5d9c73(0x95d)]();if(!_0x4209e0)return;_0x4209e0['setWaitMode'](_0x5d9c73(0x2c4));}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x69a),_0x31d08d=>{const _0xb12e88=_0x444cf3;if(!SceneManager[_0xb12e88(0xa7a)]())return;const _0x4b83de=$gameTemp[_0xb12e88(0x95d)]();if(!_0x4b83de)return;_0x4b83de['setWaitMode'](_0xb12e88(0x29e));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x2a9),_0x1c1981=>{const _0x44ca6f=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x3491c1=$gameTemp[_0x44ca6f(0x95d)]();if(!_0x3491c1)return;_0x3491c1[_0x44ca6f(0x36d)](_0x44ca6f(0x3ee));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Projectile_Animation',_0x204848=>{const _0x4d2e03=_0x444cf3;if(!SceneManager[_0x4d2e03(0xa7a)]())return;if(!Imported[_0x4d2e03(0x5ce)])return;VisuMZ['ConvertParams'](_0x204848,_0x204848);const _0xf973c3=$gameTemp[_0x4d2e03(0x95d)](),_0x35befe=_0x204848[_0x4d2e03(0x250)];if(!_0xf973c3)return;const _0x4845ad=BattleManager['_spriteset'];if(!_0x4845ad)return;_0x4845ad[_0x4d2e03(0x38e)](_0x204848);if(_0x35befe)_0xf973c3['setWaitMode'](_0x4d2e03(0x4f3));}),PluginManager[_0x444cf3(0x292)](pluginData['name'],'ActSeq_Projectile_Icon',_0x288642=>{const _0x2b3a99=_0x444cf3;if(!SceneManager[_0x2b3a99(0xa7a)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x2b3a99(0xab1)](_0x288642,_0x288642);const _0x1931f1=$gameTemp[_0x2b3a99(0x95d)](),_0x25f5a7=_0x288642['WaitForProjectile'];if(!_0x1931f1)return;const _0x186daa=BattleManager[_0x2b3a99(0x9f5)];if(!_0x186daa)return;_0x186daa[_0x2b3a99(0x38e)](_0x288642);if(_0x25f5a7)_0x1931f1['setWaitMode'](_0x2b3a99(0x4f3));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x78d),_0x21b45a=>{const _0x4b33f8=_0x444cf3;if(!SceneManager[_0x4b33f8(0xa7a)]())return;if(!Imported[_0x4b33f8(0x5ce)])return;VisuMZ['ConvertParams'](_0x21b45a,_0x21b45a);const _0x2581d2=$gameTemp[_0x4b33f8(0x95d)](),_0x1d2aa1=_0x21b45a[_0x4b33f8(0x250)];if(!_0x2581d2)return;const _0x15e65c=BattleManager[_0x4b33f8(0x9f5)];if(!_0x15e65c)return;_0x15e65c[_0x4b33f8(0x38e)](_0x21b45a);if(_0x1d2aa1)_0x2581d2[_0x4b33f8(0x36d)]('battleProjectiles');}),PluginManager[_0x444cf3(0x292)](pluginData['name'],_0x444cf3(0x4d8),_0x53acd8=>{const _0x5894ee=_0x444cf3;if(!SceneManager[_0x5894ee(0xa7a)]())return;if(!Imported[_0x5894ee(0xa74)])return;VisuMZ[_0x5894ee(0xab1)](_0x53acd8,_0x53acd8);const _0x1d7735=$gameTemp[_0x5894ee(0x95d)](),_0x260d68=_0x53acd8[_0x5894ee(0x7f3)];if(!_0x1d7735)return;$gameScreen[_0x5894ee(0x556)](_0x53acd8['SkewX'],_0x53acd8[_0x5894ee(0x5cf)],_0x53acd8[_0x5894ee(0x6f8)],_0x53acd8[_0x5894ee(0x1cc)]);if(_0x260d68)_0x1d7735['setWaitMode'](_0x5894ee(0x865));}),PluginManager['registerCommand'](pluginData['name'],_0x444cf3(0x1eb),_0x2cb9e4=>{const _0x118958=_0x444cf3;if(!SceneManager[_0x118958(0xa7a)]())return;if(!Imported[_0x118958(0xa74)])return;VisuMZ['ConvertParams'](_0x2cb9e4,_0x2cb9e4);const _0x3b3e8e=$gameTemp[_0x118958(0x95d)](),_0x2358b0=_0x2cb9e4[_0x118958(0x7f3)];if(!_0x3b3e8e)return;$gameScreen[_0x118958(0x556)](0x0,0x0,_0x2cb9e4['Duration'],_0x2cb9e4['EasingType']);if(_0x2358b0)_0x3b3e8e[_0x118958(0x36d)](_0x118958(0x865));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x77e),_0x30fe78=>{const _0x151732=_0x444cf3;if(!SceneManager[_0x151732(0xa7a)]())return;if(!Imported[_0x151732(0xa74)])return;const _0x526ca3=$gameTemp[_0x151732(0x95d)]();if(!_0x526ca3)return;_0x526ca3[_0x151732(0x36d)](_0x151732(0x865));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x670),_0x10cb8a=>{const _0xad36a2=_0x444cf3;if(!SceneManager[_0xad36a2(0xa7a)]())return;VisuMZ[_0xad36a2(0xab1)](_0x10cb8a,_0x10cb8a);const _0x37bcb7=$gameTemp['getLastPluginCommandInterpreter'](),_0x5e14c4=_0x10cb8a['Index'],_0x2b6b40=_0x10cb8a[_0xad36a2(0x92e)];if(!_0x37bcb7)return;BattleManager[_0xad36a2(0x8ed)]=_0x5e14c4,BattleManager[_0xad36a2(0x318)]=BattleManager[_0xad36a2(0x4de)]?BattleManager['_allTargets'][BattleManager[_0xad36a2(0x8ed)]]||null:null,BattleManager[_0xad36a2(0x318)]&&_0x2b6b40[_0xad36a2(0x839)]()[_0xad36a2(0x78c)]()!==_0xad36a2(0xad5)&&_0x37bcb7[_0xad36a2(0xa1b)]([_0x2b6b40]);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x979),_0x3c72b5=>{const _0x28fed7=_0x444cf3;if(!SceneManager[_0x28fed7(0xa7a)]())return;VisuMZ['ConvertParams'](_0x3c72b5,_0x3c72b5);const _0x4d2ef5=$gameTemp[_0x28fed7(0x95d)](),_0x57a3cb=_0x3c72b5[_0x28fed7(0x92e)];if(!_0x4d2ef5)return;BattleManager[_0x28fed7(0x8ed)]++,BattleManager[_0x28fed7(0x318)]=BattleManager[_0x28fed7(0x4de)][BattleManager[_0x28fed7(0x8ed)]]||null,BattleManager['_target']&&_0x57a3cb[_0x28fed7(0x839)]()[_0x28fed7(0x78c)]()!=='UNTITLED'&&_0x4d2ef5[_0x28fed7(0xa1b)]([_0x57a3cb]);}),PluginManager['registerCommand'](pluginData[_0x444cf3(0x21a)],_0x444cf3(0xa35),_0xf90b49=>{const _0x7836d9=_0x444cf3;if(!SceneManager[_0x7836d9(0xa7a)]())return;VisuMZ[_0x7836d9(0xab1)](_0xf90b49,_0xf90b49);const _0x5cc71f=$gameTemp[_0x7836d9(0x95d)](),_0x21a158=_0xf90b49['JumpToLabel'];if(!_0x5cc71f)return;BattleManager[_0x7836d9(0x8ed)]--,BattleManager[_0x7836d9(0x318)]=BattleManager['_allTargets'][BattleManager[_0x7836d9(0x8ed)]]||null,BattleManager[_0x7836d9(0x318)]&&_0x21a158[_0x7836d9(0x839)]()['trim']()!==_0x7836d9(0xad5)&&_0x5cc71f['command119']([_0x21a158]);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x1fe),_0x13f8d8=>{const _0x50eb75=_0x444cf3;if(!SceneManager[_0x50eb75(0xa7a)]())return;VisuMZ[_0x50eb75(0xab1)](_0x13f8d8,_0x13f8d8);const _0x446b51=$gameTemp['getLastPluginCommandInterpreter'](),_0x566154=_0x13f8d8[_0x50eb75(0x507)],_0x24ee34=_0x13f8d8['JumpToLabel'];if(!_0x446b51)return;const _0x576fbf=BattleManager[_0x50eb75(0x8ed)];for(;;){BattleManager[_0x50eb75(0x8ed)]=Math['randomInt'](BattleManager[_0x50eb75(0x4de)][_0x50eb75(0xa40)]);if(!_0x566154)break;if(BattleManager['_targetIndex']!==_0x576fbf)break;if(BattleManager[_0x50eb75(0x4de)]['length']<=0x1){BattleManager[_0x50eb75(0x8ed)]=0x0;break;}}BattleManager[_0x50eb75(0x318)]=BattleManager[_0x50eb75(0x4de)][BattleManager[_0x50eb75(0x8ed)]]||null,BattleManager[_0x50eb75(0x318)]&&_0x24ee34[_0x50eb75(0x839)]()['trim']()!==_0x50eb75(0xad5)&&_0x446b51[_0x50eb75(0xa1b)]([_0x24ee34]);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x294),_0x413bbb=>{const _0xc8b257=_0x444cf3;if(!SceneManager[_0xc8b257(0xa7a)]())return;VisuMZ['ConvertParams'](_0x413bbb,_0x413bbb);const _0x274c68=VisuMZ[_0xc8b257(0x746)](_0x413bbb[_0xc8b257(0x9fe)]);for(const _0x26cd92 of _0x274c68){if(!_0x26cd92)continue;if(!_0x26cd92[_0xc8b257(0xa93)]())continue;_0x26cd92[_0xc8b257(0x592)]();}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x760),_0x4b3804=>{const _0x550508=_0x444cf3;if(!SceneManager[_0x550508(0xa7a)]())return;VisuMZ['ConvertParams'](_0x4b3804,_0x4b3804);const _0x2abe37=$gameTemp[_0x550508(0x95d)]();let _0x5e1e3c=![];const _0x586975=_0x4b3804[_0x550508(0x92e)],_0x31d074=VisuMZ[_0x550508(0x746)](_0x4b3804[_0x550508(0x9fe)]);for(const _0x1159ed of _0x31d074){if(!_0x1159ed)continue;if(!_0x1159ed[_0x550508(0xa93)]())continue;_0x1159ed[_0x550508(0x91b)](),_0x1159ed[_0x550508(0x4bc)]()[_0x550508(0xa40)]>0x0?_0x5e1e3c=!![]:_0x1159ed[_0x550508(0x592)]();}_0x5e1e3c&&_0x586975[_0x550508(0x839)]()[_0x550508(0x78c)]()!==_0x550508(0xad5)&&_0x2abe37[_0x550508(0xa1b)]([_0x586975]);}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x603),_0x1d803b=>{const _0x5debbd=_0x444cf3;if(!SceneManager[_0x5debbd(0xa7a)]())return;VisuMZ[_0x5debbd(0xab1)](_0x1d803b,_0x1d803b);let _0x2eac0a=_0x1d803b[_0x5debbd(0x77a)];_0x2eac0a--,_0x2eac0a=Math[_0x5debbd(0x642)](_0x2eac0a,0x0);const _0x20a21a=VisuMZ['CreateActionSequenceTargets'](_0x1d803b[_0x5debbd(0x9fe)]);for(const _0x4f4ca6 of _0x20a21a){if(!_0x4f4ca6)continue;if(!_0x4f4ca6[_0x5debbd(0xa93)]())continue;_0x4f4ca6[_0x5debbd(0x501)](_0x2eac0a);}}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],_0x444cf3(0x922),_0x32e3a9=>{const _0x45fb60=_0x444cf3;if(!SceneManager[_0x45fb60(0xa7a)]())return;if(!Imported[_0x45fb60(0xa74)])return;VisuMZ[_0x45fb60(0xab1)](_0x32e3a9,_0x32e3a9);const _0x514ec9=$gameTemp[_0x45fb60(0x95d)](),_0x548cf9=_0x32e3a9[_0x45fb60(0x8cc)];if(!_0x514ec9)return;$gameScreen[_0x45fb60(0x813)](_0x32e3a9[_0x45fb60(0x3db)],_0x32e3a9[_0x45fb60(0x6f8)],_0x32e3a9[_0x45fb60(0x1cc)]);if(_0x548cf9)_0x514ec9[_0x45fb60(0x36d)](_0x45fb60(0x75d));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Zoom_Reset',_0x3cf3a7=>{const _0x132bd5=_0x444cf3;if(!SceneManager[_0x132bd5(0xa7a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x3cf3a7,_0x3cf3a7);const _0x18baeb=$gameTemp[_0x132bd5(0x95d)](),_0x20cb91=_0x3cf3a7[_0x132bd5(0x8cc)];if(!_0x18baeb)return;$gameScreen[_0x132bd5(0x813)](0x1,_0x3cf3a7[_0x132bd5(0x6f8)],_0x3cf3a7[_0x132bd5(0x1cc)]);if(_0x20cb91)_0x18baeb[_0x132bd5(0x36d)](_0x132bd5(0x75d));}),PluginManager[_0x444cf3(0x292)](pluginData[_0x444cf3(0x21a)],'ActSeq_Zoom_WaitForZoom',_0x504fe7=>{const _0x149462=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x149462(0xa74)])return;const _0x50da3d=$gameTemp[_0x149462(0x95d)]();if(!_0x50da3d)return;_0x50da3d[_0x149462(0x36d)](_0x149462(0x75d));}),VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x988)]=Scene_Boot[_0x444cf3(0x8f4)][_0x444cf3(0x559)],Scene_Boot[_0x444cf3(0x8f4)]['onDatabaseLoaded']=function(){const _0x250f5e=_0x444cf3;this[_0x250f5e(0xa3b)](),this[_0x250f5e(0x44d)](),this[_0x250f5e(0x812)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x250f5e(0x7cf)][_0x250f5e(0x988)][_0x250f5e(0x4a6)](this),this[_0x250f5e(0x617)](),this[_0x250f5e(0xabd)](),this[_0x250f5e(0x28f)](),this[_0x250f5e(0x2a1)]();},Scene_Boot[_0x444cf3(0x8f4)][_0x444cf3(0x617)]=function(){const _0x30b496=_0x444cf3;if(VisuMZ['ParseAllNotetags'])return;this[_0x30b496(0x1d6)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x30b496(0x3b0)]();},Scene_Boot['prototype'][_0x444cf3(0xa3b)]=function(){const _0x5a3d84=_0x444cf3,_0x3c8e3a=$dataSystem[_0x5a3d84(0x558)][_0x5a3d84(0xa40)];for(let _0xe978e6=0x0;_0xe978e6<_0x3c8e3a;_0xe978e6++){const _0x2fff8c=$dataSystem[_0x5a3d84(0x24e)][_0xe978e6];if(_0x2fff8c)continue;$dataSystem[_0x5a3d84(0x24e)][_0xe978e6]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x444cf3(0x8f4)]['process_VisuMZ_BattleCore_PluginParams']=function(){const _0xa6e0ae=_0x444cf3,_0x3fc307=VisuMZ[_0xa6e0ae(0x7cf)][_0xa6e0ae(0x52b)];_0x3fc307[_0xa6e0ae(0xa9f)]['PopupPosition']===undefined&&(_0x3fc307[_0xa6e0ae(0xa9f)][_0xa6e0ae(0x535)]='base'),_0x3fc307[_0xa6e0ae(0x3d8)][_0xa6e0ae(0x33e)]===undefined&&(_0x3fc307['Actor'][_0xa6e0ae(0x33e)]=![]),_0x3fc307[_0xa6e0ae(0x52d)]['SmoothImage']===undefined&&(_0x3fc307['Enemy']['SmoothImage']=!![]),_0x3fc307[_0xa6e0ae(0x3d8)][_0xa6e0ae(0x5fd)]===undefined&&(_0x3fc307[_0xa6e0ae(0x3d8)][_0xa6e0ae(0x5fd)]=![]),_0x3fc307[_0xa6e0ae(0x3d8)][_0xa6e0ae(0x921)]===undefined&&(_0x3fc307['Actor'][_0xa6e0ae(0x921)]=!![]);},VisuMZ['DamageStyles']={},Scene_Boot['prototype'][_0x444cf3(0x812)]=function(){const _0x4fbcab=_0x444cf3;for(const _0x490bb8 of VisuMZ[_0x4fbcab(0x7cf)][_0x4fbcab(0x52b)][_0x4fbcab(0xa9f)][_0x4fbcab(0x6df)]){if(!_0x490bb8)continue;const _0x39855a=_0x490bb8['Name'][_0x4fbcab(0x839)]()[_0x4fbcab(0x78c)]();VisuMZ['DamageStyles'][_0x39855a]=_0x490bb8;}},VisuMZ['BattleCore'][_0x444cf3(0x9da)]={},Scene_Boot['prototype'][_0x444cf3(0x4a4)]=function(){const _0x2cd21a=_0x444cf3,_0x68f39=VisuMZ[_0x2cd21a(0x7cf)][_0x2cd21a(0x9da)],_0x1b2b24='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x3bd685=[[_0x2cd21a(0x9c3),'PRE-'],[_0x2cd21a(0xb24),_0x2cd21a(0xabf)]],_0x6bbcb1=[['%1Apply%2JS',_0x2cd21a(0x723)],['%1Damage%2JS',_0x2cd21a(0x8e9)]],_0x1a31d8=[['',''],[_0x2cd21a(0x60f),_0x2cd21a(0x420)],[_0x2cd21a(0x763),'AS\x20TARGET']];for(const _0x37c360 of _0x6bbcb1){for(const _0x5af8a6 of _0x1a31d8){for(const _0x5c9275 of _0x3bd685){const _0x122d6c=_0x37c360[0x0][_0x2cd21a(0x7d7)](_0x5c9275[0x0],_0x5af8a6[0x0]),_0x47f971=_0x37c360[0x1][_0x2cd21a(0x7d7)](_0x5c9275[0x1],_0x5af8a6[0x1])[_0x2cd21a(0x78c)](),_0x55040b=new RegExp(_0x1b2b24[_0x2cd21a(0x7d7)](_0x47f971),'i');_0x68f39[_0x122d6c]=_0x55040b;}}}const _0x22bf23=[['%1StartActionJS',_0x2cd21a(0x767)],[_0x2cd21a(0x8ff),_0x2cd21a(0x651)]];for(const _0x5968af of _0x22bf23){for(const _0x56383b of _0x3bd685){const _0x33f79f=_0x5968af[0x0][_0x2cd21a(0x7d7)](_0x56383b[0x0]),_0xe42f7c=_0x5968af[0x1][_0x2cd21a(0x7d7)](_0x56383b[0x1]),_0x488f61=new RegExp(_0x1b2b24[_0x2cd21a(0x7d7)](_0xe42f7c),'i');_0x68f39[_0x33f79f]=_0x488f61;}}const _0x10a903=[[_0x2cd21a(0x722),_0x2cd21a(0x994)],['%1EndBattleJS',_0x2cd21a(0x414)],[_0x2cd21a(0xa30),_0x2cd21a(0x8e7)],[_0x2cd21a(0x47b),_0x2cd21a(0x9f6)],[_0x2cd21a(0x34b),'JS\x20ESCAPE\x20SUCCESS'],['EscapeFailureJS','JS\x20ESCAPE\x20FAILURE'],['%1StartTurnJS',_0x2cd21a(0x205)],['%1EndTurnJS',_0x2cd21a(0x883)],[_0x2cd21a(0x21f),_0x2cd21a(0x833)]];for(const _0x37d581 of _0x10a903){for(const _0x55e144 of _0x3bd685){const _0x5ad36c=_0x37d581[0x0][_0x2cd21a(0x7d7)](_0x55e144[0x0]),_0x2cee6c=_0x37d581[0x1][_0x2cd21a(0x7d7)](_0x55e144[0x1]),_0x1ea611=new RegExp(_0x1b2b24[_0x2cd21a(0x7d7)](_0x2cee6c),'i');_0x68f39[_0x5ad36c]=_0x1ea611;}}},Scene_Boot[_0x444cf3(0x8f4)][_0x444cf3(0x1d6)]=function(){const _0x41aa76=_0x444cf3,_0x33dbea=$dataSkills[_0x41aa76(0x66d)]($dataItems);for(const _0x33465f of _0x33dbea){if(!_0x33465f)continue;VisuMZ[_0x41aa76(0x7cf)][_0x41aa76(0x2e9)](_0x33465f);}},Scene_Boot[_0x444cf3(0x8f4)][_0x444cf3(0x742)]=function(){const _0x2b366a=_0x444cf3,_0x3b392a=$dataActors[_0x2b366a(0x66d)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x2f2c60 of _0x3b392a){if(!_0x2f2c60)continue;VisuMZ[_0x2b366a(0x7cf)][_0x2b366a(0xaf9)](_0x2f2c60);}},Scene_Boot[_0x444cf3(0x8f4)][_0x444cf3(0xabd)]=function(){const _0x15cf3e=_0x444cf3,_0x437764=VisuMZ[_0x15cf3e(0x7cf)]['Settings'][_0x15cf3e(0x982)][_0x15cf3e(0xad9)],_0x11d8e2=[];for(const _0x375877 of _0x437764){const _0x18a98d=$dataTroops[_0x375877];if(_0x18a98d)_0x11d8e2[_0x15cf3e(0x87e)](JsonEx[_0x15cf3e(0x5d7)](_0x18a98d));}for(const _0x2ab74d of $dataTroops){if(!_0x2ab74d)continue;for(const _0x45ff3b of _0x11d8e2){if(_0x45ff3b['id']===_0x2ab74d['id'])continue;_0x2ab74d[_0x15cf3e(0x84d)]=_0x2ab74d[_0x15cf3e(0x84d)][_0x15cf3e(0x66d)](_0x45ff3b[_0x15cf3e(0x84d)]);}}},Scene_Boot[_0x444cf3(0x8f4)][_0x444cf3(0x28f)]=function(){const _0x590079=_0x444cf3,_0x36599c=VisuMZ[_0x590079(0x7cf)][_0x590079(0x52b)][_0x590079(0x982)];if(_0x36599c[_0x590079(0x5e6)]>0x0&&$dataCommonEvents[_0x36599c['BattleStartEvent']]){const _0x121571=$dataCommonEvents[_0x36599c['BattleStartEvent']],_0x29f187=_0x121571['list'][_0x590079(0xa40)]-0x2,_0x3b3173=_0x121571[_0x590079(0x628)][_0x29f187];if(_0x3b3173&&_0x3b3173[_0x590079(0x5a0)]!==0xe6){const _0x904386={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x260dbd=_0x121571[_0x590079(0x628)][_0x590079(0x702)]();_0x121571[_0x590079(0x628)][_0x590079(0x793)](_0x904386),_0x121571['list'][_0x590079(0x793)](_0x260dbd);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x28ad32=_0x444cf3;VisuMZ[_0x28ad32(0x7cf)][_0x28ad32(0x4fd)](),VisuMZ['BattleCore'][_0x28ad32(0x567)]($dataSkills),VisuMZ[_0x28ad32(0x7cf)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x4fd)]=function(){const _0xf3a00a=_0x444cf3;VisuMZ[_0xf3a00a(0x7cf)][_0xf3a00a(0x91a)]={};for(const _0x550a9e of $dataCommonEvents){if(!_0x550a9e)continue;if(_0x550a9e[_0xf3a00a(0x21a)][_0xf3a00a(0x6b8)](/\[(.*)\]/i)){let _0x4a301f=String(RegExp['$1'])['replace'](/,/g,'')[_0xf3a00a(0x839)]()[_0xf3a00a(0x78c)]();VisuMZ['BattleCore'][_0xf3a00a(0x91a)][_0x4a301f]=_0x550a9e['id'];}}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x567)]=function(_0x1e979b){const _0x4e93c4=_0x444cf3;for(const _0x231630 of _0x1e979b){if(!_0x231630)continue;VisuMZ['BattleCore'][_0x4e93c4(0x5af)](_0x231630);}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x5af)]=function(_0x34ae75){const _0x2fc863=_0x444cf3;if(!_0x34ae75)return;if(!_0x34ae75[_0x2fc863(0x750)])return;VisuMZ['BattleCore'][_0x2fc863(0x91a)]=VisuMZ[_0x2fc863(0x7cf)]['_commonEventKey']||{};const _0x1c610c=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x531c7f=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0xab2717=[];const _0x17e9ef=_0x34ae75[_0x2fc863(0x1cd)][_0x2fc863(0x6b8)](_0x1c610c);if(_0x17e9ef){for(const _0x531e88 of _0x17e9ef){_0x531e88['match'](_0x1c610c);const _0x27bdfa=String(RegExp['$1'])[_0x2fc863(0x364)](',')[_0x2fc863(0x7f8)](_0x5a72c8=>String(_0x5a72c8)[_0x2fc863(0x839)]()[_0x2fc863(0x78c)]());_0xab2717=_0xab2717[_0x2fc863(0x66d)](_0x27bdfa);}!_0x34ae75[_0x2fc863(0x1cd)][_0x2fc863(0x6b8)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x34ae75[_0x2fc863(0x1cd)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}if(_0x34ae75[_0x2fc863(0x1cd)][_0x2fc863(0x6b8)](_0x531c7f)){const _0x3a2a9f=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x2fc863(0x7f8)](_0x1ef078=>String(_0x1ef078)[_0x2fc863(0x839)]()['trim']());_0xab2717=_0xab2717[_0x2fc863(0x66d)](_0x3a2a9f);!_0x34ae75['note'][_0x2fc863(0x6b8)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x34ae75[_0x2fc863(0x1cd)]+=_0x2fc863(0x417));;}for(const _0xd9cfb2 of _0xab2717){if(VisuMZ[_0x2fc863(0x7cf)][_0x2fc863(0x91a)][_0xd9cfb2]){const _0x5b86e9=VisuMZ[_0x2fc863(0x7cf)][_0x2fc863(0x91a)][_0xd9cfb2],_0x324c14={'code':0x2c,'dataId':_0x5b86e9,'value1':0x1,'value2':0x0};_0x34ae75[_0x2fc863(0x750)][_0x2fc863(0x87e)](_0x324c14);}}},Scene_Boot[_0x444cf3(0x8f4)][_0x444cf3(0x3b0)]=function(){const _0x4e0ecf=_0x444cf3,_0x52b5e0=$dataSkills['concat']($dataItems);for(const _0x46f2cd of _0x52b5e0){if(!_0x46f2cd)continue;VisuMZ[_0x4e0ecf(0x7cf)][_0x4e0ecf(0x1ed)](_0x46f2cd);}},VisuMZ[_0x444cf3(0x7cf)]['ParseActorNotetags']=VisuMZ['ParseActorNotetags'],VisuMZ[_0x444cf3(0x36b)]=function(_0x41225f){const _0x30eaa6=_0x444cf3;VisuMZ['BattleCore'][_0x30eaa6(0x36b)]&&VisuMZ[_0x30eaa6(0x7cf)][_0x30eaa6(0x36b)][_0x30eaa6(0x4a6)](this,_0x41225f),VisuMZ['BattleCore'][_0x30eaa6(0xaf9)](_0x41225f);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x6d9)]=VisuMZ[_0x444cf3(0x6d9)],VisuMZ['ParseClassNotetags']=function(_0x2689c6){const _0x8c6197=_0x444cf3;VisuMZ['BattleCore'][_0x8c6197(0x6d9)]&&VisuMZ[_0x8c6197(0x7cf)][_0x8c6197(0x6d9)][_0x8c6197(0x4a6)](this,_0x2689c6),VisuMZ['BattleCore'][_0x8c6197(0xaf9)](_0x2689c6);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xa90)]=VisuMZ[_0x444cf3(0xa90)],VisuMZ[_0x444cf3(0xa90)]=function(_0x54dc28){const _0x828680=_0x444cf3;VisuMZ[_0x828680(0x7cf)][_0x828680(0xa90)]&&VisuMZ[_0x828680(0x7cf)][_0x828680(0xa90)][_0x828680(0x4a6)](this,_0x54dc28),VisuMZ['BattleCore'][_0x828680(0x2e9)](_0x54dc28),VisuMZ[_0x828680(0x7cf)]['Parse_Notetags_Targets'](_0x54dc28);},VisuMZ['BattleCore'][_0x444cf3(0xb27)]=VisuMZ[_0x444cf3(0xb27)],VisuMZ[_0x444cf3(0xb27)]=function(_0x1fbc6d){const _0x2d1f86=_0x444cf3;VisuMZ[_0x2d1f86(0x7cf)][_0x2d1f86(0xb27)]&&VisuMZ['BattleCore'][_0x2d1f86(0xb27)]['call'](this,_0x1fbc6d),VisuMZ[_0x2d1f86(0x7cf)][_0x2d1f86(0x2e9)](_0x1fbc6d),VisuMZ['BattleCore'][_0x2d1f86(0x1ed)](_0x1fbc6d);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x67e)]=VisuMZ[_0x444cf3(0x67e)],VisuMZ[_0x444cf3(0x67e)]=function(_0x4cc5e4){const _0x55297b=_0x444cf3;VisuMZ[_0x55297b(0x7cf)][_0x55297b(0x67e)]&&VisuMZ[_0x55297b(0x7cf)]['ParseWeaponNotetags']['call'](this,_0x4cc5e4),VisuMZ[_0x55297b(0x7cf)]['Parse_Notetags_TraitObjects'](_0x4cc5e4);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x1d2)]=VisuMZ[_0x444cf3(0x1d2)],VisuMZ['ParseArmorNotetags']=function(_0x5a2c7f){const _0xfef477=_0x444cf3;VisuMZ[_0xfef477(0x7cf)][_0xfef477(0x1d2)]&&VisuMZ['BattleCore'][_0xfef477(0x1d2)][_0xfef477(0x4a6)](this,_0x5a2c7f),VisuMZ[_0xfef477(0x7cf)]['Parse_Notetags_TraitObjects'](_0x5a2c7f);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x600)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x444cf3(0x600)]=function(_0x4dfad1){const _0x420788=_0x444cf3;VisuMZ[_0x420788(0x7cf)]['ParseEnemyNotetags']&&VisuMZ[_0x420788(0x7cf)]['ParseEnemyNotetags'][_0x420788(0x4a6)](this,_0x4dfad1),VisuMZ[_0x420788(0x7cf)][_0x420788(0xaf9)](_0x4dfad1);},VisuMZ[_0x444cf3(0x7cf)]['ParseStateNotetags']=VisuMZ['ParseStateNotetags'],VisuMZ[_0x444cf3(0x8aa)]=function(_0x516921){const _0x3b0b51=_0x444cf3;VisuMZ['BattleCore'][_0x3b0b51(0x8aa)]&&VisuMZ[_0x3b0b51(0x7cf)][_0x3b0b51(0x8aa)][_0x3b0b51(0x4a6)](this,_0x516921),VisuMZ[_0x3b0b51(0x7cf)][_0x3b0b51(0xaf9)](_0x516921);},VisuMZ[_0x444cf3(0x7cf)]['Parse_Notetags_Action']=function(_0x1423e4){const _0x206bbf=_0x444cf3,_0x47ceb3=['PreApplyJS',_0x206bbf(0x41d),_0x206bbf(0x8db),_0x206bbf(0x75b),_0x206bbf(0x66a),_0x206bbf(0xb30),_0x206bbf(0xa83),_0x206bbf(0x857)];for(const _0x3b1bcd of _0x47ceb3){VisuMZ[_0x206bbf(0x7cf)]['createJS'](_0x1423e4,_0x3b1bcd);}const _0x24294a=_0x1423e4[_0x206bbf(0x1cd)];_0x24294a[_0x206bbf(0x6b8)](/<ALWAYS CRITICAL/i)&&(_0x1423e4[_0x206bbf(0x319)][_0x206bbf(0x69c)]=!![]),_0x24294a['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x1423e4[_0x206bbf(0x764)]=Math['max'](0x1,Number(RegExp['$1']))),_0x24294a[_0x206bbf(0x6b8)](/<TARGET:[ ](.*)>/i)&&(_0x1423e4['scope']=String(RegExp['$1'])['toUpperCase']()[_0x206bbf(0x78c)]());},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xaf9)]=function(_0x31e02a){const _0x14fa2e=_0x444cf3,_0x36967e=['PreApplyAsUserJS',_0x14fa2e(0x52c),_0x14fa2e(0x753),_0x14fa2e(0x244),_0x14fa2e(0x476),_0x14fa2e(0x752),_0x14fa2e(0x2ac),'PostDamageAsTargetJS',_0x14fa2e(0x66a),'PostStartActionJS',_0x14fa2e(0xa83),_0x14fa2e(0x857),_0x14fa2e(0x4eb),_0x14fa2e(0xa46),'PreEndBattleJS',_0x14fa2e(0xa68),'BattleVictoryJS',_0x14fa2e(0x47b),_0x14fa2e(0x34b),_0x14fa2e(0x6f0),'PreStartTurnJS','PostStartTurnJS','PreEndTurnJS',_0x14fa2e(0x94a),_0x14fa2e(0x21b),_0x14fa2e(0x45d)];for(const _0x121bea of _0x36967e){VisuMZ[_0x14fa2e(0x7cf)][_0x14fa2e(0x712)](_0x31e02a,_0x121bea);}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x1ed)]=function(_0x46bdf8){const _0x5c2ab9=_0x444cf3,_0x42b4fe=_0x46bdf8[_0x5c2ab9(0x1cd)];if(_0x42b4fe['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x2c36cc=String(RegExp['$1']),_0xda0a51=VisuMZ[_0x5c2ab9(0x7cf)][_0x5c2ab9(0x674)](_0x46bdf8,_0x5c2ab9(0x9fe));VisuMZ[_0x5c2ab9(0x7cf)][_0x5c2ab9(0x879)](_0x2c36cc,_0xda0a51);}if(_0x42b4fe[_0x5c2ab9(0x6b8)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x3d3785=String(RegExp['$1']),_0x587fed=VisuMZ['BattleCore'][_0x5c2ab9(0x674)](_0x46bdf8,'CommandVisible');VisuMZ[_0x5c2ab9(0x7cf)][_0x5c2ab9(0x550)](_0x3d3785,_0x587fed);}},VisuMZ['BattleCore']['JS']={},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x712)]=function(_0x54d14b,_0x280a98){const _0x1e12bc=_0x444cf3,_0x1ea4d1=_0x54d14b['note'];if(_0x1ea4d1['match'](VisuMZ[_0x1e12bc(0x7cf)][_0x1e12bc(0x9da)][_0x280a98])){const _0x58089f=RegExp['$1'],_0x71c1c9=_0x1e12bc(0xaa3)[_0x1e12bc(0x7d7)](_0x58089f),_0x440a46=VisuMZ['BattleCore']['createKeyJS'](_0x54d14b,_0x280a98);VisuMZ[_0x1e12bc(0x7cf)]['JS'][_0x440a46]=new Function(_0x71c1c9);}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x674)]=function(_0x33bea5,_0x42f5d0){const _0xdc3431=_0x444cf3;if(VisuMZ['createKeyJS'])return VisuMZ[_0xdc3431(0x674)](_0x33bea5,_0x42f5d0);let _0x29e3dc='';if($dataActors[_0xdc3431(0xa60)](_0x33bea5))_0x29e3dc=_0xdc3431(0x9db)[_0xdc3431(0x7d7)](_0x33bea5['id'],_0x42f5d0);if($dataClasses['includes'](_0x33bea5))_0x29e3dc=_0xdc3431(0x1ce)[_0xdc3431(0x7d7)](_0x33bea5['id'],_0x42f5d0);if($dataSkills[_0xdc3431(0xa60)](_0x33bea5))_0x29e3dc=_0xdc3431(0xacc)[_0xdc3431(0x7d7)](_0x33bea5['id'],_0x42f5d0);if($dataItems[_0xdc3431(0xa60)](_0x33bea5))_0x29e3dc=_0xdc3431(0x86e)[_0xdc3431(0x7d7)](_0x33bea5['id'],_0x42f5d0);if($dataWeapons['includes'](_0x33bea5))_0x29e3dc=_0xdc3431(0x282)['format'](_0x33bea5['id'],_0x42f5d0);if($dataArmors['includes'](_0x33bea5))_0x29e3dc=_0xdc3431(0x9a3)[_0xdc3431(0x7d7)](_0x33bea5['id'],_0x42f5d0);if($dataEnemies[_0xdc3431(0xa60)](_0x33bea5))_0x29e3dc=_0xdc3431(0x2bd)[_0xdc3431(0x7d7)](_0x33bea5['id'],_0x42f5d0);if($dataStates['includes'](_0x33bea5))_0x29e3dc=_0xdc3431(0xaaa)['format'](_0x33bea5['id'],_0x42f5d0);return _0x29e3dc;},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x879)]=function(_0x2f82da,_0x2da6f6){const _0x39e408=_0x444cf3,_0x24c1df=_0x39e408(0x2ad)[_0x39e408(0x7d7)](_0x2f82da);VisuMZ['BattleCore']['JS'][_0x2da6f6]=new Function(_0x24c1df);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x550)]=function(_0x52e73e,_0x472e94){const _0x28daf4=_0x444cf3,_0x1f8a7e=_0x28daf4(0x3fa)['format'](_0x52e73e);VisuMZ[_0x28daf4(0x7cf)]['JS'][_0x472e94]=new Function(_0x1f8a7e);},TextManager[_0x444cf3(0x487)]=VisuMZ[_0x444cf3(0x7cf)]['Settings'][_0x444cf3(0x1c7)][_0x444cf3(0xa57)],TextManager[_0x444cf3(0xa5c)]=VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)][_0x444cf3(0x579)][_0x444cf3(0x39e)],TextManager[_0x444cf3(0xad4)]=VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)]['AutoBattle'][_0x444cf3(0x5c4)],TextManager[_0x444cf3(0x607)]=VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)][_0x444cf3(0x93a)][_0x444cf3(0x601)],ColorManager[_0x444cf3(0x9c8)]=function(_0x31f5bf){const _0x3b29f1=_0x444cf3;return _0x31f5bf=String(_0x31f5bf),_0x31f5bf[_0x3b29f1(0x6b8)](/#(.*)/i)?_0x3b29f1(0x3a2)[_0x3b29f1(0x7d7)](String(RegExp['$1'])):this[_0x3b29f1(0x3f1)](Number(_0x31f5bf));},DataManager[_0x444cf3(0x4b6)]=function(_0x2a9c28){const _0x361738=_0x444cf3;if(_0x2a9c28[_0x361738(0x1cd)][_0x361738(0x6b8)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x15eac0=String(RegExp['$1'])[_0x361738(0x839)]()['trim']();if(_0x15eac0==='MANUAL')return _0x361738(0x6c9);if(VisuMZ[_0x361738(0x885)][_0x15eac0])return _0x15eac0;}const _0x37ab99=VisuMZ['BattleCore'][_0x361738(0x52b)][_0x361738(0xa9f)]['DefaultDamageStyle'][_0x361738(0x839)]()[_0x361738(0x78c)]();if(VisuMZ['DamageStyles'][_0x37ab99])return _0x37ab99;return _0x361738(0x6c9);},DataManager[_0x444cf3(0x383)]=function(_0x1247a8){const _0x494de9=_0x444cf3;_0x1247a8=_0x1247a8['toUpperCase']()[_0x494de9(0x78c)](),this[_0x494de9(0x3b2)]=this[_0x494de9(0x3b2)]||{};if(this[_0x494de9(0x3b2)][_0x1247a8])return this[_0x494de9(0x3b2)][_0x1247a8];for(let _0x87dcf0=0x1;_0x87dcf0<0x64;_0x87dcf0++){if(!$dataSystem[_0x494de9(0x4c2)][_0x87dcf0])continue;let _0x96a5bd=$dataSystem['skillTypes'][_0x87dcf0][_0x494de9(0x839)]()[_0x494de9(0x78c)]();_0x96a5bd=_0x96a5bd[_0x494de9(0x5c9)](/\x1I\[(\d+)\]/gi,''),_0x96a5bd=_0x96a5bd[_0x494de9(0x5c9)](/\\I\[(\d+)\]/gi,''),this[_0x494de9(0x3b2)][_0x96a5bd]=_0x87dcf0;}return this[_0x494de9(0x3b2)][_0x1247a8]||0x0;},DataManager[_0x444cf3(0x8ac)]=function(_0x2bd4ac){const _0x36e9c1=_0x444cf3;_0x2bd4ac=_0x2bd4ac[_0x36e9c1(0x839)]()[_0x36e9c1(0x78c)](),this['_skillIDs']=this['_skillIDs']||{};if(this['_skillIDs'][_0x2bd4ac])return this[_0x36e9c1(0x6ba)][_0x2bd4ac];for(const _0x3ac5a3 of $dataSkills){if(!_0x3ac5a3)continue;this['_skillIDs'][_0x3ac5a3[_0x36e9c1(0x21a)][_0x36e9c1(0x839)]()['trim']()]=_0x3ac5a3['id'];}return this[_0x36e9c1(0x6ba)][_0x2bd4ac]||0x0;},DataManager[_0x444cf3(0x9b4)]=function(_0x541c4b){const _0x296145=_0x444cf3;_0x541c4b=_0x541c4b[_0x296145(0x839)]()[_0x296145(0x78c)](),this[_0x296145(0x76d)]=this[_0x296145(0x76d)]||{};if(this['_enemyIDs'][_0x541c4b])return this['_enemyIDs'][_0x541c4b];for(const _0x1bf544 of $dataEnemies){if(!_0x1bf544)continue;this[_0x296145(0x76d)][_0x1bf544[_0x296145(0x21a)][_0x296145(0x839)]()[_0x296145(0x78c)]()]=_0x1bf544['id'];}return this[_0x296145(0x76d)][_0x541c4b]||0x0;},DataManager[_0x444cf3(0x7fc)]=function(_0x3d04e4){const _0x907563=_0x444cf3;_0x3d04e4=_0x3d04e4[_0x907563(0x839)]()[_0x907563(0x78c)](),this['_wtypeIDs']=this['_wtypeIDs']||{};if(this[_0x907563(0x99c)][_0x3d04e4])return this[_0x907563(0x99c)][_0x3d04e4];for(let _0x1d2bb7=0x1;_0x1d2bb7<0x64;_0x1d2bb7++){if(!$dataSystem[_0x907563(0x558)][_0x1d2bb7])continue;let _0x14bde1=$dataSystem[_0x907563(0x558)][_0x1d2bb7][_0x907563(0x839)]()[_0x907563(0x78c)]();_0x14bde1=_0x14bde1[_0x907563(0x5c9)](/\x1I\[(\d+)\]/gi,''),_0x14bde1=_0x14bde1[_0x907563(0x5c9)](/\\I\[(\d+)\]/gi,''),this[_0x907563(0x99c)][_0x14bde1]=_0x1d2bb7;}return this[_0x907563(0x99c)][_0x907563(0x980)]=0x0,this[_0x907563(0x99c)][_0x3d04e4]||0x0;},DataManager[_0x444cf3(0x90c)]=function(_0x4d90db){const _0x2bf32f=_0x444cf3,_0x4a6c31='\x5cI[%1]%2';let _0x5c59ba=_0x4d90db[_0x2bf32f(0x895)],_0x10e84d=_0x4d90db[_0x2bf32f(0x21a)];const _0x40c719=_0x4d90db[_0x2bf32f(0x1cd)];return _0x40c719[_0x2bf32f(0x6b8)](/<DISPLAY ICON: (\d+)>/i)&&(_0x5c59ba=Number(RegExp['$1'])),_0x40c719[_0x2bf32f(0x6b8)](/<DISPLAY TEXT: (.*)>/i)&&(_0x10e84d=String(RegExp['$1'])),_0x4a6c31[_0x2bf32f(0x7d7)](_0x5c59ba,_0x10e84d);},DataManager['battleCommandName']=function(_0x5b0c0a){const _0x46a43a=_0x444cf3;return _0x5b0c0a[_0x46a43a(0x1cd)][_0x46a43a(0x6b8)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x5b0c0a[_0x46a43a(0x21a)];},DataManager[_0x444cf3(0x446)]=function(_0x4f5ac9){const _0x4261eb=_0x444cf3;return _0x4f5ac9['note'][_0x4261eb(0x6b8)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x4f5ac9['iconIndex'];},DataManager[_0x444cf3(0x912)]=function(_0x2a7cd7){const _0x219d99=_0x444cf3,_0xce63b1=$dataEnemies[_0x2a7cd7];if(_0xce63b1){if(_0xce63b1[_0x219d99(0x1cd)][_0x219d99(0x6b8)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x51dbea=String(RegExp['$1'])[_0x219d99(0x364)](/[\r\n]+/)['remove'](''),_0x23f7d9=this[_0x219d99(0xa22)](_0x51dbea);_0x2a7cd7=this['getEnemyIdWithName'](_0x23f7d9)||_0x2a7cd7,_0x2a7cd7=DataManager[_0x219d99(0x912)](_0x2a7cd7);}}return _0x2a7cd7;},DataManager[_0x444cf3(0xa22)]=function(_0x48e832){const _0x417f27=_0x444cf3;let _0x470dc7=0x0;const _0x29c05f={};for(const _0x2ae8f4 of _0x48e832){if(_0x2ae8f4[_0x417f27(0x6b8)](/(.*):[ ](\d+)/i)){const _0x36eaa3=String(RegExp['$1'])[_0x417f27(0x78c)](),_0x5358ed=Number(RegExp['$2']);_0x29c05f[_0x36eaa3]=_0x5358ed,_0x470dc7+=_0x5358ed;}else{if(_0x2ae8f4['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x55f684=String(RegExp['$1'])[_0x417f27(0x78c)](),_0x4eb685=Number(RegExp['$2']);_0x29c05f[_0x55f684]=_0x4eb685,_0x470dc7+=_0x4eb685;}else _0x2ae8f4!==''&&(_0x29c05f[_0x2ae8f4]=0x1,_0x470dc7++);}}if(_0x470dc7<=0x0)return'';let _0x1ac21a=Math[_0x417f27(0x641)]()*_0x470dc7;for(const _0x239cb8 in _0x29c05f){_0x1ac21a-=_0x29c05f[_0x239cb8];if(_0x1ac21a<=0x0)return _0x239cb8;}return'';},DataManager[_0x444cf3(0x54a)]=function(_0x1404e2){const _0x3229da=_0x444cf3;if(!_0x1404e2)return![];if(!VisuMZ[_0x3229da(0x7cf)][_0x3229da(0x52b)]['ActionSequence'][_0x3229da(0xaf0)])return![];if(_0x1404e2[_0x3229da(0x1cd)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x1404e2[_0x3229da(0x1cd)][_0x3229da(0x6b8)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x15797b of _0x1404e2['effects']){if(!_0x15797b)continue;if(_0x15797b[_0x3229da(0x5a0)]===Game_Action[_0x3229da(0x416)])return!![];}return![];},DataManager[_0x444cf3(0x676)]=function(_0x562675){const _0x105a71=_0x444cf3,_0x53762b=$dataTroops[_0x562675];if(!_0x53762b)return'';let _0x8a644d='';_0x8a644d+=_0x53762b['name'];for(const _0x260424 of _0x53762b[_0x105a71(0x84d)]){for(const _0x212bbd of _0x260424['list']){[0x6c,0x198]['includes'](_0x212bbd[_0x105a71(0x5a0)])&&(_0x8a644d+='\x0a',_0x8a644d+=_0x212bbd[_0x105a71(0x3fe)][0x0]);}}return _0x8a644d;},ConfigManager[_0x444cf3(0x3ce)]=ConfigManager[_0x444cf3(0x3ce)]??![],ConfigManager[_0x444cf3(0x384)]=ConfigManager[_0x444cf3(0x384)]??![],ConfigManager[_0x444cf3(0x607)]=ConfigManager[_0x444cf3(0x607)]??!![],VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x482)]=ConfigManager[_0x444cf3(0x6b9)],ConfigManager[_0x444cf3(0x6b9)]=function(){const _0x8359aa=_0x444cf3,_0xd88118=VisuMZ[_0x8359aa(0x7cf)][_0x8359aa(0x482)][_0x8359aa(0x4a6)](this);return _0xd88118[_0x8359aa(0x3ce)]=this[_0x8359aa(0x3ce)],_0xd88118[_0x8359aa(0x384)]=this[_0x8359aa(0x384)],_0xd88118[_0x8359aa(0x607)]=this[_0x8359aa(0x607)],_0xd88118;},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xa9e)]=ConfigManager[_0x444cf3(0x9e8)],ConfigManager['applyData']=function(_0x366688){const _0x4bc1ef=_0x444cf3;VisuMZ[_0x4bc1ef(0x7cf)][_0x4bc1ef(0xa9e)][_0x4bc1ef(0x4a6)](this,_0x366688),'autoBattleAtStart'in _0x366688?this[_0x4bc1ef(0x3ce)]=_0x366688[_0x4bc1ef(0x3ce)]:this[_0x4bc1ef(0x3ce)]=![],_0x4bc1ef(0x384)in _0x366688?this['autoBattleUseSkills']=_0x366688[_0x4bc1ef(0x384)]:this[_0x4bc1ef(0x384)]=![],'visualHpGauge'in _0x366688?this[_0x4bc1ef(0x607)]=_0x366688[_0x4bc1ef(0x607)]:this[_0x4bc1ef(0x607)]=!![];},ImageManager[_0x444cf3(0x35b)]=ImageManager[_0x444cf3(0x35b)]||0x9,ImageManager['svActorVertCells']=ImageManager[_0x444cf3(0x740)]||0x6,VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x465)]=BattleManager[_0x444cf3(0x5fb)],BattleManager[_0x444cf3(0x5fb)]=function(_0xe70e10,_0x9c869e,_0x4d5dc0){const _0x1f8fa4=_0x444cf3;VisuMZ[_0x1f8fa4(0x7cf)][_0x1f8fa4(0x465)][_0x1f8fa4(0x4a6)](this,_0xe70e10,_0x9c869e,_0x4d5dc0),this[_0x1f8fa4(0x395)]={};},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x905)]=BattleManager['initMembers'],BattleManager[_0x444cf3(0x990)]=function(){const _0x43a6c0=_0x444cf3;VisuMZ[_0x43a6c0(0x7cf)]['BattleManager_initMembers'][_0x43a6c0(0x4a6)](this),this[_0x43a6c0(0xa8b)]=[];},BattleManager[_0x444cf3(0x2bc)]=function(){const _0x2572b9=_0x444cf3;if(!SceneManager[_0x2572b9(0xa7a)]())return;const _0x35e51e=SceneManager[_0x2572b9(0xa67)][_0x2572b9(0x842)];if(_0x35e51e)_0x35e51e[_0x2572b9(0x706)]();},BattleManager[_0x444cf3(0x53f)]=function(){const _0x55582b=_0x444cf3;if(BattleManager['isTpb']())return _0x55582b(0xaac);return'DTB';},BattleManager[_0x444cf3(0x3bf)]=function(_0x132634){const _0x53e4df=_0x444cf3;return _0x132634=_0x132634[_0x53e4df(0x839)]()[_0x53e4df(0x78c)](),this[_0x53e4df(0x53f)]()===_0x132634;},BattleManager[_0x444cf3(0x4d7)]=function(){return this['isBattleSys']('DTB');},BattleManager[_0x444cf3(0x62a)]=function(){const _0x2ec240=_0x444cf3;return this[_0x2ec240(0x4d7)]();},BattleManager['isTickBased']=function(){const _0x5218be=_0x444cf3;return!this[_0x5218be(0x62a)]();},BattleManager['isTeamBased']=function(){const _0x378d5e=_0x444cf3;return!this['isTurnBased']()&&!this[_0x378d5e(0x929)]();},BattleManager['getBattlerFromKey']=function(_0x65b9c1){const _0x568376=_0x444cf3;this['_battlerKeyCache']=this[_0x568376(0x395)]||{};if(this[_0x568376(0x395)][_0x65b9c1]!==undefined)return this[_0x568376(0x395)][_0x65b9c1];this[_0x568376(0x395)][_0x65b9c1]=null;const _0x48e6a3=this[_0x568376(0x4ff)](),_0xcce913=_0x48e6a3[_0x568376(0x2d3)](_0x590950=>_0x590950['battlerKey']()===_0x65b9c1);if(_0xcce913)this['_battlerKeyCache'][_0x65b9c1]=_0xcce913;return this[_0x568376(0x395)][_0x65b9c1];},Game_BattlerBase['prototype']['battlerKey']=function(){const _0x3c8bfa=_0x444cf3;return _0x3c8bfa(0x815)[_0x3c8bfa(0x7d7)](this[_0x3c8bfa(0xa93)]()?_0x3c8bfa(0x37a):_0x3c8bfa(0x452),this[_0x3c8bfa(0x21a)]());},Game_Action[_0x444cf3(0x8f4)]['setTargetBattlerKey']=function(_0x4f3d96){const _0x3853da=_0x444cf3;if(this[_0x3853da(0x90e)]!=='')return;typeof _0x4f3d96===_0x3853da(0x950)?this[_0x3853da(0x90e)]=_0x4f3d96[_0x3853da(0x1fd)]()[_0x3853da(0x78c)]():this['_targetBattlerKey']=_0x4f3d96[_0x3853da(0x32c)]();},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x37d)]=function(){const _0x262514=_0x444cf3;return[this[_0x262514(0x252)]()];},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x252)]=function(){const _0x4be854=_0x444cf3,_0x3abeff=this[_0x4be854(0x90e)]||'',_0x361c1f=BattleManager[_0x4be854(0x8a8)](_0x3abeff);if(!_0x361c1f)return this['getBattlerKeyTargetReplacement']();if(!_0x361c1f[_0x4be854(0xad2)]())this[_0x4be854(0x93c)]();return _0x361c1f;},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x93c)]=function(){const _0x52375f=_0x444cf3,_0x364e22=this[_0x52375f(0x90e)];return _0x364e22['match'](/ACTOR/i)?this[_0x52375f(0x4e3)]()[_0x52375f(0x1f9)]():this[_0x52375f(0xa3f)]()[_0x52375f(0x1f9)]();},BattleManager[_0x444cf3(0x86f)]=function(){const _0x9a1ce2=_0x444cf3;return this[_0x9a1ce2(0x4ff)]()[_0x9a1ce2(0x4d3)](_0x2a6393=>_0x2a6393['isSelected']());},BattleManager[_0x444cf3(0x840)]=function(_0x57f5b9){const _0x2005b5=_0x444cf3;_0x57f5b9===_0x2005b5(0xa30)&&(this[_0x2005b5(0xa20)]=!![]),$gameParty['processBattleCoreJS'](_0x57f5b9),$gameTroop[_0x2005b5(0x840)](_0x57f5b9);},VisuMZ['BattleCore'][_0x444cf3(0x84b)]=BattleManager[_0x444cf3(0x665)],BattleManager['startBattle']=function(){const _0x2cb2d8=_0x444cf3;this[_0x2cb2d8(0x619)]=![],this[_0x2cb2d8(0x6b7)]=ConfigManager[_0x2cb2d8(0x3ce)],this[_0x2cb2d8(0xa20)]=![],this[_0x2cb2d8(0x840)](_0x2cb2d8(0x4eb)),VisuMZ[_0x2cb2d8(0x7cf)][_0x2cb2d8(0x84b)]['call'](this),this[_0x2cb2d8(0x840)]('PostStartBattleJS');},BattleManager[_0x444cf3(0x841)]=function(_0x5912a0){const _0x3c51f8=_0x444cf3,_0x2a525e=VisuMZ['BattleCore'][_0x3c51f8(0x52b)]['Mechanics'];_0x5912a0!==_0x3c51f8(0x76b)&&_0x2a525e['BattleEndEvent']&&VisuMZ[_0x3c51f8(0x7cf)][_0x3c51f8(0xad0)](_0x2a525e[_0x3c51f8(0x6c0)])&&$gameTemp[_0x3c51f8(0xaab)](_0x2a525e[_0x3c51f8(0x6c0)]);const _0x2dd805=_0x3c51f8(0x4dc)['format'](_0x5912a0);_0x2a525e[_0x2dd805]&&VisuMZ[_0x3c51f8(0x7cf)][_0x3c51f8(0xad0)](_0x2a525e[_0x2dd805])&&$gameTemp[_0x3c51f8(0xaab)](_0x2a525e[_0x2dd805]);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x932)]=BattleManager[_0x444cf3(0x326)],BattleManager[_0x444cf3(0x326)]=function(){const _0x5cf518=_0x444cf3;if(this[_0x5cf518(0x26f)]===_0x5cf518(0x810)){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ[_0x5cf518(0x7cf)][_0x5cf518(0x932)]['call'](this);},VisuMZ['BattleCore'][_0x444cf3(0xa71)]=BattleManager[_0x444cf3(0x554)],BattleManager['processVictory']=function(){const _0x29061c=_0x444cf3;this['_endingBattle']=!![],this[_0x29061c(0x840)](_0x29061c(0xa30)),VisuMZ['BattleCore'][_0x29061c(0xa71)][_0x29061c(0x4a6)](this),this[_0x29061c(0x841)](_0x29061c(0x9bf));},VisuMZ['BattleCore'][_0x444cf3(0x83b)]=BattleManager['processAbort'],BattleManager[_0x444cf3(0x269)]=function(){const _0x505cbb=_0x444cf3;this[_0x505cbb(0xa20)]=!![],VisuMZ[_0x505cbb(0x7cf)]['BattleManager_processAbort'][_0x505cbb(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x1f0)]=BattleManager['processDefeat'],BattleManager['processDefeat']=function(){const _0x5b7d12=_0x444cf3;this[_0x5b7d12(0xa20)]=!![],this['processBattleCoreJS']('BattleDefeatJS'),VisuMZ[_0x5b7d12(0x7cf)][_0x5b7d12(0x1f0)][_0x5b7d12(0x4a6)](this),this[_0x5b7d12(0x841)](_0x5b7d12(0x57d));},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xa56)]=BattleManager[_0x444cf3(0x52f)],BattleManager[_0x444cf3(0x52f)]=function(_0x46cef1){const _0xd7a899=_0x444cf3;this[_0xd7a899(0x619)]=!![],this[_0xd7a899(0x6b7)]=![],this[_0xd7a899(0x840)]('PreEndBattleJS'),VisuMZ['BattleCore'][_0xd7a899(0xa56)][_0xd7a899(0x4a6)](this,_0x46cef1),this[_0xd7a899(0x840)](_0xd7a899(0xa68));},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x42f)]=BattleManager[_0x444cf3(0xa64)],BattleManager[_0x444cf3(0xa64)]=function(){const _0x20fa64=_0x444cf3;if(this[_0x20fa64(0x62a)]())this[_0x20fa64(0x840)](_0x20fa64(0x1bd));VisuMZ[_0x20fa64(0x7cf)]['BattleManager_startTurn']['call'](this);if(this[_0x20fa64(0x62a)]())this[_0x20fa64(0x840)]('PostStartTurnJS');},VisuMZ[_0x444cf3(0x7cf)]['BattleManager_startAction']=BattleManager['startAction'],BattleManager[_0x444cf3(0x9ba)]=function(){const _0x5d6927=_0x444cf3,_0x318594=this[_0x5d6927(0x55d)][_0x5d6927(0x5b8)](),_0x8e5c9e=this[_0x5d6927(0x55d)];_0x318594&&_0x318594['subject']()===_0x8e5c9e&&_0x318594[_0x5d6927(0x3d1)](_0x5d6927(0x66a)),VisuMZ[_0x5d6927(0x7cf)][_0x5d6927(0x209)][_0x5d6927(0x4a6)](this),_0x318594&&_0x318594[_0x5d6927(0x34a)]()===_0x8e5c9e&&_0x318594['actionBattleCoreJS'](_0x5d6927(0xb30));},VisuMZ[_0x444cf3(0x7cf)]['BattleManager_endAction']=BattleManager[_0x444cf3(0x899)],BattleManager[_0x444cf3(0x899)]=function(){const _0x28abf9=_0x444cf3,_0x5f5d52=this[_0x28abf9(0xac1)],_0x3451a6=this[_0x28abf9(0x55d)];_0x5f5d52&&_0x5f5d52!==this['_lastAction']&&_0x5f5d52['subject']()===_0x3451a6&&_0x5f5d52[_0x28abf9(0x3d1)](_0x28abf9(0xa83)),this[_0x28abf9(0x55d)]?VisuMZ[_0x28abf9(0x7cf)][_0x28abf9(0x92a)][_0x28abf9(0x4a6)](this):this['_phase']=_0x28abf9(0x810),_0x5f5d52&&_0x5f5d52!==this[_0x28abf9(0x249)]&&_0x5f5d52[_0x28abf9(0x34a)]()===_0x3451a6&&_0x5f5d52['actionBattleCoreJS'](_0x28abf9(0x857)),this['refreshBattlerMotions'](this[_0x28abf9(0x4ff)]()),this['_lastAction']=this[_0x28abf9(0xac1)];},BattleManager[_0x444cf3(0x804)]=function(_0x1325d2){const _0x3e8f03=_0x444cf3;for(const _0x12d752 of _0x1325d2){if(!_0x12d752)continue;if(!_0x12d752[_0x3e8f03(0x516)]())continue;_0x12d752[_0x3e8f03(0x516)]()[_0x3e8f03(0x53c)]();}},BattleManager[_0x444cf3(0x8a5)]=function(){const _0x472715=_0x444cf3;!this[_0x472715(0x1e6)][_0x472715(0xada)]()&&this['endAction']();},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x99e)]=function(){const _0x5cf2c9=_0x444cf3;this[_0x5cf2c9(0x584)]();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x263b39=VisuMZ['SkillsStatesCore']['Settings'][_0x5cf2c9(0x8a0)];_0x263b39&&_0x263b39[_0x5cf2c9(0x3cd)]===![]&&this[_0x5cf2c9(0x1cb)](0x1);}else this[_0x5cf2c9(0x1cb)](0x1);this['removeBuffsAuto']();},BattleManager[_0x444cf3(0xaff)]=function(){const _0x438791=_0x444cf3;this[_0x438791(0x398)]=VisuMZ[_0x438791(0x7cf)][_0x438791(0x52b)]['Mechanics'][_0x438791(0x710)][_0x438791(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x66b)]=BattleManager['onEscapeSuccess'],BattleManager[_0x444cf3(0xa69)]=function(){const _0x59b196=_0x444cf3;this[_0x59b196(0x840)](_0x59b196(0x34b)),BattleManager[_0x59b196(0x9f5)][_0x59b196(0x5d0)](),VisuMZ[_0x59b196(0x7cf)][_0x59b196(0x66b)]['call'](this),this[_0x59b196(0x841)]('EscapeSuccess');},VisuMZ[_0x444cf3(0x7cf)]['BattleManager_onEscapeFailure']=BattleManager[_0x444cf3(0xb15)],BattleManager[_0x444cf3(0xb15)]=function(){const _0x3c3798=_0x444cf3;this[_0x3c3798(0x840)](_0x3c3798(0x6f0));const _0x93184=this[_0x3c3798(0x398)];VisuMZ[_0x3c3798(0x7cf)][_0x3c3798(0x852)]['call'](this),this[_0x3c3798(0x398)]=_0x93184+VisuMZ[_0x3c3798(0x7cf)][_0x3c3798(0x52b)][_0x3c3798(0x982)][_0x3c3798(0x2e4)][_0x3c3798(0x4a6)](this),this[_0x3c3798(0x841)](_0x3c3798(0x76b));},BattleManager[_0x444cf3(0x491)]=function(){const _0x1a898c=_0x444cf3;let _0x1a9eaf=![];if(this[_0x1a898c(0x956)]())for(const _0x2a1966 of $gameTroop[_0x1a898c(0x497)]()){this['_logWindow'][_0x1a898c(0x87e)](_0x1a898c(0x548),TextManager['emerge'][_0x1a898c(0x7d7)](_0x2a1966)),this['_logWindow'][_0x1a898c(0x87e)](_0x1a898c(0xb16)),_0x1a9eaf=!![];}if(this[_0x1a898c(0x4b7)])this[_0x1a898c(0x1e6)][_0x1a898c(0x87e)]('addText',TextManager[_0x1a898c(0x3d0)][_0x1a898c(0x7d7)]($gameParty[_0x1a898c(0x21a)]())),this[_0x1a898c(0x1e6)][_0x1a898c(0x87e)](_0x1a898c(0xb16));else this[_0x1a898c(0xadb)]&&(this[_0x1a898c(0x1e6)]['push'](_0x1a898c(0x548),TextManager[_0x1a898c(0x71e)][_0x1a898c(0x7d7)]($gameParty[_0x1a898c(0x21a)]())),this[_0x1a898c(0x1e6)][_0x1a898c(0x87e)]('wait'));_0x1a9eaf&&(this['_logWindow'][_0x1a898c(0x87e)]('wait'),this[_0x1a898c(0x1e6)][_0x1a898c(0x87e)](_0x1a898c(0x667))),this[_0x1a898c(0x98f)]()&&this['isSkipPartyCommandWindow']()&&(this[_0x1a898c(0x5c1)]=![]);},BattleManager[_0x444cf3(0x956)]=function(){const _0x3d28f2=_0x444cf3;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x3d28f2(0x7cf)][_0x3d28f2(0x52b)]['Enemy'][_0x3d28f2(0x90a)];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x6f5)]=BattleManager[_0x444cf3(0x2ba)],BattleManager[_0x444cf3(0x2ba)]=function(){const _0x5ecb5d=_0x444cf3;VisuMZ[_0x5ecb5d(0x7cf)][_0x5ecb5d(0x6f5)]['call'](this),this[_0x5ecb5d(0x4d7)]()&&this[_0x5ecb5d(0x494)]()&&!this[_0x5ecb5d(0xadb)]&&$gameParty['canInput']()&&this['selectNextCommand']();},BattleManager[_0x444cf3(0x494)]=function(){const _0x15e5ef=_0x444cf3;return VisuMZ[_0x15e5ef(0x7cf)]['Settings'][_0x15e5ef(0x1c7)][_0x15e5ef(0x1d7)];},BattleManager[_0x444cf3(0x834)]=function(){const _0x11f8ed=_0x444cf3;this[_0x11f8ed(0x489)]()&&this['selectNextCommand']();},VisuMZ['BattleCore'][_0x444cf3(0x1b7)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x402)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x402)]=function(){const _0x368668=_0x444cf3;VisuMZ[_0x368668(0x7cf)]['Scene_Battle_startActorCommandSelection']['call'](this),BattleManager[_0x368668(0x98f)]()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x368668(0x5c1)]=![],this['actorCommandCancelTPB']());},BattleManager['invokeMagicReflection']=function(_0x550f08,_0x160dfc){const _0x4d6719=_0x444cf3;this[_0x4d6719(0xac1)]['_reflectionTarget']=_0x160dfc,this[_0x4d6719(0x1e6)][_0x4d6719(0x6e6)](_0x160dfc),this[_0x4d6719(0x1e6)][_0x4d6719(0x2a0)](_0x550f08,this[_0x4d6719(0xac1)]),this[_0x4d6719(0xac1)]['apply'](_0x550f08),this[_0x4d6719(0x1e6)][_0x4d6719(0x82c)](_0x550f08,_0x550f08);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x774)]=BattleManager[_0x444cf3(0x8d0)],BattleManager[_0x444cf3(0x8d0)]=function(){const _0x5629a2=_0x444cf3;VisuMZ[_0x5629a2(0x7cf)][_0x5629a2(0x774)][_0x5629a2(0x4a6)](this),this[_0x5629a2(0x433)]=this[_0x5629a2(0x433)]['filter'](_0x3f66b3=>_0x3f66b3&&_0x3f66b3[_0x5629a2(0x9b0)]());},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x30b)]=BattleManager['updatePhase'],BattleManager[_0x444cf3(0x9df)]=function(_0x11da99){const _0x594e62=_0x444cf3;if(this[_0x594e62(0x26f)]===_0x594e62(0x5c0))this['updateCustomActionSequence']();else this[_0x594e62(0x26f)]===_0x594e62(0x687)?this[_0x594e62(0x608)]():VisuMZ[_0x594e62(0x7cf)]['BattleManager_updatePhase'][_0x594e62(0x4a6)](this,_0x11da99);},BattleManager[_0x444cf3(0xa76)]=function(){const _0x367810=_0x444cf3;this[_0x367810(0x4de)]=this['_targets'][_0x367810(0xa4a)](0x0),this[_0x367810(0x8ed)]=0x0,this[_0x367810(0x318)]=this['_allTargets'][0x0]||null,this[_0x367810(0x26f)]=_0x367810(0x5c0);},BattleManager[_0x444cf3(0x3d9)]=function(){const _0x6fb391=_0x444cf3;!this[_0x6fb391(0xa41)]()&&!this[_0x6fb391(0x1e6)][_0x6fb391(0xada)]()&&(this[_0x6fb391(0x26f)]=_0x6fb391(0x25d));},BattleManager['forceAction']=function(_0x4e85c0){const _0x4329e8=_0x444cf3;this[_0x4329e8(0x433)][_0x4329e8(0x6ee)](_0x4e85c0);if(_0x4e85c0===this[_0x4329e8(0x55d)])return;const _0x8ff3df=JsonEx['makeDeepCopy'](_0x4e85c0[_0x4329e8(0x5b8)]());this[_0x4329e8(0xa8b)][_0x4329e8(0x87e)]([_0x4e85c0,_0x8ff3df]);},BattleManager[_0x444cf3(0xa45)]=function(){},BattleManager['updateStart']=function(){const _0x5db27b=_0x444cf3;if(this['isTpb']())this['_phase']=_0x5db27b(0x810);else this['_forcedBattlers']['length']>0x0?this[_0x5db27b(0x26f)]=_0x5db27b(0x810):this[_0x5db27b(0x2ba)]();},BattleManager[_0x444cf3(0x378)]=function(){const _0x11c35b=_0x444cf3,_0x3fc5ff=this[_0x11c35b(0x55d)];_0x3fc5ff&&this['isTpb']()&&_0x3fc5ff[_0x11c35b(0x4b8)]('undecided');for(;;){const _0x75dc2f=this[_0x11c35b(0x72f)]();if(!_0x75dc2f)return null;if(_0x75dc2f[_0x11c35b(0x648)]()&&_0x75dc2f[_0x11c35b(0xad2)]())return _0x75dc2f;}},BattleManager[_0x444cf3(0x72f)]=function(){const _0x533329=_0x444cf3;if(this['_forcedBattlers'][_0x533329(0xa40)]>0x0){const _0x632611=this[_0x533329(0xa8b)][_0x533329(0x898)](),_0x6a77fb=_0x632611[0x0];return _0x6a77fb[_0x533329(0x3a7)]=_0x6a77fb[_0x533329(0x3a7)]||[],_0x6a77fb['_actions'][0x0]=_0x632611[0x1],_0x6a77fb;}else return this['_actionBattlers'][_0x533329(0x898)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x77c)]=Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x687)],Game_Battler[_0x444cf3(0x8f4)]['forceAction']=function(_0x2b429d,_0x2f7427){const _0x1684ee=_0x444cf3;VisuMZ['BattleCore'][_0x1684ee(0x77c)][_0x1684ee(0x4a6)](this,_0x2b429d,_0x2f7427),this['_actions'][this['_actions'][_0x1684ee(0xa40)]-0x1][_0x1684ee(0x67c)]=!![];},Game_Interpreter[_0x444cf3(0x8f4)][_0x444cf3(0x8f1)]=function(_0x10f878){const _0xdb918c=_0x444cf3;return this[_0xdb918c(0x5e9)](_0x10f878[0x0],_0x10f878[0x1],_0x542d3c=>{const _0x5de7e6=_0xdb918c;!_0x542d3c[_0x5de7e6(0x925)]()&&(_0x542d3c[_0x5de7e6(0x687)](_0x10f878[0x2],_0x10f878[0x3]),BattleManager[_0x5de7e6(0x687)](_0x542d3c));}),!![];},VisuMZ[_0x444cf3(0x7cf)]['Game_Battler_makeSpeed']=Game_Battler['prototype'][_0x444cf3(0x2c3)],Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x2c3)]=function(){const _0x29895a=_0x444cf3;VisuMZ[_0x29895a(0x7cf)][_0x29895a(0x3cc)][_0x29895a(0x4a6)](this),this[_0x29895a(0x3a7)]['length']<=0x0&&(this[_0x29895a(0x47a)]=Number[_0x29895a(0x343)]);},BattleManager[_0x444cf3(0x486)]=function(){const _0xf96ab8=_0x444cf3;if(VisuMZ[_0xf96ab8(0x7cf)][_0xf96ab8(0x52b)]['Damage']['EndBattlePopups']??!![])return![];return SceneManager[_0xf96ab8(0xa7a)]()&&this[_0xf96ab8(0xa20)];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x46b)]=BattleManager[_0x444cf3(0x83c)],BattleManager[_0x444cf3(0x83c)]=function(){const _0x57e56d=_0x444cf3;this[_0x57e56d(0x98f)]()?this[_0x57e56d(0x725)]():VisuMZ['BattleCore'][_0x57e56d(0x46b)]['call'](this);},BattleManager[_0x444cf3(0x725)]=function(){const _0x2a0b98=_0x444cf3;if(this['_currentActor']){if(this[_0x2a0b98(0x276)][_0x2a0b98(0x83c)]())return;this[_0x2a0b98(0xa6f)](),this[_0x2a0b98(0x573)](),!this[_0x2a0b98(0x55d)]&&!this['_currentActor']&&SceneManager[_0x2a0b98(0xa67)][_0x2a0b98(0x35f)]();}else!this[_0x2a0b98(0x55d)]&&this[_0x2a0b98(0x4e4)]();},BattleManager[_0x444cf3(0x573)]=function(){const _0x10ba87=_0x444cf3;(!this['isPartyTpbInputtable']()||this[_0x10ba87(0x3f4)]())&&(this[_0x10ba87(0x77d)]&&(!$gameParty[_0x10ba87(0x8b4)]()[_0x10ba87(0xa60)](this[_0x10ba87(0x77d)])&&(this[_0x10ba87(0x77d)]=null)),!this[_0x10ba87(0x77d)]?(this[_0x10ba87(0x26c)](),this[_0x10ba87(0x276)]=null,this[_0x10ba87(0x5f0)]=![]):this['revertTpbCachedActor']());},BattleManager[_0x444cf3(0x5d3)]=function(){const _0x26747f=_0x444cf3;!$gameParty[_0x26747f(0x8b4)]()[_0x26747f(0xa60)](this[_0x26747f(0x77d)])&&(this[_0x26747f(0x77d)]=null),this[_0x26747f(0x77d)]?(this[_0x26747f(0x276)]=this[_0x26747f(0x77d)],this[_0x26747f(0x276)][_0x26747f(0xa94)]=_0x26747f(0x312),this[_0x26747f(0x5f0)]=!![],this['_tpbSceneChangeCacheActor']=null):(this[_0x26747f(0x26c)](),this['_currentActor']=null,this[_0x26747f(0x5f0)]=![]);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x6dd)]=BattleManager['isTpbMainPhase'],BattleManager[_0x444cf3(0x421)]=function(){const _0x57548e=_0x444cf3;return this[_0x57548e(0x26f)]==='custom'?this['battleCoreTpbMainPhase']():VisuMZ[_0x57548e(0x7cf)][_0x57548e(0x6dd)][_0x57548e(0x4a6)](this);},BattleManager[_0x444cf3(0x1e0)]=function(){const _0x54dbf8=_0x444cf3;return this[_0x54dbf8(0x90b)]();},VisuMZ[_0x444cf3(0x7cf)]['BattleManager_cancelActorInput']=BattleManager[_0x444cf3(0x26c)],BattleManager['cancelActorInput']=function(){const _0x16d219=_0x444cf3;this[_0x16d219(0x98f)]()&&this['_phase']===_0x16d219(0x50b)&&(this['_currentActor']=null),VisuMZ[_0x16d219(0x7cf)][_0x16d219(0x4ce)][_0x16d219(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x7e8)]=BattleManager[_0x444cf3(0x2d5)],BattleManager['inputtingAction']=function(){const _0x2a6200=_0x444cf3,_0x1e54dd=this[_0x2a6200(0x276)];if(_0x1e54dd&&!_0x1e54dd[_0x2a6200(0x2d5)]()){const _0x5e5a2f=_0x1e54dd['_actionInputIndex'];_0x1e54dd[_0x2a6200(0x3a7)][_0x5e5a2f]=new Game_Action(_0x1e54dd);}return VisuMZ[_0x2a6200(0x7cf)]['BattleManager_inputtingAction']['call'](this);},VisuMZ[_0x444cf3(0x7cf)]['BattleManager_checkSubstitute']=BattleManager['checkSubstitute'],BattleManager[_0x444cf3(0x844)]=function(_0x10db17){const _0x5783d8=_0x444cf3;if(this[_0x5783d8(0xac1)][_0x5783d8(0x374)]())return![];return VisuMZ['BattleCore'][_0x5783d8(0x380)][_0x5783d8(0x4a6)](this,_0x10db17);},SceneManager['isSceneBattle']=function(){const _0x24b21f=_0x444cf3;return this[_0x24b21f(0xa67)]&&this[_0x24b21f(0xa67)][_0x24b21f(0x427)]===Scene_Battle;},SceneManager[_0x444cf3(0x248)]=function(){const _0x4a1587=_0x444cf3;return Spriteset_Battle[_0x4a1587(0x8f4)]['isFlipped']();},SceneManager[_0x444cf3(0x4c1)]=function(){const _0x793fdb=_0x444cf3;if(SceneManager[_0x793fdb(0xa0a)](Scene_Options))return!![];return![];},SceneManager[_0x444cf3(0x1da)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x444cf3(0x6bf)]=function(_0x3dc530){const _0x56b07b=_0x444cf3;if(!SceneManager[_0x56b07b(0xa7a)]())return!![];const _0x55005a=[_0x56b07b(0x5a5),_0x56b07b(0x754)];return _0x55005a[_0x56b07b(0xa60)](_0x3dc530['name']);},VisuMZ['BattleCore'][_0x444cf3(0x1f5)]=SceneManager[_0x444cf3(0x87e)],SceneManager['push']=function(_0x3238ea){const _0x1ddfab=_0x444cf3;if(!SceneManager[_0x1ddfab(0x6bf)](_0x3238ea))return this[_0x1ddfab(0x735)](_0x3238ea);VisuMZ[_0x1ddfab(0x7cf)][_0x1ddfab(0x1f5)]['call'](this,_0x3238ea);},SceneManager[_0x444cf3(0x735)]=function(_0x855290){const _0x12f085=_0x444cf3;if(!$gameTemp[_0x12f085(0x2b5)]())return;if(this[_0x12f085(0x1e3)])return;this[_0x12f085(0x1e3)]=!![];let _0x3e9fa5='';_0x3e9fa5+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x3e9fa5+=_0x12f085(0x5e3)[_0x12f085(0x7d7)](_0x855290[_0x12f085(0x21a)]),alert(_0x3e9fa5);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x748)]=Game_Temp[_0x444cf3(0x8f4)]['requestAnimation'],Game_Temp[_0x444cf3(0x8f4)][_0x444cf3(0x4b3)]=function(_0x2e37bc,_0x5618b2,_0x3316a7){const _0x1ecdb8=_0x444cf3;_0x2e37bc=_0x2e37bc[_0x1ecdb8(0x4d3)]((_0xcaa15a,_0x5e5b9a,_0x517953)=>_0x517953[_0x1ecdb8(0x2c5)](_0xcaa15a)===_0x5e5b9a),SceneManager[_0x1ecdb8(0xa7a)]()&&SceneManager[_0x1ecdb8(0x248)]()&&(_0x3316a7=!_0x3316a7),VisuMZ[_0x1ecdb8(0x7cf)][_0x1ecdb8(0x748)]['call'](this,_0x2e37bc,_0x5618b2,_0x3316a7),SceneManager[_0x1ecdb8(0xa7a)]()&&BattleManager[_0x1ecdb8(0x9f5)]['processAnimationRequests']();},Game_Temp[_0x444cf3(0x8f4)][_0x444cf3(0x87c)]=function(_0x25cdcd){this['_lastPluginCommandInterpreter']=_0x25cdcd;},Game_Temp['prototype'][_0x444cf3(0x95d)]=function(){const _0x36d329=_0x444cf3;return this[_0x36d329(0x27a)];},Game_Temp['prototype'][_0x444cf3(0x82a)]=function(){const _0x5f3ae5=_0x444cf3;this[_0x5f3ae5(0x838)]=undefined;},Game_Temp[_0x444cf3(0x8f4)]['applyForcedGameTroopSettingsBattleCore']=function(_0x6af40a){const _0x4517f3=_0x444cf3;$gameMap&&$dataMap&&$dataMap['note']&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x4517f3(0x1cd)]);const _0xc42d84=$dataTroops[_0x6af40a];if(_0xc42d84){let _0x403b03=DataManager[_0x4517f3(0x676)](_0xc42d84['id']);this[_0x4517f3(0x958)](_0x403b03);}},Game_Temp['prototype'][_0x444cf3(0x958)]=function(_0xd29d66){const _0x192a96=_0x444cf3;if(!_0xd29d66)return;if(_0xd29d66[_0x192a96(0x6b8)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x9504c7=String(RegExp['$1']);if(_0x9504c7[_0x192a96(0x6b8)](/DEFAULT/i))this[_0x192a96(0x838)]=_0x192a96(0x471);else{if(_0x9504c7[_0x192a96(0x6b8)](/LIST/i))this['_forcedBattleLayout']=_0x192a96(0x628);else{if(_0x9504c7[_0x192a96(0x6b8)](/XP/i))this[_0x192a96(0x838)]='xp';else{if(_0x9504c7['match'](/PORTRAIT/i))this[_0x192a96(0x838)]=_0x192a96(0x974);else{if(_0x9504c7[_0x192a96(0x6b8)](/BORDER/i))this[_0x192a96(0x838)]='border';else{if(_0x9504c7[_0x192a96(0x6b8)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x192a96(0x96e)]?this[_0x192a96(0x838)]=_0x192a96(0x64c):this['_forcedBattleLayout']=_0x192a96(0x471);else _0x9504c7[_0x192a96(0x6b8)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x192a96(0x70b)]?this[_0x192a96(0x838)]=_0x192a96(0x791):this[_0x192a96(0x838)]=_0x192a96(0x471));}}}}}}},VisuMZ['BattleCore'][_0x444cf3(0x47e)]=Game_System[_0x444cf3(0x8f4)][_0x444cf3(0x207)],Game_System[_0x444cf3(0x8f4)]['initialize']=function(){const _0x175c49=_0x444cf3;VisuMZ[_0x175c49(0x7cf)][_0x175c49(0x47e)][_0x175c49(0x4a6)](this),this[_0x175c49(0x4e8)]();},Game_System[_0x444cf3(0x8f4)][_0x444cf3(0x4e8)]=function(){const _0x40ef91=_0x444cf3;this[_0x40ef91(0x26d)]=this[_0x40ef91(0x26d)]||[];},Game_System[_0x444cf3(0x8f4)][_0x444cf3(0x239)]=function(){const _0x3f738c=_0x444cf3;if(this[_0x3f738c(0x26d)]===undefined)this['initBattleCore']();return this[_0x3f738c(0x26d)];},Game_System[_0x444cf3(0x8f4)][_0x444cf3(0x82b)]=function(_0x8d557a){const _0x314ace=_0x444cf3;if(this[_0x314ace(0x26d)]===undefined)this[_0x314ace(0x4e8)]();if(!_0x8d557a)return;if(this[_0x314ace(0x26d)][_0x314ace(0xa60)](_0x8d557a))return;this['_defeatedEnemies'][_0x314ace(0x87e)](_0x8d557a),this[_0x314ace(0x26d)][_0x314ace(0x38a)]((_0x16d599,_0x58d7e1)=>_0x16d599-_0x58d7e1);},VisuMZ[_0x444cf3(0x7cf)]['Game_BattlerBase_addNewState']=Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x2db)],Game_BattlerBase['prototype'][_0x444cf3(0x2db)]=function(_0x1102e8){const _0x4bba16=_0x444cf3,_0x392a7f=this['isAlive'](),_0x2e6e70=this[_0x4bba16(0x829)]();VisuMZ[_0x4bba16(0x7cf)][_0x4bba16(0x8f0)][_0x4bba16(0x4a6)](this,_0x1102e8),this[_0x4bba16(0x36e)]()&&_0x392a7f&&this['isDead']()&&(this['_visualHpGauge_JustDied']=!this['hasBeenDefeatedBefore'](),$gameSystem['registerDefeatedEnemy'](this[_0x4bba16(0x73a)]())),SceneManager[_0x4bba16(0xa7a)]()&&_0x2e6e70!==this['stateMotionIndex']()&&(this[_0x4bba16(0x516)]()&&this['battler']()[_0x4bba16(0x53c)]());},Game_Enemy['prototype'][_0x444cf3(0x823)]=function(){const _0x37a0a6=_0x444cf3;return $gameSystem[_0x37a0a6(0x239)]()[_0x37a0a6(0xa60)](this[_0x37a0a6(0x564)]);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x242)]=Game_BattlerBase['prototype'][_0x444cf3(0x92f)],Game_BattlerBase[_0x444cf3(0x8f4)]['eraseState']=function(_0x188b40){const _0x2492ac=_0x444cf3;VisuMZ[_0x2492ac(0x7cf)][_0x2492ac(0x242)][_0x2492ac(0x4a6)](this,_0x188b40),this[_0x2492ac(0x36e)]()&&_0x188b40===this[_0x2492ac(0xa25)]()&&this[_0x2492ac(0xad2)]()&&(this[_0x2492ac(0x5f3)]=![]),!this[_0x2492ac(0x50e)]&&!this[_0x2492ac(0x88d)]&&SceneManager['isSceneBattle']()&&this[_0x2492ac(0x98e)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x37e)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x667)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x667)]=function(){const _0x318f82=_0x444cf3;VisuMZ[_0x318f82(0x7cf)][_0x318f82(0x37e)][_0x318f82(0x4a6)](this),this[_0x318f82(0x38b)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x318f82(0x7a6)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x318f82(0x5ae)]=_0x318f82(0x471),this[_0x318f82(0x59e)]();},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x59e)]=function(){const _0x48cfa6=_0x444cf3;this[_0x48cfa6(0x90e)]='';},VisuMZ['BattleCore'][_0x444cf3(0x32f)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x1c1)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x1c1)]=function(_0x2342b5){const _0x2d16e5=_0x444cf3;VisuMZ[_0x2d16e5(0x7cf)][_0x2d16e5(0x32f)][_0x2d16e5(0x4a6)](this,_0x2342b5),this['clearTargetBattlerKey']();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x4e0)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x626)],Game_Action['prototype'][_0x444cf3(0x626)]=function(_0x1efedc){const _0x210f8d=_0x444cf3;VisuMZ['BattleCore'][_0x210f8d(0x4e0)][_0x210f8d(0x4a6)](this,_0x1efedc),this[_0x210f8d(0x59e)]();},VisuMZ[_0x444cf3(0x7cf)]['Game_Action_setItem']=Game_Action['prototype']['setItem'],Game_Action['prototype'][_0x444cf3(0x44e)]=function(_0x700a11){const _0xf6998c=_0x444cf3;VisuMZ['BattleCore']['Game_Action_setItem'][_0xf6998c(0x4a6)](this,_0x700a11),this[_0xf6998c(0x59e)]();},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x811)]=function(_0x397d42,_0x45ef4f){const _0x54a782=_0x444cf3;return VisuMZ[_0x54a782(0x7cf)][_0x54a782(0x52b)][_0x54a782(0xa9f)][_0x54a782(0x962)]['call'](this,_0x397d42,_0x45ef4f);},Game_Action['prototype'][_0x444cf3(0x782)]=function(_0x1b0da5,_0x2583c7){const _0x74dd69=_0x444cf3;return VisuMZ[_0x74dd69(0x7cf)]['Settings'][_0x74dd69(0xa9f)][_0x74dd69(0x397)]['call'](this,_0x1b0da5,_0x2583c7);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x440)]=function(_0x32cbb,_0x478c36){const _0x33f30d=_0x444cf3;return VisuMZ[_0x33f30d(0x7cf)][_0x33f30d(0x52b)][_0x33f30d(0xa9f)][_0x33f30d(0x387)][_0x33f30d(0x4a6)](this,_0x32cbb,_0x478c36);},VisuMZ[_0x444cf3(0x7cf)]['Game_Action_itemHit']=Game_Action[_0x444cf3(0x8f4)]['itemHit'],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x729)]=function(_0x1c1f3b){const _0x34193c=_0x444cf3,_0x56962c=this['item']()['note'];if(_0x56962c[_0x34193c(0x6b8)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x56962c[_0x34193c(0x6b8)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x50648b=VisuMZ[_0x34193c(0x7cf)][_0x34193c(0x474)]['call'](this,_0x1c1f3b);return _0x50648b=this[_0x34193c(0x7a6)][_0x34193c(0x1d4)]*_0x50648b+this[_0x34193c(0x7a6)]['hitFlat'],_0x50648b;}}},Game_Action[_0x444cf3(0x8f4)]['itemCri']=function(_0x49fb85){const _0x3dfa47=_0x444cf3;if(!this['item']()[_0x3dfa47(0x319)][_0x3dfa47(0x69c)])return 0x0;let _0x4b9979=VisuMZ[_0x3dfa47(0x7cf)][_0x3dfa47(0x52b)][_0x3dfa47(0xa9f)][_0x3dfa47(0x229)][_0x3dfa47(0x4a6)](this,_0x49fb85);return _0x4b9979=this[_0x3dfa47(0x7a6)]['criticalHitRate']*_0x4b9979+this['_multipliers']['criticalHitFlat'],_0x4b9979;},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x2da)]=function(_0x32a892){const _0x23e69d=_0x444cf3;return _0x32a892=VisuMZ[_0x23e69d(0x7cf)]['Settings']['Damage']['CriticalHitMultiplier'][_0x23e69d(0x4a6)](this,_0x32a892),_0x32a892=this[_0x23e69d(0x7a6)][_0x23e69d(0x6dc)]*_0x32a892+this[_0x23e69d(0x7a6)][_0x23e69d(0x972)],_0x32a892;},VisuMZ['BattleCore']['Game_Action_evalDamageFormula']=Game_Action[_0x444cf3(0x8f4)]['evalDamageFormula'],Game_Action['prototype'][_0x444cf3(0x993)]=function(_0x42fe90){const _0x5643b3=_0x444cf3;if(this['_customDamageFormula']!==_0x5643b3(0x471))return this[_0x5643b3(0x2bf)](_0x42fe90);else return DataManager['getDamageStyle'](this['item']())===_0x5643b3(0x6c9)?VisuMZ[_0x5643b3(0x7cf)][_0x5643b3(0x8d4)][_0x5643b3(0x4a6)](this,_0x42fe90):this[_0x5643b3(0x27b)](_0x42fe90);},Game_Action['prototype'][_0x444cf3(0x663)]=function(_0x3a6b8c){const _0x257049=_0x444cf3;this[_0x257049(0x5ae)]=_0x3a6b8c;},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x2bf)]=function(_0x38f9d1){const _0x353c37=_0x444cf3,_0x32425f=this[_0x353c37(0x39a)](),_0x30c8ff=_0x32425f['damage'][_0x353c37(0x771)];_0x32425f['damage'][_0x353c37(0x771)]=this[_0x353c37(0x5ae)];let _0x37756c=VisuMZ[_0x353c37(0x7cf)][_0x353c37(0x8d4)][_0x353c37(0x4a6)](this,_0x38f9d1);return _0x32425f[_0x353c37(0x319)]['formula']=_0x30c8ff,_0x37756c;},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x325)]=function(){const _0x3c032a=_0x444cf3;if(this[_0x3c032a(0x39a)]()[_0x3c032a(0x1cd)][_0x3c032a(0x6b8)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x578f1e=String(RegExp['$1'])['toUpperCase']()[_0x3c032a(0x78c)]();return _0x578f1e;}return _0x3c032a(0x6c9);},Game_Action['prototype'][_0x444cf3(0x27b)]=function(_0x176b43){const _0x422ebf=_0x444cf3,_0xefa1f0=DataManager['getDamageStyle'](this[_0x422ebf(0x39a)]()),_0x2465d0=VisuMZ[_0x422ebf(0x885)][_0xefa1f0];try{return _0x2465d0['Formula'][_0x422ebf(0x4a6)](this,_0x176b43);}catch(_0x28d40c){if($gameTemp[_0x422ebf(0x2b5)]())console[_0x422ebf(0x8cf)](_0x28d40c);return VisuMZ[_0x422ebf(0x7cf)][_0x422ebf(0x8d4)]['call'](this);}},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x945)]=function(_0x51bab3,_0x22b407){const _0x163ab9=_0x444cf3;if(this['isCertainHit']())return _0x22b407;const _0x4268e5=this[_0x163ab9(0x34a)](),_0x3e1c00=_0x51bab3;let _0x5a167b=[],_0x3443c8=[];_0x5a167b[_0x163ab9(0x87e)](this['_armorPenetration']['arPenFlat'],this[_0x163ab9(0x38b)][_0x163ab9(0x6ce)]),_0x3443c8[_0x163ab9(0x87e)](this['_armorPenetration'][_0x163ab9(0x48d)],this[_0x163ab9(0x38b)][_0x163ab9(0x859)]);const _0x1f4e56=this[_0x163ab9(0x63e)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3417a5=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x5e1440=this[_0x163ab9(0x63e)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x294073=this[_0x163ab9(0x63e)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x5a167b=_0x5a167b[_0x163ab9(0x66d)](_0x3e1c00['traitObjects']()[_0x163ab9(0x7f8)](_0x522832=>_0x522832&&_0x522832[_0x163ab9(0x1cd)][_0x163ab9(0x6b8)](_0x1f4e56)?Number(RegExp['$1']):0x0)),_0x3443c8=_0x3443c8[_0x163ab9(0x66d)](_0x3e1c00[_0x163ab9(0x79a)]()['map'](_0x4356eb=>_0x4356eb&&_0x4356eb[_0x163ab9(0x1cd)][_0x163ab9(0x6b8)](_0x3417a5)?Number(RegExp['$1'])/0x64:0x0)),_0x5a167b=_0x5a167b[_0x163ab9(0x66d)](_0x4268e5[_0x163ab9(0x79a)]()[_0x163ab9(0x7f8)](_0x51f5db=>_0x51f5db&&_0x51f5db[_0x163ab9(0x1cd)][_0x163ab9(0x6b8)](_0x5e1440)?Number(RegExp['$1']):0x0)),_0x3443c8=_0x3443c8[_0x163ab9(0x66d)](_0x4268e5[_0x163ab9(0x79a)]()[_0x163ab9(0x7f8)](_0x64f529=>_0x64f529&&_0x64f529[_0x163ab9(0x1cd)][_0x163ab9(0x6b8)](_0x294073)?Number(RegExp['$1'])/0x64:0x0)),this[_0x163ab9(0x39a)]()[_0x163ab9(0x1cd)][_0x163ab9(0x6b8)](_0x5e1440)&&_0x5a167b[_0x163ab9(0x87e)](Number(RegExp['$1'])),this[_0x163ab9(0x39a)]()[_0x163ab9(0x1cd)]['match'](_0x294073)&&_0x3443c8['push'](Number(RegExp['$1'])),_0x22b407=_0x5a167b[_0x163ab9(0x647)]((_0x595778,_0x6d5df9)=>_0x595778-_0x6d5df9,_0x22b407),_0x22b407>0x0&&(_0x22b407=_0x3443c8['reduce']((_0x4a89e4,_0x3797f3)=>_0x4a89e4*(0x1-_0x3797f3),_0x22b407)),_0x22b407;},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x570)]=Game_Action[_0x444cf3(0x8f4)]['executeDamage'],Game_Action['prototype']['executeDamage']=function(_0x448b0,_0x31d7f3){const _0x21fb8d=_0x444cf3;_0x31d7f3=_0x31d7f3*this[_0x21fb8d(0x7a6)][_0x21fb8d(0x911)],_0x31d7f3+=this[_0x21fb8d(0x7a6)][_0x21fb8d(0x1b4)]*(_0x31d7f3>=0x0?0x1:-0x1),_0x31d7f3=this[_0x21fb8d(0x858)]('PreDamage%1JS',_0x448b0,_0x31d7f3,![]),_0x31d7f3=this['applyDamageCaps'](_0x31d7f3),_0x31d7f3=Math[_0x21fb8d(0xa43)](_0x31d7f3),this[_0x21fb8d(0xb2c)]=_0x31d7f3,this[_0x21fb8d(0x9f4)]=this['_totalValue']||0x0,this[_0x21fb8d(0x9f4)]+=_0x31d7f3,VisuMZ[_0x21fb8d(0x7cf)][_0x21fb8d(0x570)][_0x21fb8d(0x4a6)](this,_0x448b0,_0x31d7f3),this[_0x21fb8d(0x858)](_0x21fb8d(0xa2d),_0x448b0,_0x31d7f3,!![]);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x7eb)]=function(_0x4e6091){const _0x2f3f35=_0x444cf3;if(this[_0x2f3f35(0x597)]())return _0x4e6091;return _0x4e6091=this['applySoftDamageCap'](_0x4e6091),_0x4e6091=this[_0x2f3f35(0x639)](_0x4e6091),_0x4e6091;},Game_Action[_0x444cf3(0x8f4)]['isBypassDamageCap']=function(){const _0x3aa955=_0x444cf3,_0x3387ef=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x3aa955(0x1cd)]['match'](_0x3387ef))return!![];if(this[_0x3aa955(0x34a)]()['traitObjects']()['some'](_0x9a43fb=>_0x9a43fb&&_0x9a43fb[_0x3aa955(0x1cd)][_0x3aa955(0x6b8)](_0x3387ef)))return!![];return!VisuMZ['BattleCore']['Settings'][_0x3aa955(0xa9f)]['EnableDamageCap'];},Game_Action['prototype'][_0x444cf3(0x6de)]=function(_0x2f9e91){const _0x449e9a=_0x444cf3;if(!VisuMZ[_0x449e9a(0x7cf)][_0x449e9a(0x52b)][_0x449e9a(0xa9f)]['EnableSoftCap'])return _0x2f9e91;const _0x15082f=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x449e9a(0x39a)]()[_0x449e9a(0x1cd)][_0x449e9a(0x6b8)](_0x15082f))return _0x2f9e91;if(this[_0x449e9a(0x34a)]()[_0x449e9a(0x79a)]()['some'](_0x136dbd=>_0x136dbd&&_0x136dbd[_0x449e9a(0x1cd)]['match'](_0x15082f)))return _0x2f9e91;const _0x1b25da=_0x2f9e91<0x0?-0x1:0x1;_0x2f9e91=Math[_0x449e9a(0x62b)](_0x2f9e91);let _0x3a51c7=this['subject']()[_0x449e9a(0x3c1)]();this[_0x449e9a(0x39a)]()[_0x449e9a(0x1cd)][_0x449e9a(0x6b8)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x3a51c7+=Number(RegExp['$1'])/0x64);_0x3a51c7=_0x3a51c7[_0x449e9a(0xadc)](0.01,0x1);const _0x3d290e=this['getHardDamageCap'](),_0x417ed4=_0x3a51c7*_0x3d290e;if(_0x2f9e91>_0x417ed4&&_0x3d290e>_0x417ed4){_0x2f9e91-=_0x417ed4;const _0x58b1f0=VisuMZ[_0x449e9a(0x7cf)][_0x449e9a(0x52b)]['Damage'][_0x449e9a(0x1bc)],_0x221b90=Math[_0x449e9a(0x642)](0x1-_0x2f9e91/((_0x3d290e-_0x417ed4)*_0x58b1f0+_0x2f9e91),0.01);_0x2f9e91*=_0x221b90,_0x2f9e91+=_0x417ed4;}return _0x2f9e91*_0x1b25da;},Game_Action[_0x444cf3(0x8f4)]['getHardDamageCap']=function(){const _0x2b0718=_0x444cf3;return this[_0x2b0718(0x39a)]()['note'][_0x2b0718(0x6b8)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x2b0718(0x34a)]()[_0x2b0718(0x4f7)]();},Game_Action[_0x444cf3(0x8f4)]['applyHardDamageCap']=function(_0x19a6f7){const _0x27526c=_0x444cf3;console['log'](_0x19a6f7);let _0x3d3088=this[_0x27526c(0x873)]();return _0x19a6f7[_0x27526c(0xadc)](-_0x3d3088,_0x3d3088);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x7dc)]=function(){const _0x4c6134=_0x444cf3;if(!this['item']())return![];return(this[_0x4c6134(0x39a)]()['note']||'')[_0x4c6134(0x6b8)](/<DISPERSE DAMAGE>/i);},Game_Action['prototype'][_0x444cf3(0x9ab)]=function(_0x1aeaca){const _0x4131b4=_0x444cf3;if(this[_0x4131b4(0x7dc)]()){let _0x189df4=BattleManager[_0x4131b4(0x571)];_0x1aeaca/=_0x189df4[_0x4131b4(0xa40)],this[_0x4131b4(0x71f)]()&&(_0x1aeaca*=this[_0x4131b4(0x34a)]()[_0x4131b4(0x3e5)]()+0x1),_0x1aeaca=_0x1aeaca>0x0?Math['ceil'](_0x1aeaca):Math[_0x4131b4(0x93e)](_0x1aeaca);}return _0x1aeaca;},VisuMZ[_0x444cf3(0x7cf)]['Game_Action_makeDamageValueDisperse']=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x811)],Game_Action['prototype']['makeDamageValue']=function(_0xa208d4,_0x3ee210){const _0x4d651d=_0x444cf3;let _0x163223=VisuMZ['BattleCore'][_0x4d651d(0x3c5)][_0x4d651d(0x4a6)](this,_0xa208d4,_0x3ee210);return this[_0x4d651d(0x9ab)](_0x163223);},Game_Action[_0x444cf3(0x8f4)]['itemEffectRecoverHp']=function(_0x3d0a63,_0x123bfc){const _0x192e05=_0x444cf3;let _0x1e3868=(_0x3d0a63['mhp']*_0x123bfc['value1']+_0x123bfc[_0x192e05(0xa54)])*_0x3d0a63[_0x192e05(0x8c4)];_0x1e3868=this[_0x192e05(0x9ab)](_0x1e3868),this['isItem']()&&(_0x1e3868*=this['subject']()[_0x192e05(0x72e)]),_0x1e3868=Math['floor'](_0x1e3868),_0x1e3868!==0x0&&(_0x3d0a63['gainHp'](_0x1e3868),this[_0x192e05(0x969)](_0x3d0a63));},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x9e7)]=function(_0x1e0e4e,_0x5096db){const _0x2fd4ef=_0x444cf3;let _0x32b4bb=(_0x1e0e4e['mmp']*_0x5096db[_0x2fd4ef(0x6a2)]+_0x5096db[_0x2fd4ef(0xa54)])*_0x1e0e4e[_0x2fd4ef(0x8c4)];_0x32b4bb=this[_0x2fd4ef(0x9ab)](_0x32b4bb),this[_0x2fd4ef(0x867)]()&&(_0x32b4bb*=this[_0x2fd4ef(0x34a)]()['pha']),_0x32b4bb=Math['floor'](_0x32b4bb),_0x32b4bb!==0x0&&(_0x1e0e4e['gainMp'](_0x32b4bb),this[_0x2fd4ef(0x969)](_0x1e0e4e));},Game_Action['prototype']['itemEffectGainTp']=function(_0x3a0708,_0x5efb5e){const _0xaa181d=_0x444cf3;let _0x9aaf4d=Math[_0xaa181d(0x93e)](_0x5efb5e[_0xaa181d(0x6a2)]);_0x9aaf4d=this[_0xaa181d(0x9ab)](_0x9aaf4d),_0x9aaf4d!==0x0&&(_0x3a0708[_0xaa181d(0x6c8)](_0x9aaf4d),this['makeSuccess'](_0x3a0708));},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x22f)]=Game_Action[_0x444cf3(0x8f4)]['apply'],Game_Action[_0x444cf3(0x8f4)]['apply']=function(_0x269b21){const _0x12b707=_0x444cf3;this[_0x12b707(0x858)](_0x12b707(0x611),_0x269b21,0x0,!![]),VisuMZ[_0x12b707(0x7cf)]['Game_Action_apply'][_0x12b707(0x4a6)](this,_0x269b21),this['applyBattleCoreJS'](_0x12b707(0x778),_0x269b21,this['_executedValue']||0x0,!![]),this[_0x12b707(0x5cd)](_0x269b21);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x858)]=function(_0x3f59a9,_0x4d718d,_0x4d564f,_0x352450){const _0x9ec0c4=_0x444cf3;if(this[_0x9ec0c4(0x88d)]||this[_0x9ec0c4(0x50e)])return;_0x4d564f=_0x4d564f||0x0;const _0x56cc5f=_0x4d564f,_0x5a445f=VisuMZ[_0x9ec0c4(0x7cf)][_0x9ec0c4(0x52b)]['Mechanics'],_0x1bb28f=_0x3f59a9[_0x9ec0c4(0x7d7)]('');if(_0x5a445f[_0x1bb28f]){_0x4d564f=_0x5a445f[_0x1bb28f]['call'](this,_0x4d564f,_0x4d718d);if(_0x352450)_0x4d564f=_0x56cc5f;}let _0x55b764=VisuMZ[_0x9ec0c4(0x7cf)][_0x9ec0c4(0x674)](this[_0x9ec0c4(0x39a)](),_0x3f59a9[_0x9ec0c4(0x7d7)](''));if(VisuMZ[_0x9ec0c4(0x7cf)]['JS'][_0x55b764]){_0x4d564f=VisuMZ[_0x9ec0c4(0x7cf)]['JS'][_0x55b764]['call'](this,this[_0x9ec0c4(0x34a)](),_0x4d718d,this['item'](),_0x4d564f);if(_0x352450)_0x4d564f=_0x56cc5f;}for(const _0x1a1b4c of this[_0x9ec0c4(0x34a)]()[_0x9ec0c4(0x79a)]()){if(!_0x1a1b4c)continue;_0x55b764=VisuMZ[_0x9ec0c4(0x7cf)][_0x9ec0c4(0x674)](_0x1a1b4c,_0x3f59a9[_0x9ec0c4(0x7d7)](_0x9ec0c4(0x60f)));if(VisuMZ[_0x9ec0c4(0x7cf)]['JS'][_0x55b764]){_0x4d564f=VisuMZ[_0x9ec0c4(0x7cf)]['JS'][_0x55b764][_0x9ec0c4(0x4a6)](this,this[_0x9ec0c4(0x34a)](),_0x4d718d,_0x1a1b4c,_0x4d564f);if(_0x352450)_0x4d564f=_0x56cc5f;}}for(const _0x50913d of _0x4d718d[_0x9ec0c4(0x79a)]()){if(!_0x50913d)continue;_0x55b764=VisuMZ[_0x9ec0c4(0x7cf)][_0x9ec0c4(0x674)](_0x50913d,_0x3f59a9['format'](_0x9ec0c4(0x763)));if(VisuMZ[_0x9ec0c4(0x7cf)]['JS'][_0x55b764]){_0x4d564f=VisuMZ['BattleCore']['JS'][_0x55b764][_0x9ec0c4(0x4a6)](this,this['subject'](),_0x4d718d,_0x50913d,_0x4d564f);if(_0x352450)_0x4d564f=_0x56cc5f;}}return _0x4d564f;},Game_Action['prototype'][_0x444cf3(0x3d1)]=function(_0x105792){const _0x1e161f=_0x444cf3,_0x1d6515=this[_0x1e161f(0x9f4)]||0x0,_0x262e72=VisuMZ['BattleCore']['Settings'][_0x1e161f(0x982)],_0x4ae11f=_0x105792[_0x1e161f(0x7d7)]('');_0x262e72[_0x4ae11f]&&_0x262e72[_0x4ae11f]['call'](this,_0x1d6515);let _0x3f155e=VisuMZ[_0x1e161f(0x7cf)]['createKeyJS'](this[_0x1e161f(0x39a)](),_0x105792);VisuMZ['BattleCore']['JS'][_0x3f155e]&&VisuMZ['BattleCore']['JS'][_0x3f155e][_0x1e161f(0x4a6)](this,this[_0x1e161f(0x34a)](),this[_0x1e161f(0x34a)](),this['item'](),_0x1d6515);for(const _0x567ef8 of this[_0x1e161f(0x34a)]()[_0x1e161f(0x79a)]()){if(!_0x567ef8)continue;_0x3f155e=VisuMZ[_0x1e161f(0x7cf)]['createKeyJS'](_0x567ef8,_0x105792),VisuMZ['BattleCore']['JS'][_0x3f155e]&&VisuMZ[_0x1e161f(0x7cf)]['JS'][_0x3f155e][_0x1e161f(0x4a6)](this,this[_0x1e161f(0x34a)](),this['subject'](),_0x567ef8,_0x1d6515);}},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x5fe)]=function(){const _0xb30c9f=_0x444cf3;return VisuMZ[_0xb30c9f(0x7cf)][_0xb30c9f(0x52b)][_0xb30c9f(0x982)][_0xb30c9f(0x7fe)][_0xb30c9f(0x4a6)](this);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0xaa8)]=function(){const _0x51b64e=_0x444cf3;return VisuMZ[_0x51b64e(0x7cf)][_0x51b64e(0x52b)][_0x51b64e(0x982)][_0x51b64e(0x700)];},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x39c)]=function(){const _0x979218=_0x444cf3;if(this[_0x979218(0x90e)]===_0x979218(0x428))return![];if(this[_0x979218(0x90e)]===_0x979218(0x6fa))return![];if(!this[_0x979218(0x39a)]())return![];return this['item']()[_0x979218(0x1cd)][_0x979218(0x6b8)](/<JS TARGETS>/i);},Game_Action['prototype'][_0x444cf3(0xa3d)]=function(){const _0x2104be=_0x444cf3;if(this[_0x2104be(0x90e)]==='all\x20actors')return![];if(this[_0x2104be(0x90e)]===_0x2104be(0x6fa))return![];if(!this['_forcing']&&this['subject']()[_0x2104be(0x672)]())return![];if(this[_0x2104be(0x39c)]())return!![];if(!this[_0x2104be(0x39a)]())return![];return typeof this[_0x2104be(0x39a)]()[_0x2104be(0x234)]===_0x2104be(0x950);},VisuMZ[_0x444cf3(0x7cf)]['Game_Action_isForOpponent']=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x89a)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x89a)]=function(){const _0x26ef59=_0x444cf3;if(this[_0x26ef59(0x90e)]===_0x26ef59(0x428))return![];if(this['_targetBattlerKey']===_0x26ef59(0x6fa))return!![];return this[_0x26ef59(0xa3d)]()&&!this[_0x26ef59(0x39c)]()?this[_0x26ef59(0x881)]():VisuMZ[_0x26ef59(0x7cf)][_0x26ef59(0x681)][_0x26ef59(0x4a6)](this);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x881)]=function(){const _0x170a09=_0x444cf3,_0x38e851=this[_0x170a09(0x39a)]()[_0x170a09(0x234)];return _0x38e851['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore'][_0x444cf3(0x3dd)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x374)],Game_Action[_0x444cf3(0x8f4)]['isForFriend']=function(){const _0x1a8bc0=_0x444cf3;if(this[_0x1a8bc0(0x90e)]===_0x1a8bc0(0x428))return!![];if(this['_targetBattlerKey']===_0x1a8bc0(0x6fa))return![];return this[_0x1a8bc0(0xa3d)]()&&!this['isCustomBattleScope']()?this[_0x1a8bc0(0xa36)]():VisuMZ[_0x1a8bc0(0x7cf)][_0x1a8bc0(0x3dd)]['call'](this);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0xa36)]=function(){const _0x447ef8=_0x444cf3,_0x28ea7c=this[_0x447ef8(0x39a)]()[_0x447ef8(0x234)];return _0x28ea7c['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action['prototype']['isForAnyone']=function(){const _0x243e70=_0x444cf3;if(this[_0x243e70(0xa3d)]()&&!this[_0x243e70(0x39c)]()){const _0x23df2b=this[_0x243e70(0x39a)]()[_0x243e70(0x234)];return _0x23df2b[_0x243e70(0x6b8)](/(?:ENEMY|FOE)/i)&&_0x23df2b[_0x243e70(0x6b8)](/OR/i)&&_0x23df2b[_0x243e70(0x6b8)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x444cf3(0x8f4)]['isForAnyoneFocusFriends']=function(){const _0x2ead4a=_0x444cf3;if(this[_0x2ead4a(0x537)]()){const _0x36f4e5=this[_0x2ead4a(0x39a)]()[_0x2ead4a(0x234)];if(_0x36f4e5[_0x2ead4a(0x6b8)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x481)]=function(){const _0x16291b=_0x444cf3;if(this[_0x16291b(0x537)]()){const _0x1df8ca=this[_0x16291b(0x39a)]()['scope'];if(_0x1df8ca[_0x16291b(0x6b8)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x467)]=Game_Action[_0x444cf3(0x8f4)]['isForAliveFriend'],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x814)]=function(){const _0x35cea5=_0x444cf3;return this[_0x35cea5(0xa3d)]()&&!this[_0x35cea5(0x39c)]()?this['isForAliveFriendBattleCore']():VisuMZ['BattleCore']['Game_Action_isForAliveFriend'][_0x35cea5(0x4a6)](this);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x28d)]=function(){const _0x3c8d0e=_0x444cf3;if(this[_0x3c8d0e(0x537)]())return!![];return![];},Game_Action[_0x444cf3(0x8f4)]['isForNotUser']=function(){const _0x236b44=_0x444cf3;return this[_0x236b44(0x39a)]()&&this[_0x236b44(0x39a)]()[_0x236b44(0x1cd)][_0x236b44(0x6b8)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore']['Game_Action_isForOne']=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x331)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x331)]=function(){const _0x571a0d=_0x444cf3;if(this[_0x571a0d(0x90e)]===_0x571a0d(0x428))return![];if(this[_0x571a0d(0x90e)]===_0x571a0d(0x6fa))return![];return this[_0x571a0d(0xa3d)]()&&!this[_0x571a0d(0x39c)]()?this['isForOneBattleCore']():VisuMZ['BattleCore'][_0x571a0d(0x1c8)][_0x571a0d(0x4a6)](this);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x377)]=function(){const _0x575e83=_0x444cf3;if(this[_0x575e83(0x537)]())return!![];return![];},VisuMZ['BattleCore'][_0x444cf3(0x2cc)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x4c5)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x4c5)]=function(){const _0x134f36=_0x444cf3;if(this[_0x134f36(0x90e)]===_0x134f36(0x428))return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];return this[_0x134f36(0xa3d)]()&&!this['isCustomBattleScope']()?this[_0x134f36(0x3e7)]():VisuMZ[_0x134f36(0x7cf)][_0x134f36(0x2cc)]['call'](this);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x3e7)]=function(){const _0x588e73=_0x444cf3,_0x30bdf2=this['item']()[_0x588e73(0x234)];return _0x30bdf2[_0x588e73(0x6b8)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x444cf3(0x7cf)]['Game_Action_isForAll']=Game_Action['prototype'][_0x444cf3(0x9c7)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x9c7)]=function(){const _0x59bf79=_0x444cf3;if(this[_0x59bf79(0x90e)]===_0x59bf79(0x428))return!![];if(this['_targetBattlerKey']===_0x59bf79(0x6fa))return!![];return VisuMZ[_0x59bf79(0x7cf)][_0x59bf79(0x37f)][_0x59bf79(0x4a6)](this);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x3b6)]=function(){const _0x226a18=_0x444cf3;if(!this[_0x226a18(0x39a)]())return![];if(this['isForDeadFriend']())return![];return(this[_0x226a18(0x39a)]()['note']||'')[_0x226a18(0x6b8)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore'][_0x444cf3(0x2cf)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x890)],Game_Action[_0x444cf3(0x8f4)]['testApply']=function(_0x53dcad){const _0x314e66=_0x444cf3;if(this[_0x314e66(0x5db)]()&&_0x53dcad===this['subject']())return![];return VisuMZ[_0x314e66(0x7cf)][_0x314e66(0x2cf)][_0x314e66(0x4a6)](this,_0x53dcad);},VisuMZ['BattleCore'][_0x444cf3(0x1d5)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x709)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x709)]=function(){const _0x4fbf81=_0x444cf3,_0x416996=VisuMZ['BattleCore'][_0x4fbf81(0x1d5)][_0x4fbf81(0x4a6)](this);if(this[_0x4fbf81(0x5db)]())_0x416996[_0x4fbf81(0x6ee)](this[_0x4fbf81(0x34a)]());return _0x416996;},VisuMZ['BattleCore'][_0x444cf3(0x3c0)]=Game_Action[_0x444cf3(0x8f4)]['needsSelection'],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x836)]=function(){const _0x3e77c7=_0x444cf3;return this[_0x3e77c7(0xa3d)]()&&!this[_0x3e77c7(0x39c)]()?this['needsSelectionBattleCore']():VisuMZ[_0x3e77c7(0x7cf)]['Game_Action_needsSelection'][_0x3e77c7(0x4a6)](this);},Game_Action['prototype'][_0x444cf3(0x689)]=function(){const _0x485e43=_0x444cf3,_0x41bf5a=this[_0x485e43(0x39a)]()[_0x485e43(0x234)];if(_0x41bf5a['match'](/RANDOM/i))return![];if(_0x41bf5a[_0x485e43(0x6b8)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x41bf5a[_0x485e43(0x6b8)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x41bf5a['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x41bf5a[_0x485e43(0x6b8)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ['BattleCore'][_0x485e43(0x3c0)][_0x485e43(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)]['Game_Action_makeTargets']=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x270)],Game_Action['prototype'][_0x444cf3(0x270)]=function(){const _0xe3d67e=_0x444cf3;let _0x27a5c9=[];return this['isBattleCoreTargetScope']()?this[_0xe3d67e(0x39c)]()?_0x27a5c9=this[_0xe3d67e(0x39f)]():_0x27a5c9=this[_0xe3d67e(0x47d)]():_0x27a5c9=VisuMZ[_0xe3d67e(0x7cf)]['Game_Action_makeTargets']['call'](this),_0x27a5c9=this['applyTargetFilters'](_0x27a5c9),_0x27a5c9;},Game_Action[_0x444cf3(0x8f4)]['isSubjectValidForAnyoneSelect']=function(){const _0x3a359c=_0x444cf3;return this[_0x3a359c(0x34a)]()[_0x3a359c(0xa93)]()&&!this['subject']()[_0x3a359c(0x646)]();},Game_Action[_0x444cf3(0x8f4)]['makeTargetsBattleCoreJS']=function(){const _0x55ca46=_0x444cf3,_0x3e136c=VisuMZ[_0x55ca46(0x7cf)][_0x55ca46(0x674)](this[_0x55ca46(0x39a)](),_0x55ca46(0x9fe));if(VisuMZ['BattleCore']['JS'][_0x3e136c]){targets=VisuMZ[_0x55ca46(0x7cf)][_0x55ca46(0x76e)][_0x55ca46(0x4a6)](this);const _0x295149=VisuMZ['BattleCore']['createKeyJS'](this[_0x55ca46(0x39a)](),_0x55ca46(0x9fe));return targets=VisuMZ[_0x55ca46(0x7cf)]['JS'][_0x295149][_0x55ca46(0x4a6)](this,this[_0x55ca46(0x34a)](),targets),this['repeatTargets'](targets);}return this[_0x55ca46(0x47d)]();},Game_Action['prototype'][_0x444cf3(0x47d)]=function(){const _0x284f56=_0x444cf3;let _0x5601d8=[];const _0x51e404=String(this['item']()['scope']);if(this[_0x284f56(0x481)]())return this[_0x284f56(0x24a)]()?(_0x5601d8=this['getBattlerKeyTargets'](),this[_0x284f56(0x53d)](_0x5601d8)):(this[_0x284f56(0x8ed)]=-0x1,_0x5601d8[_0x284f56(0x87e)](...this[_0x284f56(0x80e)]()),this[_0x284f56(0x53d)](_0x5601d8));if(this['isForAnyoneFocusFriends']()){if(this[_0x284f56(0x24a)]())return _0x5601d8=this[_0x284f56(0x37d)](),this[_0x284f56(0x53d)](_0x5601d8);else{if(Imported[_0x284f56(0x9d8)]){if(VisuMZ[_0x284f56(0x926)][_0x284f56(0x95c)]<1.19){let _0x36bd42='';_0x36bd42+=_0x284f56(0x1b2),_0x36bd42+=_0x284f56(0x22a),_0x36bd42+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x36bd42),SceneManager[_0x284f56(0x431)]();}}return this['_targetIndex']=-0x1,_0x5601d8['push'](...this[_0x284f56(0x215)]()),this[_0x284f56(0x53d)](_0x5601d8);}}if(_0x51e404['match'](/(\d+) RANDOM ANY/i)){let _0x19204e=Number(RegExp['$1']);while(_0x19204e--){const _0x4d028e=Math[_0x284f56(0x4cc)](0x2)===0x0?this[_0x284f56(0xa3f)]():this['friendsUnit']();_0x5601d8[_0x284f56(0x87e)](_0x4d028e[_0x284f56(0x1f9)]());}return this[_0x284f56(0x53d)](_0x5601d8);}if(_0x51e404[_0x284f56(0x6b8)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x64534e=Number(RegExp['$1']);while(_0x64534e--){_0x5601d8['push'](this[_0x284f56(0xa3f)]()[_0x284f56(0x1f9)]());}return this[_0x284f56(0x53d)](_0x5601d8);}if(_0x51e404[_0x284f56(0x6b8)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x2a7ada=Number(RegExp['$1']);while(_0x2a7ada--){_0x5601d8[_0x284f56(0x87e)](this['friendsUnit']()[_0x284f56(0x1f9)]());}return this[_0x284f56(0x53d)](_0x5601d8);}if(_0x51e404[_0x284f56(0x6b8)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x5601d8[_0x284f56(0x87e)](...this[_0x284f56(0x4e3)]()[_0x284f56(0xaf5)]()[_0x284f56(0x4d3)](_0x2b6a6e=>_0x2b6a6e!==this['subject']())),this[_0x284f56(0x53d)](_0x5601d8);return VisuMZ['BattleCore'][_0x284f56(0x76e)][_0x284f56(0x4a6)](this);},Game_Action[_0x444cf3(0x8f4)]['randomTargets']=function(_0x470b21){const _0x14b8e9=_0x444cf3,_0x5225bb=[];for(let _0x5851fb=0x0;_0x5851fb<this[_0x14b8e9(0x843)]();_0x5851fb++){_0x5225bb[_0x14b8e9(0x87e)](_0x470b21[_0x14b8e9(0x1f9)]());}return _0x5225bb;},Game_Action[_0x444cf3(0x8f4)]['applyTargetFilters']=function(_0x3628d3){const _0x2879d8=_0x444cf3;if(!this[_0x2879d8(0x39a)]())return _0x3628d3;const _0x1ef9c8=this[_0x2879d8(0x39a)]()[_0x2879d8(0x1cd)];if(this[_0x2879d8(0x5db)]()){this[_0x2879d8(0x9c7)]()&&_0x3628d3['remove'](this[_0x2879d8(0x34a)]());if(_0x3628d3[_0x2879d8(0xa60)](this[_0x2879d8(0x34a)]())){const _0xa43fa8=this[_0x2879d8(0x4e3)]()[_0x2879d8(0xaf5)]()['remove'](this[_0x2879d8(0x34a)]());if(_0xa43fa8[_0x2879d8(0xa40)]>0x0){_0xa43fa8[_0x2879d8(0x38a)]((_0x2965fd,_0x107aa5)=>_0x2965fd[_0x2879d8(0x299)]()-_0x107aa5[_0x2879d8(0x299)]());while(_0x3628d3['includes'](this['subject']())){const _0x2afc7b=_0x3628d3[_0x2879d8(0x2c5)](this['subject']());_0x3628d3[_0x2afc7b]=_0xa43fa8[Math[_0x2879d8(0x4cc)](_0xa43fa8[_0x2879d8(0xa40)])];}}else _0x3628d3[_0x2879d8(0x6ee)](this[_0x2879d8(0x34a)]());}}return _0x3628d3;},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x1f7)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x86b)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x86b)]=function(_0x28550b,_0x17da19){const _0x72e28c=_0x444cf3;VisuMZ['BattleCore'][_0x72e28c(0x1f7)][_0x72e28c(0x4a6)](this,_0x28550b,_0x17da19);if(!_0x28550b[_0x72e28c(0xa29)]())return;for(const _0x35ae11 of this['subject']()[_0x72e28c(0x480)]()){if(_0x35ae11===_0x28550b['deathStateId']()){let _0x2d3eb5=_0x17da19[_0x72e28c(0x6a2)];_0x2d3eb5*=_0x28550b['stateRate'](_0x35ae11),_0x2d3eb5*=this[_0x72e28c(0x34a)]()[_0x72e28c(0xb0b)](_0x35ae11),_0x2d3eb5*=this[_0x72e28c(0x7c8)](_0x28550b),Math[_0x72e28c(0x641)]()<_0x2d3eb5&&(_0x28550b['_deathStateApplied']=!![],this[_0x72e28c(0x969)](_0x28550b));}}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xaf3)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x5f9)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x5f9)]=function(_0x463050,_0x1e55ee){const _0x5143b8=_0x444cf3;VisuMZ['BattleCore']['Game_Action_itemEffectAddNormalState']['call'](this,_0x463050,_0x1e55ee);if(!_0x463050[_0x5143b8(0xa29)]())return;if(_0x1e55ee[_0x5143b8(0x779)]!==_0x463050[_0x5143b8(0xa25)]())return;let _0x5c3626=_0x1e55ee['value1'];!this[_0x5143b8(0x3ed)]()&&(_0x5c3626*=_0x463050['stateRate'](_0x1e55ee[_0x5143b8(0x779)]),_0x5c3626*=this['lukEffectRate'](_0x463050)),Math[_0x5143b8(0x641)]()<_0x5c3626&&(_0x463050[_0x5143b8(0x385)]=!![],this[_0x5143b8(0x969)](_0x463050));},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x3fb)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x2c2)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x2c2)]=function(){const _0x39b88b=_0x444cf3;VisuMZ[_0x39b88b(0x7cf)][_0x39b88b(0x3fb)]['call'](this),this[_0x39b88b(0x285)](),this[_0x39b88b(0xa14)]();},Game_Action[_0x444cf3(0x8f4)]['applyGlobalCommonEventNotetags']=function(){const _0x48b6e2=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x2ad568=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x3353ef=this[_0x48b6e2(0x39a)]()[_0x48b6e2(0x1cd)]['match'](_0x2ad568);if(_0x3353ef)for(const _0x27adbb of _0x3353ef){if(!_0x27adbb)continue;_0x27adbb[_0x48b6e2(0x6b8)](_0x2ad568);const _0x52c1f7=String(RegExp['$1'])['split'](',')['map'](_0x5d60a7=>String(_0x5d60a7)[_0x48b6e2(0x78c)]()),_0x11cc9e=_0x52c1f7[_0x48b6e2(0x7f8)](_0x38b943=>DataManager[_0x48b6e2(0xa51)](_0x38b943));for(const _0x52961f of _0x11cc9e){const _0x293215=$dataCommonEvents[_0x52961f];_0x293215&&$gameTemp[_0x48b6e2(0xaab)](_0x52961f);}}},DataManager[_0x444cf3(0xa51)]=function(_0x176316){const _0x149ec4=_0x444cf3;_0x176316=_0x176316['toUpperCase']()[_0x149ec4(0x78c)](),this['_commonEventIDs']=this['_commonEventIDs']||{};if(this['_commonEventIDs'][_0x176316])return this['_commonEventIDs'][_0x176316];for(const _0x113469 of $dataCommonEvents){if(!_0x113469)continue;let _0x4e407f=_0x113469[_0x149ec4(0x21a)];_0x4e407f=_0x4e407f['replace'](/\x1I\[(\d+)\]/gi,''),_0x4e407f=_0x4e407f[_0x149ec4(0x5c9)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x4e407f[_0x149ec4(0x839)]()[_0x149ec4(0x78c)]()]=_0x113469['id'];}return this['_commonEventIDs'][_0x176316]||0x0;},Game_Action[_0x444cf3(0x8f4)]['resetResultSwitches']=function(){const _0x143781=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x568108=VisuMZ[_0x143781(0x7cf)][_0x143781(0x52b)][_0x143781(0x982)];_0x568108[_0x143781(0x78b)]&&$gameSwitches[_0x143781(0xaef)](_0x568108[_0x143781(0x78b)],![]),_0x568108[_0x143781(0x8bd)]&&$gameSwitches[_0x143781(0xaef)](_0x568108[_0x143781(0x8bd)],![]),_0x568108['VariableDmg']&&$gameVariables['setValue'](_0x568108[_0x143781(0x5a4)],0x0),_0x568108[_0x143781(0x396)]&&$gameVariables[_0x143781(0xaef)](_0x568108[_0x143781(0x396)],0x0);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x5cd)]=function(_0x542d93){const _0x1c03ab=_0x444cf3;if(!SceneManager['isSceneBattle']())return;if(!_0x542d93)return;const _0x139965=_0x542d93[_0x1c03ab(0x6d1)](),_0x4a82bb=VisuMZ[_0x1c03ab(0x7cf)][_0x1c03ab(0x52b)]['Mechanics'];_0x4a82bb[_0x1c03ab(0x78b)]&&_0x139965[_0x1c03ab(0x69c)]&&$gameSwitches[_0x1c03ab(0xaef)](_0x4a82bb['SwitchCritical'],!![]);_0x4a82bb[_0x1c03ab(0x8bd)]&&(_0x139965[_0x1c03ab(0xb05)]||_0x139965[_0x1c03ab(0x6af)])&&$gameSwitches[_0x1c03ab(0xaef)](_0x4a82bb['SwitchMissEvade'],!![]);if(_0x4a82bb[_0x1c03ab(0x5a4)]){let _0xf29342=$gameVariables['value'](_0x4a82bb[_0x1c03ab(0x5a4)]);_0x139965['hpDamage']>0x0&&(_0xf29342+=Math[_0x1c03ab(0x62b)](_0x139965[_0x1c03ab(0xa7d)])),$gameVariables['setValue'](_0x4a82bb[_0x1c03ab(0x5a4)],_0xf29342);}if(_0x4a82bb[_0x1c03ab(0x396)]){let _0x2568ef=$gameVariables[_0x1c03ab(0x473)](_0x4a82bb[_0x1c03ab(0x396)]);_0x139965[_0x1c03ab(0xa7d)]<0x0&&(_0x2568ef+=Math[_0x1c03ab(0x62b)](_0x139965[_0x1c03ab(0xa7d)])),$gameVariables['setValue'](_0x4a82bb['VariableHeal'],_0x2568ef);}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x820)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ['BattleCore'][_0x444cf3(0x8b2)]=Game_Action['prototype'][_0x444cf3(0x562)],Game_Action[_0x444cf3(0x8f4)]['executeHpDamage']=function(_0x3ad306,_0x2ea57d){const _0xa5636=_0x444cf3;VisuMZ[_0xa5636(0x7cf)][_0xa5636(0x8b2)][_0xa5636(0x4a6)](this,_0x3ad306,_0x2ea57d),!this[_0xa5636(0xa16)]()&&_0x3ad306&&_0x3ad306[_0xa5636(0x6d1)]()[_0xa5636(0xa7d)]>0x0&&this[_0xa5636(0x354)]('HP',_0x3ad306,_0x3ad306[_0xa5636(0x6d1)]()[_0xa5636(0xa7d)]);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x694)]=Game_Action['prototype'][_0x444cf3(0x8e8)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x8e8)]=function(_0x27d03b,_0x5dc48c){const _0x22bf13=_0x444cf3;VisuMZ[_0x22bf13(0x7cf)]['Game_Action_executeMpDamage'][_0x22bf13(0x4a6)](this,_0x27d03b,_0x5dc48c),!this[_0x22bf13(0xa16)]()&&_0x27d03b&&_0x27d03b[_0x22bf13(0x6d1)]()[_0x22bf13(0x65a)]>0x0&&this[_0x22bf13(0x354)]('MP',_0x27d03b,_0x27d03b['result']()[_0x22bf13(0x65a)]);},Game_Action[_0x444cf3(0x8f4)]['performLifeSteal']=function(_0x4eb626,_0x5601ec,_0x3bf5a1){const _0x43678d=_0x444cf3;_0x4eb626=_0x4eb626[_0x43678d(0x839)]()[_0x43678d(0x78c)]();const _0x5a31f3=this[_0x43678d(0xa47)](_0x4eb626,_0x5601ec);if(_0x5a31f3<=0x0)return;const _0xa3517e=Math[_0x43678d(0xa43)](_0x3bf5a1*_0x5a31f3);if(_0xa3517e<=0x0)return;let _0xfb6ab=this[_0x43678d(0x34a)]();if(this['_reflectionTarget'])_0xfb6ab=this[_0x43678d(0x3bb)];const _0x37ebb2=_0x5601ec[_0x43678d(0x1d0)](_0x4eb626)?-0x1:0x1;if(_0x4eb626==='HP')_0xfb6ab['gainHp'](_0x37ebb2*_0xa3517e);if(_0x4eb626==='MP')_0xfb6ab[_0x43678d(0x7f0)](_0x37ebb2*_0xa3517e);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0xa47)]=function(_0x2477b9,_0x44a175){const _0x54e724=_0x444cf3;if(this['isCancelLifeSteal'](_0x2477b9))return 0x0;if(this[_0x54e724(0x34a)]()[_0x54e724(0x2d6)](_0x2477b9))return 0x0;if(_0x44a175['isGuardLifeSteal'](_0x2477b9))return 0x0;let _0x349f5f=0x0;return _0x349f5f+=this[_0x54e724(0x5e2)](_0x2477b9),_0x349f5f+=this[_0x54e724(0x34a)]()[_0x54e724(0xa47)](_0x2477b9,this['item']()['hitType']),_0x349f5f[_0x54e724(0xadc)](0x0,0x1);},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x419)]=function(_0x48f27b){const _0xe2306b=_0x444cf3;_0x48f27b=_0x48f27b[_0xe2306b(0x839)]()[_0xe2306b(0x78c)]();const _0x52f3e4=VisuMZ[_0xe2306b(0x7cf)][_0xe2306b(0x820)],_0x540dad=this[_0xe2306b(0x39a)]()[_0xe2306b(0x1cd)]||'';if(_0x540dad[_0xe2306b(0x6b8)](_0x52f3e4[_0xe2306b(0x57f)]))return!![];if(_0x48f27b==='HP'&&_0x540dad[_0xe2306b(0x6b8)](_0x52f3e4['cancelHpLifeSteal']))return!![];if(_0x48f27b==='MP'&&_0x540dad[_0xe2306b(0x6b8)](_0x52f3e4[_0xe2306b(0x89b)]))return!![];return![];},Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x5e2)]=function(_0x205588){const _0x4a6732=_0x444cf3,_0x464409=VisuMZ[_0x4a6732(0x7cf)][_0x4a6732(0x820)],_0xefbd09=this[_0x4a6732(0x39a)]()[_0x4a6732(0x1cd)]||'';_0x205588=_0x205588['toUpperCase']()[_0x4a6732(0x78c)]();const _0x3a3b5f=_0xefbd09[_0x4a6732(0x6b8)](_0x464409[_0x4a6732(0x1d9)]);if(_0x3a3b5f)for(const _0x1cc6b5 of _0x3a3b5f){_0x1cc6b5[_0x4a6732(0x6b8)](_0x464409['lifeSteaItem']);const _0x294d22=String(RegExp['$1'])[_0x4a6732(0x839)]()[_0x4a6732(0x78c)](),_0x210f06=Number(RegExp['$2'])*0.01;if(_0x294d22!==_0x205588)continue;return _0x210f06;}return 0x0;},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0xa47)]=function(_0x848341,_0x3d5d78){const _0x3015a2=_0x444cf3,_0xb2b84e=VisuMZ['BattleCore']['LifeStealRegExp'];let _0x36f115=0x0;_0x848341=_0x848341[_0x3015a2(0x839)]()[_0x3015a2(0x78c)]();for(const _0x33fe0b of this[_0x3015a2(0x79a)]()){if(!_0x33fe0b)continue;const _0x313199=_0x33fe0b[_0x3015a2(0x1cd)]||'',_0xd8afb8=_0x313199[_0x3015a2(0x6b8)](_0xb2b84e['lifeStealTrait']);if(_0xd8afb8)for(const _0xc9157e of _0xd8afb8){_0xc9157e[_0x3015a2(0x6b8)](_0xb2b84e[_0x3015a2(0x45c)]);const _0x1edef1=String(RegExp['$1'])['toUpperCase']()[_0x3015a2(0x78c)](),_0x7acffc=String(RegExp['$2']),_0x52a311=Number(RegExp['$3'])*0.01;if(_0x1edef1!==_0x848341)continue;if(_0x3d5d78===Game_Action[_0x3015a2(0x455)]&&_0x7acffc[_0x3015a2(0x6b8)](/CERTAIN/i))_0x36f115+=_0x52a311;else{if(_0x3d5d78===Game_Action['HITTYPE_PHYSICAL']&&_0x7acffc[_0x3015a2(0x6b8)](/PHYS/i))_0x36f115+=_0x52a311;else _0x3d5d78===Game_Action['HITTYPE_MAGICAL']&&_0x7acffc[_0x3015a2(0x6b8)](/MAGIC/i)&&(_0x36f115+=_0x52a311);}}}return _0x36f115;},Game_BattlerBase['prototype'][_0x444cf3(0x2d6)]=function(_0x4cc9ca){const _0x34ba0e=_0x444cf3;_0x4cc9ca=_0x4cc9ca[_0x34ba0e(0x839)]()['trim']();const _0xab011e=VisuMZ['BattleCore'][_0x34ba0e(0x820)];for(const _0x3cf190 of this[_0x34ba0e(0x79a)]()){if(!_0x3cf190)continue;const _0x1858b5=_0x3cf190[_0x34ba0e(0x1cd)]||'';if(_0x1858b5[_0x34ba0e(0x6b8)](_0xab011e[_0x34ba0e(0x719)]))return!![];if(_0x4cc9ca==='HP'&&_0x1858b5[_0x34ba0e(0x6b8)](_0xab011e[_0x34ba0e(0x638)]))return!![];if(_0x4cc9ca==='MP'&&_0x1858b5[_0x34ba0e(0x6b8)](_0xab011e[_0x34ba0e(0x84c)]))return!![];}return![];},Game_BattlerBase['prototype']['isNegativeLifeSteal']=function(_0x46176e){const _0x576649=_0x444cf3;_0x46176e=_0x46176e[_0x576649(0x839)]()[_0x576649(0x78c)]();const _0x92b2b7=VisuMZ['BattleCore'][_0x576649(0x820)];for(const _0x5f3d79 of this['traitObjects']()){if(!_0x5f3d79)continue;const _0x21c98c=_0x5f3d79['note']||'';if(_0x21c98c[_0x576649(0x6b8)](_0x92b2b7[_0x576649(0x726)]))return!![];if(_0x46176e==='HP'&&_0x21c98c[_0x576649(0x6b8)](_0x92b2b7[_0x576649(0x9a4)]))return!![];if(_0x46176e==='MP'&&_0x21c98c[_0x576649(0x6b8)](_0x92b2b7[_0x576649(0x7ac)]))return!![];}return![];},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x97c)]=function(_0x37659d){const _0x49c090=_0x444cf3;_0x37659d=_0x37659d[_0x49c090(0x839)]()[_0x49c090(0x78c)]();const _0x159cac=VisuMZ['BattleCore']['LifeStealRegExp'];for(const _0xd96d1c of this[_0x49c090(0x79a)]()){if(!_0xd96d1c)continue;const _0x42b64a=_0xd96d1c[_0x49c090(0x1cd)]||'';if(_0x42b64a[_0x49c090(0x6b8)](_0x159cac['guardLifeSteal']))return!![];if(_0x37659d==='HP'&&_0x42b64a[_0x49c090(0x6b8)](_0x159cac[_0x49c090(0x9a8)]))return!![];if(_0x37659d==='MP'&&_0x42b64a['match'](_0x159cac['guardMpLifeSteal']))return!![];}return![];},VisuMZ['BattleCore']['Game_BattlerBase_initMembers']=Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x990)],Game_BattlerBase[_0x444cf3(0x8f4)]['initMembers']=function(){const _0x33930e=_0x444cf3;VisuMZ['BattleCore'][_0x33930e(0x6d6)][_0x33930e(0x4a6)](this),this[_0x33930e(0x40f)]();},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x40f)]=function(){this['_immortal']=![];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x38d)]=Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x60e)],Game_BattlerBase['prototype'][_0x444cf3(0x60e)]=function(){const _0x36375a=_0x444cf3;this[_0x36375a(0x816)]={},VisuMZ[_0x36375a(0x7cf)][_0x36375a(0x38d)][_0x36375a(0x4a6)](this);},Game_BattlerBase['prototype'][_0x444cf3(0x1c2)]=function(_0x1be572){const _0x28b3aa=_0x444cf3;return this[_0x28b3aa(0x816)]=this[_0x28b3aa(0x816)]||{},this[_0x28b3aa(0x816)][_0x1be572]!==undefined;},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x4f7)]=function(){const _0x585ccc=_0x444cf3;if(this['_cache'][_0x585ccc(0x4f7)]!==undefined)return this[_0x585ccc(0x816)][_0x585ccc(0x4f7)];const _0x5a0d5d=/<DAMAGE CAP:[ ](\d+)>/i,_0x5f50de=this[_0x585ccc(0x79a)]()[_0x585ccc(0x7f8)](_0x3b52b5=>_0x3b52b5&&_0x3b52b5[_0x585ccc(0x1cd)][_0x585ccc(0x6b8)](_0x5a0d5d)?Number(RegExp['$1']):0x0);let _0x11ac57=_0x5f50de[_0x585ccc(0xa40)]>0x0?Math[_0x585ccc(0x642)](..._0x5f50de):0x0;if(_0x11ac57<=0x0)_0x11ac57=VisuMZ[_0x585ccc(0x7cf)][_0x585ccc(0x52b)]['Damage'][_0x585ccc(0x9a1)];return this[_0x585ccc(0x816)][_0x585ccc(0x4f7)]=_0x11ac57,this['_cache'][_0x585ccc(0x4f7)];},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x3c1)]=function(){const _0x4caaee=_0x444cf3;if(this['_cache'][_0x4caaee(0x54b)]!==undefined)return this[_0x4caaee(0x816)][_0x4caaee(0x54b)];let _0x347903=VisuMZ[_0x4caaee(0x7cf)][_0x4caaee(0x52b)]['Damage'][_0x4caaee(0x901)];const _0x3c7529=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x289ec3=this[_0x4caaee(0x79a)]()[_0x4caaee(0x7f8)](_0x3f7e23=>_0x3f7e23&&_0x3f7e23[_0x4caaee(0x1cd)]['match'](_0x3c7529)?Number(RegExp['$1'])/0x64:0x0);return _0x347903=_0x289ec3[_0x4caaee(0x647)]((_0x1b1636,_0x67c584)=>_0x1b1636+_0x67c584,_0x347903),this[_0x4caaee(0x816)][_0x4caaee(0x54b)]=_0x347903,this[_0x4caaee(0x816)][_0x4caaee(0x54b)][_0x4caaee(0xadc)](0.01,0x1);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x919)]=Game_BattlerBase[_0x444cf3(0x8f4)]['die'],Game_BattlerBase[_0x444cf3(0x8f4)]['die']=function(){const _0x4493bc=_0x444cf3;VisuMZ['BattleCore']['Game_BattlerBase_die']['call'](this),SceneManager[_0x4493bc(0xa7a)]()&&this[_0x4493bc(0x9af)](_0x4493bc(0x8ca));},Game_BattlerBase[_0x444cf3(0x8f4)]['battler']=function(){const _0x4ea100=_0x444cf3;if(!SceneManager[_0x4ea100(0xa7a)]())return null;if(!SceneManager['_scene'][_0x4ea100(0x9f5)])return null;return SceneManager['_scene'][_0x4ea100(0x9f5)][_0x4ea100(0x3c4)](this);},Game_BattlerBase['prototype'][_0x444cf3(0x2d8)]=function(){const _0xeaf274=_0x444cf3;return VisuMZ[_0xeaf274(0x7cf)]['Settings'][_0xeaf274(0x3d8)][_0xeaf274(0x8d7)];},Game_BattlerBase['prototype'][_0x444cf3(0x8fe)]=function(){const _0x45210a=_0x444cf3;return VisuMZ[_0x45210a(0x7cf)][_0x45210a(0x52b)][_0x45210a(0x3d8)][_0x45210a(0x8bf)];},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x790)]=function(){const _0x4112b6=_0x444cf3;return this[_0x4112b6(0xa93)]&&this[_0x4112b6(0xa93)]()?VisuMZ[_0x4112b6(0x7cf)]['Settings']['Actor'][_0x4112b6(0x7a5)]:VisuMZ[_0x4112b6(0x7cf)]['Settings'][_0x4112b6(0x52d)][_0x4112b6(0x7a5)];},Game_BattlerBase['prototype']['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x338)]=function(){return 0x0;},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0xb2d)]=function(){return 0x0;},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x866)]=function(_0x271fd2){const _0x5a77a9=_0x444cf3;if(!_0x271fd2)return 0x0;let _0x4a8318=0x0;const _0x2f0160=_0x271fd2[_0x5a77a9(0x1cd)];return _0x2f0160[_0x5a77a9(0x6b8)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x4a8318+=Number(RegExp['$1'])),_0x2f0160['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4a8318+=Number(RegExp['$1'])),_0x4a8318;},Game_BattlerBase['prototype'][_0x444cf3(0x758)]=function(_0x3a7498){const _0x1b2274=_0x444cf3;if(!_0x3a7498)return 0x0;let _0x1a9da4=0x0;const _0x3f8ded=_0x3a7498[_0x1b2274(0x1cd)];return _0x3f8ded[_0x1b2274(0x6b8)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x1a9da4+=Number(RegExp['$1'])),_0x3f8ded[_0x1b2274(0x6b8)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1a9da4+=Number(RegExp['$2'])),_0x1a9da4;},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x6a3)]=Game_BattlerBase['prototype'][_0x444cf3(0x7bd)],Game_BattlerBase['prototype'][_0x444cf3(0x7bd)]=function(_0x39ca84){const _0x534e18=_0x444cf3;if(_0x39ca84===this['deathStateId']()&&this['isImmortal']())return!![];return VisuMZ[_0x534e18(0x7cf)][_0x534e18(0x6a3)]['call'](this,_0x39ca84);},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0xa29)]=function(){const _0x3aaa5b=_0x444cf3;return this[_0x3aaa5b(0x941)];},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x832)]=function(_0x4ae628){const _0xfbeb9b=_0x444cf3;_0x4ae628?this['addImmortal']():this[_0xfbeb9b(0x235)]();},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x442)]=function(){const _0x39873a=_0x444cf3;if(this[_0x39873a(0x678)]())return;this['_immortal']=!![],this[_0x39873a(0x385)]=![];},Game_BattlerBase[_0x444cf3(0x8f4)]['removeImmortal']=function(){const _0x5b96bf=_0x444cf3,_0x2f4456=this[_0x5b96bf(0xad2)]();this['_immortal']=![],_0x2f4456&&this[_0x5b96bf(0x385)]&&this['die'](),this['_deathStateApplied']=![],this[_0x5b96bf(0x60e)](),this[_0x5b96bf(0x678)]()&&_0x2f4456&&(this[_0x5b96bf(0x62d)](),this[_0x5b96bf(0x98e)]());},VisuMZ['BattleCore'][_0x444cf3(0xa0f)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x7dd)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x7dd)]=function(){const _0x164d38=_0x444cf3;return this['item']()?VisuMZ[_0x164d38(0x7cf)][_0x164d38(0xa0f)]['call'](this):0x0;},VisuMZ['BattleCore'][_0x444cf3(0x33d)]=Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x81c)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x81c)]=function(){const _0x3202f1=_0x444cf3;this[_0x3202f1(0x34a)]()&&this[_0x3202f1(0x34a)]()[_0x3202f1(0x8b8)]()?VisuMZ[_0x3202f1(0x7cf)][_0x3202f1(0x33d)]['call'](this):this[_0x3202f1(0x667)]();},VisuMZ['BattleCore'][_0x444cf3(0x521)]=Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x8b8)],Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x8b8)]=function(){const _0x4402f7=_0x444cf3;if(!this[_0x4402f7(0xaf6)]())return![];return VisuMZ[_0x4402f7(0x7cf)][_0x4402f7(0x521)][_0x4402f7(0x4a6)](this);},Game_BattlerBase['prototype'][_0x444cf3(0xaf6)]=function(){const _0x3a63d2=_0x444cf3;for(const _0x9c432b of this[_0x3a63d2(0x79a)]()){if(!_0x9c432b)continue;if(_0x9c432b[_0x3a63d2(0x1cd)][_0x3a63d2(0x6b8)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x530)]=Game_Action['prototype'][_0x444cf3(0x75e)],Game_Action[_0x444cf3(0x8f4)][_0x444cf3(0x75e)]=function(){const _0x32a72b=_0x444cf3;this[_0x32a72b(0x34a)]()[_0x32a72b(0x1be)]()&&VisuMZ['BattleCore'][_0x32a72b(0x530)][_0x32a72b(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x7b6)]=Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x1be)],Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x1be)]=function(){const _0x2d3bdf=_0x444cf3;if(!this[_0x2d3bdf(0x96b)]())return![];return VisuMZ[_0x2d3bdf(0x7cf)]['Game_BattlerBase_canGuard']['call'](this);},Game_BattlerBase['prototype'][_0x444cf3(0x96b)]=function(){const _0x1ca996=_0x444cf3;for(const _0x764fa1 of this['traitObjects']()){if(!_0x764fa1)continue;if(_0x764fa1[_0x1ca996(0x1cd)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x444cf3(0x8f4)]['canUseItemCommand']=function(){const _0x2ed311=_0x444cf3;for(const _0x30ba89 of this['traitObjects']()){if(!_0x30ba89)continue;if(_0x30ba89['note'][_0x2ed311(0x6b8)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x444cf3(0x7cf)]['Game_BattlerBase_meetsUsableItemConditions']=Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x981)],Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x981)]=function(_0x53b6f4){const _0x220430=_0x444cf3;if(_0x53b6f4&&_0x53b6f4['note'][_0x220430(0x6b8)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x44253b=this[_0x220430(0x4e3)]()[_0x220430(0xaf5)]();if(_0x44253b['length']===0x1&&_0x44253b[0x0]===this)return![];}return VisuMZ[_0x220430(0x7cf)][_0x220430(0x7e0)][_0x220430(0x4a6)](this,_0x53b6f4);},Game_Battler[_0x444cf3(0x8f4)]['allowRandomSpeed']=function(){const _0x2dcf65=_0x444cf3;return VisuMZ[_0x2dcf65(0x7cf)]['Settings'][_0x2dcf65(0x982)]['AllowRandomSpeed'];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x4c6)]=Game_Battler['prototype']['regenerateAll'],Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x406)]=function(){const _0x59209a=_0x444cf3;if(SceneManager['isSceneBattle']()){if(BattleManager[_0x59209a(0x98f)]()){if(this[_0x59209a(0x61b)]()<=0x0)return;}else{if($gameTroop[_0x59209a(0x61b)]()<=0x0)return;}}if(SceneManager[_0x59209a(0xa7a)]()&&BattleManager[_0x59209a(0x98f)]()&&this[_0x59209a(0x547)]===Graphics[_0x59209a(0xb21)])return;this['_lastRegenFrameCount']=Graphics['frameCount'],SceneManager[_0x59209a(0xa7a)]()&&this[_0x59209a(0x840)]('PreRegenerateJS'),VisuMZ[_0x59209a(0x7cf)][_0x59209a(0x4c6)][_0x59209a(0x4a6)](this),SceneManager[_0x59209a(0xa7a)]()&&(this[_0x59209a(0x4f4)](),this[_0x59209a(0x840)](_0x59209a(0x45d)));},Game_Battler['prototype']['regenerateAllBattleCore']=function(){const _0x2a1f3f=_0x444cf3;if(SceneManager[_0x2a1f3f(0xa7a)]())for(const _0x134272 of this[_0x2a1f3f(0x79a)]()){if(!_0x134272)continue;this['onRegeneratePlayStateAnimation'](_0x134272);}},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x5ed)]=function(_0x5dd1a4){const _0x250a2a=_0x444cf3;if(!Imported[_0x250a2a(0x8d5)])return;if(!SceneManager[_0x250a2a(0xa7a)]())return;if(this[_0x250a2a(0x678)]())return;if(this['isHidden']())return;if(_0x5dd1a4[_0x250a2a(0x1cd)][_0x250a2a(0x6b8)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x2bbda9=Number(RegExp['$1']);$gameTemp[_0x250a2a(0x3e8)]([this],_0x2bbda9,![],![]);}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x7d2)]=Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x6e4)],Game_Battler['prototype']['startTpbTurn']=function(){const _0x45c888=_0x444cf3;this[_0x45c888(0x840)]('PreStartTurnJS'),VisuMZ[_0x45c888(0x7cf)]['Game_Battler_startTpbTurn'][_0x45c888(0x4a6)](this),this[_0x45c888(0x840)](_0x45c888(0x1e5));},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x87d)]=Game_Battler[_0x444cf3(0x8f4)]['onTurnEnd'],Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x8b9)]=function(){const _0x21c155=_0x444cf3;this[_0x21c155(0x840)](_0x21c155(0x35c)),VisuMZ[_0x21c155(0x7cf)][_0x21c155(0x87d)]['call'](this),this['processBattleCoreJS']('PostEndTurnJS');},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x840)]=function(_0xc7fbd3){const _0xfef413=_0x444cf3;if(this[_0xfef413(0x88d)]||this['_tempActor'])return;const _0x684f52=VisuMZ[_0xfef413(0x7cf)][_0xfef413(0x52b)]['Mechanics'];if(_0x684f52[_0xc7fbd3])_0x684f52[_0xc7fbd3][_0xfef413(0x4a6)](this);for(const _0x311355 of this['traitObjects']()){if(!_0x311355)continue;key=VisuMZ[_0xfef413(0x7cf)][_0xfef413(0x674)](_0x311355,_0xc7fbd3),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0xfef413(0x7cf)]['JS'][key][_0xfef413(0x4a6)](this,this,this,_0x311355,0x0);}},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x8c0)]=function(){const _0x39936e=_0x444cf3;return VisuMZ[_0x39936e(0x7cf)][_0x39936e(0x52b)][_0x39936e(0x3d8)]['ChantStyle']||![];},Game_Battler[_0x444cf3(0x8f4)]['isChanting']=function(){const _0x29c89b=_0x444cf3;if(this[_0x29c89b(0x7b4)]()){if(this[_0x29c89b(0x8c0)]()){if(this[_0x29c89b(0x3a7)]['some'](_0x49d589=>_0x49d589['item']()&&_0x49d589[_0x29c89b(0x3f3)]()))return!![];}else{if(this['_actions']['some'](_0x2cebd1=>_0x2cebd1[_0x29c89b(0x39a)]()&&_0x2cebd1['isMagicSkill']()))return!![];}}if(BattleManager[_0x29c89b(0x98f)]()&&this[_0x29c89b(0xa94)]===_0x29c89b(0x301))return this['chantStyle']()?this[_0x29c89b(0x5b8)]()&&this[_0x29c89b(0x5b8)]()[_0x29c89b(0x39a)]()&&this[_0x29c89b(0x5b8)]()[_0x29c89b(0x3f3)]():this[_0x29c89b(0x5b8)]()&&this['currentAction']()['item']()&&this[_0x29c89b(0x5b8)]()[_0x29c89b(0x4bf)]();return![];},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x82e)]=function(){const _0x137c5f=_0x444cf3;if(BattleManager[_0x137c5f(0x98f)]()&&this[_0x137c5f(0xa94)]==='casting')return this[_0x137c5f(0x8c0)]()?this[_0x137c5f(0x5b8)]()&&this[_0x137c5f(0x5b8)]()['item']()&&!this[_0x137c5f(0x5b8)]()['isMagical']():this[_0x137c5f(0x5b8)]()&&this[_0x137c5f(0x5b8)]()[_0x137c5f(0x39a)]()&&!this[_0x137c5f(0x5b8)]()['isMagicSkill']();return![];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xaa5)]=Game_Battler[_0x444cf3(0x8f4)]['clearDamagePopup'],Game_Battler[_0x444cf3(0x8f4)]['clearDamagePopup']=function(){const _0x2e5427=_0x444cf3;VisuMZ[_0x2e5427(0x7cf)][_0x2e5427(0xaa5)][_0x2e5427(0x4a6)](this),this[_0x2e5427(0x9ea)]=[];},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0xb07)]=function(){const _0x3318c1=_0x444cf3;if(!this['_damagePopupArray'])this['clearDamagePopup']();return this[_0x3318c1(0x9ea)][_0x3318c1(0xa40)]>0x0;},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x9e3)]=function(){const _0x15f1d5=_0x444cf3;if(!SceneManager[_0x15f1d5(0xa7a)]())return;if(BattleManager[_0x15f1d5(0x486)]())return;if(!this[_0x15f1d5(0x9ea)])this[_0x15f1d5(0x62e)]();this[_0x15f1d5(0xb03)]();const _0x25833c=this[_0x15f1d5(0x516)]();if(_0x25833c)_0x25833c[_0x15f1d5(0x968)]();},Game_Battler[_0x444cf3(0x8f4)]['createSeparateDamagePopups']=function(){const _0x900d09=_0x444cf3,_0x50fc5b=this['result']();if(_0x50fc5b[_0x900d09(0xb05)]||_0x50fc5b[_0x900d09(0x6af)]){const _0x3f017a=JsonEx['makeDeepCopy'](_0x50fc5b);_0x3f017a[_0x900d09(0x4e5)]=![],_0x3f017a[_0x900d09(0x65a)]=0x0,this['_damagePopupArray'][_0x900d09(0x87e)](_0x3f017a);}if(_0x50fc5b[_0x900d09(0x4e5)]){const _0x599ff5=JsonEx[_0x900d09(0x5d7)](_0x50fc5b);_0x599ff5[_0x900d09(0xb05)]=![],_0x599ff5[_0x900d09(0x6af)]=![],_0x599ff5[_0x900d09(0x65a)]=0x0,this[_0x900d09(0x9ea)][_0x900d09(0x87e)](_0x599ff5);}if(_0x50fc5b[_0x900d09(0x65a)]!==0x0){const _0x39bae6=JsonEx[_0x900d09(0x5d7)](_0x50fc5b);_0x39bae6[_0x900d09(0xb05)]=![],_0x39bae6[_0x900d09(0x6af)]=![],_0x39bae6[_0x900d09(0x4e5)]=![],this[_0x900d09(0x9ea)][_0x900d09(0x87e)](_0x39bae6);}},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x28a)]=function(){const _0x29275c=_0x444cf3;if(!this[_0x29275c(0x9ea)])this['clearDamagePopup']();return VisuMZ[_0x29275c(0x7cf)]['Settings']['Damage']['NewPopupBottom']?this[_0x29275c(0x9ea)]['shift']():this[_0x29275c(0x9ea)][_0x29275c(0x702)]();},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x6c5)]=function(_0x19b26b,_0x31417f){const _0x5eaed3=_0x444cf3;if(!SceneManager[_0x5eaed3(0xa7a)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this['battler']())return;if(_0x19b26b[_0x5eaed3(0xa40)]<=0x0)return;_0x31417f=_0x31417f||{},_0x31417f['textColor']=_0x31417f[_0x5eaed3(0x3f1)]||_0x5eaed3(0xab8),_0x31417f[_0x5eaed3(0x995)]=_0x31417f[_0x5eaed3(0x995)]||[0x0,0x0,0x0,0x0],_0x31417f[_0x5eaed3(0x485)]=_0x31417f[_0x5eaed3(0x485)]||0x0,this[_0x5eaed3(0x516)]()[_0x5eaed3(0x6c5)](_0x19b26b,_0x31417f);},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x37b)]=function(_0x35ea9f,_0x1b7a06,_0x558f35){const _0x23e259=_0x444cf3;if(!SceneManager[_0x23e259(0xa7a)]())return;if(BattleManager[_0x23e259(0x486)]())return;if(!this['battler']())return;if(_0x1b7a06['length']<=0x0)return;_0x558f35=_0x558f35||{},_0x558f35[_0x23e259(0x3f1)]=_0x558f35[_0x23e259(0x3f1)]||_0x23e259(0xab8),_0x558f35[_0x23e259(0x995)]=_0x558f35[_0x23e259(0x995)]||[0x0,0x0,0x0,0x0],_0x558f35['flashDuration']=_0x558f35['flashDuration']||0x0,this[_0x23e259(0x516)]()[_0x23e259(0x37b)](_0x35ea9f,_0x1b7a06,_0x558f35);},Game_Battler[_0x444cf3(0x8f4)]['notFocusValid']=function(){const _0x5cbdc3=_0x444cf3;if(this[_0x5cbdc3(0x32a)]())return![];if(this['isAlive']()&&this[_0x5cbdc3(0x9b0)]())return!![];if(this[_0x5cbdc3(0x36e)]()&&this[_0x5cbdc3(0x572)]()){if(this[_0x5cbdc3(0x678)]()&&this[_0x5cbdc3(0x2e2)]())return![];}else{if(this[_0x5cbdc3(0x678)]())return![];}return!![];},VisuMZ[_0x444cf3(0x7cf)]['Game_Battler_clearMotion']=Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0xb12)],Game_Battler['prototype'][_0x444cf3(0xb12)]=function(){const _0x2aa0c9=_0x444cf3;VisuMZ[_0x2aa0c9(0x7cf)]['Game_Battler_clearMotion'][_0x2aa0c9(0x4a6)](this),this[_0x2aa0c9(0x9de)]();},Game_Battler['prototype'][_0x444cf3(0x4cb)]=function(){return!![];},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x415)]=function(){return![];},VisuMZ[_0x444cf3(0x7cf)]['Game_Battler_onBattleStart']=Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x536)],Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x536)]=function(_0x51c6fb){const _0x29bb9b=_0x444cf3;VisuMZ[_0x29bb9b(0x7cf)][_0x29bb9b(0x552)][_0x29bb9b(0x4a6)](this,_0x51c6fb),this['onBattleStartBattleCore'](_0x51c6fb),this['clearDamagePopup']();},Game_Battler[_0x444cf3(0x8f4)]['onBattleStartBattleCore']=function(_0x36320d){const _0x549b33=_0x444cf3;this[_0x549b33(0x61d)](![]),this[_0x549b33(0x800)]=undefined,this[_0x549b33(0xae3)]=undefined;},VisuMZ['BattleCore'][_0x444cf3(0x64f)]=Game_Battler['prototype'][_0x444cf3(0x7a4)],Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x7a4)]=function(){const _0x35252f=_0x444cf3;VisuMZ[_0x35252f(0x7cf)][_0x35252f(0x64f)]['call'](this),this[_0x35252f(0xa5b)]();},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0xa5b)]=function(){const _0x65ff97=_0x444cf3;this[_0x65ff97(0x800)]=undefined,this[_0x65ff97(0xae3)]=undefined;},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x636)]=Game_Battler['prototype'][_0x444cf3(0xb0e)],Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0xb0e)]=function(_0x120419){const _0x1b5a82=_0x444cf3;VisuMZ[_0x1b5a82(0x7cf)][_0x1b5a82(0x636)][_0x1b5a82(0x4a6)](this,_0x120419);if(!_0x120419[_0x1b5a82(0x9e1)]()){const _0x226dda=this[_0x1b5a82(0x516)]();_0x226dda&&_0x226dda[_0x1b5a82(0x5d1)]();}this[_0x1b5a82(0x61d)](![]);},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x321)]=function(){const _0x64b17a=_0x444cf3,_0x350505=this[_0x64b17a(0x8b0)];this['_flinched']=![];if(BattleManager[_0x64b17a(0x90b)]()&&this[_0x64b17a(0x973)]()){const _0x1b8979=this[_0x64b17a(0x516)]();if(_0x1b8979&&_0x350505)_0x1b8979[_0x64b17a(0x5d1)]();return;}const _0x4db98e=this['battler']();if(_0x4db98e)_0x4db98e[_0x64b17a(0x9bd)]();this['setBattlerFlip'](![]),this['requestMotionRefresh']();},Game_Battler[_0x444cf3(0x8f4)]['performActionMotions']=function(_0x5324df){const _0x4abd93=_0x444cf3;if(_0x5324df[_0x4abd93(0x71f)]())this[_0x4abd93(0x4a8)]();else{if(_0x5324df[_0x4abd93(0x9e1)]())this[_0x4abd93(0x9af)](_0x4abd93(0x8ec));else{if(_0x5324df[_0x4abd93(0x3f3)]())this['requestMotion']('spell');else{if(_0x5324df[_0x4abd93(0xa3c)]())[0x1,0x2,0x5,0x6]['includes'](_0x5324df['item']()[_0x4abd93(0x319)]['type'])?this[_0x4abd93(0x4a8)]():this['requestMotion']('skill');else _0x5324df[_0x4abd93(0x867)]()&&this[_0x4abd93(0x9af)]('item');}}}},Game_Battler['prototype']['getAttackMotion']=function(){const _0x368bb2=_0x444cf3;return $dataSystem[_0x368bb2(0x24e)][0x0];},Game_Battler['prototype'][_0x444cf3(0x1ca)]=function(){const _0x20c716=_0x444cf3,_0x30e4f3=this['getAttackMotion']();return _0x30e4f3?_0x30e4f3[_0x20c716(0x624)]:0x0;},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x5ff)]=function(_0x338429){const _0x173611=_0x444cf3;if(!$gameSystem['isSideView']())return;const _0x4fb643=this[_0x173611(0x516)](),_0x144256=_0x338429[_0x173611(0x516)]();if(!_0x4fb643||!_0x144256)return;const _0x4a63de=_0x144256['_baseX'],_0x3505ab=_0x144256[_0x173611(0x801)];this['moveBattlerToPoint'](_0x4a63de,_0x3505ab,0x0,![],_0x173611(0xafa),-0x1),_0x4fb643[_0x173611(0x4e6)]();const _0x5b4fa6=VisuMZ[_0x173611(0x7cf)][_0x173611(0x52b)][_0x173611(0x57a)];let _0x23cb94=(_0x144256['width']+_0x4fb643[_0x173611(0x851)])/0x2;_0x23cb94*=this['isActor']()?0x1:-0x1;let _0x322053=_0x5b4fa6[_0x173611(0x620)]*(this[_0x173611(0xa93)]()?0x1:-0x1);_0x338429[_0x173611(0x675)](_0x23cb94,_0x322053,0x0,![],_0x173611(0xafa)),_0x144256['updatePosition']();},Game_Battler['prototype'][_0x444cf3(0x9af)]=function(_0x4f5e16){const _0x1cd442=_0x444cf3;if(SceneManager[_0x1cd442(0xa7a)]()){const _0x2eae8d=this[_0x1cd442(0x516)]();_0x2eae8d&&(_0x2eae8d[_0x1cd442(0x22c)](_0x4f5e16),[_0x1cd442(0xacb),_0x1cd442(0x673),_0x1cd442(0xae6)][_0x1cd442(0xa60)](_0x4f5e16)&&this[_0x1cd442(0xa07)]());}this['clearFreezeMotion']();},Game_Battler[_0x444cf3(0x8f4)]['performWeaponAnimation']=function(){},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x8f6)]=function(_0x292639){const _0x87367b=_0x444cf3;if(SceneManager[_0x87367b(0xa7a)]()){const _0x323d53=this[_0x87367b(0x516)]();if(_0x323d53)_0x323d53[_0x87367b(0x510)](_0x292639);}},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x2de)]=function(){const _0x145d3a=_0x444cf3;if(SceneManager[_0x145d3a(0xa7a)]()){const _0x43ea9b=this['getAttackWeaponAnimationId']();this['startWeaponAnimation'](_0x43ea9b);}},Game_Battler[_0x444cf3(0x8f4)]['performCastAnimation']=function(_0x5392f9,_0x315a8d){const _0x313700=_0x444cf3;if(!_0x5392f9)return;if(!_0x5392f9[_0x313700(0x39a)]())return;if(_0x5392f9['isAttack']())return;if(_0x5392f9[_0x313700(0x9e1)]())return;if(_0x5392f9[_0x313700(0x867)]())return;let _0x55e009=0x0;const _0x3b37b3=VisuMZ[_0x313700(0x7cf)][_0x313700(0x52b)][_0x313700(0x57a)],_0x14306a=_0x5392f9[_0x313700(0x39a)]()[_0x313700(0x1cd)];if(_0x14306a['match'](/<CAST ANIMATION: (\d+)>/i))_0x55e009=Number(RegExp['$1']);else{if(_0x14306a[_0x313700(0x6b8)](/<NO CAST ANIMATION>/i))return;else{if(_0x5392f9[_0x313700(0x3ed)]())_0x55e009=_0x3b37b3['CastCertain'];else{if(_0x5392f9[_0x313700(0x63e)]())_0x55e009=_0x3b37b3['CastPhysical'];else _0x5392f9['isMagical']()&&(_0x55e009=_0x3b37b3[_0x313700(0x7e9)]);}}}_0x55e009>0x0&&$gameTemp[_0x313700(0x4b3)]([this],_0x55e009,!!_0x315a8d);},Game_Battler['prototype']['performReflection']=function(){const _0x3c9959=_0x444cf3;SoundManager['playReflection']();let _0x582dc0=VisuMZ[_0x3c9959(0x7cf)]['Settings'][_0x3c9959(0x57a)][_0x3c9959(0x5b0)];_0x582dc0>0x0&&(Imported['VisuMZ_0_CoreEngine']?$gameTemp[_0x3c9959(0x3e8)]([this],_0x582dc0):$gameTemp[_0x3c9959(0x4b3)]([this],_0x582dc0));},VisuMZ[_0x444cf3(0x7cf)]['Game_Battler_performDamage']=Game_Battler['prototype'][_0x444cf3(0x23b)],Game_Battler['prototype']['performDamage']=function(){const _0x465d43=_0x444cf3;VisuMZ['BattleCore']['Game_Battler_performDamage'][_0x465d43(0x4a6)](this),this['performFlinch'](),this[_0x465d43(0x7a9)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xb01)]=Game_Battler['prototype'][_0x444cf3(0x80f)],Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x80f)]=function(){const _0x118414=_0x444cf3;VisuMZ[_0x118414(0x7cf)]['Game_Battler_performMiss'][_0x118414(0x4a6)](this),this[_0x118414(0x864)]();},VisuMZ['BattleCore']['Game_Battler_performEvasion']=Game_Battler['prototype']['performEvasion'],Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x4db)]=function(){const _0x4db4b0=_0x444cf3;VisuMZ[_0x4db4b0(0x7cf)][_0x4db4b0(0x7db)][_0x4db4b0(0x4a6)](this),this['performFlinch']();},Game_Battler[_0x444cf3(0x8f4)]['performFlinch']=function(){const _0x4d6952=_0x444cf3;if(!$gameSystem[_0x4d6952(0x718)]())return;if(this[_0x4d6952(0x8b0)])return;this[_0x4d6952(0x8b0)]=!![];const _0x51ffcc=this[_0x4d6952(0x516)]();if(_0x51ffcc)_0x51ffcc[_0x4d6952(0x745)]();},Game_Battler['prototype'][_0x444cf3(0x7a9)]=function(){const _0x224157=_0x444cf3;if(!this[_0x224157(0x4cb)]())return;const _0x7a9995=VisuMZ[_0x224157(0x7cf)]['Settings'][_0x224157(0x3d8)];if(!(_0x7a9995['ShakeFlinch']??![]))return;if(this[_0x224157(0x7d3)]<=0x0)return;const _0x3dde7e=this[_0x224157(0x516)]();if(_0x3dde7e){const _0x2ce759=this[_0x224157(0x7d3)],_0x296251=(_0x2ce759/this['mhp'])[_0x224157(0xadc)](0.8,0x1),_0x4098c7=_0x7a9995[_0x224157(0xa52)]??0x30,_0x503598=_0x296251*_0x4098c7;_0x3dde7e[_0x224157(0x503)](_0x503598,_0x296251);}},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x98e)]=function(){const _0x392f26=_0x444cf3;if(this[_0x392f26(0x678)]()&&this['_motionType']!==_0x392f26(0x8ca)){this[_0x392f26(0x9af)](_0x392f26(0x8ca));return;}if(this[_0x392f26(0x678)]()&&this[_0x392f26(0x5ea)]===_0x392f26(0x8ca))return;if(!!this[_0x392f26(0x227)])return;if(this['isEnemy']()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x392f26(0x55d)]){if(this[_0x392f26(0x516)]())this['battler']()[_0x392f26(0x53c)]();}this[_0x392f26(0x9de)]();return;}if(this[_0x392f26(0x5ea)]===_0x392f26(0x730))return;if(this[_0x392f26(0x5ea)]==='escape'&&!BattleManager['isInputting']())return;if(this[_0x392f26(0x5ea)]===_0x392f26(0x8ec)&&!BattleManager['isInputting']())return;this[_0x392f26(0xb12)]();if(BattleManager[_0x392f26(0x90b)]()&&this===BattleManager['_subject'])return;if(this[_0x392f26(0x516)]()&&BattleManager['isInputting']()){this['battler']()[_0x392f26(0x53c)](),this[_0x392f26(0x9de)]();return;}},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x8d9)]=function(){const _0x4e4cfb=_0x444cf3;if(!this[_0x4e4cfb(0x572)]())return![];const _0x45478b=this[_0x4e4cfb(0x516)]();if(!_0x45478b)return![];const _0xe758a7=_0x45478b[_0x4e4cfb(0x9c0)];if(!_0xe758a7)return![];const _0x50b0e5=_0xe758a7[_0x4e4cfb(0x894)];return _0x50b0e5&&!_0x50b0e5[_0x4e4cfb(0x488)];},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x247)]=function(){return this['_isBattlerFlipped'];},Game_Battler['prototype'][_0x444cf3(0x61d)]=function(_0x421572){const _0x1f2537=_0x444cf3;if(!$gameSystem['isSideView']())return;this[_0x1f2537(0x68f)]=_0x421572;const _0x14b06d=this['battler']();if(_0x14b06d)_0x14b06d[_0x1f2537(0x7d0)]();},Game_Battler['prototype']['setBattlerFacePoint']=function(_0xeb92c8,_0x1485ee,_0x788058){const _0x14b732=_0x444cf3;if(!$gameSystem[_0x14b732(0x718)]())return;const _0x5e4b65=this[_0x14b732(0x516)]();if(!_0x5e4b65)return;if(_0xeb92c8===_0x5e4b65[_0x14b732(0x3d2)])return;let _0x2c24a4=![];if(this['isActor']()){if(_0xeb92c8>_0x5e4b65[_0x14b732(0x3d2)])_0x2c24a4=!![];if(_0xeb92c8<_0x5e4b65[_0x14b732(0x3d2)])_0x2c24a4=![];}else{if(this[_0x14b732(0x36e)]()){if(_0xeb92c8>_0x5e4b65[_0x14b732(0x3d2)])_0x2c24a4=![];if(_0xeb92c8<_0x5e4b65[_0x14b732(0x3d2)])_0x2c24a4=!![];}};this[_0x14b732(0x61d)](_0x788058?!_0x2c24a4:_0x2c24a4),_0x5e4b65['updateFlip']();},Game_Battler['prototype'][_0x444cf3(0x675)]=function(_0x236bd7,_0x521801,_0x53578d,_0x105228,_0x4d182d){const _0x1cad8f=_0x444cf3;if(!$gameSystem[_0x1cad8f(0x718)]())return;const _0x4110aa=this['battler']();if(!_0x4110aa)return;if(_0x105228)this['setBattlerFacePoint'](_0x236bd7+_0x4110aa['_baseX'],_0x521801+_0x4110aa[_0x1cad8f(0x801)],![]);_0x236bd7+=_0x4110aa[_0x1cad8f(0x3d2)]-_0x4110aa[_0x1cad8f(0x856)],_0x521801+=_0x4110aa[_0x1cad8f(0x801)]-_0x4110aa[_0x1cad8f(0xac8)],_0x4110aa[_0x1cad8f(0x4b5)](_0x236bd7,_0x521801,_0x53578d);if(Imported[_0x1cad8f(0x8d5)])_0x4110aa['setMoveEasingType'](_0x4d182d||_0x1cad8f(0xafa));},Game_Battler[_0x444cf3(0x8f4)]['moveBattlerToPoint']=function(_0x60f81e,_0x196cc8,_0x438692,_0xbf4ea2,_0x501e2f,_0x552d6c){const _0x231539=_0x444cf3;if(!$gameSystem[_0x231539(0x718)]())return;const _0x2ba286=this[_0x231539(0x516)]();if(!_0x2ba286)return;if(_0x60f81e===Infinity||_0x196cc8===Infinity)return;if(isNaN(_0x60f81e)||isNaN(_0x196cc8))return;_0x552d6c=_0x552d6c||0x0;if(_0x552d6c>0x0){if(_0x2ba286[_0x231539(0x3d2)]>_0x60f81e)_0x60f81e+=_0x2ba286['width']/0x2+_0x552d6c;if(_0x2ba286['_baseX']<_0x60f81e)_0x60f81e-=_0x2ba286[_0x231539(0x851)]/0x2+_0x552d6c;}if(_0xbf4ea2)this['setBattlerFacePoint'](_0x60f81e,_0x196cc8,![]);_0x60f81e-=_0x2ba286[_0x231539(0x856)],_0x196cc8-=_0x2ba286[_0x231539(0xac8)],_0x2ba286['startMove'](_0x60f81e,_0x196cc8,_0x438692);if(Imported[_0x231539(0x8d5)])_0x2ba286[_0x231539(0x8b7)](_0x501e2f||_0x231539(0xafa));},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x3cb)]=function(_0x2377ac,_0x427184,_0xf84f8e,_0x39cd30,_0x52c99f){const _0x4efa42=_0x444cf3;if(!$gameSystem[_0x4efa42(0x718)]())return;const _0x26c900=this[_0x4efa42(0x516)]();if(!_0x26c900)return;if(_0x39cd30)this['setBattlerFacePoint'](_0x2377ac+_0x26c900['_baseX'],_0x427184+_0x26c900[_0x4efa42(0x801)],![]);_0x2377ac+=_0x26c900['_homeX'],_0x427184+=_0x26c900[_0x4efa42(0xac8)],_0x26c900[_0x4efa42(0x927)](_0x2377ac,_0x427184,_0xf84f8e,_0x52c99f),this['_forcedHomeX']=_0x2377ac,this['_forcedHomeY']=_0x427184;},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x345)]=function(_0x53fc5a,_0x20add1,_0xd4ed2,_0x2eede8,_0x380856,_0x43fcbc){const _0x4955ce=_0x444cf3;if(!$gameSystem['isSideView']())return;const _0x17ccc3=this[_0x4955ce(0x516)]();if(!_0x17ccc3)return;_0x43fcbc=_0x43fcbc||0x0;if(_0x43fcbc>0x0){if(_0x17ccc3['_baseX']>_0x53fc5a)_0x53fc5a+=_0x17ccc3[_0x4955ce(0x851)]/0x2+_0x43fcbc;if(_0x17ccc3['_baseX']<_0x53fc5a)_0x53fc5a-=_0x17ccc3['width']/0x2+_0x43fcbc;}if(_0x2eede8)this[_0x4955ce(0x2dc)](_0x53fc5a,_0x20add1,![]);_0x17ccc3[_0x4955ce(0x927)](_0x53fc5a,_0x20add1,_0xd4ed2,_0x380856),this['_forcedHomeX']=_0x53fc5a,this[_0x4955ce(0xae3)]=_0x20add1;},Game_Battler['prototype'][_0x444cf3(0x5c7)]=function(_0x49feb0,_0x1c7ce8,_0x472b1e){const _0x59dbcc=_0x444cf3;if(!$gameSystem[_0x59dbcc(0x718)]())return;const _0x519157=this['battler']();if(!_0x519157)return;_0x519157[_0x59dbcc(0x978)](_0x49feb0,_0x1c7ce8,_0x472b1e);},Game_Battler['prototype'][_0x444cf3(0x79f)]=function(_0x5340e1,_0x5990de){const _0xc5ce90=_0x444cf3;if(!$gameSystem[_0xc5ce90(0x718)]())return;const _0x4b12e5=this[_0xc5ce90(0x516)]();if(!_0x4b12e5)return;_0x4b12e5[_0xc5ce90(0x31c)](_0x5340e1,_0x5990de);},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x720)]=function(_0x58be07,_0x31c67f,_0xa1b9ae,_0x18a68b){const _0x577e8a=_0x444cf3;if(!$gameSystem[_0x577e8a(0x718)]())return;const _0x5ec1c9=this[_0x577e8a(0x516)]();if(!_0x5ec1c9)return;_0x5ec1c9[_0x577e8a(0x732)](_0x58be07,_0x31c67f,_0xa1b9ae,_0x18a68b);},Game_Battler['prototype'][_0x444cf3(0x766)]=function(_0x248279,_0x2c73a5,_0x36d974,_0x11cf9a){const _0xaba7cd=_0x444cf3;if(!$gameSystem['isSideView']())return;const _0x4da25e=this[_0xaba7cd(0x516)]();if(!_0x4da25e)return;this['isActor']()&&(_0x248279*=-0x1,_0x2c73a5*=-0x1),_0x4da25e[_0xaba7cd(0x8a9)](_0x248279,_0x2c73a5,_0x36d974,_0x11cf9a);},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x1e1)]=function(_0x3b58a9,_0x3d89e0,_0x4ddca5,_0xff6cf7){const _0x4bdd11=_0x444cf3;if(!$gameSystem['isSideView']())return;const _0x2a73f5=this[_0x4bdd11(0x516)]();if(!_0x2a73f5)return;_0x2a73f5[_0x4bdd11(0x7de)](_0x3b58a9,_0x3d89e0,_0x4ddca5,_0xff6cf7);},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x6cf)]=function(_0xd1e995,_0x2a1888,_0x60e5a3){const _0x13e878=_0x444cf3;if(!$gameSystem[_0x13e878(0x718)]())return;const _0x3de470=this[_0x13e878(0x516)]();if(!_0x3de470)return;_0x3de470['startOpacity'](_0xd1e995,_0x2a1888,_0x60e5a3);},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x9de)]=function(){const _0x9ff156=_0x444cf3,_0x3c5fb3=!!this[_0x9ff156(0x227)];this['_freezeMotionData']=undefined,_0x3c5fb3&&(this['requestMotionRefresh'](),this['clearFreezeMotionForWeapons']());},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x79d)]=function(){const _0x30bc9a=_0x444cf3;if(!SceneManager['isSceneBattle']())return;const _0x2f5fae=this[_0x30bc9a(0x516)]();if(!_0x2f5fae)return;let _0x3a4221=this[_0x30bc9a(0xa93)]()?_0x2f5fae[_0x30bc9a(0x5ef)]:_0x2f5fae[_0x30bc9a(0x9c0)][_0x30bc9a(0x5ef)];_0x3a4221&&_0x3a4221[_0x30bc9a(0x5fb)](0x0);},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x8c3)]=function(_0x208044,_0x4258a0,_0x119df1){const _0x2498b4=_0x444cf3;if(this[_0x2498b4(0x36e)]()&&!this[_0x2498b4(0x572)]())return;let _0x1cb007=0x0,_0x5c1666=0x0;_0x208044[_0x2498b4(0x6b8)](/ATTACK[ ](\d+)/i)&&(_0x5c1666=Number(RegExp['$1']),_0x5c1666--);if(this[_0x2498b4(0xa93)]()){const _0x22e987=this['weapons']();_0x1cb007=_0x22e987[_0x5c1666]?_0x22e987[_0x5c1666][_0x2498b4(0x9b5)]:0x0;}else this[_0x2498b4(0x36e)]()&&(_0x1cb007=this[_0x2498b4(0x27f)]()[_0x2498b4(0x9b5)]||0x0);const _0x20a5d4=$dataSystem['attackMotions'][_0x1cb007];_0x208044[_0x2498b4(0x6b8)](/attack/i)&&(_0x208044=[_0x2498b4(0x673),_0x2498b4(0xacb),_0x2498b4(0xae6)][_0x20a5d4[_0x2498b4(0x86a)]]||_0x2498b4(0xacb)),this['_freezeMotionData']={'motionType':_0x208044,'weaponImageId':_0x4258a0?_0x20a5d4[_0x2498b4(0x624)]:0x0,'pattern':_0x119df1};},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x7ae)]=function(_0x210ccb){const _0x51ff71=_0x444cf3;if(!_0x210ccb)return![];return _0x210ccb[_0x51ff71(0x4e3)]()===this[_0x51ff71(0x4e3)]();},Game_Battler['prototype'][_0x444cf3(0x9a5)]=function(_0x2aa404){const _0x2fdd2d=_0x444cf3;if(!_0x2aa404)return![];return _0x2aa404[_0x2fdd2d(0xa3f)]()===this[_0x2fdd2d(0x4e3)]();},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x21c)]=function(){return![];},Game_Actor[_0x444cf3(0x8f4)]['hasStaticSvBattler']=function(){const _0x4ccbc7=_0x444cf3;return this[_0x4ccbc7(0x5b5)]()['match'](/\$/i);},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x21c)]=function(){const _0x358b14=_0x444cf3;return this[_0x358b14(0x572)]()&&this[_0x358b14(0x3b4)]()['match'](/\$/i);},VisuMZ['BattleCore'][_0x444cf3(0x33b)]=Game_Actor['prototype'][_0x444cf3(0x5fb)],Game_Actor[_0x444cf3(0x8f4)]['setup']=function(_0x21bfe6){const _0x42aedd=_0x444cf3;VisuMZ[_0x42aedd(0x7cf)]['Game_Actor_setup']['call'](this,_0x21bfe6),this[_0x42aedd(0xa5e)]();},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0xa5e)]=function(){const _0x1de15a=_0x444cf3;this[_0x1de15a(0xa10)]='',this[_0x1de15a(0x37a)]()&&this[_0x1de15a(0x37a)]()[_0x1de15a(0x1cd)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x1db)]=function(){const _0x448bf9=_0x444cf3;if(this['getBattlePortrait']()!=='')return this[_0x448bf9(0x561)]();else{if(Imported[_0x448bf9(0x392)]&&this['getMenuImage']()!=='')return this[_0x448bf9(0xab4)]();}return'';},Game_Actor[_0x444cf3(0x8f4)]['getBattlePortrait']=function(){const _0x64f28d=_0x444cf3;if(this[_0x64f28d(0xa10)]===undefined)this[_0x64f28d(0xa5e)]();return this[_0x64f28d(0xa10)];},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x9d1)]=function(_0x768bcc){const _0x409df6=_0x444cf3;if(this['_battlePortrait']===undefined)this['initBattlePortrait']();this[_0x409df6(0xa10)]=_0x768bcc;if(SceneManager[_0x409df6(0xa7a)]()&&$gameParty[_0x409df6(0x8b4)]()[_0x409df6(0xa60)](this)){const _0x1d47ff=SceneManager[_0x409df6(0xa67)][_0x409df6(0x842)];_0x1d47ff&&_0x1d47ff['refreshActorPortrait'](this);}},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x690)]=function(){return!![];},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x646)]=function(){const _0x4c9e4c=_0x444cf3;if(!this[_0x4c9e4c(0x672)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x4c9e4c(0x8f4)][_0x4c9e4c(0x646)]['call'](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x5d8)]=Game_Actor['prototype'][_0x444cf3(0x8e5)],Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x8e5)]=function(){const _0x483c1b=_0x444cf3;if(BattleManager['_autoBattle']&&!ConfigManager['autoBattleUseSkills'])return this[_0x483c1b(0x51d)]();else{return VisuMZ[_0x483c1b(0x7cf)]['Game_Actor_makeActionList'][_0x483c1b(0x4a6)](this);;}},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x51d)]=function(){const _0x377bde=_0x444cf3,_0x19c84b=[],_0x2b0d4e=new Game_Action(this);return _0x2b0d4e[_0x377bde(0x81c)](),_0x19c84b[_0x377bde(0x87e)](_0x2b0d4e),_0x19c84b;},Game_Actor['prototype'][_0x444cf3(0x3ca)]=function(){const _0x273be2=_0x444cf3;return this[_0x273be2(0x9dc)]()['note']['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ[_0x273be2(0x7cf)][_0x273be2(0x52b)][_0x273be2(0x324)][_0x273be2(0x3e0)];},Game_Actor['prototype']['svBattlerAnchorX']=function(){const _0x51f0fb=_0x444cf3;if(this['_cache'][_0x51f0fb(0x447)]!==undefined)return this[_0x51f0fb(0x816)][_0x51f0fb(0x447)];return this['actor']()['note'][_0x51f0fb(0x6b8)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x51f0fb(0x447)]=eval(RegExp['$1']),this[_0x51f0fb(0x816)][_0x51f0fb(0x580)]=eval(RegExp['$2'])):this['_cache']['svAnchorX']=Game_Battler[_0x51f0fb(0x8f4)][_0x51f0fb(0x2d8)][_0x51f0fb(0x4a6)](this),this['_cache'][_0x51f0fb(0x447)];},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x8fe)]=function(){const _0x2ed4bc=_0x444cf3;if(this[_0x2ed4bc(0x816)][_0x2ed4bc(0x580)]!==undefined)return this[_0x2ed4bc(0x816)][_0x2ed4bc(0x580)];return this['actor']()[_0x2ed4bc(0x1cd)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x2ed4bc(0x816)][_0x2ed4bc(0x447)]=eval(RegExp['$1']),this[_0x2ed4bc(0x816)]['svAnchorY']=eval(RegExp['$2'])):this[_0x2ed4bc(0x816)][_0x2ed4bc(0x580)]=Game_Battler[_0x2ed4bc(0x8f4)][_0x2ed4bc(0x8fe)][_0x2ed4bc(0x4a6)](this),this[_0x2ed4bc(0x816)][_0x2ed4bc(0x580)];},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x790)]=function(){const _0x513f1d=_0x444cf3;if(this[_0x513f1d(0x816)][_0x513f1d(0x9cb)]!==undefined)return this['_cache']['svShadow'];if(this['actor']()['note'][_0x513f1d(0x6b8)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache']['svShadow']=!![];else this[_0x513f1d(0x37a)]()['note'][_0x513f1d(0x6b8)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache'][_0x513f1d(0x9cb)]=![]:this[_0x513f1d(0x816)]['svShadow']=Game_Battler[_0x513f1d(0x8f4)][_0x513f1d(0x790)][_0x513f1d(0x4a6)](this);return this[_0x513f1d(0x816)][_0x513f1d(0x9cb)];},Game_Actor['prototype'][_0x444cf3(0x97e)]=function(){const _0x6682ed=_0x444cf3;return VisuMZ['BattleCore']['Settings'][_0x6682ed(0x3d8)]['SmoothImage'];},Game_Actor['prototype'][_0x444cf3(0xa07)]=function(){const _0x2c7ce5=_0x444cf3,_0x1ef679=this[_0x2c7ce5(0x4bc)](),_0x271d4f=_0x1ef679[0x0]?_0x1ef679[0x0][_0x2c7ce5(0x9b5)]:0x0,_0x5dbe81=$dataSystem[_0x2c7ce5(0x24e)][_0x271d4f];_0x5dbe81&&this['startWeaponAnimation'](_0x5dbe81[_0x2c7ce5(0x624)]);},Game_Actor['prototype'][_0x444cf3(0x36a)]=function(_0x390a43){const _0x5bb15a=_0x444cf3;Game_Battler[_0x5bb15a(0x8f4)]['performAction'][_0x5bb15a(0x4a6)](this,_0x390a43),this[_0x5bb15a(0x63b)](_0x390a43);},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0xafe)]=function(){const _0x1912fa=_0x444cf3,_0x2c542b=this[_0x1912fa(0x4bc)](),_0x273ed9=_0x2c542b[0x0]?_0x2c542b[0x0][_0x1912fa(0x9b5)]:0x0;return $dataSystem[_0x1912fa(0x24e)][_0x273ed9];},Game_Actor['prototype'][_0x444cf3(0xb31)]=function(_0x38ef7c){const _0x467478=_0x444cf3;_0x38ef7c=_0x38ef7c||0x1,_0x38ef7c--;const _0x469568=this[_0x467478(0x4bc)]();return _0x469568[_0x38ef7c]?_0x469568[_0x38ef7c][_0x467478(0x50d)]:0x0;},Game_Actor['prototype'][_0x444cf3(0x393)]=function(_0x47ea73){const _0x150aad=_0x444cf3;_0x47ea73=_0x47ea73||0x1,_0x47ea73--;const _0x440829=this[_0x150aad(0x4bc)](),_0x41b756=_0x440829[_0x47ea73]?_0x440829[_0x47ea73][_0x150aad(0x9b5)]:0x0;return $dataSystem[_0x150aad(0x24e)][_0x41b756];},Game_Actor['prototype'][_0x444cf3(0x588)]=function(_0x173d75){const _0x1ce3bd=_0x444cf3;_0x173d75=_0x173d75||0x1,_0x173d75--;const _0x584bcf=this[_0x1ce3bd(0x4bc)](),_0x27dc51=_0x584bcf[_0x173d75]?_0x584bcf[_0x173d75][_0x1ce3bd(0x9b5)]:0x0,_0x3067a3=$dataSystem[_0x1ce3bd(0x24e)][_0x27dc51];if(_0x3067a3){if(_0x3067a3[_0x1ce3bd(0x86a)]===0x0)this[_0x1ce3bd(0x9af)](_0x1ce3bd(0x673));else{if(_0x3067a3[_0x1ce3bd(0x86a)]===0x1)this['requestMotion']('swing');else _0x3067a3[_0x1ce3bd(0x86a)]===0x2&&this[_0x1ce3bd(0x9af)]('missile');}this[_0x1ce3bd(0x8f6)](_0x3067a3[_0x1ce3bd(0x624)]);}},Game_Battler[_0x444cf3(0x8f4)]['setActiveWeaponSlot']=function(_0x5abc66){const _0xcb086=_0x444cf3;this[_0xcb086(0x6aa)]=_0x5abc66||0x0,this[_0xcb086(0x816)]={};},Game_Battler['prototype']['nextActiveWeaponSlot']=function(){const _0x3345c8=_0x444cf3;this[_0x3345c8(0x6aa)]=this[_0x3345c8(0x6aa)]||0x0,this[_0x3345c8(0x6aa)]++,this[_0x3345c8(0x816)]={};},Game_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x592)]=function(){const _0x106e1d=_0x444cf3;this[_0x106e1d(0x6aa)]=undefined,this['_cache']={};},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x693)]=Game_Actor[_0x444cf3(0x8f4)]['equips'],Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x544)]=function(){const _0x4c18b2=_0x444cf3;let _0xa4fa59=VisuMZ[_0x4c18b2(0x7cf)]['Game_Actor_equips'][_0x4c18b2(0x4a6)](this);if(this[_0x4c18b2(0x6fd)])return _0xa4fa59;if(this[_0x4c18b2(0x6aa)]!==undefined){this[_0x4c18b2(0x6fd)]=!![];const _0x23c90f=this[_0x4c18b2(0x7d6)]();for(let _0x48e27f=0x0;_0x48e27f<_0x23c90f[_0x4c18b2(0xa40)];_0x48e27f++){_0x23c90f[_0x48e27f]===0x1&&this[_0x4c18b2(0x6aa)]!==_0x48e27f&&(_0xa4fa59[_0x48e27f]=null);}this[_0x4c18b2(0x6fd)]=undefined;}return _0xa4fa59;},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x332)]=function(_0x36680b){const _0x488da2=_0x444cf3;return _0x36680b[_0x488da2(0xa93)]()?_0x36680b[_0x488da2(0x4bc)]()['length']||0x1:0x1;},Window_BattleLog[_0x444cf3(0x8f4)]['setActiveWeaponSet']=function(_0x111087,_0x33a981){const _0x4803a8=_0x444cf3;_0x111087&&_0x111087[_0x4803a8(0xa93)]()&&_0x111087['setActiveWeaponSlot'](_0x33a981),this[_0x4803a8(0x1f8)]();},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xa5d)]=function(_0x525e12){const _0xa2fa08=_0x444cf3;_0x525e12&&_0x525e12[_0xa2fa08(0xa93)]()&&_0x525e12[_0xa2fa08(0x592)](),this[_0xa2fa08(0x1f8)]();},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x338)]=function(){const _0x275c56=_0x444cf3;let _0x10918e=_0x275c56(0x338);if(this[_0x275c56(0x1c2)](_0x10918e))return this[_0x275c56(0x816)][_0x10918e];return this[_0x275c56(0x816)][_0x10918e]=this['createBattleUIOffsetX'](this[_0x275c56(0x37a)]()),this['_cache'][_0x10918e];},Game_Actor['prototype']['battleUIOffsetY']=function(){const _0x23aace=_0x444cf3;let _0x53b05a=_0x23aace(0xb2d);if(this[_0x23aace(0x1c2)](_0x53b05a))return this[_0x23aace(0x816)][_0x53b05a];return this[_0x23aace(0x816)][_0x53b05a]=this[_0x23aace(0x758)](this[_0x23aace(0x37a)]()),this[_0x23aace(0x816)][_0x53b05a];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x7d8)]=Game_Enemy['prototype'][_0x444cf3(0x5fb)],Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x5fb)]=function(_0x3017bc,_0x3395ea,_0x194970){const _0x554933=_0x444cf3;_0x3017bc=DataManager[_0x554933(0x912)](_0x3017bc),VisuMZ[_0x554933(0x7cf)][_0x554933(0x7d8)]['call'](this,_0x3017bc,_0x3395ea,_0x194970),Imported[_0x554933(0x220)]&&this[_0x554933(0x48c)](),this[_0x554933(0x568)](),this[_0x554933(0xaa1)](),Imported[_0x554933(0x220)]&&this[_0x554933(0x3ea)]();},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x568)]=function(){const _0x2700d9=_0x444cf3,_0x2e6d4d=VisuMZ[_0x2700d9(0x7cf)][_0x2700d9(0x52b)]['Enemy'];this[_0x2700d9(0xae1)]=_0x2e6d4d[_0x2700d9(0x43a)],this[_0x2700d9(0x373)]={};},Game_Enemy[_0x444cf3(0x8f4)]['setupBattleCoreData']=function(){const _0x3fc34e=_0x444cf3,_0xfc4e2f=VisuMZ[_0x3fc34e(0x7cf)]['Settings'][_0x3fc34e(0x52d)],_0x4a1404=this[_0x3fc34e(0x452)]()['note'];this[_0x3fc34e(0x373)]={'name':'','wtypeId':_0xfc4e2f[_0x3fc34e(0xa63)],'collapse':_0xfc4e2f[_0x3fc34e(0x826)],'motionIdle':_0xfc4e2f[_0x3fc34e(0x97d)],'width':_0xfc4e2f[_0x3fc34e(0x1e2)]||0x40,'height':_0xfc4e2f[_0x3fc34e(0x3b5)]||0x40,'anchorX':_0xfc4e2f[_0x3fc34e(0x8d7)]||0x0,'anchorY':_0xfc4e2f[_0x3fc34e(0x8bf)]||0x0,'shadow':_0xfc4e2f['Shadow']};_0x4a1404['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x3fc34e(0xae1)]=Number(RegExp['$1']));const _0x4e4775=this['_svBattlerData'];if(_0x4a1404[_0x3fc34e(0x6b8)](/<SIDEVIEW BATTLER: (.*)>/i))_0x4e4775[_0x3fc34e(0x21a)]=String(RegExp['$1']);else{if(_0x4a1404['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x25c165=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x4e4775[_0x3fc34e(0x21a)]=DataManager[_0x3fc34e(0xa22)](_0x25c165);}}_0x4a1404[_0x3fc34e(0x6b8)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x4e4775[_0x3fc34e(0x549)]=eval(RegExp['$1']),_0x4e4775[_0x3fc34e(0x8f3)]=eval(RegExp['$2']));if(_0x4a1404['match'](/<SIDEVIEW COLLAPSE>/i))_0x4e4775[_0x3fc34e(0x315)]=!![];else _0x4a1404['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x4e4775[_0x3fc34e(0x315)]=![]);if(_0x4a1404['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x4e4775[_0x3fc34e(0x739)]=!![];else _0x4a1404[_0x3fc34e(0x6b8)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x4e4775[_0x3fc34e(0x739)]=![]);if(_0x4a1404[_0x3fc34e(0x6b8)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x4e4775[_0x3fc34e(0x34d)]=String(RegExp['$1'])[_0x3fc34e(0x1fd)]()['trim']();else{if(_0x4a1404[_0x3fc34e(0x6b8)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x4b13f3=String(RegExp['$1'])[_0x3fc34e(0x364)](/[\r\n]+/)[_0x3fc34e(0x6ee)]('');_0x4e4775[_0x3fc34e(0x34d)]=DataManager['processRandomizedData'](_0x4b13f3);}}_0x4a1404['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x4e4775[_0x3fc34e(0x851)]=Number(RegExp['$1']),_0x4e4775['height']=Number(RegExp['$2']));if(_0x4a1404[_0x3fc34e(0x6b8)](/<SIDEVIEW WEAPON: (.*)>/i))_0x4e4775[_0x3fc34e(0x9b5)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x4a1404[_0x3fc34e(0x6b8)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x32ecf5=String(RegExp['$1'])[_0x3fc34e(0x364)](/[\r\n]+/)[_0x3fc34e(0x6ee)](''),_0x344b9f=DataManager[_0x3fc34e(0xa22)](_0x32ecf5);_0x4e4775[_0x3fc34e(0x9b5)]=DataManager[_0x3fc34e(0x7fc)](_0x344b9f);}}if(Imported[_0x3fc34e(0x220)]){const _0x48d9d8=this[_0x3fc34e(0x960)]();for(const _0x48d8cf of _0x48d9d8){const _0x52efee=this['traitSet'](_0x48d8cf)[_0x3fc34e(0x601)][_0x3fc34e(0x839)]()[_0x3fc34e(0x78c)](),_0x4b8625=_0x48d8cf[_0x3fc34e(0x839)]()[_0x3fc34e(0x78c)]();if(_0x4a1404[_0x3fc34e(0x6b8)](VisuMZ[_0x3fc34e(0x3a4)][_0x3fc34e(0x9da)]['SvBattlerSolo-%1-%2'[_0x3fc34e(0x7d7)](_0x4b8625,_0x52efee)]))_0x4e4775[_0x3fc34e(0x21a)]=String(RegExp['$1']);else{if(_0x4a1404[_0x3fc34e(0x6b8)](VisuMZ['ElementStatusCore'][_0x3fc34e(0x9da)]['SvBattlerMass-%1-%2'[_0x3fc34e(0x7d7)](_0x4b8625,_0x52efee)])){const _0x13f797=String(RegExp['$1'])[_0x3fc34e(0x364)](/[\r\n]+/)[_0x3fc34e(0x6ee)]('');_0x4e4775[_0x3fc34e(0x21a)]=DataManager[_0x3fc34e(0xa22)](_0x13f797);}}if(_0x4a1404['match'](VisuMZ[_0x3fc34e(0x3a4)][_0x3fc34e(0x9da)][_0x3fc34e(0x225)['format'](_0x4b8625,_0x52efee)]))_0x4e4775[_0x3fc34e(0x9b5)]=DataManager[_0x3fc34e(0x7fc)](RegExp['$1']);else{if(_0x4a1404[_0x3fc34e(0x6b8)](VisuMZ['ElementStatusCore'][_0x3fc34e(0x9da)]['SvWeaponMass-%1-%2'[_0x3fc34e(0x7d7)](_0x4b8625,_0x52efee)])){const _0x22f541=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0x3cac13=DataManager[_0x3fc34e(0xa22)](_0x22f541);_0x4e4775['wtypeId']=DataManager[_0x3fc34e(0x7fc)](_0x3cac13);}}if(_0x4a1404[_0x3fc34e(0x6b8)](VisuMZ[_0x3fc34e(0x3a4)][_0x3fc34e(0x9da)][_0x3fc34e(0x6a4)[_0x3fc34e(0x7d7)](_0x4b8625,_0x52efee)]))_0x4e4775[_0x3fc34e(0x34d)]=String(RegExp['$1'])['toLowerCase']()[_0x3fc34e(0x78c)]();else{if(_0x4a1404[_0x3fc34e(0x6b8)](VisuMZ['ElementStatusCore'][_0x3fc34e(0x9da)][_0x3fc34e(0x541)['format'](_0x4b8625,_0x52efee)])){const _0x42132e=String(RegExp['$1'])[_0x3fc34e(0x364)](/[\r\n]+/)[_0x3fc34e(0x6ee)]('');_0x4e4775['motionIdle']=DataManager[_0x3fc34e(0xa22)](_0x42132e);}}}}},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x32d)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy['prototype'][_0x444cf3(0x379)]=function(){const _0x4d8aea=_0x444cf3;return this[_0x4d8aea(0x32d)]();},Game_Enemy[_0x444cf3(0x8f4)]['attackAnimationIdSlot']=function(_0x1fb1a7){const _0x44cc70=_0x444cf3;return this[_0x44cc70(0x32d)]();},Game_Enemy[_0x444cf3(0x8f4)]['canBattlerMove']=function(){const _0x18ce78=_0x444cf3;if(this[_0x18ce78(0x452)]()[_0x18ce78(0x1cd)][_0x18ce78(0x6b8)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x18ce78(0x8f4)][_0x18ce78(0x4cb)][_0x18ce78(0x4a6)](this);},Game_Enemy['prototype'][_0x444cf3(0x415)]=function(){const _0x1c6500=_0x444cf3;if(this['enemy']()[_0x1c6500(0x1cd)][_0x1c6500(0x6b8)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype']['skills']=function(){const _0x3bd21d=_0x444cf3,_0x14a6bf=[];for(const _0x53b0c7 of this[_0x3bd21d(0x452)]()[_0x3bd21d(0x695)]){const _0x27b1cc=$dataSkills[_0x53b0c7[_0x3bd21d(0x677)]];if(_0x27b1cc&&!_0x14a6bf[_0x3bd21d(0xa60)](_0x27b1cc))_0x14a6bf[_0x3bd21d(0x87e)](_0x27b1cc);}return _0x14a6bf;},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x338)]=function(){const _0x32f70a=_0x444cf3;let _0x30d7c1=_0x32f70a(0x338);if(this[_0x32f70a(0x1c2)](_0x30d7c1))return this[_0x32f70a(0x816)][_0x30d7c1];return this['_cache'][_0x30d7c1]=this[_0x32f70a(0x866)](this[_0x32f70a(0x452)]()),this[_0x32f70a(0x816)][_0x30d7c1];},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0xb2d)]=function(){const _0x25eee1=_0x444cf3;let _0xae38bf=_0x25eee1(0xb2d);if(this[_0x25eee1(0x1c2)](_0xae38bf))return this['_cache'][_0xae38bf];return this[_0x25eee1(0x816)][_0xae38bf]=this[_0x25eee1(0x758)](this[_0x25eee1(0x452)]()),this['_cache'][_0xae38bf];},Game_Enemy[_0x444cf3(0x8f4)]['svBattlerData']=function(){const _0x579aee=_0x444cf3;if(this['_svBattlerData']!==undefined)return this[_0x579aee(0x373)];return this[_0x579aee(0xaa1)](),this['_svBattlerData'];},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x572)]=function(){const _0x422522=_0x444cf3;return this['svBattlerData']()[_0x422522(0x21a)]!=='';},Game_Enemy[_0x444cf3(0x8f4)]['svBattlerName']=function(){const _0x49403c=_0x444cf3;return this[_0x49403c(0x27f)]()[_0x49403c(0x21a)];},Game_Enemy[_0x444cf3(0x8f4)]['battlerSmoothImage']=function(){const _0x51c548=_0x444cf3;return this[_0x51c548(0x572)]()?VisuMZ[_0x51c548(0x7cf)][_0x51c548(0x52b)][_0x51c548(0x3d8)][_0x51c548(0x33e)]:VisuMZ['BattleCore'][_0x51c548(0x52b)][_0x51c548(0x52d)][_0x51c548(0x33e)];},Game_Enemy['prototype'][_0x444cf3(0x36a)]=function(_0xb969a4){const _0x548c61=_0x444cf3;Game_Battler['prototype']['performAction']['call'](this,_0xb969a4);if(this[_0x548c61(0x572)]())this[_0x548c61(0x63b)](_0xb969a4);},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x4a8)]=function(){const _0x33a540=_0x444cf3,_0x45c640=this[_0x33a540(0x27f)]()[_0x33a540(0x9b5)]||0x0,_0x32cf9b=$dataSystem[_0x33a540(0x24e)][_0x45c640];if(_0x32cf9b){if(_0x32cf9b[_0x33a540(0x86a)]===0x0)this['requestMotion'](_0x33a540(0x673));else{if(_0x32cf9b[_0x33a540(0x86a)]===0x1)this[_0x33a540(0x9af)](_0x33a540(0xacb));else _0x32cf9b[_0x33a540(0x86a)]===0x2&&this[_0x33a540(0x9af)](_0x33a540(0xae6));}}},Game_Enemy[_0x444cf3(0x8f4)]['performWeaponAnimation']=function(){const _0xa8069=_0x444cf3,_0x5cfe58=this[_0xa8069(0x27f)]()[_0xa8069(0x9b5)]||0x0,_0x3d819f=$dataSystem[_0xa8069(0x24e)][_0x5cfe58];_0x3d819f&&this[_0xa8069(0x8f6)](_0x3d819f[_0xa8069(0x624)]);},Game_Enemy[_0x444cf3(0x8f4)]['getAttackMotion']=function(){const _0xa06e5c=_0x444cf3,_0xe8f97d=this[_0xa06e5c(0x27f)]()[_0xa06e5c(0x9b5)]||0x0;return $dataSystem[_0xa06e5c(0x24e)][_0xe8f97d];},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x393)]=function(_0x27a3fe){const _0x148f32=_0x444cf3;return this[_0x148f32(0xafe)]();},Game_Enemy['prototype'][_0x444cf3(0x23b)]=function(){const _0x52710b=_0x444cf3;Game_Battler['prototype'][_0x52710b(0x23b)][_0x52710b(0x4a6)](this),this[_0x52710b(0x690)]()&&this['hasSvBattler']()&&this[_0x52710b(0x9af)](_0x52710b(0x319)),SoundManager[_0x52710b(0x7bc)]();},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x4db)]=function(){const _0x1d7b02=_0x444cf3;Game_Battler[_0x1d7b02(0x8f4)][_0x1d7b02(0x4db)][_0x1d7b02(0x4a6)](this),this['requestMotion'](_0x1d7b02(0x275));},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x5de)]=function(){const _0x5a3a4e=_0x444cf3;Game_Battler['prototype'][_0x5a3a4e(0x5de)][_0x5a3a4e(0x4a6)](this),this[_0x5a3a4e(0x9af)](_0x5a3a4e(0x275));},Game_Enemy[_0x444cf3(0x8f4)]['performCounter']=function(){const _0x2fdc6d=_0x444cf3;Game_Battler['prototype'][_0x2fdc6d(0xac6)][_0x2fdc6d(0x4a6)](this),this[_0x2fdc6d(0x4a8)]();},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x2e2)]=function(){const _0xe78c29=_0x444cf3;if(this[_0xe78c29(0x572)]()){if(this['collapseType']()>=0x1)return!![];return this['svBattlerData']()[_0xe78c29(0x315)];}else return!![];},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x2d8)]=function(){const _0x5436e3=_0x444cf3;return this[_0x5436e3(0x27f)]()['anchorX'];},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x8fe)]=function(){const _0x865430=_0x444cf3;return this[_0x865430(0x27f)]()[_0x865430(0x8f3)];},Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x790)]=function(){const _0x467ed3=_0x444cf3;return this[_0x467ed3(0x27f)]()[_0x467ed3(0x739)];},VisuMZ[_0x444cf3(0x7cf)]['Game_Enemy_transform']=Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0xb08)],Game_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0xb08)]=function(_0x19882d){const _0x16438a=_0x444cf3;VisuMZ[_0x16438a(0x7cf)][_0x16438a(0xa24)][_0x16438a(0x4a6)](this,_0x19882d),this['clearBattleCoreData'](),this[_0x16438a(0xaa1)]();const _0x4d6671=this['battler']();_0x4d6671&&(_0x4d6671[_0x16438a(0x65b)]=undefined,_0x4d6671[_0x16438a(0x2b4)](this));},Game_Unit['prototype']['processBattleCoreJS']=function(_0x43ea3c){const _0x374421=_0x444cf3;for(const _0x2eadd6 of this[_0x374421(0x73e)]()){if(_0x2eadd6)_0x2eadd6[_0x374421(0x840)](_0x43ea3c);}},Game_Unit[_0x444cf3(0x8f4)]['trueRandomTarget']=function(){const _0x59ec2c=_0x444cf3,_0x22079d=this[_0x59ec2c(0xaf5)]();return _0x22079d[Math['randomInt'](_0x22079d[_0x59ec2c(0xa40)])];},VisuMZ[_0x444cf3(0x7cf)]['Game_Party_addActor']=Game_Party[_0x444cf3(0x8f4)][_0x444cf3(0x84e)],Game_Party['prototype'][_0x444cf3(0x84e)]=function(_0x4f4376){const _0x57f4d1=_0x444cf3;VisuMZ[_0x57f4d1(0x7cf)][_0x57f4d1(0x7cb)][_0x57f4d1(0x4a6)](this,_0x4f4376),BattleManager['refreshStatusWindow']();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x279)]=Game_Party[_0x444cf3(0x8f4)][_0x444cf3(0x2aa)],Game_Party[_0x444cf3(0x8f4)][_0x444cf3(0x2aa)]=function(_0x4b84e0){const _0x5b12fd=_0x444cf3;VisuMZ[_0x5b12fd(0x7cf)][_0x5b12fd(0x279)][_0x5b12fd(0x4a6)](this,_0x4b84e0),BattleManager[_0x5b12fd(0x2bc)]();},VisuMZ[_0x444cf3(0x7cf)]['Game_Troop_setup']=Game_Troop[_0x444cf3(0x8f4)][_0x444cf3(0x5fb)],Game_Troop[_0x444cf3(0x8f4)][_0x444cf3(0x5fb)]=function(_0x503c8c){const _0x2cce42=_0x444cf3;$gameTemp[_0x2cce42(0x82a)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x503c8c),VisuMZ[_0x2cce42(0x7cf)][_0x2cce42(0x58f)][_0x2cce42(0x4a6)](this,_0x503c8c),this[_0x2cce42(0x696)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x448)]=Game_Troop['prototype']['expTotal'],Game_Troop[_0x444cf3(0x8f4)][_0x444cf3(0x4f5)]=function(){const _0x31b0ea=_0x444cf3;let _0x53cdd1=VisuMZ[_0x31b0ea(0x7cf)][_0x31b0ea(0x448)][_0x31b0ea(0x4a6)](this);return this[_0x31b0ea(0x6ef)]&&(_0x53cdd1*=this[_0x31b0ea(0x6ef)]()),Math['ceil'](_0x53cdd1);},Game_Troop[_0x444cf3(0x8f4)]['expRate']=function(){return 0x1;},Game_Troop[_0x444cf3(0x8f4)]['extendTroopMembers']=function(){const _0x427334=_0x444cf3,_0x5e8510=DataManager['createTroopNote'](this[_0x427334(0xb28)]()['id']);if(_0x5e8510['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x3e1637=RegExp['$1'][_0x427334(0x364)](',')[_0x427334(0x7f8)](_0x47c9c5=>Number(_0x47c9c5));this['checkExtendTroopCompatibility'](),this[_0x427334(0x41e)](_0x3e1637);}},Game_Troop[_0x444cf3(0x8f4)][_0x444cf3(0x6b6)]=function(){const _0x2beeb5=_0x444cf3;let _0x751ef4=_0x2beeb5(0x4b4)+'\x0a';_0x751ef4+=_0x2beeb5(0x4e2),Imported['VisuMZ_2_BattleSystemBTB']&&(VisuMZ[_0x2beeb5(0x5d9)]['version']<1.11&&(alert(_0x751ef4[_0x2beeb5(0x7d7)](_0x2beeb5(0x90f))),SceneManager[_0x2beeb5(0x431)]())),Imported[_0x2beeb5(0x1f6)]&&(VisuMZ['BattleSystemCTB'][_0x2beeb5(0x95c)]<1.19&&(alert(_0x751ef4['format'](_0x2beeb5(0x24c))),SceneManager[_0x2beeb5(0x431)]())),Imported[_0x2beeb5(0x2be)]&&(VisuMZ[_0x2beeb5(0x2a7)][_0x2beeb5(0x95c)]<1.15&&(alert(_0x751ef4[_0x2beeb5(0x7d7)](_0x2beeb5(0x93f))),SceneManager['exit']()));},Game_Troop[_0x444cf3(0x8f4)][_0x444cf3(0x41e)]=function(_0x34d8b9){const _0x39f93f=_0x444cf3;this['_namesCount']={};for(const _0x23d74f of this[_0x39f93f(0x73e)]()){if(!_0x23d74f)continue;_0x23d74f['setLetter']('');}for(const _0x381611 of _0x34d8b9){const _0x1581a0=$dataTroops[_0x381611];if(_0x1581a0)this[_0x39f93f(0xa7c)](_0x1581a0);}this['makeUniqueNames']();},Game_Troop[_0x444cf3(0x8f4)][_0x444cf3(0xa7c)]=function(_0x12a89f){const _0x1b3951=_0x444cf3;for(const _0x1a1c2e of _0x12a89f[_0x1b3951(0x73e)]){if($dataEnemies[_0x1a1c2e['enemyId']]){const _0x1caaf2=_0x1a1c2e[_0x1b3951(0x73a)],_0x34e88a=_0x1a1c2e['x'],_0x5ee0cc=_0x1a1c2e['y'],_0x4348dc=new Game_Enemy(_0x1caaf2,_0x34e88a,_0x5ee0cc);_0x1a1c2e[_0x1b3951(0xab6)]&&_0x4348dc[_0x1b3951(0x479)](),this['_enemies'][_0x1b3951(0x87e)](_0x4348dc);}}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x211)]=Game_Map['prototype'][_0x444cf3(0x2e5)],Game_Map['prototype'][_0x444cf3(0x2e5)]=function(){const _0x5f4ca5=_0x444cf3;VisuMZ[_0x5f4ca5(0x7cf)][_0x5f4ca5(0x211)][_0x5f4ca5(0x4a6)](this),this[_0x5f4ca5(0x632)]();},Game_Map[_0x444cf3(0x8f4)][_0x444cf3(0x632)]=function(){const _0x1d5cab=_0x444cf3;this[_0x1d5cab(0xb19)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x369594=$dataMap['note'];if(!_0x369594)return;const _0xff8716=_0x369594[_0x1d5cab(0x6b8)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0xff8716)for(const _0x48e52e of _0xff8716){_0x48e52e['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0xdbe4f=Number(RegExp['$1']),_0x4910e7=Number(RegExp['$2']),_0x2974d9=_0x4910e7===0x1?this[_0x1d5cab(0xb19)]:this[_0x1d5cab(0x7e3)],_0x5c7190=String(RegExp['$3']);_0x2974d9[_0xdbe4f]=_0x5c7190;}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x271)]=Game_Map[_0x444cf3(0x8f4)][_0x444cf3(0x1cf)],Game_Map[_0x444cf3(0x8f4)][_0x444cf3(0x1cf)]=function(){const _0x3267b9=_0x444cf3;if(!BattleManager[_0x3267b9(0x5ca)]()){const _0x197a1e=$gamePlayer[_0x3267b9(0x59b)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3267b9(0xb19)]&&this[_0x3267b9(0xb19)][_0x197a1e])return this[_0x3267b9(0xb19)][_0x197a1e];}return VisuMZ[_0x3267b9(0x7cf)][_0x3267b9(0x271)][_0x3267b9(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x5eb)]=Game_Map[_0x444cf3(0x8f4)][_0x444cf3(0x6bb)],Game_Map[_0x444cf3(0x8f4)][_0x444cf3(0x6bb)]=function(){const _0x39372c=_0x444cf3;if(!BattleManager[_0x39372c(0x5ca)]()){const _0x199e58=$gamePlayer[_0x39372c(0x59b)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x39372c(0xb19)]&&this['_regionBattleback2'][_0x199e58])return this[_0x39372c(0x7e3)][_0x199e58];}return VisuMZ[_0x39372c(0x7cf)][_0x39372c(0x5eb)][_0x39372c(0x4a6)](this);},VisuMZ['BattleCore'][_0x444cf3(0x679)]=Game_Map['prototype']['encounterList'],Game_Map[_0x444cf3(0x8f4)][_0x444cf3(0x203)]=function(){const _0x25ca74=_0x444cf3;let _0x77d401=JsonEx[_0x25ca74(0x5d7)](VisuMZ[_0x25ca74(0x7cf)][_0x25ca74(0x679)][_0x25ca74(0x4a6)](this));return VisuMZ[_0x25ca74(0x7cf)][_0x25ca74(0x6e7)](_0x77d401);},VisuMZ[_0x444cf3(0x7cf)]['ShuffleArray']=function(_0x5a6402){const _0x465e05=_0x444cf3;var _0x116561,_0x59ef11,_0x4dc394;for(_0x4dc394=_0x5a6402['length']-0x1;_0x4dc394>0x0;_0x4dc394--){_0x116561=Math[_0x465e05(0x93e)](Math['random']()*(_0x4dc394+0x1)),_0x59ef11=_0x5a6402[_0x4dc394],_0x5a6402[_0x4dc394]=_0x5a6402[_0x116561],_0x5a6402[_0x116561]=_0x59ef11;}return _0x5a6402;},VisuMZ['BattleCore'][_0x444cf3(0x4aa)]=Game_Interpreter[_0x444cf3(0x8f4)][_0x444cf3(0x860)],Game_Interpreter[_0x444cf3(0x8f4)][_0x444cf3(0x860)]=function(_0x54715e){const _0x5c3d47=_0x444cf3;return $gameTemp[_0x5c3d47(0x87c)](this),VisuMZ[_0x5c3d47(0x7cf)]['Game_Interpreter_PluginCommand'][_0x5c3d47(0x4a6)](this,_0x54715e);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x23c)]=Game_Interpreter[_0x444cf3(0x8f4)]['updateWaitMode'],Game_Interpreter[_0x444cf3(0x8f4)]['updateWaitMode']=function(){const _0xf585b7=_0x444cf3;if(SceneManager['isSceneBattle']())switch(this[_0xf585b7(0x5f6)]){case _0xf585b7(0xb02):if(Imported[_0xf585b7(0xa74)]){if($gameScreen[_0xf585b7(0xaee)]()[_0xf585b7(0x26a)]>0x0)return!![];this[_0xf585b7(0x5f6)]='';}break;case _0xf585b7(0x4d1):if(BattleManager[_0xf585b7(0x9f5)][_0xf585b7(0x7ab)]())return!![];this[_0xf585b7(0x5f6)]='';break;case'battleCamera':if(Imported[_0xf585b7(0xa74)]){if($gameScreen[_0xf585b7(0xaee)]()[_0xf585b7(0xb1b)]>0x0)return!![];if($gameScreen[_0xf585b7(0xaee)]()[_0xf585b7(0x897)]>0x0)return!![];this[_0xf585b7(0x5f6)]='';}break;case _0xf585b7(0x9fa):if(BattleManager[_0xf585b7(0x9f5)][_0xf585b7(0x5b1)]())return!![];this['_waitMode']='';break;case _0xf585b7(0x863):if(BattleManager[_0xf585b7(0x9f5)][_0xf585b7(0xa6c)]())return!![];this[_0xf585b7(0x5f6)]='';break;case'battleJump':if(BattleManager['_spriteset'][_0xf585b7(0x5b9)]())return!![];this[_0xf585b7(0x5f6)]='';break;case'battlelog':if(BattleManager[_0xf585b7(0x1e6)]['isBusy']())return!![];this[_0xf585b7(0x5f6)]='';break;case _0xf585b7(0x6d0):if(BattleManager[_0xf585b7(0x9f5)][_0xf585b7(0x435)]())return!![];this[_0xf585b7(0x5f6)]='';break;case _0xf585b7(0x302):if(BattleManager[_0xf585b7(0x9f5)][_0xf585b7(0x6ea)]())return!![];this[_0xf585b7(0x5f6)]='';break;case _0xf585b7(0x2c4):if(BattleManager[_0xf585b7(0x9f5)][_0xf585b7(0x7b2)]())return!![];this[_0xf585b7(0x5f6)]='';break;case _0xf585b7(0x29e):if(BattleManager['_spriteset'][_0xf585b7(0x63f)]())return!![];this[_0xf585b7(0x5f6)]='';break;case'battleProjectiles':if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager[_0xf585b7(0x9f5)][_0xf585b7(0x1ea)]())return!![];this[_0xf585b7(0x5f6)]='';}break;case'battleSkew':if(Imported[_0xf585b7(0xa74)]){if($gameScreen['battleCameraData']()['skewDuration']>0x0)return!![];this[_0xf585b7(0x5f6)]='';}break;case _0xf585b7(0x3ee):if(BattleManager['_spriteset'][_0xf585b7(0x6f2)]())return!![];this[_0xf585b7(0x5f6)]='';break;case _0xf585b7(0x75d):if(Imported[_0xf585b7(0xa74)]){if($gameScreen[_0xf585b7(0xaee)]()['zoomDuration']>0x0)return!![];this[_0xf585b7(0x5f6)]='';}break;case _0xf585b7(0xa38):if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager[_0xf585b7(0x9f5)][_0xf585b7(0xa01)]){if(BattleManager['_spriteset'][_0xf585b7(0xa01)]())return!![];this[_0xf585b7(0x5f6)]='battleInjectAni';}else this[_0xf585b7(0x5f6)]='';break;}break;case'battleInjectAni':if(Imported[_0xf585b7(0x5df)]){if(BattleManager[_0xf585b7(0x9f5)][_0xf585b7(0xaf2)]())return!![];this[_0xf585b7(0x5f6)]='';}break;}return VisuMZ[_0xf585b7(0x7cf)][_0xf585b7(0x23c)][_0xf585b7(0x4a6)](this);},VisuMZ['BattleCore'][_0x444cf3(0x862)]=Game_Interpreter[_0x444cf3(0x8f4)]['command301'],Game_Interpreter['prototype'][_0x444cf3(0xae2)]=function(_0x3645e){const _0x2d95a9=_0x444cf3;return!$gameParty[_0x2d95a9(0x666)]()?this[_0x2d95a9(0x450)](_0x3645e):VisuMZ['BattleCore'][_0x2d95a9(0x862)]['call'](this,_0x3645e);},Game_Interpreter['prototype'][_0x444cf3(0x284)]=function(_0x5a26d1){const _0x3a6878=_0x444cf3;return VisuMZ[_0x3a6878(0x7cf)][_0x3a6878(0x862)][_0x3a6878(0x4a6)](this,_0x5a26d1),BattleManager[_0x3a6878(0x83d)](_0x5f0714=>{const _0x2a9023=_0x3a6878;this[_0x2a9023(0x94c)][this[_0x2a9023(0x948)]]=_0x5f0714;}),!![];},VisuMZ[_0x444cf3(0x7cf)]['CheckMapBattleEventValid']=function(_0x445d20){const _0x59d13d=_0x444cf3,_0x4d7298=$dataCommonEvents[_0x445d20];if(!_0x4d7298)return![];if(_0x4d7298['list'][_0x59d13d(0xa40)]<=0x1)return![];return!![];},Game_Interpreter[_0x444cf3(0x8f4)]['command301_PreBattleEvent']=function(_0x87afe1){const _0x5ec17b=_0x444cf3,_0x5416ed=VisuMZ['BattleCore'][_0x5ec17b(0x52b)][_0x5ec17b(0x982)],_0x41c222=_0x5416ed[_0x5ec17b(0x5e6)],_0x3fee66=$dataCommonEvents[_0x41c222];if(_0x3fee66&&VisuMZ['BattleCore'][_0x5ec17b(0xad0)](_0x41c222)){const _0xecf3e4=this[_0x5ec17b(0x940)]()?this['_eventId']:0x0,_0x46156f=_0x3fee66[_0x5ec17b(0x628)];this[_0x5ec17b(0x3a6)](_0x46156f,_0xecf3e4),this['_list']=JsonEx[_0x5ec17b(0x5d7)](this[_0x5ec17b(0x849)]);const _0xf6e925={'code':0xbc3,'indent':this[_0x5ec17b(0x948)],'parameters':JsonEx[_0x5ec17b(0x5d7)](_0x87afe1)};return this[_0x5ec17b(0x849)][_0x5ec17b(0x903)](this['_index']+0x1,0x0,_0xf6e925),!![];}else return VisuMZ[_0x5ec17b(0x7cf)][_0x5ec17b(0x862)][_0x5ec17b(0x4a6)](this,_0x87afe1);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x458)]=BattleManager[_0x444cf3(0x918)],BattleManager[_0x444cf3(0x918)]=function(){const _0x357dd0=_0x444cf3;VisuMZ[_0x357dd0(0x7cf)][_0x357dd0(0x458)]['call'](this),this[_0x357dd0(0x5cb)]();},BattleManager[_0x444cf3(0x5cb)]=function(){const _0x43ee2a=_0x444cf3,_0xa10ce=VisuMZ[_0x43ee2a(0x7cf)]['Settings'][_0x43ee2a(0x982)],_0x4e1acf=_0xa10ce[_0x43ee2a(0x5e6)];_0x4e1acf&&VisuMZ[_0x43ee2a(0x7cf)][_0x43ee2a(0xad0)](_0x4e1acf)&&(this[_0x43ee2a(0x293)]=!![],$gameTemp[_0x43ee2a(0xaab)](_0xa10ce['BattleStartEvent']),$gameMap['updateInterpreter'](),$gameMap['_interpreter']['_preBattleCommonEvent']=!![]),_0xa10ce[_0x43ee2a(0x9f1)]>0x0&&(this[_0x43ee2a(0xa9d)]=!![]);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x563)]=Scene_Map[_0x444cf3(0x8f4)][_0x444cf3(0x370)],Scene_Map[_0x444cf3(0x8f4)][_0x444cf3(0x370)]=function(){const _0x391a69=_0x444cf3;if(BattleManager[_0x391a69(0x293)])return;VisuMZ[_0x391a69(0x7cf)][_0x391a69(0x563)]['call'](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x25e)]=Scene_Map[_0x444cf3(0x8f4)][_0x444cf3(0x517)],Scene_Map['prototype'][_0x444cf3(0x517)]=function(){const _0x361180=_0x444cf3;BattleManager[_0x361180(0x293)]?this[_0x361180(0x8af)]():VisuMZ[_0x361180(0x7cf)][_0x361180(0x25e)][_0x361180(0x4a6)](this);},Scene_Map['prototype']['battleCorePreBattleCommonEvent']=function(){const _0x579163=_0x444cf3;this[_0x579163(0xa2f)]=!![];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x204)]=SceneManager[_0x444cf3(0x86d)],SceneManager[_0x444cf3(0x86d)]=function(){const _0x221114=_0x444cf3;if(BattleManager[_0x221114(0x293)])return![];return VisuMZ[_0x221114(0x7cf)][_0x221114(0x204)][_0x221114(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)]['Game_Interpreter_terminate']=Game_Interpreter[_0x444cf3(0x8f4)][_0x444cf3(0x401)],Game_Interpreter['prototype'][_0x444cf3(0x401)]=function(){const _0x1e3754=_0x444cf3;VisuMZ['BattleCore']['Game_Interpreter_terminate'][_0x1e3754(0x4a6)](this),this[_0x1e3754(0x5a8)]&&(this[_0x1e3754(0x5a8)]=undefined,SceneManager['_scene'][_0x1e3754(0x5f4)]());},Scene_Map['prototype'][_0x444cf3(0x5f4)]=function(){const _0x2da352=_0x444cf3;BattleManager[_0x2da352(0x293)]=undefined,BattleManager[_0x2da352(0x589)]=!![],this[_0x2da352(0x388)]();},VisuMZ[_0x444cf3(0x7cf)]['Scene_Map_initializeAfter']=Scene_Map[_0x444cf3(0x8f4)][_0x444cf3(0x207)],Scene_Map[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(){const _0x4a4858=_0x444cf3;VisuMZ[_0x4a4858(0x7cf)][_0x4a4858(0x58c)][_0x4a4858(0x4a6)](this),BattleManager[_0x4a4858(0x589)]&&(this[_0x4a4858(0xa2f)]=!![],BattleManager[_0x4a4858(0x589)]=undefined);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x618)]=Scene_Map[_0x444cf3(0x8f4)][_0x444cf3(0x207)],Scene_Map[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(){const _0x3856a5=_0x444cf3;VisuMZ['BattleCore']['Scene_Map_initialize'][_0x3856a5(0x4a6)](this),$gameTemp[_0x3856a5(0x82a)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x438)]=Scene_ItemBase[_0x444cf3(0x8f4)][_0x444cf3(0x9a0)],Scene_ItemBase[_0x444cf3(0x8f4)][_0x444cf3(0x9a0)]=function(){const _0x244521=_0x444cf3;VisuMZ[_0x244521(0x7cf)][_0x244521(0x438)][_0x244521(0x4a6)](this);if(this[_0x244521(0x39a)]()['note'][_0x244521(0x6b8)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x244521(0x59d)]=[]),DataManager[_0x244521(0x54a)](this[_0x244521(0x39a)]())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ[_0x444cf3(0x7cf)]['Scene_Options_maxCommands']=Scene_Options[_0x444cf3(0x8f4)]['maxCommands'],Scene_Options[_0x444cf3(0x8f4)][_0x444cf3(0xa9a)]=function(){const _0x4dd92d=_0x444cf3;let _0x223e48=VisuMZ[_0x4dd92d(0x7cf)][_0x4dd92d(0xa62)][_0x4dd92d(0x4a6)](this);const _0x4cc46c=VisuMZ[_0x4dd92d(0x7cf)]['Settings'];if(_0x4cc46c[_0x4dd92d(0x579)][_0x4dd92d(0x3d7)]&&_0x4cc46c[_0x4dd92d(0x579)][_0x4dd92d(0x272)])_0x223e48+=0x2;if(_0x4cc46c[_0x4dd92d(0x93a)][_0x4dd92d(0x3d7)]&&_0x4cc46c[_0x4dd92d(0x93a)][_0x4dd92d(0x272)])_0x223e48+=0x1;return _0x223e48;},VisuMZ['BattleCore'][_0x444cf3(0x587)]=Scene_Battle[_0x444cf3(0x8f4)]['initialize'],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(){const _0x304b27=_0x444cf3;VisuMZ[_0x304b27(0x7cf)]['Scene_Battle_initialize'][_0x304b27(0x4a6)](this),this[_0x304b27(0x583)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x8ab)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x57c)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x57c)]=function(){const _0x1f8982=_0x444cf3;SceneManager[_0x1f8982(0x4c1)]()?(Scene_Message[_0x1f8982(0x8f4)][_0x1f8982(0x57c)][_0x1f8982(0x4a6)](this),this[_0x1f8982(0x9f5)]&&this['_spriteset'][_0x1f8982(0x7b9)](),BattleManager[_0x1f8982(0x77d)]&&BattleManager['revertTpbCachedActor']()):(VisuMZ[_0x1f8982(0x7cf)]['Scene_Battle_start'][_0x1f8982(0x4a6)](this),$gameTroop[_0x1f8982(0x4ec)]());},VisuMZ['BattleCore']['Scene_Battle_stop']=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x388)],Scene_Battle[_0x444cf3(0x8f4)]['stop']=function(){const _0x205149=_0x444cf3;SceneManager[_0x205149(0x1da)]()?Scene_Message[_0x205149(0x8f4)]['stop'][_0x205149(0x4a6)](this):VisuMZ['BattleCore'][_0x205149(0x3ad)][_0x205149(0x4a6)](this);},VisuMZ['BattleCore']['Scene_Battle_terminate']=Scene_Battle[_0x444cf3(0x8f4)]['terminate'],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x401)]=function(){const _0x568e45=_0x444cf3;SceneManager[_0x568e45(0x1da)]()?Scene_Message[_0x568e45(0x8f4)][_0x568e45(0x401)][_0x568e45(0x4a6)](this):VisuMZ[_0x568e45(0x7cf)]['Scene_Battle_terminate'][_0x568e45(0x4a6)](this),this[_0x568e45(0x583)]();},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x772)]=function(){const _0x4ac97a=_0x444cf3;if(ConfigManager[_0x4ac97a(0x351)]&&ConfigManager[_0x4ac97a(0x3b9)]!==undefined)return ConfigManager[_0x4ac97a(0x3b9)];else{if(this[_0x4ac97a(0x650)]()===_0x4ac97a(0x8e3))return![];else{return Scene_Message['prototype'][_0x4ac97a(0x772)][_0x4ac97a(0x4a6)](this);;}}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xa18)]=Scene_Battle['prototype']['createAllWindows'],Scene_Battle[_0x444cf3(0x8f4)]['createAllWindows']=function(){const _0x3e6ffd=_0x444cf3;this[_0x3e6ffd(0x443)](),VisuMZ[_0x3e6ffd(0x7cf)][_0x3e6ffd(0xa18)]['call'](this),this[_0x3e6ffd(0x602)]();},VisuMZ['BattleCore'][_0x444cf3(0x85f)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x8e6)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x8e6)]=function(){const _0x47d8e3=_0x444cf3;VisuMZ['BattleCore'][_0x47d8e3(0x85f)][_0x47d8e3(0x4a6)](this),this[_0x47d8e3(0x1fb)]();},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x1fb)]=function(){const _0x5aabb1=_0x444cf3;this['createMultiTargetWindow'](!![]),this[_0x5aabb1(0x4a2)](![]);},Scene_Battle['prototype'][_0x444cf3(0x854)]=function(_0x384608){const _0x2a6f5a=_0x444cf3,_0x16e57b=Window_BattleMultiTarget['WIDTH'],_0xd2fc1c=this[_0x2a6f5a(0x944)](0x1,!![]);let _0x89a308=_0x384608?Graphics[_0x2a6f5a(0x902)]-_0x16e57b:0x0;_0x89a308+=_0x384608?Window_BattleMultiTarget[_0x2a6f5a(0x653)]:Window_BattleMultiTarget[_0x2a6f5a(0xa79)];const _0x3d9214=[_0x2a6f5a(0x791)][_0x2a6f5a(0xa60)](this['battleLayoutStyle']())?0x0:this[_0x2a6f5a(0x842)]['height'];let _0x2d30ad=Graphics[_0x2a6f5a(0x358)]-_0x3d9214-_0xd2fc1c;return _0x2d30ad+=_0x384608?Window_BattleMultiTarget[_0x2a6f5a(0x320)]:Window_BattleMultiTarget[_0x2a6f5a(0x868)],new Rectangle(_0x89a308,_0x2d30ad,_0x16e57b,_0xd2fc1c);},Scene_Battle['prototype'][_0x444cf3(0x4a2)]=function(_0x1a9384){const _0x56f392=_0x444cf3,_0x1188f5=this['multiTargetWindowRect'](_0x1a9384),_0x9e151e=new Window_BattleMultiTarget(_0x1188f5,_0x1a9384);this[_0x56f392(0x69f)](_0x9e151e),_0x1a9384?this[_0x56f392(0x8f8)]=_0x9e151e:this[_0x56f392(0x631)]=_0x9e151e;},VisuMZ[_0x444cf3(0x7cf)]['Scene_Battle_createCancelButton']=Scene_Battle[_0x444cf3(0x8f4)]['createCancelButton'],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x6c1)]=function(){const _0x36961b=_0x444cf3;VisuMZ[_0x36961b(0x7cf)][_0x36961b(0x953)][_0x36961b(0x4a6)](this),this[_0x36961b(0x650)]()==='border'&&this[_0x36961b(0x6ed)]();},Scene_Battle['prototype']['setVisibleUI']=function(_0x3684b6){const _0x4a92b8=_0x444cf3;_0x3684b6?(this[_0x4a92b8(0x495)]['x']=(Graphics[_0x4a92b8(0x851)]-Graphics[_0x4a92b8(0x902)])/0x2,this[_0x4a92b8(0x495)]['y']=(Graphics[_0x4a92b8(0x661)]-Graphics[_0x4a92b8(0x358)])/0x2):(this['_windowLayer']['x']=Graphics['width']*0xa,this[_0x4a92b8(0x495)]['y']=Graphics['height']*0xa);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x4ba)]=Scene_Battle['prototype'][_0x444cf3(0x83c)],Scene_Battle[_0x444cf3(0x8f4)]['selectNextCommand']=function(){const _0x421cf6=_0x444cf3,_0x4c4518=BattleManager[_0x421cf6(0x37a)]();VisuMZ['BattleCore']['Scene_Battle_selectNextCommand'][_0x421cf6(0x4a6)](this);if(_0x4c4518){if(_0x4c4518===BattleManager[_0x421cf6(0x37a)]())return;if(_0x4c4518===BattleManager[_0x421cf6(0x55d)])return;if(_0x4c4518[_0x421cf6(0x516)]())_0x4c4518['battler']()['stepBack']();}},VisuMZ[_0x444cf3(0x7cf)]['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x5fc)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x5fc)]=function(){const _0xed5a19=_0x444cf3,_0x5d8bb7=BattleManager[_0xed5a19(0x37a)]();if(_0x5d8bb7&&_0x5d8bb7['battler'])_0x5d8bb7[_0xed5a19(0x516)]()[_0xed5a19(0x9bd)]();VisuMZ[_0xed5a19(0x7cf)][_0xed5a19(0x85b)][_0xed5a19(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x51a)]=Scene_Battle[_0x444cf3(0x8f4)]['logWindowRect'],Scene_Battle[_0x444cf3(0x8f4)]['logWindowRect']=function(){const _0x38de29=_0x444cf3;if(VisuMZ['BattleCore']['Settings'][_0x38de29(0xad1)][_0x38de29(0x67a)])return VisuMZ['BattleCore']['Settings']['BattleLog'][_0x38de29(0x67a)]['call'](this);return VisuMZ[_0x38de29(0x7cf)][_0x38de29(0x51a)][_0x38de29(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x574)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x828)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x828)]=function(){const _0xcf74cb=_0x444cf3;VisuMZ['BattleCore'][_0xcf74cb(0x574)]['call'](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle['prototype'][_0x444cf3(0x7cc)]=function(){const _0x1423ff=_0x444cf3,_0x4c1265=this[_0x1423ff(0xa99)];_0x4c1265['setHandler'](_0x1423ff(0x487),this[_0x1423ff(0x63c)][_0x1423ff(0x2fa)](this)),_0x4c1265['setHandler'](_0x1423ff(0x34c),this[_0x1423ff(0xabc)][_0x1423ff(0x2fa)](this));const _0x3d743a=this[_0x1423ff(0x650)]();switch(_0x3d743a){case'xp':case _0x1423ff(0x974):return this[_0x1423ff(0xa99)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x63c)]=function(){const _0x381d19=_0x444cf3;BattleManager[_0x381d19(0x6b7)]=!![],$gameParty[_0x381d19(0x60b)](),this[_0x381d19(0x83c)](),BattleManager[_0x381d19(0x98f)]()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0xabc)]=function(){const _0x16f968=_0x444cf3;this[_0x16f968(0x3f8)]()?(this[_0x16f968(0xa95)]=!![],this[_0x16f968(0x1e6)][_0x16f968(0x87e)](_0x16f968(0x548),VisuMZ[_0x16f968(0x7cf)][_0x16f968(0x52b)]['PartyCmd'][_0x16f968(0x8f7)])):this[_0x16f968(0x9d2)]();},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x3f8)]=function(){const _0x2a9f37=_0x444cf3;return BattleManager[_0x2a9f37(0x90b)]();},Scene_Battle['prototype']['callOptions']=function(){const _0x596a8d=_0x444cf3;this[_0x596a8d(0xa95)]=![],this[_0x596a8d(0x9f5)][_0x596a8d(0x7b9)](),this[_0x596a8d(0x495)][_0x596a8d(0x30c)]=![];if(BattleManager[_0x596a8d(0x5ca)]())($dataSystem[_0x596a8d(0x1cf)]||$dataSystem[_0x596a8d(0x6bb)])&&SceneManager[_0x596a8d(0x2f4)]();else($gameMap[_0x596a8d(0x1cf)]()||$gameMap[_0x596a8d(0x6bb)]())&&SceneManager[_0x596a8d(0x2f4)]();SceneManager[_0x596a8d(0x87e)](Scene_Options),BattleManager[_0x596a8d(0x98f)]()&&(BattleManager[_0x596a8d(0x77d)]=BattleManager[_0x596a8d(0x37a)]());},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x5b2)]=Scene_Battle['prototype']['updateBattleProcess'],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x35f)]=function(){const _0x2134f5=_0x444cf3;VisuMZ['BattleCore'][_0x2134f5(0x5b2)][_0x2134f5(0x4a6)](this);if(this['_callSceneOptions']&&!BattleManager[_0x2134f5(0x55d)])this[_0x2134f5(0x9d2)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x6ae)]=Scene_Battle['prototype']['update'],Scene_Battle[_0x444cf3(0x8f4)]['update']=function(){const _0x5a3ae1=_0x444cf3;VisuMZ['BattleCore'][_0x5a3ae1(0x6ae)][_0x5a3ae1(0x4a6)](this),this[_0x5a3ae1(0x21e)]();},Scene_Battle[_0x444cf3(0x8f4)]['createAutoBattleWindow']=function(){const _0x237410=_0x444cf3,_0x4f394f=this[_0x237410(0x5e1)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x4f394f),this[_0x237410(0x519)][_0x237410(0x479)](),this[_0x237410(0x353)](this[_0x237410(0x519)]);},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x5e1)]=function(){const _0x1a1454=_0x444cf3;return VisuMZ[_0x1a1454(0x7cf)][_0x1a1454(0x52b)][_0x1a1454(0x579)]['AutoBattleRect'][_0x1a1454(0x4a6)](this);},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x583)]=function(){const _0x226112=_0x444cf3;this[_0x226112(0x523)]=[];},Scene_Battle['prototype'][_0x444cf3(0x21e)]=function(){const _0x108894=_0x444cf3;if(!this[_0x108894(0x523)])return;for(const _0x5f4bfb of this[_0x108894(0x523)]){_0x5f4bfb&&_0x5f4bfb['update']();}},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x7a0)]=function(_0x19921f){const _0x2a0744=_0x444cf3,_0x4db92a=$dataCommonEvents[_0x19921f];if(!_0x4db92a)return;const _0x566e5a=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x566e5a),_0x566e5a[_0x2a0744(0x6c7)](_0x19921f);},Scene_Battle[_0x444cf3(0x8f4)]['addOnceParallelInterpreter']=function(_0x5ee2e5){const _0xcdb84b=_0x444cf3;this[_0xcdb84b(0x523)]=this['_onceParallelInterpreters']||[],this['_onceParallelInterpreters'][_0xcdb84b(0x87e)](_0x5ee2e5);},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x984)]=function(_0x575310){const _0x26a759=_0x444cf3;this['_onceParallelInterpreters']=this[_0x26a759(0x523)]||[],this['_onceParallelInterpreters'][_0x26a759(0x6ee)](_0x575310);},Game_Troop['prototype']['onBattleStartOnceParallels']=function(){const _0x2fca4e=_0x444cf3;for(const _0x16bb97 of this[_0x2fca4e(0xb28)]()[_0x2fca4e(0x84d)]){if(!this['doesPageHaveOnceParallelStart'](_0x16bb97))continue;SceneManager[_0x2fca4e(0xa67)]['playOnceParallelTroopPage'](_0x16bb97);}},Game_Troop['prototype'][_0x444cf3(0x848)]=function(_0x25142a){const _0xe8a254=_0x444cf3;if(!_0x25142a)return;for(const _0x5d241b of _0x25142a[_0xe8a254(0x628)]){if([0x6c,0x198][_0xe8a254(0xa60)](_0x5d241b[_0xe8a254(0x5a0)])){const _0x59bbce=_0x5d241b[_0xe8a254(0x3fe)][0x0];if(_0x59bbce['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x444cf3(0x8f4)]['playOnceParallelTroopPage']=function(_0x198db1){const _0x5192c0=_0x444cf3;if(!_0x198db1)return;const _0x4735d5=new Game_BattleOnceParallelInterpreter();this[_0x5192c0(0x515)](_0x4735d5),_0x4735d5[_0x5192c0(0x1f1)](_0x198db1);};function Game_BattleOnceParallelInterpreter(){const _0x2c5daf=_0x444cf3;this[_0x2c5daf(0x207)](...arguments);}Game_BattleOnceParallelInterpreter[_0x444cf3(0x8f4)]=Object[_0x444cf3(0x1c5)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter[_0x444cf3(0x8f4)][_0x444cf3(0x427)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x444cf3(0x8f4)]['setCommonEvent']=function(_0x569eef){const _0x344cfa=_0x444cf3,_0x48d523=$dataCommonEvents[_0x569eef];_0x48d523?this[_0x344cfa(0x5fb)](_0x48d523[_0x344cfa(0x628)],0x0):this[_0x344cfa(0x401)]();},Game_BattleOnceParallelInterpreter[_0x444cf3(0x8f4)][_0x444cf3(0x401)]=function(){const _0x466632=_0x444cf3;if(!SceneManager[_0x466632(0xa7a)]())return;SceneManager[_0x466632(0xa67)][_0x466632(0x984)](this),Game_Interpreter[_0x466632(0x8f4)][_0x466632(0x401)]['call'](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x444cf3(0x1f1)]=function(_0x528db0){const _0x172630=_0x444cf3;_0x528db0?this['setup'](_0x528db0[_0x172630(0x628)],0x0):this[_0x172630(0x401)]();},Scene_Battle['prototype']['isPartyCommandWindowDisabled']=function(){const _0x46c83e=_0x444cf3;return VisuMZ[_0x46c83e(0x7cf)][_0x46c83e(0x52b)][_0x46c83e(0x1c7)][_0x46c83e(0x6da)];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x1fa)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0xa75)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0xa75)]=function(){const _0x4af720=_0x444cf3;this['isPartyCommandWindowDisabled']()?this[_0x4af720(0x7a7)]():VisuMZ['BattleCore'][_0x4af720(0x1fa)][_0x4af720(0x4a6)](this);},Scene_Battle['prototype'][_0x444cf3(0x7a7)]=function(){const _0x3b627d=_0x444cf3;if(BattleManager['isDTB']())this[_0x3b627d(0x83c)]();else BattleManager[_0x3b627d(0x98f)]()&&VisuMZ[_0x3b627d(0x7cf)][_0x3b627d(0x1fa)][_0x3b627d(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x5dc)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x635)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x635)]=function(){const _0x56ac3e=_0x444cf3;BattleManager[_0x56ac3e(0x98f)]()?(this['tpbCommandFight'](),this[_0x56ac3e(0x402)]()):VisuMZ[_0x56ac3e(0x7cf)][_0x56ac3e(0x5dc)][_0x56ac3e(0x4a6)](this);},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x39b)]=function(){const _0x11f659=_0x444cf3;if(!VisuMZ['BattleCore'][_0x11f659(0x408)])return;if(Imported[_0x11f659(0x1f6)]&&BattleManager[_0x11f659(0x598)]())return;const _0x29b1fd=$gameParty['aliveMembers']()[_0x11f659(0x4d3)](_0x54fa36=>_0x54fa36[_0x11f659(0x502)]()&&_0x54fa36[_0x11f659(0x36c)]());BattleManager[_0x11f659(0x276)]=_0x29b1fd[0x0]||null,BattleManager['_currentActor']&&BattleManager[_0x11f659(0x276)]['setActionState']('inputting');},VisuMZ[_0x444cf3(0x7cf)]['Scene_Battle_createActorCommandWindow']=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x1b1)],Scene_Battle[_0x444cf3(0x8f4)]['createActorCommandWindow']=function(){const _0x2dc13a=_0x444cf3;VisuMZ[_0x2dc13a(0x7cf)][_0x2dc13a(0xb29)]['call'](this),this[_0x2dc13a(0xae5)]();},Scene_Battle['prototype'][_0x444cf3(0xae5)]=function(){const _0x4b529e=_0x444cf3,_0x4c4636=this['_actorCommandWindow'];_0x4c4636[_0x4b529e(0xa5a)](_0x4b529e(0xadf),this[_0x4b529e(0x8be)][_0x4b529e(0x2fa)](this)),_0x4c4636[_0x4b529e(0xa5a)]('autoBattle',this[_0x4b529e(0x5d4)]['bind'](this)),_0x4c4636[_0x4b529e(0xa5a)](_0x4b529e(0x5bc),this['actorCommandSingleSkill']['bind'](this)),BattleManager[_0x4b529e(0x98f)]()&&(this[_0x4b529e(0x7e5)]()?delete _0x4c4636['_handlers'][_0x4b529e(0x717)]:_0x4c4636[_0x4b529e(0xa5a)]('cancel',this['actorCommandCancelTPB'][_0x4b529e(0x2fa)](this)));},Scene_Battle['prototype'][_0x444cf3(0x8be)]=function(){const _0x42c51f=_0x444cf3;this[_0x42c51f(0xa28)]();},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x5d4)]=function(){const _0x426624=_0x444cf3;BattleManager[_0x426624(0x37a)]()[_0x426624(0x846)](),BattleManager[_0x426624(0xa6f)](),BattleManager[_0x426624(0x4e4)](),this[_0x426624(0x464)]();},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x783)]=function(){const _0x1b50d0=_0x444cf3,_0x50a35e=BattleManager[_0x1b50d0(0x2d5)](),_0x539981=this[_0x1b50d0(0x9f9)][_0x1b50d0(0x308)]();_0x50a35e[_0x1b50d0(0x626)](_0x539981),BattleManager['actor']()[_0x1b50d0(0x855)]($dataSkills[_0x539981]),this[_0x1b50d0(0x344)]();},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x9f7)]=function(){const _0x143b50=_0x444cf3;this[_0x143b50(0x317)]()?this[_0x143b50(0x68d)]():this[_0x143b50(0x5ad)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x408)]=![],Scene_Battle['prototype'][_0x444cf3(0x317)]=function(){const _0x10f846=_0x444cf3;if(Imported[_0x10f846(0x1f6)]&&BattleManager['isCTB']())return![];else{if(!VisuMZ[_0x10f846(0x7cf)][_0x10f846(0x408)])return![];const _0x28212b=$gameParty['aliveMembers']()[_0x10f846(0x4d3)](_0x103aa5=>_0x103aa5[_0x10f846(0x502)]()&&_0x103aa5[_0x10f846(0x36c)]());return _0x28212b['length']>0x0&&BattleManager[_0x10f846(0x37a)]()!==_0x28212b[_0x28212b[_0x10f846(0xa40)]-0x1];}},Scene_Battle[_0x444cf3(0x8f4)]['performTpbActiveCheckSwitch']=function(){const _0x31cd6b=_0x444cf3,_0x4d77b9=BattleManager['actor'](),_0x1e963a=_0x4d77b9[_0x31cd6b(0x516)]();if(_0x1e963a)_0x1e963a['stepBack']();const _0x206b12=$gameParty[_0x31cd6b(0xaf5)]()[_0x31cd6b(0x4d3)](_0x4124f4=>_0x4124f4['isTpbCharged']()&&_0x4124f4['canInput']()),_0x5c132f=_0x206b12['indexOf'](_0x4d77b9),_0x392d6f=_0x206b12[_0x5c132f+0x1];BattleManager['_currentActor']=_0x392d6f||null;if(_0x392d6f)_0x392d6f[_0x31cd6b(0x4b8)]('inputting');_0x4d77b9['setActionState'](_0x31cd6b(0x824)),this[_0x31cd6b(0x464)]();},Scene_Battle['prototype']['processActorCommandCancelTPB']=function(){const _0x595303=_0x444cf3;this[_0x595303(0xa99)][_0x595303(0x5fb)](),this[_0x595303(0x9f9)]['close']();if(!VisuMZ[_0x595303(0x7cf)][_0x595303(0x408)])return;if(Imported[_0x595303(0x1f6)]&&BattleManager[_0x595303(0x598)]())return;if(BattleManager['_currentActor']){BattleManager['_currentActor'][_0x595303(0x4b8)](_0x595303(0x824));const _0x5d9153=BattleManager[_0x595303(0x276)][_0x595303(0x516)]();if(_0x5d9153)_0x5d9153[_0x595303(0x9bd)]();}BattleManager['_currentActor']=null;},VisuMZ[_0x444cf3(0x7cf)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x333)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x333)]=function(){const _0x14efbf=_0x444cf3;VisuMZ['BattleCore'][_0x14efbf(0x7e4)][_0x14efbf(0x4a6)](this),this[_0x14efbf(0x581)]();},Scene_Battle[_0x444cf3(0x8f4)]['createHelpWindowBattleCore']=function(){const _0x5964f7=_0x444cf3;this['_actorCommandWindow']['setHelpWindow'](this[_0x5964f7(0x3f9)]),this[_0x5964f7(0xa99)][_0x5964f7(0x721)](this[_0x5964f7(0x3f9)]);},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x650)]=function(){const _0x52c2f1=_0x444cf3;if($gameTemp[_0x52c2f1(0x838)]!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x52c2f1(0x56e)])return this['_battleLayoutStyle'];return this[_0x52c2f1(0x56e)]=VisuMZ['BattleCore'][_0x52c2f1(0x52b)]['BattleLayout'][_0x52c2f1(0xade)][_0x52c2f1(0x1fd)]()[_0x52c2f1(0x78c)](),this[_0x52c2f1(0x56e)]==='sideview_ui'&&!Imported[_0x52c2f1(0x96e)]&&(this[_0x52c2f1(0x56e)]=_0x52c2f1(0x471)),this[_0x52c2f1(0x56e)]===_0x52c2f1(0x791)&&!Imported[_0x52c2f1(0x70b)]&&(this[_0x52c2f1(0x56e)]=_0x52c2f1(0x471)),this[_0x52c2f1(0x56e)];},VisuMZ[_0x444cf3(0x7cf)]['Scene_Battle_windowAreaHeight']=Scene_Battle['prototype'][_0x444cf3(0x7ec)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x7ec)]=function(){const _0x2467de=_0x444cf3,_0x5d501f=this['battleLayoutStyle']();switch(_0x5d501f){case _0x2467de(0x628):return this[_0x2467de(0x944)](Math['max'](0x1,$gameParty[_0x2467de(0x24f)]()),!![]);break;default:return VisuMZ[_0x2467de(0x7cf)][_0x2467de(0x4b1)][_0x2467de(0x4a6)](this);break;}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xb1a)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x97b)],Scene_Battle['prototype']['helpWindowRect']=function(){const _0x16b1f4=_0x444cf3,_0x1958d6=this['battleLayoutStyle']();switch(_0x1958d6){case'border':return this[_0x16b1f4(0x3ec)]();break;case _0x16b1f4(0x471):case _0x16b1f4(0x628):case'xp':case'portrait':default:return VisuMZ[_0x16b1f4(0x7cf)]['Scene_Battle_helpWindowRect'][_0x16b1f4(0x4a6)](this);break;}},Scene_Battle[_0x444cf3(0x8f4)]['statusWindowRect']=function(){const _0xb200ae=_0x444cf3,_0x5bde03=this[_0xb200ae(0x650)]();switch(_0x5bde03){case'xp':case'portrait':return this[_0xb200ae(0x328)]();break;case'border':return this[_0xb200ae(0x92b)]();break;case _0xb200ae(0x471):case _0xb200ae(0x628):default:return this[_0xb200ae(0x707)]();break;}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x582)]=Scene_Battle['prototype'][_0x444cf3(0x9a6)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x9a6)]=function(){const _0x57511f=_0x444cf3,_0x3bb8f0=this[_0x57511f(0x650)]();switch(_0x3bb8f0){case'xp':case _0x57511f(0x974):return this[_0x57511f(0x40e)]();break;case _0x57511f(0x8e3):return this[_0x57511f(0x6a7)]();case _0x57511f(0x471):case _0x57511f(0x628):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0xa11)]=function(){const _0x2ddfc9=_0x444cf3,_0x5b464e=VisuMZ[_0x2ddfc9(0x7cf)][_0x2ddfc9(0x52b)][_0x2ddfc9(0xa4b)],_0x29456a=_0x5b464e['CommandWidth']||0xc0,_0xc837b0=this[_0x2ddfc9(0x7ec)](),_0x102329=this['isRightInputMode']()?Graphics['boxWidth']-_0x29456a:0x0,_0x1281b5=Graphics[_0x2ddfc9(0x358)]-_0xc837b0;return new Rectangle(_0x102329,_0x1281b5,_0x29456a,_0xc837b0);},Scene_Battle[_0x444cf3(0x8f4)]['actorCommandWindowRect']=function(){const _0x454a3c=_0x444cf3;return this[_0x454a3c(0x9a6)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x5a3)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x84a)],Scene_Battle['prototype'][_0x444cf3(0x84a)]=function(){const _0xbac518=_0x444cf3,_0x589742=this[_0xbac518(0x650)]();switch(_0x589742){case'xp':case _0xbac518(0x974):case _0xbac518(0x8e3):break;case _0xbac518(0x471):case _0xbac518(0x628):default:VisuMZ[_0xbac518(0x7cf)]['Scene_Battle_updateStatusWindowPosition'][_0xbac518(0x4a6)](this);break;}},VisuMZ['BattleCore'][_0x444cf3(0x46d)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x9cc)],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x9cc)]=function(){const _0x1f9772=_0x444cf3;VisuMZ['BattleCore'][_0x1f9772(0x46d)][_0x1f9772(0x4a6)](this),this[_0x1f9772(0x75f)]();},VisuMZ[_0x444cf3(0x7cf)]['Scene_Battle_startEnemySelection']=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x9d0)],Scene_Battle['prototype'][_0x444cf3(0x9d0)]=function(){const _0x3d1c31=_0x444cf3;VisuMZ['BattleCore'][_0x3d1c31(0x60d)]['call'](this),this['_enemyWindow']['autoSelect'](),this[_0x3d1c31(0x75f)]();},Scene_Battle['prototype'][_0x444cf3(0x75f)]=function(){const _0x16b590=_0x444cf3,_0x4fc93c=this[_0x16b590(0x650)]();['xp',_0x16b590(0x974),_0x16b590(0x8e3)]['includes'](_0x4fc93c)&&this[_0x16b590(0x9f9)][_0x16b590(0xa5f)](),(_0x4fc93c===_0x16b590(0x8e3)||this[_0x16b590(0x62c)]())&&(this['_skillWindow'][_0x16b590(0xa5f)](),this[_0x16b590(0x499)][_0x16b590(0xa5f)]());},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x4c7)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x4ca)],Scene_Battle['prototype'][_0x444cf3(0x4ca)]=function(){const _0x152864=_0x444cf3;VisuMZ[_0x152864(0x7cf)][_0x152864(0x4c7)][_0x152864(0x4a6)](this),this[_0x152864(0x924)]();},Scene_Battle['prototype'][_0x444cf3(0x691)]=function(){const _0x5eb9a1=_0x444cf3;return[_0x5eb9a1(0x67f),_0x5eb9a1(0x8ec),_0x5eb9a1(0x5bc)]['includes'](this[_0x5eb9a1(0x9f9)][_0x5eb9a1(0xa81)]());},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xb26)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x6b3)],Scene_Battle['prototype'][_0x444cf3(0x6b3)]=function(){const _0x395353=_0x444cf3;this['isNonSubmenuCancel']()?(this['_statusWindow'][_0x395353(0x81f)](),this[_0x395353(0x684)][_0x395353(0x479)](),this[_0x395353(0x9f9)]['activate']()):VisuMZ['BattleCore'][_0x395353(0xb26)]['call'](this),this[_0x395353(0x937)]();},VisuMZ['BattleCore']['Scene_Battle_onEnemyOk']=Scene_Battle['prototype']['onEnemyOk'],Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x6a6)]=function(){const _0x35b8df=_0x444cf3,_0x14266d=BattleManager['inputtingAction']();_0x14266d[_0x35b8df(0x8e2)](this['_enemyWindow'][_0x35b8df(0x452)]()),this[_0x35b8df(0x6d5)]['closeBattleActorWindow'](),VisuMZ[_0x35b8df(0x7cf)][_0x35b8df(0x350)][_0x35b8df(0x4a6)](this),this['okTargetSelectionVisibility']();},VisuMZ['BattleCore'][_0x444cf3(0x9a9)]=Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x34f)],Scene_Battle[_0x444cf3(0x8f4)]['onEnemyCancel']=function(){const _0x2883bb=_0x444cf3;this[_0x2883bb(0x691)]()?(this['_statusWindow'][_0x2883bb(0x81f)](),this[_0x2883bb(0x6d5)][_0x2883bb(0x479)](),this[_0x2883bb(0x9f9)][_0x2883bb(0x8fd)]()):VisuMZ[_0x2883bb(0x7cf)][_0x2883bb(0x9a9)]['call'](this),this['cancelTargetSelectionVisibility'](),this[_0x2883bb(0x6d5)]['closeBattleActorWindow']();},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x924)]=function(){const _0x36ee60=_0x444cf3,_0x5c9f21=this[_0x36ee60(0x650)]();(_0x5c9f21===_0x36ee60(0x8e3)||this['isSkillItemWindowsMiddle']())&&(this[_0x36ee60(0x4b9)][_0x36ee60(0x785)](),this[_0x36ee60(0x4b9)][_0x36ee60(0x257)]&&this['_skillWindow'][_0x36ee60(0x81f)](),this[_0x36ee60(0x499)][_0x36ee60(0x785)](),this[_0x36ee60(0x499)]['active']&&this[_0x36ee60(0x499)][_0x36ee60(0x81f)]());},Scene_Battle['prototype'][_0x444cf3(0x937)]=function(){const _0x359a8e=_0x444cf3,_0xff1c75=this[_0x359a8e(0x650)]();['xp',_0x359a8e(0x974),'border'][_0x359a8e(0xa60)](_0xff1c75)&&this['_actorCommandWindow'][_0x359a8e(0x785)](),this[_0x359a8e(0x924)]();},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x707)]=function(){const _0x4c53b8=_0x444cf3,_0x2156a3=VisuMZ['BattleCore'][_0x4c53b8(0x52b)][_0x4c53b8(0xa4b)],_0x307819=Window_BattleStatus[_0x4c53b8(0x8f4)][_0x4c53b8(0x2e8)](),_0x286b99=Graphics[_0x4c53b8(0x902)]-(_0x2156a3[_0x4c53b8(0x492)]||0xc0),_0x4f854c=this[_0x4c53b8(0x7ec)]()+_0x307819,_0x347343=this[_0x4c53b8(0x772)]()?0x0:Graphics[_0x4c53b8(0x902)]-_0x286b99,_0x3d278c=Graphics[_0x4c53b8(0x358)]-_0x4f854c+_0x307819;return new Rectangle(_0x347343,_0x3d278c,_0x286b99,_0x4f854c);},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x328)]=function(){const _0x3de346=_0x444cf3,_0x30ee70=Window_BattleStatus[_0x3de346(0x8f4)][_0x3de346(0x2e8)](),_0x4d1f27=Graphics['boxWidth'],_0x5740f3=this[_0x3de346(0x7ec)]()+_0x30ee70,_0x1c298c=0x0,_0x5081a8=Graphics[_0x3de346(0x358)]-_0x5740f3+_0x30ee70;return new Rectangle(_0x1c298c,_0x5081a8,_0x4d1f27,_0x5740f3);},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x40e)]=function(){const _0x1030f4=_0x444cf3,_0x3825a2=Graphics['boxWidth']/0x2,_0x3bd394=this[_0x1030f4(0x944)](VisuMZ['BattleCore'][_0x1030f4(0x52b)][_0x1030f4(0xa4b)][_0x1030f4(0x880)],!![]),_0x220227=Math[_0x1030f4(0xa43)]((Graphics[_0x1030f4(0x902)]-_0x3825a2)/0x2),_0x5e46dc=Graphics[_0x1030f4(0x358)]-_0x3bd394-this[_0x1030f4(0x328)]()[_0x1030f4(0x661)];return new Rectangle(_0x220227,_0x5e46dc,_0x3825a2,_0x3bd394);},Scene_Battle['prototype']['helpWindowRectBorderStyle']=function(){const _0x1f0780=_0x444cf3,_0x4d61f6=Graphics[_0x1f0780(0x851)],_0x4ef700=Math['round']((Graphics[_0x1f0780(0x902)]-_0x4d61f6)/0x2),_0x5c7e8c=this['helpAreaHeight'](),_0x5f0fdc=(Graphics[_0x1f0780(0x661)]-Graphics[_0x1f0780(0x358)])/-0x2;return new Rectangle(_0x4ef700,_0x5f0fdc,_0x4d61f6,_0x5c7e8c);},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x92b)]=function(){const _0x3d916d=_0x444cf3,_0x2a3b45=Graphics[_0x3d916d(0x851)],_0x351f00=Math[_0x3d916d(0xa43)]((Graphics[_0x3d916d(0x902)]-_0x2a3b45)/0x2),_0x1933d8=this['calcWindowHeight'](0x4,!![]),_0x4b31a9=Graphics['boxHeight']-_0x1933d8+(Graphics[_0x3d916d(0x661)]-Graphics[_0x3d916d(0x358)])/0x2;return new Rectangle(_0x351f00,_0x4b31a9,_0x2a3b45,_0x1933d8);},Scene_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x6a7)]=function(){const _0x21de39=_0x444cf3,_0x1b2237=Math[_0x21de39(0x93e)](Graphics[_0x21de39(0x851)]/0x3),_0x4194dd=this[_0x21de39(0x772)]()?(Graphics[_0x21de39(0x851)]+Graphics[_0x21de39(0x902)])/0x2-_0x1b2237:(Graphics[_0x21de39(0x851)]-Graphics[_0x21de39(0x902)])/-0x2,_0x4bb5b5=this[_0x21de39(0x3ec)](),_0x5d6d2a=_0x4bb5b5['y']+_0x4bb5b5[_0x21de39(0x661)],_0x5e292b=this['statusWindowRectBorderStyle'](),_0x434c0=_0x5e292b['y']-_0x5d6d2a;return new Rectangle(_0x4194dd,_0x5d6d2a,_0x1b2237,_0x434c0);},Scene_Battle['prototype'][_0x444cf3(0x335)]=function(){const _0x480d3d=_0x444cf3,_0x3f5e7a=Math[_0x480d3d(0x30d)](Graphics['width']/0x3),_0x1adad7=Math[_0x480d3d(0xa43)]((Graphics['boxWidth']-_0x3f5e7a)/0x2),_0x55911c=this[_0x480d3d(0x6a7)](),_0x2f17b1=_0x55911c['y'],_0x2bc17f=_0x55911c[_0x480d3d(0x661)];return new Rectangle(_0x1adad7,_0x2f17b1,_0x3f5e7a,_0x2bc17f);},Scene_Battle[_0x444cf3(0x8f4)]['repositionCancelButtonBorderStyle']=function(){const _0x4ccaa9=_0x444cf3;this[_0x4ccaa9(0x56b)]['y']=this['_helpWindow']['y']+this[_0x4ccaa9(0x3f9)][_0x4ccaa9(0x661)],this[_0x4ccaa9(0x772)]()?this[_0x4ccaa9(0x650)]()===_0x4ccaa9(0x8e3)?this[_0x4ccaa9(0x56b)]['x']=0x8:this['_cancelButton']['x']=-this[_0x4ccaa9(0x56b)][_0x4ccaa9(0x851)]-0x4:this['_cancelButton']['x']=Graphics[_0x4ccaa9(0x851)]-(Graphics['width']-Graphics[_0x4ccaa9(0x902)])/0x2-this[_0x4ccaa9(0x56b)]['width']-0x4;},VisuMZ['BattleCore'][_0x444cf3(0x334)]=Scene_Battle[_0x444cf3(0x8f4)]['skillWindowRect'],Scene_Battle['prototype']['skillWindowRect']=function(){const _0x2f0f3f=_0x444cf3;if(this[_0x2f0f3f(0x650)]()===_0x2f0f3f(0x8e3))return this['skillItemWindowRectBorderStyle']();else return this[_0x2f0f3f(0x62c)]()?this['skillItemWindowRectMiddle']():VisuMZ[_0x2f0f3f(0x7cf)][_0x2f0f3f(0x334)][_0x2f0f3f(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x1e7)]=Scene_Battle[_0x444cf3(0x8f4)]['itemWindowRect'],Scene_Battle[_0x444cf3(0x8f4)]['itemWindowRect']=function(){const _0x1815d1=_0x444cf3;if(this[_0x1815d1(0x650)]()===_0x1815d1(0x8e3))return this[_0x1815d1(0x335)]();else return this[_0x1815d1(0x62c)]()?this[_0x1815d1(0x5f5)]():VisuMZ[_0x1815d1(0x7cf)]['Scene_Battle_itemWindowRect']['call'](this);},Scene_Battle['prototype'][_0x444cf3(0x62c)]=function(){const _0x29ff02=_0x444cf3;return VisuMZ[_0x29ff02(0x7cf)][_0x29ff02(0x52b)]['BattleLayout'][_0x29ff02(0x256)];},Scene_Battle[_0x444cf3(0x8f4)]['skillItemWindowRectMiddle']=function(){const _0x3ed06d=_0x444cf3,_0xce57c5=Sprite_Button[_0x3ed06d(0x8f4)][_0x3ed06d(0x942)]()*0x2+0x4;let _0x15320a=Graphics[_0x3ed06d(0x902)]-_0xce57c5;Imported[_0x3ed06d(0x8d5)]&&SceneManager[_0x3ed06d(0x70e)]()&&(_0x15320a+=_0xce57c5);const _0x480b22=this['helpAreaBottom'](),_0x698b85=Graphics[_0x3ed06d(0x358)]-_0x480b22-this[_0x3ed06d(0x61e)]()[_0x3ed06d(0x661)]+Window_BattleStatus[_0x3ed06d(0x8f4)][_0x3ed06d(0x2e8)](),_0x1e7817=0x0;return new Rectangle(_0x1e7817,_0x480b22,_0x15320a,_0x698b85);},Scene_Battle[_0x444cf3(0x8f4)]['createEnemyNameContainer']=function(){const _0x13436c=_0x444cf3;if(!VisuMZ[_0x13436c(0x7cf)][_0x13436c(0x52b)]['Enemy'][_0x13436c(0x456)])return;this['_enemyNameContainer']=new Sprite(),this[_0x13436c(0xa2b)]['x']=this[_0x13436c(0x495)]['x'],this['_enemyNameContainer']['y']=this[_0x13436c(0x495)]['y'];const _0x31181d=this[_0x13436c(0x3eb)]['indexOf'](this[_0x13436c(0x495)]);this[_0x13436c(0x31b)](this[_0x13436c(0xa2b)],_0x31181d);for(let _0x46e617=0x0;_0x46e617<0x8;_0x46e617++){const _0x389339=new Window_EnemyName(_0x46e617);this['_enemyNameContainer'][_0x13436c(0x353)](_0x389339);}},Sprite_Battler[_0x444cf3(0xa7e)]=VisuMZ['BattleCore'][_0x444cf3(0x52b)]['Actor'][_0x444cf3(0x998)],VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x595)]=Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x990)],Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x990)]=function(){const _0x19c800=_0x444cf3;VisuMZ[_0x19c800(0x7cf)][_0x19c800(0x595)][_0x19c800(0x4a6)](this),this[_0x19c800(0x40f)]();if(this['constructor']===Sprite_Enemy)this[_0x19c800(0x316)]();this[_0x19c800(0x95a)]();},Sprite_Battler['prototype'][_0x444cf3(0x40f)]=function(){const _0x3f1609=_0x444cf3;this[_0x3f1609(0x3d2)]=0x0,this[_0x3f1609(0x801)]=0x0,this['_floatHeight']=0x0,this['_targetFloatHeight']=0x0,this[_0x3f1609(0x896)]=0x0,this[_0x3f1609(0xa92)]=0x0,this[_0x3f1609(0x511)]='Linear',this[_0x3f1609(0xa91)]=0x0,this[_0x3f1609(0x2cd)]=0x0,this[_0x3f1609(0x522)]=0x0,this[_0x3f1609(0xa31)]=0x0,this[_0x3f1609(0x8de)]=0xff,this[_0x3f1609(0xa53)]=0x0,this['_opacityWholeDuration']=0x0,this['_opacityEasing']=_0x3f1609(0xafa),this[_0x3f1609(0x775)]=0x0,this[_0x3f1609(0x8ea)]=0x0,this[_0x3f1609(0x87a)]=0x0,this['_angleWholeDuration']=0x0,this[_0x3f1609(0x238)]='Linear',this[_0x3f1609(0x5a1)]=!![],this[_0x3f1609(0x66f)]=0x0,this[_0x3f1609(0x48b)]=0x0,this[_0x3f1609(0x4ee)]=0x0,this['_targetSkewY']=0x0,this['_skewDuration']=0x0,this[_0x3f1609(0x469)]=0x0,this[_0x3f1609(0x49d)]=_0x3f1609(0xafa),this[_0x3f1609(0x73d)]=0x1,this[_0x3f1609(0x8c9)]=0x1,this['_targetGrowX']=0x1,this[_0x3f1609(0xaec)]=0x1,this[_0x3f1609(0x87b)]=0x0,this['_growWholeDuration']=0x0,this[_0x3f1609(0x2f7)]=_0x3f1609(0xafa),this[_0x3f1609(0x831)]=0x1,this[_0x3f1609(0x44c)]=0x0,this[_0x3f1609(0x9f2)]=0x0,this[_0x3f1609(0xad7)]=0x0,this[_0x3f1609(0xacf)]=0x0,this[_0x3f1609(0x93b)]=_0x3f1609(0xafa),this[_0x3f1609(0x254)]=0x0,this[_0x3f1609(0x451)]=0x0;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x316)]=function(){const _0x935ef=_0x444cf3;this[_0x935ef(0x314)]=new Sprite(),this[_0x935ef(0x314)][_0x935ef(0x1ff)]=ImageManager[_0x935ef(0x8c1)]('Shadow2'),this[_0x935ef(0x314)][_0x935ef(0x1ff)][_0x935ef(0x9dd)]=VisuMZ['BattleCore']['Settings'][_0x935ef(0x3d8)][_0x935ef(0x33e)],this[_0x935ef(0x314)][_0x935ef(0x7ff)]['x']=0.5,this[_0x935ef(0x314)][_0x935ef(0x7ff)]['y']=0.5,this[_0x935ef(0x314)]['y']=-0x2,this[_0x935ef(0x314)][_0x935ef(0x30c)]=![],this[_0x935ef(0x353)](this[_0x935ef(0x314)]);},Sprite_Battler['prototype'][_0x444cf3(0x95a)]=function(){const _0x231ff4=_0x444cf3;this[_0x231ff4(0x7f1)]=new Sprite(),this[_0x231ff4(0x7f1)][_0x231ff4(0x7ff)]['x']=0.5,this[_0x231ff4(0x7f1)][_0x231ff4(0x7ff)]['y']=0.5,this[_0x231ff4(0x353)](this[_0x231ff4(0x7f1)]);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x803)]=function(){const _0x3f3494=_0x444cf3;if(!this['_distortionSprite'])return;if(this[_0x3f3494(0x314)]){const _0x4a8110=this['getChildIndex'](this[_0x3f3494(0x7f1)]);this[_0x3f3494(0x31b)](this[_0x3f3494(0x314)],_0x4a8110),this[_0x3f3494(0x78a)]();}this['_svBattlerSprite']&&this[_0x3f3494(0x7f1)][_0x3f3494(0x353)](this[_0x3f3494(0x9c0)]),this[_0x3f3494(0x5ef)]&&this[_0x3f3494(0x7f1)][_0x3f3494(0x353)](this[_0x3f3494(0x5ef)]),this[_0x3f3494(0x6ff)]&&this[_0x3f3494(0x7f1)][_0x3f3494(0x353)](this[_0x3f3494(0x6ff)]),this[_0x3f3494(0xa97)]&&this[_0x3f3494(0x7f1)][_0x3f3494(0x353)](this[_0x3f3494(0xa97)]),this['_dragonbonesSpriteContainer']&&this[_0x3f3494(0x7f1)][_0x3f3494(0x353)](this[_0x3f3494(0x724)]);},Sprite_Battler[_0x444cf3(0x8f4)]['updateShadowVisibility']=function(){const _0x3f18b5=_0x444cf3;if(!this['_shadowSprite'])return;if(this[_0x3f18b5(0x441)]&&this[_0x3f18b5(0x441)][_0x3f18b5(0x790)]()){const _0x1cc703=this[_0x3f18b5(0x314)][_0x3f18b5(0x1ff)];this['_shadowSprite'][_0x3f18b5(0x7d4)](0x0,0x0,_0x1cc703['width'],_0x1cc703[_0x3f18b5(0x661)]);}else this['_shadowSprite'][_0x3f18b5(0x7d4)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x444cf3(0xa19)]=function(){const _0x1fc01a=_0x444cf3;return SceneManager[_0x1fc01a(0xa7a)]()?SceneManager[_0x1fc01a(0xa67)][_0x1fc01a(0x9f5)][_0x1fc01a(0x281)]:this[_0x1fc01a(0x623)];},Sprite_Battler['prototype']['setupTextPopup']=function(_0x1eb72f,_0x4244c4){const _0x309c17=_0x444cf3;if(!this['_battler'][_0x309c17(0x690)]())return;if(BattleManager[_0x309c17(0x486)]())return;const _0x5dd126=VisuMZ[_0x309c17(0x7cf)]['Settings'][_0x309c17(0xa9f)],_0x5486c8=new Sprite_Damage();_0x5486c8[_0x309c17(0x751)]=_0x5dd126['PopupDuration'],this['sortDamageSprites'](_0x5486c8),_0x5486c8['setupTextPopup'](_0x1eb72f,_0x4244c4),this['addDamageSprite'](_0x5486c8);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x37b)]=function(_0x5b2c12,_0x4eb917,_0x463f44){const _0x2075b2=_0x444cf3;if(!this[_0x2075b2(0x441)][_0x2075b2(0x690)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x23b517=VisuMZ['BattleCore'][_0x2075b2(0x52b)][_0x2075b2(0xa9f)],_0x5a94b6=new Sprite_Damage();_0x5a94b6[_0x2075b2(0x751)]=_0x23b517[_0x2075b2(0xb1e)],this[_0x2075b2(0x9e4)](_0x5a94b6),_0x5a94b6['setupIconTextPopup'](_0x5b2c12,_0x4eb917,_0x463f44),this[_0x2075b2(0x524)](_0x5a94b6);},Sprite_Battler[_0x444cf3(0x8f4)]['setupDamagePopup']=function(){const _0x5c394d=_0x444cf3;if(!this['_battler']['isDamagePopupRequested']())return;while(this[_0x5c394d(0x441)]['isDamagePopupRequested']()){this[_0x5c394d(0x441)][_0x5c394d(0x690)]()&&this[_0x5c394d(0x94e)]();}this[_0x5c394d(0x441)][_0x5c394d(0x62e)](),this[_0x5c394d(0x441)][_0x5c394d(0x584)]();},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x94e)]=function(){const _0x1edfe4=_0x444cf3;if(BattleManager[_0x1edfe4(0x486)]())return;const _0x4d435c=VisuMZ[_0x1edfe4(0x7cf)][_0x1edfe4(0x52b)][_0x1edfe4(0xa9f)],_0x26f5ed=new Sprite_Damage();_0x26f5ed[_0x1edfe4(0x751)]=_0x4d435c[_0x1edfe4(0xb1e)],this[_0x1edfe4(0x9e4)](_0x26f5ed),_0x26f5ed['setup'](this[_0x1edfe4(0x441)]),_0x26f5ed[_0x1edfe4(0x645)](this[_0x1edfe4(0x441)]),this[_0x1edfe4(0x524)](_0x26f5ed);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x524)]=function(_0x5530e7){const _0x3a4527=_0x444cf3;this[_0x3a4527(0x376)]['push'](_0x5530e7);if(this[_0x3a4527(0x892)]()){const _0xbb6b53=SceneManager[_0x3a4527(0xa67)][_0x3a4527(0x842)];if(_0xbb6b53)_0xbb6b53[_0x3a4527(0x524)](_0x5530e7,this[_0x3a4527(0x441)]);}else{this[_0x3a4527(0xa19)]()[_0x3a4527(0x353)](_0x5530e7);if(SceneManager['isBattleFlipped']())_0x5530e7[_0x3a4527(0x3c8)]['x']=-0x1;}},Sprite_Battler[_0x444cf3(0x8f4)]['isShownOnBattlePortrait']=function(){const _0x6f3e26=_0x444cf3;return!$gameSystem[_0x6f3e26(0x718)]()&&this['_battler']&&this[_0x6f3e26(0x441)]['isActor']();return!$gameSystem[_0x6f3e26(0x718)]()&&this[_0x6f3e26(0x441)]&&this['_battler'][_0x6f3e26(0xa93)]()&&Window_BattleStatus[_0x6f3e26(0x8f4)][_0x6f3e26(0x650)]()==='portrait';},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x9e4)]=function(_0x4f4fcd){const _0x5d244d=_0x444cf3;this[_0x5d244d(0x28b)](_0x4f4fcd,!![]);const _0x56d647=VisuMZ[_0x5d244d(0x7cf)][_0x5d244d(0x52b)][_0x5d244d(0xa9f)],_0x3fa15b=SceneManager[_0x5d244d(0x248)]()?-0x1:0x1;if(_0x56d647[_0x5d244d(0x7b8)])for(const _0x3be366 of this['_damages']){_0x3be366['x']+=_0x56d647['PopupShiftX']*_0x3fa15b,_0x3be366['y']+=_0x56d647[_0x5d244d(0x9d4)];}else{const _0x5898d5=this[_0x5d244d(0x376)][this[_0x5d244d(0x376)][_0x5d244d(0xa40)]-0x1];_0x5898d5&&(_0x4f4fcd['x']=_0x5898d5['x']+_0x56d647['PopupShiftX']*_0x3fa15b,_0x4f4fcd['y']=_0x5898d5['y']+_0x56d647[_0x5d244d(0x9d4)]);}},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x28b)]=function(_0x4645d3,_0x270564){const _0x577bdf=_0x444cf3,_0xed8085=SceneManager[_0x577bdf(0x248)]()?-0x1:0x1;let _0x5daceb=this[_0x577bdf(0x3d2)];_0x5daceb+=this[_0x577bdf(0x475)]();let _0x437425=this[_0x577bdf(0x801)];const _0x2110d7=this[_0x577bdf(0x7f1)][_0x577bdf(0x3c8)]['y'];_0x437425+=this[_0x577bdf(0x939)]();const _0x1f422a=SceneManager['_scene'][_0x577bdf(0x842)];if(_0x1f422a&&this[_0x577bdf(0x623)]===_0x1f422a){_0x5daceb+=_0x1f422a['x']-this[_0x577bdf(0x46f)]();const _0x32c47c=_0x1f422a[_0x577bdf(0x9fc)]()*0x3/0x4;_0x437425=_0x1f422a['y']+_0x32c47c,_0x437425=Math[_0x577bdf(0x349)](_0x437425,_0x1f422a['y']+this['y']-this['height']+_0x32c47c);}_0x4645d3['x']=Math[_0x577bdf(0xa43)](_0x5daceb+this[_0x577bdf(0x46f)]()*_0xed8085),_0x4645d3['y']=Math[_0x577bdf(0xa43)](_0x437425+this[_0x577bdf(0x7b5)]());},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x21d)]=Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x46f)],Sprite_Battler[_0x444cf3(0x8f4)]['damageOffsetX']=function(){const _0x350e44=_0x444cf3;let _0x41e62d=VisuMZ[_0x350e44(0x7cf)][_0x350e44(0x21d)][_0x350e44(0x4a6)](this),_0x4b1965=VisuMZ[_0x350e44(0x7cf)][_0x350e44(0x52b)]['Damage'][_0x350e44(0x533)]||0x0;return Math[_0x350e44(0xa43)](_0x41e62d+_0x4b1965);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xab3)]=Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x7b5)],Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x7b5)]=function(){const _0x460ea3=_0x444cf3;let _0x45f440=VisuMZ[_0x460ea3(0x7cf)][_0x460ea3(0xab3)][_0x460ea3(0x4a6)](this);switch(VisuMZ[_0x460ea3(0x7cf)][_0x460ea3(0x52b)][_0x460ea3(0xa9f)][_0x460ea3(0x535)]){case _0x460ea3(0x6eb):_0x45f440-=this['height']*this[_0x460ea3(0x3c8)]['y'];break;case _0x460ea3(0xa98):_0x45f440-=this[_0x460ea3(0x661)]*this[_0x460ea3(0x3c8)]['y']*0.5;break;}let _0x182199=VisuMZ[_0x460ea3(0x7cf)]['Settings'][_0x460ea3(0xa9f)][_0x460ea3(0x432)]||0x0;return Math['round'](_0x45f440+_0x182199);},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x46f)]=function(){const _0xc9043b=_0x444cf3;return Sprite_Battler[_0xc9043b(0x8f4)]['damageOffsetX'][_0xc9043b(0x4a6)](this);},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x7b5)]=function(){const _0x4118e8=_0x444cf3;return Sprite_Battler[_0x4118e8(0x8f4)][_0x4118e8(0x7b5)][_0x4118e8(0x4a6)](this);},Sprite_Battler['prototype'][_0x444cf3(0x43d)]=function(_0x5267fe){const _0xc44470=_0x444cf3;this[_0xc44470(0x892)]()?SceneManager['_scene'][_0xc44470(0x842)][_0xc44470(0xb1d)](_0x5267fe):(this['damageContainer']()[_0xc44470(0x6b1)](_0x5267fe),this['_damages'][_0xc44470(0x6ee)](_0x5267fe),_0x5267fe[_0xc44470(0x5a7)]());},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x426)]=Sprite_Battler['prototype']['setHome'],Sprite_Battler['prototype'][_0x444cf3(0x643)]=function(_0x404071,_0x5ddfb2){const _0x51a88a=_0x444cf3,_0x5d7e88=VisuMZ['BattleCore'][_0x51a88a(0x52b)];if(this[_0x51a88a(0x427)]===Sprite_Actor)_0x404071+=_0x5d7e88[_0x51a88a(0x3d8)][_0x51a88a(0x236)]||0x0,_0x5ddfb2+=_0x5d7e88[_0x51a88a(0x3d8)][_0x51a88a(0xad3)]||0x0;else this[_0x51a88a(0x427)]===Sprite_Enemy&&(_0x404071+=_0x5d7e88[_0x51a88a(0x52d)][_0x51a88a(0x236)]||0x0,_0x5ddfb2+=_0x5d7e88[_0x51a88a(0x52d)]['OffsetY']||0x0);this[_0x51a88a(0x441)]&&(_0x404071=this[_0x51a88a(0x441)][_0x51a88a(0x800)]??_0x404071,_0x5ddfb2=this[_0x51a88a(0x441)][_0x51a88a(0xae3)]??_0x5ddfb2),VisuMZ[_0x51a88a(0x7cf)][_0x51a88a(0x426)]['call'](this,_0x404071,_0x5ddfb2),this['_targetHomeX']=this[_0x51a88a(0x856)],this['_targetHomeY']=this[_0x51a88a(0xac8)],this[_0x51a88a(0xad7)]=0x0,this[_0x51a88a(0xacf)]=0x0,this[_0x51a88a(0x93b)]=_0x51a88a(0xafa);},VisuMZ['BattleCore'][_0x444cf3(0x701)]=Sprite_Battler['prototype']['update'],Sprite_Battler[_0x444cf3(0x8f4)]['update']=function(){const _0x5642f4=_0x444cf3;VisuMZ[_0x5642f4(0x7cf)][_0x5642f4(0x701)][_0x5642f4(0x4a6)](this),!this[_0x5642f4(0x441)]&&this['_hpGaugeSprite']&&(this[_0x5642f4(0xb00)]['visible']=![]);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x68b)]=Sprite_Battler[_0x444cf3(0x8f4)]['updateMain'],Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x713)]=function(){const _0x21a0f1=_0x444cf3;this[_0x21a0f1(0x78e)](),this[_0x21a0f1(0x886)](),this['updateSpin'](),this['updateFlip'](),VisuMZ[_0x21a0f1(0x7cf)][_0x21a0f1(0x68b)]['call'](this),this[_0x21a0f1(0x212)](),this[_0x21a0f1(0x4be)]();if(this[_0x21a0f1(0x427)]===Sprite_Enemy)this[_0x21a0f1(0x1b3)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xac3)]=Sprite_Battler[_0x444cf3(0x8f4)]['updatePosition'],Sprite_Battler['prototype'][_0x444cf3(0x4e6)]=function(){const _0x358f48=_0x444cf3;this['updateHomeMove'](),VisuMZ[_0x358f48(0x7cf)][_0x358f48(0xac3)][_0x358f48(0x4a6)](this),this[_0x358f48(0x736)](),this['updateOpacity']();},Sprite_Battler['prototype'][_0x444cf3(0x50a)]=function(){const _0x160351=_0x444cf3,_0x1cb0e5=this[_0x160351(0x9d5)]();if(this[_0x160351(0x441)][_0x160351(0x32b)]())this[_0x160351(0x805)]++,Graphics['frameCount']%0x1e<0xf?_0x1cb0e5[_0x160351(0x3e9)]([0xff,0xff,0xff,0x40]):_0x1cb0e5[_0x160351(0x3e9)]([0x0,0x0,0x0,0x0]);else this[_0x160351(0x805)]>0x0&&(this[_0x160351(0x805)]=0x0,_0x1cb0e5['setBlendColor']([0x0,0x0,0x0,0x0]));},Sprite_Battler['prototype'][_0x444cf3(0xae9)]=function(_0x423742,_0x123aa3){const _0x2ac3f8=_0x444cf3,_0x178a78=_0x423742-this[_0x2ac3f8(0x856)],_0x5d9b10=_0x123aa3-this[_0x2ac3f8(0xac8)];this[_0x2ac3f8(0x856)]=_0x423742,this[_0x2ac3f8(0xac8)]=_0x123aa3,this[_0x2ac3f8(0x627)]-=_0x178a78,this[_0x2ac3f8(0x781)]-=_0x5d9b10,this[_0x2ac3f8(0xb14)]-=_0x178a78,this['_targetOffsetY']-=_0x5d9b10,this[_0x2ac3f8(0x4e6)]();},Sprite_Battler['prototype'][_0x444cf3(0x927)]=function(_0x2d5bbc,_0x1a9e76,_0x7d6675,_0x565f24){const _0x49460b=_0x444cf3;(this['_targetHomeX']!==_0x2d5bbc||this[_0x49460b(0x9f2)]!==_0x1a9e76)&&(this[_0x49460b(0x44c)]=_0x2d5bbc,this[_0x49460b(0x9f2)]=_0x1a9e76,this[_0x49460b(0xad7)]=_0x7d6675,this['_homeWholeDuration']=_0x7d6675,this[_0x49460b(0x93b)]=_0x565f24,_0x7d6675<=0x0&&this[_0x49460b(0x337)]());},Sprite_Battler['prototype'][_0x444cf3(0x54c)]=function(){const _0x5adee0=_0x444cf3;if(this[_0x5adee0(0xad7)]<=0x0)return;const _0x35c709=this[_0x5adee0(0xad7)],_0x39bd3c=this[_0x5adee0(0xacf)],_0x8ed5c9=this[_0x5adee0(0x93b)];Imported[_0x5adee0(0x8d5)]?(this['_homeX']=this['applyEasing'](this[_0x5adee0(0x856)],this[_0x5adee0(0x44c)],_0x35c709,_0x39bd3c,_0x8ed5c9),this['_homeY']=this[_0x5adee0(0xa44)](this[_0x5adee0(0xac8)],this[_0x5adee0(0x9f2)],_0x35c709,_0x39bd3c,_0x8ed5c9)):(this['_homeX']=(this[_0x5adee0(0x856)]*(_0x35c709-0x1)+this[_0x5adee0(0x44c)])/_0x35c709,this['_homeY']=(this[_0x5adee0(0xac8)]*(_0x35c709-0x1)+this[_0x5adee0(0x9f2)])/_0x35c709);this[_0x5adee0(0xad7)]--;if(this[_0x5adee0(0xad7)]<=0x0)this[_0x5adee0(0x337)]();},Sprite_Battler['prototype'][_0x444cf3(0x337)]=function(){const _0x146539=_0x444cf3;this['_homeX']=this[_0x146539(0x44c)],this['_homeY']=this[_0x146539(0x9f2)];},Sprite_Battler['prototype']['updatePositionBattleCore']=function(){const _0x505456=_0x444cf3;this[_0x505456(0x3d2)]=this['x'],this[_0x505456(0x801)]=this['y'],this[_0x505456(0x5aa)](),this['updateJump'](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x505456(0x939)](),this['y']+=this[_0x505456(0x9f8)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x505456(0x93e)](this['y']);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x475)]=function(){let _0x29957e=0x0;return _0x29957e;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x939)]=function(){const _0x5a0025=_0x444cf3;let _0xa1fbf8=0x0;return this['_battler']&&!this[_0x5a0025(0x441)][_0x5a0025(0x415)]()&&(_0xa1fbf8-=this['_floatHeight'],_0xa1fbf8-=this[_0x5a0025(0xa91)]),_0xa1fbf8;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x9f8)]=function(){const _0x365d0c=_0x444cf3;let _0x1e87f4=0x0;if(this[_0x365d0c(0x7f1)]&&this[_0x365d0c(0x427)]!==Sprite_SvEnemy){const _0x2b213d=this[_0x365d0c(0x7f1)][_0x365d0c(0x3c8)]['y'];_0x1e87f4-=(_0x2b213d-0x1)*this[_0x365d0c(0x661)];}return _0x1e87f4;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x7d0)]=function(){const _0x20d7ad=_0x444cf3,_0x24b195=this[_0x20d7ad(0x441)]&&this[_0x20d7ad(0x441)]['isBattlerFlipped']();this[_0x20d7ad(0x831)]=(_0x24b195?-0x1:0x1)*Math['abs'](this[_0x20d7ad(0x3c8)]['x']);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x978)]=function(_0x479566,_0x316cf9,_0xc44680){const _0x1b4d4b=_0x444cf3;if(!this[_0x1b4d4b(0x809)]())return;if(this[_0x1b4d4b(0x605)]===_0x479566)return;this['_targetFloatHeight']=_0x479566,this[_0x1b4d4b(0x896)]=_0x316cf9,this['_floatWholeDuration']=_0x316cf9,this[_0x1b4d4b(0x511)]=_0xc44680||_0x1b4d4b(0xafa);if(_0x316cf9<=0x0)this[_0x1b4d4b(0x89f)]=_0x479566;},Sprite_Battler[_0x444cf3(0x8f4)]['updateFloat']=function(){const _0x67d27f=_0x444cf3;if(this['_floatDuration']<=0x0)return;const _0x5cbeb7=this[_0x67d27f(0x896)],_0x30afdd=this[_0x67d27f(0xa92)],_0x14ec19=this[_0x67d27f(0x511)];Imported['VisuMZ_0_CoreEngine']?this[_0x67d27f(0x89f)]=this[_0x67d27f(0xa44)](this[_0x67d27f(0x89f)],this[_0x67d27f(0x605)],_0x5cbeb7,_0x30afdd,_0x14ec19):this[_0x67d27f(0x89f)]=(this[_0x67d27f(0x89f)]*(_0x5cbeb7-0x1)+this['_targetFloatHeight'])/_0x5cbeb7;this[_0x67d27f(0x896)]--;if(this[_0x67d27f(0x896)]<=0x0)this[_0x67d27f(0x633)]();},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x633)]=function(){const _0x277afa=_0x444cf3;this[_0x277afa(0x89f)]=this['_targetFloatHeight'];},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x288)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x444cf3(0x8f4)]['startJump']=function(_0x50129c,_0xe41285){const _0x112f50=_0x444cf3;if(!this[_0x112f50(0x809)]())return;if(_0xe41285<=0x0)return;this[_0x112f50(0x2cd)]=_0x50129c,this[_0x112f50(0x522)]=_0xe41285,this[_0x112f50(0xa31)]=_0xe41285;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x28c)]=function(){const _0x42ca8f=_0x444cf3;if(this[_0x42ca8f(0x522)]<=0x0)return;const _0x30d102=this[_0x42ca8f(0xa31)]-this['_jumpDuration'],_0x312eeb=this['_jumpWholeDuration']/0x2,_0x5e4aaa=this[_0x42ca8f(0x2cd)],_0x51a3af=-_0x5e4aaa/Math[_0x42ca8f(0x498)](_0x312eeb,0x2);this['_jumpHeight']=_0x51a3af*Math[_0x42ca8f(0x498)](_0x30d102-_0x312eeb,0x2)+_0x5e4aaa,this[_0x42ca8f(0x522)]--;if(this['_jumpDuration']<=0x0)return this[_0x42ca8f(0x4ae)]();},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x4ae)]=function(){const _0x50715b=_0x444cf3;this[_0x50715b(0xa91)]=0x0;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x655)]=function(){const _0x4f0f4a=_0x444cf3;return this[_0x4f0f4a(0x522)]>0x0;},Sprite_Battler['prototype']['startOpacity']=function(_0x4fc4ef,_0x57d519,_0x2b206d){const _0x7aa544=_0x444cf3;if(this[_0x7aa544(0x8de)]===_0x4fc4ef)return;this[_0x7aa544(0x8de)]=_0x4fc4ef,this['_opacityDuration']=_0x57d519,this[_0x7aa544(0x590)]=_0x57d519,this[_0x7aa544(0x649)]=_0x2b206d||_0x7aa544(0xafa);if(_0x57d519<=0x0)this[_0x7aa544(0x291)]=_0x4fc4ef;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x6a5)]=function(){const _0x3a1353=_0x444cf3;if(this[_0x3a1353(0x427)][_0x3a1353(0x21a)]===_0x3a1353(0x6ec))return;if(this['_opacityDuration']<=0x0)return;const _0x3edfcb=this[_0x3a1353(0xa53)],_0x346818=this[_0x3a1353(0x590)],_0xe0381e=this[_0x3a1353(0x649)];Imported[_0x3a1353(0x8d5)]?this[_0x3a1353(0x291)]=this[_0x3a1353(0xa44)](this[_0x3a1353(0x291)],this['_targetOpacity'],_0x3edfcb,_0x346818,_0xe0381e):this[_0x3a1353(0x291)]=(this[_0x3a1353(0x291)]*(_0x3edfcb-0x1)+this[_0x3a1353(0x8de)])/_0x3edfcb;this[_0x3a1353(0xa53)]--;if(this[_0x3a1353(0xa53)]<=0x0)this[_0x3a1353(0x845)]();},Sprite_Battler[_0x444cf3(0x8f4)]['onOpacityEnd']=function(){const _0x8774d=_0x444cf3;this[_0x8774d(0x291)]=this[_0x8774d(0x8de)];},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x329)]=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x1b3)]=function(){const _0x1470c8=_0x444cf3;this[_0x1470c8(0x314)][_0x1470c8(0x30c)]=this[_0x1470c8(0x441)][_0x1470c8(0x572)](),this[_0x1470c8(0x9f3)]();},Sprite_Battler['prototype'][_0x444cf3(0x9f3)]=function(){const _0x2ab3fd=_0x444cf3;if(!this[_0x2ab3fd(0x314)])return;this['_shadowSprite']['y']=this[_0x2ab3fd(0x801)]-this['y']-0x2;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x893)]=function(){const _0x191dfc=_0x444cf3;if(!this['_battler'])return;this[_0x191dfc(0x738)]=this[_0x191dfc(0x441)][_0x191dfc(0x306)](),this['_shadowScaleY']=this['_battler'][_0x191dfc(0xb25)]();},Game_BattlerBase[_0x444cf3(0x8f4)][_0x444cf3(0x306)]=function(){const _0x3bacc9=_0x444cf3,_0x499de1=this[_0x3bacc9(0xa93)]()?this[_0x3bacc9(0x37a)]():this[_0x3bacc9(0x452)]();if(_0x499de1){const _0x301c9b=_0x499de1[_0x3bacc9(0x1cd)];if(_0x301c9b[_0x3bacc9(0x6b8)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x301c9b[_0x3bacc9(0x6b8)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase['prototype'][_0x444cf3(0xb25)]=function(){const _0x1cf164=_0x444cf3,_0xbe732b=this[_0x1cf164(0xa93)]()?this[_0x1cf164(0x37a)]():this[_0x1cf164(0x452)]();if(_0xbe732b){const _0x517e98=_0xbe732b[_0x1cf164(0x1cd)];if(_0x517e98['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x517e98['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x78e)]=function(){const _0x2b9879=_0x444cf3;if(this[_0x2b9879(0x427)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x2b9879(0xae0)]();},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0xae0)]=function(){const _0x58d5e9=_0x444cf3,_0x2d8996=this[_0x58d5e9(0x7f1)];_0x2d8996&&(_0x2d8996[_0x58d5e9(0x3c8)]['x']=this[_0x58d5e9(0x78f)](),_0x2d8996[_0x58d5e9(0x3c8)]['y']=this[_0x58d5e9(0x45f)]());},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x78f)]=function(){const _0x46a720=_0x444cf3;let _0x1728a8=0x1;return _0x1728a8*=this[_0x46a720(0x831)],_0x1728a8*=this[_0x46a720(0x73d)],_0x1728a8;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x45f)]=function(){return 0x1*this['_growY'];},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x817)]=function(){const _0x1c04c1=_0x444cf3;return this[_0x1c04c1(0x851)]*this[_0x1c04c1(0x78f)]();},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x6bc)]=function(){return this['height']*this['mainSpriteScaleY']();},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x7de)]=function(_0x543b6b,_0xa23174,_0x36c6f9,_0xa4ff08){const _0x5abe0c=_0x444cf3;if(!this[_0x5abe0c(0x809)]())return;if(!this[_0x5abe0c(0x7f1)])return;if(this[_0x5abe0c(0x784)]===_0x543b6b&&this['_targetGrowY']===_0xa23174)return;this[_0x5abe0c(0x784)]=_0x543b6b,this[_0x5abe0c(0xaec)]=_0xa23174,this[_0x5abe0c(0x87b)]=_0x36c6f9,this['_growWholeDuration']=_0x36c6f9,this[_0x5abe0c(0x2f7)]=_0xa4ff08||'Linear',_0x36c6f9<=0x0&&(this[_0x5abe0c(0x73d)]=this['_targetGrowX'],this[_0x5abe0c(0x8c9)]=this['_targetGrowY']);},Sprite_Battler[_0x444cf3(0x8f4)]['updateGrow']=function(){const _0x1d6a72=_0x444cf3;if(this[_0x1d6a72(0x87b)]<=0x0)return;if(!this[_0x1d6a72(0x7f1)])return;const _0x118361=this[_0x1d6a72(0x87b)],_0x55a895=this[_0x1d6a72(0x362)],_0x1dcf90=this[_0x1d6a72(0x2f7)];Imported['VisuMZ_0_CoreEngine']?(this[_0x1d6a72(0x73d)]=this[_0x1d6a72(0xa44)](this[_0x1d6a72(0x73d)],this[_0x1d6a72(0x784)],_0x118361,_0x55a895,_0x1dcf90),this[_0x1d6a72(0x8c9)]=this[_0x1d6a72(0xa44)](this[_0x1d6a72(0x8c9)],this['_targetGrowY'],_0x118361,_0x55a895,_0x1dcf90)):(this[_0x1d6a72(0x73d)]=(this['_growX']*(_0x118361-0x1)+this[_0x1d6a72(0x784)])/_0x118361,this[_0x1d6a72(0x8c9)]=(this[_0x1d6a72(0x8c9)]*(_0x118361-0x1)+this[_0x1d6a72(0xaec)])/_0x118361);this[_0x1d6a72(0x87b)]--;if(this['_growDuration']<=0x0)this[_0x1d6a72(0x795)]();},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x795)]=function(){const _0xde168b=_0x444cf3;this[_0xde168b(0x73d)]=this[_0xde168b(0x784)],this[_0xde168b(0x8c9)]=this[_0xde168b(0xaec)];},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x48a)]=function(){const _0x5e6363=_0x444cf3;return this[_0x5e6363(0x87b)]>0x0;},Sprite_Battler[_0x444cf3(0x8f4)]['startSkew']=function(_0x38dcf5,_0xf492ce,_0x3e30c9,_0x35c0b2){const _0x2a1bdd=_0x444cf3;if(!this[_0x2a1bdd(0x809)]())return;if(!this[_0x2a1bdd(0x7f1)])return;if(this[_0x2a1bdd(0x4ee)]===_0x38dcf5&&this['_targetSkewY']===_0xf492ce)return;this[_0x2a1bdd(0x4ee)]=_0x38dcf5,this[_0x2a1bdd(0x512)]=_0xf492ce,this['_skewDuration']=_0x3e30c9,this[_0x2a1bdd(0x469)]=_0x3e30c9,this[_0x2a1bdd(0x49d)]=_0x35c0b2||_0x2a1bdd(0xafa),_0x3e30c9<=0x0&&(this[_0x2a1bdd(0x7f1)][_0x2a1bdd(0x286)]['x']=this['_targetSkewX'],this['_distortionSprite'][_0x2a1bdd(0x286)]['y']=this[_0x2a1bdd(0x512)]);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x886)]=function(){const _0x38e681=_0x444cf3;if(this[_0x38e681(0x4c0)]<=0x0)return;if(!this[_0x38e681(0x7f1)])return;const _0x274b9f=this[_0x38e681(0x4c0)],_0xc43e22=this[_0x38e681(0x469)],_0x313dcf=this[_0x38e681(0x49d)],_0x5bf382=this['_distortionSprite'];Imported[_0x38e681(0x8d5)]?(_0x5bf382[_0x38e681(0x286)]['x']=this['applyEasing'](_0x5bf382[_0x38e681(0x286)]['x'],this[_0x38e681(0x4ee)],_0x274b9f,_0xc43e22,_0x313dcf),_0x5bf382[_0x38e681(0x286)]['y']=this[_0x38e681(0xa44)](_0x5bf382[_0x38e681(0x286)]['y'],this[_0x38e681(0x512)],_0x274b9f,_0xc43e22,_0x313dcf)):(_0x5bf382['skew']['x']=(_0x5bf382[_0x38e681(0x286)]['x']*(_0x274b9f-0x1)+this['_targetSkewX'])/_0x274b9f,_0x5bf382[_0x38e681(0x286)]['y']=(_0x5bf382[_0x38e681(0x286)]['y']*(_0x274b9f-0x1)+this[_0x38e681(0x512)])/_0x274b9f);this[_0x38e681(0x4c0)]--;if(this[_0x38e681(0x4c0)]<=0x0)this[_0x38e681(0x2b8)]();},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x2b8)]=function(){const _0x180b81=_0x444cf3;this[_0x180b81(0x7f1)][_0x180b81(0x286)]['x']=this['_targetSkewX'],this[_0x180b81(0x7f1)][_0x180b81(0x286)]['y']=this[_0x180b81(0x512)];},Sprite_Battler['prototype']['isSkewing']=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x732)]=function(_0x36d051,_0x385d5e,_0x1eb92b,_0x510fde){const _0x23acf5=_0x444cf3;if(!this['canMove']())return;if(!this[_0x23acf5(0x7f1)])return;if(this[_0x23acf5(0x8ea)]===_0x36d051)return;this[_0x23acf5(0x8ea)]=_0x36d051,this['_angleDuration']=_0x385d5e,this[_0x23acf5(0x74e)]=_0x385d5e,this[_0x23acf5(0x238)]=_0x1eb92b||_0x23acf5(0xafa),this['_angleRevertOnFinish']=_0x510fde,this['_angleRevertOnFinish']===undefined&&(this[_0x23acf5(0x5a1)]=!![]),_0x385d5e<=0x0&&(this[_0x23acf5(0x775)]=_0x36d051,this[_0x23acf5(0x5a1)]&&(this['_targetAngle']=0x0,this[_0x23acf5(0x775)]=0x0));},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x296)]=function(){const _0xd4c522=_0x444cf3;this[_0xd4c522(0x8d3)](),this[_0xd4c522(0x2b2)]();},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x8d3)]=function(){const _0x77a4e=_0x444cf3;if(this[_0x77a4e(0x87a)]<=0x0)return;const _0x238d61=this[_0x77a4e(0x87a)],_0x187f0f=this[_0x77a4e(0x74e)],_0x4b04b2=this['_angleEasing'];Imported[_0x77a4e(0x8d5)]?this[_0x77a4e(0x775)]=this[_0x77a4e(0xa44)](this['_currentAngle'],this[_0x77a4e(0x8ea)],_0x238d61,_0x187f0f,_0x4b04b2):this['_currentAngle']=(this[_0x77a4e(0x775)]*(_0x238d61-0x1)+this[_0x77a4e(0x8ea)])/_0x238d61;this[_0x77a4e(0x87a)]--;if(this[_0x77a4e(0x87a)]<=0x0)this[_0x77a4e(0x361)]();},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x361)]=function(){const _0xff128f=_0x444cf3;this['_currentAngle']=this['_targetAngle'],this[_0xff128f(0x5a1)]&&(this[_0xff128f(0x8ea)]=0x0,this[_0xff128f(0x775)]=0x0);},Sprite_Battler['prototype'][_0x444cf3(0x3ba)]=function(){const _0x501bb5=_0x444cf3;return this[_0x501bb5(0x87a)]>0x0;},Sprite_Battler[_0x444cf3(0x8f4)]['applyAngleChange']=function(){const _0x587955=_0x444cf3;if(!this[_0x587955(0x7f1)])return;const _0x299152=this[_0x587955(0x775)],_0x2d652a=this[_0x587955(0x3c8)]['x'],_0x5a37fd=this[_0x587955(0x441)][_0x587955(0xa93)]()?-0x1:0x1;this['_distortionSprite']['angle']=_0x299152*_0x2d652a*_0x5a37fd;const _0x3985dd=this[_0x587955(0x7f1)]['scale']['y'];this['_distortionSprite']['y']=this[_0x587955(0x661)]*-0.5*(0x2-_0x3985dd),this[_0x587955(0x7f1)]['y']=Math[_0x587955(0x30d)](this[_0x587955(0x7f1)]['y']);const _0x44076a=[this[_0x587955(0x6ff)],this['_svBattlerSprite'],this[_0x587955(0x724)]];for(const _0x1172a3 of _0x44076a){if(!_0x1172a3)continue;_0x1172a3['y']=this[_0x587955(0x661)]*0.5;}this['_shadowSprite']&&(this[_0x587955(0x738)]=this[_0x587955(0x738)]??0x1,this[_0x587955(0x65f)]=this[_0x587955(0x65f)]??0x1,this['_shadowSprite'][_0x587955(0x3c8)]['x']=this[_0x587955(0x7f1)][_0x587955(0x3c8)]['x']*this['_shadowScaleX'],this[_0x587955(0x314)]['scale']['y']=this[_0x587955(0x7f1)]['scale']['y']*this[_0x587955(0x65f)]);},VisuMZ[_0x444cf3(0x7cf)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x407)],Sprite_Actor['prototype'][_0x444cf3(0x407)]=function(){const _0x4bc464=_0x444cf3;VisuMZ[_0x4bc464(0x7cf)][_0x4bc464(0x347)]['call'](this),VisuMZ[_0x4bc464(0x7cf)]['Settings'][_0x4bc464(0x93a)][_0x4bc464(0x8e4)]&&this[_0x4bc464(0xa12)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x6d2)]=Sprite_Enemy['prototype'][_0x444cf3(0x99d)],Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x99d)]=function(){const _0x4bd769=_0x444cf3;VisuMZ[_0x4bd769(0x7cf)]['Settings'][_0x4bd769(0x93a)][_0x4bd769(0xb10)]&&this[_0x4bd769(0xa12)](),VisuMZ[_0x4bd769(0x7cf)][_0x4bd769(0x6d2)][_0x4bd769(0x4a6)](this);},Sprite_Battler[_0x444cf3(0x8f4)]['createHpGaugeSprite']=function(){const _0x116c17=_0x444cf3;if(!ConfigManager[_0x116c17(0x607)])return;if(this[_0x116c17(0x427)]===Sprite_SvEnemy)return;const _0x118d85=VisuMZ['BattleCore'][_0x116c17(0x52b)][_0x116c17(0x93a)],_0x2120b3=new Sprite_HpGauge();_0x2120b3[_0x116c17(0x7ff)]['x']=_0x118d85[_0x116c17(0x8d7)],_0x2120b3[_0x116c17(0x7ff)]['y']=_0x118d85[_0x116c17(0x8bf)],_0x2120b3[_0x116c17(0x3c8)]['x']=_0x2120b3[_0x116c17(0x3c8)]['y']=_0x118d85['Scale'],this[_0x116c17(0xb00)]=_0x2120b3,this[_0x116c17(0x353)](this[_0x116c17(0xb00)]),Spriteset_Battle[_0x116c17(0x49b)]&&BattleManager[_0x116c17(0x2e3)](this[_0x116c17(0xb00)]);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x8d2)]=Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x2b4)],Sprite_Battler['prototype']['setBattler']=function(_0x1a829d){const _0x27233b=_0x444cf3,_0xc16457=this[_0x27233b(0x441)];VisuMZ[_0x27233b(0x7cf)][_0x27233b(0x8d2)]['call'](this,_0x1a829d),this[_0x27233b(0x5e4)](_0x1a829d);if(_0xc16457!==_0x1a829d)this[_0x27233b(0x893)]();},Sprite_Battler['prototype'][_0x444cf3(0x5e4)]=function(_0x53d379){const _0x265bf8=_0x444cf3;if(!_0x53d379)return;if(!this[_0x265bf8(0xb00)])return;if(_0x53d379[_0x265bf8(0xa93)]()){}else{if(_0x53d379['isEnemy']()){if(this['constructor']===Sprite_SvEnemy&&!_0x53d379[_0x265bf8(0x572)]())return;}}this['_hpGaugeSprite']['setup'](_0x53d379,'hp');},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x21c)]=function(){const _0x6b76d5=_0x444cf3;return this[_0x6b76d5(0x441)]&&this[_0x6b76d5(0x441)]['hasStaticSvBattler']();},Sprite_Battler[_0x444cf3(0x8f4)]['updateStaticSvBattlerFrames']=function(){const _0x4c0f94=_0x444cf3,_0x587b48=this['_mainSprite'][_0x4c0f94(0x1ff)];if(!_0x587b48)return;const _0xdc628f=_0x587b48['width'];let _0xbd1957=_0x587b48[_0x4c0f94(0x661)];if(this[_0x4c0f94(0x441)][_0x4c0f94(0x678)]()){if(this[_0x4c0f94(0xa08)])_0xbd1957=Math['max'](0x0,this[_0x4c0f94(0xa08)][_0x4c0f94(0x661)]-0x4);}this[_0x4c0f94(0x6ff)]['setFrame'](0x0,0x0,_0xdc628f,_0xbd1957),this[_0x4c0f94(0x7d4)](0x0,0x0,_0xdc628f,_0xbd1957);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x212)]=function(){const _0x1a71d5=_0x444cf3;if(!this['_battler'])return;if(!this[_0x1a71d5(0xb00)])return;const _0x512c32=VisuMZ[_0x1a71d5(0x7cf)][_0x1a71d5(0x52b)][_0x1a71d5(0x93a)],_0x542f53=this[_0x1a71d5(0xb00)];_0x542f53[_0x1a71d5(0x30c)]=this['isVisualHpGaugeDisplayed']();const _0x1395f9=_0x512c32[_0x1a71d5(0x236)],_0x226400=_0x512c32[_0x1a71d5(0xad3)];_0x542f53['x']=_0x1395f9,_0x542f53['x']+=this['_battler'][_0x1a71d5(0x338)](),_0x542f53['y']=-this[_0x1a71d5(0x661)]+_0x226400,_0x542f53['y']+=this[_0x1a71d5(0x441)][_0x1a71d5(0xb2d)](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager[_0x1a71d5(0xa67)]['_spriteset']&&(_0x542f53['x']+=this['x'],_0x542f53['y']+=this['y']);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x6e0)]=function(){const _0x1c66fd=_0x444cf3;if(!this[_0x1c66fd(0x441)])return![];if(this['_battler'][_0x1c66fd(0xa93)]())return!![];if(this[_0x1c66fd(0x441)]['isHidden']())return![];if(this['opacity']<=0x0)return![];const _0x1b7a02=this[_0x1c66fd(0x441)]['enemy']()['note'];if(_0x1b7a02[_0x1c66fd(0x6b8)](/<SHOW HP GAUGE>/i))return!![];if(_0x1b7a02['match'](/<HIDE HP GAUGE>/i))return![];const _0x300bbf=VisuMZ[_0x1c66fd(0x7cf)][_0x1c66fd(0x52b)]['HpGauge'];if(_0x300bbf['RequiresDefeat']){if(_0x300bbf[_0x1c66fd(0x3e1)]&&BattleManager[_0x1c66fd(0x5ca)]())return!![];if(this[_0x1c66fd(0x441)][_0x1c66fd(0x5f3)])return![];return this[_0x1c66fd(0x441)]['hasBeenDefeatedBefore']();}return!![];},VisuMZ[_0x444cf3(0x7cf)]['Sprite_Battler_isMoving']=Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x578)],Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x578)]=function(){const _0x48c500=_0x444cf3;if(!this[_0x48c500(0x441)])return![];if(this[_0x48c500(0xad7)]>0x0)return!![];return VisuMZ[_0x48c500(0x7cf)]['Sprite_Battler_isMoving'][_0x48c500(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x65c)]=Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x4b5)],Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x4b5)]=function(_0xd56153,_0x43eda8,_0x129afc){const _0x1ac065=_0x444cf3;this[_0x1ac065(0x809)]()&&VisuMZ['BattleCore']['Sprite_Battler_startMove'][_0x1ac065(0x4a6)](this,_0xd56153,_0x43eda8,_0x129afc);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x809)]=function(){const _0x396f1b=_0x444cf3;if(this[_0x396f1b(0x441)]&&this[_0x396f1b(0x441)][_0x396f1b(0x678)]())return![];if(this[_0x396f1b(0x441)]&&!this[_0x396f1b(0x441)][_0x396f1b(0x4cb)]())return![];return $gameSystem[_0x396f1b(0x718)]();},Sprite_Battler[_0x444cf3(0x8f4)]['stepForward']=function(){},Sprite_Battler['prototype'][_0x444cf3(0x9bd)]=function(){const _0x1e6e7d=_0x444cf3;this[_0x1e6e7d(0x4b5)](0x0,0x0,0xc);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x936)]=function(){},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x745)]=function(){const _0x276833=_0x444cf3,_0x2c706a=VisuMZ[_0x276833(0x7cf)]['Settings'][_0x276833(0x3d8)],_0x23b454=this[_0x276833(0x441)]&&this['_battler'][_0x276833(0xa93)]()?0x1:-0x1,_0x46fd00=this[_0x276833(0x3d2)]-this[_0x276833(0x856)]+_0x23b454*_0x2c706a[_0x276833(0x671)],_0xe87dde=this['_baseY']-this['_homeY']+_0x23b454*_0x2c706a[_0x276833(0x1dd)],_0x4def2d=_0x2c706a[_0x276833(0x3be)];this['startMove'](_0x46fd00,_0xe87dde,_0x4def2d);},Sprite_Battler[_0x444cf3(0x8f4)][_0x444cf3(0x503)]=function(_0x1a4fa5,_0x138aa2){const _0xea1490=_0x444cf3,_0x51516f=VisuMZ[_0xea1490(0x7cf)][_0xea1490(0x52b)][_0xea1490(0x3d8)];this[_0xea1490(0x254)]=Math[_0xea1490(0x30d)]((_0x51516f[_0xea1490(0x413)]??0x18)*_0x138aa2),this[_0xea1490(0x451)]=Math[_0xea1490(0x642)](this['_shakeFlinchPower'],_0x1a4fa5);},Sprite_Battler['prototype'][_0x444cf3(0x4be)]=function(){const _0x1cf58f=_0x444cf3,_0x24d96b=VisuMZ[_0x1cf58f(0x7cf)][_0x1cf58f(0x52b)][_0x1cf58f(0x3d8)];if(!(_0x24d96b[_0x1cf58f(0xb17)]??![]))return;if(this[_0x1cf58f(0x254)]>0x0){const _0x1665bd=this['_shakeFlinchDuration'];this[_0x1cf58f(0x451)]=this[_0x1cf58f(0x451)]*(_0x1665bd-0x1)/_0x1665bd,this[_0x1cf58f(0x254)]--,this[_0x1cf58f(0x254)]<=0x0&&(this[_0x1cf58f(0x451)]=0x0);}this[_0x1cf58f(0x451)]>0x0?(this[_0x1cf58f(0x6ff)]['x']=Math[_0x1cf58f(0x4cc)](this[_0x1cf58f(0x451)])*(Math[_0x1cf58f(0x641)]()<0.5?-0x1:0x1),this['_baseY']!==this['y']&&(this[_0x1cf58f(0x6ff)]['y']=this[_0x1cf58f(0x661)]*0.5,this[_0x1cf58f(0x6ff)]['y']+=Math[_0x1cf58f(0x4cc)](this[_0x1cf58f(0x451)])*(Math[_0x1cf58f(0x641)]()<0.5?-0x1:0x1))):(this[_0x1cf58f(0x6ff)]['x']=0x0,this[_0x1cf58f(0x6ff)]['y']=this[_0x1cf58f(0x661)]*0.5);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xa55)]=Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x990)],Sprite_Actor['prototype'][_0x444cf3(0x990)]=function(){const _0x4c857b=_0x444cf3;VisuMZ[_0x4c857b(0x7cf)][_0x4c857b(0xa55)][_0x4c857b(0x4a6)](this),this[_0x4c857b(0x803)]();},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x9d5)]=function(){const _0x5bb414=_0x444cf3;return this[_0x5bb414(0x7f1)]||this['_mainSprite']||this;},VisuMZ['BattleCore'][_0x444cf3(0x545)]=Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0xa27)],Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0xa27)]=function(){},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x1b9)]=function(_0x1433e3){const _0xedea29=_0x444cf3;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x1433e3)return;if(!_0x1433e3['canMove']())return;VisuMZ[_0xedea29(0x7cf)][_0xedea29(0x545)][_0xedea29(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)]['Sprite_Actor_setActorHome']=Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x390)],Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x390)]=function(_0x2f1a20){const _0xc979c5=_0x444cf3;VisuMZ['BattleCore']['Settings'][_0xc979c5(0x3d8)][_0xc979c5(0xa84)]?VisuMZ[_0xc979c5(0x7cf)][_0xc979c5(0x52b)]['Actor'][_0xc979c5(0xa84)]['call'](this,_0x2f1a20):VisuMZ[_0xc979c5(0x7cf)][_0xc979c5(0x85d)][_0xc979c5(0x4a6)](this,_0x2f1a20);},VisuMZ['BattleCore']['Sprite_Actor_setBattler']=Sprite_Actor['prototype'][_0x444cf3(0x2b4)],Sprite_Actor[_0x444cf3(0x8f4)]['setBattler']=function(_0x516e26){const _0x484273=_0x444cf3;VisuMZ[_0x484273(0x7cf)][_0x484273(0x2f5)][_0x484273(0x4a6)](this,_0x516e26),this['setBattlerBattleCore'](_0x516e26);},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x989)]=function(_0x46fae8){const _0x3987cd=_0x444cf3;if(!_0x46fae8)return;if(!this['_mainSprite'])return;this[_0x3987cd(0x6ff)][_0x3987cd(0x7ff)]['x']=this[_0x3987cd(0xa00)][_0x3987cd(0x2d8)](),this[_0x3987cd(0x6ff)][_0x3987cd(0x7ff)]['y']=this[_0x3987cd(0xa00)][_0x3987cd(0x8fe)](),this[_0x3987cd(0x78a)]();},VisuMZ['BattleCore'][_0x444cf3(0xb2b)]=Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x7b9)],Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x7b9)]=function(){const _0x239810=_0x444cf3;VisuMZ[_0x239810(0x7cf)][_0x239810(0xb2b)][_0x239810(0x4a6)](this),this['_actor']&&(this[_0x239810(0x2d0)](),this[_0x239810(0x4d5)]());},VisuMZ['BattleCore'][_0x444cf3(0x278)]=Sprite_Actor['prototype']['updateBitmap'],Sprite_Actor['prototype'][_0x444cf3(0x4ac)]=function(){const _0x1e3e55=_0x444cf3;VisuMZ[_0x1e3e55(0x7cf)][_0x1e3e55(0x278)]['call'](this),this[_0x1e3e55(0x6ff)]&&this[_0x1e3e55(0x6ff)][_0x1e3e55(0x1ff)]&&this['_battler']&&(this['_mainSprite'][_0x1e3e55(0x1ff)][_0x1e3e55(0x9dd)]!==this['_battler'][_0x1e3e55(0x97e)]()&&(this[_0x1e3e55(0x6ff)][_0x1e3e55(0x1ff)][_0x1e3e55(0x9dd)]=this['_battler'][_0x1e3e55(0x97e)]()));},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xb18)]=Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x1b3)],Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x1b3)]=function(){const _0x57bd75=_0x444cf3;VisuMZ[_0x57bd75(0x7cf)]['Sprite_Actor_updateShadow'][_0x57bd75(0x4a6)](this),this[_0x57bd75(0x9b8)]();},Sprite_Actor[_0x444cf3(0x8f4)]['updateShadowBattleCore']=function(){const _0x2e0d99=_0x444cf3;if(!this[_0x2e0d99(0x6ff)])return;if(!this[_0x2e0d99(0x314)])return;this['updateShadowVisibility'](),this[_0x2e0d99(0x9f3)]();},Sprite_Actor['prototype'][_0x444cf3(0x2d0)]=function(){const _0x23c3f5=_0x444cf3;this['_stateSprite'][_0x23c3f5(0x3c8)]['x']=0x1/(this[_0x23c3f5(0x3c8)]['x']||0.001),this[_0x23c3f5(0xa2c)][_0x23c3f5(0x3c8)]['y']=0x1/(this[_0x23c3f5(0x3c8)]['y']||0.001);},Sprite_Actor[_0x444cf3(0x8f4)]['updateStyleOpacity']=function(){const _0x368eb8=_0x444cf3;if(!$gameSystem[_0x368eb8(0x718)]()&&this['constructor']===Sprite_Actor){const _0x9253a9=Scene_Battle[_0x368eb8(0x8f4)][_0x368eb8(0x650)]();[_0x368eb8(0x471),_0x368eb8(0x628),_0x368eb8(0x974),'border'][_0x368eb8(0xa60)](_0x9253a9)&&(this['opacity']=0x0);}},Sprite_Actor[_0x444cf3(0x8f4)]['refreshMotion']=function(){const _0x2d2a57=_0x444cf3,_0x1e4c43=this[_0x2d2a57(0xa00)];if(_0x1e4c43){const _0x45a82e=_0x1e4c43[_0x2d2a57(0x829)]();if(_0x1e4c43['isInputting']()||_0x1e4c43[_0x2d2a57(0x2ce)]())this[_0x2d2a57(0x77f)](_0x2d2a57(0x7e1));else{if(_0x45a82e===0x3)this['startMotion']('dead');else{if(_0x45a82e===0x2)this[_0x2d2a57(0x77f)](_0x2d2a57(0xb2a));else{if(this['forceEscapeSprite'])this['startMotion'](_0x2d2a57(0xadf));else{if(_0x1e4c43[_0x2d2a57(0x82e)]())this['startMotion'](_0x2d2a57(0xb16));else{if(_0x1e4c43[_0x2d2a57(0xb04)]())this[_0x2d2a57(0x77f)](_0x2d2a57(0x56c));else{if(_0x1e4c43[_0x2d2a57(0x9e1)]()||_0x1e4c43['isGuardWaiting']())this[_0x2d2a57(0x77f)]('guard');else{if(_0x45a82e===0x1)this['startMotion']('abnormal');else{if(_0x1e4c43[_0x2d2a57(0x6b2)]())this['startMotion'](_0x2d2a57(0x470));else{if(_0x1e4c43['isUndecided']())this[_0x2d2a57(0x77f)](_0x2d2a57(0x7e1));else _0x1e4c43[_0x2d2a57(0x5b8)]()?this[_0x2d2a57(0x77f)](_0x2d2a57(0xb16)):this['startMotion']('walk');}}}}}}}}}}},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x936)]=function(){const _0x2d5d2b=0xa,_0x4fc205=0x12c*_0x2d5d2b,_0x49c40f=0x1e*_0x2d5d2b;this['startMove'](_0x4fc205,0x0,_0x49c40f);},Sprite_Actor['prototype'][_0x444cf3(0x29f)]=function(){const _0x103512=_0x444cf3;Sprite_Battler[_0x103512(0x8f4)][_0x103512(0x29f)]['call'](this);},Sprite_Actor['prototype'][_0x444cf3(0x258)]=function(){const _0x31721c=_0x444cf3;return Sprite_Battler[_0x31721c(0xa7e)];},Sprite_Weapon[_0x444cf3(0x8f4)][_0x444cf3(0x3e2)]=function(){const _0x934a0f=_0x444cf3;return Sprite_Battler[_0x934a0f(0xa7e)];},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x621)]=function(){},Sprite_Actor[_0x444cf3(0x8f4)]['setupWeaponAnimation']=function(){},Sprite_Actor['prototype'][_0x444cf3(0x38f)]=function(){const _0x51f348=_0x444cf3;if(this[_0x51f348(0x894)]&&++this[_0x51f348(0x2d9)]>=this[_0x51f348(0x258)]()){if(this[_0x51f348(0x894)][_0x51f348(0x488)])this[_0x51f348(0x3ac)]=(this['_pattern']+0x1)%0x4;else this[_0x51f348(0x3ac)]<0x2?this[_0x51f348(0x3ac)]++:this[_0x51f348(0x53c)]();this[_0x51f348(0x2d9)]=0x0;}},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x22c)]=function(_0x1ab1da){const _0x5c48e9=_0x444cf3;if(_0x1ab1da==='victory')this[_0x5c48e9(0x3a3)]=!![];if(this['_battler']&&this[_0x5c48e9(0x441)][_0x5c48e9(0x678)]()){this[_0x5c48e9(0x894)]=Sprite_Actor['MOTIONS'][_0x5c48e9(0x8ca)];return;}const _0x2f92a4=Sprite_Actor[_0x5c48e9(0x7c4)][_0x1ab1da];this[_0x5c48e9(0x894)]=_0x2f92a4,this['_motionCount']=0x0,this[_0x5c48e9(0x3ac)]=0x0;},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x510)]=function(_0x16a887){const _0x18d4a9=_0x444cf3;if(this['hasStaticSvBattler']())return;this[_0x18d4a9(0x8f9)](),this[_0x18d4a9(0x5ef)][_0x18d4a9(0x5fb)](_0x16a887),this['_actor'][_0x18d4a9(0x8b6)]();},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x8f9)]=function(){const _0x395b02=_0x444cf3;let _0x166470=-0x10,_0x469c5f=this[_0x395b02(0x661)]*0.5;const _0x32856b=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x4085e0=this[_0x395b02(0x441)][_0x395b02(0x79a)]()['map'](_0x3c9332=>_0x3c9332&&_0x3c9332[_0x395b02(0x1cd)]['match'](_0x32856b)?Number(RegExp['$1']):0x0),_0x27a6a9=this[_0x395b02(0x441)][_0x395b02(0x79a)]()['map'](_0x4c1d63=>_0x4c1d63&&_0x4c1d63['note']['match'](_0x32856b)?Number(RegExp['$2']):0x0);_0x166470=_0x4085e0['reduce']((_0xb9d8c9,_0x2da588)=>_0xb9d8c9+_0x2da588,_0x166470),_0x469c5f=_0x27a6a9['reduce']((_0x10a43f,_0x17a5f8)=>_0x10a43f+_0x17a5f8,_0x469c5f),this[_0x395b02(0x5ef)]['x']=_0x166470,this[_0x395b02(0x5ef)]['y']=_0x469c5f,this[_0x395b02(0x5ef)][_0x395b02(0x7b9)]();},Sprite_Weapon[_0x444cf3(0x8f4)][_0x444cf3(0x5fb)]=function(_0x46b556){const _0x393522=_0x444cf3;this[_0x393522(0x744)]=_0x46b556,this[_0x393522(0x445)]=-0x1,this[_0x393522(0x3ac)]=0x0,this[_0x393522(0x266)](),this['updateFrame']();},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x2fc)]=function(){},Sprite_Actor['prototype']['stepForward']=function(){const _0x33986d=_0x444cf3,_0x290006=VisuMZ['BattleCore'][_0x33986d(0x52b)][_0x33986d(0x57a)],_0x23cbed=_0x290006[_0x33986d(0x1d8)],_0x3051dd=_0x290006[_0x33986d(0x620)],_0x10d496=_0x290006[_0x33986d(0xaaf)];this['startMove'](-_0x23cbed,-_0x3051dd,_0x10d496);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x9ca)]=Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0xaa0)],Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0xaa0)]=function(){const _0x59aa7c=_0x444cf3;this[_0x59aa7c(0x21c)]()?this['updateStaticSvBattlerFrames']():(this[_0x59aa7c(0xaa4)](),VisuMZ[_0x59aa7c(0x7cf)][_0x59aa7c(0x9ca)]['call'](this));},Sprite_Actor[_0x444cf3(0x8f4)][_0x444cf3(0xaa4)]=function(){const _0x206f6f=_0x444cf3;if(this['_battler']&&this['_battler'][_0x206f6f(0x227)]){const _0x5931db=this[_0x206f6f(0x441)][_0x206f6f(0x227)];this[_0x206f6f(0x894)]=Sprite_Actor[_0x206f6f(0x7c4)][_0x5931db['motionType']],this['_pattern']=_0x5931db['pattern'];const _0x5abeea=this[_0x206f6f(0x5ef)];_0x5abeea[_0x206f6f(0x3b8)](_0x5931db[_0x206f6f(0x624)],_0x5931db['pattern']),this[_0x206f6f(0x8f9)]();}},Sprite_Weapon['prototype'][_0x444cf3(0x3b8)]=function(_0x4ea8ac,_0xb49066){const _0x56b275=_0x444cf3;this[_0x56b275(0x744)]=_0x4ea8ac,this[_0x56b275(0x445)]=-Infinity,this['_pattern']=_0xb49066,this['loadBitmap'](),this[_0x56b275(0xaa0)]();},Sprite_Enemy['prototype']['initMembers']=function(){const _0x39e024=_0x444cf3;Sprite_Battler[_0x39e024(0x8f4)][_0x39e024(0x990)][_0x39e024(0x4a6)](this),this[_0x39e024(0x797)]=null,this[_0x39e024(0x283)]=![],this[_0x39e024(0x65b)]='',this[_0x39e024(0xa09)]=0x0,this[_0x39e024(0x819)]=null,this[_0x39e024(0x9ee)]=0x0,this[_0x39e024(0x369)]=0x0,this[_0x39e024(0x8f5)](),this[_0x39e024(0x99d)]();},VisuMZ[_0x444cf3(0x7cf)]['Sprite_Enemy_update']=Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x7b9)],Sprite_Enemy['prototype'][_0x444cf3(0x7b9)]=function(){const _0x35db28=_0x444cf3;VisuMZ[_0x35db28(0x7cf)][_0x35db28(0x9bb)]['call'](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x444cf3(0x8f4)]['createMainSprite']=function(){const _0x19439d=_0x444cf3;this['_mainSprite']=new Sprite(),this[_0x19439d(0x6ff)][_0x19439d(0x7ff)]['x']=0.5,this[_0x19439d(0x6ff)][_0x19439d(0x7ff)]['y']=0x1,this['addChild'](this['_mainSprite']),this['attachSpritesToDistortionSprite']();},Sprite_Enemy['prototype']['mainSprite']=function(){const _0x1282ed=_0x444cf3;return this[_0x1282ed(0x7f1)]||this[_0x1282ed(0x6ff)]||this;},Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x266)]=function(_0x131d66){const _0x53e405=_0x444cf3;this[_0x53e405(0x1ff)]=new Bitmap(0x1,0x1);if(this[_0x53e405(0x572)]()){const _0x31c53c=this['_enemy'][_0x53e405(0x27f)]();this['bitmap']=new Bitmap(_0x31c53c['width'],_0x31c53c['height']),this[_0x53e405(0x6ff)][_0x53e405(0x1ff)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x53e405(0x718)]()){const _0x58ee4=ImageManager[_0x53e405(0x24b)](_0x131d66);_0x58ee4[_0x53e405(0x4a7)](this[_0x53e405(0x7da)][_0x53e405(0x2fa)](this,_0x58ee4));}else{const _0x4a1bd3=ImageManager[_0x53e405(0x4c3)](_0x131d66);_0x4a1bd3[_0x53e405(0x4a7)](this[_0x53e405(0x7da)][_0x53e405(0x2fa)](this,_0x4a1bd3));}}},Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x7da)]=function(_0x3c76c6){const _0x10468d=_0x444cf3;this[_0x10468d(0x6ff)][_0x10468d(0x1ff)]=_0x3c76c6,this[_0x10468d(0x1ff)]=new Bitmap(_0x3c76c6[_0x10468d(0x851)],_0x3c76c6[_0x10468d(0x661)]);},VisuMZ['BattleCore'][_0x444cf3(0x297)]=Sprite_Enemy['prototype']['setHue'],Sprite_Enemy['prototype'][_0x444cf3(0x226)]=function(_0x43ca58){const _0x2489dc=_0x444cf3;this[_0x2489dc(0x6ff)]&&this[_0x2489dc(0x6ff)]['setHue'](_0x43ca58);},VisuMZ[_0x444cf3(0x7cf)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x444cf3(0x8f4)]['initVisibility'],Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x9cf)]=function(){const _0x144688=_0x444cf3;this[_0x144688(0x2e2)]()?VisuMZ['BattleCore'][_0x144688(0xa80)][_0x144688(0x4a6)](this):(this['_appeared']=!this[_0x144688(0x797)][_0x144688(0x32a)](),!this[_0x144688(0x283)]&&(this[_0x144688(0x291)]=0x0));},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x662)]=Sprite_Enemy['prototype'][_0x444cf3(0x9ff)],Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x9ff)]=function(){const _0x447151=_0x444cf3;if(this[_0x447151(0x2e2)]())VisuMZ[_0x447151(0x7cf)][_0x447151(0x662)][_0x447151(0x4a6)](this);},Sprite_Enemy[_0x444cf3(0x8f4)]['updateFrame']=function(){const _0x5546a9=_0x444cf3;Sprite_Battler['prototype'][_0x5546a9(0xaa0)]['call'](this);const _0x10bad3=this[_0x5546a9(0x9d5)]()||this;if(!_0x10bad3)return;!_0x10bad3[_0x5546a9(0x1ff)]&&(_0x10bad3['bitmap']=new Bitmap(this[_0x5546a9(0x851)],this[_0x5546a9(0x661)])),this[_0x5546a9(0x819)]===_0x5546a9(0x9d7)?this[_0x5546a9(0x6ff)][_0x5546a9(0x7d4)](0x0,0x0,this['_mainSprite']['width'],this[_0x5546a9(0x9ee)]):_0x10bad3[_0x5546a9(0x7d4)](0x0,0x0,_0x10bad3[_0x5546a9(0x1ff)][_0x5546a9(0x851)],this[_0x5546a9(0x1ff)][_0x5546a9(0x661)]);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x7be)]=Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x6c2)],Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x6c2)]=function(){const _0x6a3b32=_0x444cf3;if(this[_0x6a3b32(0x2e2)]())VisuMZ[_0x6a3b32(0x7cf)]['Sprite_Enemy_updateBossCollapse'][_0x6a3b32(0x4a6)](this);},Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x578)]=function(){const _0x97cd30=_0x444cf3;return Sprite_Battler[_0x97cd30(0x8f4)][_0x97cd30(0x578)][_0x97cd30(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x389)]=Sprite_Enemy[_0x444cf3(0x8f4)]['updateStateSprite'],Sprite_Enemy[_0x444cf3(0x8f4)]['updateStateSprite']=function(){const _0x5a7d7b=_0x444cf3;VisuMZ[_0x5a7d7b(0x7cf)][_0x5a7d7b(0x389)][_0x5a7d7b(0x4a6)](this),this[_0x5a7d7b(0x45a)]();},Sprite_Enemy['prototype'][_0x444cf3(0x45a)]=function(){const _0x4eb68f=_0x444cf3,_0x899dee=VisuMZ[_0x4eb68f(0x7cf)][_0x4eb68f(0x52b)]['Enemy'];if(_0x899dee[_0x4eb68f(0x2f0)]&&!_0x899dee[_0x4eb68f(0x456)]){this[_0x4eb68f(0x295)]['opacity']=0x0;return;}this[_0x4eb68f(0x295)]['x']=0x0,this[_0x4eb68f(0x295)]['x']+=this[_0x4eb68f(0x441)][_0x4eb68f(0x338)](),this[_0x4eb68f(0x295)]['y']=-this['bitmap'][_0x4eb68f(0x661)]-this[_0x4eb68f(0x295)][_0x4eb68f(0x661)]-0x4,this[_0x4eb68f(0x295)]['y']+=this[_0x4eb68f(0x441)][_0x4eb68f(0xb2d)](),this['_stateIconSprite'][_0x4eb68f(0x3c8)]['x']=0x1/(this[_0x4eb68f(0x3c8)]['x']||0.001),this[_0x4eb68f(0x295)][_0x4eb68f(0x3c8)]['y']=0x1/(this[_0x4eb68f(0x3c8)]['y']||0.001),this['hasSvBattler']()&&(this[_0x4eb68f(0x9c0)][_0x4eb68f(0xa2c)][_0x4eb68f(0x3c8)]['x']=-0x1/(this['scale']['x']||0.001),this['_svBattlerSprite'][_0x4eb68f(0xa2c)][_0x4eb68f(0x3c8)]['y']=0x1/(this[_0x4eb68f(0x3c8)]['y']||0.001));},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x7ed)]=Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x2b4)],Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x2b4)]=function(_0x364071){const _0x267c53=_0x444cf3;VisuMZ['BattleCore'][_0x267c53(0x7ed)][_0x267c53(0x4a6)](this,_0x364071),this[_0x267c53(0x216)](_0x364071);},Sprite_Enemy['prototype'][_0x444cf3(0x216)]=function(_0x423102){const _0x153e0d=_0x444cf3;!this[_0x153e0d(0x9c0)]&&(this[_0x153e0d(0x9c0)]=new Sprite_SvEnemy(_0x423102),this['attachSpritesToDistortionSprite']()),this[_0x153e0d(0x9c0)]['setBattler'](_0x423102);},Sprite_Enemy[_0x444cf3(0x8f4)]['hasSvBattler']=function(){const _0x234ce5=_0x444cf3;return this['_enemy']&&this['_enemy'][_0x234ce5(0x572)]();},Sprite_Enemy[_0x444cf3(0x8f4)][_0x444cf3(0x2e2)]=function(){const _0x45f73a=_0x444cf3;return this['hasSvBattler']()?this[_0x45f73a(0x797)][_0x45f73a(0x2e2)]():!![];},Sprite_Enemy[_0x444cf3(0x8f4)]['refreshMotion']=function(){const _0x2f7d16=_0x444cf3;this[_0x2f7d16(0x572)]()&&this[_0x2f7d16(0x9c0)][_0x2f7d16(0x53c)]();},Sprite_Enemy[_0x444cf3(0x8f4)]['forceMotion']=function(_0x1f7cb5){const _0x3a115b=_0x444cf3;if(this[_0x3a115b(0x572)]())this[_0x3a115b(0x9c0)]['forceMotion'](_0x1f7cb5);},Sprite_Enemy['prototype'][_0x444cf3(0x510)]=function(_0x2b703d){const _0x50da52=_0x444cf3;if(this[_0x50da52(0x572)]())this[_0x50da52(0x9c0)][_0x50da52(0x510)](_0x2b703d);},Sprite_Enemy[_0x444cf3(0x8f4)]['stepForward']=function(){const _0x36f5ff=_0x444cf3,_0x42f499=VisuMZ[_0x36f5ff(0x7cf)][_0x36f5ff(0x52b)]['ActionSequence'],_0x3af84b=_0x42f499['StepDistanceX'],_0xf0ff8f=_0x42f499[_0x36f5ff(0x620)],_0xfff94c=_0x42f499[_0x36f5ff(0xaaf)];this[_0x36f5ff(0x4b5)](_0x3af84b,_0xf0ff8f,_0xfff94c);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy['prototype']=Object['create'](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x427)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x444cf3(0x8f4)]['initialize']=function(_0x5e1923){const _0x2830c2=_0x444cf3;Sprite_Actor[_0x2830c2(0x8f4)][_0x2830c2(0x207)][_0x2830c2(0x4a6)](this,_0x5e1923),this[_0x2830c2(0x3c8)]['x']=-0x1,this[_0x2830c2(0xa2c)]['scale']['x']=-0x1;},Sprite_SvEnemy[_0x444cf3(0x8f4)]['createShadowSprite']=function(){},Sprite_SvEnemy[_0x444cf3(0x8f4)][_0x444cf3(0xa27)]=function(){},Sprite_SvEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x390)]=function(_0x2700b5){},Sprite_SvEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x1b3)]=function(){},Sprite_SvEnemy['prototype']['updateShadowPosition']=function(){},Sprite_SvEnemy['prototype'][_0x444cf3(0x2d0)]=function(){const _0x4cf709=_0x444cf3;this[_0x4cf709(0xa2c)][_0x4cf709(0x30c)]=![];},Sprite_SvEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x4ac)]=function(){const _0x31a926=_0x444cf3;Sprite_Battler[_0x31a926(0x8f4)][_0x31a926(0x4ac)][_0x31a926(0x4a6)](this);const _0x2662a0=this[_0x31a926(0xa00)][_0x31a926(0x3b4)]();this[_0x31a926(0x65b)]!==_0x2662a0&&(this[_0x31a926(0x65b)]=_0x2662a0,this[_0x31a926(0x6ff)][_0x31a926(0x1ff)]=ImageManager[_0x31a926(0x8d8)](_0x2662a0)),this[_0x31a926(0x6ff)]&&this[_0x31a926(0x6ff)][_0x31a926(0x1ff)]&&this['_battler']&&(this['_mainSprite'][_0x31a926(0x1ff)][_0x31a926(0x9dd)]!==this[_0x31a926(0x441)][_0x31a926(0x97e)]()&&(this[_0x31a926(0x6ff)][_0x31a926(0x1ff)][_0x31a926(0x9dd)]=this['_battler'][_0x31a926(0x97e)]()));},Sprite_SvEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x936)]=function(){},Sprite_SvEnemy[_0x444cf3(0x8f4)]['startMove']=function(_0x596bc5,_0x4fc317,_0x5ee31f){const _0x570a1e=_0x444cf3;if(this[_0x570a1e(0x623)])this[_0x570a1e(0x623)][_0x570a1e(0x4b5)](_0x596bc5,_0x4fc317,_0x5ee31f);},Sprite_SvEnemy[_0x444cf3(0x8f4)]['refreshMotion']=function(){const _0x368b0e=_0x444cf3,_0x47ec38=this['_actor'];if(_0x47ec38){const _0x1e0533=_0x47ec38[_0x368b0e(0x829)]();if(_0x47ec38['isInputting']()||_0x47ec38[_0x368b0e(0x2ce)]())this['startMotion']('walk');else{if(_0x1e0533===0x3)this['startMotion'](_0x368b0e(0x8ca));else{if(_0x1e0533===0x2)this[_0x368b0e(0x77f)]('sleep');else{if(_0x47ec38['isChanting']())this[_0x368b0e(0x77f)](_0x368b0e(0x56c));else{if(_0x47ec38[_0x368b0e(0x9e1)]()||_0x47ec38[_0x368b0e(0x3c7)]())this[_0x368b0e(0x77f)]('guard');else{if(_0x1e0533===0x1)this[_0x368b0e(0x77f)]('abnormal');else{if(_0x47ec38[_0x368b0e(0x6b2)]())this['startMotion'](_0x368b0e(0x470));else _0x47ec38['isUndecided']()?this[_0x368b0e(0x77f)](_0x368b0e(0x7e1)):this[_0x368b0e(0x77f)](_0x47ec38[_0x368b0e(0x27f)]()[_0x368b0e(0x34d)]||_0x368b0e(0x7e1));}}}}}}}},Sprite_SvEnemy[_0x444cf3(0x8f4)]['inHomePosition']=function(){const _0x4e0529=_0x444cf3;return this[_0x4e0529(0x623)]?this[_0x4e0529(0x623)][_0x4e0529(0x627)]===0x0&&this[_0x4e0529(0x623)][_0x4e0529(0x781)]===0x0:!![];},Sprite_SvEnemy['prototype'][_0x444cf3(0x7d0)]=function(){},VisuMZ['BattleCore'][_0x444cf3(0x875)]=Sprite_Animation[_0x444cf3(0x8f4)][_0x444cf3(0x5ab)],Sprite_Animation['prototype']['targetSpritePosition']=function(_0x5170ff){const _0x132a91=_0x444cf3;return _0x5170ff[_0x132a91(0x7f1)]?this['targetDistortionSpritePosition'](_0x5170ff):VisuMZ[_0x132a91(0x7cf)][_0x132a91(0x875)]['call'](this,_0x5170ff);},Sprite_Animation[_0x444cf3(0x8f4)][_0x444cf3(0xa9c)]=function(_0x135e06){const _0x57dca7=_0x444cf3;let _0x2b8a37=_0x135e06['x'],_0xd7afa2=_0x135e06['y'],_0x3c5bcc=_0x135e06[_0x57dca7(0x661)],_0x679593=_0x135e06['_distortionSprite'][_0x57dca7(0x3c8)]['y'];_0x135e06['x']=_0x135e06[_0x57dca7(0x3d2)]+_0x135e06[_0x57dca7(0x475)](),_0x135e06['y']=_0x135e06[_0x57dca7(0x801)]+_0x135e06[_0x57dca7(0x939)](),_0x135e06[_0x57dca7(0x661)]*=_0x679593;let _0x16f65a=VisuMZ['BattleCore'][_0x57dca7(0x875)][_0x57dca7(0x4a6)](this,_0x135e06);return _0x135e06['x']=_0x2b8a37,_0x135e06['y']=_0xd7afa2,_0x135e06[_0x57dca7(0x661)]=_0x3c5bcc,_0x16f65a;},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x2af)]=Sprite_AnimationMV[_0x444cf3(0x8f4)][_0x444cf3(0x4e6)],Sprite_AnimationMV[_0x444cf3(0x8f4)][_0x444cf3(0x4e6)]=function(){const _0x4f1846=_0x444cf3;VisuMZ[_0x4f1846(0x7cf)][_0x4f1846(0x2af)][_0x4f1846(0x4a6)](this);if(!SceneManager['isSceneBattle']())return;if(this['_animation']['position']===0x3)this['x']=Math[_0x4f1846(0xa43)](Graphics[_0x4f1846(0x902)]/0x2),this['y']=Math[_0x4f1846(0xa43)](Graphics[_0x4f1846(0x358)]/0x2);else{if(this[_0x4f1846(0x201)])return;}},Sprite_Damage[_0x444cf3(0x8f4)]['setupBattleCore']=function(_0x187119){const _0x3045e9=_0x444cf3,_0x45493e=_0x187119[_0x3045e9(0x28a)]()||_0x187119[_0x3045e9(0x6d1)]();if(_0x45493e[_0x3045e9(0xb05)]||_0x45493e[_0x3045e9(0x6af)])this['_colorType']=0x0,this['createMiss']();else{if(_0x45493e['hpAffected'])this[_0x3045e9(0x40a)]=_0x45493e['hpDamage']>=0x0?0x0:0x1,this[_0x3045e9(0x577)](_0x45493e[_0x3045e9(0xa7d)]);else _0x187119['isAlive']()&&_0x45493e[_0x3045e9(0x65a)]!==0x0&&(this[_0x3045e9(0x40a)]=_0x45493e['mpDamage']>=0x0?0x2:0x3,this['createDigits'](_0x45493e[_0x3045e9(0x65a)]));}_0x45493e['critical']&&this[_0x3045e9(0x3e3)]();},Sprite_Damage[_0x444cf3(0x8f4)][_0x444cf3(0x5fb)]=function(_0x469721){},Sprite_Damage[_0x444cf3(0x8f4)][_0x444cf3(0x577)]=function(_0x35d3c6){const _0x206a6c=_0x444cf3;let _0x5f5b4e=this[_0x206a6c(0xa77)](_0x35d3c6);const _0x316038=this[_0x206a6c(0x622)](),_0x3171f1=Math[_0x206a6c(0x93e)](_0x316038*0.75);for(let _0x19bea7=0x0;_0x19bea7<_0x5f5b4e[_0x206a6c(0xa40)];_0x19bea7++){const _0x564800=this['createChildSprite'](_0x3171f1,_0x316038);_0x564800[_0x206a6c(0x1ff)][_0x206a6c(0x4b2)](_0x5f5b4e[_0x19bea7],0x0,0x0,_0x3171f1,_0x316038,'center'),_0x564800['x']=(_0x19bea7-(_0x5f5b4e[_0x206a6c(0xa40)]-0x1)/0x2)*_0x3171f1,_0x564800['dy']=-_0x19bea7;}},Sprite_Damage[_0x444cf3(0x8f4)]['createString']=function(_0x672683){const _0x4c0b63=_0x444cf3;let _0x28e502=Math[_0x4c0b63(0x62b)](_0x672683)[_0x4c0b63(0x806)]();this['useDigitGrouping']()&&(_0x28e502=VisuMZ[_0x4c0b63(0x69b)](_0x28e502));const _0x47701d=VisuMZ['BattleCore'][_0x4c0b63(0x52b)]['Damage'];let _0x5b9301='',_0x2cf440='';switch(this[_0x4c0b63(0x40a)]){case 0x0:_0x5b9301=_0x47701d['hpDamageFmt']||'-%1',_0x2cf440=TextManager['hp'];if(_0x672683===0x0)_0x5b9301='%1';break;case 0x1:_0x5b9301=_0x47701d['hpHealingFmt']||_0x4c0b63(0xa02),_0x2cf440=TextManager['hp'];break;case 0x2:_0x5b9301=_0x47701d[_0x4c0b63(0xa32)]||'-%1\x20MP',_0x2cf440=TextManager['mp'];break;case 0x3:_0x5b9301=_0x47701d[_0x4c0b63(0x1ee)]||_0x4c0b63(0xa2a),_0x2cf440=TextManager['mp'];break;}return _0x5b9301[_0x4c0b63(0x7d7)](_0x28e502,_0x2cf440)[_0x4c0b63(0x78c)]();},Sprite_Damage[_0x444cf3(0x8f4)]['useDigitGrouping']=function(){const _0x4dd9ab=_0x444cf3;return Imported[_0x4dd9ab(0x8d5)]?VisuMZ[_0x4dd9ab(0xa89)][_0x4dd9ab(0x52b)][_0x4dd9ab(0x9e2)][_0x4dd9ab(0x20c)]:![];},Sprite_Damage[_0x444cf3(0x8f4)]['setupCriticalEffect']=function(){const _0x23268b=_0x444cf3,_0x147e9b=VisuMZ[_0x23268b(0x7cf)][_0x23268b(0x52b)][_0x23268b(0xa9f)];this[_0x23268b(0x3ff)]=_0x147e9b['CriticalColor'][_0x23268b(0xa4a)](0x0),this[_0x23268b(0x7bf)]=_0x147e9b['CriticalDuration'];},Sprite_Damage[_0x444cf3(0x8f4)][_0x444cf3(0x6c5)]=function(_0xcc43b7,_0x3cefe0){const _0x165c82=_0x444cf3;this[_0x165c82(0x3ff)]=_0x3cefe0[_0x165c82(0x995)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x165c82(0x5d7)](this[_0x165c82(0x3ff)]),this['_flashDuration']=_0x3cefe0['flashDuration']||0x0;const _0x3a4230=this[_0x165c82(0x622)](),_0x22b903=Math[_0x165c82(0x93e)](_0x3a4230*0x1e),_0x38c763=this[_0x165c82(0x9fb)](_0x22b903,_0x3a4230);_0x38c763['bitmap']['textColor']=ColorManager['getColor'](_0x3cefe0['textColor']),_0x38c763[_0x165c82(0x1ff)][_0x165c82(0x4b2)](_0xcc43b7,0x0,0x0,_0x22b903,_0x3a4230,_0x165c82(0xa98)),_0x38c763['dy']=0x0;},Sprite_Damage[_0x444cf3(0x8f4)][_0x444cf3(0x37b)]=function(_0x2f9801,_0x37a246,_0x80b0b0){const _0x43c653=_0x444cf3,_0x3a6e21=Math[_0x43c653(0x642)](this[_0x43c653(0x622)](),ImageManager[_0x43c653(0x56a)]),_0x4d0f8b=Math[_0x43c653(0x93e)](_0x3a6e21*0x1e),_0x2973d0=this[_0x43c653(0x9fb)](_0x4d0f8b,_0x3a6e21),_0x47d54f=ImageManager[_0x43c653(0x5b6)]/0x2,_0xc8c777=_0x2973d0['bitmap'][_0x43c653(0xa50)](_0x37a246+'\x20');_0x2973d0['bitmap'][_0x43c653(0x3f1)]=ColorManager[_0x43c653(0x9c8)](_0x80b0b0[_0x43c653(0x3f1)]),_0x2973d0[_0x43c653(0x1ff)][_0x43c653(0x4b2)](_0x37a246,_0x47d54f,0x0,_0x4d0f8b-_0x47d54f,_0x3a6e21,_0x43c653(0xa98));const _0x38e22a=Math['round']((_0x3a6e21-ImageManager[_0x43c653(0x56a)])/0x2),_0x3a2173=_0x4d0f8b/0x2-ImageManager[_0x43c653(0x5b6)]-_0xc8c777/0x2+_0x47d54f/0x2,_0x306506=ImageManager[_0x43c653(0x8c1)](_0x43c653(0xa21)),_0x48180b=ImageManager[_0x43c653(0x5b6)],_0x324262=ImageManager[_0x43c653(0x56a)],_0x5179b0=_0x2f9801%0x10*_0x48180b,_0x3736e1=Math[_0x43c653(0x93e)](_0x2f9801/0x10)*_0x324262;_0x2973d0[_0x43c653(0x1ff)][_0x43c653(0x290)](_0x306506,_0x5179b0,_0x3736e1,_0x48180b,_0x324262,_0x3a2173,_0x38e22a),this[_0x43c653(0x3ff)]=_0x80b0b0[_0x43c653(0x995)]||[0x0,0x0,0x0,0x0],this[_0x43c653(0x3ff)]=JsonEx['makeDeepCopy'](this['_flashColor']),this[_0x43c653(0x7bf)]=_0x80b0b0['flashDuration']||0x0,_0x2973d0['dy']=0x0;},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x991)]=Sprite_Damage['prototype'][_0x444cf3(0x9fb)],Sprite_Damage[_0x444cf3(0x8f4)]['createChildSprite']=function(_0x59740a,_0x244fa8){const _0x4f3139=_0x444cf3;return _0x244fa8=Math[_0x4f3139(0xa43)](_0x244fa8*1.2),VisuMZ[_0x4f3139(0x7cf)][_0x4f3139(0x991)]['call'](this,_0x59740a,_0x244fa8);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x99b)]=Sprite_StateIcon[_0x444cf3(0x8f4)][_0x444cf3(0xaa0)],Sprite_StateIcon[_0x444cf3(0x8f4)]['updateFrame']=function(){const _0x956582=_0x444cf3;VisuMZ[_0x956582(0x7cf)][_0x956582(0x99b)]['call'](this),this[_0x956582(0x291)]=this[_0x956582(0x3fd)]>0x0?0xff:0x0;},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x74d)]=Sprite_Weapon[_0x444cf3(0x8f4)][_0x444cf3(0x266)],Sprite_Weapon[_0x444cf3(0x8f4)]['loadBitmap']=function(){const _0x2417ee=_0x444cf3;VisuMZ['BattleCore'][_0x2417ee(0x74d)][_0x2417ee(0x4a6)](this),this[_0x2417ee(0x1ff)]&&(this[_0x2417ee(0x1ff)][_0x2417ee(0x9dd)]=VisuMZ[_0x2417ee(0x7cf)][_0x2417ee(0x52b)]['Actor'][_0x2417ee(0x33e)]);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x2a5)]=Sprite_Gauge['prototype'][_0x444cf3(0x2ef)],Sprite_Gauge[_0x444cf3(0x8f4)][_0x444cf3(0x2ef)]=function(){const _0x6cd221=_0x444cf3;return this[_0x6cd221(0xb20)]!==_0x6cd221(0x9b2)?VisuMZ[_0x6cd221(0x7cf)][_0x6cd221(0x52b)][_0x6cd221(0x93a)]['AniDuration']??0x14:VisuMZ[_0x6cd221(0x7cf)][_0x6cd221(0x2a5)]['call'](this);};function Sprite_HpGauge(){const _0x9019a9=_0x444cf3;this[_0x9019a9(0x207)](...arguments);}function _0x6498(){const _0x56db47=['_enemyNameContainer','_stateSprite','PostDamage%1JS','VisuMZ_2_HorrorEffects','_active','BattleVictoryJS','_jumpWholeDuration','mpDamageFmt','addAutoBattleCommand','currentValue','ActSeq_Target_PrevTarget','isForFriendBattleCore','ActSeq_Movement_WaitForScale','battleInjectPrep','updateBattlebackBitmap2','ActSeq_Mechanics_EtbAction','process_VisuMZ_BattleCore_Failsafes','isSkill','isBattleCoreTargetScope','isBreakStunned','opponentsUnit','length','updateEventMain','visualCutinPortraitType','round','applyEasing','processForcedAction','PostStartBattleJS','lifeStealRate','_borderPortraitDuration','RevertAngle','slice','BattleLayout','placeTimeGauge','ActSeq_Mechanics_CustomDmgFormula','Targets2','fnordRemovedStates','measureTextWidth','getCommonEventIdWithName','ShakeFlinchPower','_opacityDuration','value2','Sprite_Actor_initMembers','BattleManager_endBattle','CmdTextAutoBattle','updateBattlebackBitmap1','isForAnyoneFocusFriends','setHandler','onBattleEndBattleCore','autoBattleStart','clearActiveWeaponSet','initBattlePortrait','close','includes','_drawTextBody','Scene_Options_maxCommands','WtypeId','startTurn','removedStateObjects','hitIndex','_scene','PostEndBattleJS','onEscapeSuccess','VisuMZ_2_BattleSystemBTB','Mirror','isAnyoneFloating','ActSeq_Camera_FocusTarget','AnimationID','finishActorInput','CmdIconAutoBattle','BattleManager_processVictory','ScaleX','lastCommandSymbol','VisuMZ_3_ActSeqCamera','startPartyCommandSelection','prepareCustomActionSequence','createString','VisuMZ_1_SkillsStatesCore','ENEMY_OFFSET_X','isSceneBattle','_battlerContainer','addExtendedTroopMembers','hpDamage','_motionSpeed','alterPriority','Sprite_Enemy_initVisibility','currentSymbol','setupBlueRedInvertImpactFilter','PreEndActionJS','HomePosJS','SideviewSelect','lastFilename','setBattleCameraPoint','VisuMZ_3_WeaknessDisplay','CoreEngine','setupFont','_forcedBattlers','createAnimationContainer','STR','fnordAddedStates','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','ParseSkillNotetags','_jumpHeight','_floatWholeDuration','isActor','_tpbState','_callSceneOptions','StatusWindowAttachmentFrontOffsetX','_injectAnimationSprite','center','_partyCommandWindow','maxCommands','drain','targetDistortionSpritePosition','_canLose','ConfigManager_applyData','Damage','updateFrame','setupBattleCoreData','ShowTpDmg','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','applyFreezeMotionFrames','Game_Battler_clearDamagePopup','index','Radius','allowRandomSpeed','Window_ItemList_maxCols','State-%1-%2','reserveCommonEvent','TPB','ActSeq_Camera_WaitForCamera','IconStypeNorm','StepDuration','addedBuffs','ConvertParams','Window_BattleLog_displayEvasion','Sprite_Battler_damageOffsetY','getMenuImage','some','hidden','createBattleFieldContainer','#ffffff','alive\x20actors','requestPointAnimation','Window_BattleLog_performCounter','commandOptions','process_VisuMZ_BattleCore_BaseTroops','ActSeq_Mechanics_StbRemoveExcessActions','POST-','30KKbSxm','_action','updateWaitMode','Sprite_Battler_updatePosition','DisplayAction','mmp','performCounter','ActSeq_Horror_NoiseCreate','_homeY','getItemDamageAmountTextBattleCore','VisuMZ_2_BattleSystemOTB','swing','Skill-%1-%2','_cursorSprite','ActSeq_Movement_WaitForJump','_homeWholeDuration','CheckMapBattleEventValid','BattleLog','isAlive','OffsetY','autoBattleStyle','UNTITLED','findIndex','_homeDuration','Window_BattleLog_performRecovery','BaseTroopIDs','isBusy','_surprise','clamp','updateEffectContainers','Style','escape','finalizeScale','_attackAnimationId','command301','_forcedHomeY','changeTurnOrderByCTB','createActorCommandWindowBattleCore','missile','ATTACK','clearBattleRefreshRequest','silentHomeMove','displayFailure','forceEscapeSprite','_targetGrowY','putActiveBattlerOnTop','battleCameraData','setValue','AutoNotetag','Frame','isAnyoneInjectAnimating','Game_Action_itemEffectAddNormalState','requestDragonbonesAnimation','aliveMembers','canAttackBattleCore','HelpEscape','makeTargetSprites','Parse_Notetags_TraitObjects','Linear','WaitForMovement','Window_BattleLog_performDamage','ActSeq_Inject_AnimationEnd','getAttackMotion','makeEscapeRatio','_hpGaugeSprite','Game_Battler_performMiss','battleAngle','createSeparateDamagePopups','isChanting','missed','displayItemMessage','isDamagePopupRequested','transform','performReflection','ActSeq_DB_DragonbonesMotionAni','attackStatesRate','Variable','notFocusValid','performActionStart','becomeSTBExploited','ShowEnemyGauge','alive\x20friends','clearMotion','SHOW_BUTTON','_targetOffsetX','onEscapeFailure','wait','ShakeFlinch','Sprite_Actor_updateShadow','_regionBattleback1','Scene_Battle_helpWindowRect','cameraDuration','removeBuff','removeDamageSprite','PopupDuration','getFullActionsPTB','_statusType','frameCount','isCancelled','MDF','Post','battlerShadowScaleY','Scene_Battle_onActorCancel','ParseItemNotetags','troop','Scene_Battle_createActorCommandWindow','sleep','Sprite_Actor_update','_executedValue','battleUIOffsetY','portraitFlipHorz','waitForEffect','PostStartActionJS','attackAnimationIdSlot','createActorCommandWindow','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','updateShadow','damageFlat','drawItemStyleIconText','showAnimation','Scene_Battle_startActorCommandSelection','ActionCenteredName','moveToStartPositionBattleCore','_additionalSprites','lineRect','DefaultSoftScaler','PreStartTurnJS','canGuard','FullActions','ActSeq_Mechanics_PtbConvert','setSubject','checkCacheKey','STYPES','pageup','create','ActSeq_Motion_FreezeMotionFrame','PartyCmd','Game_Action_isForOne','ActSeq_Movement_FacePoint','getAttackWeaponAnimationId','removeStatesAuto','EasingType','note','Class-%1-%2','battleback1Name','isNegativeLifeSteal','getItemDamageAmountLabelBattleCore','ParseArmorNotetags','showNormalAnimation','hitRate','Game_Action_itemTargetCandidates','process_VisuMZ_BattleCore_Action_Notetags','SkipPartyCmd','StepDistanceX','lifeSteaItem','isNextSceneBattleTransitionable','getBattlePortraitFilename','addAnimationSpriteToContainer','FlinchDistanceY','Amp','updateBorderSprite','battleCoreTpbMainPhase','growBattler','Width','_displayBattleCoreTransitionErrorMsg','_buttonText','PostStartTurnJS','_logWindow','Scene_Battle_itemWindowRect','Text','ShowMissEvasion','isAnyProjectilePresent','ActSeq_Skew_Reset','setText','Parse_Notetags_Targets','mpHealingFmt','move','BattleManager_processDefeat','setTroopPage','shouldPopupDamage','ActSeq_ChangeAngle','alterChange','SceneManager_push','VisuMZ_2_BattleSystemCTB','Game_Action_itemEffectAddAttackState','callNextMethod','trueRandomTarget','Scene_Battle_startPartyCommandSelection','createMultiTargetWindows','setEnemyWindowMode','toLowerCase','ActSeq_Target_RandTarget','bitmap','_buttonKey','battleStatusSprite','innerHeight','encounterList','SceneManager_isSceneChanging','JS\x20%1START\x20TURN','showHelpWindow','initialize','Strength','BattleManager_startAction','ActSeq_Impact_MotionTrailRemove','VisuMZ_2_DragonbonesUnion','DigitGroupingDamageSprites','setBattleAngle','addSingleSkillCommand','addBattleCoreAutoBattleStartupCommand','Window_BattleLog_displayFailure','Game_Map_setupBattleback','updateHpGaugePosition','createUIContainer','ActSeq_Set_WholeActionSet','targetsForFriends','setSvBattlerSprite','displayHpDamage','commandNameWindowDrawBackground','createEffectActionSet','name','PreRegenerateJS','hasStaticSvBattler','Sprite_Battler_damageOffsetX','updateOnceParallelInterpreters','%1RegenerateJS','VisuMZ_1_ElementStatusCore','ActSeq_Animation_AttackAnimation','ActSeq_BattleLog_WaitForNewLine','changePaintOpacity','updateStateIconSprite','SvWeaponSolo-%1-%2','setHue','_freezeMotionData','ActSeq_Mechanics_Multipliers','CriticalHitRateJS','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','ActSeq_BattleLog_UI','forceMotion','waitForOpacity','StateIconOffsetX','Game_Action_apply','SKILLS','hasSkill','Setting','applyImmortal','scope','removeImmortal','OffsetX','isEscapeCommandEnabled','_angleEasing','getDefeatedEnemies','_padding','performDamage','Game_Interpreter_updateWaitMode','Mute','updateBattlerContainer','addFightCommand','FocusY','ShowAddedBuff','Game_BattlerBase_eraseState','VisuMZ_4_BreakShields','PostDamageAsUserJS','resize','CreateCutinSettings','isBattlerFlipped','isBattleFlipped','_lastAction','isSubjectValidForAnyoneSelect','loadSvEnemy','CTB','maxItems','attackMotions','maxBattleMembers','WaitForProjectile','MotionType','getSpecificBattlerKeyTarget','_animationContainer','_shakeFlinchDuration','ActSeq_Movement_WaitForOpacity','SkillItemMiddleLayout','active','motionSpeed','WaitCount','ActSeq_Movement_HomeMoveBy','useItem','ShowSubstitute','action','Scene_Map_launchBattle','ActSeq_BattleLog_PushBaseLine','setFullActionsPTB','_emptyBitmap','Reveal','VisuMZ_3_VisualCutinEffect','_updateCursorFilterArea','pauseInjectAnimation','loadBitmap','2013768vCodvf','DualWield','processAbort','angleDuration','pagedown','cancelActorInput','_defeatedEnemies','changeWeather','_phase','makeTargets','Game_Map_battleback1Name','AdjustRect','gaugeLineHeight','isFastForward','evade','_currentActor','displayCritical','Sprite_Actor_updateBitmap','Game_Party_removeActor','_lastPluginCommandInterpreter','evalDamageFormulaBattleCore','Window_BattleLog_performMiss','NameOffsetY','selectAllEnemies','svBattlerData','Window_BattleLog_refresh','_damageContainer','Weapon-%1-%2','_appeared','command3011','applyGlobalCommonEventNotetags','skew','addState','isFloating','JSON','getNextDamagePopup','alignBattleCoreDamageSprite','updateJump','isForAliveFriendBattleCore','addOptionsCommand','process_VisuMZ_BattleCore_PreBattleCommonEvent','blt','opacity','registerCommand','_battleCoreBattleStartEvent','ActSeq_Weapon_ClearActiveWeapon','_stateIconSprite','updateSpin','Sprite_Enemy_setHue','parallaxScrollY','hpRate','drawSkillCost','ApplyImmortal','Exploiter','Turns','battleSpriteSkew','onMoveEnd','displayReflectionPlayBack','process_VisuMZ_BattleCore_CommonEventKeys','ActSeq_Horror_Clear','WaitForSpin','actionSplicePoint','Sprite_Gauge_smoothness','WaitComplete','BattleSystemSTB','Window_BattleLog_popBaseLine','ActSeq_Movement_WaitForSpin','removeActor','alive\x20battlers','PreDamageAsTargetJS','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','bottom','Sprite_AnimationMV_updatePosition','backColor','drawActorFace','applyAngleChange','MP_Flat','setBattler','isPlaytest','jsScaleUp','FollowTurn','onSkewEnd','cutinExit','startInput','1:1','refreshStatusWindow','Enemy-%1-%2','VisuMZ_2_BattleSystemSTB','customDamageFormula','gainBravePoints','MAT','applyGlobal','makeSpeed','battleGrow','indexOf','MultiTarget','portraitIndex','1984024SboWoB','messageSpeed','animationShouldMirror','Slot','Game_Action_isForRandom','_jumpMaxHeight','isActing','Game_Action_testApply','updateStateSprite','itemTextAlign','ARRAYSTRUCT','find','drawTextEx','inputtingAction','isDisarmLifeSteal','sortEnemies','svBattlerAnchorX','_motionCount','applyCritical','addNewState','setBattlerFacePoint','ActSeq_Mechanics_ActionEffect','startAttackWeaponAnimation','Sprite_Battleback_adjustPosition','CounterPlayback','ActSeq_Movement_HomeMoveToPoint','allowCollapse','addChildToUiContainer','CalcEscapeRaiseJS','setupBattleback','cameraClamp','removedBuffs','extraHeight','Parse_Notetags_Action','Window_ActorCommand_setup','dimColor2','TimeScale','magicSkills','Targets1','smoothness','NameAttachStateIcon','Elements','makeCommandList','NextTurn','snapForBackground','Sprite_Actor_setBattler','Rate','_growEasing','ActSeq_Movement_HomeReset','Game_Interpreter_command283','bind','StatusWindowSelectableBackHide','updateTargetPosition','commandRemember','ActSeq_Movement_Spin','Window_BattleLog_displayCritical','ShowCurrentState','casting','battleOpacity','_baseLineStack','isTriggered','command283','battlerShadowScaleX','COMBATLOG','currentExt','targetActionSet','validTargets','BattleManager_updatePhase','visible','ceil','1231809BwSuvh','TextFmt','power','ActSeq_Mechanics_StbExtraAction','charged','EVAL','_shadowSprite','collapse','createShadowSprite','tpbActorSwitchConditionsMet','_target','damage','_waitCount','addChildAt','startJump','_dimmerSprite','changeAtbChargeTime','Window_BattleLog_performMagicEvasion','ACTOR_OFFSET_Y','performActionEndMembers','_lastEnemy','itemRect','ActorCmd','damageStyle','checkBattleEnd','XPActorDefaultHeight','statusWindowRectXPStyle','isChangingOpacity','isHidden','isSelected','battlerKey','attackAnimationId1','isOptionsCommandAdded','Game_Action_setSubject','flipVisualCutinHorz','isForOne','getDualWieldTimes','createHelpWindow','Scene_Battle_skillWindowRect','skillItemWindowRectBorderStyle','ActSeq_Horror_NoiseRemove','onHomeMoveEnd','battleUIOffsetX','Window_BattleLog_displayMpDamage','prev\x20target','Game_Actor_setup','alive\x20opponents','Game_Action_setAttack','SmoothImage','sliceMax','AutoBattleMsg','callUpdateHelp','WaitForJump','MIN_SAFE_INTEGER','onSelectAction','moveBattlerHomeToPoint','ShowAddedState','Sprite_Actor_createStateSprite','placeGauge','min','subject','EscapeSuccessJS','options','motionIdle','_back2Sprite','onEnemyCancel','Scene_Battle_onEnemyOk','uiMenuStyle','AGI','addChild','performLifeSteal','removeAnimation','drawItem','battlelog','boxHeight','ActSeq_Mechanics_EnemyEscape','Window_SkillList_maxCols','svActorHorzCells','PreEndTurnJS','ActSeq_Camera_FocusPoint','createBattleFieldBattleCore','updateBattleProcess','SkillItemStandardCols','onAngleEnd','_growWholeDuration','_createEffectsContainer','split','addMeleeReturnActionSet','isDebuffAffected','clearHorrorEffects','alive\x20friends\x20not\x20user','_shake','performAction','ParseActorNotetags','canInput','setWaitMode','isEnemy','isAtbCastingState','updateCallMenu','AlphaFilter','NameAlwaysVisible','_svBattlerData','isForFriend','displayBuffs','_damages','isForOneBattleCore','getNextSubject','attackAnimationId2','actor','setupIconTextPopup','ALL_ENEMIES','getBattlerKeyTargets','Game_Action_clear','Game_Action_isForAll','BattleManager_checkSubstitute','addedDebuffs','ActSeq_Mechanics_SwapWeapon','getStypeIdWithName','autoBattleUseSkills','_deathStateApplied','frontviewSpriteY','GuardFormulaJS','stop','Sprite_Enemy_updateStateSprite','sort','_armorPenetration','LUK','Game_BattlerBase_refresh','createActionSequenceProjectile','updateMotionCount','setActorHome','FlashDuration','VisuMZ_1_MainMenuCore','getAttackMotionSlot','addCommand','_battlerKeyCache','VariableHeal','VarianceFormulaJS','_escapeRatio','ActSeq_Impact_ZoomBlurTargetCenter','item','tpbCommandFight','isCustomBattleScope','canEscape','StartName','makeTargetsBattleCoreJS','WaitCount2','weatherPower','#%1','_checkOn','ElementStatusCore','preparePartyRefresh','setupChild','_actions','StartTurnWait','ALL_ACTORS','_effectsContainer','ActSeq_Angle_Reset','_pattern','Scene_Battle_stop','MAXHP','autoMeleeSingleTargetActionSet','process_VisuMZ_BattleCore_jsFunctions','waitForFloat','_stypeIDs','StatusWindowAttachmentBackOffsetY','svBattlerName','Height','canSingleOrMultipleSelect','atbInterrupt','freezeFrame','uiInputPosition','isSpinning','_reflectionTarget','noSimilarSTypes','filterArea','FlinchDuration','isBattleSys','Game_Action_needsSelection','softDamageCapRate','autoSelectLastSelected','Formula','findTargetSprite','Game_Action_makeDamageValueDisperse','drawBackgroundRect','isGuardWaiting','scale','_borderPortraitTargetX','battleCommands','moveBattlerHomeDistance','Game_Battler_makeSpeed','ActionEndUpdate','autoBattleAtStart','visualCutinPortraitHue','preemptive','actionBattleCoreJS','_baseX','ATK','ShowRemovedBuff','createAttachmentSprites','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','AddOption','Actor','updateCustomActionSequence','status','Scale','alive\x20opponents\x20not\x20target','Game_Action_isForFriend','alterActionCostPTB','MAXMP','BattleCmdList','BTestBypass','animationWait','setupCriticalEffect','Window_BattleLog_performCollapse','attackTimesAdd','origin','isForRandomBattleCore','requestFauxAnimation','setBlendColor','recoverAll','children','helpWindowRectBorderStyle','isCertainHit','battleSpin','updateKeyboardKeys','drawItemImageListStyle','textColor','ActSeq_Horror_TVRemove','isMagical','needsActorInputCancel','TextAlign','TpGaugeOffsetY','setHelpWindowItem','isQueueOptionsMenu','_helpWindow','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','Game_Action_applyGlobal','ActSeq_Camera_Clamp','_iconIndex','parameters','_flashColor','alive\x20battlers\x20not\x20target','terminate','startActorCommandSelection','ActSeq_Animation_ActionAnimation','isMeleeMultiTargetAction','setVisibleUI','regenerateAll','createStateSprite','TpbActiveChangeEnabled','changeCtbChargeTime','_colorType','alterType','ActSeq_Movement_WaitForFloat','Spriteset_Battle_updateActors','partyCommandWindowRectXPStyle','initMembersBattleCore','drawItemImage','HelpSkillType','fight','ShakeFlinchDuration','JS\x20%1END\x20BATTLE','isBattlerGrounded','EFFECT_COMMON_EVENT','<CUSTOM\x20ACTION\x20SEQUENCE>','performMoveToPoint','isCancelLifeSteal','drawItemImagePortraitStyle','_ptbActionCost','ActSeq_Impact_ShockwaveCenterTargets','PostApplyJS','processExtendTroopMembers','current\x20target','AS\x20USER','isTpbMainPhase','pointX','ShowHide','Window_BattleLog_displayActionResults','resetFontSettings','Sprite_Battler_setHome','constructor','all\x20actors','NameOffsetX','ShowPortraits','CriticalHitFlat','forceSelect','Opacity','textAlign','BattleManager_startTurn','DamageFlat','exit','PopupOffsetY','_actionBattlers','selectAll','isAnyoneMoving','drawItemStatusXPStyle','jump','Scene_ItemBase_applyItem','_fauxAnimationSprites','AttackAnimation','_forActor','CheckSkillCommandShowSwitches','destroyDamageSprite','updateWeather','VisuMZ_3_BoostAction','applyGuard','_battler','addImmortal','createEnemyNameContainer','physical','_animationCount','battleCommandIcon','svAnchorX','Game_Troop_expTotal','drawItemBackground','performJump','CommonEventID','_targetHomeX','process_VisuMZ_BattleCore_PluginParams','setItem','isMVAnimation','command301_PreBattleEvent','_shakeFlinchPower','enemy','ActSeq_Impact_Oversaturate','drawTextTopAligned','HITTYPE_CERTAIN','NameLegacy','Spriteset_Battle_createLowerLayer','BattleManager_onEncounter','waitForNewLine','updateStateSpriteBattleCore','invokeAction','lifeStealTrait','PostRegenerateJS','_frontAttachmentSprite','mainSpriteScaleY','_battleCoreForcedElements','WIDTH','sliceMin','ActSeq_Mechanics_WaitForEffect','changeInputWindow','BattleManager_setup','Window_BattleStatus_drawItemImage','Game_Action_isForAliveFriend','stopInjectAnimation','_skewWholeDuration','setBattleCameraTargets','BattleManager_selectNextCommand','Angle','Scene_Battle_startActorSelection','param','damageOffsetX','dying','default','redraw','value','Game_Action_itemHit','extraPositionX','PreApplyAsTargetJS','isSkewing','reverse','hide','_speed','BattleDefeatJS','performMoveToTargets','makeTargetsBattleCore','Game_System_initialize','offsetY','attackStates','isForAnyoneFocusOpponents','ConfigManager_makeData','CheckVisibleSkillNotetags','isETB','flashDuration','shouldHideBattleEndPopups','autoBattle','loop','isPartyTpbInputtable','isGrowing','_skewY','initElementStatusCore','arPenRate','popupDamage','ActSeq_Impact_MotionBlurTarget','addCombatLogCommand','displayStartMessages','CommandWidth','endAnimation','isSkipPartyCommandWindow','_windowLayer','targetBattlerContainerOpacity','enemyNames','pow','_itemWindow','ActSeq_Mechanics_AddState','ANTI_TINT_UI','setHorrorEffectSettings','_skewEasing','jsScaleToFit','<CENTER>%1','_createCursorArea','isClicked','createMultiTargetWindow','_baseTexture','process_VisuMZ_BattleCore_CreateRegExp','Debuffs','call','addLoadListener','performAttack','commandNameWindowDrawText','Game_Interpreter_PluginCommand','worldTransform','updateBitmap','ESCAPE','onJumpEnd','clearRect','StatusWindowSkinHide','Scene_Battle_windowAreaHeight','drawText','requestAnimation','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','startMove','getDamageStyle','_preemptive','setActionState','_skillWindow','Scene_Battle_selectNextCommand','stbGainInstant','weapons','_makeCursorAlpha','updateShakeFlinch','isMagicSkill','_skewDuration','isPreviousSceneBattleTransitionable','skillTypes','loadEnemy','CmdStyle','isForRandom','Game_Battler_regenerateAll','Scene_Battle_onActorOk','skills','coreEngineRepositionEnemies','onActorOk','canBattlerMove','randomInt','save','BattleManager_cancelActorInput','PARTY','portraitFlipVert','battleAnimation','isStatusAffected','filter','ActSeq_Movement_FaceTarget','updateStyleOpacity','usePremadeActionSequence','isDTB','ActSeq_ChangeSkew','displayCounter','BreakShields','performEvasion','%1Event','WaitCount1','_allTargets','isCustomActionSequence','Game_Action_setSkill','ShowWeapon','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','friendsUnit','selectNextActor','hpAffected','updatePosition','ActSeq_Cutin_WaitForEntrance','initBattleCore','ALL\x20SKILLS','GUARD','PreStartBattleJS','onBattleStartOnceParallels','_linkedSprite','_targetSkewX','resetTextColor','compatibilityVisible','ActSeq_Mechanics_DeathBreak','basicGaugesY','battleProjectiles','regenerateAllBattleCore','expTotal','ActSeq_Impact_Negative','hardDamageCap','commandNameWindowCenter','Exploited','createEnemies','_createDamageContainer','ActSeq_Movement_Scale','CreateCommonEventKeys','TpGaugeOffsetX','allBattleMembers','timeScale','setActiveWeaponSlot','isTpbCharged','startShakeFlinch','pointY','ActSeq_Impact_MotionBlurScreen','offsetX','ForceRandom','_animationSprites','displayChangedStates','updateSelectionEffect','battleEnd','isForDeadFriend','animationId','_tempActor','updateVisibility','forceWeaponAnimation','_floatEasing','_targetSkewY','ActSeq_Motion_RefreshMotion','getItemDamageAmountLabelOriginal','addOnceParallelInterpreter','battler','launchBattle','drawItemStatus','_autoBattleWindow','Scene_Battle_logWindowRect','_text','ScaleToFit','makeActionListAutoAttack','deselect','targetObjects','special','Game_BattlerBase_canAttack','_jumpDuration','_onceParallelInterpreters','addDamageSprite','StatusWindowAttachmentFrontOffsetY','Window_Options_statusText','ActSeq_Movement_Jump','ActSeq_Mechanics_AtbGauge','ActSeq_Impact_ColorBreak','debuffAdd','Settings','PostApplyAsUserJS','Enemy','changeCtbCastTime','endBattle','Game_Action_setGuard','linkSprite','mainFontSize','PopupOffsetX','SkillsStatesCore','PopupPosition','onBattleStart','isForAnyone','finishActionSet','adjustPosition_ScaleDown','refreshDimmerBitmap','ReflectPlayback','refreshMotion','repeatTargets','performCastAnimation','battleSys','MessageWait','SvMotionIdleMass-%1-%2','drawSingleSkillCost','updateUiContainerPosition','equips','Sprite_Actor_moveToStartPosition','removeHorrorEffect','_lastRegenFrameCount','addText','anchorX','checkAutoCustomActionSequenceNotetagEffect','softDamageCap','updateHomeMove','priority','clearElementChanges','drawLineText','createCommandVisibleJS','_performActionEnd','Game_Battler_onBattleStart','CmdIconOptions','processVictory','1544390QjUqjt','setBattleSkew','ActSeq_Mechanics_PtbFullHalfAction','weaponTypes','onDatabaseLoaded','All\x20Allies','icon','CommandAddAutoBattle','_subject','setSTBExploited','_cursorArea','font','getBattlePortrait','executeHpDamage','Scene_Map_updateCallMenu','_enemyId','Window_BattleLog_displayCurrentState','ForceDeath','BindCommonEventKeysForGroup','clearBattleCoreData','ActSeq_Mechanics_Immortal','iconHeight','_cancelButton','chant','horzCells','_battleLayoutStyle','mhp','Game_Action_executeDamage','_targets','hasSvBattler','checkTpbInputClose','Scene_Battle_createPartyCommandWindow','adjustPosition_1for1','delay','createDigits','isMoving','AutoBattle','ActionSequence','processRefresh','start','Defeat','Interrupt','cancelLifeSteal','svAnchorY','createHelpWindowBattleCore','Scene_Battle_partyCommandWindowRect','clearOnceParallelInterpreters','clearResult','ActSeq_Impact_MotionTrailCreate','canAddSkillCommand','Scene_Battle_initialize','performAttackSlot','_battleCoreBattleResumeAfter','setupDesaturateImpactFilter','actorId','Scene_Map_initializeAfter','BoostPoints','updatePointAnimations','Game_Troop_setup','_opacityWholeDuration','ActSeq_Mechanics_TextPopup','clearActiveWeaponSlot','WaitForAnimation','setupZoomBlurImpactFilter','Sprite_Battler_initMembers','compareBattlerSprites','isBypassDamageCap','isCTB','VisuMZ_2_BattleSystemPTB','performSTBExploiter','regionId','DistanceX','_commonEventQueue','clearTargetBattlerKey','DamageType%1','code','_angleRevertOnFinish','autoSelect','Scene_Battle_updateStatusWindowPosition','VariableDmg','Scene_Options','addGeneralOptions','destroy','_preBattleCommonEvent','rowSpacing','updateFloat','targetSpritePosition','setupActionSet','processActorCommandCancelTPB','_customDamageFormula','BindCommonEventKeysForObj','ReflectAnimation','isEffecting','Scene_Battle_updateBattleProcess','updateLink','SkillItemBorderCols','battlerName','iconWidth','processEnemyModeTouchBattleCore','currentAction','isAnyoneJumping','ActionCount','commandSymbol','singleSkill','ActSeq_Mechanics_FtbAction','createDamageContainer','_back1Sprite','custom','_tpbNeedsPartyCommand','forActor','alive\x20enemies\x20not\x20target','StyleName','cancelButtonText','VisuMZ_3_ActiveChainSkills','floatBattler','processTouch','replace','isBattleTest','onEncounterBattleCore','ActSeq_Set_SetupAction','applyResultSwitches','VisuMZ_3_ActSeqProjectiles','SkewY','processEscape','stepForward','charging','revertTpbCachedActor','actorCommandAutoBattle','gainCurrentActionsFTB','description','makeDeepCopy','Game_Actor_makeActionList','BattleSystemBTB','setActiveWeaponSet','isForNotUser','Scene_Battle_commandFight','_lastActor','performMagicEvasion','VisuMZ_3_ActSeqImpact','HelpAutoBattle','autoBattleWindowRect','itemLifeStealRate','\x20to\x20%1\x20midbattle.','setupHpGaugeSprite','textWidth','BattleStartEvent','pushBaseLine','StartTurnMsg','iterateBattler','_motionType','Game_Map_battleback2Name','VisuMZ_2_BattleGridSystem','onRegeneratePlayStateAnimation','ActSeq_BattleLog_Clear','_weaponSprite','_inputting','resizeWindowXPStyle','EnemyOffsetX','_visualHpGauge_JustDied','battleCoreResumeLaunchBattle','skillItemWindowRectMiddle','_waitMode','WaitForAngle','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','itemEffectAddNormalState','Enable','setup','selectPreviousCommand','PrioritySortActive','speed','performSubstitute','ParseEnemyNotetags','Name','createAutoBattleWindow','ActSeq_Weapon_SetActiveWeapon','battleJump','_targetFloatHeight','_weather','visualHpGauge','updateForceAction','adjustPosition','globalAlpha','makeActions','ActSeq_Movement_Skew','Scene_Battle_startEnemySelection','refresh','AsUser','updateBattlebackBitmap','PreApply%1JS','addPartyCommand','_item','isSTB','StartTurnShow','displayAddedStates','process_VisuMZ_BattleCore_Notetags','Scene_Map_initialize','_endBattle','optDisplayTp','turnCount','parse','setBattlerFlip','statusWindowRect','WeaponTypeID','StepDistanceY','setupMotion','fontSize','parent','weaponImageId','innerWidth','setSkill','_offsetX','list','StatusWindowAttachmentBackOffsetX','isTurnBased','abs','isSkillItemWindowsMiddle','performCollapse','clearDamagePopup','ActionEffect','makeHpDamageText','_enemyMultiTargetWindow','setupBattlebackBattleCore','onFloatEnd','text\x20target','commandFight','Game_Battler_performActionStart','displayEvasion','disarmHpLifeSteal','applyHardDamageCap','battleInjectAni','performActionMotions','commandAutoBattle','isFTB','isPhysical','isAnyoneSkewing','canAlterActionCostPTB','random','max','setHome','padding','setupBattleCore','isAutoBattle','reduce','isBattleMember','_opacityEasing','waitForJump','updateEffectsContainer','sideview_ui','Window_BattleLog_performActionStart','moveBattlerToPoint','Game_Battler_onBattleEnd','battleLayoutStyle','JS\x20%1END\x20ACTION','callOkHandler','ACTOR_OFFSET_X','itemHeight','isJumping','prepareBorderActor','isBuffAffected','addChildToBack','isPTB','mpDamage','_battlerName','Sprite_Battler_startMove','Window_BattleLog_performEvasion','compareEnemySprite','_shadowScaleY','VisuMZ_2_AggroControlSystem','height','Sprite_Enemy_updateCollapse','setCustomDamageFormula','VisuMZ_4_CombatLog','startBattle','inBattle','clear','Window_BattleLog_update','setHalfActionsPTB','PreStartActionJS','BattleManager_onEscapeSuccess','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','concat','meetsSelectFrontviewActorConditions','_skewX','ActSeq_Target_CurrentIndex','FlinchDistanceX','isConfused','thrust','createKeyJS','moveBattlerDistance','createTroopNote','skillId','isDead','Game_Map_encounterList','BattleLogRectJS','setupOversaturateImpactFilter','_forceAction','WaitForFloat','ParseWeaponNotetags','attack','StyleON','Game_Action_isForOpponent','Window_BattleLog_clear','getBattlePortraitOffsetX','_actorWindow','drawIcon','addAutoBattleCommands','forceAction','_borderPortraitSprite','needsSelectionBattleCore','wholeActionSet','Sprite_Battler_updateMain','guardSkillId','performTpbActiveCheckSwitch','isAnimationShownOnBattlePortrait','_isBattlerFlipped','isSpriteVisible','isNonSubmenuCancel','1144330fFvSPQ','Game_Actor_equips','Game_Action_executeMpDamage','actions','extendTroopMembers','gaugeX','CmdTextAlign','_updateClientArea','ActSeq_Movement_WaitForSkew','GroupDigits','critical','_enemySprites','displayTpDamage','addWindow','hue','WaitForEffect','value1','Game_BattlerBase_isStateResist','SvMotionIdleSolo-%1-%2','updateOpacity','onEnemyOk','partyCommandWindowRectBorderStyle','ChangeOrderBy','ShowAddedDebuff','_activeWeaponSlot','addSkillCommands','not\x20focus','text','Scene_Battle_update','evaded','message1','removeChild','isDying','onActorCancel','MaxLines','displayMpDamage','checkExtendTroopCompatibility','_autoBattle','match','makeData','_skillIDs','battleback2Name','mainSpriteHeight','ConvertActionSequenceTarget','AutoBattleBgType','checkSceneBattleTransitionable','BattleEndEvent','createCancelButton','updateBossCollapse','addAttackCommand','startInjectAnimation','setupTextPopup','jsOneForOne','setCommonEvent','gainTp','MANUAL','isIncludedInEnemyWindow','animationNextDelay','removeAnimationFromContainer','ActionStart','arRedFlat','changeBattlerOpacity','battleMove','result','Sprite_Enemy_createStateIconSprite','_createClientArea','ActSeq_Mechanics_BoostPointsStoreData','_enemyWindow','Game_BattlerBase_initMembers','isActionSelectionValid','changeBattlebacks','ParseClassNotetags','DisablePartyCmd','AutoMeleeSolo','criticalDmgRate','BattleManager_isTpbMainPhase','applySoftDamageCap','DamageStyleList','isVisualHpGaugeDisplayed','updateBorderStyle','ActSeq_Movement_BattleStep','setupMotionBlurImpactFilter','startTpbTurn','glitch','displayReflection','ShuffleArray','getConfigValue','updateAttachmentSprites','isAnyoneChangingOpacity','head','Sprite_SvEnemy','repositionCancelButtonBorderStyle','remove','expRate','EscapeFailureJS','ActSeq_Cutin_WaitForExit','isAnyoneSpinning','setupRgbSplitImpactFilter','isOptionsCommandEnabled','BattleManager_startInput','nameY','attackSkillId','Duration','ActSeq_Motion_MotionType','all\x20enemies','svActor','_enemyID','_tempEquipCheck','waitForMovement','_mainSprite','AllowRandomSpeed','Sprite_Battler_update','pop','updateRefresh','All\x20Enemies','addItemCommand','requestRefresh','statusWindowRectDefaultStyle','isItemCommandEnabled','itemTargetCandidates','spriteId','VisuMZ_3_FrontviewBattleUI','isBorderStylePortraitShown','auto','isSideButtonLayout','magicReflection','CalcEscapeRatioJS','Window_BattleLog_displayMiss','createJS','updateMain','PortraitScaleBorderStyle','autoSelectPriority','pause','cancel','isSideView','disarmLifeSteal','PerformAction','ActSeq_Inject_WaitForInjectAni','_battleField','front\x20center','surprise','isAttack','spinBattler','setHelpWindow','%1StartBattleJS','JS\x20%1APPLY\x20%2','_dragonbonesSpriteContainer','selectNextCommandTpb','negativeLifeSteal','ARRAYSTR','_handlers','itemHit','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','performActionEnd','isBattleRefreshRequested','Window_BattleLog_performAction','pha','getNextSubjectFromPool','victory','portraitFilename','startSpin','performRecovery','toUseBoostPoints','displayBattleCoreTransitionErrorMsg','updatePositionBattleCore','dimColor1','_shadowScaleX','shadow','enemyId','alive\x20battlers\x20not\x20user','contentsOpacity','_growX','members','float','svActorVertCells','ActSeq_BattleLog_AddText','process_VisuMZ_BattleCore_TraitObject_Notetags','changeAtbCastTime','_weaponImageId','stepFlinch','CreateActionSequenceTargets','_methods','Game_Temp_requestAnimation','EnemyOffsetY','logActionList','Buffs','OffsetAdjust','Sprite_Weapon_loadBitmap','_angleWholeDuration','position','effects','_duration','PostApplyAsTargetJS','PreDamageAsUserJS','Scene_Party','setBattleImpactTimeScale','filters','loadWindowskin','createBattleUIOffsetY','bitmapHeight','ActSeq_BattleLog_WaitForBattleLog','PostDamageJS','selectAllActors','battleZoom','setGuard','makeTargetSelectionMoreVisible','ActSeq_Weapon_NextActiveWeapon','ActSeq_Element_Clear','_createCursorSprite','AsTarget','repeats','createContents','skewBattler','JS\x20%1START\x20ACTION','addSkillTypeCommand','addTextToCombatLog','select','EscapeFail','addBuff','_enemyIDs','Game_Action_makeTargets','HitFlat','ActSeq_Mechanics_ActiveChainInputDisable','formula','isRightInputMode','contents','BattleManager_makeActionOrders','_currentAngle','addBattleGridMoveCommand','refreshRequest','PostApply%1JS','dataId','SlotID','isFightCommandEnabled','Game_Battler_forceAction','_tpbSceneChangeCacheActor','ActSeq_Skew_WaitForSkew','startMotion','gradientFillRect','_offsetY','applyVariance','actorCommandSingleSkill','_targetGrowX','open','visibilityState','waitForAnimation','ext','alive\x20enemies\x20not\x20user','updateShadowVisibility','SwitchCritical','trim','ActSeq_Projectile_Picture','updateScale','mainSpriteScaleX','svBattlerShadowVisible','frontview_ui','noise','unshift','isCurrentItemEnabled','onGrowEnd','NameFontSize','_enemy','windowPadding','StatusWindowAttachmentFront','traitObjects','contains','addGuardCommand','clearFreezeMotionForWeapons','Destination','jumpBattler','playOnceParallelInterpreter','getHalfActionsPTB','canUseItemCommand','isFrameVisible','onBattleEnd','Shadow','_multipliers','onDisabledPartyCommandSelection','virtualClick','performShakeFlinch','fittingHeight','isAnimationPlaying','negativeMpLifeSteal','actor%1-portrait','isFriendly','GetActionSequenceSpecialTargetWithFlags','VisuMZ_2_PartySystem','ARRAYJSON','isAnyoneGrowing','apply','isWaiting','damageOffsetY','Game_BattlerBase_canGuard','addBattleCoreAutoBattleStyleCommand','NewPopupBottom','update','BG_TYPE','user','playEnemyDamage','isStateResist','Sprite_Enemy_updateBossCollapse','_flashDuration','isBorderPortraitSpriteVisible','isCommandEnabled','ActSeq_Mechanics_StbExploit','getSkillTypes','MOTIONS','ActSeq_Movement_MoveBy','command236','maxLines','lukEffectRate','Window_BattleLog_performActionEnd','isAffectedByBreakShield','Game_Party_addActor','createPartyCommandWindowBattleCore','NUM','centerFrontViewSprite','BattleCore','updateFlip','jsScaleDown','Game_Battler_startTpbTurn','_lastHpDamage','setFrame','addSingleSkillCommands','equipSlots','format','Game_Enemy_setup','ChargeRate','onStaticEnemyBitmapLoad','Game_Battler_performEvasion','shouldDisperseDamage','numRepeats','startGrow','displayMiss','Game_BattlerBase_meetsUsableItemConditions','walk','Window_PartyCommand_initialize','_regionBattleback2','Scene_Battle_createHelpWindow','isPartyCommandWindowDisabled','addCustomCommands','WindowWidth','BattleManager_inputtingAction','CastMagical','ActSeq_Animation_CastAnimation','applyDamageCaps','windowAreaHeight','Sprite_Enemy_setBattler','alterCost','ActSeq_Movement_Opacity','gainMp','_distortionSprite','drawItemImageXPStyle','WaitForSkew','ShowFacesListStyle','cutinEnter','message2','setCursorRect','map','alive\x20friends\x20not\x20target','missle','\x5cI[%1]%2','getWtypeIdWithName','isAutoBattleCommandEnabled','CalcActionSpeedJS','anchor','_forcedHomeX','_baseY','textSizeEx','attachSpritesToDistortionSprite','refreshBattlerMotions','_selectionEffectCount','toString','parallaxScrollXinvertEnemy','battlerSprites','canMove','ActSeq_Element_NullElements','clearAllVisualCutins','CmdIconFight','StateIconOffsetY','targetsForOpponents','performMiss','turn','makeDamageValue','process_VisuMZ_BattleCore_DamageStyles','setBattleZoom','isForAliveFriend','%1-%2','_cache','mainSpriteWidth','ActSeq_Set_FinishAction','_effectType','displayAction','ActSeq_Movement_FaceDirection','setAttack','setupShockwaveImpactFilter','WEAPON\x20SWAP','show','LifeStealRegExp','TpbGaugeOffsetY','ActSeq_Motion_ClearFreezeFrame','hasBeenDefeatedBefore','undecided','setBattleCameraOffset','AllowCollapse','addDebuff','createPartyCommandWindow','stateMotionIndex','clearForcedGameTroopSettingsBattleCore','registerDefeatedEnemy','displayActionResults','AllActorsText','isCharging','Window_BattleEnemy_hide','583359QOfANs','_flipScaleX','setImmortal','JS\x20%1REGENERATE','checkTpbInputOpen','DEF','needsSelection','updateAttachedSprites','_forcedBattleLayout','toUpperCase','ActSeq_Mechanics_HpMpTp','BattleManager_processAbort','selectNextCommand','setEventCallback','waitCount','GetActionSequenceSpecialTarget','processBattleCoreJS','processPostBattleCommonEvents','_statusWindow','numTargets','checkSubstitute','onOpacityEnd','makeAutoBattleActions','isFlipped','doesPageHaveOnceParallelStart','_list','updateStatusWindowPosition','BattleManager_startBattle','disarmMpLifeSteal','pages','addActor','alive\x20actors\x20not\x20target','HpGaugeOffsetY','width','BattleManager_onEscapeFailure','drawEnemyName','multiTargetWindowRect','setLastBattleSkill','_homeX','PostEndActionJS','applyBattleCoreJS','arRedRate','displayType','Scene_Battle_selectPreviousCommand','2416779QCZclm','Sprite_Actor_setActorHome','dragonbonesData','Scene_Battle_createEnemyWindow','command357','isAtbChargingState','Game_Interpreter_command301','battleFloat','performFlinch','battleSkew','createBattleUIOffsetX','isItem','ENEMY_OFFSET_Y','commandStyleCheck','type','itemEffectAddAttackState','loadPicture','isSceneChanging','Item-%1-%2','selectedBattlers','_backAttachmentSprite','Filename','MotionFrameWait','getHardDamageCap','skill','Sprite_Animation_targetSpritePosition','actionEffect','WaitForScale','Window_BattleActor_processTouch','createTargetsJS','_angleDuration','_growDuration','setLastPluginCommandInterpreter','Game_Battler_onTurnEnd','push','DistanceY','XPActorCommandLines','isForOpponentBattleCore','faceRect','JS\x20%1END\x20TURN','restore','DamageStyles','updateSkew','AggroControlSystem','makeBattleCommand','NameAlwaysHidden','ArPenRate','createBorderStylePortraitSprite','NameAlwaysSelectOnly','_tempBattler','autoMeleeMultiTargetActionSet','HalfActions','testApply','StyleOFF','isShownOnBattlePortrait','updateShadowScale','_motion','iconIndex','_floatDuration','cameraOffsetDuration','shift','endAction','isForOpponent','cancelMpLifeSteal','ActSeq_Mechanics_RemoveState','battleCamera','createLowerLayer','_floatHeight','States','HpGaugeOffsetX','MpGaugeOffsetX','turnOrderChangeOTB','commandName','updateAction','isOTB','MpGaugeOffsetY','getBattlerFromKey','startSkew','ParseStateNotetags','Scene_Battle_start','getSkillIdWithName','counterAttack','BattlebackScale','battleCorePreBattleCommonEvent','_flinched','ARRAYNUM','Game_Action_executeHpDamage','gainFullActionsPTB','battleMembers','iconText','clearWeaponAnimation','setMoveEasingType','canAttack','onTurnEnd','ResetOffset','loadBattleback1','flipVisualCutinVert','SwitchMissEvade','actorCommandEscape','AnchorY','chantStyle','loadSystem','ActSeq_Cutin_AddVisualCutinEffect','freezeMotion','rec','CmdIconEscape','visualCutinPortraitIndex','drawItemStyleIcon','ActSeq_Animation_ShowAnimation','_growY','dead','Intensity','WaitForZoom','ExtraSettings','ScaleY','log','makeActionOrders','ScaleDown','Sprite_Battler_setBattler','updateAngleCalculations','Game_Action_evalDamageFormula','VisuMZ_0_CoreEngine','Spriteset_Battle_createBattleField','AnchorX','loadSvActor','isDuringNonLoopingMotion','DamageRate','PreDamageJS','_enemyWindowMode','commandStyle','_targetOpacity','Skills','ScaleUp','bitmapWidth','setTargetBattlerKey','border','ShowActorGauge','makeActionList','createEnemyWindow','JS\x20BATTLE\x20VICTORY','executeMpDamage','JS\x20%1DAMAGE\x20%2','_targetAngle','_lineHeight','guard','_targetIndex','alphabetic','battleCommandName','Game_BattlerBase_addNewState','command339','deadMembers','anchorY','prototype','createMainSprite','startWeaponAnimation','ActiveTpbOptionsMessage','_actorMultiTargetWindow','adjustWeaponSpriteOffset','ActSeq_Impact_BlueRedInvert','BackColor','ARRAYFUNC','activate','svBattlerAnchorY','%1EndActionJS','WaitForCamera','DefaultSoftCap','boxWidth','splice','VariableID','BattleManager_initMembers','unchanged','showPortraits','createActors','AutoMeleeAoE','EmergeText','isActiveTpb','battleDisplayText','addEscapeCommand','_targetBattlerKey','BTB','ShowRemovedState','damageRate','swapEnemyIDs','findSymbolExt','gainHalfActionsPTB','TextColor','createCommandNameWindow','Window_BattleLog_displayTpDamage','onEncounter','Game_BattlerBase_die','_commonEventKey','nextActiveWeaponSlot','MeleeDistance','checkShowHideBattleNotetags','StatusWindowSkinFilename','AttachStateOffsetY','ActSeq_Mechanics_PtbAlterCost','PrioritySortActors','ActSeq_Zoom_Scale','resizeWindowBorderStyle','okTargetSelectionVisibility','isDeathStateAffected','BattleAI','startHomeMove','createWeather','isTickBased','BattleManager_endAction','statusWindowRectBorderStyle','Immortal','WaitForOpacity','JumpToLabel','eraseState','battleStatusWindowAnimationContainer','HelpOptions','BattleManager_checkBattleEnd','isMeleeSingleTargetAction','right','Window_Options_addGeneralOptions','retreat','cancelTargetSelectionVisibility','ShowMpDmg','extraPositionY','HpGauge','_homeEasing','getBattlerKeyTargetReplacement','ActSeq_Horror_TVCreate','floor','STB','isOnCurrentMap','_immortal','blockWidth','processBorderActor','calcWindowHeight','applyArmorModifiers','VisualCutinEffect','Wave','_indent','placeStateIcon','PostEndTurnJS','FocusX','_branch','gainHp','createDamageSprite','isOpen','string','all\x20targets','StatusWindowAttachmentBack','Scene_Battle_createCancelButton','portraitType','_commandNameWindow','isDisplayEmergedEnemies','Spriteset_Battle_update','parseForcedGameTroopSettingsBattleCore','setBattlerMotionTrailData','createDistortionSprite','refreshActorPortrait','version','getLastPluginCommandInterpreter','_enemies','faceWidth','getTraitSetKeys','_updateFilterArea','OverallFormulaJS','vertCells','isAlwaysHidden','CheckVisibleBattleNotetags','_uiContainer','TargetLocation','setupDamagePopup','makeSuccess','_requestRefresh','canGuardBattleCore','ActSeq_Mechanics_BreakShieldReset','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','VisuMZ_3_SideviewBattleUI','bgType','processOk','getBattlePortraitOffsetY','criticalDmgFlat','isInputting','portrait','ActSeq_Movement_Float','ShowFailure','ArPenFlat','startFloat','ActSeq_Target_NextTarget','stypeId','helpWindowRect','isGuardLifeSteal','MotionIdle','battlerSmoothImage','TP_Rate','BARE\x20HANDS','meetsUsableItemConditions','Mechanics','ArRedFlat','removeOnceParallelInterpreter','ResetFocus','displaySubstitute','isHiddenSkill','Scene_Boot_onDatabaseLoaded','setBattlerBattleCore','updateCancel','checkShowHideSwitchNotetags','Actions','FaceAway','requestMotionRefresh','isTpb','initMembers','Sprite_Damage_createChildSprite','left','evalDamageFormula','JS\x20%1START\x20BATTLE','flashColor','ArRedRate','AutoBattleOK','MotionSpeed','createInnerPortrait','dead\x20battlers','Sprite_StateIcon_updateFrame','_wtypeIDs','createStateIconSprite','onAllActionsEnd','_updateCursorArea','applyItem','DefaultHardCap','createAttachedSprites','Armor-%1-%2','negativeHpLifeSteal','isOpponent','partyCommandWindowRect','okButtonText','guardHpLifeSteal','Scene_Battle_onEnemyCancel','adjustPosition_ScaleUp','disperseDamage','FaceDirection','Window_BattleLog_popupDamage','WaitForExit','requestMotion','isAppeared','ActSeqImpact','time','popBaseLine','getEnemyIdWithName','wtypeId','setBackgroundType','updateCommandNameWindow','updateShadowBattleCore','_actorSprites','startAction','Sprite_Enemy_update','ActSeq_Movement_MoveToTarget','stepBack','isAlwaysVisible','Victory','_svBattlerSprite','portraitHue','getInputButtonString','Pre','updateHelp','loadBattleback2','addedStateObjects','isForAll','getColor','ActSeq_Mechanics_VariablePopup','Sprite_Actor_updateFrame','svShadow','startActorSelection','Window_BattleEnemy_initialize','Window_ActorCommand_initialize','initVisibility','startEnemySelection','setBattlePortrait','callOptions','ActSeq_DB_DragonbonesTimeScale','PopupShiftY','mainSprite','Window_BattleActor_hide','bossCollapse','VisuMZ_3_BattleAI','_animation','RegExp','Actor-%1-%2','currentClass','smooth','clearFreezeMotion','updatePhase','ActSeq_Element_ForceElements','isGuard','QoL','startDamagePopup','sortDamageSprites','parallaxScrollX','displayChangedBuffs','itemEffectRecoverMp','applyData','dead\x20enemies','_damagePopupArray','ActSeq_Animation_AttackAnimation2','CopyCombatLog','CheckVisibleSwitchNotetags','_effectDuration','maxCols','slices','DefeatEvent','_targetHomeY','updateShadowPosition','_totalValue','_spriteset','JS\x20BATTLE\x20DEFEAT','actorCommandCancelTPB','extraPositionScaledY','_actorCommandWindow','battleEffect','createChildSprite','lineHeight','frameDelay','Targets','updateCollapse','_actor','isAnyoneInjectAniPrepping','+%1','adjustFlippedBattlefield','itemLineRect','_cacheTextWidth','ActSeq_Impact_TimeScale','performWeaponAnimation','_frame','_battlerHue','isPreviousScene','Window_BattleLog_pushBaseLine','_lines','Window_BattleActor_show','ShowCritical','Game_Action_numRepeats','_battlePortrait','partyCommandWindowRectDefaultStyle','createHpGaugeSprite','ActSeq_Mechanics_DamagePopup','resetResultSwitches','HP_Flat','isDrain','dead\x20opponents','Scene_Battle_createAllWindows','damageContainer','VisuMZ_2_WeaponSwapSystem','command119','openBattleActorWindow','drawItemStatusListStyle','front\x20base','ActSeq_Element_AddElements','_endingBattle','IconSet','processRandomizedData','updatePadding','Game_Enemy_transform','deathStateId','dead\x20friends','moveToStartPosition','commandEscape','isImmortal','+%1\x20MP'];_0x6498=function(){return _0x56db47;};return _0x6498();}Sprite_HpGauge['prototype']=Object[_0x444cf3(0x1c5)](Sprite_Gauge[_0x444cf3(0x8f4)]),Sprite_HpGauge[_0x444cf3(0x8f4)]['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x444cf3(0x8f4)]['initialize']=function(){const _0x357eb3=_0x444cf3;Sprite_Gauge[_0x357eb3(0x8f4)]['initialize']['call'](this);},Sprite_HpGauge[_0x444cf3(0x8f4)][_0x444cf3(0x697)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x444cf3(0x472)]=function(){const _0x241d36=_0x444cf3;this['bitmap'][_0x241d36(0x667)]();const _0x3a97d0=this[_0x241d36(0xa34)]();!isNaN(_0x3a97d0)&&this['drawGauge']();};function Sprite_EnemyName(){const _0x5d0bef=_0x444cf3;this[_0x5d0bef(0x207)](...arguments);}Sprite_EnemyName[_0x444cf3(0x8f4)]=Object[_0x444cf3(0x1c5)](Sprite_Name[_0x444cf3(0x8f4)]),Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x427)]=Sprite_EnemyName,Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(){const _0x5ea12c=_0x444cf3;Sprite_Name['prototype']['initialize'][_0x5ea12c(0x4a6)](this),this[_0x5ea12c(0x9a2)]();},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x990)]=function(){const _0x54ab8d=_0x444cf3;Sprite_Name[_0x54ab8d(0x8f4)]['initMembers'][_0x54ab8d(0x4a6)](this),this[_0x54ab8d(0x291)]=0x0,this['_linkedSprite']=null,this['anchor']['x']=0.5,this[_0x54ab8d(0x7ff)]['y']=0x0;},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x9a2)]=function(){const _0x10c5fd=_0x444cf3;VisuMZ[_0x10c5fd(0x7cf)][_0x10c5fd(0x52b)]['Enemy'][_0x10c5fd(0x2f0)]&&(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x10c5fd(0x353)](this[_0x10c5fd(0x295)]));},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x8e1)]=function(){const _0x331761=_0x444cf3;return Graphics[_0x331761(0x902)];},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x759)]=function(){const _0x59e7b6=_0x444cf3;return this[_0x59e7b6(0x8eb)]=this[_0x59e7b6(0x8eb)]||Window_Base[_0x59e7b6(0x8f4)][_0x59e7b6(0x9fc)]()||0x24,this[_0x59e7b6(0x8eb)]*0x4;},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x622)]=function(){const _0x11e2d0=_0x444cf3;return VisuMZ[_0x11e2d0(0x7cf)][_0x11e2d0(0x52b)][_0x11e2d0(0x52d)][_0x11e2d0(0x796)]||$gameSystem[_0x11e2d0(0x532)]();},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x531)]=function(_0x48bdd8){const _0x5eb9e1=_0x444cf3;this[_0x5eb9e1(0x4ed)]=_0x48bdd8;},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x7b9)]=function(){const _0x5d94a1=_0x444cf3;Sprite_Name[_0x5d94a1(0x8f4)][_0x5d94a1(0x7b9)][_0x5d94a1(0x4a6)](this),this[_0x5d94a1(0x5b3)](),this[_0x5d94a1(0x4e6)](),this[_0x5d94a1(0x837)](),this[_0x5d94a1(0x6a5)]();},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x472)]=function(){const _0x5c476f=_0x444cf3;this[_0x5c476f(0xa05)]=undefined;const _0x4ec694=this['name'](),_0xbc666=this[_0x5c476f(0x8e1)](),_0x252b60=Window_Base[_0x5c476f(0x8f4)]['lineHeight']();this[_0x5c476f(0xa8a)](),this['bitmap'][_0x5c476f(0x667)](),this['bitmap']['drawText'](_0x4ec694,0x0,0x0,_0xbc666,_0x252b60,_0x5c476f(0xa98));},Sprite_EnemyName['prototype'][_0x444cf3(0x5b3)]=function(){const _0x61e753=_0x444cf3;if(!this[_0x61e753(0x4ed)])return;this[_0x61e753(0x441)]!==this[_0x61e753(0x4ed)][_0x61e753(0x441)]&&this[_0x61e753(0x5fb)](this[_0x61e753(0x4ed)]['_battler']);},Sprite_EnemyName[_0x444cf3(0x8f4)]['updatePosition']=function(){const _0x322901=_0x444cf3;if(!this[_0x322901(0x4ed)])return;this[_0x322901(0x8eb)]=this[_0x322901(0x8eb)]||Window_Base[_0x322901(0x8f4)]['lineHeight'](),this['x']=Math[_0x322901(0xa43)](this[_0x322901(0x4ed)][_0x322901(0x3d2)]),this['y']=Math[_0x322901(0xa43)](this[_0x322901(0x4ed)]['_baseY']-this[_0x322901(0x8eb)]*0.5);const _0x35cad5=VisuMZ[_0x322901(0x7cf)][_0x322901(0x52b)][_0x322901(0x52d)];this['x']+=Math['round'](_0x35cad5[_0x322901(0x429)]||0x0),this['y']+=Math[_0x322901(0xa43)](_0x35cad5[_0x322901(0x27d)]||0x0);},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x837)]=function(){const _0xf2a266=_0x444cf3;this[_0xf2a266(0x224)]();},Sprite_EnemyName['prototype'][_0x444cf3(0x224)]=function(){const _0x122c5e=_0x444cf3;if(!this[_0x122c5e(0x295)])return;this[_0x122c5e(0x441)]!==this[_0x122c5e(0x295)]['_battler']&&this[_0x122c5e(0x295)]['setup'](this['_battler']);const _0x218a7f=this[_0x122c5e(0x5e5)]();this['_lineHeight']=this[_0x122c5e(0x8eb)]||Window_Base[_0x122c5e(0x8f4)]['lineHeight'](),this['_stateIconSprite']['x']=Math['round']((_0x218a7f+ImageManager[_0x122c5e(0x5b6)])/0x2)+0x8,this['_stateIconSprite']['y']=this[_0x122c5e(0x8eb)]/0x2;const _0x2a98d5=VisuMZ[_0x122c5e(0x7cf)][_0x122c5e(0x52b)]['Enemy'];this[_0x122c5e(0x295)]['x']+=_0x2a98d5['AttachStateOffsetX']||0x0,this[_0x122c5e(0x295)]['y']+=_0x2a98d5[_0x122c5e(0x91f)]||0x0;},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x6a5)]=function(){const _0x1fcfe5=_0x444cf3,_0x2b8b65=this[_0x1fcfe5(0x786)]();if(_0x2b8b65&&this['opacity']<0xff)this[_0x1fcfe5(0x291)]+=0x10;else!_0x2b8b65&&this['opacity']>0x0&&(this[_0x1fcfe5(0x291)]-=0x10);},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x786)]=function(){const _0x24f832=_0x444cf3;if(this['isAlwaysHidden']())return![];else{if(!this[_0x24f832(0x441)])return![];else{if(this[_0x24f832(0x441)][_0x24f832(0x678)]())return![];else{if(!this[_0x24f832(0x441)][_0x24f832(0x9b0)]())return![];else{if(this['compatibilityVisible']())return!![];else{if(this[_0x24f832(0x9be)]())return!![];else{if(this[_0x24f832(0x6ca)]())return!![];else{if(this[_0x24f832(0x291)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x964)]=function(){const _0x261c06=_0x444cf3;return VisuMZ[_0x261c06(0x7cf)][_0x261c06(0x52b)][_0x261c06(0x52d)][_0x261c06(0x889)];},Sprite_EnemyName['prototype'][_0x444cf3(0x4f0)]=function(){return![];},Sprite_EnemyName[_0x444cf3(0x8f4)]['isAlwaysVisible']=function(){const _0x1cda84=_0x444cf3;return VisuMZ[_0x1cda84(0x7cf)][_0x1cda84(0x52b)][_0x1cda84(0x52d)][_0x1cda84(0x372)];},Sprite_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x6ca)]=function(){const _0x3ed49b=_0x444cf3;return VisuMZ['BattleCore'][_0x3ed49b(0x52b)][_0x3ed49b(0x52d)][_0x3ed49b(0x88c)]?this[_0x3ed49b(0x441)][_0x3ed49b(0x32b)]():SceneManager[_0x3ed49b(0xa67)][_0x3ed49b(0x6d5)]&&SceneManager[_0x3ed49b(0xa67)]['_enemyWindow'][_0x3ed49b(0x257)]&&SceneManager[_0x3ed49b(0xa67)][_0x3ed49b(0x6d5)]['_enemies'][_0x3ed49b(0xa60)](this[_0x3ed49b(0x441)]);},Sprite_EnemyName[_0x444cf3(0x8f4)]['textWidth']=function(){const _0x4bfb4d=_0x444cf3;if(!this[_0x4bfb4d(0x441)])return 0x0;if(this['_cacheTextWidth'])return this[_0x4bfb4d(0xa05)];const _0x36adb7=this[_0x4bfb4d(0x21a)]();return this[_0x4bfb4d(0xa8a)](),this[_0x4bfb4d(0xa05)]=this[_0x4bfb4d(0x1ff)][_0x4bfb4d(0xa50)](_0x36adb7)||0x1,this[_0x4bfb4d(0xa05)];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x2df)]=Sprite_Battleback['prototype'][_0x444cf3(0x609)],Sprite_Battleback[_0x444cf3(0x8f4)]['adjustPosition']=function(){const _0x10f3f2=_0x444cf3,_0x5ac296=VisuMZ[_0x10f3f2(0x7cf)]['Settings'][_0x10f3f2(0x8ae)];if(!_0x5ac296)return VisuMZ[_0x10f3f2(0x7cf)][_0x10f3f2(0x2df)]['call'](this);const _0x23a64e=String(_0x5ac296['DefaultStyle'])||'MZ';switch(_0x23a64e){case'MZ':VisuMZ[_0x10f3f2(0x7cf)][_0x10f3f2(0x2df)][_0x10f3f2(0x4a6)](this);break;case _0x10f3f2(0x2bb):this[_0x10f3f2(0x575)]();break;case _0x10f3f2(0x51c):this['adjustPosition_ScaleToFit']();break;case _0x10f3f2(0x8d1):this[_0x10f3f2(0x539)]();break;case _0x10f3f2(0x8e0):this[_0x10f3f2(0x9aa)]();break;}},Sprite_Battleback[_0x444cf3(0x8f4)][_0x444cf3(0x575)]=function(){const _0x10d11a=_0x444cf3,_0x40799e=VisuMZ[_0x10d11a(0x7cf)][_0x10d11a(0x52b)][_0x10d11a(0x8ae)];if(_0x40799e&&_0x40799e['jsOneForOne'])return _0x40799e[_0x10d11a(0x6c6)]['call'](this);this['width']=Graphics['width'],this[_0x10d11a(0x661)]=Graphics[_0x10d11a(0x661)];const _0x18b6bc=0x1;this[_0x10d11a(0x3c8)]['x']=_0x18b6bc,this[_0x10d11a(0x3c8)]['y']=_0x18b6bc,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x444cf3(0x8f4)]['adjustPosition_ScaleToFit']=function(){const _0x1b39dd=_0x444cf3,_0x17959a=VisuMZ[_0x1b39dd(0x7cf)][_0x1b39dd(0x52b)][_0x1b39dd(0x8ae)];if(_0x17959a&&_0x17959a['jsScaleToFit'])return _0x17959a[_0x1b39dd(0x49e)]['call'](this);this[_0x1b39dd(0x851)]=Graphics[_0x1b39dd(0x851)],this['height']=Graphics[_0x1b39dd(0x661)];const _0x21ccc6=this[_0x1b39dd(0x851)]/this[_0x1b39dd(0x1ff)][_0x1b39dd(0x851)],_0x11c97d=this[_0x1b39dd(0x661)]/this[_0x1b39dd(0x1ff)][_0x1b39dd(0x661)],_0x3a7ab5=Math['max'](_0x21ccc6,_0x11c97d);this[_0x1b39dd(0x3c8)]['x']=_0x3a7ab5,this['scale']['y']=_0x3a7ab5,this['x']=(Graphics[_0x1b39dd(0x851)]-this[_0x1b39dd(0x851)])/0x2,this['y']=Graphics[_0x1b39dd(0x661)]-this['height'];},Sprite_Battleback['prototype'][_0x444cf3(0x539)]=function(){const _0x2a9649=_0x444cf3,_0x8eebcb=VisuMZ[_0x2a9649(0x7cf)]['Settings'][_0x2a9649(0x8ae)];if(_0x8eebcb&&_0x8eebcb['jsScaleDown'])return _0x8eebcb[_0x2a9649(0x7d1)][_0x2a9649(0x4a6)](this);this[_0x2a9649(0x851)]=Graphics[_0x2a9649(0x851)],this[_0x2a9649(0x661)]=Graphics[_0x2a9649(0x661)];const _0x2564ca=Math[_0x2a9649(0x349)](0x1,this[_0x2a9649(0x851)]/this[_0x2a9649(0x1ff)][_0x2a9649(0x851)]),_0x3ddc51=Math[_0x2a9649(0x349)](0x1,this[_0x2a9649(0x661)]/this[_0x2a9649(0x1ff)][_0x2a9649(0x661)]),_0x50d7ab=Math[_0x2a9649(0x642)](_0x2564ca,_0x3ddc51);this[_0x2a9649(0x3c8)]['x']=_0x50d7ab,this[_0x2a9649(0x3c8)]['y']=_0x50d7ab,this['x']=(Graphics[_0x2a9649(0x851)]-this[_0x2a9649(0x851)])/0x2,this['y']=Graphics[_0x2a9649(0x661)]-this[_0x2a9649(0x661)];},Sprite_Battleback[_0x444cf3(0x8f4)][_0x444cf3(0x9aa)]=function(){const _0x54c7b4=_0x444cf3,_0x422a47=VisuMZ[_0x54c7b4(0x7cf)][_0x54c7b4(0x52b)][_0x54c7b4(0x8ae)];if(_0x422a47&&_0x422a47['jsScaleUp'])return _0x422a47[_0x54c7b4(0x2b6)][_0x54c7b4(0x4a6)](this);this['width']=Graphics[_0x54c7b4(0x851)],this[_0x54c7b4(0x661)]=Graphics[_0x54c7b4(0x661)];const _0x5dac2f=Math[_0x54c7b4(0x642)](0x1,this[_0x54c7b4(0x851)]/this['bitmap'][_0x54c7b4(0x851)]),_0x179dd4=Math[_0x54c7b4(0x642)](0x1,this[_0x54c7b4(0x661)]/this[_0x54c7b4(0x1ff)][_0x54c7b4(0x661)]),_0x47877c=Math[_0x54c7b4(0x642)](_0x5dac2f,_0x179dd4);this['scale']['x']=_0x47877c,this['scale']['y']=_0x47877c,this['x']=(Graphics[_0x54c7b4(0x851)]-this[_0x54c7b4(0x851)])/0x2,this['y']=Graphics[_0x54c7b4(0x661)]-this['height'];},Spriteset_Battle[_0x444cf3(0x49b)]=![],Spriteset_Battle['prototype'][_0x444cf3(0x847)]=function(){const _0x1f2f02=_0x444cf3;if(!$gameSystem[_0x1f2f02(0x718)]())return![];return![];},Spriteset_Battle[_0x444cf3(0x8f4)]['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x6cb)]=function(){return 0x0;},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x457)]=Spriteset_Battle['prototype']['createLowerLayer'],Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x89e)]=function(){const _0x4d1fed=_0x444cf3;VisuMZ[_0x4d1fed(0x7cf)][_0x4d1fed(0x457)][_0x4d1fed(0x4a6)](this),this[_0x4d1fed(0x928)](),this['createEnemyNames']();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x957)]=Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x7b9)],Spriteset_Battle[_0x444cf3(0x8f4)]['update']=function(){const _0x5284e8=_0x444cf3;VisuMZ['BattleCore'][_0x5284e8(0x957)][_0x5284e8(0x4a6)](this),this['updateBattlerContainer'](),this['updateUiContainerPosition'](),this[_0x5284e8(0x43e)]();},Spriteset_Battle['prototype'][_0x444cf3(0x928)]=function(){const _0x2627cd=_0x444cf3;this[_0x2627cd(0x606)]=new Weather(),this[_0x2627cd(0x71c)][_0x2627cd(0x353)](this['_weather']);},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x43e)]=function(){const _0x19afb6=_0x444cf3;this[_0x19afb6(0x606)][_0x19afb6(0x86a)]=$gameScreen['weatherType'](),this[_0x19afb6(0x606)][_0x19afb6(0x310)]=$gameScreen[_0x19afb6(0x3a1)]();},Game_Interpreter[_0x444cf3(0x8f4)][_0x444cf3(0x7c6)]=function(_0x52c4b1){const _0x3e1855=_0x444cf3;$gameScreen[_0x3e1855(0x26e)](_0x52c4b1[0x0],_0x52c4b1[0x1],_0x52c4b1[0x2]);if(_0x52c4b1[0x3])this['wait'](_0x52c4b1[0x2]);return!![];},VisuMZ[_0x444cf3(0x7cf)]['Game_Interpreter_command283']=Game_Interpreter[_0x444cf3(0x8f4)][_0x444cf3(0x305)],Game_Interpreter[_0x444cf3(0x8f4)][_0x444cf3(0x305)]=function(_0x4ea4d2){const _0x3f9213=_0x444cf3;return SceneManager[_0x3f9213(0xa7a)]()?(SceneManager['_scene'][_0x3f9213(0x9f5)][_0x3f9213(0x6d8)](_0x4ea4d2[0x0],_0x4ea4d2[0x1]),!![]):VisuMZ[_0x3f9213(0x7cf)][_0x3f9213(0x2f9)][_0x3f9213(0x4a6)](this,_0x4ea4d2);},Spriteset_Battle['prototype'][_0x444cf3(0x610)]=function(_0x25a285,_0x2b971c){const _0x4a87b8=_0x444cf3;_0x25a285[_0x4a87b8(0x1ff)]=_0x2b971c;},Spriteset_Battle['prototype'][_0x444cf3(0x6d8)]=function(_0x606465,_0xe0199e){const _0x552c09=_0x444cf3;_0x606465=_0x606465||'',_0xe0199e=_0xe0199e||'';_0x606465===''&&_0xe0199e===''&&(_0x606465=this[_0x552c09(0x5bf)][_0x552c09(0x1cf)](),_0xe0199e=this[_0x552c09(0x34e)][_0x552c09(0x6bb)]());const _0x308d39=ImageManager[_0x552c09(0x8bb)](_0x606465),_0x252ef6=ImageManager[_0x552c09(0x9c5)](_0xe0199e);_0x308d39['addLoadListener'](this[_0x552c09(0xa58)][_0x552c09(0x2fa)](this,this[_0x552c09(0x5bf)],this['_back2Sprite'],_0x308d39,_0x252ef6));},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0xa58)]=function(_0x5f58fb,_0x5eb9ef,_0x829e58,_0x10628b){const _0x118d5a=_0x444cf3;_0x10628b[_0x118d5a(0x4a7)](this[_0x118d5a(0xa39)]['bind'](this,_0x5f58fb,_0x5eb9ef,_0x829e58,_0x10628b));},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0xa39)]=function(_0x5a8499,_0x34ff87,_0x31cff1,_0x20381b){const _0x5eaa31=_0x444cf3;_0x5a8499['bitmap']=_0x31cff1,_0x34ff87[_0x5eaa31(0x1ff)]=_0x20381b,_0x5a8499[_0x5eaa31(0x609)](),_0x34ff87['adjustPosition']();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x8d6)]=Spriteset_Battle['prototype']['createBattleField'],Spriteset_Battle[_0x444cf3(0x8f4)]['createBattleField']=function(){const _0x4b50d6=_0x444cf3;VisuMZ['BattleCore']['Spriteset_Battle_createBattleField'][_0x4b50d6(0x4a6)](this),this[_0x4b50d6(0x35e)]();},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x35e)]=function(){const _0x71424e=_0x444cf3;this['createBattleFieldContainer'](),this[_0x71424e(0x213)](),this[_0x71424e(0xa8c)](),this[_0x71424e(0x5be)](),this[_0x71424e(0xa03)]();},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0xab7)]=function(){const _0x4fd146=_0x444cf3;this[_0x4fd146(0xa7b)]=new Sprite(),this['_battleField'][_0x4fd146(0x353)](this['_battlerContainer']);},Spriteset_Battle['prototype'][_0x444cf3(0xa8c)]=function(){const _0x4bb356=_0x444cf3;this[_0x4bb356(0x253)]=new Sprite(),Spriteset_Battle[_0x4bb356(0x49b)]?this['addChild'](this[_0x4bb356(0x253)]):this[_0x4bb356(0x71c)][_0x4bb356(0x353)](this['_animationContainer']);},Spriteset_Battle['prototype'][_0x444cf3(0x5be)]=function(){const _0x1521f5=_0x444cf3;this[_0x1521f5(0x281)]=new Sprite(),this[_0x1521f5(0x281)]['x']=this[_0x1521f5(0x71c)]['x'],this[_0x1521f5(0x281)]['y']=this[_0x1521f5(0x71c)]['y'],this['addChild'](this[_0x1521f5(0x281)]);},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0xa03)]=function(){const _0x4df84f=_0x444cf3;if(!this['isFlipped']())return;this[_0x4df84f(0xa7b)][_0x4df84f(0x3c8)]['x']=-0x1,this[_0x4df84f(0xa7b)]['x']=this['_battleField'][_0x4df84f(0x851)],this[_0x4df84f(0x966)][_0x4df84f(0x3c8)]['x']=-0x1,this[_0x4df84f(0x966)]['x']=this[_0x4df84f(0x71c)]['width'],this[_0x4df84f(0x253)]['scale']['x']=-0x1,this[_0x4df84f(0x253)]['x']=this['_battleField'][_0x4df84f(0x851)],this[_0x4df84f(0x281)][_0x4df84f(0x3c8)]['x']=-0x1,this[_0x4df84f(0x281)]['x']=this[_0x4df84f(0x71c)]['x']+this[_0x4df84f(0x71c)][_0x4df84f(0x851)];},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x4fa)]=function(){const _0x32313c=_0x444cf3;Imported[_0x32313c(0x8d5)]&&this[_0x32313c(0x4c9)]()&&this['repositionEnemiesByResolution']();const _0x4e5a03=$gameTroop[_0x32313c(0x73e)](),_0x5192dd=[];for(const _0x29d080 of _0x4e5a03){_0x5192dd['push'](new Sprite_Enemy(_0x29d080));}_0x5192dd[_0x32313c(0x38a)](this[_0x32313c(0x65e)]['bind'](this));for(const _0x45fea3 of _0x5192dd){this[_0x32313c(0xa7b)][_0x32313c(0x353)](_0x45fea3);}this[_0x32313c(0x69d)]=_0x5192dd;},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x908)]=function(){const _0x17a79d=_0x444cf3;this[_0x17a79d(0x9b9)]=[];for(let _0x2b9a99=0x0;_0x2b9a99<$gameParty[_0x17a79d(0x24f)]();_0x2b9a99++){const _0x5e17ed=$gameParty['battleMembers']()[_0x2b9a99],_0x41e517=new Sprite_Actor();_0x41e517[_0x17a79d(0x1b9)](_0x5e17ed),_0x41e517[_0x17a79d(0x2b4)](_0x5e17ed),_0x41e517[_0x17a79d(0x7b9)](),this['_actorSprites'][_0x17a79d(0x87e)](_0x41e517),this[_0x17a79d(0xa7b)][_0x17a79d(0x353)](_0x41e517);}},Spriteset_Battle['prototype']['createAnimationSprite']=function(_0x2d5eb3,_0x1c6c77,_0x41ddf8,_0x57e2c9){const _0x47724e=_0x444cf3,_0x4fc382=this[_0x47724e(0x44f)](_0x1c6c77),_0xcf075f=new(_0x4fc382?Sprite_AnimationMV:Sprite_Animation)(),_0x4cf8b0=this[_0x47724e(0xaf8)](_0x2d5eb3);this[_0x47724e(0x2ca)](_0x2d5eb3[0x0])&&(_0x41ddf8=!_0x41ddf8),_0xcf075f['targetObjects']=_0x2d5eb3,_0xcf075f['setup'](_0x4cf8b0,_0x1c6c77,_0x41ddf8,_0x57e2c9),this[_0x47724e(0x1dc)](_0xcf075f);},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x1dc)]=function(_0x4028ba){const _0x3b68cc=_0x444cf3;this[_0x3b68cc(0x68e)](_0x4028ba)?(this[_0x3b68cc(0x930)]()[_0x3b68cc(0x353)](_0x4028ba),_0x4028ba[_0x3b68cc(0x201)]=!![]):(this[_0x3b68cc(0x253)][_0x3b68cc(0x353)](_0x4028ba),Spriteset_Battle[_0x3b68cc(0x49b)]&&(this[_0x3b68cc(0x253)]['x']=this[_0x3b68cc(0x3aa)]['x'],this[_0x3b68cc(0x253)]['y']=this[_0x3b68cc(0x3aa)]['y'])),this[_0x3b68cc(0x508)][_0x3b68cc(0x87e)](_0x4028ba);},Spriteset_Battle['prototype']['isAnimationShownOnBattlePortrait']=function(_0x4d3159){const _0x4302b7=_0x444cf3;if(!_0x4d3159)return![];if(!_0x4d3159[_0x4302b7(0x9d9)])return![];if(!_0x4d3159[_0x4302b7(0x51f)][0x0])return![];if(_0x4d3159[_0x4302b7(0x51f)][0x0]['isActor']&&!_0x4d3159[_0x4302b7(0x51f)][0x0]['isActor']())return![];if($gameSystem[_0x4302b7(0x718)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x4d3159['constructor']===Sprite_Animation){if(_0x4d3159[_0x4302b7(0x9d9)][_0x4302b7(0x85a)]!==0x0)return![];}else{if(_0x4d3159[_0x4302b7(0x427)]===Sprite_AnimationMV){if(_0x4d3159[_0x4302b7(0x9d9)][_0x4302b7(0x74f)]===0x3)return![];}}return!![];const _0x28a8dc=Window_BattleStatus['prototype'][_0x4302b7(0x650)]();return['xp',_0x4302b7(0x974)][_0x4302b7(0x79b)](_0x28a8dc);},Spriteset_Battle[_0x444cf3(0x8f4)]['battleStatusWindowAnimationContainer']=function(){const _0x257963=_0x444cf3;if(!SceneManager['_scene'])return null;if(!SceneManager[_0x257963(0xa67)][_0x257963(0x842)])return null;if(!SceneManager['_scene'][_0x257963(0x842)]['_effectsContainer'])return null;return SceneManager[_0x257963(0xa67)][_0x257963(0x842)][_0x257963(0x3aa)];},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x355)]=function(_0x460698){const _0x24ee1e=_0x444cf3;this[_0x24ee1e(0x6cc)](_0x460698);for(const _0x7359ac of _0x460698[_0x24ee1e(0x51f)]){_0x7359ac[_0x24ee1e(0x493)]&&_0x7359ac[_0x24ee1e(0x493)]();}_0x460698[_0x24ee1e(0x5a7)]();},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x6cc)]=function(_0x26d3ab){const _0x1b5d30=_0x444cf3;this[_0x1b5d30(0x68e)](_0x26d3ab)?this[_0x1b5d30(0x930)]()[_0x1b5d30(0x6b1)](_0x26d3ab):this[_0x1b5d30(0x253)][_0x1b5d30(0x6b1)](_0x26d3ab);this[_0x1b5d30(0x3aa)][_0x1b5d30(0x6b1)](_0x26d3ab),this[_0x1b5d30(0x253)]['removeChild'](_0x26d3ab),this[_0x1b5d30(0x508)]['remove'](_0x26d3ab);if(this[_0x1b5d30(0x439)])this[_0x1b5d30(0x439)][_0x1b5d30(0x6ee)](_0x26d3ab);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x40d)]=Spriteset_Battle[_0x444cf3(0x8f4)]['updateActors'],Spriteset_Battle[_0x444cf3(0x8f4)]['updateActors']=function(){const _0x4a4586=_0x444cf3;VisuMZ[_0x4a4586(0x7cf)][_0x4a4586(0x40d)][_0x4a4586(0x4a6)](this),this[_0x4a4586(0x23e)]();},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x23e)]=function(){const _0x2bd6d1=_0x444cf3;this['_battlerContainer'][_0x2bd6d1(0x3eb)][_0x2bd6d1(0x38a)](this[_0x2bd6d1(0x596)][_0x2bd6d1(0x2fa)](this)),this[_0x2bd6d1(0xaed)]();if(!this[_0x2bd6d1(0xa7b)])return;this[_0x2bd6d1(0xa7b)][_0x2bd6d1(0x291)]=this['targetBattlerContainerOpacity']();},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x596)]=function(_0x4ac431,_0x4cd6ad){const _0x521ad4=_0x444cf3;if(VisuMZ['BattleCore']['Settings'][_0x521ad4(0x3d8)][_0x521ad4(0x921)]){if(_0x4ac431['_battler']&&_0x4cd6ad[_0x521ad4(0x441)]){if(_0x4ac431[_0x521ad4(0x441)][_0x521ad4(0xa93)]()&&_0x4cd6ad[_0x521ad4(0x441)][_0x521ad4(0x36e)]())return 0x1;else{if(_0x4cd6ad[_0x521ad4(0x441)][_0x521ad4(0xa93)]()&&_0x4ac431[_0x521ad4(0x441)][_0x521ad4(0x36e)]())return-0x1;}}}return _0x4ac431[_0x521ad4(0x801)]!==_0x4cd6ad[_0x521ad4(0x801)]?_0x4ac431[_0x521ad4(0x801)]-_0x4cd6ad[_0x521ad4(0x801)]:_0x4cd6ad[_0x521ad4(0x70a)]-_0x4ac431[_0x521ad4(0x70a)];},Spriteset_Battle['prototype']['putActiveBattlerOnTop']=function(){const _0xd030e0=_0x444cf3;if(!VisuMZ[_0xd030e0(0x7cf)]['Settings'][_0xd030e0(0x3d8)][_0xd030e0(0x5fd)])return;const _0x17eb8e=BattleManager[_0xd030e0(0x55d)];if(_0x17eb8e){if(_0x17eb8e[_0xd030e0(0xa93)]()&&!$gameSystem[_0xd030e0(0x718)]())return;const _0x2a9edc=_0x17eb8e[_0xd030e0(0x516)]();if(_0x2a9edc&&_0x17eb8e[_0xd030e0(0xa93)]())this[_0xd030e0(0xa7b)]['addChild'](_0x2a9edc);}},Spriteset_Battle['prototype'][_0x444cf3(0x5d0)]=function(){const _0x5a3214=_0x444cf3;for(const _0x3411fc of $gameParty[_0x5a3214(0xaf5)]()){if(!_0x3411fc)continue;if(!_0x3411fc['battler']())continue;_0x3411fc[_0x5a3214(0x516)]()[_0x5a3214(0xaeb)]=!![],_0x3411fc[_0x5a3214(0x516)]()['retreat']();}},Spriteset_Battle['prototype'][_0x444cf3(0x213)]=function(){const _0x1db2ce=_0x444cf3;this['_uiContainer']=new Sprite(),Spriteset_Battle[_0x1db2ce(0x49b)]?this['addChild'](this[_0x1db2ce(0x966)]):this[_0x1db2ce(0x71c)]['addChild'](this['_uiContainer']),SceneManager['_scene'][_0x1db2ce(0x966)]=this[_0x1db2ce(0x966)];},Spriteset_Battle[_0x444cf3(0x8f4)]['createEnemyNames']=function(){const _0xedc85a=_0x444cf3;if(VisuMZ[_0xedc85a(0x7cf)]['Settings'][_0xedc85a(0x52d)]['NameLegacy'])return;this[_0xedc85a(0xa2b)]=new Sprite(),BattleManager[_0xedc85a(0x2e3)](this[_0xedc85a(0xa2b)]);for(const _0x1f47d4 of this[_0xedc85a(0x69d)]){const _0x1fa346=new Sprite_EnemyName();this['_enemyNameContainer']['addChild'](_0x1fa346),_0x1fa346[_0xedc85a(0x531)](_0x1f47d4);}},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x543)]=function(){const _0x4d2b73=_0x444cf3;if(!this[_0x4d2b73(0x281)])return;if(!this[_0x4d2b73(0x966)])return;const _0x481177=Spriteset_Battle['ANTI_TINT_UI']?this[_0x4d2b73(0x281)]['x']:0x0,_0x454d7d=Spriteset_Battle[_0x4d2b73(0x49b)]?this[_0x4d2b73(0x281)]['y']:0x0,_0x2f6a36=Imported[_0x4d2b73(0xa74)]?this[_0x4d2b73(0x71c)]['x']:0x0,_0x1550c2=Imported[_0x4d2b73(0xa74)]?this['_battleField']['y']:0x0;this[_0x4d2b73(0x966)]['x']=_0x481177+_0x2f6a36,this[_0x4d2b73(0x966)]['y']=_0x454d7d+_0x1550c2;},BattleManager['addChildToUiContainer']=function(_0x44e41c){const _0x14e644=_0x444cf3;if(!SceneManager[_0x14e644(0xa67)]['_uiContainer'])return;SceneManager[_0x14e644(0xa67)]['_uiContainer'][_0x14e644(0x353)](_0x44e41c);},Spriteset_Battle['prototype'][_0x444cf3(0x496)]=function(){return 0xff;},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0xada)]=function(){return![];},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0xa6c)]=function(){const _0x2154d8=_0x444cf3;return this[_0x2154d8(0x808)]()[_0x2154d8(0xab5)](_0x54b4c4=>_0x54b4c4[_0x2154d8(0x288)]());},Spriteset_Battle['prototype'][_0x444cf3(0x5b9)]=function(){const _0x267155=_0x444cf3;return this[_0x267155(0x808)]()[_0x267155(0xab5)](_0x1c08a4=>_0x1c08a4[_0x267155(0x655)]());},Spriteset_Battle['prototype']['isAnyoneGrowing']=function(){const _0x1978b7=_0x444cf3;return this[_0x1978b7(0x808)]()[_0x1978b7(0xab5)](_0x7e1014=>_0x7e1014['isGrowing']());},Spriteset_Battle[_0x444cf3(0x8f4)][_0x444cf3(0x63f)]=function(){const _0x1f65a8=_0x444cf3;return this[_0x1f65a8(0x808)]()[_0x1f65a8(0xab5)](_0x549bcb=>_0x549bcb[_0x1f65a8(0x477)]());},Spriteset_Battle['prototype'][_0x444cf3(0x6f2)]=function(){const _0x159a92=_0x444cf3;return this[_0x159a92(0x808)]()[_0x159a92(0xab5)](_0x1bf5a3=>_0x1bf5a3['isSpinning']());},Spriteset_Battle['prototype'][_0x444cf3(0x6ea)]=function(){const _0x52316b=_0x444cf3;return this[_0x52316b(0x808)]()[_0x52316b(0xab5)](_0x2f060b=>_0x2f060b[_0x52316b(0x329)]());},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xaa9)]=Window_ItemList['prototype'][_0x444cf3(0x9ef)],Window_ItemList['prototype']['maxCols']=function(){const _0x72f71=_0x444cf3;return SceneManager[_0x72f71(0xa7a)]()?SceneManager[_0x72f71(0xa67)][_0x72f71(0x650)]()==='border'?VisuMZ[_0x72f71(0x7cf)][_0x72f71(0x52b)][_0x72f71(0xa4b)]['SkillItemBorderCols']:VisuMZ['BattleCore'][_0x72f71(0x52b)][_0x72f71(0xa4b)][_0x72f71(0x360)]:VisuMZ[_0x72f71(0x7cf)]['Window_ItemList_maxCols'][_0x72f71(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x35a)]=Window_SkillList[_0x444cf3(0x8f4)][_0x444cf3(0x9ef)],Window_SkillList[_0x444cf3(0x8f4)][_0x444cf3(0x9ef)]=function(){const _0x1726ed=_0x444cf3;return SceneManager[_0x1726ed(0xa7a)]()?SceneManager[_0x1726ed(0xa67)][_0x1726ed(0x650)]()===_0x1726ed(0x8e3)?VisuMZ[_0x1726ed(0x7cf)][_0x1726ed(0x52b)][_0x1726ed(0xa4b)][_0x1726ed(0x5b4)]:VisuMZ['BattleCore'][_0x1726ed(0x52b)][_0x1726ed(0xa4b)][_0x1726ed(0x360)]:VisuMZ[_0x1726ed(0x7cf)][_0x1726ed(0x35a)][_0x1726ed(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)]['Window_Options_addGeneralOptions']=Window_Options[_0x444cf3(0x8f4)]['addGeneralOptions'],Window_Options[_0x444cf3(0x8f4)][_0x444cf3(0x5a6)]=function(){const _0x5c9574=_0x444cf3;VisuMZ[_0x5c9574(0x7cf)][_0x5c9574(0x935)]['call'](this),this['addAutoBattleCommands'](),this['addShowHpGaugeCommand']();},Window_Options['prototype'][_0x444cf3(0x686)]=function(){const _0x244406=_0x444cf3;VisuMZ[_0x244406(0x7cf)][_0x244406(0x52b)]['AutoBattle'][_0x244406(0x3d7)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x244406(0x7b7)]());},Window_Options[_0x444cf3(0x8f4)]['addShowHpGaugeCommand']=function(){const _0x429db7=_0x444cf3;if(!VisuMZ[_0x429db7(0x7cf)]['Settings'][_0x429db7(0x93a)]['AddHpGaugeOption'])return;const _0x54286b=TextManager[_0x429db7(0x607)],_0x598353=_0x429db7(0x607);this['addCommand'](_0x54286b,_0x598353);},Window_Options['prototype'][_0x444cf3(0x20f)]=function(){const _0x294b0b=_0x444cf3,_0x235cb3=TextManager[_0x294b0b(0xa5c)],_0x137f37='autoBattleAtStart';this[_0x294b0b(0x394)](_0x235cb3,_0x137f37);},Window_Options[_0x444cf3(0x8f4)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0xbeff8a=_0x444cf3,_0x51def8=TextManager['autoBattleStyle'],_0x2f587e=_0xbeff8a(0x384);this['addCommand'](_0x51def8,_0x2f587e);},VisuMZ['BattleCore'][_0x444cf3(0x526)]=Window_Options[_0x444cf3(0x8f4)]['statusText'],Window_Options[_0x444cf3(0x8f4)]['statusText']=function(_0x12928f){const _0x1f3343=_0x444cf3,_0x127ba0=this[_0x1f3343(0x5bb)](_0x12928f);return _0x127ba0===_0x1f3343(0x384)?this['statusTextAutoBattleStyle']():VisuMZ[_0x1f3343(0x7cf)][_0x1f3343(0x526)][_0x1f3343(0x4a6)](this,_0x12928f);},Window_Options[_0x444cf3(0x8f4)]['statusTextAutoBattleStyle']=function(){const _0x3bca56=_0x444cf3,_0x499956=VisuMZ[_0x3bca56(0x7cf)][_0x3bca56(0x52b)][_0x3bca56(0x579)],_0x1ac6e4=this[_0x3bca56(0x6e8)]('autoBattleUseSkills');return _0x1ac6e4?_0x499956[_0x3bca56(0x680)]:_0x499956[_0x3bca56(0x891)];},Window_ShopStatus[_0x444cf3(0x8f4)][_0x444cf3(0x1d1)]=function(){const _0xd7882b=_0x444cf3,_0x38d251=DataManager[_0xd7882b(0x4b6)](this[_0xd7882b(0x613)]),_0xf0f418=VisuMZ[_0xd7882b(0x885)][_0x38d251];if(!_0xf0f418)return this[_0xd7882b(0x514)]();const _0xdbc8af=_0xd7882b(0x59f)[_0xd7882b(0x7d7)](this['_item'][_0xd7882b(0x319)][_0xd7882b(0x86a)]),_0x4c8efd=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0xd7882b(0x613)]['damage'][_0xd7882b(0x86a)]];return _0xf0f418[_0xdbc8af][_0xd7882b(0x7d7)](_0x4c8efd);},Window_ShopStatus[_0x444cf3(0x8f4)][_0x444cf3(0xac9)]=function(){const _0x534dd9=_0x444cf3,_0x5aa6b3=DataManager['getDamageStyle'](this[_0x534dd9(0x613)]),_0x65211=VisuMZ['DamageStyles'][_0x5aa6b3];if(!_0x65211)return this['getItemDamageAmountTextOriginal']();return _0x65211['DamageDisplay'][_0x534dd9(0x4a6)](this);},VisuMZ[_0x444cf3(0x7cf)]['Window_PartyCommand_initialize']=Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x207)],Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(_0x2ef673){const _0x4e205d=_0x444cf3;VisuMZ[_0x4e205d(0x7cf)][_0x4e205d(0x7e2)][_0x4e205d(0x4a6)](this,_0x2ef673),this[_0x4e205d(0x916)](_0x2ef673);},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x916)]=function(_0x347641){const _0x348e3e=_0x444cf3,_0xbbe695=new Rectangle(0x0,0x0,_0x347641[_0x348e3e(0x851)],_0x347641['height']);this['_commandNameWindow']=new Window_Base(_0xbbe695),this[_0x348e3e(0x955)][_0x348e3e(0x291)]=0x0,this[_0x348e3e(0x353)](this['_commandNameWindow']),this['updateCommandNameWindow']();},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x341)]=function(){const _0x3a2854=_0x444cf3;Window_Command[_0x3a2854(0x8f4)][_0x3a2854(0x341)][_0x3a2854(0x4a6)](this);if(this[_0x3a2854(0x955)])this[_0x3a2854(0x9b7)]();},Window_PartyCommand[_0x444cf3(0x8f4)]['updateCommandNameWindow']=function(){const _0x340155=_0x444cf3,_0x9bfd36=this[_0x340155(0x955)];_0x9bfd36[_0x340155(0x773)][_0x340155(0x667)]();const _0xe6c7dd=this[_0x340155(0x869)](this[_0x340155(0xaa6)]());if(_0xe6c7dd===_0x340155(0x55b)&&this[_0x340155(0x24d)]()>0x0){const _0x408f67=this['itemLineRect'](this[_0x340155(0xaa6)]());let _0x35b072=this[_0x340155(0x8a4)](this[_0x340155(0xaa6)]());_0x35b072=_0x35b072[_0x340155(0x5c9)](/\\I\[(\d+)\]/gi,''),_0x9bfd36[_0x340155(0x425)](),this[_0x340155(0x218)](_0x35b072,_0x408f67),this['commandNameWindowDrawText'](_0x35b072,_0x408f67),this[_0x340155(0x4f8)](_0x35b072,_0x408f67);}},Window_PartyCommand['prototype'][_0x444cf3(0x218)]=function(_0x49fbb7,_0x550992){},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x4a9)]=function(_0x52e338,_0x33ebc2){const _0x6be814=_0x444cf3,_0x1770b9=this[_0x6be814(0x955)];_0x1770b9['drawText'](_0x52e338,0x0,_0x33ebc2['y'],_0x1770b9[_0x6be814(0x625)],_0x6be814(0xa98));},Window_PartyCommand['prototype']['commandNameWindowCenter']=function(_0x3ca3b8,_0x5aef03){const _0x2347e4=_0x444cf3,_0xa3f170=this['_commandNameWindow'],_0x26e732=$gameSystem[_0x2347e4(0x798)](),_0x5d3aa9=_0x5aef03['x']+Math[_0x2347e4(0x93e)](_0x5aef03[_0x2347e4(0x851)]/0x2)+_0x26e732;_0xa3f170['x']=_0xa3f170[_0x2347e4(0x851)]/-0x2+_0x5d3aa9,_0xa3f170['y']=Math[_0x2347e4(0x93e)](_0x5aef03[_0x2347e4(0x661)]/0x2);},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x2f2)]=function(){const _0x3f0e70=_0x444cf3;this[_0x3f0e70(0x23f)](),this[_0x3f0e70(0xa33)](),this[_0x3f0e70(0x7e6)](),this[_0x3f0e70(0x28e)](),this['addEscapeCommand']();},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x23f)]=function(){const _0x38b2ee=_0x444cf3,_0x33bf90=this[_0x38b2ee(0x8dd)](),_0xcab878=VisuMZ[_0x38b2ee(0x7cf)]['Settings']['PartyCmd'][_0x38b2ee(0x80c)],_0xdf0615=_0x33bf90===_0x38b2ee(0x6ad)?TextManager[_0x38b2ee(0x412)]:_0x38b2ee(0x7fb)[_0x38b2ee(0x7d7)](_0xcab878,TextManager[_0x38b2ee(0x412)]),_0x4c03b9=this[_0x38b2ee(0x77b)]();this[_0x38b2ee(0x394)](_0xdf0615,_0x38b2ee(0x412),_0x4c03b9);},Window_PartyCommand['prototype'][_0x444cf3(0x77b)]=function(){return!![];},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0xa33)]=function(){const _0x428741=_0x444cf3;if(!this['isAutoBattleCommandAdded']())return;const _0x3200b1=this[_0x428741(0x8dd)](),_0x225ac1=VisuMZ[_0x428741(0x7cf)]['Settings'][_0x428741(0x1c7)][_0x428741(0xa70)],_0x549d45=_0x3200b1===_0x428741(0x6ad)?TextManager['autoBattle']:_0x428741(0x7fb)[_0x428741(0x7d7)](_0x225ac1,TextManager[_0x428741(0x487)]),_0x433161=this['isAutoBattleCommandEnabled']();this[_0x428741(0x394)](_0x549d45,'autoBattle',_0x433161);},Window_PartyCommand['prototype']['isAutoBattleCommandAdded']=function(){const _0x4932dc=_0x444cf3;return VisuMZ[_0x4932dc(0x7cf)][_0x4932dc(0x52b)][_0x4932dc(0x1c7)][_0x4932dc(0x55c)];},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x7fd)]=function(){return!![];},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x7e6)]=function(){},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x28e)]=function(){const _0x1fbbaa=_0x444cf3;if(!this['isOptionsCommandAdded']())return;const _0xac222b=this[_0x1fbbaa(0x8dd)](),_0x3590b8=VisuMZ[_0x1fbbaa(0x7cf)][_0x1fbbaa(0x52b)][_0x1fbbaa(0x1c7)][_0x1fbbaa(0x553)],_0xbca31a=_0xac222b===_0x1fbbaa(0x6ad)?TextManager[_0x1fbbaa(0x34c)]:_0x1fbbaa(0x7fb)[_0x1fbbaa(0x7d7)](_0x3590b8,TextManager[_0x1fbbaa(0x34c)]),_0x19c1ac=this[_0x1fbbaa(0x6f4)]();this[_0x1fbbaa(0x394)](_0xbca31a,_0x1fbbaa(0x34c),_0x19c1ac);},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x32e)]=function(){const _0x17226f=_0x444cf3;return VisuMZ[_0x17226f(0x7cf)]['Settings'][_0x17226f(0x1c7)]['CommandAddOptions'];},Window_PartyCommand[_0x444cf3(0x8f4)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x90d)]=function(){const _0x68a1f=_0x444cf3,_0xef1d2f=this['commandStyle'](),_0x5bdc78=VisuMZ[_0x68a1f(0x7cf)]['Settings'][_0x68a1f(0x1c7)][_0x68a1f(0x8c5)],_0x1cc53f=_0xef1d2f===_0x68a1f(0x6ad)?TextManager[_0x68a1f(0xadf)]:_0x68a1f(0x7fb)[_0x68a1f(0x7d7)](_0x5bdc78,TextManager[_0x68a1f(0xadf)]),_0x3f9500=this['isEscapeCommandEnabled']();this[_0x68a1f(0x394)](_0x1cc53f,_0x68a1f(0xadf),_0x3f9500);},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x237)]=function(){const _0x5369d2=_0x444cf3;return BattleManager[_0x5369d2(0x39d)]();},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x2d1)]=function(){const _0x569977=_0x444cf3;return VisuMZ[_0x569977(0x7cf)][_0x569977(0x52b)][_0x569977(0x1c7)]['CmdTextAlign'];},Window_PartyCommand['prototype'][_0x444cf3(0x356)]=function(_0x187e9b){const _0x4b6b25=_0x444cf3,_0x5363e2=this[_0x4b6b25(0x869)](_0x187e9b);if(_0x5363e2===_0x4b6b25(0x8b5))this[_0x4b6b25(0x1b5)](_0x187e9b);else _0x5363e2==='icon'?this[_0x4b6b25(0x8c7)](_0x187e9b):Window_Command[_0x4b6b25(0x8f4)][_0x4b6b25(0x356)][_0x4b6b25(0x4a6)](this,_0x187e9b);},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x8dd)]=function(){const _0x402185=_0x444cf3;return VisuMZ['BattleCore'][_0x402185(0x52b)][_0x402185(0x1c7)][_0x402185(0x4c4)];},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x869)]=function(_0x198401){const _0x37c089=_0x444cf3;if(_0x198401<0x0)return _0x37c089(0x6ad);const _0x493d17=this[_0x37c089(0x8dd)]();if(_0x493d17!==_0x37c089(0x70d))return _0x493d17;else{if(this[_0x37c089(0x24d)]()>0x0){const _0x15953d=this[_0x37c089(0x8a4)](_0x198401);if(_0x15953d[_0x37c089(0x6b8)](/\\I\[(\d+)\]/i)){const _0x2584e8=this[_0x37c089(0xa04)](_0x198401),_0x5ef2fb=this[_0x37c089(0x802)](_0x15953d)[_0x37c089(0x851)];return _0x5ef2fb<=_0x2584e8['width']?'iconText':_0x37c089(0x55b);}}}return'text';},Window_PartyCommand['prototype'][_0x444cf3(0x1b5)]=function(_0x5c1106){const _0x449854=_0x444cf3,_0x5b271c=this[_0x449854(0xa04)](_0x5c1106),_0x3dc32e=this[_0x449854(0x8a4)](_0x5c1106),_0x26178a=this['textSizeEx'](_0x3dc32e)[_0x449854(0x851)];this[_0x449854(0x223)](this['isCommandEnabled'](_0x5c1106));const _0x43d2df=this[_0x449854(0x2d1)]();if(_0x43d2df===_0x449854(0x934))this[_0x449854(0x2d4)](_0x3dc32e,_0x5b271c['x']+_0x5b271c[_0x449854(0x851)]-_0x26178a,_0x5b271c['y'],_0x26178a);else{if(_0x43d2df===_0x449854(0xa98)){const _0x15acae=_0x5b271c['x']+Math['floor']((_0x5b271c['width']-_0x26178a)/0x2);this[_0x449854(0x2d4)](_0x3dc32e,_0x15acae,_0x5b271c['y'],_0x26178a);}else this['drawTextEx'](_0x3dc32e,_0x5b271c['x'],_0x5b271c['y'],_0x26178a);}},Window_PartyCommand[_0x444cf3(0x8f4)]['drawItemStyleIcon']=function(_0x296658){const _0x516745=_0x444cf3;this['commandName'](_0x296658)[_0x516745(0x6b8)](/\\I\[(\d+)\]/i);const _0x1a37e1=Number(RegExp['$1'])||0x0,_0x1ec884=this[_0x516745(0xa04)](_0x296658),_0x23fe2b=_0x1ec884['x']+Math[_0x516745(0x93e)]((_0x1ec884['width']-ImageManager[_0x516745(0x5b6)])/0x2),_0x3df5c2=_0x1ec884['y']+(_0x1ec884[_0x516745(0x661)]-ImageManager['iconHeight'])/0x2;this['drawIcon'](_0x1a37e1,_0x23fe2b,_0x3df5c2);},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x479)]=function(){},Window_PartyCommand['prototype'][_0x444cf3(0x8fd)]=function(){const _0x4c75f6=_0x444cf3;Window_Command[_0x4c75f6(0x8f4)]['activate'][_0x4c75f6(0x4a6)](this);const _0x4b87c8=this['battleLayoutStyle']();_0x4b87c8===_0x4c75f6(0x8e3)&&this[_0x4c75f6(0x206)]();},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x650)]=function(){const _0x4a6452=_0x444cf3;if(this[_0x4a6452(0x56e)])return this['_battleLayoutStyle'];return this[_0x4a6452(0x56e)]=SceneManager[_0x4a6452(0xa67)][_0x4a6452(0x650)](),this[_0x4a6452(0x56e)];},Window_PartyCommand[_0x444cf3(0x8f4)][_0x444cf3(0x9c4)]=function(){const _0x41a257=_0x444cf3,_0x1bf529=VisuMZ[_0x41a257(0x7cf)][_0x41a257(0x52b)][_0x41a257(0x1c7)],_0x9810dd=this[_0x41a257(0xa81)]();switch(_0x9810dd){case'fight':this['_helpWindow'][_0x41a257(0x1ec)](_0x1bf529['HelpFight']);break;case _0x41a257(0x487):this[_0x41a257(0x3f9)][_0x41a257(0x1ec)](_0x1bf529['HelpAutoBattle']);break;case'options':this[_0x41a257(0x3f9)]['setText'](_0x1bf529[_0x41a257(0x931)]);break;case _0x41a257(0xadf):this[_0x41a257(0x3f9)][_0x41a257(0x1ec)](_0x1bf529['HelpEscape']);break;default:this[_0x41a257(0x3f9)][_0x41a257(0x1ec)]('');break;}},VisuMZ['BattleCore']['Window_ActorCommand_initialize']=Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x207)],Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(_0xaa735c){const _0x9452e6=_0x444cf3;VisuMZ[_0x9452e6(0x7cf)][_0x9452e6(0x9ce)][_0x9452e6(0x4a6)](this,_0xaa735c),this['createCommandNameWindow'](_0xaa735c);},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x916)]=function(_0x20b8ac){const _0x1b893b=_0x444cf3,_0x292e79=new Rectangle(0x0,0x0,_0x20b8ac[_0x1b893b(0x851)],_0x20b8ac['height']);this['_commandNameWindow']=new Window_Base(_0x292e79),this[_0x1b893b(0x955)][_0x1b893b(0x291)]=0x0,this['addChild'](this[_0x1b893b(0x955)]),this['updateCommandNameWindow']();},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x341)]=function(){const _0x41c022=_0x444cf3;Window_Command[_0x41c022(0x8f4)]['callUpdateHelp'][_0x41c022(0x4a6)](this);if(this['_commandNameWindow'])this[_0x41c022(0x9b7)]();},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x9b7)]=function(){const _0x4108ca=_0x444cf3,_0x37b842=this[_0x4108ca(0x955)];_0x37b842[_0x4108ca(0x773)]['clear']();const _0xec839d=this[_0x4108ca(0x869)](this[_0x4108ca(0xaa6)]());if(_0xec839d===_0x4108ca(0x55b)&&this[_0x4108ca(0x24d)]()>0x0){const _0x226f11=this[_0x4108ca(0xa04)](this['index']());let _0x5bf76a=this[_0x4108ca(0x8a4)](this['index']());_0x5bf76a=_0x5bf76a['replace'](/\\I\[(\d+)\]/gi,''),_0x37b842[_0x4108ca(0x425)](),this[_0x4108ca(0x218)](_0x5bf76a,_0x226f11),this[_0x4108ca(0x4a9)](_0x5bf76a,_0x226f11),this['commandNameWindowCenter'](_0x5bf76a,_0x226f11);}},Window_ActorCommand[_0x444cf3(0x8f4)]['commandNameWindowDrawBackground']=function(_0x14d2fb,_0xf75ff){},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x4a9)]=function(_0x28e432,_0x26ba8d){const _0x516f90=_0x444cf3,_0x7001ce=this['_commandNameWindow'];_0x7001ce[_0x516f90(0x4b2)](_0x28e432,0x0,_0x26ba8d['y'],_0x7001ce[_0x516f90(0x625)],_0x516f90(0xa98));},Window_ActorCommand['prototype']['commandNameWindowCenter']=function(_0x2fedb6,_0x309a4a){const _0x3d642f=_0x444cf3,_0x5e6098=this[_0x3d642f(0x955)],_0x54ce1b=$gameSystem[_0x3d642f(0x798)](),_0x15f2b8=_0x309a4a['x']+Math['floor'](_0x309a4a[_0x3d642f(0x851)]/0x2)+_0x54ce1b;_0x5e6098['x']=_0x5e6098[_0x3d642f(0x851)]/-0x2+_0x15f2b8,_0x5e6098['y']=Math[_0x3d642f(0x93e)](_0x309a4a['height']/0x2);},Window_ActorCommand[_0x444cf3(0x8f4)]['makeCommandList']=function(){const _0x135de8=_0x444cf3;if(!this[_0x135de8(0xa00)])return;const _0x214a50=this[_0x135de8(0xa00)]['battleCommands']();for(const _0x115b10 of _0x214a50){this[_0x135de8(0x888)](_0x115b10[_0x135de8(0x839)]()[_0x135de8(0x78c)]());}},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x888)]=function(_0x42758c){const _0x278a27=_0x444cf3;_0x42758c===_0x278a27(0xae7)&&this['addAttackCommand']();[_0x278a27(0x1c3),_0x278a27(0x230)]['includes'](_0x42758c)&&this[_0x278a27(0x6ab)]();_0x42758c===_0x278a27(0x4ea)&&this[_0x278a27(0x79c)]();_0x42758c==='ITEM'&&this[_0x278a27(0x705)]();_0x42758c===_0x278a27(0x4ad)&&this[_0x278a27(0x90d)]();_0x42758c==='AUTO\x20BATTLE'&&this[_0x278a27(0xa33)]();if(_0x42758c['match'](/STYPE: (\d+)/i)){const _0x950c4b=Number(RegExp['$1']);this[_0x278a27(0x768)](_0x950c4b);}else{if(_0x42758c[_0x278a27(0x6b8)](/STYPE: (.*)/i)){const _0x1617d9=DataManager[_0x278a27(0x383)](RegExp['$1']);this['addSkillTypeCommand'](_0x1617d9);}}_0x42758c===_0x278a27(0x4e9)&&this['addSingleSkillCommands']();if(_0x42758c[_0x278a27(0x6b8)](/SKILL: (\d+)/i)){const _0x587dbb=Number(RegExp['$1']);this[_0x278a27(0x20e)]($dataSkills[_0x587dbb]);}else{if(_0x42758c[_0x278a27(0x6b8)](/SKILL: (.*)/i)){const _0x41ebb4=DataManager[_0x278a27(0x8ac)](RegExp['$1']);this[_0x278a27(0x20e)]($dataSkills[_0x41ebb4]);}}_0x42758c===_0x278a27(0x4cf)&&Imported[_0x278a27(0x7b0)]&&this[_0x278a27(0x612)](),[_0x278a27(0x307),'COMBAT\x20LOG'][_0x278a27(0xa60)](_0x42758c)&&Imported[_0x278a27(0x664)]&&this[_0x278a27(0x490)](),_0x42758c===_0x278a27(0x81e)&&Imported[_0x278a27(0xa1a)]&&this['addWeaponSwapCommand'](!![]),_0x42758c==='GRID\x20MOVE'&&Imported[_0x278a27(0x5ec)]&&this[_0x278a27(0x776)]();},Window_ActorCommand['prototype'][_0x444cf3(0x6c3)]=function(){const _0x4d8a62=_0x444cf3,_0x5ec971=$dataSkills[this[_0x4d8a62(0xa00)][_0x4d8a62(0x6f7)]()];if(!_0x5ec971)return;if(!this[_0x4d8a62(0x586)](_0x5ec971))return;const _0x3e61a0=this[_0x4d8a62(0x8dd)](),_0x367f11=DataManager['battleCommandName'](_0x5ec971),_0x5ce437=DataManager[_0x4d8a62(0x446)](_0x5ec971),_0x152e8a=_0x3e61a0==='text'?_0x367f11:'\x5cI[%1]%2'[_0x4d8a62(0x7d7)](_0x5ce437,_0x367f11);this['addCommand'](_0x152e8a,_0x4d8a62(0x67f),this[_0x4d8a62(0xa00)]['canAttack']());},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x79c)]=function(){const _0x3d8b67=_0x444cf3,_0xab9122=$dataSkills[this[_0x3d8b67(0xa00)][_0x3d8b67(0x68c)]()];if(!_0xab9122)return;if(!this['canAddSkillCommand'](_0xab9122))return;const _0x3073c9=this[_0x3d8b67(0x8dd)](),_0x302bdc=DataManager[_0x3d8b67(0x8ef)](_0xab9122),_0x16811d=DataManager[_0x3d8b67(0x446)](_0xab9122),_0xff43f3=_0x3073c9==='text'?_0x302bdc:_0x3d8b67(0x7fb)[_0x3d8b67(0x7d7)](_0x16811d,_0x302bdc);this[_0x3d8b67(0x394)](_0xff43f3,'guard',this[_0x3d8b67(0xa00)]['canGuard']());},Window_ActorCommand['prototype'][_0x444cf3(0x705)]=function(){const _0x5cb4cb=_0x444cf3,_0x56c31a=this[_0x5cb4cb(0x8dd)](),_0x5ca1ae=VisuMZ[_0x5cb4cb(0x7cf)][_0x5cb4cb(0x52b)][_0x5cb4cb(0x324)]['CmdIconItem'],_0x168074=_0x56c31a===_0x5cb4cb(0x6ad)?TextManager[_0x5cb4cb(0x39a)]:_0x5cb4cb(0x7fb)[_0x5cb4cb(0x7d7)](_0x5ca1ae,TextManager['item']),_0x50253a=this[_0x5cb4cb(0x708)]();this[_0x5cb4cb(0x394)](_0x168074,_0x5cb4cb(0x39a),_0x50253a);},Window_ActorCommand[_0x444cf3(0x8f4)]['isItemCommandEnabled']=function(){const _0x2bd177=_0x444cf3;return this[_0x2bd177(0xa00)]&&this['_actor'][_0x2bd177(0x7a2)]();},Window_ActorCommand['prototype'][_0x444cf3(0x6ab)]=function(){const _0x49e149=_0x444cf3,_0x283b82=this[_0x49e149(0xa00)]['skillTypes']();for(const _0x36b4da of _0x283b82){this[_0x49e149(0x768)](_0x36b4da);}},Window_ActorCommand['prototype'][_0x444cf3(0x768)]=function(_0x216821){const _0x255e35=_0x444cf3;let _0x248417=$dataSystem[_0x255e35(0x4c2)][_0x216821];if(!_0x248417)return;let _0x1fdedf=_0x248417;const _0x1250b3=this['commandStyle']();if(_0x1250b3===_0x255e35(0x6ad))_0x1fdedf=_0x1fdedf[_0x255e35(0x5c9)](/\x1I\[(\d+)\]/gi,''),_0x1fdedf=_0x1fdedf[_0x255e35(0x5c9)](/\\I\[(\d+)\]/gi,'');else{if(!_0x248417[_0x255e35(0x6b8)](/\\I\[(\d+)\]/i)){const _0xfd3089=Imported[_0x255e35(0xa78)]?VisuMZ[_0x255e35(0x534)]['Settings'][_0x255e35(0x8df)]:VisuMZ[_0x255e35(0x7cf)]['Settings']['ActorCmd'],_0x15c0fd=$dataSystem[_0x255e35(0x2ed)]['includes'](_0x216821),_0x362e4f=_0x15c0fd?_0xfd3089['IconStypeMagic']:_0xfd3089[_0x255e35(0xaae)];_0x1fdedf=_0x255e35(0x7fb)[_0x255e35(0x7d7)](_0x362e4f,_0x248417);}}this[_0x255e35(0x394)](_0x1fdedf,_0x255e35(0x874),!![],_0x216821);},Window_ActorCommand['prototype'][_0x444cf3(0x7d5)]=function(){const _0x37bf40=_0x444cf3,_0x51cdb8=this[_0x37bf40(0xa00)][_0x37bf40(0x4c2)](),_0x3a0f62=this[_0x37bf40(0xa00)][_0x37bf40(0x4c8)]();for(const _0x47dc41 of _0x3a0f62){if(!_0x47dc41)continue;if(Imported[_0x37bf40(0xa78)]){if(this[_0x37bf40(0x3bc)](_0x47dc41))continue;if(this[_0x37bf40(0x987)](_0x47dc41))continue;}else{if(!_0x51cdb8['includes'](_0x47dc41[_0x37bf40(0x97a)]))continue;}this[_0x37bf40(0x20e)](_0x47dc41);}},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x3bc)]=function(_0xfb9e08){const _0x3be03d=_0x444cf3,_0x170c1c=this[_0x3be03d(0xa00)][_0x3be03d(0x4c2)](),_0x14fb95=_0x170c1c['filter'](_0x47198a=>DataManager[_0x3be03d(0x7c3)](_0xfb9e08)[_0x3be03d(0xa60)](_0x47198a));return _0x14fb95[_0x3be03d(0xa40)]<=0x0;},Window_ActorCommand['prototype'][_0x444cf3(0x987)]=function(_0xf38199){const _0xfc16e9=_0x444cf3;if(Imported[_0xfc16e9(0xa78)]){if(VisuMZ[_0xfc16e9(0x534)][_0xfc16e9(0x95c)]>=1.24){if(this[_0xfc16e9(0xa00)]){if(!VisuMZ['SkillsStatesCore'][_0xfc16e9(0x965)](this[_0xfc16e9(0xa00)],_0xf38199))return!![];if(!VisuMZ['SkillsStatesCore'][_0xfc16e9(0x9ed)](this[_0xfc16e9(0xa00)],_0xf38199))return!![];if(!VisuMZ[_0xfc16e9(0x534)][_0xfc16e9(0x483)](this[_0xfc16e9(0xa00)],_0xf38199))return!![];}}else{if(!Window_SkillList[_0xfc16e9(0x8f4)][_0xfc16e9(0x91d)][_0xfc16e9(0x4a6)](this,_0xf38199))return!![];if(!Window_SkillList['prototype'][_0xfc16e9(0x98b)]['call'](this,_0xf38199))return!![];if(!Window_SkillList[_0xfc16e9(0x8f4)]['checkShowHideSkillNotetags'][_0xfc16e9(0x4a6)](this,_0xf38199))return!![];}}return![];},Window_ActorCommand[_0x444cf3(0x8f4)]['addSingleSkillCommand']=function(_0x2ae706){const _0x4dc65b=_0x444cf3;if(!_0x2ae706)return;if(!this[_0x4dc65b(0x586)](_0x2ae706))return;const _0x402df5=this[_0x4dc65b(0x8dd)](),_0x4ca1e2=DataManager[_0x4dc65b(0x8ef)](_0x2ae706),_0x33c19f=DataManager['battleCommandIcon'](_0x2ae706),_0x29350e=_0x402df5===_0x4dc65b(0x6ad)?_0x4ca1e2:'\x5cI[%1]%2'[_0x4dc65b(0x7d7)](_0x33c19f,_0x4ca1e2),_0xe1ebc3=this['_actor']['canUse'](_0x2ae706);this[_0x4dc65b(0x394)](_0x29350e,_0x4dc65b(0x5bc),_0xe1ebc3,_0x2ae706['id']);},Window_ActorCommand['prototype'][_0x444cf3(0x586)]=function(_0x4c3fae){const _0x1111a3=_0x444cf3,_0x57e800=_0x4c3fae[_0x1111a3(0x1cd)];if(_0x57e800['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x1111a3(0xa00)]['isLearnedSkill'](_0x4c3fae['id']))return![];}if(_0x57e800[_0x1111a3(0x6b8)](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor'][_0x1111a3(0x231)](_0x4c3fae['id']))return![];}const _0xa7c1ed=VisuMZ[_0x1111a3(0x7cf)]['createKeyJS'](_0x4c3fae,'CommandVisible');if(VisuMZ[_0x1111a3(0x7cf)]['JS'][_0xa7c1ed]){if(!VisuMZ[_0x1111a3(0x7cf)]['JS'][_0xa7c1ed][_0x1111a3(0x4a6)](this,this['_actor'],_0x4c3fae))return![];}return VisuMZ[_0x1111a3(0x7cf)][_0x1111a3(0x43c)](_0x4c3fae);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x43c)]=function(_0x4669bf){const _0x114dbd=_0x444cf3,_0xd13b78=_0x4669bf['note'];if(_0xd13b78[_0x114dbd(0x6b8)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2cb222=JSON[_0x114dbd(0x61c)]('['+RegExp['$1'][_0x114dbd(0x6b8)](/\d+/g)+']');for(const _0x584c1e of _0x2cb222){if(!$gameSwitches['value'](_0x584c1e))return![];}return!![];}if(_0xd13b78['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x44002c=JSON[_0x114dbd(0x61c)]('['+RegExp['$1'][_0x114dbd(0x6b8)](/\d+/g)+']');for(const _0x333051 of _0x44002c){if(!$gameSwitches[_0x114dbd(0x473)](_0x333051))return![];}return!![];}if(_0xd13b78[_0x114dbd(0x6b8)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x28fe4d=JSON[_0x114dbd(0x61c)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x488855 of _0x28fe4d){if($gameSwitches['value'](_0x488855))return!![];}return![];}if(_0xd13b78[_0x114dbd(0x6b8)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3060f8=JSON[_0x114dbd(0x61c)]('['+RegExp['$1'][_0x114dbd(0x6b8)](/\d+/g)+']');for(const _0x5f3f37 of _0x3060f8){if(!$gameSwitches[_0x114dbd(0x473)](_0x5f3f37))return!![];}return![];}if(_0xd13b78[_0x114dbd(0x6b8)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x483bf1=JSON[_0x114dbd(0x61c)]('['+RegExp['$1'][_0x114dbd(0x6b8)](/\d+/g)+']');for(const _0x30a87e of _0x483bf1){if(!$gameSwitches[_0x114dbd(0x473)](_0x30a87e))return!![];}return![];}if(_0xd13b78['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x325ba8=JSON[_0x114dbd(0x61c)]('['+RegExp['$1'][_0x114dbd(0x6b8)](/\d+/g)+']');for(const _0xb89a5 of _0x325ba8){if($gameSwitches[_0x114dbd(0x473)](_0xb89a5))return![];}return!![];}return!![];},Window_ActorCommand[_0x444cf3(0x8f4)]['addEscapeCommand']=function(){const _0x581e6f=_0x444cf3,_0x16e147=this[_0x581e6f(0x8dd)](),_0x487f92=VisuMZ[_0x581e6f(0x7cf)][_0x581e6f(0x52b)]['PartyCmd'][_0x581e6f(0x8c5)],_0x363ae7=_0x16e147===_0x581e6f(0x6ad)?TextManager['escape']:'\x5cI[%1]%2'[_0x581e6f(0x7d7)](_0x487f92,TextManager['escape']),_0x4e4ade=this['isEscapeCommandEnabled']();this['addCommand'](_0x363ae7,_0x581e6f(0xadf),_0x4e4ade);},Window_ActorCommand['prototype'][_0x444cf3(0x237)]=function(){const _0x4d2963=_0x444cf3;return BattleManager[_0x4d2963(0x39d)]();},Window_ActorCommand[_0x444cf3(0x8f4)]['addAutoBattleCommand']=function(){const _0x4f5ba0=_0x444cf3,_0x466368=this[_0x4f5ba0(0x8dd)](),_0x36d775=VisuMZ['BattleCore'][_0x4f5ba0(0x52b)][_0x4f5ba0(0x1c7)][_0x4f5ba0(0xa70)],_0x36f3bc=_0x466368===_0x4f5ba0(0x6ad)?TextManager[_0x4f5ba0(0x487)]:_0x4f5ba0(0x7fb)[_0x4f5ba0(0x7d7)](_0x36d775,TextManager[_0x4f5ba0(0x487)]),_0x323be8=this[_0x4f5ba0(0x7fd)]();this[_0x4f5ba0(0x394)](_0x36f3bc,_0x4f5ba0(0x487),_0x323be8);},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x7fd)]=function(){return!![];},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x2d1)]=function(){const _0x41b9c0=_0x444cf3;return VisuMZ[_0x41b9c0(0x7cf)][_0x41b9c0(0x52b)]['ActorCmd'][_0x41b9c0(0x698)];},Window_ActorCommand[_0x444cf3(0x8f4)]['drawItem']=function(_0x55b18c){const _0x37c155=_0x444cf3,_0x37daf3=this['commandStyleCheck'](_0x55b18c);if(_0x37daf3===_0x37c155(0x8b5))this[_0x37c155(0x1b5)](_0x55b18c);else _0x37daf3===_0x37c155(0x55b)?this[_0x37c155(0x8c7)](_0x55b18c):Window_Command[_0x37c155(0x8f4)][_0x37c155(0x356)][_0x37c155(0x4a6)](this,_0x55b18c);this[_0x37c155(0x542)](_0x55b18c);},Window_ActorCommand[_0x444cf3(0x8f4)]['commandStyle']=function(){const _0x6f8849=_0x444cf3;return VisuMZ[_0x6f8849(0x7cf)][_0x6f8849(0x52b)][_0x6f8849(0x324)][_0x6f8849(0x4c4)];},Window_ActorCommand[_0x444cf3(0x8f4)]['commandStyleCheck']=function(_0x32e3e2){const _0x23e85d=_0x444cf3;if(_0x32e3e2<0x0)return _0x23e85d(0x6ad);const _0x276a2f=this[_0x23e85d(0x8dd)]();if(_0x276a2f!==_0x23e85d(0x70d))return _0x276a2f;else{if(this[_0x23e85d(0x24d)]()>0x0){const _0x29aa20=this[_0x23e85d(0x8a4)](_0x32e3e2);if(_0x29aa20[_0x23e85d(0x6b8)](/\\I\[(\d+)\]/i)){const _0x463411=this[_0x23e85d(0xa04)](_0x32e3e2),_0x164f35=this[_0x23e85d(0x802)](_0x29aa20)['width'];return _0x164f35<=_0x463411[_0x23e85d(0x851)]?_0x23e85d(0x8b5):_0x23e85d(0x55b);}}}return _0x23e85d(0x6ad);},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x1b5)]=function(_0x4d6960){const _0x3c45db=_0x444cf3,_0x42bcc6=this[_0x3c45db(0xa04)](_0x4d6960),_0x3a4af0=this[_0x3c45db(0x8a4)](_0x4d6960),_0x3d5390=this[_0x3c45db(0x802)](_0x3a4af0)[_0x3c45db(0x851)];this['changePaintOpacity'](this[_0x3c45db(0x7c1)](_0x4d6960));const _0x47deec=this[_0x3c45db(0x2d1)]();if(_0x47deec===_0x3c45db(0x934))this[_0x3c45db(0x2d4)](_0x3a4af0,_0x42bcc6['x']+_0x42bcc6[_0x3c45db(0x851)]-_0x3d5390,_0x42bcc6['y'],_0x3d5390);else{if(_0x47deec===_0x3c45db(0xa98)){const _0x34c6cf=_0x42bcc6['x']+Math[_0x3c45db(0x93e)]((_0x42bcc6[_0x3c45db(0x851)]-_0x3d5390)/0x2);this['drawTextEx'](_0x3a4af0,_0x34c6cf,_0x42bcc6['y'],_0x3d5390);}else this['drawTextEx'](_0x3a4af0,_0x42bcc6['x'],_0x42bcc6['y'],_0x3d5390);}},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x8c7)]=function(_0x417573){const _0x609bbe=_0x444cf3;this[_0x609bbe(0x8a4)](_0x417573)['match'](/\\I\[(\d+)\]/i);const _0x5bc8b2=Number(RegExp['$1'])||0x0,_0x20faf5=this[_0x609bbe(0xa04)](_0x417573),_0x2323b5=_0x20faf5['x']+Math[_0x609bbe(0x93e)]((_0x20faf5[_0x609bbe(0x851)]-ImageManager[_0x609bbe(0x5b6)])/0x2),_0x1c8033=_0x20faf5['y']+(_0x20faf5['height']-ImageManager['iconHeight'])/0x2;this[_0x609bbe(0x685)](_0x5bc8b2,_0x2323b5,_0x1c8033);},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x542)]=function(_0x344e49){const _0x3a8ff3=_0x444cf3;if(!(VisuMZ[_0x3a8ff3(0x7cf)]['Settings']['ActorCmd']['ShowCosts']??!![]))return;const _0x79bf6d=this['commandSymbol'](_0x344e49);if(![_0x3a8ff3(0x67f),'guard',_0x3a8ff3(0x5bc)][_0x3a8ff3(0xa60)](_0x79bf6d))return;const _0x2f76bf=this['itemLineRect'](_0x344e49);let _0x462c5c=null;if(_0x79bf6d===_0x3a8ff3(0x67f))_0x462c5c=$dataSkills[this['_actor'][_0x3a8ff3(0x6f7)]()];else _0x79bf6d==='guard'?_0x462c5c=$dataSkills[this['_actor']['guardSkillId']()]:_0x462c5c=$dataSkills[this[_0x3a8ff3(0x849)][_0x344e49]['ext']];this[_0x3a8ff3(0x29a)](this[_0x3a8ff3(0xa00)],_0x462c5c,_0x2f76bf['x'],_0x2f76bf['y'],_0x2f76bf['width']);},Window_ActorCommand[_0x444cf3(0x8f4)]['drawSkillCost']=function(_0x33be66,_0x32f0c7,_0x32400e,_0x246857,_0x53bc6f){const _0x52e7e8=_0x444cf3;if(!_0x32f0c7)return;Imported[_0x52e7e8(0xa78)]?Window_Command[_0x52e7e8(0x8f4)][_0x52e7e8(0x29a)][_0x52e7e8(0x4a6)](this,_0x33be66,_0x32f0c7,_0x32400e,_0x246857,_0x53bc6f):Window_SkillList[_0x52e7e8(0x8f4)][_0x52e7e8(0x29a)][_0x52e7e8(0x4a6)](this,_0x32f0c7,_0x32400e,_0x246857,_0x53bc6f);},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x479)]=function(){},Window_ActorCommand['prototype'][_0x444cf3(0x8fd)]=function(){const _0x36df25=_0x444cf3;Window_Command['prototype'][_0x36df25(0x8fd)]['call'](this);const _0x41d415=this[_0x36df25(0x650)]();_0x41d415==='border'&&this[_0x36df25(0x206)]();},Window_ActorCommand[_0x444cf3(0x8f4)]['battleLayoutStyle']=function(){const _0x119239=_0x444cf3;if(this[_0x119239(0x56e)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=SceneManager[_0x119239(0xa67)][_0x119239(0x650)](),this['_battleLayoutStyle'];},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x2ea)]=Window_ActorCommand['prototype'][_0x444cf3(0x5fb)],Window_ActorCommand[_0x444cf3(0x8f4)]['setup']=function(_0x3864a9){const _0x2f737a=_0x444cf3,_0x1b3952=this[_0x2f737a(0x650)]();if(_0x3864a9&&['xp',_0x2f737a(0x974)][_0x2f737a(0xa60)](_0x1b3952))this[_0x2f737a(0x5f1)](_0x3864a9);else _0x3864a9&&['border'][_0x2f737a(0xa60)](_0x1b3952)&&(this[_0x2f737a(0x923)](_0x3864a9),this[_0x2f737a(0x206)]());VisuMZ[_0x2f737a(0x7cf)][_0x2f737a(0x2ea)][_0x2f737a(0x4a6)](this,_0x3864a9),_0x3864a9&&$gameTroop[_0x2f737a(0xaf5)]()[_0x2f737a(0xa40)]>0x0&&_0x3864a9[_0x2f737a(0x516)]()&&_0x3864a9[_0x2f737a(0x516)]()[_0x2f737a(0x5d1)]();},Window_ActorCommand[_0x444cf3(0x8f4)]['resizeWindowXPStyle']=function(_0x2a2ecd){const _0x2f5f82=_0x444cf3,_0x53a4ca=Math[_0x2f5f82(0xa43)](Graphics[_0x2f5f82(0x902)]/0x3),_0x75a77c=Math[_0x2f5f82(0xa43)](Graphics[_0x2f5f82(0x902)]/$gameParty[_0x2f5f82(0x8b4)]()['length']),_0x33f5b0=Math[_0x2f5f82(0x349)](_0x53a4ca,_0x75a77c),_0x8bce5d=this[_0x2f5f82(0x7aa)](VisuMZ[_0x2f5f82(0x7cf)][_0x2f5f82(0x52b)][_0x2f5f82(0xa4b)][_0x2f5f82(0x880)]),_0xe8f2b4=Math['round'](_0x75a77c*_0x2a2ecd[_0x2f5f82(0xaa6)]())+Math[_0x2f5f82(0xa43)]((_0x75a77c-_0x33f5b0)/0x2),_0x32dc74=Math['round'](SceneManager[_0x2f5f82(0xa67)][_0x2f5f82(0x842)]['y']-_0x8bce5d);this[_0x2f5f82(0x1ef)](_0xe8f2b4,_0x32dc74,_0x33f5b0,_0x8bce5d),this['createContents'](),this[_0x2f5f82(0x9b6)](0x1);},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x923)]=function(_0x2f7a91){const _0x1d4249=_0x444cf3,_0x3bfc8d=SceneManager[_0x1d4249(0xa67)][_0x1d4249(0x6a7)]();this['move'](_0x3bfc8d['x'],_0x3bfc8d['y'],_0x3bfc8d[_0x1d4249(0x851)],_0x3bfc8d[_0x1d4249(0x661)]),this[_0x1d4249(0x765)](),this[_0x1d4249(0x9b6)](0x0);},Window_ActorCommand[_0x444cf3(0x8f4)][_0x444cf3(0x53a)]=function(){const _0x50c1c6=_0x444cf3;if(this[_0x50c1c6(0x31d)]){const _0x3083d6=this[_0x50c1c6(0x31d)][_0x50c1c6(0x1ff)],_0x2677d6=this[_0x50c1c6(0x851)]-0x8,_0x46bbdd=this['height'],_0x46a663=this['padding'],_0x3748e3=ColorManager[_0x50c1c6(0x737)](),_0x444fc9=ColorManager[_0x50c1c6(0x2eb)]();this[_0x50c1c6(0x31d)]['x']=0x4,_0x3083d6[_0x50c1c6(0x245)](_0x2677d6,_0x46bbdd),_0x3083d6[_0x50c1c6(0x780)](0x0,0x0,_0x2677d6,_0x46a663,_0x444fc9,_0x3748e3,!![]),_0x3083d6['fillRect'](0x0,_0x46a663,_0x2677d6,_0x46bbdd-_0x46a663*0x2,_0x3748e3),_0x3083d6[_0x50c1c6(0x780)](0x0,_0x46bbdd-_0x46a663,_0x2677d6,_0x46a663,_0x3748e3,_0x444fc9,!![]),this['_dimmerSprite'][_0x50c1c6(0x7d4)](0x0,0x0,_0x2677d6,_0x46bbdd);}},Window_ActorCommand['prototype'][_0x444cf3(0x9c4)]=function(){const _0x2e6986=_0x444cf3;if(!this['_actor'])return;const _0x44e478=VisuMZ['BattleCore']['Settings'][_0x2e6986(0x324)],_0x28d813=this[_0x2e6986(0xa81)]();switch(_0x28d813){case'attack':this[_0x2e6986(0x3f7)]($dataSkills[this[_0x2e6986(0xa00)][_0x2e6986(0x6f7)]()]);break;case _0x2e6986(0x8ec):this['setHelpWindowItem']($dataSkills[this[_0x2e6986(0xa00)]['guardSkillId']()]);break;case'skill':const _0x5e7487=_0x44e478[_0x2e6986(0x411)],_0x1d6d23=_0x5e7487[_0x2e6986(0x7d7)]($dataSystem[_0x2e6986(0x4c2)][this[_0x2e6986(0x308)]()]);this[_0x2e6986(0x3f9)][_0x2e6986(0x1ec)](_0x1d6d23);break;case'singleSkill':this[_0x2e6986(0x3f7)]($dataSkills[this[_0x2e6986(0x308)]()]);break;case'item':this[_0x2e6986(0x3f9)][_0x2e6986(0x1ec)](_0x44e478['HelpItem']);break;case _0x2e6986(0xadf):this[_0x2e6986(0x3f9)][_0x2e6986(0x1ec)](_0x44e478[_0x2e6986(0xaf7)]);break;case _0x2e6986(0x487):this[_0x2e6986(0x3f9)][_0x2e6986(0x1ec)](_0x44e478[_0x2e6986(0x5e0)]);break;default:this[_0x2e6986(0x3f9)]['setText']('');break;}},Window_ActorCommand[_0x444cf3(0x8f4)]['selectLast']=function(){const _0x216ceb=_0x444cf3;this[_0x216ceb(0x42c)](0x0);if(this[_0x216ceb(0xa00)]&&ConfigManager[_0x216ceb(0x2fd)]){const _0x12d8f2=this['_actor'][_0x216ceb(0xa73)]();this['selectSymbol'](_0x12d8f2);if(_0x12d8f2===_0x216ceb(0x874)){const _0x154163=this[_0x216ceb(0xa00)]['lastBattleSkill']();if(_0x154163){const _0x20d525=this[_0x216ceb(0x913)]('skill',_0x154163[_0x216ceb(0x97a)]);this[_0x216ceb(0x76a)](_0x20d525||0x0);}}else{if(_0x12d8f2===_0x216ceb(0x5bc)){const _0x395a37=this['_actor']['lastBattleSkill']();if(_0x395a37){const _0x48738d=this[_0x216ceb(0x913)]('singleSkill',_0x395a37['id']);this[_0x216ceb(0x76a)](_0x48738d||0x0);}}}}},Window_ActorCommand['prototype']['findSymbolExt']=function(_0x10d213,_0x1d5bf8){const _0x283466=_0x444cf3;return this[_0x283466(0x849)][_0x283466(0xad6)](_0x4b1dc2=>_0x4b1dc2['symbol']===_0x10d213&&_0x4b1dc2[_0x283466(0x788)]===_0x1d5bf8);},VisuMZ[_0x444cf3(0x7cf)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x444cf3(0x8f4)]['initialize'],Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(_0xf41037){const _0x22e3ce=_0x444cf3;VisuMZ[_0x22e3ce(0x7cf)]['Window_BattleStatus_initialize'][_0x22e3ce(0x4a6)](this,_0xf41037),this[_0x22e3ce(0x4e8)](),this['createAttachmentSprites']();},Window_BattleStatus['prototype']['battleLayoutStyle']=function(){const _0x400eed=_0x444cf3;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x400eed(0x56e)]=SceneManager[_0x400eed(0xa67)]['battleLayoutStyle'](),this[_0x400eed(0x56e)];},Window_BattleStatus[_0x444cf3(0x8f4)]['initBattleCore']=function(){const _0x1556a3=_0x444cf3;this['frameVisible']=this[_0x1556a3(0x7a3)]();const _0x5b183a=VisuMZ[_0x1556a3(0x7cf)][_0x1556a3(0x52b)][_0x1556a3(0xa4b)];_0x5b183a[_0x1556a3(0x4b0)]&&(this[_0x1556a3(0x291)]=0x0);},Window_BattleStatus['prototype'][_0x444cf3(0x7a3)]=function(){const _0x329251=_0x444cf3,_0x3a2f7c=VisuMZ[_0x329251(0x7cf)]['Settings']['BattleLayout'];if(_0x3a2f7c[_0x329251(0x91e)])return!![];const _0x21b6b2=this[_0x329251(0x650)]();switch(_0x21b6b2){case _0x329251(0x628):case _0x329251(0x8e3):return!![];break;case'default':case'xp':case _0x329251(0x974):default:return![];break;}},Window_BattleStatus[_0x444cf3(0x8f4)]['extraHeight']=function(){const _0xbb4501=_0x444cf3;return this[_0xbb4501(0x7a3)]()?0x0:0xa;},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x9ef)]=function(){const _0x544bc1=_0x444cf3,_0x506c3d=this[_0x544bc1(0x650)]();switch(_0x506c3d){case _0x544bc1(0x628):return 0x1;break;case'xp':case _0x544bc1(0x974):return $gameParty[_0x544bc1(0x8b4)]()[_0x544bc1(0xa40)];break;case _0x544bc1(0x471):default:return $gameParty[_0x544bc1(0x24f)]();break;}},Window_BattleStatus['prototype']['itemHeight']=function(){const _0x28ed02=_0x444cf3,_0x252fd5=this['battleLayoutStyle']();switch(_0x252fd5){case _0x28ed02(0x628):return Window_StatusBase[_0x28ed02(0x8f4)][_0x28ed02(0x654)][_0x28ed02(0x4a6)](this);break;case'default':case'xp':case _0x28ed02(0x974):default:return this[_0x28ed02(0x202)];break;}},Window_BattleStatus['prototype'][_0x444cf3(0x5a9)]=function(){const _0x2a311a=_0x444cf3,_0xb2f0a8=this[_0x2a311a(0x650)]();switch(_0xb2f0a8){case _0x2a311a(0x628):return Window_StatusBase['prototype'][_0x2a311a(0x5a9)][_0x2a311a(0x4a6)](this);break;case _0x2a311a(0x471):case'xp':case _0x2a311a(0x974):default:return 0x0;break;}},Window_BattleStatus[_0x444cf3(0x8f4)]['updatePadding']=function(){const _0x12aad5=_0x444cf3;this[_0x12aad5(0x7a3)]()?Window_StatusBase[_0x12aad5(0x8f4)][_0x12aad5(0xa23)][_0x12aad5(0x4a6)](this):this['padding']=0x8;},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x757)]=function(){const _0x24ce1b=_0x444cf3,_0x3ba9b1=VisuMZ[_0x24ce1b(0x7cf)][_0x24ce1b(0x52b)][_0x24ce1b(0xa4b)];_0x3ba9b1[_0x24ce1b(0x91e)]?this['windowskin']=ImageManager['loadSystem'](_0x3ba9b1[_0x24ce1b(0x91e)]):Window_StatusBase[_0x24ce1b(0x8f4)][_0x24ce1b(0x757)]['call'](this);},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x449)]=function(_0x470105){const _0x265b5e=_0x444cf3,_0x5c5f5c=VisuMZ[_0x265b5e(0x7cf)]['Settings'][_0x265b5e(0xa4b)];if(_0x5c5f5c[_0x265b5e(0x2fb)])return;Window_StatusBase[_0x265b5e(0x8f4)][_0x265b5e(0x449)][_0x265b5e(0x4a6)](this,_0x470105);},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x706)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x7b9)]=function(){const _0x340ad5=_0x444cf3;Window_StatusBase['prototype'][_0x340ad5(0x7b9)]['call'](this),this['updateRefresh'](),this[_0x340ad5(0xadd)]();if(this[_0x340ad5(0x650)]()==='border')this[_0x340ad5(0x6e1)]();},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x703)]=function(){const _0x386012=_0x444cf3;if($gameTemp[_0x386012(0x72c)]())this[_0x386012(0x3a5)](),this['_requestRefresh']=![],$gameTemp[_0x386012(0xae8)]();else this[_0x386012(0x96a)]&&(this['_requestRefresh']=![],this['refresh'](),this[_0x386012(0x6e9)]());},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x81f)]=function(){const _0xbd9884=_0x444cf3;Window_StatusBase[_0xbd9884(0x8f4)][_0xbd9884(0x81f)][_0xbd9884(0x4a6)](this);if(!$gameSystem['isSideView']())this[_0xbd9884(0x60e)]();},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x479)]=function(){const _0xc5f8f6=_0x444cf3;if(this[_0xc5f8f6(0x427)]===Window_BattleStatus)return;Window_StatusBase[_0xc5f8f6(0x8f4)][_0xc5f8f6(0x479)][_0xc5f8f6(0x4a6)](this);},Window_BattleStatus[_0x444cf3(0x8f4)]['drawBackgroundRect']=function(_0x1e5c8a){const _0x191037=_0x444cf3,_0x1d69bc=this['battleLayoutStyle']();switch(_0x1d69bc){case'xp':case _0x191037(0x974):break;case _0x191037(0x471):case'list':case _0x191037(0x8e3):default:return Window_StatusBase[_0x191037(0x8f4)][_0x191037(0x3c6)]['call'](this,_0x1e5c8a);break;}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x466)]=Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x410)],Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x410)]=function(_0x2a8b84){const _0x26a3e1=_0x444cf3,_0x25ddf7=this[_0x26a3e1(0x650)]();switch(_0x25ddf7){case _0x26a3e1(0x628):this[_0x26a3e1(0x3f0)](_0x2a8b84);break;case'xp':this[_0x26a3e1(0x7f2)](_0x2a8b84);break;case _0x26a3e1(0x974):this['drawItemImagePortraitStyle'](_0x2a8b84);break;case'default':case _0x26a3e1(0x8e3):default:VisuMZ[_0x26a3e1(0x7cf)]['Window_BattleStatus_drawItemImage'][_0x26a3e1(0x4a6)](this,_0x2a8b84);break;}},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x518)]=function(_0x3da2bb){const _0x5d2074=_0x444cf3,_0x531ced=this[_0x5d2074(0x650)]();if(!$gameSystem['isSideView']())this[_0x5d2074(0x7ce)](_0x3da2bb);switch(_0x531ced){case _0x5d2074(0x628):this[_0x5d2074(0xa1d)](_0x3da2bb);break;case'xp':case _0x5d2074(0x974):case _0x5d2074(0x471):case _0x5d2074(0x8e3):default:this[_0x5d2074(0x436)](_0x3da2bb);break;}},Window_BattleStatus['prototype']['refreshCursor']=function(){const _0x2197f8=_0x444cf3,_0x1b62aa=this['battleLayoutStyle']();if(['xp'][_0x2197f8(0xa60)](_0x1b62aa)&&!$gameSystem[_0x2197f8(0x718)]()){this[_0x2197f8(0x7f7)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x2197f8(0x8f4)]['refreshCursor']['call'](this);},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x7ce)]=function(_0x3f86b6){const _0x69ccd0=_0x444cf3,_0x3dc10f=this[_0x69ccd0(0x37a)](_0x3f86b6)['battler']();if(!_0x3dc10f)return;const _0x889dd8=this[_0x69ccd0(0x650)](),_0x3d4cdb=this[_0x69ccd0(0x323)](_0x3f86b6);let _0x158bd8=Math[_0x69ccd0(0xa43)](_0x3d4cdb['x']+_0x3d4cdb[_0x69ccd0(0x851)]/0x2)+this[_0x69ccd0(0x644)];[_0x69ccd0(0x628)][_0x69ccd0(0xa60)](_0x889dd8)&&(_0x158bd8=_0x3d4cdb[_0x69ccd0(0x851)]/$gameParty['battleMembers']()[_0x69ccd0(0xa40)],_0x158bd8*=_0x3f86b6,_0x158bd8+=_0x3d4cdb[_0x69ccd0(0x851)]/$gameParty[_0x69ccd0(0x8b4)]()[_0x69ccd0(0xa40)]/0x2);let _0x80eba3=Math['round'](this[_0x69ccd0(0x386)](_0x3f86b6,_0x3dc10f,_0x3d4cdb));_0x3dc10f[_0x69ccd0(0x643)](_0x158bd8,_0x80eba3),this[_0x69ccd0(0x31b)](_0x3dc10f,0x1),_0x3dc10f[_0x69ccd0(0x81f)](),this[_0x69ccd0(0x64b)](),this[_0x69ccd0(0x6e9)]();},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x386)]=function(_0x2f15a3,_0x57957b,_0x2c0fad){const _0x45cffa=_0x444cf3,_0x44caa1=VisuMZ[_0x45cffa(0x7cf)][_0x45cffa(0x52b)][_0x45cffa(0xa4b)],_0xed0b8c=this[_0x45cffa(0x650)]();if(_0xed0b8c==='xp'){const _0x26aebf=_0x44caa1['XPSpriteYLocation'];switch(_0x26aebf[_0x45cffa(0x1fd)]()['trim']()){case _0x45cffa(0x2ae):return _0x2c0fad[_0x45cffa(0x661)]-_0x57957b['_shadowSprite'][_0x45cffa(0x661)]/0x4;break;case _0x45cffa(0xa98):const _0x2b0fa9=_0x44caa1[_0x45cffa(0x327)];return(_0x2c0fad[_0x45cffa(0x661)]+(_0x57957b[_0x45cffa(0x661)]||_0x2b0fa9))/0x2;break;case'top':return 0x0;case _0x45cffa(0x21a):default:return this[_0x45cffa(0x6f6)](_0x2c0fad);break;}}else{if(_0xed0b8c===_0x45cffa(0x974)){}}return _0x57957b[_0x45cffa(0x661)];},Sprite_Name['prototype'][_0x444cf3(0x759)]=function(){return 0x24;},Sprite_Name['prototype']['redraw']=function(){const _0x5480b0=_0x444cf3,_0x22ace1=this[_0x5480b0(0x21a)](),_0x53e382=this['bitmapWidth'](),_0x1e0f26=this[_0x5480b0(0x759)]();this['setupFont'](),this['bitmap'][_0x5480b0(0x667)](),this[_0x5480b0(0x1ff)][_0x5480b0(0x454)](_0x22ace1,0x4,0x0,_0x53e382,_0x1e0f26,_0x5480b0(0x992));},Bitmap['prototype'][_0x444cf3(0x454)]=function(_0x543497,_0x52c27d,_0x5f28d0,_0x51791a,_0x2366e1,_0x1341e5){const _0x5ec1f9=_0x444cf3,_0x1359a0=this['context'],_0x386224=_0x1359a0[_0x5ec1f9(0x60a)];_0x51791a=_0x51791a||0xffffffff;let _0x3db92e=_0x52c27d,_0x35e1fb=Math[_0x5ec1f9(0xa43)](_0x5f28d0+0x18/0x2+this[_0x5ec1f9(0x622)]*0.35);_0x1341e5==='center'&&(_0x3db92e+=_0x51791a/0x2),_0x1341e5===_0x5ec1f9(0x934)&&(_0x3db92e+=_0x51791a),_0x1359a0[_0x5ec1f9(0x4cd)](),_0x1359a0[_0x5ec1f9(0x560)]=this['_makeFontNameText'](),_0x1359a0[_0x5ec1f9(0x42e)]=_0x1341e5,_0x1359a0['textBaseline']=_0x5ec1f9(0x8ee),_0x1359a0['globalAlpha']=0x1,this['_drawTextOutline'](_0x543497,_0x3db92e,_0x35e1fb,_0x51791a),_0x1359a0[_0x5ec1f9(0x60a)]=_0x386224,this[_0x5ec1f9(0xa61)](_0x543497,_0x3db92e,_0x35e1fb,_0x51791a),_0x1359a0[_0x5ec1f9(0x884)](),this[_0x5ec1f9(0x4a3)][_0x5ec1f9(0x7b9)]();},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x6f6)]=function(_0x2a8d1a){const _0x365dc0=_0x444cf3;return this[_0x365dc0(0x4f2)](_0x2a8d1a)-this['gaugeLineHeight']();},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x3f0)]=function(_0x36be8d){const _0x2cbb6c=_0x444cf3;if(!VisuMZ[_0x2cbb6c(0x7cf)][_0x2cbb6c(0x52b)][_0x2cbb6c(0xa4b)][_0x2cbb6c(0x7f4)])return;const _0x4c7104=this[_0x2cbb6c(0x37a)](_0x36be8d),_0x34ca28=this[_0x2cbb6c(0x323)](_0x36be8d);_0x34ca28['width']=ImageManager[_0x2cbb6c(0x95f)],_0x34ca28[_0x2cbb6c(0x661)]-=0x2,this[_0x2cbb6c(0x2b1)](_0x4c7104,_0x34ca28['x']+0x1,_0x34ca28['y']+0x1,_0x34ca28[_0x2cbb6c(0x851)],_0x34ca28[_0x2cbb6c(0x661)]);},Window_BattleStatus['prototype']['drawItemStatusListStyle']=function(_0x3a6fba){const _0x48827c=_0x444cf3,_0x5c433b=VisuMZ[_0x48827c(0x7cf)][_0x48827c(0x52b)][_0x48827c(0xa4b)],_0x3a21bc=$dataSystem[_0x48827c(0x61a)]?0x4:0x3,_0x368e21=_0x3a21bc*0x80+(_0x3a21bc-0x1)*0x8+0x4,_0x2725a5=this[_0x48827c(0x37a)](_0x3a6fba),_0x5aa27f=this[_0x48827c(0x323)](_0x3a6fba);let _0x221bdc=_0x5aa27f['x']+this['padding'];_0x5c433b[_0x48827c(0x7f4)]?_0x221bdc=_0x5aa27f['x']+ImageManager[_0x48827c(0x95f)]+0x8:_0x221bdc+=ImageManager[_0x48827c(0x5b6)];const _0x139eec=Math[_0x48827c(0xa43)](Math[_0x48827c(0x349)](_0x5aa27f['x']+_0x5aa27f[_0x48827c(0x851)]-_0x368e21,_0x221bdc)),_0xc3c9f7=Math[_0x48827c(0xa43)](_0x5aa27f['y']+(_0x5aa27f[_0x48827c(0x661)]-Sprite_Name[_0x48827c(0x8f4)][_0x48827c(0x759)]())/0x2),_0x4db2d9=Math[_0x48827c(0xa43)](_0x139eec-ImageManager[_0x48827c(0x5b6)]/0x2-0x4),_0x330019=Math[_0x48827c(0xa43)](_0x5aa27f['y']+(_0x5aa27f[_0x48827c(0x661)]-ImageManager[_0x48827c(0x56a)])/0x2+ImageManager[_0x48827c(0x56a)]/0x2);let _0x581439=_0x139eec+0x88;const _0x107c04=_0xc3c9f7;this[_0x48827c(0xa4c)](_0x2725a5,_0x139eec-0x4+(_0x5c433b['TpbGaugeOffsetX']||0x0),_0xc3c9f7+(_0x5c433b[_0x48827c(0x821)]||0x0)),this['placeActorName'](_0x2725a5,_0x139eec+(_0x5c433b[_0x48827c(0x429)]||0x0),_0xc3c9f7+(_0x5c433b[_0x48827c(0x27d)]||0x0)),this[_0x48827c(0x949)](_0x2725a5,_0x4db2d9+(_0x5c433b['StateIconOffsetX']||0x0),_0x330019+(_0x5c433b[_0x48827c(0x80d)]||0x0)),this[_0x48827c(0x348)](_0x2725a5,'hp',_0x581439+0x88*0x0+(_0x5c433b[_0x48827c(0x8a1)]||0x0),_0x107c04+(_0x5c433b['HpGaugeOffsetY']||0x0)),this[_0x48827c(0x348)](_0x2725a5,'mp',_0x581439+0x88*0x1+(_0x5c433b[_0x48827c(0x8a2)]||0x0),_0x107c04+(_0x5c433b[_0x48827c(0x8a7)]||0x0)),$dataSystem[_0x48827c(0x61a)]&&this[_0x48827c(0x348)](_0x2725a5,'tp',_0x581439+0x88*0x2+(_0x5c433b[_0x48827c(0x4fe)]||0x0),_0x107c04+(_0x5c433b['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x444cf3(0x8f4)]['drawItemImageXPStyle']=function(_0xb7891d){const _0x7a6ece=_0x444cf3;if(!$gameSystem[_0x7a6ece(0x718)]())return;VisuMZ[_0x7a6ece(0x7cf)]['Window_BattleStatus_drawItemImage'][_0x7a6ece(0x4a6)](this,_0xb7891d);},Window_BattleStatus[_0x444cf3(0x8f4)]['drawItemStatusXPStyle']=function(_0x137d4d){const _0x4cc6b0=_0x444cf3,_0x4492d0=VisuMZ[_0x4cc6b0(0x7cf)][_0x4cc6b0(0x52b)][_0x4cc6b0(0xa4b)],_0x1627a3=this[_0x4cc6b0(0x37a)](_0x137d4d),_0x5c9678=this[_0x4cc6b0(0x323)](_0x137d4d),_0x2916df=Math[_0x4cc6b0(0xa43)](_0x5c9678['x']+(_0x5c9678['width']-0x80)/0x2),_0x461a3f=this[_0x4cc6b0(0x6f6)](_0x5c9678);let _0x34c7ba=_0x2916df-ImageManager[_0x4cc6b0(0x5b6)]/0x2-0x4,_0x2609a7=_0x461a3f+ImageManager[_0x4cc6b0(0x56a)]/0x2;_0x34c7ba-ImageManager[_0x4cc6b0(0x5b6)]/0x2<_0x5c9678['x']&&(_0x34c7ba=_0x2916df+ImageManager[_0x4cc6b0(0x5b6)]/0x2-0x4,_0x2609a7=_0x461a3f-ImageManager[_0x4cc6b0(0x56a)]/0x2);const _0x36a686=_0x2916df,_0x15768b=this[_0x4cc6b0(0x4f2)](_0x5c9678);this[_0x4cc6b0(0xa4c)](_0x1627a3,_0x2916df+(_0x4492d0['TpbGaugeOffsetX']||0x0),_0x461a3f+(_0x4492d0[_0x4cc6b0(0x821)]||0x0)),this['placeActorName'](_0x1627a3,_0x2916df+(_0x4492d0[_0x4cc6b0(0x429)]||0x0),_0x461a3f+(_0x4492d0[_0x4cc6b0(0x27d)]||0x0)),this[_0x4cc6b0(0x949)](_0x1627a3,_0x34c7ba+(_0x4492d0[_0x4cc6b0(0x22e)]||0x0),_0x2609a7+(_0x4492d0[_0x4cc6b0(0x80d)]||0x0)),this['placeGauge'](_0x1627a3,'hp',_0x36a686+(_0x4492d0[_0x4cc6b0(0x8a1)]||0x0),_0x15768b+(_0x4492d0[_0x4cc6b0(0x850)]||0x0)),this[_0x4cc6b0(0x348)](_0x1627a3,'mp',_0x36a686+(_0x4492d0[_0x4cc6b0(0x8a2)]||0x0),_0x15768b+this[_0x4cc6b0(0x273)]()+(_0x4492d0[_0x4cc6b0(0x8a7)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x4cc6b0(0x348)](_0x1627a3,'tp',_0x36a686+(_0x4492d0[_0x4cc6b0(0x4fe)]||0x0),_0x15768b+this[_0x4cc6b0(0x273)]()*0x2+(_0x4492d0[_0x4cc6b0(0x3f6)]||0x0));},Window_BattleStatus['prototype'][_0x444cf3(0x907)]=function(_0x3f3ff3){const _0x4ecaba=_0x444cf3;if(!VisuMZ[_0x4ecaba(0x7cf)][_0x4ecaba(0x52b)][_0x4ecaba(0xa4b)][_0x4ecaba(0x42a)])return![];if(_0x3f3ff3[_0x4ecaba(0x561)]())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x3f3ff3[_0x4ecaba(0xab4)]();},Game_Actor[_0x444cf3(0x8f4)][_0x444cf3(0x683)]=function(){const _0x396dd7=_0x444cf3;if(this['actor']()['note'][_0x396dd7(0x6b8)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x396dd7(0x37a)]()[_0x396dd7(0x1cd)][_0x396dd7(0x6b8)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor['prototype'][_0x444cf3(0x971)]=function(){const _0x2fb3eb=_0x444cf3;if(this[_0x2fb3eb(0x37a)]()[_0x2fb3eb(0x1cd)][_0x2fb3eb(0x6b8)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x2fb3eb(0x37a)]()[_0x2fb3eb(0x1cd)][_0x2fb3eb(0x6b8)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x444cf3(0x8f4)]['drawItemImagePortraitStyle']=function(_0x9066b5){const _0x255142=_0x444cf3,_0x235653=this[_0x255142(0x37a)](_0x9066b5);if(this['showPortraits'](_0x235653)){const _0xc2f3f1=_0x255142(0x7ad)['format'](_0x235653[_0x255142(0x58b)]()),_0x1ebc91=this[_0x255142(0x999)](_0xc2f3f1,Sprite),_0x48f224=_0x235653[_0x255142(0x1db)]();_0x48f224!==''?_0x1ebc91[_0x255142(0x1ff)]=ImageManager['loadPicture'](_0x48f224):_0x1ebc91[_0x255142(0x1ff)]=ImageManager[_0x255142(0x261)];const _0x1fec57=this['itemRect'](_0x9066b5);_0x1ebc91[_0x255142(0x7ff)]['x']=0.5,_0x1ebc91[_0x255142(0x7ff)]['y']=0x1;let _0x2a84b9=Math[_0x255142(0xa43)](_0x1fec57['x']+_0x1fec57[_0x255142(0x851)]/0x2)+this[_0x255142(0x644)];_0x2a84b9+=_0x235653[_0x255142(0x683)]();let _0x12a42e=Math[_0x255142(0xa43)](this[_0x255142(0x661)]);_0x12a42e+=_0x235653[_0x255142(0x971)](),_0x1ebc91[_0x255142(0x1ef)](_0x2a84b9,_0x12a42e);const _0x58a94a=VisuMZ['BattleCore'][_0x255142(0x52b)][_0x255142(0xa4b)]['PortraitScale'];_0x1ebc91[_0x255142(0x3c8)]['x']=_0x58a94a,_0x1ebc91[_0x255142(0x3c8)]['y']=_0x58a94a,_0x1ebc91[_0x255142(0x81f)]();}else{const _0x2acb7c=this[_0x255142(0x882)](_0x9066b5);this[_0x255142(0x2b1)](_0x235653,_0x2acb7c['x'],_0x2acb7c['y'],_0x2acb7c[_0x255142(0x851)],_0x2acb7c[_0x255142(0x661)]);}},Window_BattleStatus[_0x444cf3(0x8f4)]['createInnerPortrait']=function(_0x251619,_0x2ab058){const _0x2878e6=_0x444cf3,_0x5bf201=this[_0x2878e6(0x1ba)];if(_0x5bf201[_0x251619])return _0x5bf201[_0x251619];else{const _0x571f90=new _0x2ab058();return _0x5bf201[_0x251619]=_0x571f90,this[_0x2878e6(0x658)](_0x571f90),this[_0x2878e6(0x658)](this[_0x2878e6(0x55f)]),_0x571f90;}},Window_BattleStatus['prototype'][_0x444cf3(0x6d3)]=function(){const _0x2ee0a9=_0x444cf3;this[_0x2ee0a9(0x4a0)](),this[_0x2ee0a9(0x363)](),Window_StatusBase['prototype']['_createClientArea'][_0x2ee0a9(0x4a6)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x4a0)]=function(){const _0x5d9d9d=_0x444cf3;this[_0x5d9d9d(0x55f)]=new Sprite(),this[_0x5d9d9d(0x55f)]['filters']=[new PIXI[(_0x5d9d9d(0x756))][(_0x5d9d9d(0x371))]()],this['_cursorArea']['filterArea']=new Rectangle(),this[_0x5d9d9d(0x55f)]['move'](this['_padding'],this[_0x5d9d9d(0x23a)]),this[_0x5d9d9d(0x353)](this[_0x5d9d9d(0x55f)]);},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x363)]=function(){const _0x51ec18=_0x444cf3;this[_0x51ec18(0x3aa)]=new Sprite(),this[_0x51ec18(0x353)](this[_0x51ec18(0x3aa)]);},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x64b)]=function(){const _0x1a5ca8=_0x444cf3;this[_0x1a5ca8(0x3aa)]&&this[_0x1a5ca8(0x353)](this[_0x1a5ca8(0x3aa)]);},Window_BattleStatus['prototype'][_0x444cf3(0x4fb)]=function(){const _0x33d062=_0x444cf3;this['_damageContainer']=new Sprite(),this[_0x33d062(0x353)](this[_0x33d062(0x281)]);},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x762)]=function(){const _0x14ad63=_0x444cf3;this['_cursorSprite']=new Sprite();for(let _0x309212=0x0;_0x309212<0x9;_0x309212++){this[_0x14ad63(0xacd)][_0x14ad63(0x353)](new Sprite());}this[_0x14ad63(0x55f)][_0x14ad63(0x353)](this[_0x14ad63(0xacd)]);},Window_BattleStatus['prototype'][_0x444cf3(0x699)]=function(){const _0x51ff11=_0x444cf3;Window_StatusBase[_0x51ff11(0x8f4)][_0x51ff11(0x699)]['call'](this),this[_0x51ff11(0x99f)]();},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x99f)]=function(){const _0x4fb21e=_0x444cf3,_0x12ea1b=this['_padding'];this[_0x4fb21e(0x55f)][_0x4fb21e(0x1ef)](_0x12ea1b,_0x12ea1b),this[_0x4fb21e(0x55f)]['x']=_0x12ea1b-this[_0x4fb21e(0x3e6)]['x'],this[_0x4fb21e(0x55f)]['y']=_0x12ea1b-this['origin']['y'],this['innerWidth']>0x0&&this['innerHeight']>0x0?this[_0x4fb21e(0x55f)][_0x4fb21e(0x30c)]=this[_0x4fb21e(0x94f)]():this[_0x4fb21e(0x55f)][_0x4fb21e(0x30c)]=![];},Window_BattleStatus['prototype'][_0x444cf3(0x961)]=function(){const _0x947491=_0x444cf3;Window_StatusBase[_0x947491(0x8f4)][_0x947491(0x961)][_0x947491(0x4a6)](this),this[_0x947491(0x264)]();},Window_BattleStatus['prototype'][_0x444cf3(0x264)]=function(){const _0x420a78=_0x444cf3,_0x2a6d44=this[_0x420a78(0x55f)][_0x420a78(0x4ab)][_0x420a78(0x7b3)](new Point(0x0,0x0)),_0x5a73f7=this[_0x420a78(0x55f)][_0x420a78(0x3bd)];_0x5a73f7['x']=_0x2a6d44['x']+this[_0x420a78(0x3e6)]['x'],_0x5a73f7['y']=_0x2a6d44['y']+this[_0x420a78(0x3e6)]['y'],_0x5a73f7[_0x420a78(0x851)]=this['innerWidth'],_0x5a73f7[_0x420a78(0x661)]=this[_0x420a78(0x202)];},Window_BattleStatus['prototype'][_0x444cf3(0x95b)]=function(_0x13bc4d){const _0x501130=_0x444cf3;if(this[_0x501130(0x650)]()!==_0x501130(0x974))return;this[_0x501130(0x41a)](_0x13bc4d[_0x501130(0xaa6)]());},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x524)]=function(_0x33a1fe,_0x361ce5){const _0x3b4c52=_0x444cf3;if(!this[_0x3b4c52(0x281)])return;if(!_0x33a1fe)return;if(!_0x361ce5)return;const _0x44a4e5=this[_0x3b4c52(0x323)](_0x361ce5[_0x3b4c52(0xaa6)]());_0x44a4e5['x']+=_0x44a4e5[_0x3b4c52(0x851)]/0x2+this[_0x3b4c52(0x644)],_0x33a1fe['x']=_0x44a4e5['x'],_0x33a1fe['y']=_0x44a4e5['y'],this[_0x3b4c52(0x281)][_0x3b4c52(0x353)](_0x33a1fe);},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0xb1d)]=function(_0x5d1b74){const _0x262c73=_0x444cf3;if(!this[_0x262c73(0x281)])return;if(!_0x5d1b74)return;this[_0x262c73(0x281)][_0x262c73(0x6b1)](_0x5d1b74);},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x6e1)]=function(){const _0x44917f=_0x444cf3;if(!this[_0x44917f(0x70c)]())return;if(!this[_0x44917f(0x688)])this['createBorderStylePortraitSprite']();this[_0x44917f(0x656)](),this[_0x44917f(0x1df)]();},Window_BattleStatus[_0x444cf3(0x8f4)]['isBorderStylePortraitShown']=function(){const _0x5202e9=_0x444cf3;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ['BattleCore'][_0x5202e9(0x52b)][_0x5202e9(0xa4b)]['ShowPortraitsBorderStyle'];},Window_BattleStatus['prototype'][_0x444cf3(0x88b)]=function(){const _0x3c9326=_0x444cf3;this[_0x3c9326(0x688)]=new Sprite();const _0x335bab=SceneManager[_0x3c9326(0xa67)],_0x40fab6=_0x335bab[_0x3c9326(0x3eb)][_0x3c9326(0x2c5)](_0x335bab[_0x3c9326(0x495)]);_0x335bab['addChildAt'](this['_borderPortraitSprite'],_0x40fab6),this[_0x3c9326(0x688)][_0x3c9326(0x7ff)]['x']=0.5,this[_0x3c9326(0x688)][_0x3c9326(0x7ff)]['y']=0x1;const _0x4dd986=VisuMZ[_0x3c9326(0x7cf)]['Settings'][_0x3c9326(0xa4b)][_0x3c9326(0x714)];this['_borderPortraitSprite'][_0x3c9326(0x3c8)]['x']=_0x4dd986,this['_borderPortraitSprite'][_0x3c9326(0x3c8)]['y']=_0x4dd986,this[_0x3c9326(0x688)]['y']=this['y']+this[_0x3c9326(0x661)],this[_0x3c9326(0xa48)]=0x0;},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x7c0)]=function(){const _0x3016a4=_0x444cf3;return BattleManager[_0x3016a4(0x973)]();},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x656)]=function(){const _0x5230bf=_0x444cf3;this[_0x5230bf(0x688)][_0x5230bf(0x30c)]=this[_0x5230bf(0x7c0)]();const _0xc02dc7=BattleManager[_0x5230bf(0x37a)](),_0x3a39f7=_0xc02dc7?_0xc02dc7[_0x5230bf(0x1db)]()||'':'';if(_0xc02dc7===this[_0x5230bf(0x688)][_0x5230bf(0x37a)]&&_0x3a39f7===this[_0x5230bf(0x688)][_0x5230bf(0xa86)])return;this[_0x5230bf(0x688)]['actor']=_0xc02dc7||this[_0x5230bf(0x688)][_0x5230bf(0x37a)],this[_0x5230bf(0x688)][_0x5230bf(0xa86)]=_0x3a39f7;if(!_0xc02dc7)return;else{if(_0x3a39f7===''){this[_0x5230bf(0x688)][_0x5230bf(0x1ff)]=ImageManager['_emptyBitmap'],this[_0x5230bf(0x688)][_0x5230bf(0xa86)]='';return;}else{const _0x2d2479=ImageManager[_0x5230bf(0x86c)](_0x3a39f7);this[_0x5230bf(0x688)][_0x5230bf(0x291)]=0x0,_0x2d2479[_0x5230bf(0x4a7)](this[_0x5230bf(0x943)][_0x5230bf(0x2fa)](this,_0x2d2479));}}},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x943)]=function(_0xfb8e5a){const _0x4864f2=_0x444cf3;this['_borderPortraitDuration']=0x14,this['_borderPortraitSprite'][_0x4864f2(0x1ff)]=_0xfb8e5a;SceneManager[_0x4864f2(0xa67)][_0x4864f2(0x772)]()?(this[_0x4864f2(0x688)]['x']=0x0,this[_0x4864f2(0x3c9)]=Math['ceil'](_0xfb8e5a['width']/0x2)):(this[_0x4864f2(0x688)]['x']=this[_0x4864f2(0x851)],this['_borderPortraitTargetX']=this['width']*0x3/0x4);this['_borderPortraitSprite'][_0x4864f2(0x291)]=0x0,this[_0x4864f2(0x688)]['y']=this['y']+this[_0x4864f2(0x661)];const _0x577925=BattleManager[_0x4864f2(0x37a)]();_0x577925&&(this[_0x4864f2(0x3c9)]+=_0x577925[_0x4864f2(0x683)](),this[_0x4864f2(0x688)]['y']+=_0x577925[_0x4864f2(0x971)]());},Window_BattleStatus[_0x444cf3(0x8f4)][_0x444cf3(0x1df)]=function(){const _0x333377=_0x444cf3;if(this[_0x333377(0xa48)]>0x0){const _0x3bf6e8=this['_borderPortraitDuration'],_0x481b3a=this[_0x333377(0x688)];_0x481b3a['x']=(_0x481b3a['x']*(_0x3bf6e8-0x1)+this[_0x333377(0x3c9)])/_0x3bf6e8,_0x481b3a[_0x333377(0x291)]=(_0x481b3a['opacity']*(_0x3bf6e8-0x1)+0xff)/_0x3bf6e8,this[_0x333377(0xa48)]--;}},Window_BattleStatus[_0x444cf3(0x8f4)]['updateEffectContainers']=function(){const _0x309ff1=_0x444cf3;return;this[_0x309ff1(0x3aa)]&&(this[_0x309ff1(0x3aa)]['x']=this['x'],this[_0x309ff1(0x3aa)]['y']=this['y']),this[_0x309ff1(0x281)]&&(this[_0x309ff1(0x281)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus['prototype'][_0x444cf3(0x3d5)]=function(){const _0x5e8e06=_0x444cf3,_0x177a5e=VisuMZ['BattleCore'][_0x5e8e06(0x52b)][_0x5e8e06(0xa4b)];if(_0x177a5e[_0x5e8e06(0x952)]){const _0x12edaa=new Sprite();_0x12edaa[_0x5e8e06(0x1ff)]=ImageManager[_0x5e8e06(0x8c1)](_0x177a5e[_0x5e8e06(0x952)]),_0x12edaa['x']=_0x177a5e[_0x5e8e06(0x629)]||0x0,_0x12edaa['y']=_0x177a5e[_0x5e8e06(0x3b3)]||0x0,this[_0x5e8e06(0x658)](_0x12edaa),this[_0x5e8e06(0x870)]=_0x12edaa;}if(_0x177a5e['StatusWindowAttachmentFront']){const _0x54ff95=new Sprite();_0x54ff95[_0x5e8e06(0x1ff)]=ImageManager[_0x5e8e06(0x8c1)](_0x177a5e[_0x5e8e06(0x799)]),_0x54ff95['x']=_0x177a5e[_0x5e8e06(0xa96)]||0x0,_0x54ff95['y']=_0x177a5e[_0x5e8e06(0x525)]||0x0,this['addChild'](_0x54ff95),this['_frontAttachmentSprite']=_0x54ff95;}},Window_BattleStatus['prototype'][_0x444cf3(0x6e9)]=function(){const _0x2628bc=_0x444cf3;this['_frontAttachmentSprite']&&this[_0x2628bc(0x353)](this[_0x2628bc(0x45e)]),this['_backAttachmentSprite']&&this[_0x2628bc(0x658)](this[_0x2628bc(0x870)]);},Window_BattleActor[_0x444cf3(0x8f4)][_0x444cf3(0x794)]=function(){const _0x13f156=_0x444cf3;return this[_0x13f156(0x6d7)]();},Window_BattleActor[_0x444cf3(0x8f4)]['isActionSelectionValid']=function(){const _0x10644f=_0x444cf3,_0x12123f=BattleManager[_0x10644f(0x2d5)]();if(!_0x12123f)return!![];if(!_0x12123f['item']())return!![];const _0x1dc006=this[_0x10644f(0x37a)](this[_0x10644f(0xaa6)]()),_0x223e40=_0x12123f[_0x10644f(0x39a)]()[_0x10644f(0x1cd)];if(_0x12123f[_0x10644f(0x5db)]()){if(_0x1dc006===BattleManager[_0x10644f(0x37a)]())return![];}if(_0x12123f[_0x10644f(0x50c)]()){if(!_0x1dc006['isDead']())return![];}if(_0x12123f['isForAliveFriend']()){if(!_0x1dc006[_0x10644f(0xad2)]())return![];}return!![];},Window_BattleActor['prototype'][_0x444cf3(0x1fc)]=function(_0x52beaa){const _0x136ec7=_0x444cf3;this[_0x136ec7(0x8dc)]=_0x52beaa;},VisuMZ['BattleCore'][_0x444cf3(0x878)]=Window_BattleActor[_0x444cf3(0x8f4)][_0x444cf3(0x5c8)],Window_BattleActor[_0x444cf3(0x8f4)][_0x444cf3(0x5c8)]=function(){const _0x26b341=_0x444cf3;Window_BattleStatus[_0x26b341(0x8f4)][_0x26b341(0x5c8)][_0x26b341(0x4a6)](this),this['_enemyWindowMode']?this[_0x26b341(0x5b7)]():VisuMZ[_0x26b341(0x7cf)][_0x26b341(0x878)]['call'](this);},Window_BattleActor[_0x444cf3(0x8f4)][_0x444cf3(0x5b7)]=function(){const _0x5a364d=_0x444cf3,_0x2afb24=SceneManager[_0x5a364d(0xa67)][_0x5a364d(0x6d5)];if(!_0x2afb24)return;this['_doubleTouch']=![];const _0x453079=this[_0x5a364d(0xa66)]();if(_0x453079>=0x0){this[_0x5a364d(0x76a)](_0x453079);if(TouchInput[_0x5a364d(0x4a1)]()){const _0x146157=$gameParty['members']()[_0x453079],_0x675e9=_0x2afb24[_0x5a364d(0x95e)][_0x5a364d(0x2c5)](_0x146157);_0x675e9>=0x0&&(_0x2afb24[_0x5a364d(0x76a)](_0x675e9),_0x2afb24['processOk']());}}},Window_BattleActor[_0x444cf3(0x8f4)][_0x444cf3(0x4bd)]=function(){const _0x46bb15=_0x444cf3;this[_0x46bb15(0x8dc)]&&(this[_0x46bb15(0x445)]++,this[_0x46bb15(0x257)]=!![]);const _0x1ff30a=Window_BattleStatus[_0x46bb15(0x8f4)][_0x46bb15(0x4bd)]['call'](this);return this[_0x46bb15(0x8dc)]&&(this[_0x46bb15(0x257)]=![]),_0x1ff30a;},VisuMZ['BattleCore'][_0x444cf3(0xa0d)]=Window_BattleActor[_0x444cf3(0x8f4)][_0x444cf3(0x81f)],Window_BattleActor[_0x444cf3(0x8f4)][_0x444cf3(0x81f)]=function(){const _0x491be0=_0x444cf3;VisuMZ[_0x491be0(0x7cf)][_0x491be0(0xa0d)][_0x491be0(0x4a6)](this);const _0x1bc890=BattleManager[_0x491be0(0x2d5)]();if(_0x1bc890){const _0x122cd2=$gameParty[_0x491be0(0xaf5)]();_0x1bc890['canSingleOrMultipleSelect']()&&_0x122cd2[_0x491be0(0xa40)]>0x1&&this[_0x491be0(0xa5a)](_0x491be0(0x26b),this[_0x491be0(0x75c)][_0x491be0(0x2fa)](this));}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x9d6)]=Window_BattleActor['prototype'][_0x444cf3(0x479)],Window_BattleActor['prototype']['hide']=function(){const _0x3cc647=_0x444cf3;VisuMZ[_0x3cc647(0x7cf)][_0x3cc647(0x9d6)][_0x3cc647(0x4a6)](this),delete this['_handlers'][_0x3cc647(0x1c4)],delete this['_handlers'][_0x3cc647(0x26b)];},Window_BattleActor['prototype']['selectAllActors']=function(){const _0x52fb0c=_0x444cf3,_0x5ef215=BattleManager['inputtingAction']();if(_0x5ef215)_0x5ef215[_0x52fb0c(0x8e2)](_0x52fb0c(0x428));this['processOk']();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x9cd)]=Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x207)],Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(_0x1766f2){const _0x5238bb=_0x444cf3;this[_0x5238bb(0x322)]=null,VisuMZ[_0x5238bb(0x7cf)][_0x5238bb(0x9cd)][_0x5238bb(0x4a6)](this,_0x1766f2);if(Imported[_0x5238bb(0x660)]){if(VisuMZ[_0x5238bb(0x887)][_0x5238bb(0x95c)]<1.12){let _0x45eeb1='';_0x45eeb1+=_0x5238bb(0x66c),_0x45eeb1+=_0x5238bb(0x3d6),_0x45eeb1+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x45eeb1),SceneManager[_0x5238bb(0x431)]();}}},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x9ef)]=function(){const _0xc8a7d7=_0x444cf3;return this[_0xc8a7d7(0x24d)]();},VisuMZ[_0x444cf3(0x7cf)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x444cf3(0x8f4)]['show'],Window_BattleEnemy[_0x444cf3(0x8f4)]['show']=function(){const _0x3d5bfe=_0x444cf3;VisuMZ[_0x3d5bfe(0x7cf)]['Window_BattleEnemy_show']['call'](this),this['y']=Graphics[_0x3d5bfe(0x661)]*0xa,this[_0x3d5bfe(0x66e)]()&&this[_0x3d5bfe(0xa1c)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x82f)]=Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x479)],Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x479)]=function(){const _0x32eaf2=_0x444cf3;VisuMZ['BattleCore'][_0x32eaf2(0x82f)][_0x32eaf2(0x4a6)](this),$gameParty['select'](null),delete this[_0x32eaf2(0x728)][_0x32eaf2(0x1c4)],delete this['_handlers']['pagedown'];},Window_BattleEnemy[_0x444cf3(0x8f4)]['validTargets']=function(){const _0x2c019c=_0x444cf3;let _0x27ddf1=$gameTroop[_0x2c019c(0xaf5)]();const _0x1415f4=BattleManager['inputtingAction']();if(_0x1415f4){_0x1415f4[_0x2c019c(0x3b6)]()&&_0x27ddf1[_0x2c019c(0xa40)]>0x1&&this[_0x2c019c(0xa5a)](_0x2c019c(0x1c4),this[_0x2c019c(0x27e)]['bind'](this));if(_0x1415f4[_0x2c019c(0x537)]()){const _0xe6122=$gameParty[_0x2c019c(0xaf5)]();_0x27ddf1=_0x27ddf1[_0x2c019c(0x66d)](_0xe6122),_0x1415f4['canSingleOrMultipleSelect']()&&_0xe6122[_0x2c019c(0xa40)]>0x1&&this[_0x2c019c(0xa5a)]('pagedown',this[_0x2c019c(0x75c)][_0x2c019c(0x2fa)](this));}}return _0x27ddf1;},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x60e)]=function(){const _0x4dee9c=_0x444cf3;this[_0x4dee9c(0x95e)]=this[_0x4dee9c(0x30a)](),this[_0x4dee9c(0x2d7)](),Window_Selectable[_0x4dee9c(0x8f4)][_0x4dee9c(0x60e)][_0x4dee9c(0x4a6)](this);},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x2d7)]=function(){const _0x1a471c=_0x444cf3;this[_0x1a471c(0x95e)][_0x1a471c(0x38a)]((_0x5e0390,_0x38beaa)=>{const _0x2d2990=_0x1a471c;if(_0x5e0390['isActor']()!==_0x38beaa[_0x2d2990(0xa93)]()){if(_0x5e0390[_0x2d2990(0x36e)]())return-0x1;if(_0x38beaa[_0x2d2990(0x36e)]())return 0x1;}if(_0x5e0390[_0x2d2990(0xa93)]()&&_0x38beaa[_0x2d2990(0xa93)]())return _0x5e0390['index']()-_0x38beaa['index']();return _0x5e0390[_0x2d2990(0x516)]()[_0x2d2990(0x3d2)]===_0x38beaa[_0x2d2990(0x516)]()[_0x2d2990(0x3d2)]?_0x5e0390['battler']()['_baseY']-_0x38beaa[_0x2d2990(0x516)]()[_0x2d2990(0x801)]:_0x5e0390[_0x2d2990(0x516)]()[_0x2d2990(0x3d2)]-_0x38beaa[_0x2d2990(0x516)]()[_0x2d2990(0x3d2)];}),SceneManager[_0x1a471c(0x248)]()&&this[_0x1a471c(0x95e)][_0x1a471c(0x478)]();},Window_BattleEnemy['prototype'][_0x444cf3(0x5a2)]=function(){const _0x5a97bf=_0x444cf3,_0x28dcae=VisuMZ[_0x5a97bf(0x7cf)][_0x5a97bf(0x52b)][_0x5a97bf(0x52d)];_0x28dcae['LastSelected']?this['autoSelectLastSelected']():this[_0x5a97bf(0x715)]();},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x3c2)]=function(){const _0xd163a4=_0x444cf3,_0x2d8ccd=BattleManager['inputtingAction']();if(_0x2d8ccd&&_0x2d8ccd[_0xd163a4(0x537)]()){if(_0x2d8ccd[_0xd163a4(0xa59)]()){if(this[_0xd163a4(0x5dd)]&&this[_0xd163a4(0x95e)][_0xd163a4(0xa60)](this[_0xd163a4(0x5dd)])){const _0x587bef=this[_0xd163a4(0x95e)][_0xd163a4(0x2c5)](this[_0xd163a4(0x5dd)]);return this['forceSelect'](_0x587bef);}else return this[_0xd163a4(0x715)]();}}if(this[_0xd163a4(0x322)]&&this[_0xd163a4(0x95e)][_0xd163a4(0xa60)](this[_0xd163a4(0x322)])){const _0x4e7835=this[_0xd163a4(0x95e)][_0xd163a4(0x2c5)](this[_0xd163a4(0x322)]);this[_0xd163a4(0x42c)](_0x4e7835);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x715)]=function(){const _0x1cff87=_0x444cf3,_0x30a460=BattleManager[_0x1cff87(0x2d5)]();if(_0x30a460&&_0x30a460[_0x1cff87(0x537)]()){const _0x3969a5=$gameParty[_0x1cff87(0xaf5)]()[0x0];let _0x23554e=this['_enemies'][_0x1cff87(0x2c5)](_0x3969a5);const _0x534ea5=_0x30a460[_0x1cff87(0x39a)]()[_0x1cff87(0x234)];if(_0x534ea5[_0x1cff87(0x6b8)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this['forceSelect'](_0x23554e);return;}else{if(_0x534ea5[_0x1cff87(0x6b8)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this['forceSelect'](_0x23554e-0x1);return;}}}const _0x59905f=VisuMZ[_0x1cff87(0x7cf)][_0x1cff87(0x52b)][_0x1cff87(0x52d)];let _0xe283d8=![];$gameSystem['isSideView']()?_0xe283d8=_0x59905f[_0x1cff87(0xa85)]:_0xe283d8=_0x59905f['FrontViewSelect'],this[_0x1cff87(0x42c)](_0xe283d8?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x652)]=function(){const _0x271ca8=_0x444cf3;Window_Selectable['prototype'][_0x271ca8(0x652)][_0x271ca8(0x4a6)](this);if(this[_0x271ca8(0x452)]()[_0x271ca8(0x36e)]())this[_0x271ca8(0x322)]=this[_0x271ca8(0x452)]();if(this[_0x271ca8(0x452)]()['isActor']())this[_0x271ca8(0x5dd)]=this[_0x271ca8(0x452)]();},Window_BattleEnemy[_0x444cf3(0x8f4)]['select']=function(_0x20fd31){const _0x3baa02=_0x444cf3;Window_Selectable[_0x3baa02(0x8f4)][_0x3baa02(0x76a)][_0x3baa02(0x4a6)](this,_0x20fd31),$gameTroop['select'](this[_0x3baa02(0x452)]()),$gameParty[_0x3baa02(0x76a)](this[_0x3baa02(0x452)]());if(!this['enemy']())return;if(this[_0x3baa02(0x66e)]()){const _0x797c75=SceneManager[_0x3baa02(0xa67)][_0x3baa02(0x684)];this['enemy']()[_0x3baa02(0xa93)]()?_0x797c75['select'](this[_0x3baa02(0x452)]()[_0x3baa02(0xaa6)]()):_0x797c75[_0x3baa02(0x51e)]();}},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x66e)]=function(){const _0x4f8d8c=_0x444cf3;if(!this[_0x4f8d8c(0x30c)])return![];if($gameSystem['isSideView']())return![];const _0x76ac08=SceneManager[_0x4f8d8c(0xa67)][_0x4f8d8c(0x650)](),_0x10c577=[_0x4f8d8c(0x471),_0x4f8d8c(0x628),'xp',_0x4f8d8c(0x974),_0x4f8d8c(0x8e3)];return _0x10c577[_0x4f8d8c(0xa60)](_0x76ac08);},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0xa1c)]=function(){const _0x338bfe=_0x444cf3,_0x5546fe=SceneManager['_scene'][_0x338bfe(0x684)];_0x5546fe['show'](),_0x5546fe[_0x338bfe(0x1fc)](!![]),_0x5546fe[_0x338bfe(0x60e)](),_0x5546fe['deselect']();const _0x313ad2=SceneManager['_scene'][_0x338bfe(0x650)](),_0x5740be=['xp',_0x338bfe(0x974),_0x338bfe(0x8e3)];if(_0x5740be['includes'](_0x313ad2)){const _0x261623=SceneManager[_0x338bfe(0xa67)][_0x338bfe(0x842)];_0x261623[_0x338bfe(0x3c8)]['y']=0x0;}},Window_BattleEnemy[_0x444cf3(0x8f4)]['closeBattleActorWindow']=function(){const _0x230078=_0x444cf3,_0x4a2ab7=SceneManager[_0x230078(0xa67)][_0x230078(0x684)];_0x4a2ab7['hide'](),_0x4a2ab7[_0x230078(0x1fc)](![]),_0x4a2ab7[_0x230078(0x51e)]();const _0x387f46=SceneManager['_scene'][_0x230078(0x842)];_0x387f46[_0x230078(0x3c8)]['y']=0x1;},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x27e)]=function(){const _0x215ce9=_0x444cf3,_0x6b780f=BattleManager[_0x215ce9(0x2d5)]();if(_0x6b780f)_0x6b780f[_0x215ce9(0x8e2)](_0x215ce9(0x6fa));this[_0x215ce9(0x970)]();},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x75c)]=function(){const _0x19f9bc=_0x444cf3,_0x52a13d=BattleManager[_0x19f9bc(0x2d5)]();if(_0x52a13d)_0x52a13d[_0x19f9bc(0x8e2)](_0x19f9bc(0x428));this['processOk']();},Window_BattleEnemy[_0x444cf3(0x8f4)][_0x444cf3(0x794)]=function(){const _0x5658f4=_0x444cf3;return this[_0x5658f4(0x6d7)]();},Window_BattleEnemy['prototype'][_0x444cf3(0x6d7)]=function(){const _0x54e622=_0x444cf3,_0x10db78=BattleManager[_0x54e622(0x2d5)]();if(!_0x10db78)return!![];if(!_0x10db78[_0x54e622(0x39a)]())return!![];const _0x41521e=this[_0x54e622(0x452)](),_0x1768b8=_0x10db78['item']()[_0x54e622(0x1cd)];if(_0x10db78[_0x54e622(0x5db)]()){if(_0x41521e===BattleManager[_0x54e622(0x37a)]())return![];}return!![];},Window_BattleItem[_0x444cf3(0x8f4)][_0x444cf3(0xa60)]=function(_0x1cc18c){if(!_0x1cc18c)return![];return _0x1cc18c['occasion']===0x0||_0x1cc18c['occasion']===0x1;};function Window_AutoBattleCancel(){const _0x274f54=_0x444cf3;this[_0x274f54(0x207)](...arguments);}Window_AutoBattleCancel[_0x444cf3(0x8f4)]=Object[_0x444cf3(0x1c5)](Window_Base[_0x444cf3(0x8f4)]),Window_AutoBattleCancel[_0x444cf3(0x8f4)][_0x444cf3(0x427)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(_0x4f04c3){const _0x24573b=_0x444cf3;Window_Base['prototype'][_0x24573b(0x207)][_0x24573b(0x4a6)](this,_0x4f04c3),this[_0x24573b(0x9b6)](this['bgType']()),this[_0x24573b(0x60e)]();},Window_AutoBattleCancel[_0x444cf3(0x8f4)][_0x444cf3(0x96f)]=function(){const _0x28c9ff=_0x444cf3;return VisuMZ[_0x28c9ff(0x7cf)][_0x28c9ff(0x52b)]['AutoBattle'][_0x28c9ff(0x6be)];},Window_AutoBattleCancel[_0x444cf3(0x8f4)]['refresh']=function(){const _0x2a30ed=_0x444cf3;this[_0x2a30ed(0x773)][_0x2a30ed(0x667)]();const _0x11343e=VisuMZ[_0x2a30ed(0x7cf)][_0x2a30ed(0x52b)]['AutoBattle'][_0x2a30ed(0x340)],_0x5ec71d=_0x11343e['format'](this[_0x2a30ed(0x9a7)](),this[_0x2a30ed(0x5c5)]()),_0x1cd141=this[_0x2a30ed(0x802)](_0x5ec71d)['width'],_0x491abe=Math[_0x2a30ed(0x93e)]((this[_0x2a30ed(0x625)]-_0x1cd141)/0x2);this[_0x2a30ed(0x2d4)](_0x5ec71d,_0x491abe,0x0,_0x1cd141);},Window_AutoBattleCancel[_0x444cf3(0x8f4)][_0x444cf3(0x9a7)]=function(){const _0x462e82=_0x444cf3;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x462e82(0x9c2)]('ok'):VisuMZ[_0x462e82(0x7cf)]['Settings'][_0x462e82(0x579)][_0x462e82(0x997)];},Window_AutoBattleCancel[_0x444cf3(0x8f4)][_0x444cf3(0x5c5)]=function(){const _0x3ba6ed=_0x444cf3;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x3ba6ed(0x9c2)](_0x3ba6ed(0x717)):VisuMZ[_0x3ba6ed(0x7cf)][_0x3ba6ed(0x52b)][_0x3ba6ed(0x579)]['AutoBattleCancel'];},Window_AutoBattleCancel['prototype'][_0x444cf3(0x7b9)]=function(){const _0x5b2cc6=_0x444cf3;Window_Base[_0x5b2cc6(0x8f4)][_0x5b2cc6(0x7b9)][_0x5b2cc6(0x4a6)](this),this['updateVisibility'](),this['updateCancel']();},Window_AutoBattleCancel[_0x444cf3(0x8f4)][_0x444cf3(0x50f)]=function(){this['visible']=BattleManager['_autoBattle'];},Window_AutoBattleCancel[_0x444cf3(0x8f4)][_0x444cf3(0x98a)]=function(){const _0x2565e3=_0x444cf3;if(!BattleManager[_0x2565e3(0x6b7)])return;(Input['isTriggered']('ok')||Input[_0x2565e3(0x304)](_0x2565e3(0x717))||TouchInput[_0x2565e3(0x4a1)]()||TouchInput[_0x2565e3(0xb22)]())&&(SoundManager['playCancel'](),BattleManager[_0x2565e3(0x6b7)]=![],Input[_0x2565e3(0x667)](),TouchInput[_0x2565e3(0x667)]());};function _0x4ce0(_0x981010,_0x22b023){const _0x64983c=_0x6498();return _0x4ce0=function(_0x4ce063,_0x570872){_0x4ce063=_0x4ce063-0x1b1;let _0x182d79=_0x64983c[_0x4ce063];return _0x182d79;},_0x4ce0(_0x981010,_0x22b023);}function Window_EnemyName(){const _0x3b5acb=_0x444cf3;this[_0x3b5acb(0x207)](...arguments);}Window_EnemyName[_0x444cf3(0x8f4)]=Object[_0x444cf3(0x1c5)](Window_StatusBase[_0x444cf3(0x8f4)]),Window_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x427)]=Window_EnemyName,Window_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(_0x154b4a){const _0xcc246f=_0x444cf3;this[_0xcc246f(0x6fc)]=_0x154b4a,this[_0xcc246f(0x51b)]='';const _0x415846=new Rectangle(0x0,0x0,Graphics[_0xcc246f(0x902)],this[_0xcc246f(0x9fc)]()*0x4);Window_StatusBase['prototype'][_0xcc246f(0x207)]['call'](this,_0x415846),this[_0xcc246f(0x9b6)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0xa23)]=function(){const _0x21bc8b=_0x444cf3;this[_0x21bc8b(0x644)]=0x0;},Window_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x452)]=function(){const _0x6ddbbc=_0x444cf3;return $gameTroop[_0x6ddbbc(0x73e)]()[this['_enemyID']];},Window_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x7b9)]=function(){const _0x26eda6=_0x444cf3;Window_StatusBase[_0x26eda6(0x8f4)][_0x26eda6(0x7b9)][_0x26eda6(0x4a6)](this),this[_0x26eda6(0x452)]()&&this[_0x26eda6(0x452)]()[_0x26eda6(0x21a)]()!==this[_0x26eda6(0x51b)]&&(this['_text']=this[_0x26eda6(0x452)]()[_0x26eda6(0x21a)](),this[_0x26eda6(0x60e)]()),this['updateOpacity'](),this[_0x26eda6(0x4e6)]();},Window_EnemyName[_0x444cf3(0x8f4)][_0x444cf3(0x6a5)]=function(){const _0x28022a=_0x444cf3;if(!this[_0x28022a(0x452)]()){if(this[_0x28022a(0x73c)]>0x0)this[_0x28022a(0x73c)]-=0x10;}else{if(this['enemy']()[_0x28022a(0x678)]()){if(this[_0x28022a(0x73c)]>0x0)this[_0x28022a(0x73c)]-=0x10;}else{if(SceneManager[_0x28022a(0xa67)]['_enemyWindow']&&SceneManager[_0x28022a(0xa67)][_0x28022a(0x6d5)]['active']&&SceneManager[_0x28022a(0xa67)][_0x28022a(0x6d5)][_0x28022a(0x95e)][_0x28022a(0xa60)](this['enemy']())){if(this[_0x28022a(0x73c)]<0xff)this['contentsOpacity']+=0x10;}else this[_0x28022a(0x73c)]>0x0&&(this[_0x28022a(0x73c)]-=0x10);}}},Window_EnemyName['prototype'][_0x444cf3(0x4e6)]=function(){const _0x5209bc=_0x444cf3;if(!this[_0x5209bc(0x452)]())return;SceneManager[_0x5209bc(0x248)]()?this['x']=Graphics[_0x5209bc(0x902)]-this[_0x5209bc(0x452)]()['battler']()[_0x5209bc(0x3d2)]:this['x']=this[_0x5209bc(0x452)]()[_0x5209bc(0x516)]()['_baseX'];this['x']-=Math[_0x5209bc(0xa43)](this['width']/0x2),this['y']=this[_0x5209bc(0x452)]()[_0x5209bc(0x516)]()[_0x5209bc(0x801)]-Math[_0x5209bc(0xa43)](this[_0x5209bc(0x9fc)]()*1.5);const _0x408f6d=VisuMZ[_0x5209bc(0x7cf)][_0x5209bc(0x52b)][_0x5209bc(0x52d)];this['x']+=_0x408f6d[_0x5209bc(0x429)]||0x0,this['y']+=_0x408f6d[_0x5209bc(0x27d)]||0x0;},Window_EnemyName['prototype'][_0x444cf3(0x425)]=function(){const _0x3b9527=_0x444cf3;Window_Base[_0x3b9527(0x8f4)]['resetFontSettings'][_0x3b9527(0x4a6)](this),this[_0x3b9527(0x773)][_0x3b9527(0x622)]=VisuMZ[_0x3b9527(0x7cf)]['Settings'][_0x3b9527(0x52d)][_0x3b9527(0x796)];},Window_EnemyName[_0x444cf3(0x8f4)]['refresh']=function(){const _0x5b8606=_0x444cf3;Window_StatusBase[_0x5b8606(0x8f4)][_0x5b8606(0x60e)][_0x5b8606(0x4a6)](this),this[_0x5b8606(0x773)][_0x5b8606(0x667)]();if(!this[_0x5b8606(0x452)]())return;this[_0x5b8606(0x853)]();},Window_EnemyName[_0x444cf3(0x8f4)]['drawEnemyName']=function(){const _0x2488ff=_0x444cf3;this[_0x2488ff(0x51b)]=this[_0x2488ff(0x452)]()[_0x2488ff(0x21a)]();const _0x33f9c2=this[_0x2488ff(0x802)](this[_0x2488ff(0x51b)])[_0x2488ff(0x851)],_0x2867ef=Math[_0x2488ff(0xa43)]((this[_0x2488ff(0x625)]-_0x33f9c2)/0x2);this[_0x2488ff(0x2d4)](this['_text'],_0x2867ef,0x0,_0x33f9c2+0x8);},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x7c7)]=function(){const _0xa92555=_0x444cf3;return VisuMZ[_0xa92555(0x7cf)][_0xa92555(0x52b)][_0xa92555(0xad1)][_0xa92555(0x6b4)];},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x2c9)]=function(){const _0x2464af=_0x444cf3;return VisuMZ[_0x2464af(0x7cf)][_0x2464af(0x52b)]['BattleLog'][_0x2464af(0x540)];},Window_BattleLog['prototype'][_0x444cf3(0x2b0)]=function(){const _0x11ea05=_0x444cf3;return VisuMZ['BattleCore'][_0x11ea05(0x52b)][_0x11ea05(0xad1)][_0x11ea05(0x8fb)];},Window_BattleLog['prototype'][_0x444cf3(0x274)]=function(){return![];},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x876)]=function(_0x67df65,_0x6edc79){const _0x58e3fe=_0x444cf3;this[_0x58e3fe(0x793)](_0x58e3fe(0x2a4)),BattleManager[_0x58e3fe(0x45b)](_0x67df65,_0x6edc79),this[_0x58e3fe(0x1f8)]();},Window_BattleLog['prototype'][_0x444cf3(0x2a4)]=function(){this['callNextMethod']();},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x87e)]=function(_0x2f188f){const _0x19fb0e=_0x444cf3,_0xff85c4=Array[_0x19fb0e(0x8f4)]['slice'][_0x19fb0e(0x4a6)](arguments,0x1),_0x42bb53={'name':_0x2f188f,'params':_0xff85c4},_0x3470a7=this[_0x19fb0e(0x747)][_0x19fb0e(0x7f8)](_0x3628fe=>_0x3628fe[_0x19fb0e(0x21a)])[_0x19fb0e(0x2c5)](_0x19fb0e(0x2a4));_0x3470a7>=0x0?this['_methods']['splice'](_0x3470a7,0x0,_0x42bb53):this[_0x19fb0e(0x747)][_0x19fb0e(0x87e)](_0x42bb53);},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x793)]=function(_0x19d2de){const _0x36ddd2=_0x444cf3,_0x362034=Array[_0x36ddd2(0x8f4)][_0x36ddd2(0xa4a)][_0x36ddd2(0x4a6)](arguments,0x1);this[_0x36ddd2(0x747)][_0x36ddd2(0x793)]({'name':_0x19d2de,'params':_0x362034});},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x74a)]=function(){const _0x3c9781=_0x444cf3;if(!$gameTemp['isPlaytest']())return;console[_0x3c9781(0x8cf)](this[_0x3c9781(0x747)][_0x3c9781(0x7f8)](_0x57522f=>_0x57522f['name'])['join']('\x0a'));},VisuMZ['BattleCore'][_0x444cf3(0x280)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x60e)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x60e)]=function(){this['_requestRefresh']=!![];},VisuMZ['BattleCore'][_0x444cf3(0x668)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x7b9)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x7b9)]=function(){const _0x77b300=_0x444cf3;VisuMZ[_0x77b300(0x7cf)][_0x77b300(0x668)][_0x77b300(0x4a6)](this);if(this['_requestRefresh'])this[_0x77b300(0x57b)]();},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x57b)]=function(){const _0x579cfb=_0x444cf3;this[_0x579cfb(0x96a)]=![],VisuMZ['BattleCore']['Window_BattleLog_refresh'][_0x579cfb(0x4a6)](this);},Window_BattleLog['prototype'][_0x444cf3(0x54f)]=function(_0x585c5b){const _0x11fea7=_0x444cf3;let _0x4b3293=VisuMZ[_0x11fea7(0x7cf)][_0x11fea7(0x52b)][_0x11fea7(0xad1)][_0x11fea7(0x3f5)][_0x11fea7(0x1fd)]()[_0x11fea7(0x78c)](),_0x3eb346=this['_lines'][_0x585c5b];if(_0x3eb346[_0x11fea7(0x6b8)](/<LEFT>/i))_0x4b3293=_0x11fea7(0x992);else{if(_0x3eb346[_0x11fea7(0x6b8)](/<CENTER>/i))_0x4b3293=_0x11fea7(0xa98);else _0x3eb346['match'](/<RIGHT>/i)&&(_0x4b3293=_0x11fea7(0x934));}_0x3eb346=_0x3eb346[_0x11fea7(0x5c9)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x3eb346=_0x3eb346[_0x11fea7(0x5c9)](/\\I\[0\]/gi,'');const _0x26cb68=this[_0x11fea7(0x1bb)](_0x585c5b);this[_0x11fea7(0x773)][_0x11fea7(0x4af)](_0x26cb68['x'],_0x26cb68['y'],_0x26cb68[_0x11fea7(0x851)],_0x26cb68[_0x11fea7(0x661)]);const _0x2134c7=this['textSizeEx'](_0x3eb346)[_0x11fea7(0x851)];let _0x277920=_0x26cb68['x'];if(_0x4b3293===_0x11fea7(0xa98))_0x277920+=(_0x26cb68[_0x11fea7(0x851)]-_0x2134c7)/0x2;else _0x4b3293==='right'&&(_0x277920+=_0x26cb68['width']-_0x2134c7);this[_0x11fea7(0x2d4)](_0x3eb346,_0x277920,_0x26cb68['y'],_0x2134c7+0x8);},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x548)]=function(_0x535d3c){const _0x1fe147=_0x444cf3;this[_0x1fe147(0xa0c)]['push'](_0x535d3c),this[_0x1fe147(0x60e)](),this['callNextMethod']();},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xac2)]=function(){const _0x516d8a=_0x444cf3;let _0x25bd6a=![];switch(this[_0x516d8a(0x5f6)]){case'effect':_0x25bd6a=this[_0x516d8a(0x9f5)][_0x516d8a(0x5b1)]();break;case'movement':_0x25bd6a=this[_0x516d8a(0x9f5)]['isAnyoneMoving']();break;case'animation':_0x25bd6a=this[_0x516d8a(0x9f5)]['isAnimationPlaying']();break;case _0x516d8a(0x73f):_0x25bd6a=this[_0x516d8a(0x9f5)][_0x516d8a(0xa6c)]();break;case'jump':_0x25bd6a=this[_0x516d8a(0x9f5)]['isAnyoneJumping']();break;case _0x516d8a(0x291):_0x25bd6a=this[_0x516d8a(0x9f5)][_0x516d8a(0x6ea)]();break;}return!_0x25bd6a&&(this['_waitMode']=''),_0x25bd6a;},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x787)]=function(){this['setWaitMode']('animation');},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x3b1)]=function(){const _0x5aaaef=_0x444cf3;this[_0x5aaaef(0x36d)](_0x5aaaef(0x73f));},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x64a)]=function(){const _0x4fe486=_0x444cf3;this[_0x4fe486(0x36d)](_0x4fe486(0x437));},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x22d)]=function(){const _0x37b48d=_0x444cf3;this[_0x37b48d(0x36d)](_0x37b48d(0x291));},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xa64)]=function(){const _0x16c8dd=_0x444cf3,_0x5ef88b=VisuMZ[_0x16c8dd(0x7cf)][_0x16c8dd(0x52b)][_0x16c8dd(0xad1)];if(!_0x5ef88b[_0x16c8dd(0x615)])return;this['push']('addText',_0x5ef88b[_0x16c8dd(0x5e8)]['format']($gameTroop[_0x16c8dd(0x61b)]())),this[_0x16c8dd(0x87e)](_0x16c8dd(0x83e),_0x5ef88b[_0x16c8dd(0x3a8)]),this[_0x16c8dd(0x87e)]('clear');},Window_BattleLog['prototype'][_0x444cf3(0x9ba)]=function(_0x21cdc0,_0x1b9941,_0x469918){const _0x2d840a=_0x444cf3;this['isCustomActionSequence'](_0x1b9941)?BattleManager[_0x2d840a(0xa76)]():this[_0x2d840a(0x4d6)](_0x21cdc0,_0x1b9941,_0x469918);},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x4df)]=function(_0x1105c4){const _0xd4338c=_0x444cf3;if(!SceneManager[_0xd4338c(0xa7a)]())return![];if(!_0x1105c4)return![];if(!_0x1105c4['item']())return![];if(_0x1105c4[_0xd4338c(0x39a)]()[_0xd4338c(0x1cd)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x1105c4[_0xd4338c(0x39a)]()))return!![];return![];},Window_BattleLog['prototype'][_0x444cf3(0x4d6)]=function(_0x509663,_0x41e725,_0xcc978d){const _0x3b6066=_0x444cf3,_0x43b30f=_0x41e725['item']();this[_0x3b6066(0x5ac)](_0x509663,_0x41e725,_0xcc978d),this[_0x3b6066(0x219)](_0x509663,_0x41e725,_0xcc978d),this[_0x3b6066(0x538)](_0x509663,_0x41e725,_0xcc978d);},Window_BattleLog[_0x444cf3(0x8f4)]['displayAction']=function(_0x45b9d9,_0x1d679b){const _0x25e135=_0x444cf3,_0x8f1043=VisuMZ[_0x25e135(0x7cf)][_0x25e135(0x52b)][_0x25e135(0xad1)];_0x8f1043[_0x25e135(0x1b8)]&&this[_0x25e135(0x87e)](_0x25e135(0x548),_0x25e135(0x49f)[_0x25e135(0x7d7)](DataManager[_0x25e135(0x90c)](_0x1d679b)));if(DataManager[_0x25e135(0xa3c)](_0x1d679b)){if(_0x8f1043['ActionSkillMsg1'])this[_0x25e135(0xb06)](_0x1d679b[_0x25e135(0x6b0)],_0x45b9d9,_0x1d679b);if(_0x8f1043['ActionSkillMsg2'])this[_0x25e135(0xb06)](_0x1d679b[_0x25e135(0x7f6)],_0x45b9d9,_0x1d679b);}else{if(_0x8f1043['ActionItemMsg'])this['displayItemMessage'](TextManager[_0x25e135(0x25b)],_0x45b9d9,_0x1d679b);}},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x5ac)]=function(_0x4a176d,_0x5f5ddc,_0x4d5f41){const _0x242023=_0x444cf3,_0x13e5f3=_0x5f5ddc[_0x242023(0x39a)]();this[_0x242023(0x81a)](_0x4a176d,_0x13e5f3),this[_0x242023(0x87e)](_0x242023(0x233),_0x4a176d,_0x4d5f41,!![]),this[_0x242023(0x87e)](_0x242023(0xb0e),_0x4a176d,_0x5f5ddc),this[_0x242023(0x87e)](_0x242023(0x6fe)),this['push'](_0x242023(0x53e),_0x4a176d,_0x5f5ddc),this['push'](_0x242023(0x787));},Window_BattleLog[_0x444cf3(0x8f4)]['createEffectActionSet']=function(_0x552f7b,_0x210e1f,_0xdda4a0){const _0x3b435d=_0x444cf3;if(this[_0x3b435d(0x933)](_0x210e1f))this[_0x3b435d(0x3af)](_0x552f7b,_0x210e1f,_0xdda4a0);else{if(this['isMeleeMultiTargetAction'](_0x210e1f))this['autoMeleeMultiTargetActionSet'](_0x552f7b,_0x210e1f,_0xdda4a0);else _0x210e1f[_0x3b435d(0x4c5)]()?this[_0x3b435d(0x309)](_0x552f7b,_0x210e1f,_0xdda4a0):this[_0x3b435d(0x68a)](_0x552f7b,_0x210e1f,_0xdda4a0);}},Window_BattleLog['prototype']['addMeleeReturnActionSet']=function(_0x42562a,_0x46ccaa,_0xb85f67,_0x1bbcd3){const _0xaebf1a=_0x444cf3;if(_0x46ccaa){const _0x59e363=_0x42562a[_0xaebf1a(0x516)]();this[_0xaebf1a(0x87e)]('performJump',[_0x42562a],_0xb85f67,_0x1bbcd3),this[_0xaebf1a(0x87e)]('performMoveToPoint',_0x42562a,_0x59e363[_0xaebf1a(0x856)],_0x59e363[_0xaebf1a(0xac8)],_0x1bbcd3,![],_0xaebf1a(0xafa)),this['push'](_0xaebf1a(0x9af),[_0x42562a],_0xaebf1a(0x275)),this[_0xaebf1a(0x87e)](_0xaebf1a(0x6fe)),this[_0xaebf1a(0x87e)](_0xaebf1a(0x9af),[_0x42562a],_0xaebf1a(0x7e1));}},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x933)]=function(_0x15e807){const _0x27b7d9=_0x444cf3;if(!_0x15e807['isPhysical']())return![];if(!_0x15e807[_0x27b7d9(0x331)]())return![];if(!_0x15e807[_0x27b7d9(0x89a)]())return![];return VisuMZ['BattleCore'][_0x27b7d9(0x52b)][_0x27b7d9(0x57a)][_0x27b7d9(0x6db)];},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x3af)]=function(_0x2f2dd9,_0x4e6025,_0x441b59){const _0x176916=_0x444cf3,_0x17563c=_0x2f2dd9[_0x176916(0xafe)]()[_0x176916(0x86a)]<0x2,_0x2dd5fd=0x14,_0xa591d5=0x30;let _0x4e82db=!![];_0x441b59[_0x176916(0xa40)]>0x0&&_0x2f2dd9[_0x176916(0xa93)]()===_0x441b59[0x0][_0x176916(0xa93)]()&&(_0x4e82db=![]);_0x17563c&&_0x4e82db&&(this['push'](_0x176916(0x44a),[_0x2f2dd9],_0xa591d5,_0x2dd5fd),this['push'](_0x176916(0x47c),_0x2f2dd9,_0x441b59,_0x176916(0xa1e),_0x2dd5fd,!![],_0x176916(0xafa),!![]),this[_0x176916(0x87e)](_0x176916(0x9af),[_0x2f2dd9],_0x176916(0x7e1)),this['push'](_0x176916(0x6fe)));let _0x2cdfc2=_0x4e6025[_0x176916(0x71f)]()?this['getDualWieldTimes'](_0x2f2dd9):0x1;for(let _0x3ef4f9=0x0;_0x3ef4f9<_0x2cdfc2;_0x3ef4f9++){_0x4e6025[_0x176916(0x71f)]()&&_0x2f2dd9[_0x176916(0xa93)]()&&this['push']('setActiveWeaponSet',_0x2f2dd9,_0x3ef4f9),_0x4e6025[_0x176916(0x39a)]()[_0x176916(0x50d)]<0x0?this[_0x176916(0x309)](_0x2f2dd9,_0x4e6025,_0x441b59):this[_0x176916(0x68a)](_0x2f2dd9,_0x4e6025,_0x441b59);}_0x4e6025['isAttack']()&&_0x2f2dd9[_0x176916(0xa93)]()&&this['push'](_0x176916(0xa5d),_0x2f2dd9),this['push'](_0x176916(0x233),_0x2f2dd9,_0x441b59,![]),this[_0x176916(0x365)](_0x2f2dd9,_0x17563c,_0xa591d5,_0x2dd5fd);},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x404)]=function(_0x18d956){const _0x29d487=_0x444cf3;if(!_0x18d956[_0x29d487(0x63e)]())return![];if(!_0x18d956[_0x29d487(0x9c7)]())return![];if(!_0x18d956['isForOpponent']())return![];return VisuMZ[_0x29d487(0x7cf)][_0x29d487(0x52b)][_0x29d487(0x57a)][_0x29d487(0x909)];},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x88e)]=function(_0x40db64,_0x4d3db9,_0x30f80d){const _0x373fcd=_0x444cf3,_0x31de8c=_0x40db64['getAttackMotion']()[_0x373fcd(0x86a)]<0x2,_0x23c3f8=0x14,_0x250258=0x30;if(_0x31de8c){this[_0x373fcd(0x87e)](_0x373fcd(0x44a),[_0x40db64],_0x250258,_0x23c3f8);const _0x55d98a=_0x30f80d[_0x373fcd(0xa40)]>0x1?_0x373fcd(0x71d):'front\x20base';this['push']('performMoveToTargets',_0x40db64,_0x30f80d,_0x55d98a,_0x23c3f8,!![],_0x373fcd(0xafa),!![]),this[_0x373fcd(0x87e)](_0x373fcd(0x9af),[_0x40db64],_0x373fcd(0x7e1)),this[_0x373fcd(0x87e)](_0x373fcd(0x6fe));}let _0x35e7e3=_0x4d3db9[_0x373fcd(0x71f)]()?this['getDualWieldTimes'](_0x40db64):0x1;for(let _0x4cae2f=0x0;_0x4cae2f<_0x35e7e3;_0x4cae2f++){_0x4d3db9[_0x373fcd(0x71f)]()&&_0x40db64['isActor']()&&this[_0x373fcd(0x87e)](_0x373fcd(0x5da),_0x40db64,_0x4cae2f),this[_0x373fcd(0x68a)](_0x40db64,_0x4d3db9,_0x30f80d);}_0x4d3db9[_0x373fcd(0x71f)]()&&_0x40db64[_0x373fcd(0xa93)]()&&this[_0x373fcd(0x87e)](_0x373fcd(0xa5d),_0x40db64),this[_0x373fcd(0x87e)](_0x373fcd(0x233),_0x40db64,_0x30f80d,![]),this[_0x373fcd(0x365)](_0x40db64,_0x31de8c,_0x250258,_0x23c3f8);},Window_BattleLog['prototype'][_0x444cf3(0x309)]=function(_0x920edf,_0x1114ee,_0x3b33c9){const _0x2913e7=_0x444cf3,_0x3af95d=_0x1114ee[_0x2913e7(0x39a)]();for(const _0x294b6a of _0x3b33c9){if(!_0x294b6a)continue;this[_0x2913e7(0x87e)]('performAction',_0x920edf,_0x1114ee),this[_0x2913e7(0x87e)]('waitCount',Sprite_Battler[_0x2913e7(0xa7e)]),this[_0x2913e7(0x87e)](_0x2913e7(0x1b6),_0x920edf,[_0x294b6a],_0x3af95d['animationId']),this[_0x2913e7(0x87e)](_0x2913e7(0x83e),0x18),this[_0x2913e7(0x87e)](_0x2913e7(0x876),_0x920edf,_0x294b6a);}},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x68a)]=function(_0x1b430c,_0x41ff04,_0x47cd27){const _0x16a32f=_0x444cf3,_0x50c1f8=_0x41ff04[_0x16a32f(0x39a)]();let _0x5787ce=_0x41ff04[_0x16a32f(0x71f)]()?0x1+_0x1b430c[_0x16a32f(0x3e5)]():0x1;while(_0x5787ce--){this[_0x16a32f(0x87e)](_0x16a32f(0x36a),_0x1b430c,_0x41ff04),this[_0x16a32f(0x87e)](_0x16a32f(0x83e),Sprite_Battler[_0x16a32f(0xa7e)]),this[_0x16a32f(0x87e)]('showAnimation',_0x1b430c,_0x47cd27['clone'](),_0x50c1f8[_0x16a32f(0x50d)]),this[_0x16a32f(0x87e)]('waitForAnimation');}for(const _0x1a51ea of _0x47cd27){if(!_0x1a51ea)continue;this[_0x16a32f(0x87e)](_0x16a32f(0x876),_0x1b430c,_0x1a51ea);}},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x538)]=function(_0xacd0bb,_0x281fcf,_0x4ef16c){const _0x3feb8d=_0x444cf3,_0x3915bf=_0x281fcf[_0x3feb8d(0x39a)]();this[_0x3feb8d(0x87e)](_0x3feb8d(0x233),_0xacd0bb,_0x4ef16c,![]),this['push'](_0x3feb8d(0x459)),this[_0x3feb8d(0x87e)](_0x3feb8d(0xb2f)),this[_0x3feb8d(0x87e)](_0x3feb8d(0x667)),this[_0x3feb8d(0x87e)]('performActionEnd',_0xacd0bb),this[_0x3feb8d(0x87e)]('waitForMovement');},Window_BattleLog[_0x444cf3(0x8f4)]['endAction']=function(_0x32d8af){},VisuMZ['BattleCore'][_0x444cf3(0x565)]=Window_BattleLog['prototype']['displayCurrentState'],Window_BattleLog[_0x444cf3(0x8f4)]['displayCurrentState']=function(_0x3fc4d9){const _0x1637c0=_0x444cf3;if(!VisuMZ[_0x1637c0(0x7cf)][_0x1637c0(0x52b)][_0x1637c0(0xad1)][_0x1637c0(0x300)])return;VisuMZ['BattleCore']['Window_BattleLog_displayCurrentState'][_0x1637c0(0x4a6)](this,_0x3fc4d9);},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x4d9)]=function(_0x5eaa9d){const _0x4b33bd=_0x444cf3;this[_0x4b33bd(0x87e)](_0x4b33bd(0xac6),_0x5eaa9d);VisuMZ[_0x4b33bd(0x7cf)]['Settings'][_0x4b33bd(0x57a)][_0x4b33bd(0x2e0)]&&this['push'](_0x4b33bd(0x1b6),_0x5eaa9d,[BattleManager[_0x4b33bd(0x55d)]],-0x1);if(!VisuMZ[_0x4b33bd(0x7cf)][_0x4b33bd(0x52b)]['BattleLog']['ShowCounter'])return;this[_0x4b33bd(0x87e)]('addText',TextManager[_0x4b33bd(0x8ad)][_0x4b33bd(0x7d7)](_0x5eaa9d['name']()));},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x6e6)]=function(_0x233954){const _0x55ca8e=_0x444cf3;this['push'](_0x55ca8e(0xb09),_0x233954);if(!VisuMZ[_0x55ca8e(0x7cf)][_0x55ca8e(0x52b)][_0x55ca8e(0xad1)]['ShowReflect'])return;this['push'](_0x55ca8e(0x548),TextManager[_0x55ca8e(0x70f)][_0x55ca8e(0x7d7)](_0x233954['name']()));},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x2a0)]=function(_0x186cb3,_0x224718){const _0x114ab6=_0x444cf3;if(VisuMZ[_0x114ab6(0x7cf)][_0x114ab6(0x52b)][_0x114ab6(0x57a)][_0x114ab6(0x53b)]){const _0x145a7b=_0x224718['item']();this['push']('showAnimation',_0x186cb3,[_0x186cb3],_0x145a7b[_0x114ab6(0x50d)]);}},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x986)]=function(_0x24b0bb,_0x54c305){const _0x16b030=_0x444cf3;this[_0x16b030(0x87e)](_0x16b030(0x5ff),_0x24b0bb,_0x54c305);if(!VisuMZ['BattleCore'][_0x16b030(0x52b)][_0x16b030(0xad1)][_0x16b030(0x25c)])return;const _0x4af9a6=_0x24b0bb['name'](),_0x17fbcd=TextManager['substitute'][_0x16b030(0x7d7)](_0x4af9a6,_0x54c305[_0x16b030(0x21a)]());this['push'](_0x16b030(0x548),_0x17fbcd);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x424)]=Window_BattleLog[_0x444cf3(0x8f4)]['displayActionResults'],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x82c)]=function(_0x851ca2,_0x51ab86){const _0x4c423a=_0x444cf3;VisuMZ[_0x4c423a(0x7cf)][_0x4c423a(0x424)][_0x4c423a(0x4a6)](this,_0x851ca2,_0x51ab86);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x210)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xaea)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xaea)]=function(_0x512254){const _0x42e460=_0x444cf3;if(!VisuMZ['BattleCore'][_0x42e460(0x52b)][_0x42e460(0xad1)][_0x42e460(0x976)])return;VisuMZ[_0x42e460(0x7cf)][_0x42e460(0x210)][_0x42e460(0x4a6)](this,_0x512254);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x2ff)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x277)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x277)]=function(_0x1df2a9){const _0x472813=_0x444cf3;if(!VisuMZ['BattleCore'][_0x472813(0x52b)][_0x472813(0xad1)][_0x472813(0xa0e)])return;VisuMZ[_0x472813(0x7cf)][_0x472813(0x2ff)]['call'](this,_0x1df2a9);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x711)]=Window_BattleLog['prototype'][_0x444cf3(0x7df)],Window_BattleLog['prototype'][_0x444cf3(0x7df)]=function(_0x5834fe){const _0x15a76d=_0x444cf3;!VisuMZ['BattleCore'][_0x15a76d(0x52b)][_0x15a76d(0xad1)]['ShowMissEvasion']?this[_0x15a76d(0x87e)]('performMiss',_0x5834fe):VisuMZ['BattleCore']['Window_BattleLog_displayMiss']['call'](this,_0x5834fe);},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xab2)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x637)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x637)]=function(_0x3d26f9){const _0x4b4fd0=_0x444cf3;!VisuMZ['BattleCore'][_0x4b4fd0(0x52b)]['BattleLog'][_0x4b4fd0(0x1e9)]?_0x3d26f9[_0x4b4fd0(0x6d1)]()[_0x4b4fd0(0x444)]?this[_0x4b4fd0(0x87e)](_0x4b4fd0(0x4db),_0x3d26f9):this[_0x4b4fd0(0x87e)]('performMagicEvasion',_0x3d26f9):VisuMZ[_0x4b4fd0(0x7cf)][_0x4b4fd0(0xab2)][_0x4b4fd0(0x4a6)](this,_0x3d26f9);},Window_BattleLog['prototype'][_0x444cf3(0x217)]=function(_0x3374f4){const _0x4038b6=_0x444cf3;_0x3374f4[_0x4038b6(0x6d1)]()[_0x4038b6(0x4e5)]&&(_0x3374f4[_0x4038b6(0x7d3)]=0x0,_0x3374f4[_0x4038b6(0x6d1)]()[_0x4038b6(0xa7d)]>0x0&&!_0x3374f4[_0x4038b6(0x6d1)]()[_0x4038b6(0xa9b)]&&(_0x3374f4['_lastHpDamage']=_0x3374f4['result']()[_0x4038b6(0xa7d)],this[_0x4038b6(0x87e)](_0x4038b6(0x23b),_0x3374f4)),_0x3374f4[_0x4038b6(0x6d1)]()[_0x4038b6(0xa7d)]<0x0&&this[_0x4038b6(0x87e)](_0x4038b6(0x733),_0x3374f4),VisuMZ[_0x4038b6(0x7cf)][_0x4038b6(0x52b)][_0x4038b6(0xad1)]['ShowHpDmg']&&this[_0x4038b6(0x87e)](_0x4038b6(0x548),this[_0x4038b6(0x630)](_0x3374f4)));},VisuMZ['BattleCore'][_0x444cf3(0x339)]=Window_BattleLog['prototype'][_0x444cf3(0x6b5)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x6b5)]=function(_0x3aa2a1){const _0x465a9d=_0x444cf3;if(!VisuMZ[_0x465a9d(0x7cf)][_0x465a9d(0x52b)][_0x465a9d(0xad1)][_0x465a9d(0x938)])return;VisuMZ['BattleCore']['Window_BattleLog_displayMpDamage'][_0x465a9d(0x4a6)](this,_0x3aa2a1);},VisuMZ['BattleCore'][_0x444cf3(0x917)]=Window_BattleLog['prototype'][_0x444cf3(0x69e)],Window_BattleLog['prototype'][_0x444cf3(0x69e)]=function(_0x40ae29){const _0x27d5c6=_0x444cf3;if(!VisuMZ[_0x27d5c6(0x7cf)][_0x27d5c6(0x52b)][_0x27d5c6(0xad1)][_0x27d5c6(0xaa2)])return;VisuMZ[_0x27d5c6(0x7cf)][_0x27d5c6(0x917)][_0x27d5c6(0x4a6)](this,_0x40ae29);},Window_BattleLog[_0x444cf3(0x8f4)]['displayAffectedStatus']=function(_0x1a813c){const _0x3a1f81=_0x444cf3;_0x1a813c[_0x3a1f81(0x6d1)]()[_0x3a1f81(0x4d2)]()&&(this[_0x3a1f81(0x87e)](_0x3a1f81(0x5e7)),this[_0x3a1f81(0x509)](_0x1a813c),this[_0x3a1f81(0x9e6)](_0x1a813c),this[_0x3a1f81(0x87e)](_0x3a1f81(0x459)));},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x616)]=function(_0xed4cbb){const _0x1fe625=_0x444cf3,_0x4ece45=_0xed4cbb['result'](),_0x30481a=_0x4ece45[_0x1fe625(0x9c6)]();for(const _0x3b59b0 of _0x30481a){const _0x1e5234=_0xed4cbb[_0x1fe625(0xa93)]()?_0x3b59b0['message1']:_0x3b59b0[_0x1fe625(0x7f6)];_0x1e5234&&VisuMZ[_0x1fe625(0x7cf)][_0x1fe625(0x52b)][_0x1fe625(0xad1)][_0x1fe625(0x346)]&&(this[_0x1fe625(0x87e)]('fnordAddedStates'),this[_0x1fe625(0x87e)](_0x1fe625(0x9b3)),this[_0x1fe625(0x87e)](_0x1fe625(0x5e7)),this[_0x1fe625(0x87e)](_0x1fe625(0x548),_0x1e5234[_0x1fe625(0x7d7)](_0xed4cbb['name']())),this['push'](_0x1fe625(0xb16))),_0x3b59b0['id']===_0xed4cbb[_0x1fe625(0xa25)]()&&this['push'](_0x1fe625(0x62d),_0xed4cbb);}},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xa8e)]=function(){},Window_BattleLog[_0x444cf3(0x8f4)]['displayRemovedStates']=function(_0x1d1b1a){const _0x2cecdf=_0x444cf3;if(!VisuMZ['BattleCore'][_0x2cecdf(0x52b)][_0x2cecdf(0xad1)][_0x2cecdf(0x910)])return;const _0x5e2407=_0x1d1b1a['result'](),_0x16276d=_0x5e2407[_0x2cecdf(0xa65)]();for(const _0x1ab4d2 of _0x16276d){_0x1ab4d2['message4']&&(this[_0x2cecdf(0x87e)]('fnordRemovedStates'),this[_0x2cecdf(0x87e)](_0x2cecdf(0x9b3)),this[_0x2cecdf(0x87e)](_0x2cecdf(0x5e7)),this[_0x2cecdf(0x87e)](_0x2cecdf(0x548),_0x1ab4d2['message4'][_0x2cecdf(0x7d7)](_0x1d1b1a[_0x2cecdf(0x21a)]())),this[_0x2cecdf(0x87e)]('wait'));}},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xa4f)]=function(){},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x9e6)]=function(_0x1a8445){const _0x1f2529=_0x444cf3,_0x473d85=VisuMZ[_0x1f2529(0x7cf)]['Settings'][_0x1f2529(0xad1)],_0x508f4a=_0x1a8445['result']();if(_0x473d85[_0x1f2529(0x241)])this[_0x1f2529(0x375)](_0x1a8445,_0x508f4a[_0x1f2529(0xab0)],TextManager['buffAdd']);if(_0x473d85[_0x1f2529(0x6a9)])this['displayBuffs'](_0x1a8445,_0x508f4a[_0x1f2529(0x381)],TextManager[_0x1f2529(0x52a)]);if(_0x473d85[_0x1f2529(0x3d4)])this[_0x1f2529(0x375)](_0x1a8445,_0x508f4a[_0x1f2529(0x2e7)],TextManager['buffRemove']);},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x375)]=function(_0x547632,_0x314edf,_0x583e60){const _0x36c607=_0x444cf3;for(const _0x39b499 of _0x314edf){const _0x568556=_0x583e60[_0x36c607(0x7d7)](_0x547632[_0x36c607(0x21a)](),TextManager[_0x36c607(0x46e)](_0x39b499));this[_0x36c607(0x87e)]('popBaseLine'),this[_0x36c607(0x87e)]('pushBaseLine'),this[_0x36c607(0x87e)](_0x36c607(0x548),_0x568556),this[_0x36c607(0x87e)](_0x36c607(0xb16));}},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x682)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x667)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x667)]=function(){const _0x23b2f4=_0x444cf3;VisuMZ[_0x23b2f4(0x7cf)]['Window_BattleLog_clear'][_0x23b2f4(0x4a6)](this),this['callNextMethod']();},VisuMZ['BattleCore'][_0x444cf3(0xa0b)]=Window_BattleLog['prototype']['pushBaseLine'],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x5e7)]=function(){const _0x14306b=_0x444cf3;VisuMZ[_0x14306b(0x7cf)]['Window_BattleLog_pushBaseLine']['call'](this),this[_0x14306b(0x1f8)]();},VisuMZ[_0x444cf3(0x7cf)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x9b3)],Window_BattleLog[_0x444cf3(0x8f4)]['popBaseLine']=function(){const _0x5edfe4=_0x444cf3;VisuMZ['BattleCore'][_0x5edfe4(0x2a8)][_0x5edfe4(0x4a6)](this),this[_0x5edfe4(0x57b)](),this[_0x5edfe4(0x1f8)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x9ad)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x48e)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x48e)]=function(_0x1fc7a1){const _0x2e891d=_0x444cf3;VisuMZ[_0x2e891d(0x7cf)][_0x2e891d(0x9ad)][_0x2e891d(0x4a6)](this,_0x1fc7a1),this['callNextMethod']();},Window_BattleLog['prototype'][_0x444cf3(0x459)]=function(){const _0x1aee3c=_0x444cf3;let _0x41d45f=0x0;this[_0x1aee3c(0x303)][_0x1aee3c(0xa40)]>0x0&&(_0x41d45f=this['_baseLineStack'][this['_baseLineStack'][_0x1aee3c(0xa40)]-0x1]),this[_0x1aee3c(0xa0c)][_0x1aee3c(0xa40)]>_0x41d45f?this[_0x1aee3c(0xb16)]():this['callNextMethod']();},VisuMZ[_0x444cf3(0x7cf)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xb0e)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xb0e)]=function(_0x169b26,_0x42a146){const _0x4c5383=_0x444cf3;VisuMZ[_0x4c5383(0x7cf)][_0x4c5383(0x64d)][_0x4c5383(0x4a6)](this,_0x169b26,_0x42a146),this[_0x4c5383(0x1f8)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x72d)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x36a)],Window_BattleLog[_0x444cf3(0x8f4)]['performAction']=function(_0x11b133,_0x39572c){const _0x12b55f=_0x444cf3;VisuMZ[_0x12b55f(0x7cf)]['Window_BattleLog_performAction'][_0x12b55f(0x4a6)](this,_0x11b133,_0x39572c),this['callNextMethod']();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x7c9)]=Window_BattleLog['prototype'][_0x444cf3(0x72b)],Window_BattleLog[_0x444cf3(0x8f4)]['performActionEnd']=function(_0x1a080e){const _0x25e8aa=_0x444cf3;VisuMZ['BattleCore']['Window_BattleLog_performActionEnd'][_0x25e8aa(0x4a6)](this,_0x1a080e);for(const _0x48857b of BattleManager[_0x25e8aa(0x4ff)]()){if(!_0x48857b)continue;if(_0x48857b[_0x25e8aa(0x678)]())continue;_0x48857b[_0x25e8aa(0x321)]();}this[_0x25e8aa(0x1f8)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0xafc)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x23b)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x23b)]=function(_0x374148){const _0x52e4f6=_0x444cf3;VisuMZ['BattleCore'][_0x52e4f6(0xafc)][_0x52e4f6(0x4a6)](this,_0x374148),this['callNextMethod']();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x27c)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x80f)],Window_BattleLog[_0x444cf3(0x8f4)]['performMiss']=function(_0x4859bb){const _0x577d98=_0x444cf3;VisuMZ[_0x577d98(0x7cf)][_0x577d98(0x27c)][_0x577d98(0x4a6)](this,_0x4859bb),this[_0x577d98(0x1f8)]();},VisuMZ['BattleCore']['Window_BattleLog_performRecovery']=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x733)],Window_BattleLog['prototype'][_0x444cf3(0x733)]=function(_0x4db595){const _0x5146e9=_0x444cf3;VisuMZ[_0x5146e9(0x7cf)][_0x5146e9(0xad8)][_0x5146e9(0x4a6)](this,_0x4db595),this[_0x5146e9(0x1f8)]();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x65d)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x4db)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x4db)]=function(_0x4dd8dc){const _0x5f10a5=_0x444cf3;VisuMZ[_0x5f10a5(0x7cf)][_0x5f10a5(0x65d)][_0x5f10a5(0x4a6)](this,_0x4dd8dc),this[_0x5f10a5(0x1f8)]();},VisuMZ['BattleCore'][_0x444cf3(0x31f)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x5de)],Window_BattleLog['prototype'][_0x444cf3(0x5de)]=function(_0x47f6bb){const _0x218cac=_0x444cf3;VisuMZ[_0x218cac(0x7cf)][_0x218cac(0x31f)][_0x218cac(0x4a6)](this,_0x47f6bb),this[_0x218cac(0x1f8)]();},VisuMZ['BattleCore'][_0x444cf3(0xabb)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xac6)],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xac6)]=function(_0xd8dbbf){const _0x4a70c1=_0x444cf3;VisuMZ[_0x4a70c1(0x7cf)][_0x4a70c1(0xabb)][_0x4a70c1(0x4a6)](this,_0xd8dbbf),this[_0x4a70c1(0x1f8)]();},VisuMZ['BattleCore']['Window_BattleLog_performReflection']=Window_BattleLog[_0x444cf3(0x8f4)]['performReflection'],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0xb09)]=function(_0x3dedd3){const _0x4543c4=_0x444cf3;VisuMZ[_0x4543c4(0x7cf)]['Window_BattleLog_performReflection'][_0x4543c4(0x4a6)](this,_0x3dedd3),this[_0x4543c4(0x1f8)]();},VisuMZ['BattleCore']['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x444cf3(0x8f4)]['performSubstitute'],Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x5ff)]=function(_0x1f6e5a,_0x101dd6){const _0x385c8d=_0x444cf3;VisuMZ[_0x385c8d(0x7cf)]['Window_BattleLog_performSubstitute'][_0x385c8d(0x4a6)](this,_0x1f6e5a,_0x101dd6),this['callNextMethod']();},VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x3e4)]=Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x62d)],Window_BattleLog['prototype']['performCollapse']=function(_0x5f4f4e){const _0x3c3dc3=_0x444cf3;VisuMZ[_0x3c3dc3(0x7cf)]['Window_BattleLog_performCollapse'][_0x3c3dc3(0x4a6)](this,_0x5f4f4e),this['callNextMethod']();},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x53e)]=function(_0x3430cf,_0x392183){const _0x5883e4=_0x444cf3;_0x3430cf[_0x5883e4(0x53e)](_0x392183),this[_0x5883e4(0x1f8)]();},Window_BattleLog[_0x444cf3(0x8f4)]['showEnemyAttackAnimation']=function(_0x2436f6,_0x2e0bb1){const _0x4d0865=_0x444cf3,_0x5243de=_0x2436f6[_0x4d0865(0x32d)]();_0x5243de<=0x0?SoundManager['playEnemyAttack']():this[_0x4d0865(0x1d3)](_0x2e0bb1,_0x5243de);},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x233)]=function(_0x328929,_0x994e19,_0x2f783d){const _0x5efc5b=_0x444cf3,_0x400dce=[_0x328929][_0x5efc5b(0x66d)](_0x994e19);for(const _0x28ecf3 of _0x400dce){if(!_0x28ecf3)continue;_0x28ecf3[_0x5efc5b(0x832)](_0x2f783d);}this['callNextMethod']();},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x83e)]=function(_0x1bfb1a){const _0x12153c=_0x444cf3;this[_0x12153c(0x31a)]=_0x1bfb1a;},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x9af)]=function(_0x17848e,_0x4a00d7){for(const _0x500ef9 of _0x17848e){if(!_0x500ef9)continue;_0x500ef9['requestMotion'](_0x4a00d7);}this['callNextMethod']();},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x418)]=function(_0xb2736,_0x481c88,_0x49f29b,_0x44728c,_0x568e3c,_0x304757){const _0x386126=_0x444cf3;_0xb2736['moveBattlerToPoint'](_0x481c88,_0x49f29b,_0x44728c,_0x568e3c,_0x304757,-0x1),this[_0x386126(0x1f8)]();},Window_BattleLog['prototype']['performMoveToTargets']=function(_0x41dcfa,_0x57391c,_0x1fd423,_0x31104d,_0x1164d9,_0x47d965,_0x215ed4){const _0x2325fc=_0x444cf3,_0x7deb8f=Math[_0x2325fc(0x349)](..._0x57391c[_0x2325fc(0x7f8)](_0x5a96b1=>_0x5a96b1[_0x2325fc(0x516)]()[_0x2325fc(0x3d2)]-_0x5a96b1['battler']()['mainSpriteWidth']()/0x2)),_0x4a0a1a=Math[_0x2325fc(0x642)](..._0x57391c[_0x2325fc(0x7f8)](_0x19166c=>_0x19166c[_0x2325fc(0x516)]()['_baseX']+_0x19166c[_0x2325fc(0x516)]()['mainSpriteWidth']()/0x2)),_0x859e78=Math[_0x2325fc(0x349)](..._0x57391c['map'](_0x1458aa=>_0x1458aa[_0x2325fc(0x516)]()[_0x2325fc(0x801)]-_0x1458aa[_0x2325fc(0x516)]()[_0x2325fc(0x6bc)]())),_0x3c57cb=Math['max'](..._0x57391c[_0x2325fc(0x7f8)](_0x1a7a5c=>_0x1a7a5c[_0x2325fc(0x516)]()[_0x2325fc(0x801)])),_0x573b87=_0x57391c[_0x2325fc(0x4d3)](_0x214219=>_0x214219[_0x2325fc(0xa93)]())[_0x2325fc(0xa40)],_0x4c5dca=_0x57391c[_0x2325fc(0x4d3)](_0x4aee7c=>_0x4aee7c['isEnemy']())['length'];let _0x3624f2=0x0,_0x5b8472=0x0;if(_0x1fd423[_0x2325fc(0x6b8)](/front/i))_0x3624f2=_0x573b87>=_0x4c5dca?_0x7deb8f:_0x4a0a1a;else{if(_0x1fd423[_0x2325fc(0x6b8)](/middle/i))_0x3624f2=(_0x7deb8f+_0x4a0a1a)/0x2,_0x215ed4=-0x1;else _0x1fd423['match'](/back/i)&&(_0x3624f2=_0x573b87>=_0x4c5dca?_0x4a0a1a:_0x7deb8f);}if(_0x1fd423[_0x2325fc(0x6b8)](/head/i))_0x5b8472=_0x859e78;else{if(_0x1fd423[_0x2325fc(0x6b8)](/center/i)){_0x5b8472=(_0x859e78+_0x3c57cb)/0x2;if(_0x41dcfa['battler']())_0x5b8472+=_0x41dcfa[_0x2325fc(0x516)]()['height']/0x2;}else _0x1fd423[_0x2325fc(0x6b8)](/base/i)&&(_0x5b8472=_0x3c57cb);}_0x41dcfa[_0x2325fc(0x64e)](_0x3624f2,_0x5b8472,_0x31104d,_0x1164d9,_0x47d965,_0x215ed4),this[_0x2325fc(0x1f8)]();},Window_BattleLog[_0x444cf3(0x8f4)][_0x444cf3(0x44a)]=function(_0x39ebae,_0x48d64d,_0x46cef7){const _0x31dfd5=_0x444cf3;for(const _0xc3b69f of _0x39ebae){if(!_0xc3b69f)continue;_0xc3b69f[_0x31dfd5(0x79f)](_0x48d64d,_0x46cef7);}this[_0x31dfd5(0x1f8)]();};function Window_BattleMultiTarget(){this['initialize'](...arguments);}Window_BattleMultiTarget[_0x444cf3(0x8f4)]=Object['create'](Window_Command['prototype']),Window_BattleMultiTarget[_0x444cf3(0x8f4)][_0x444cf3(0x427)]=Window_BattleMultiTarget,VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)][_0x444cf3(0x2c6)]=VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)][_0x444cf3(0x2c6)]||{},Window_BattleMultiTarget[_0x444cf3(0x461)]=VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)][_0x444cf3(0x2c6)][_0x444cf3(0x7e7)]??0x118,Window_BattleMultiTarget[_0x444cf3(0x7ba)]=VisuMZ['BattleCore'][_0x444cf3(0x52b)][_0x444cf3(0x2c6)]['BgType']??0x2,Window_BattleMultiTarget[_0x444cf3(0xb13)]=VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)][_0x444cf3(0x2c6)]['ShowButton']??!![],Window_BattleMultiTarget['ALL_ACTORS']=VisuMZ['BattleCore']['Settings']['MultiTarget'][_0x444cf3(0x82d)]??_0x444cf3(0x55a),Window_BattleMultiTarget[_0x444cf3(0x37c)]=VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)][_0x444cf3(0x2c6)]['AllEnemiesText']??_0x444cf3(0x704),Window_BattleMultiTarget[_0x444cf3(0x653)]=VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)][_0x444cf3(0x2c6)]['ActorOffsetX']??0x0,Window_BattleMultiTarget[_0x444cf3(0x320)]=VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)][_0x444cf3(0x2c6)]['ActorOffsetY']??0x0,Window_BattleMultiTarget[_0x444cf3(0xa79)]=VisuMZ['BattleCore'][_0x444cf3(0x52b)]['MultiTarget'][_0x444cf3(0x5f2)]??0x0,Window_BattleMultiTarget[_0x444cf3(0x868)]=VisuMZ[_0x444cf3(0x7cf)][_0x444cf3(0x52b)][_0x444cf3(0x2c6)][_0x444cf3(0x749)]??0x0,Window_BattleMultiTarget[_0x444cf3(0x8f4)][_0x444cf3(0x207)]=function(_0x4aa7df,_0x5db981){const _0x34e92c=_0x444cf3;this[_0x34e92c(0x43b)]=_0x5db981,Window_Command[_0x34e92c(0x8f4)][_0x34e92c(0x207)][_0x34e92c(0x4a6)](this,_0x4aa7df),this[_0x34e92c(0x9b6)](Window_BattleMultiTarget[_0x34e92c(0x7ba)]),this['deactivate'](),this[_0x34e92c(0x479)](),this[_0x34e92c(0x51e)]();},Window_BattleMultiTarget[_0x444cf3(0x8f4)][_0x444cf3(0x5c2)]=function(){return this['_forActor'];},Window_BattleMultiTarget[_0x444cf3(0x8f4)][_0x444cf3(0x2f2)]=function(){const _0x4b63d9=_0x444cf3;let _0x1e4ae7=this[_0x4b63d9(0x5c2)]()?Window_BattleMultiTarget[_0x4b63d9(0x3a9)]:Window_BattleMultiTarget[_0x4b63d9(0x37c)];if(Imported[_0x4b63d9(0x8d5)]&&Window_BattleMultiTarget[_0x4b63d9(0xb13)]){this['_buttonKey']=this['forActor']()?_0x4b63d9(0x26b):_0x4b63d9(0x1c4),this['_buttonText']=TextManager['getInputButtonString'](this[_0x4b63d9(0x200)]);const _0x116122=VisuMZ[_0x4b63d9(0xa89)][_0x4b63d9(0x52b)]['ButtonAssist'][_0x4b63d9(0x30f)];_0x1e4ae7=_0x116122[_0x4b63d9(0x7d7)](this[_0x4b63d9(0x1e4)],_0x1e4ae7);}this[_0x4b63d9(0x394)](_0x1e4ae7,_0x4b63d9(0x434));},Window_BattleMultiTarget['prototype'][_0x444cf3(0x356)]=function(_0x1fc943){const _0x6170cb=_0x444cf3,_0x3854bf=this[_0x6170cb(0xa04)](_0x1fc943);this[_0x6170cb(0x4ef)](),this[_0x6170cb(0x223)](this[_0x6170cb(0x7c1)](_0x1fc943));const _0x381a2f=this[_0x6170cb(0x8a4)](_0x1fc943),_0xc00a9c=this[_0x6170cb(0x802)](_0x381a2f)[_0x6170cb(0x851)],_0x327ee5=_0x3854bf['x']+Math['floor']((_0x3854bf['width']-_0xc00a9c)/0x2);this[_0x6170cb(0x2d4)](_0x381a2f,_0x327ee5,_0x3854bf['y'],_0x3854bf[_0x6170cb(0x851)]);},Window_BattleMultiTarget[_0x444cf3(0x8f4)][_0x444cf3(0x7b9)]=function(){const _0x23412c=_0x444cf3;Window_Command[_0x23412c(0x8f4)][_0x23412c(0x7b9)][_0x23412c(0x4a6)](this),this[_0x23412c(0x50f)](),this[_0x23412c(0x3ef)]();},Window_BattleMultiTarget['prototype'][_0x444cf3(0x50f)]=function(){const _0x22fc51=_0x444cf3;this[_0x22fc51(0x30c)]=this[_0x22fc51(0x786)]();},Window_BattleMultiTarget[_0x444cf3(0x8f4)][_0x444cf3(0x786)]=function(){const _0x3d13d8=_0x444cf3,_0x1d9e4c=BattleManager['inputtingAction'](),_0x465b93=_0x1d9e4c&&_0x1d9e4c['canSingleOrMultipleSelect']();if(!_0x465b93)return![];const _0x1287a4=SceneManager[_0x3d13d8(0xa67)];if(this[_0x3d13d8(0x5c2)]()){if(_0x1287a4[_0x3d13d8(0x684)][_0x3d13d8(0x257)]&&_0x1287a4[_0x3d13d8(0x684)][_0x3d13d8(0x728)][_0x3d13d8(0x26b)])return!![];if(_0x1287a4[_0x3d13d8(0x6d5)][_0x3d13d8(0x257)]&&_0x1287a4['_enemyWindow'][_0x3d13d8(0x728)]['pagedown'])return!![];}else{if(_0x1287a4['_enemyWindow']['active']&&_0x1287a4[_0x3d13d8(0x6d5)]['_handlers'][_0x3d13d8(0x1c4)])return!![];}return![];},Window_BattleMultiTarget['prototype']['updateKeyboardKeys']=function(){const _0x13d1fa=_0x444cf3;if(!Imported['VisuMZ_0_CoreEngine'])return;this[_0x13d1fa(0x1e4)]!==TextManager[_0x13d1fa(0x9c2)](this[_0x13d1fa(0x200)])&&this[_0x13d1fa(0x60e)]();},Window_BattleMultiTarget[_0x444cf3(0x8f4)][_0x444cf3(0x5c8)]=function(){const _0x492579=_0x444cf3;if(this[_0x492579(0x30c)]&&TouchInput[_0x492579(0x4a1)]()){const _0x346925=this[_0x492579(0xa66)]();if(_0x346925>=0x0){const _0x15e8c7=this[_0x492579(0x5c2)]()?_0x492579(0x26b):_0x492579(0x1c4);Input[_0x492579(0x7a8)](_0x15e8c7);}}};